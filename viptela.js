/* Copyright (c) 2018 vIPtela Inc. All rights reserved. */
"use strict";
function appConfig(a) {
    function b() {
        return c === a.LOCAL_ENVIRONMENT.name ? a.LOCAL_ENVIRONMENT.baseURL : c === a.DEV_ENVIRONMENT.name ? a.DEV_ENVIRONMENT.baseURL : a.PROD_ENVIRONMENT.baseURL
    }
    var c = "production";
    return {
        baseURL: b()
    }
}
function AppController(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D) {
    function E(a) {
        a < 1024 && $("body").addClass("side-nav-collapsed")
    }
    function F() {
        function a() {
            d("subscribe")
        }
        function c() {
            d("subscribe")
        }
        function d(e) {
            "subscribe" === e ? (G = b.$on("device_event", function(b, e) {
                M.indexOf(e.eventChangeType) >= 0 && (m.updateCacheFromAPI().then(a, c),
                d("unsubscribe"))
            }),
            l.subscribe(L)) : "unsubscribe" === e && (l.unsubscribe(L),
            _.isFunction(G) && (G(),
            G = null))
        }
        function f() {
            h("subscribe")
        }
        function g() {
            h("subscribe")
        }
        function h(a) {
            "subscribe" === a ? (H = b.$on("maintenance-window_event", function(a, b) {
                O.indexOf(b.eventChangeType) >= 0 && (D.checkMaintenanceWindow().then(f, g),
                h("unsubscribe"))
            }),
            l.subscribe(N)) : "unsubscribe" === a && (l.unsubscribe(N),
            _.isFunction(H) && (H(),
            H = null))
        }
        n.init().then(function() {
            m.init()
        }, function(a) {
            e.error(a),
            m.init()
        }),
        d("subscribe"),
        h("subscribe")
    }
    var G, H, I = j.getWindowWidth(), J = l.returnEventsEnum(), K = l.returnViewsEnum(), L = new k(K.DEVICE_LIST_CACHE,[J.DEVICE]), M = ["create", "delete"], N = new k(K.SETTINGS,[J.MAINTENANCE_WINDOW]), O = ["update"];
    b.navigationTreeReady = g.isSidebarSet(),
    b.$watch(function() {
        return g.isSidebarSet()
    }, function(a) {
        if (a) {
            b.navigationTreeReady = a;
            c.current.name.split(".");
            i.setHelpDetails(c.current.name)
        }
    }, !0),
    E(I),
    b.sidebarMenuSlide = function() {
        $("body").hasClass("side-nav-collapsed") ? (b.$broadcast("closeSidebarMenu"),
        $("body").removeClass("side-nav-collapsed")) : $("body").addClass("side-nav-collapsed"),
        a.$broadcast("windowResizeEvent")
    }
    ,
    b.$on("IdleTimeout", function() {
        "app.config.template.device.configure" === c.current.name ? (B.hide(),
        b.warningModal = null,
        c.go("app.config.template.device")) : a.$broadcast("logoutUser", {
            url: "/logout.html?nocache=" + (new Date).getTime() + "&reason=sessiontimeout"
        })
    }),
    a.$on("logoutUser", function(b, c) {
        l.stopServerPolling(),
        l.unRegisterEventPoll().then(function() {
            a.logoutUserInitialized = !0,
            a.$destroy(),
            C(function() {
                d.location = c.url
            })
        })
    }),
    b.$on("IdleStart", function() {
        b.warningModal = B.show({
            templateUrl: "app/common/modalPartials/idleWarningModal.html",
            controller: "IdleWarningModalController",
            resolve: {
                CurrentStateIdle: function() {
                    return c.current.name
                }
            }
        })
    }),
    b.$on("IdleEnd", function() {
        B.hide(),
        b.warningModal = null
    });
    var P = a.$on("$stateChangeStart", function(b, c, d, f, j) {
        e.info("state transition beginning"),
        "app.monitor.devices" === c.name && (h.init(),
        a.$broadcast("networkClicked")),
        "app.monitor.stats" === c.name && (h.init(),
        a.$broadcast("statsClicked")),
        "app.tools.ssh" === c.name && a.$broadcast("sshTerminalClicked"),
        g.checkAccessFromState(c.name, d) && !angular.equals(c.name, "banner") || b.preventDefault(),
        i.setHelpDetails(c.name)
    });
    a.$on("$stateChangeSuccess", function(g, h, i, j, k) {
        b.$on("$viewContentLoaded", function() {
            e.info("DOM render complete"),
            d.scrollTo(0, 0)
        }),
        angular.isDefined(h.url) ? a.title = h.url.substring(1, h.url.length) : a.title = "",
        c.previousState = j,
        f.clear()
    }),
    a.$on("$stateChangeError", function(a, b, d, e, f, g) {
        g && g.state && c.go(g.state, g.params, g.options)
    }),
    a.$on("$stateNotFound", function(a, b, c, d) {
        e.info(b.to),
        e.info(b.toParams),
        e.info(b.options)
    }),
    b.$on("windowResizeEvent", function() {
        I = j.getWindowWidth(),
        E(I)
    }),
    g.getTenancyCheck() ? F() : g.checkTenancy().then(function() {
        g.initialize(),
        F()
    }, function(a) {}),
    b.$on("$destroy", function() {
        var a = function() {
            y.removeVSessionIdProperty(),
            y.setVSessionId(void 0)
        };
        d.sessionStorage.clear(),
        g.resetVariables(),
        A.destroySession(),
        x.resetFilters([]),
        v.resetFilters([]),
        w.resetFilters([]),
        o.resetVariables(),
        p.resetVariables(),
        q.resetVariables(),
        r.resetVariables(),
        s.resetVariables(),
        t.resetVariables(),
        z.resetVariables(),
        u.setPrevRealtimeResponse(void 0),
        P(),
        a()
    })
}
function AdminController(a) {
    console.log("Hello from AdminController")
}
function adminService(a, b, c) {
    var d = "dataservice/settings/configuration"
      , e = "/dataservice/admin/user"
      , f = "/dataservice/admin/user/password"
      , g = "/dataservice/admin/usergroup"
      , h = "/dataservice/admin/usergroup/definition"
      , i = "dataservice/settings/configuration/organization"
      , j = "dataservice/settings/configuration/device"
      , k = "dataservice/settings/configuration/certificate"
      , l = "dataservice/setting/configuration/webserver/certificate"
      , m = "/dataservice/device/action/software/vedge/version"
      , n = "/dataservice/device/action/ztp/upgrade"
      , o = "/dataservice/settings/configuration/banner"
      , p = "/dataservice/settings/banner"
      , q = "/dataservice/statistics/settings/status"
      , r = "dataservice/settings/configuration/cloudx"
      , s = "/dataservice/device"
      , t = "/dataservice/statistics/settings/disable/devicelist/"
      , u = "/dataservice/settings/configuration/analytics"
      , v = "/dataservice/settings/configuration/vedgecloud"
      , w = "/dataservice/clusterManagement/tenancy/mode"
      , x = "/dataservice/settings/configuration/clientSessionTimeout"
      , y = "/dataservice/settings/clientSessionTimeout"
      , z = "/dataservice/management/statsconfig"
      , A = "/dataservice/admin/user/password/validate"
      , B = "/dataservice/settings/configuration/vmanagedatastream"
      , C = "/dataservice/settings/configuration/maintenanceWindow"
      , D = "/dataservice/device/models/"
      , E = "dataservice/device/models?list=all";
    return {
        createGlobalSettings: function(b) {
            return a.post(d, b)
        },
        editGlobalSettings: function(b) {
            return a.put(d, b)
        },
        getGlobalSettings: function() {
            return a.get(d)
        },
        getOrgNameSettings: function() {
            return a.get(i)
        },
        setOrgNameSettings: function(b) {
            return a.post(i, b)
        },
        editOrgNameSettings: function(b) {
            return a.put(i, b)
        },
        getvBondSettings: function() {
            return a.get(j)
        },
        setvBondSettings: function(b) {
            return a.post(j, b)
        },
        editvBondSettings: function(b) {
            return a.put(j, b)
        },
        getCertificateSettings: function() {
            return a.get(k)
        },
        setCertificateSettings: function(b) {
            return a.post(k, b)
        },
        editCertificateSettings: function(b) {
            return a.put(k, b)
        },
        getWebServerSettings: function() {
            return a.get(l)
        },
        postWebServerSettings: function(b) {
            return a.post(l, b)
        },
        editWebServerSettings: function(b) {
            return a.put(l, b)
        },
        getSoftwareVersionList: function() {
            return a.get(m)
        },
        getSoftwareVersionSettings: function() {
            return a.get(n)
        },
        editSoftwareVersionSettings: function(b) {
            return a.post(n, b)
        },
        getUsers: function() {
            return a.get(e)
        },
        createUser: function(b) {
            return a.post(e, b)
        },
        editUser: function(b) {
            var c = e + "/" + b.userName;
            return a.put(c, b)
        },
        changePassword: function(b) {
            var c = f + "/" + b.userName;
            return a.put(c, b)
        },
        deleteUser: function(b) {
            var c = e + "/" + b;
            return a.delete(c)
        },
        getUserGroup: function() {
            return a.get(g)
        },
        getUserGroupTableDefinition: function() {
            return a.get(h)
        },
        createUserGroup: function(b) {
            return a.post(g, b)
        },
        updateUserGroup: function(b) {
            return a.put(g + "/" + b.groupName, b)
        },
        deleteUserGroup: function(b) {
            return a.delete(g + "/" + b)
        },
        getBannerInfoSetting: function() {
            return a.get(o)
        },
        getLoginBannerInfoSetting: function() {
            return a.get(p)
        },
        saveBannerInfoSetting: function(b) {
            return a.put(o, b)
        },
        getStatsSetting: function() {
            return a.get(q)
        },
        saveStatsSetting: function(b) {
            return a.put(q, b)
        },
        getCloudExpressSetting: function() {
            return a.get(r)
        },
        saveCloudExpressSetting: function(b) {
            return a.put(r, b)
        },
        getDeviceList: function() {
            return a.get(s)
        },
        getDisabledDeviceList: function(b) {
            var c = t + b;
            return a.get(c)
        },
        saveCustomStatsSetting: function(b, c) {
            var d = t + b;
            return a.put(d, c, {
                timeout: 12e4
            })
        },
        getAnalyticsSettings: function() {
            return a.get(u)
        },
        saveAnalyticsSettings: function(b) {
            return a.post(u, b)
        },
        getCloudCASettings: function() {
            return a.get(v)
        },
        saveCACloudSettings: function(b) {
            return a.put(v, b)
        },
        getClientSessionTimeout: function() {
            return a.get(y)
        },
        saveClientSessionTimeout: function(b) {
            return a.put(x, b)
        },
        getTenancyMode: function() {
            return a.get(w)
        },
        saveTenancyMode: function(b) {
            return a.post(w, b)
        },
        getDataStreamSettings: function() {
            return a.get(B)
        },
        saveDataStreamSettings: function(b) {
            return a.post(B, b)
        },
        getStatsConfiguration: function() {
            return a.get(z)
        },
        setStatsConfiguration: function(b) {
            return a.post(z, b)
        },
        validatePassword: function(b) {
            return a.post(A, b)
        },
        getMaintenanceWindow: function(b) {
            return a.get(C)
        },
        saveMaintenanceWindow: function(b) {
            return a.post(C, b)
        },
        getDeviceModels: function() {
            return a.get(D)
        },
        getAllDeviceModels: function() {
            return a.get(E)
        }
    }
}
function ClusterManagementController(a, b, c, d, e, f, g, h, i, j, k, l, m) {
    a.stateString = c.getStateString(b),
    a.hideAddVmanage = !1;
    var n = j.returnEventsEnum()
      , o = j.returnViewsEnum()
      , p = new k(o.CLUSTER_MANAGEMENT,[n.CLUSTER])
      , q = function(a) {
        b.go("app.admin.cluster_management.configuration", {
            vManageIP: a.deviceIP,
            display: "vManage_details"
        })
    };
    a.buttonFunctions = [],
    a.userMode = l.getUserMode(),
    "multiTenant-provider" === a.userMode.mode ? a.buttonFunctions.push({
        title: "Statistics Database Configuration",
        type: "Statistics Database Configuration",
        icon: "statsButtonIcon",
        vipRbac: "Cluster",
        allow: "Cluster",
        layoutClass: "actionButtonLayout",
        ButtonActionFn: function(b) {
            a.openStatsDBConfigTemplate(b)
        }
    }) : a.buttonFunctions.push({
        title: "Add vManage",
        type: "Add vManage",
        icon: "plus-circle",
        vipRbac: "Cluster",
        allow: "Cluster",
        layoutClass: "actionButtonLayout",
        ButtonActionFn: function(b) {
            a.openAddvManageTemplate(b)
        }
    }, {
        title: "Statistics Database Configuration",
        type: "Statistics Database Configuration",
        icon: "statsButtonIcon",
        vipRbac: "Cluster",
        allow: "Cluster",
        layoutClass: "actionButtonLayout",
        ButtonActionFn: function(b) {
            a.openStatsDBConfigTemplate(b)
        }
    }),
    a.tabs = [{
        tabTitle: "Service Configuration",
        active: b.current.url.indexOf("/configuration") > -1,
        states: "app.admin.cluster_management.configuration"
    }, {
        tabTitle: "Service Reachability",
        active: b.current.url.indexOf("/reachability") > -1,
        states: "app.admin.cluster_management.reachability"
    }],
    a.clusterTable = {
        colDefs: [],
        data: [],
        editable: !1
    },
    a.servicesStatus = [{
        name: "Normal",
        imageClass: "device-normal"
    }, {
        name: "Warning",
        imageClass: "device-warning"
    }, {
        name: "Error",
        imageClass: "device-error"
    }, {
        name: "Disabled",
        imageClass: "device-disabled"
    }],
    a.servicesList = [],
    a.serverCall = !1;
    var r = void 0
      , s = function() {
        g.listvManageCluster().then(function(b) {
            a.clusterTable.editable = !1,
            i.clearList(),
            a.clusterTable.colDefs = i.getColDefs(b.header.columns),
            a.clusterTable.data = i.parseData(b.data[0].data),
            angular.isDefined(b.data[0].isIPConfigured) && (i.setConfigureError(!b.data[0].isIPConfigured),
            r = a.clusterTable.data[0])
        }, function(a) {
            h.error(a.error.message + ":" + a.error.details)
        })
    }
      , t = new d({
        columnResizing: !0,
        singleSelect: !0,
        enableSorting: !0,
        dataUid: "",
        enableExpandable: !0
    })
      , u = ""
      , v = {
        getReportersText: function(a) {
            var b = a.entity[u].reporters;
            if (b) {
                var c = b.join();
                return c
            }
            return ""
        }
    }
      , w = '<div class="cluster-expandable" ng-init="text=getReportersText(row)"><label>Reporters : </label>{{text}}</div>';
    t.setExpandableRowOptions(!1, w, 50, "", v);
    var x = function(a, b, c) {
        u = c,
        a.expandable.toggleRowExpansion(b)
    }
      , y = {
        openvManageDetails: q,
        expandRow: x
    };
    t.setAppScope(y);
    var z = [];
    m.getTenancyMode().then(function(c) {
        "Cloud" != c.data.deploymentmode ? (a.hideAddVmanage = !1,
        z.push({
            type: "Device Connected",
            open: "callback",
            okButtonActionFn: function(a) {
                b.go("app.admin.cluster_management.configuration", {
                    vManageIP: a.entity.deviceIP,
                    display: "connected_device"
                })
            }
        }),
        l.allowAccess("Cluster") && z.push({
            type: "Edit",
            open: "modal",
            templateUrl: "app/common/modalPartials/addvManageClusterTemplate.html",
            controller: "addvManageClusterController",
            size: "lg",
            resolve: {
                returnCallBack: function() {
                    return C
                },
                isEdit: function() {
                    return !0
                }
            }
        }, {
            type: "Remove",
            open: "modal",
            templateUrl: "app/common/modalPartials/removevManageClusterTemplate.html",
            controller: "removevManageClusterController",
            size: "sm",
            resolve: {
                returnCallBack: function() {
                    return A
                }
            }
        })) : (a.hideAddVmanage = !0,
        z.push({
            type: "Device Connected",
            open: "callback",
            okButtonActionFn: function(a) {
                b.go("app.admin.cluster_management.configuration", {
                    vManageIP: a.entity.deviceIP,
                    display: "connected_device"
                })
            },
            hideCallback: function(a) {
                return console.log("row.entity.wildfly.status", a.entity.wildfly.status),
                "disabled" == a.entity.nms_device
            }
        })),
        s()
    }),
    t.setHoverAction(z),
    a.vipTable = t,
    a.removevManage = function(a) {
        var b = a.vmanageID;
        g.removevManage(b).then(function(a) {
            h.success(a.successMessage, 2e3),
            s(),
            F()
        }, function(a) {
            h.error(a.error.message + ":" + a.error.details)
        })
    }
    ,
    a.openAddvManageTemplate = function(a) {
        if (i.getConfigureError()) {
            e.show({
                templateUrl: "app/common/modalPartials/addvManageClusterTemplate.html",
                controller: "addvManageClusterController",
                targetEvent: a,
                resolve: {
                    selectedRow: function() {
                        return r
                    },
                    returnCallBack: function() {
                        return C
                    },
                    isEdit: function() {
                        return !1
                    }
                }
            }).then(function() {}, function() {
                f.info("Modal dismissed at: " + new Date)
            })
        } else {
            e.show({
                templateUrl: "app/common/modalPartials/addvManageClusterTemplate.html",
                controller: "addvManageClusterController",
                targetEvent: a,
                resolve: {
                    selectedRow: function() {},
                    returnCallBack: function() {
                        return B
                    },
                    isEdit: function() {
                        return !1
                    }
                }
            }).then(function() {}, function() {
                f.info("Modal dismissed at: " + new Date)
            })
        }
    }
    ;
    var A = function(a) {
        h.success(a.successMessage, 2e3),
        s(),
        F()
    }
      , B = function(c) {
        a.serverCall = !0,
        g.addvManageIP(c).then(function(c) {
            b.go("app.admin.cluster_management.configuration", {
                display: ""
            }),
            h.success(c.successMessage, 2e3),
            s(),
            a.serverCall = !1,
            F()
        }, function(b) {
            a.serverCall = !1,
            angular.equals(b.error.code, "VCC0020") ? D(b) : angular.equals(b.error.code, "VCC0021") ? E(c, b, !0) : h.error(b.error.message + ":" + b.error.details)
        })
    }
      , C = function(b) {
        a.serverCall = !0,
        g.updatevManageIP(b).then(function(b) {
            h.success(b.successMessage, 2e3),
            a.serverCall = !1,
            s(),
            F()
        }, function(c) {
            a.serverCall = !1,
            angular.equals(c.error.code, "VCC0020") ? D(c) : angular.equals(c.error.code, "VCC0021") ? E(b, c, !1) : h.error(c.error.message + ":" + c.error.details)
        })
    }
      , D = function(a) {
        e.show({
            template: '<div class="modal-body"><div class="cluster_confirm_box"><p class="warning"><span class="device-warning"></span><span class="warning-message ng-binding">{{::content}}</span> </p><div class="clearFloat"></div></div></div><div class="modal-footer"><vip-button button-title="OK" button-size="small" button-color="blue" ng-click="ok()" class="buttonMargin" id="{{ ::stateString }}process_vmanage_modal"></vip-button>',
            controller: ["$scope", "$mdDialog", function(b, c) {
                b.content = a.error.message + " : " + a.error.details,
                b.cancel = function() {
                    c.cancel()
                }
                ,
                b.ok = function() {
                    c.hide()
                }
            }
            ]
        })
    }
      , E = function(a, b, c) {
        a.force = !0;
        e.show({
            template: '<div class="modal-body"><div class="cluster_confirm_box"><p class="warning"><span class="device-warning"></span><span class="warning-message ng-binding">{{::vManageContent}}</span> </p><div class="clearFloat"></div></div></div><div class="modal-footer"><vip-button button-title="OK" button-size="small" button-color="blue" ng-click="ok()" class="buttonMargin" id="{{ ::stateString }}add_vmanage_offline"></vip-button><vip-button button-type="button" button-title="Cancel" button-size="small" button-color="white" ng-click="cancel()" class="buttonMargin" id="{{ ::stateString }}cancel_add_vmanage_offline"></vip-button></div>',
            controller: ["$scope", "$mdDialog", function(a, c) {
                a.vManageContent = b.error.message + " : " + b.error.details,
                a.cancel = function() {
                    c.cancel()
                }
                ,
                a.ok = function() {
                    c.hide()
                }
            }
            ]
        }).then(function() {
            c ? B(a) : C(a)
        }, function() {
            f.info("Modal dismissed at: " + new Date)
        })
    };
    a.$on("cluster_event", function(a, b) {
        "update" === b.eventChangeType && s()
    });
    var F = function() {
        j.subscribe(p)
    };
    F(),
    a.$on("$destroy", function() {
        for (j.unsubscribe(p); a.buttonFunctions.length; )
            a.buttonFunctions.pop()
    })
}
function ClusterManagementDetailsController(a, b, c, d, e, f, g, h, i, j, k) {
    a.vManageIP = b.params.vManageIP,
    a.tabSelect = b.params.display,
    a.stateString = c.getStateString(b),
    a.changeState = function(a) {
        b.go(a, {
            display: ""
        })
    }
    ,
    a.changeBreadCrumb = function() {
        "vManage_details" === a.tabSelect ? a.breadCrumb = {
            states: [{
                name: "cluster-management",
                title: "Cluster Management",
                state: "app.admin.cluster_management.configuration",
                params: {
                    display: ""
                }
            }, {
                name: "vmanage-details",
                title: "vManage Details"
            }]
        } : a.breadCrumb = {
            states: [{
                name: "cluster-management",
                title: "Cluster Management",
                state: "app.admin.cluster_management.configuration",
                params: {
                    display: ""
                }
            }, {
                name: "connected-device",
                title: "Connected Device"
            }]
        }
    }
    ,
    a.changeBreadCrumb(),
    a.navigateToView = function(a) {
        angular.isDefined(a.state) && 0 != a.state.length && b.go(a.state, {
            display: ""
        })
    }
    ,
    a.vManageDetailsList = [];
    var l = new d({
        tableName: "vmanage-details",
        columnResizing: !0,
        tableHeightOffset: 175,
        enableSorting: !0,
        dataUid: "service",
        toolbar: !1
    });
    if (l.setDataUrl(g.CLUSTER_VMANAGE_DETAILS + a.vManageIP),
    a.vManageDetailsTable = l,
    angular.equals(f.getUserMode().mode, "singleTenant")) {
        var m = new d({
            tableName: "connected-devices",
            columnResizing: !0,
            enableSorting: !0,
            tableHeightOffset: 230,
            dataUid: "uuid"
        });
        m.setDataUrl(g.CLUSTER_CONNECTED_DEVICES + a.vManageIP),
        a.connectedDeviceTable = m
    } else {
        var m = new e({
            autoLoad: !0,
            columnResizing: !0,
            enableSorting: !0,
            enableExpandAll: !1,
            tableHeightOffset: 230,
            tableName: "connected-devices",
            dataUid: "tenantName",
            selectAll: !1
        });
        m.setDataUrl(g.CLUSTER_TENANT_LIST),
        m.setOnTreeExpansion(function(b) {
            for (var c, d, e = _.findIndex(a.connectedDeviceTable.data, {
                tenantId: b.entity.tenantId
            }), f = e + 1; f < a.connectedDeviceTable.data.length; f++) {
                if (0 == a.connectedDeviceTable.data[f].$$treeLevel) {
                    d = f;
                    break
                }
                a.connectedDeviceTable.data.splice(f, 1),
                f--
            }
            h.get(g.CLUSTER_MANANGEMENT + b.entity.tenantId + "/connectedDevices/" + a.vManageIP).then(function(b) {
                angular.forEach(b.data, function(b) {
                    a.connectedDeviceTable.data.splice(e + 1, 0, b)
                }),
                a.connectedDeviceTable.taggedSearchObject.setSearchCache(a.connectedDeviceTable.data),
                c = !0
            }, o)
        }),
        m.setPostRefreshCallback(function() {
            a.connectedDeviceTable.uiGridApi.treeBase.collapseAllRows(),
            n()
        }),
        a.connectedDeviceTable = m;
        var n = function() {
            h.get(g.CLUSTER_TENANT_LIST).then(function(b) {
                a.connectedDeviceTable.createColumns(b.header.columns),
                angular.forEach(b.data, function(a) {
                    a.$$treeLevel = 0
                }),
                b.data = i.convertToHostname(a.connectedDeviceTable.columnDefs, b.data),
                angular.copy(b.data, a.connectedDeviceTable.data),
                a.connectedDeviceTable.taggedSearchObject.setSearchProperties(c.getSearchPropertiesForCols(a.connectedDeviceTable.columnDefs)),
                a.connectedDeviceTable.taggedSearchObject.setSearchCache(a.connectedDeviceTable.data)
            }, o)
        }
          , o = function(a) {
            angular.isObject(a) && c.checkNestedProperty(a, "error", "details") ? (j.error("Error occurred while retrieving table data: " + a.error.message + ":" + a.error.details),
            k.error(a.error.message + ": " + a.error.details)) : (j.info("API error response needs to be updated to conform to company guidelines" + m.dataUrl),
            k.error("Error occurred while retrieving table data."))
        };
        n()
    }
}
function ClusterManagement(a) {
    var b = []
      , c = []
      , d = []
      , e = !1
      , f = function(a) {
        var b = [];
        return angular.forEach(a, function(a, c) {
            var d = {};
            d.vmanageID = a.vmanageID;
            var e = a.configJson;
            angular.forEach(e, function(a, b) {
                if (angular.equals(b, "services")) {
                    var c = a;
                    angular.forEach(c, function(a, b) {
                        d[b] = a
                    })
                } else
                    d[b] = a
            }),
            b.push(d)
        }),
        b
    }
      , g = function(a) {
        var c = [];
        angular.copy(a, c);
        for (var d in c) {
            var e = c[d];
            if (angular.equals(e.dataType, "boolean")) {
                var f = {
                    property: e.property,
                    title: e.title
                };
                b.push(f);
                var g = "ng-class=\"{'device-normal':row.entity['" + e.property + "']['status']=='normal', 'device-disabled':row.entity['" + e.property + "']['status']=='disabled', 'device-warning':row.entity['" + e.property + "']['status']=='warning', 'device-error':row.entity['" + e.property + "']['status']=='error'}\""
                  , h = " ng-click=\"grid.appScope.expandRow(grid.api, row.entity, '" + e.property + "')\" ";
                e.cellTemplate = '<div class="ui-grid-cell-contents"><span ' + g + h + " id=\"{{::row.entity['deviceIP']}}_" + e.property + '"></span></div>'
            } else
                angular.equals(e.property, "host-name") ? e.cellTemplate = '<div ng-click="grid.appScope.openvManageDetails(row.entity)" class="ui-grid-cell-contents redirectLink">{{row.entity[\'' + e.property + "']}}</div>" : e.cellTemplate = '<div class="ui-grid-cell-contents">{{row.entity[\'' + e.property + "']}}</div>"
        }
        return c
    }
      , h = function(a) {
        var b = [];
        for (var c in a) {
            var d = a[c];
            angular.equals(d.dataType, "boolean") && (d.dataType = "string"),
            b.push(d)
        }
        return b
    }
      , i = function(a) {
        var b = [];
        for (var c in a) {
            var d = {}
              , e = a[c];
            for (var f in e) {
                var g = e[f];
                "string" == typeof g || g instanceof String ? d[f] = g : null != g && (g ? d[f] = "reachable" : d[f] = "unreachable")
            }
            b.push(d)
        }
        return b
    };
    return {
        getServicesList: function() {
            return b
        },
        clearList: function() {
            b = [],
            c = [],
            d = []
        },
        parseData: function(a) {
            return f(a)
        },
        getColDefs: function(a) {
            return g(a)
        },
        getColDefsForClusterReachability: function(a) {
            return h(a)
        },
        parseDataForClusterReachability: function(a) {
            return i(a)
        },
        getConfigureError: function() {
            return e
        },
        setConfigureError: function(a) {
            e = a
        }
    }
}
function ClusterManagementService(a) {
    var b = "/dataservice/clusterManagement/setup/"
      , c = "/dataservice/clusterManagement/health/status"
      , d = "/dataservice/clusterManagement/remove"
      , e = "/dataservice/clusterManagement/iplist/"
      , f = "/dataservice/clusterManagement/list"
      , g = "/dataservice/management/elasticsearch/index/size"
      , h = "/dataservice/management/elasticsearch/index/size";
    return {
        addvManageIP: function(c) {
            return a.post(b, c)
        },
        updatevManageIP: function(c) {
            return a.put(b, c)
        },
        listvManageCluster: function() {
            return a.get(f)
        },
        getClusterReachabilityStatus: function() {
            return a.get(c)
        },
        listStatsDBConfig: function() {
            return a.get(g)
        },
        updateStatsDBConfig: function(b) {
            return a.put(h, b)
        },
        removevManage: function(b) {
            return a.post(d, b)
        },
        getIPList: function(b) {
            return a.get(e + b)
        },
        getClusterReachabilityStatusURL: function() {
            return c
        }
    }
}
function ClusterMgmtReachabilityCtrl(a, b, c, d, e, f, g, h) {
    a.stateString = c.getStateString(b),
    a.tabs = [{
        tabTitle: "Service Configuration",
        active: b.current.url.indexOf("/configuration") > -1,
        states: "app.admin.cluster_management.configuration"
    }, {
        tabTitle: "Service Reachability",
        active: b.current.url.indexOf("/reachability") > -1,
        states: "app.admin.cluster_management.reachability"
    }],
    a.clusterReachabilityTable = new d({
        tableHeightOffset: 150,
        columnResizing: !0,
        singleSelect: !1,
        autoLoad: !0,
        enableSorting: !0,
        dataUid: "",
        toolbar: !1
    });
    var i = function() {
        a.serverCall = !0,
        f.getClusterReachabilityStatus().then(function(b) {
            a.clusterReachabilityTable.setDataUrl(f.getClusterReachabilityStatusURL());
            var c = h.getColDefsForClusterReachability(b.header.columns);
            a.vManageIP = b.data[0].deviceIP;
            var d = [];
            a.clusterReachabilityTable.createColumns(c),
            b.data.length > 1 && (d = h.parseDataForClusterReachability(b.data.splice(1))),
            angular.copy(d, a.clusterReachabilityTable.data)
        }, function(a) {
            g.error(a.error.message + ":" + a.error.details)
        })
    };
    i()
}
function LicensesController(a, b, c, d, e, f) {
    a.stateString = c.getStateString(b);
    var g = ""
      , h = new d({
        columnResizing: !0,
        enableSorting: !0,
        tableHeightOffset: 220,
        dataUid: ""
    });
    h.setDataUrl(g),
    a.table = h,
    a.openActivateTemplate = function() {
        var b = e.open({
            templateUrl: "app/admin/licenses/licensesActivateTemplate.html",
            controller: "licensesActivateController",
            windowClass: "customModalWindow",
            backdropClass: "customModalBackdrop",
            backdrop: "static",
            size: "lg"
        });
        b.result.then(function() {
            a.table.refresh()
        }, function() {
            f.info("Modal dismissed at: " + new Date)
        })
    }
}
function licensesActivateController(a, b, c, d, e) {
    a.stateString = c.getStateString(b),
    a.progressBar = {},
    a.progressBar.currentProgress = 0,
    a.showErrorSection = !1,
    a.uploadLicenseFile = function() {
        var b = 108e5;
        a.licenseFile ? e.licenseFileUpload(a.licenseFile, postData, a.progressBar, b).then(function(b) {
            a.cancel(),
            notification.success("File uploaded successfully", 2e3)
        }, function(b) {
            a.showErrorSection = !0,
            a.errorMessage = b
        }) : (a.showErrorSection = !0,
        a.errorMessage = c.createErrorObject("File Missing", "Please choose a file to upload"))
    }
    ,
    a.cancel = function() {
        d.dismiss()
    }
}
function licenses(a, b) {
    var c = !1
      , d = -1
      , e = function() {
        return a.getLicensesExpiration().then(function(a) {}, function(a) {
            b.error("Error getting licenses status")
        })
    };
    return {
        setLicensesStatus: e,
        getLicensesExpInDays: function() {
            return d
        },
        getLicensesExpired: function() {
            return c
        }
    }
}
function licensesService(a, b) {
    var c = "";
    return {
        getLicensesExpiration: function() {},
        licenseFileUpload: function(b, d, e, f) {
            return a.uploadFiles(c, b, e, f, null, d)
        }
    }
}
function ManageUsersController(a, b, c, d) {
    a.stateString = c.getStateString(b),
    a.tabs = [new d("Users","/users" === b.current.url,"app.admin.manage_users.users"), new d("User Groups","/user_groups" === b.current.url,"app.admin.manage_users.user_groups")]
}
function UsergroupsController(a, b, c, d, e, f, g, h, i, j) {
    a.stateString = c.getStateString(d),
    angular.forEach(a.$parent.tabs, function(a) {
        a.setActive(a.states === d.current.name)
    }),
    a.disableDelete = !0,
    a.usergroupTable = {
        colDefs: [],
        data: [],
        editable: !1
    },
    a.userGroupSelected = {},
    a.userGroupsList = [],
    a.usergroupsDefinition = [],
    h.getUserGroups().then(function(b) {
        a.usergroupsDefinition = h.getColumns(),
        a.userGroupsList = b,
        a.userGroupSelected = b[0],
        a.usergroupTable.editable = b[0].editable,
        a.disableDelete = !b[0].editable,
        a.usergroupTable.colDefs = k(a.usergroupsDefinition),
        angular.copy(b[0].features, a.usergroupTable.data)
    }, function(a) {
        g.error("Error occurred retrieving user groups details: " + a)
    }),
    a.getClass = function(b) {
        return a.userGroupSelected.name === b ? "selected" : ""
    }
    ;
    var k = function(a) {
        var b = [];
        angular.copy(a, b);
        for (var c in b) {
            var d = b[c];
            "feature" !== d.property && (d.cellTemplate = '<div class="ui-grid-cell-contents"><span style="display: inline-block"  ng-if="row.entity[\'' + d.property + "'] === true || row.entity['" + d.property + "'] === 'true'\" id=\"{{row.entity['feature']}}_" + d.property + '"><md-icon class="material-icons viptela_green md-18" title="Enabled">check_circle</md-icon></span><span style="display: inline-block;margin-left: 5px;" ng-if="row.entity[\'' + d.property + "'] === false || row.entity['" + d.property + "'] === 'false'\" id=\"{{row.entity['feature'] | nospace}}_" + d.property + '">--</span></div>',
            d.cellTemplateForEdit = '<div class="ui-grid-cell-contents"><input ng-change="grid.appScope.checkFeatureEnabled(row.entity)" id="{{row.entity[\'feature\'] | nospace}}_' + d.property + '" type="checkbox" ng-input="row.entity[\'' + d.property + "']\" ng-model=\"row.entity['" + d.property + "']\"/><label id=\"{{row.entity['feature'] | nospace}}_" + d.property + "_label\" for=\"{{row.entity['feature'] | nospace}}_" + d.property + '"></label></div>',
            d.editableCellTemplateForEdit = '<div class="ui-grid-cell-contents"><input ng-change="grid.appScope.checkFeatureEnabled(row.entity)"  id="{{row.entity[\'feature\'] | nospace}}_' + d.property + '" type="checkbox" ng-input="row.entity[\'' + d.property + "']\" ng-model=\"row.entity['" + d.property + "']\"/><label id=\"{{row.entity['feature'] | nospace}}_" + d.property + "_label\" for=\"{{row.entity['feature'] | nospace}}_" + d.property + '"></label></div>')
        }
        return b
    };
    a.selectUserGroup = function(b) {
        a.userGroupSelected = b,
        a.disableDelete = !b.editable,
        a.usergroupTable.data.reset(),
        a.usergroupTable.editable = b.editable,
        angular.copy(b.features, a.usergroupTable.data)
    }
    ,
    a.updateUserGroup = function(b) {
        var c = this;
        c.savingInProgress = !0;
        var d = {};
        if (d.groupName = a.userGroupSelected.name,
        d.tasks = b,
        _.findIndex(d.tasks, function(a) {
            return a.read === !0
        }) < 0) {
            c.savingInProgress = !1;
            var e = {
                error: {
                    message: "Failed to edit user group. ",
                    details: "Minimum one feature should be configured."
                }
            };
            i.error(e.error.message + e.error.details, 2e3)
        } else
            f.updateUserGroup(d).then(function(d) {
                c.savingInProgress = !1,
                angular.copy(b, a.userGroupSelected.features),
                angular.copy(b, a.usergroupTable.data),
                i.success("User Group successfully updated", 2e3)
            }, function(a) {
                c.savingInProgress = !1,
                i.error(a.error.message + "(" + a.error.code + "): " + a.error.details, 2e3)
            })
    }
    ,
    a.openModal = function(b, c, d) {
        e.show({
            templateUrl: b,
            controller: c,
            targetEvent: d,
            resolve: {
                selectedRow: function() {
                    return a.userGroupSelected
                }
            }
        }).then(function(b) {
            h.getUserGroups().then(function(c) {
                a.userGroupsList = c,
                b && angular.equals(b.action, "delete") && a.selectUserGroup(a.userGroupsList[0])
            }, function(a) {
                g.error("Error occurred retrieving user groups details: " + a)
            })
        })
    }
}
function userGroup(a, b, c, d) {
    function e(a, b, c) {
        this.name = a,
        this.editable = c || !1,
        this.features = b
    }
    function f(a) {
        var b = [];
        return angular.forEach(a, function(a) {
            var c = {};
            angular.forEach(j, function(b) {
                return "feature" === b.property ? void (c[b.property] = a.value) : (c[b.property] = !1,
                void (c.enabled = !1))
            }),
            b.push(c)
        }),
        b
    }
    function g(a) {
        var b;
        angular.forEach(a, function(a) {
            b = new e(a.groupName,a.tasks),
            _.indexOf(["basic", "netadmin", "operator", "tenantadmin"], b.name) < 0 && b.setEditable(!0),
            i.push(b)
        }),
        i = c("orderBy")(i, "name")
    }
    function h() {
        var b = d.defer();
        return a.getUserGroupTableDefinition().then(function(b) {
            return angular.forEach(b.header.columns, function(a) {
                "enabled" === a.property && (a.visible = !1),
                j.push(a)
            }),
            a.getUserGroup()
        }).then(function(a) {
            g(a.data),
            k = a.header.viewControl,
            b.resolve(i)
        }, function(a) {
            b.reject(a)
        }),
        b.promise
    }
    var i = []
      , j = []
      , k = [];
    return e.prototype.setFeatures = function(a) {
        this.features = a
    }
    ,
    e.prototype.setEditable = function(a) {
        this.editable = a
    }
    ,
    {
        getUserGroups: function() {
            return i = [],
            j = [],
            h()
        },
        getColumns: function() {
            return j
        },
        getGroupNameFromControlView: function() {
            return k[0]
        },
        getTaskListFromViewControl: function() {
            var a, b = k[1].controlData.data;
            return a = f(b)
        }
    }
}
function updateUserController(a, b, c, d, e, f, g, h, i, j, k) {
    function l() {
        var c = {};
        angular.copy(a.newUser, c),
        c = _.omit(c, ["confirmPassword", "groups"]),
        a.serverCallInProgress = !0,
        h.createUser(c).then(function(c) {
            a.serverCallInProgress = !1,
            g.success("New User Added", 2e3),
            b.hide()
        }, function(b) {
            a.serverCallInProgress = !1,
            angular.isDefined(b) && (a.showErrorSection = !0,
            a.errorMessage = b)
        })
    }
    function m() {
        var c = {};
        a.serverCallInProgress = !0,
        angular.copy(a.newUser, c),
        c = _.omit(c, ["confirmPassword", "password", "groups"]),
        h.editUser(c).then(function(c) {
            a.serverCallInProgress = !1,
            g.success("User details updated", 2e3),
            b.hide()
        }, function(b) {
            a.serverCallInProgress = !1,
            angular.isDefined(b) && (a.showErrorSection = !0,
            a.errorMessage = b)
        })
    }
    a.stateString = f.getStateString(c),
    a.newUser = {},
    a.groups = k,
    a.newUser.group = [],
    a.serverCallInProgress = !1,
    a.showErrorSection = !1,
    a.checkForEditView = function() {
        return "edit" === j
    }
    ,
    angular.isDefined(i) && i.userName && (a.newUser.userName = i.userName,
    a.newUser.description = i.description,
    a.newUser.group = i.group),
    a.cancel = function() {
        b.cancel()
    }
    ,
    a.update = function() {
        switch (j) {
        case "edit":
            m();
            break;
        case "add":
            l()
        }
    }
    ,
    a.updatePassword = function() {
        var c = {};
        angular.copy(a.newUser, c),
        c = _.omit(c, ["confirmPassword", "group", "description"]),
        a.serverCallInProgress = !0,
        h.changePassword(c).then(function(c) {
            a.serverCallInProgress = !1,
            g.success("Password updated", 2e3),
            b.hide()
        }, function(b) {
            a.serverCallInProgress = !1,
            angular.isDefined(b) && (a.showErrorSection = !0,
            a.errorMessage = b)
        })
    }
}
function usersController(a, b, c, d, e, f, g, h, i, j) {
    a.stateString = d.getStateString(e);
    var k = 158
      , l = !1;
    j.checkSidebarState() && j.allowAccess("Manage Users") && (l = !0,
    k = 198),
    angular.forEach(a.$parent.tabs, function(a) {
        a.setActive(a.states === e.current.name)
    }),
    a.groups = [],
    h.getUserGroup().then(function(b) {
        b && b.data && (a.groupData = b,
        angular.forEach(b.data, function(b) {
            a.groups.push(b.groupName)
        }))
    }, function(a) {
        d.checkNestedProperty(a, "error", "message") ? i.error(a.error.message + ": " + a.error.details) : i.error("Could not fetch User Groups at this time.")
    }),
    a.delayRefresh = function(b) {
        g(function() {
            a.tableObj.refresh()
        }, b)
    }
    ,
    a.openAddUserModal = function(b, c, d, e) {
        f.show({
            templateUrl: b,
            controller: c,
            targetEvent: e,
            resolve: {
                selectedRow: function() {
                    return !1
                },
                action: function() {
                    return d
                },
                groups: function() {
                    return a.groups
                }
            }
        }).then(function() {
            a.delayRefresh(100)
        }, function() {
            console.log("Modal dismissed at: " + new Date)
        })
    }
    ,
    a.openUpdateUserModal = function(b, c, d, e) {
        f.show({
            templateUrl: d,
            controller: "updateUserController",
            targetEvent: e,
            resolve: {
                selectedRow: function() {
                    return b
                },
                action: function() {
                    return c
                },
                groups: function() {
                    return a.groups
                }
            }
        }).then(function(b) {
            a.delayRefresh(100)
        }, function() {
            console.log("Modal dismissed at: " + new Date)
        })
    }
    ,
    a.updateUserObj = {
        type: "Edit",
        open: "callback",
        okButtonActionFn: function(b, c) {
            a.openUpdateUserModal(b.entity, "edit", "app/admin/manage_users/users/updateUserTemplate.html", c)
        },
        hideCallback: function(a) {
            return "admin" === a.entity.userName
        }
    },
    a.changePasswordObj = {
        type: "Change Password",
        open: "callback",
        okButtonActionFn: function(b, c) {
            a.openUpdateUserModal(b.entity, "changePassword", "app/admin/manage_users/users/changePasswordTemplate.html", c)
        }
    },
    a.deleteUserObj = {
        type: "Delete",
        open: "confirm",
        title: "Are you sure you want to delete the user?",
        content: "This user will be deleted immediately. You cannot undo this action.",
        okButtonActionFn: function(b) {
            return "admin" === b.entity.userName ? (i.warning("Admin can't be deleted.", 2e3),
            !0) : void h.deleteUser(b.entity.userName).then(function(b) {
                i.success("User Deleted", 2e3),
                a.tableObj.refresh()
            }, function(a) {
                a && a.error && a.error.message ? i.error(a.error.message + ": " + a.error.details) : i.error("Some thing went wrong. Please try again." + a)
            })
        },
        hideCallback: function(a) {
            return "admin" === a.entity.userName
        }
    },
    a.tableRowHoverActions = [],
    l && (a.tableRowHoverActions.push(a.deleteUserObj),
    a.tableRowHoverActions.push(a.updateUserObj),
    a.tableRowHoverActions.push(a.changePasswordObj)),
    a.tableObj = new b({
        columnResizing: !0,
        tableHeightOffset: k,
        singleSelect: !0,
        enableSorting: !0,
        dataUid: "userName",
        autoLoad: !0
    },{
        menuColumnFilter: !1
    }),
    a.tableObj.setHoverAction(a.tableRowHoverActions),
    a.tableObj.setViewActions({
        button: !0,
        title: "Add User",
        icon: "add_circle",
        rbac: "Manage Users",
        cssId: a.stateString + "_add_template",
        action: function(b) {
            a.openAddUserModal("app/admin/manage_users/users/updateUserTemplate.html", "updateUserController", "add", b)
        }
    }),
    h.getUsers().then(function(b) {
        b && b.data && (a.tableObj.createColumns(b.header.columns),
        a.tableObj.setTableData(b.data))
    }, function() {})
}
function customSelectDevicesTemplateModalCtrl(a, b, c, d, e, f, g, h) {
    a.editState = f,
    a.settingsDisplayName = e.displayName,
    a.stateString = c.getStateString(a.$parent.$state);
    d.setOptions({
        labels: {
            heading: "Enable or disable devices from the following list",
            available: "Enabled Devices",
            selected: "Disabled Devices"
        },
        toolTip: {
            enabled: !1,
            templateCache: ""
        },
        columns: [{
            property: "hostName",
            display: "Host Name"
        }, {
            property: "localSystemIp",
            display: "Device IP"
        }],
        orderBy: "hostName",
        groupColumn: "deviceGroups",
        enableGroupFilter: !1,
        showErrorSection: !1,
        enableSelection: f,
        errorMessage: {}
    }),
    h(function() {
        d.setMultiSelectData(e.enableDeviceList, e.disableDeviceList)
    }),
    a.multiSelectOpts = d.getOptions(),
    a.disabledDevicesTable = new g({
        columnResizing: !0,
        enableSorting: !0,
        minRowsToShow: 10,
        dataUid: "deviceIp"
    }),
    a.doneSelecting = function() {
        var a = {}
          , c = d.getSelectedItems();
        a.deviceIds = _.pluck(d.getSelectedItems(), "uuid"),
        a.isEdited = !1,
        a.isMasterEdited = !1,
        d.reset(),
        b.hide(c)
    }
    ,
    a.cancel = function() {
        d.reset(),
        b.cancel("cancel")
    }
}
function settingsController(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    function q() {
        var b = a.settings.tenancyMode
          , c = {
            mode: "SingleTenant",
            domain: "",
            clusterid: ""
        };
        angular.equals(b.selectedRadioButton, "MultiTenant") && (c = {
            mode: "MultiTenant",
            domain: b.domain,
            clusterid: b.clusterId
        }),
        b.savingInProgress = !0,
        d.saveTenancyMode(c).then(function() {
            angular.equals(c.mode, "SingleTenant") ? (b.display.mode = "Single Tenant",
            b.selectedRadioButton = "SingleTenant",
            b.display.domain = "") : (b.display.mode = "Multitenant",
            b.selectedRadioButton = "MultiTenant",
            b.display.domain = b.domain),
            e.success("Tenancy Mode information updated successfully", 2e3),
            a.cancelEdit(b, "tenancyMode"),
            p.$broadcast("logoutUser", {
                url: "/logout?nocache=" + (new Date).getTime() + "&reason=reboot"
            })
        }, function(c) {
            var d = "Error occurred in changing Tenancy Mode. Please try again later";
            b.savingInProgress = !1,
            a.cancelEdit(b, "tenancyMode"),
            angular.isDefined(c) && angular.isDefined(c.error) && (c.error.buttonText = "OK"),
            c.error && c.error.details && (d = c.error.message + ": " + c.error.details),
            e.error(d)
        })
    }
    function r(b) {
        a.configSettings.orgName = b.data[0].org ? b.data[0].org : "",
        H = angular.copy(a.configSettings.orgName),
        a.configSettings.confirmOrgName = "",
        a.summary.orgName = b.data[0].org ? b.data[0].org : "Not Configured",
        a.settings.orgName.controlsUp = !!b.data[0].controlConnectionUp && b.data[0].controlConnectionUp
    }
    function s(b) {
        a.configvBond = {
            domainIp: b.data[0].domainIp ? b.data[0].domainIp : "",
            port: b.data[0].port ? parseInt(b.data[0].port, 10) : 12346
        },
        I = angular.copy(a.configvBond),
        a.summary.domainIp = b.data[0].domainIp ? b.data[0].domainIp : "Not Configured",
        a.summary.port = b.data[0].port ? " : " + parseInt(b.data[0].port, 10) : 12346
    }
    function t(b) {
        angular.isDefined(b.data[0].certificateSigning) || (N = !0),
        a.configCertificateAuth = {
            selectedRadioButton: b.data[0].certificateSigning ? b.data[0].certificateSigning : "manual",
            certificateFirstName: b.data[0].firstName ? b.data[0].firstName : "",
            certificateLastName: b.data[0].lastName ? b.data[0].lastName : "",
            certificateEmail: b.data[0].email ? b.data[0].email : "",
            sliderValue: b.data[0].retrieveInterval ? b.data[0].retrieveInterval : "60",
            hideChallengeField: !!b.data[0].challengeAvailable && b.data[0].challengeAvailable,
            showEditChallengeBox: !!b.data[0].challengeAvailable && b.data[0].challengeAvailable
        },
        a.configCertificateAuth.hideChallengeField || (a.configCertificateAuth.challenge = b.data[0].challenge ? b.data[0].challenge : "",
        a.configCertificateAuth.confirmChallenge = b.data[0].challenge ? b.data[0].challenge : ""),
        J = angular.copy(a.configCertificateAuth),
        "1Y" === b.data[0].validityPeriod ? a.selectedValidityPeriod = a.validityPeriodOptions[0] : "2Y" === b.data[0].validityPeriod ? a.selectedValidityPeriod = a.validityPeriodOptions[1] : "3Y" === b.data[0].validityPeriod ? a.selectedValidityPeriod = a.validityPeriodOptions[2] : a.selectedValidityPeriod = a.validityPeriodOptions[0],
        K = angular.copy(a.selectedValidityPeriod),
        a.summary.certificateSigning = b.data[0].certificateSigning ? b.data[0].certificateSigning : "manual"
    }
    function u(b) {
        a.summary.certificateValidity = b.notAfter ? g("date")(b.notAfter, "dd MMM yyyy h:mm:ss a") : "Not Configured",
        a.selectedCertificateValidity = a.certificateValidityOptions[0],
        a.webServer.currentCertificate = b.certificateDetails ? b.certificateDetails : ""
    }
    function v(b, c) {
        var d = "";
        b.enableUpgrade ? (d = "Enabled: " + b.versionName,
        a.softwareVersion.selectedRadioButton = "enabled",
        w(c, b.versionId)) : (d = "Disabled",
        a.softwareVersion.selectedRadioButton = "disabled",
        w(c)),
        B = angular.copy(a.softwareVersion.selectedRadioButton),
        a.summary.softwareVersion = d
    }
    function w(b, c) {
        if (b.data.length) {
            a.softwareVersionOptions = [],
            a.disableSelectVersion = !1;
            var d = {};
            angular.forEach(b.data, function(b) {
                d = {},
                d.id = b.versionId,
                d.key = b.version,
                d.value = b.version,
                a.softwareVersionOptions.push(d)
            }),
            angular.isDefined(c) && angular.forEach(a.softwareVersionOptions, function(b) {
                b.id === c && (a.selectedSoftwareVersion = b)
            })
        } else
            a.disableSelectVersion = !0;
        A = angular.copy(a.selectedSoftwareVersion)
    }
    function x(b) {
        _.each(a.settings, function(a) {
            a === b ? a.edit = !0 : a.edit = !1
        })
    }
    function y(b) {
        a.cursorClass = "editSettings",
        x(b),
        "automated" === a.configCertificateAuth.selectedRadioButton ? a.manualFlag = !1 : a.manualFlag = !0,
        "disabled" === a.softwareVersion.selectedRadioButton ? a.disableSelectVersion = !0 : a.disableSelectVersion = !1,
        b.open = !0
    }
    a.configSettings = {},
    a.configvBond = {},
    a.configCertificateAuth = {},
    a.softwareVersion = {},
    a.disableSelectVersion = !1,
    a.serverCall = !0;
    var z = 5;
    a.stateString = c.getStateString(b),
    a.oneAtATime = !0,
    a.statsRadioList = [],
    a.deviceList = [],
    a.deviceIPList = [],
    a.userMode = h.getUserMode(),
    a.disableEnforceZTPVersion = !1;
    var A = {}
      , B = ""
      , C = ""
      , D = ""
      , E = ""
      , F = ""
      , G = ""
      , H = ""
      , I = {}
      , J = {}
      , K = {}
      , L = {};
    a.breadCrumb = {
        states: [{
            name: "settings",
            title: "Settings",
            state: "app.admin.settings"
        }]
    },
    a.tabs = [{
        tabTitle: "View",
        active: !0
    }, {
        tabTitle: "Import",
        active: !1
    }],
    a.activateTable = function(b) {
        angular.forEach(a.tabs, function(a, c) {
            a.active = c === b
        })
    }
    ;
    var M = {
        open: !1,
        edit: !1,
        savingInProgress: !1,
        mode: "Disabled",
        upload_data: !1,
        updateAnalyticsEnabled: function(a) {
            this.config.enabled = a
        },
        config: {
            user: "",
            password: "",
            enabled: !1,
            region: "us-west"
        },
        dbConfig: "",
        regionList: {
            "US West": "us-west",
            "US East": "us-east"
        },
        resetData: function() {
            var a = this;
            if (a.dbConfig.data.length > 0) {
                angular.forEach(a.dbConfig.data[0], function(b, c) {
                    a.config[c] = b
                }),
                a.config.enabled ? a.mode = "Enabled" : a.mode = "Disabled";
                var b = a.dbConfig.data[0];
                b.enabled && b.region && b.region.length > 0 ? a.upload_data = !0 : a.upload_data = !1
            }
        },
        getAnalyticsSettings: function() {
            var a = this;
            d.getAnalyticsSettings().then(function(b) {
                a.dbConfig = angular.copy(b),
                a.resetData()
            }, function(a) {
                e.confirm(a)
            })
        },
        saveAnalyticsSettings: function() {
            var b = this;
            b.savingInProgress = !0,
            d.saveAnalyticsSettings(b.config).then(function(c) {
                b.getAnalyticsSettings(),
                b.savingInProgress = !1,
                e.success("Analytics Info Updated Successfully", 2e3),
                a.cancelEdit(b)
            }, function(a) {
                b.savingInProgress = !1,
                e.confirm(a)
            })
        }
    };
    a.settings = {
        orgName: {
            open: !1,
            edit: !1,
            controlsUp: !1
        },
        vBond: {
            open: !1,
            edit: !1
        },
        certificateAuth: {
            open: !1,
            edit: !1
        },
        cloudCA: {
            open: !1,
            edit: !1,
            savingInProgress: !1,
            getCloudCASettings: function() {
                var a = this;
                d.getCloudCASettings().then(function(b) {
                    b.data.length > 0 && b.data[0] && b.data[0].certificateauthority ? (a.selectedRadioButton = b.data[0].certificateauthority,
                    a.mode = b.data[0].certificateauthority,
                    a.display = "vmanage" === b.data[0].certificateauthority ? "Automated" : "Manual") : (a.selectedRadioButton = "vmanage",
                    a.mode = "vmanage",
                    a.display = "Automated")
                }, function(a) {
                    e.confirm(a)
                })
            },
            saveCACloudSettings: function() {
                var b = this
                  , c = {
                    certificateauthority: this.selectedRadioButton
                };
                b.savingInProgress = !0,
                d.saveCACloudSettings(c).then(function(c) {
                    b.savingInProgress = !1,
                    b.mode = c.data[0].certificateauthority,
                    b.display = "vmanage" === c.data[0].certificateauthority ? "Automated" : "Manual",
                    e.success("Cloud Certificate settings Updated Successfully", 2e3),
                    a.cancelEdit(b)
                }, function(a) {
                    b.savingInProgress = !1,
                    e.confirm(a)
                })
            }
        },
        webServerCertificate: {
            open: !1,
            edit: !1
        },
        enableSoftwareVersion: {
            open: !1,
            edit: !1
        },
        enableBanner: {
            open: !1,
            edit: !1,
            mode: "",
            selectedRadioButton: "",
            text: "",
            showContent: function(a) {
                this.text = a
            },
            getBannerInfoSetting: function() {
                var a = this;
                d.getBannerInfoSetting().then(function(b) {
                    angular.isObject(b.data[0]) && !_.isEmpty(b.data[0]) ? (angular.equals(b.data[0].mode, "on") ? (a.mode = "Enabled",
                    a.selectedRadioButton = "enabled") : (a.mode = "Disabled",
                    a.selectedRadioButton = "disabled"),
                    a.text = b.data[0].bannerDetail) : (a.mode = "Disabled",
                    a.selectedRadioButton = "disabled")
                }, function(a) {
                    e.confirm(a)
                })
            },
            saveBannerInfo: function() {
                var b = this
                  , c = {
                    mode: "off"
                };
                angular.equals(this.selectedRadioButton, "enabled") && (c.mode = "on",
                c.bannerDetail = this.text),
                b.savingInProgress = !0,
                d.saveBannerInfoSetting(c).then(function(d) {
                    b.savingInProgress = !1,
                    angular.equals(c.mode, "on") ? (b.mode = "Enabled",
                    b.selectedRadioButton = "enabled") : (b.mode = "Disabled",
                    b.selectedRadioButton = "disabled"),
                    e.success("Banner Info Updated Successfully", 2e3),
                    a.cancelEdit(b)
                }, function(a) {
                    b.savingInProgress = !1,
                    e.confirm(a)
                })
            }
        },
        statsSetting: {
            open: !1,
            edit: !1,
            radioList: [],
            getStatsSetting: function() {
                var b = this;
                d.getDeviceList().then(function(c) {
                    if (angular.isObject(c.data[0]) && !_.isEmpty(c.data[0])) {
                        a.deviceList = [];
                        var f = 0;
                        angular.forEach(c.data, function(b) {
                            var c = {
                                id: f,
                                sysIP: b["system-ip"],
                                hostName: b["host-name"],
                                deviceID: b.deviceId,
                                deviceType: b["device-type"],
                                deviceModel: b["device-model"],
                                uuid: b.uuid,
                                version: b.version,
                                key: b["local-system-ip"],
                                displayInfo: b["host-name"] + b["system-ip"],
                                localSystemIp: b["local-system-ip"]
                            };
                            f++,
                            a.deviceList.push(c),
                            a.deviceIPList.push(c.sysIP)
                        }),
                        d.getStatsSetting().then(function(c) {
                            angular.isObject(c[0]) && !_.isEmpty(c[0]) && (b.radioList = c,
                            angular.forEach(b.radioList, function(c) {
                                c.prevStatus = angular.copy(c.status),
                                c.customOptionState = "Custom",
                                c.disableDeviceList = [],
                                c.enableDeviceList = [],
                                "custom" === c.status ? (a.disableStatsButton[c.indexName] = !0,
                                d.getDisabledDeviceList(c.indexName).then(function(d) {
                                    _.isEmpty(d) ? c.disableDeviceList = [] : (c.enableDeviceList = angular.copy(a.deviceList),
                                    angular.forEach(d, function(a) {
                                        var b = _.findIndex(c.enableDeviceList, function(b) {
                                            return angular.equals(b.sysIP, a)
                                        });
                                        b > -1 && (c.disableDeviceList.push(c.enableDeviceList[b]),
                                        c.enableDeviceList.splice(b, 1))
                                    })),
                                    c.customOptionState = "Enabled:" + c.enableDeviceList.length + "/" + a.deviceList.length,
                                    a.statsRadioList = angular.copy(b.radioList),
                                    a.disableStatsButton[c.indexName] = !1
                                }, function(a) {
                                    e.confirm(a)
                                })) : "enable" === c.status ? (a.disableStatsButton[c.indexName] = !1,
                                c.enableDeviceList = angular.copy(a.deviceList)) : (a.disableStatsButton[c.indexName] = !1,
                                c.disableDeviceList = angular.copy(a.deviceList))
                            }),
                            a.statsRadioList = angular.copy(b.radioList))
                        }, function(a) {
                            e.confirm(a)
                        })
                    }
                }, function(a) {
                    e.confirm(a)
                })
            },
            refreshStatsSetting: function() {
                var b = this;
                b.radioList = angular.copy(a.statsRadioList),
                b.getStatsSetting()
            },
            restoreFactoryDefault: function() {
                angular.forEach(this.radioList, function(b) {
                    b.prevStatus = b.status,
                    b.status = "enable",
                    b.disableDeviceList = [],
                    b.enableDeviceList = angular.copy(a.deviceList)
                })
            },
            saveStatsSetting: function() {
                var b = this
                  , c = [];
                b.savingInProgress = !0,
                angular.forEach(b.radioList, function(a) {
                    var b = {
                        indexName: a.indexName,
                        status: a.status
                    };
                    if (c.push(b),
                    "custom" === a.status) {
                        var f = a.indexName
                          , g = _.pluck(a.disableDeviceList, "sysIP");
                        d.saveCustomStatsSetting(f, g).then(function(a) {
                            e.success("Statistics Setting Updated Successfully", 2e3)
                        }, function(a) {
                            e.confirm(a)
                        })
                    }
                }),
                d.saveStatsSetting(c).then(function(c) {
                    b.savingInProgress = !1,
                    a.statsRadioList = angular.copy(b.radioList),
                    e.success("Statistics Setting Updated Successfully", 2e3),
                    b.getStatsSetting(),
                    a.cancelEdit(b)
                }, function(a) {
                    b.savingInProgress = !1,
                    e.confirm(a)
                })
            }
        },
        cloudExpress: {
            open: !1,
            edit: !1,
            savingInProgress: !1,
            getCloudExpressSetting: function() {
                var a = this;
                d.getCloudExpressSetting().then(function(b) {
                    C = angular.copy(b.data[0].mode),
                    angular.isArray(b.data) && angular.isObject(b.data[0]) && !_.isEmpty(b.data[0]) && "on" == b.data[0].mode ? (a.mode = "Enabled",
                    a.selectedRadioButton = "enabled") : (a.mode = "Disabled",
                    a.selectedRadioButton = "disabled")
                }, function(a) {
                    e.confirm(a)
                })
            },
            saveCloudExpressInfo: function() {
                var b = this
                  , c = {
                    mode: "off"
                };
                angular.equals(this.selectedRadioButton, "enabled") && (c.mode = "on"),
                b.savingInProgress = !0,
                d.saveCloudExpressSetting(c).then(function(d) {
                    b.savingInProgress = !1,
                    angular.equals(c.mode, "on") ? (b.mode = "Enabled",
                    b.selectedRadioButton = "enabled",
                    h.setCloudExpressStatus(!0)) : (b.mode = "Disabled",
                    b.selectedRadioButton = "disabled",
                    h.setCloudExpressStatus(!1)),
                    C = angular.copy(c.mode),
                    e.success("CloudExpress Info Updated Successfully", 2e3),
                    a.cancelEdit(b);
                    var f = k.get("cloudXIconTemplateForTopNav.html")
                      , g = angular.element("#cloud_express").scope();
                    g.showCloudExpressIcon = h.cloudExpressRBAC("topNav"),
                    g.cloudExpressEnabled = h.getCloudExpressStatus(),
                    angular.element("#cloud_express").html(j(f)(g))
                }, function(a) {
                    b.savingInProgress = !1,
                    b.selectedRadioButton = "enabled",
                    angular.isDefined(a) && angular.isDefined(a.error) && (a.error.buttonText = "OK"),
                    e.confirm(a)
                })
            }
        },
        analytics: M,
        clientSessionTimeout: {
            open: !1,
            edit: !1,
            timeout: "",
            mode: "",
            selectedRadioButton: "",
            getSessionTimeoutSettings: function() {
                var a = this;
                d.getClientSessionTimeout().then(function(b) {
                    D = angular.copy(b.data[0]),
                    angular.isArray(b.data) && angular.isObject(b.data[0]) && !_.isEmpty(b.data[0]) && b.data[0].isEnabled ? (a.mode = "Enabled: " + b.data[0].timeout + " minutes",
                    a.selectedRadioButton = "enabled",
                    a.timeout = b.data[0].timeout) : (a.mode = "Disabled",
                    a.selectedRadioButton = "disabled")
                }, function(a) {
                    e.confirm(a)
                })
            },
            saveSessionTimeout: function() {
                var b = this
                  , c = {
                    isEnabled: !1
                };
                angular.equals(b.selectedRadioButton, "enabled") && (c.isEnabled = !0,
                c.timeout = b.timeout),
                b.savingInProgress = !0,
                d.saveClientSessionTimeout(c).then(function(d) {
                    if (D = angular.copy(d.data[0]),
                    angular.isArray(d.data) && angular.isObject(d.data[0]) && !_.isEmpty(d.data[0]) && d.data[0].isEnabled) {
                        b.mode = "Enabled: " + d.data[0].timeout + " minutes",
                        b.selectedRadioButton = "enabled",
                        b.timeout = d.data[0].timeout;
                        var f = h.getUserMode();
                        "multiTenant-provider" !== f.mode && (l.watch(),
                        l.setIdle(60 * c.timeout),
                        l.setTimeout(60))
                    } else
                        l.unwatch(),
                        b.mode = "Disabled",
                        b.selectedRadioButton = "disabled";
                    e.success("Client Session Timeout Info Updated Successfully", 2e3),
                    a.cancelEdit(b, "sessionTimeout")
                }, function(c) {
                    b.savingInProgress = !1,
                    a.cancelEdit(b, "sessionTimeout"),
                    angular.isDefined(c) && angular.isDefined(c.error) && (c.error.buttonText = "OK"),
                    e.confirm(c)
                })
            }
        },
        tenancyMode: {
            open: !1,
            edit: !1,
            domain: "",
            clusterId: "",
            display: {
                mode: "",
                domain: ""
            },
            selectedRadioButton: "",
            getTenancyModeSettings: function() {
                var a = this;
                d.getTenancyMode().then(function(b) {
                    E = angular.copy(b.data),
                    angular.isObject(b.data) && !_.isEmpty(b.data) && (a.display.mode = "SingleTenant" === b.data.mode ? "Single Tenant" : "Multitenant",
                    a.selectedRadioButton = b.data.mode,
                    a.display.domain = b.data.domain,
                    a.domain = b.data.domain,
                    a.clusterId = b.data.clusterid)
                }, function(a) {
                    e.confirm(a)
                })
            },
            saveTenancy: function() {
                var a = {
                    error: {
                        message: "Confirm tenancy mode change",
                        details: "This will reboot vManage. Are you sure you want to proceed?",
                        type: "warning",
                        buttonText: "Proceed"
                    }
                };
                e.confirm(a, !0, q)
            }
        },
        dataStream: {
            open: !1,
            edit: !1,
            hostName: "",
            vpn: "",
            display: {
                mode: ""
            },
            selectedRadioButton: "",
            getDataStream: function() {
                var a = this;
                d.getDataStreamSettings().then(function(b) {
                    F = angular.copy(b.data[0]),
                    angular.isArray(b.data) && angular.isObject(b.data[0]) && (a.display.mode = b.data[0].enable ? "Enabled" : "Disabled",
                    a.hostName = b.data[0].serverHostName,
                    a.vpn = b.data[0].vpn,
                    a.selectedRadioButton = b.data[0].enable ? "enabled" : "disabled")
                }, function(a) {
                    e.confirm(a)
                })
            },
            saveDataStream: function() {
                var b = this
                  , c = {
                    enable: "enabled" === b.selectedRadioButton
                };
                c.enable && (c.serverHostName = b.hostName,
                c.vpn = b.vpn),
                b.savingInProgress = !0,
                d.saveDataStreamSettings(c).then(function() {
                    b.display.mode = "enabled" == b.selectedRadioButton ? "Enabled" : "Disabled",
                    e.success("Data stream information updated successfully", 2e3),
                    a.cancelEdit(b)
                }, function(c) {
                    b.savingInProgress = !1,
                    a.cancelEdit(b, "dataStream"),
                    angular.isDefined(c) && angular.isDefined(c.error) && (c.error.buttonText = "OK"),
                    e.confirm(c)
                })
            }
        },
        statsConfiguration: {
            open: !1,
            edit: !1,
            interval: {
                collection: "",
                default: ""
            },
            mode: {
                value: ""
            },
            getStatsConfiguration: function() {
                var a, b = this;
                d.getStatsConfiguration().then(function(c) {
                    G = angular.copy(c),
                    c.length ? (a = _.find(c, function(a) {
                        return "statsCollection" === a.statsOperation
                    }),
                    b.interval.collection = a.operationInterval,
                    b.interval.default = a.defaultInterval,
                    b.mode.value = "Collection Interval: " + a.operationInterval + " minutes") : (b.interval.collection = "",
                    b.mode.value = "")
                }, function(a) {
                    e.confirm(a)
                })
            },
            resetStatsConfiguration: function() {
                var a = this;
                a.interval.collection = angular.copy(a.interval.default)
            },
            saveStatsConfiguration: function() {
                var b, c = this, f = {
                    config: [{
                        configName: "statsCollection",
                        operationInterval: c.interval.collection
                    }]
                };
                c.savingInProgress = !0,
                d.setStatsConfiguration(f).then(function(d) {
                    G = angular.copy(d),
                    b = _.find(d, function(a) {
                        return "statsCollection" === a.statsOperation
                    }),
                    c.mode.value = "Collection Interval: " + b.operationInterval + " minutes",
                    e.success("Statistics collection interval updated successfully", 2e3),
                    a.cancelEdit(c),
                    c.savingInProgress = !1
                }, function(b) {
                    a.cancelEdit(c, "statsConfiguration"),
                    c.savingInProgress = !1,
                    c.selectedRadioButton = "enabled",
                    angular.isDefined(b) && angular.isDefined(b.error) && (b.error.buttonText = "OK"),
                    e.confirm(b)
                })
            }
        },
        maintenanceWindow: {
            open: !1,
            edit: !1,
            startTime: "",
            endTime: "",
            startTimeMillis: "",
            endTimeMillis: "",
            startTimeFormatted: "",
            endTimeFormatted: "",
            startTimeMissing: !1,
            endTimeMissing: !1,
            isDateRangeInvalid: !1,
            isPastCurrentTime: !1,
            getMaintenanceWindowSettings: function() {
                var a = this;
                d.getMaintenanceWindow().then(function(b) {
                    L = angular.copy(b.data),
                    angular.isObject(b.data) && !_.isEmpty(b.data) && (a.startTimeMillis = b.data[0].epochStartTimeInMillis,
                    a.endTimeMillis = b.data[0].epochEndTimeInMillis,
                    a.startTimeFormatted = g("date")(a.startTimeMillis, "dd MMM yyyy h:mm a"),
                    a.endTimeFormatted = g("date")(a.endTimeMillis, "dd MMM yyyy h:mm a"),
                    a.duration = a.startTimeMillis && a.endTimeMillis ? "Duration: " + Math.round(a.endTimeMillis - a.startTimeMillis) / 6e4 + " minutes.    From " + a.startTimeFormatted + " to " + a.endTimeFormatted : "Not Configured",
                    a.startTime = g("date")(a.startTimeMillis, "MM dd yyyy HH:mm"),
                    a.endTime = g("date")(a.endTimeMillis, "MM dd yyyy HH:mm"))
                }, function(a) {
                    e.confirm(a)
                })
            },
            saveMaintenanceWindowSettings: function() {
                var b, f, g = this;
                if (c.isUndefinedOrEmpty(g.startTime))
                    return void (g.startTimeMissing = !0);
                if (g.startTimeMissing = !1,
                c.isUndefinedOrEmpty(g.endTime))
                    return void (g.endTimeMissing = !0);
                if (g.endTimeMissing = !1,
                b = new Date(g.startTime).getTime(),
                f = new Date(g.endTime).getTime(),
                f < b)
                    return void (g.isDateRangeInvalid = !0);
                if (g.isDateRangeInvalid = !1,
                b < Date.now() || f < Date.now())
                    return void (g.isPastCurrentTime = !0);
                g.isPastCurrentTime = !1;
                var h = {
                    message: "",
                    epochStartTimeInMillis: b,
                    epochEndTimeInMillis: f
                };
                g.savingInProgress = !0,
                d.saveMaintenanceWindow(h).then(function(b) {
                    L = angular.copy(b.data),
                    e.success("Maintenance Window updated successfully", 5e3),
                    a.cancelEdit(g, "maintenanceWindow"),
                    g.savingInProgress = !1
                }, function(b) {
                    g.savingInProgress = !1,
                    a.cancelEdit(g, "maintenanceWindow"),
                    angular.isDefined(b) && angular.isDefined(b.error) && (b.error.buttonText = "OK"),
                    e.confirm(b)
                })
            }
        },
        statsDBConfig: {
            open: !1,
            edit: !1,
            maxAvailableSize: void 0,
            savingInProgress: !1,
            cancelEdit: function(a) {
                a.edit = !1,
                a.open = !1
            },
            saveComplete: function(a) {
                var b = this;
                b.edit = !1,
                b.open = !1,
                angular.isDefined(a) && a !== b.maxAvailableSize && (b.maxAvailableSize = a)
            },
            onLoad: function(a) {
                var b = this;
                angular.isDefined(a) && a !== b.maxAvailableSize && (b.maxAvailableSize = a)
            }
        }
    },
    a.changeStatsRadioState = function(b, c, d) {
        if ("custom" === b)
            if (a.settings.statsSetting.edit) {
                0 === c.disableDeviceList.length && (c.enableDeviceList = angular.copy(a.deviceList));
                f.show({
                    templateUrl: "app/admin/settings/customSelectDevicesTemplateModal.html",
                    controller: "customSelectDevicesTemplateModalCtrl",
                    targetEvent: d,
                    resolve: {
                        option: function() {
                            return c
                        },
                        mode: function() {
                            return a.settings.statsSetting.edit
                        }
                    }
                }).then(function(b) {
                    var d = [];
                    angular.forEach(b, function(b) {
                        var c = _.findIndex(a.deviceList, function(a) {
                            return angular.equals(a.localSystemIp, b.localSystemIp)
                        });
                        c > -1 && d.push(a.deviceList[c])
                    }),
                    c.enableDeviceList = angular.copy(a.deviceList),
                    c.disableDeviceList = angular.copy(d),
                    angular.forEach(c.disableDeviceList, function(a) {
                        var b = _.findIndex(c.enableDeviceList, function(b) {
                            return angular.equals(b.localSystemIp, a.localSystemIp)
                        });
                        b > -1 && c.enableDeviceList.splice(b, 1)
                    }),
                    0 === c.enableDeviceList.length && c.disableDeviceList.length === a.deviceList.length ? (c.status = "disable",
                    c.customOptionState = "Custom") : 0 === c.disableDeviceList.length && c.enableDeviceList.length === a.deviceList.length ? (c.status = "enable",
                    c.customOptionState = "Custom") : (c.status = "custom",
                    c.customOptionState = "Enabled:" + c.enableDeviceList.length + "/" + a.deviceList.length)
                }, function() {
                    i.info("Modal dismissed at: " + new Date);
                    var b = _.find(a.statsRadioList, function(a) {
                        return angular.equals(a.indexName, c.indexName)
                    });
                    c.status = b.status,
                    "custom" !== b.status ? ("enable" === b.status ? (c.enableDeviceList = angular.copy(a.deviceList),
                    c.disableDeviceList = []) : (c.enableDeviceList = [],
                    c.disableDeviceList = angular.copy(a.deviceList)),
                    c.customOptionState = "Custom") : (c.enableDeviceList = angular.copy(b.enableDeviceList),
                    c.disableDeviceList = angular.copy(b.disableDeviceList),
                    c.customOptionState = "Enabled:" + c.enableDeviceList.length + "/" + a.deviceList.length)
                })
            } else {
                f.show({
                    templateUrl: "app/admin/settings/customSelectDevicesTemplateModal.html",
                    controller: "customSelectDevicesTemplateModalCtrl",
                    targetEvent: d,
                    size: "lg",
                    resolve: {
                        option: function() {
                            return c
                        },
                        mode: function() {
                            return a.settings.statsSetting.edit
                        }
                    }
                }).then(function(a) {}, function() {
                    i.info("Modal dismissed at: " + new Date)
                })
            }
        else {
            c.customOptionState = "Custom";
            var e = _.find(a.statsRadioList, function(a) {
                return angular.equals(a.indexName, c.indexName)
            });
            "custom" !== e.status && (c.customOptionState = "Custom",
            "enable" === e.status ? (c.enableDeviceList = angular.copy(a.deviceList),
            c.disableDeviceList = []) : "disable" === e.status && (c.enableDeviceList = [],
            c.disableDeviceList = angular.copy(a.deviceList)))
        }
    }
    ,
    a.settings.enableBanner.getBannerInfoSetting(),
    a.settings.cloudExpress.getCloudExpressSetting(),
    a.settings.cloudCA.getCloudCASettings(),
    a.settings.clientSessionTimeout.getSessionTimeoutSettings(),
    a.settings.tenancyMode.getTenancyModeSettings(),
    a.settings.dataStream.getDataStream(),
    a.settings.statsConfiguration.getStatsConfiguration(),
    a.settings.maintenanceWindow.getMaintenanceWindowSettings(),
    a.importCertificateFlag = !1,
    a.generateCertificateFlag = !1,
    a.webServer = {},
    a.webServer.csrDetails = "",
    a.webServer.certificate = "",
    a.summary = {},
    a.viewCSR = !1,
    a.challengeRequirement = !1,
    a.configCertificateAuth.sliderValue = "60",
    a.hideChallengeField = !1,
    a.editChallengePhrase = {};
    var N = !1;
    a.generateWebServerCertificate = {
        certificateCommonName: "",
        certificateOrgUnit: "",
        certificateOrg: "",
        certificateCity: "",
        certificateState: "",
        certificateCountry: ""
    };
    var O = angular.copy(a.generateWebServerCertificate);
    a.validityPeriodOptions = [{
        id: 0,
        key: "1 year",
        value: "1 Year",
        postValue: "1Y"
    }, {
        id: 1,
        key: "2 years",
        value: "2 Years",
        postValue: "2Y"
    }, {
        id: 2,
        key: "3 years",
        value: "3 Years",
        postValue: "3Y"
    }],
    a.sessiotimeOutOptions = [{
        id: 0,
        key: "1 year",
        value: "1 Year",
        postValue: "1Y"
    }, {
        id: 1,
        key: "2 years",
        value: "2 Years",
        postValue: "2Y"
    }, {
        id: 2,
        key: "3 years",
        value: "3 Years",
        postValue: "3Y"
    }],
    a.selectedValidityPeriod = a.validityPeriodOptions[0],
    a.certificateValidityOptions = [{
        id: 0,
        key: "1 Year",
        value: "1 Year",
        postValue: 1
    }, {
        id: 1,
        key: "2 Years",
        value: "2 Years",
        postValue: 2
    }, {
        id: 2,
        key: "3 Years",
        value: "3 Years",
        postValue: 3
    }],
    a.sliderOptions = {
        from: 1,
        to: 60,
        step: 1,
        dimension: " min",
        css: {
            background: {
                "background-color": "#E0E0E0"
            },
            before: {
                "background-color": "#616161"
            },
            pointer: {
                "background-color": "#039be5"
            }
        }
    };
    var P = h.checkSidebarState();
    P && (h.allowAccess("Settings") && (a.writePermission = !0),
    h.allowAccess("Software Upgrade") && (a.repositoryPermission = !0)),
    this.isActive = function(a) {
        var c = b.current.url
          , d = c.indexOf(a);
        return 1 === d
    }
    ,
    d.getOrgNameSettings().then(function(b) {
        z--,
        z || (a.serverCall = !1),
        r(b)
    }, function(b) {
        a.serverCall = !1,
        e.confirm(b)
    }),
    d.getvBondSettings().then(function(b) {
        z--,
        z || (a.serverCall = !1),
        s(b)
    }, function(b) {
        a.serverCall = !1,
        e.confirm(b)
    }),
    d.getCertificateSettings().then(function(b) {
        z--,
        z || (a.serverCall = !1),
        t(b)
    }, function(b) {
        a.serverCall = !1,
        e.confirm(b)
    }),
    d.getWebServerSettings().then(function(b) {
        z--,
        z || (a.serverCall = !1),
        u(b)
    }, function(b) {
        a.serverCall = !1,
        e.confirm(b)
    }),
    M.getAnalyticsSettings();
    var Q = function() {
        d.getSoftwareVersionSettings().then(function(b) {
            z--,
            z || (a.serverCall = !1),
            R(b)
        }, function(b) {
            a.serverCall = !1,
            e.confirm(b)
        }),
        m.getControllerVersions().then(function(b) {
            a.controllerVersionList = b
        })
    }
      , R = function(b) {
        d.getSoftwareVersionList().then(function(c) {
            z--,
            z || (a.serverCall = !1),
            v(b, c)
        }, function(b) {
            a.serverCall = !1,
            e.confirm(b)
        })
    };
    Q(),
    a.viewSettings = function(b) {
        a.cursorClass = "viewSettings",
        x(),
        a.manualFlag = !0,
        a.disableSelectVersion = !0,
        b.open = !b.open
    }
    ,
    a.editSettings = function(a) {
        a.hasOwnProperty("controlsUp") ? a.controlsUp || y(a) : y(a)
    }
    ,
    a.cancelEdit = function(b, c, d) {
        if (a.disableEnforceZTPVersion = !1,
        a.showVersionError = !1,
        a.versionError = "",
        b.edit = !1,
        b.open = !1,
        c)
            if ("orgName" === c && (a.configSettings.confirmOrgName = "",
            a.configSettings.orgName = angular.copy(H)),
            "webServer" === c && (a.viewCSR = !1,
            a.generateWebServerCertificate = angular.copy(O),
            a.selectedCertificateValidity = a.certificateValidityOptions[0]),
            "vBond" === c && (a.configvBond = angular.copy(I)),
            "certificateAuth" === c && (a.configCertificateAuth = angular.copy(J),
            "1Y" === angular.copy(K).postValue ? a.selectedValidityPeriod = a.validityPeriodOptions[0] : "2Y" === angular.copy(K).postValue ? a.selectedValidityPeriod = a.validityPeriodOptions[1] : "3Y" === angular.copy(K).postValue && (a.selectedValidityPeriod = a.validityPeriodOptions[2])),
            "cloudCA" === c && (a.settings.cloudCA.selectedRadioButton = a.settings.cloudCA.mode),
            "softwareVersion" === c && (angular.forEach(a.softwareVersionOptions, function(b, c) {
                angular.isDefined(A) ? b.id === angular.copy(A).id && (a.selectedSoftwareVersion = a.softwareVersionOptions[c]) : a.selectedSoftwareVersion = null
            }),
            a.softwareVersion.selectedRadioButton = angular.copy(B)),
            "cloudExpress" === c)
                "on" == C ? a.settings.cloudExpress.selectedRadioButton = "enabled" : a.settings.cloudExpress.selectedRadioButton = "disabled";
            else if ("analytics" === c)
                "Enabled" === a.settings.analytics.mode && 0 == d.$valid && (a.settings.analytics.mode = "Disabled",
                a.settings.analytics.config.enabled = !1),
                M.resetData();
            else if ("sessionTimeout" === c)
                D.isEnabled ? (a.settings.clientSessionTimeout.timeout = D.timeout,
                a.settings.clientSessionTimeout.selectedRadioButton = "enabled") : (a.settings.clientSessionTimeout.timeout = "",
                a.settings.clientSessionTimeout.selectedRadioButton = "disabled");
            else if ("tenancyMode" === c)
                a.settings.tenancyMode.selectedRadioButton = E.mode,
                a.settings.tenancyMode.mode = E.domain,
                a.settings.tenancyMode.clusterId = E.clusterid;
            else if ("dataStream" === c)
                a.settings.dataStream.selectedRadioButton = F.enable ? "enabled" : "disabled",
                a.settings.dataStream.hostName = F.serverHostName,
                a.settings.dataStream.vpn = F.vpn;
            else if ("statsConfiguration" === c) {
                var e = _.find(G, function(a) {
                    return "statsCollection" === a.statsOperation
                });
                a.settings.statsConfiguration.interval.collection = e.operationInterval
            } else
                "maintenanceWindow" === c && (a.settings.maintenanceWindow.startTime = g("date")(L[0].epochStartTimeInMillis, "MM dd yyyy HH:mm"),
                a.settings.maintenanceWindow.endTime = g("date")(L[0].epochEndTimeInMillis, "MM dd yyyy HH:mm"),
                a.settings.maintenanceWindow.duration = L[0].epochStartTimeInMillis && L[0].epochEndTimeInMillis ? "Duration: " + Math.round(L[0].epochEndTimeInMillis - L[0].epochStartTimeInMillis) / 6e4 + " minutes.    From " + g("date")(L[0].epochStartTimeInMillis, "dd MMM yyyy h:mm a") + " to " + g("date")(L[0].epochEndTimeInMillis, "dd MMM yyyy h:mm a") : "Not Configured",
                a.settings.maintenanceWindow.startTimeFormatted = g("date")(L[0].epochStartTimeInMillis, "dd MMM yyyy h:mm a"),
                a.settings.maintenanceWindow.endTimeFormatted = g("date")(L[0].epochEndTimeInMillis, "dd MMM yyyy h:mm a"));
        d && (d.$setPristine(),
        d.$setUntouched())
    }
    ,
    a.generateCertificate = function(b) {
        b.open = !0,
        x(),
        a.generateCertificateFlag = !0,
        a.importCertificateFlag = !1
    }
    ,
    a.importCertificate = function(b) {
        b.open = !0,
        x(),
        a.importCertificateFlag = !0,
        a.generateCertificateFlag = !1
    }
    ,
    a.saveOrgName = function(b, c, g) {
        var h = {
            "domain-id": "1",
            org: a.configSettings.orgName
        };
        if (H)
            if (H !== a.configSettings.orgName) {
                f.show({
                    templateUrl: b,
                    controller: "changeOrgName",
                    targetEvent: g
                }).then(function(b) {
                    a.orgNameServerCall = !0,
                    h = {
                        "domain-id": "1",
                        org: a.configSettings.orgName,
                        password: b
                    },
                    d.editOrgNameSettings(h).then(function(b) {
                        a.orgNameServerCall = !1,
                        r(b),
                        a.cancelEdit(a.settings.orgName, "orgName", c),
                        e.success("Organization Name Edited Successfully", 2e3)
                    }, function(b) {
                        a.orgNameServerCall = !1,
                        e.confirm(b)
                    })
                }, function() {
                    a.cancelEdit(a.settings.orgName, "orgName", c)
                })
            } else
                a.orgNameServerCall = !0,
                d.editOrgNameSettings(h).then(function(b) {
                    r(b),
                    a.orgNameServerCall = !1,
                    a.cancelEdit(a.settings.orgName, "orgName", c),
                    e.success("Organization Name Edited Successfully", 2e3)
                }, function(b) {
                    a.orgNameServerCall = !0,
                    e.confirm(b)
                });
        else
            a.orgNameServerCall = !1,
            d.setOrgNameSettings(h).then(function(b) {
                r(b),
                a.cancelEdit(a.settings.orgName, "orgName", c),
                a.orgNameServerCall = !1,
                e.success("Organization Name Edited Successfully", 2e3)
            }, function(b) {
                a.orgNameServerCall = !1,
                e.confirm(b)
            })
    }
    ,
    a.savevBondIP = function() {
        a.vBondServerCall = !0;
        var b = {
            domainIp: a.configvBond.domainIp,
            port: a.configvBond.port.toString()
        };
        "Not Configured" !== a.summary.domainIp ? d.editvBondSettings(b).then(function(b) {
            s(b),
            a.cancelEdit(a.settings.vBond),
            a.vBondServerCall = !1,
            e.success("vBond IP Edited Successfully", 2e3)
        }, function(b) {
            a.vBondServerCall = !1,
            e.confirm(b)
        }) : d.setvBondSettings(b).then(function(b) {
            s(b),
            a.cancelEdit(a.settings.vBond),
            a.vBondServerCall = !1,
            e.success("vBond IP Edited Successfully", 2e3)
        }, function(b) {
            a.vBondServerCall = !1,
            e.confirm(b)
        })
    }
    ,
    a.saveCertificateAuthorization = function() {
        a.certificateServerCall = !0;
        var b = {
            certificateSigning: a.configCertificateAuth.selectedRadioButton,
            firstName: a.configCertificateAuth.certificateFirstName,
            lastName: a.configCertificateAuth.certificateLastName,
            email: a.configCertificateAuth.certificateEmail,
            validityPeriod: a.selectedValidityPeriod.postValue,
            retrieveInterval: a.configCertificateAuth.sliderValue
        };
        a.configCertificateAuth.hideChallengeField || (b.challenge = a.configCertificateAuth.challenge),
        N ? (N = !1,
        d.setCertificateSettings(b).then(function(b) {
            t(b),
            a.cancelEdit(a.settings.certificateAuth),
            a.certificateServerCall = !1,
            e.success("Certificate Authorization Edited Successfully", 2e3)
        }, function(b) {
            a.certificateServerCall = !1,
            e.confirm(b)
        })) : d.editCertificateSettings(b).then(function(b) {
            t(b),
            a.cancelEdit(a.settings.certificateAuth),
            a.certificateServerCall = !1,
            e.success("Configuration Edited Successfully", 2e3)
        }, function(b) {
            a.certificateServerCall = !1,
            e.confirm(b)
        })
    }
    ,
    a.generateServerCertificate = function() {
        a.webServerCall = !0;
        var b = {
            company_name: a.generateWebServerCertificate.certificateCommonName,
            org_unit: a.generateWebServerCertificate.certificateOrgUnit,
            org: a.generateWebServerCertificate.certificateOrg,
            location: a.generateWebServerCertificate.certificateCity,
            state: a.generateWebServerCertificate.certificateState,
            country: a.generateWebServerCertificate.certificateCountry,
            validity: a.selectedCertificateValidity.postValue
        };
        d.postWebServerSettings(b).then(function(b) {
            a.webServerCall = !1,
            a.viewCSR = !0,
            a.webServer.csrDetails = b.csrDetails,
            e.success("CSR Generated Successfully", 2e3)
        }, function(b) {
            a.webServerCall = !1,
            a.viewCSR = !1,
            e.confirm(b)
        })
    }
    ,
    a.importWebServerCertificate = function() {
        a.webServerCall = !0,
        d.editWebServerSettings(a.webServer.certificate).then(function(b) {
            a.webServerCall = !1,
            a.webServer.currentCertificate = b.certificateDetails ? b.certificateDetails : "",
            e.success("Certificate Installed Successfully", 2e3)
        }, function(b) {
            a.webServerCall = !1,
            e.confirm(b)
        })
    }
    ,
    a.saveSoftwareVersion = function() {
        a.softwareVersionCall = !0;
        var b = {
            enableUpgrade: "enabled" === a.softwareVersion.selectedRadioButton,
            versionId: "enabled" === a.softwareVersion.selectedRadioButton ? a.selectedSoftwareVersion.id : ""
        };
        d.editSoftwareVersionSettings(b).then(function(b) {
            a.softwareVersionCall = !1,
            e.success("Software Version Updated Successfully", 2e3),
            Q(),
            a.cancelEdit(a.settings.enableSoftwareVersion)
        }, function(b) {
            a.softwareVersionCall = !1,
            e.confirm(b)
        })
    }
    ,
    a.processChange = function(b) {
        a.configCertificateAuth.selectedRadioButton = b,
        "manual" === b ? a.manualFlag = !0 : (a.manualFlag = !1,
        a.configCertificateAuth = {
            selectedRadioButton: b,
            certificateFirstName: angular.copy(J).certificateFirstName,
            certificateLastName: angular.copy(J).certificateLastName,
            certificateEmail: angular.copy(J).certificateEmail,
            sliderValue: angular.copy(J).sliderValue,
            hideChallengeField: angular.copy(J).hideChallengeField,
            showEditChallengeBox: angular.copy(J).showEditChallengeBox
        },
        a.configCertificateAuth.hideChallengeField || (a.configCertificateAuth.challenge = angular.copy(J).challenge,
        a.configCertificateAuth.confirmChallenge = angular.copy(J).confirmChallenge),
        "1Y" === angular.copy(K).postValue ? a.selectedValidityPeriod = a.validityPeriodOptions[0] : "2Y" === angular.copy(K).postValue ? a.selectedValidityPeriod = a.validityPeriodOptions[1] : "3Y" === angular.copy(K).postValue && (a.selectedValidityPeriod = a.validityPeriodOptions[2]))
    }
    ,
    a.changeState = function(b, c) {
        a.disableEnforceZTPVersion = !1,
        a.showVersionError = !1,
        a.versionError = "",
        "disabled" === b ? (a.selectedSoftwareVersion = null,
        a.disableSelectVersion = !0,
        c.$setPristine()) : a.disableSelectVersion = !1
    }
    ,
    a.showToolTip = function() {
        a.challengeRequirement = !0
    }
    ,
    a.onSelectCertificateValidityPeriod = function(b) {
        a.selectedCertificateValidity = b
    }
    ,
    a.onSelectSoftwareVersion = function(b) {
        a.showVersionError = !1,
        a.errorType = "";
        var d = "Selecting a version higher than the controller may cause software incompatibilities. It is recommended that you upgrade the controller software before proceeding."
          , e = "This version is not supported.\nSelecting a version higher than the controller may cause software incompatibilities. It is recommended that you upgrade the controller software before proceeding."
          , f = c.isUpgradeVersionSupported(a.controllerVersionList, b.value);
        f.isUpgradeSafe ? (a.disableEnforceZTPVersion = !1,
        a.showVersionError = !1,
        a.versionError = "") : f.blockUpgrade ? (a.errorType = "error",
        a.disableEnforceZTPVersion = !0,
        a.showVersionError = !0,
        a.versionError = e) : (a.errorType = "warning",
        a.disableEnforceZTPVersion = !1,
        a.showVersionError = !0,
        a.versionError = d),
        a.selectedSoftwareVersion = b
    }
    ,
    a.onSelectValidityPeriod = function(b) {
        a.selectedValidityPeriod = b
    }
    ,
    a.download = function() {
        var b = document.createElement("a");
        b.download = "webServer.csr",
        b.href = "data:csr/plain;charset=UTF-8," + encodeURIComponent(a.webServer.csrDetails),
        document.body.appendChild(b),
        b.click(),
        document.body.removeChild(b)
    }
    ,
    a.showContent = function(b) {
        a.webServer.certificate = b
    }
    ,
    a.showChallengePhrase = function() {
        a.configCertificateAuth.hideChallengeField = !a.configCertificateAuth.hideChallengeField
    }
    ,
    a.disableStatsButton = {},
    a.statsServerCall = !0,
    a.$watchCollection("disableStatsButton", function(b, c) {
        if (!_.isEmpty(b) && b !== c) {
            a.statsServerCall = !1;
            for (var d in b)
                b[d] && (a.statsServerCall = !0)
        }
    })
}
function vipButton() {
    return {
        restrict: "AE",
        templateUrl: "app/common/button-partial.html",
        scope: {
            buttonTitle: "@",
            buttonSize: "@",
            buttonColor: "@",
            buttonDisabled: "=",
            layoutClass: "@",
            floatDir: "@",
            buttonType: "@",
            buttonId: "@",
            done: "&"
        }
    }
}
function vipButtonDropDownIcon(a, b, c) {
    return {
        restrict: "AE",
        templateUrl: "app/common/buttonDropDownIcon-partial.html",
        scope: {
            buttonTitle: "@",
            iconClass: "@",
            layoutClass: "@",
            dropDownMenuTitle: "@",
            showTitle: "@",
            idPrefix: "@",
            dropDownOptions: "=",
            table: "=",
            buttonId: "@"
        },
        link: function(a, b, c) {
            var d, e, f;
            a.options = [];
            for (var g = 0; g < a.dropDownOptions.length; g++) {
                var h = {};
                d = a.dropDownOptions[g],
                e = d.toLowerCase(d).replace(/ /g, "_"),
                f = a.dropDownOptions[g],
                h.id = e,
                h.value = f,
                a.options.push(h)
            }
            a.status = {
                isopen: !1
            },
            a.toggleDropdown = function(b) {
                b.preventDefault(),
                b.stopPropagation(),
                a.status.isopen = !a.status.isopen
            }
        },
        controller: ["$scope", "$element", "$attrs", "$mdDialog", function(c, d, e, f) {
            c.gridOptions,
            c.open = function(d, e) {
                var g;
                if ("vManage" === d)
                    g = f.show({
                        templateUrl: "app/maintenance/softwareUpgrade/addNewSwFromVmanage-partial.html",
                        controller: "addNewSwFromVmanageController",
                        controllerUrl: "app/maintenance/softwareUpgrade/AddNewSwFromVmanageController",
                        openFrom: angular.element(document.querySelector("#" + c.buttonId)),
                        closeTo: angular.element(document.querySelector("#" + c.buttonId))
                    });
                else if ("Remote Server" === d)
                    g = f.show({
                        templateUrl: "app/maintenance/softwareUpgrade/addNewSwFromRemoteServer-partial.html",
                        controller: "addNewSwFromRemoteServerController",
                        controllerUrl: "app/maintenance/softwareUpgrade/AddNewSwFromRemoteServerController",
                        openFrom: angular.element(document.querySelector("#" + c.buttonId)),
                        closeTo: angular.element(document.querySelector("#" + c.buttonId))
                    });
                else if ("vBond" === d)
                    g = f.show({
                        templateUrl: "app/configuration/devices/modalTemplates/addvBondTemplate.html",
                        controller: "addvBondModalCtrl",
                        controllerUrl: "app/configuration/devicesController",
                        openFrom: angular.element(document.querySelector("#" + c.buttonId)),
                        closeTo: angular.element(document.querySelector("#" + c.buttonId)),
                        resolve: {
                            tableObject: function() {
                                return c.table
                            }
                        }
                    });
                else if ("vSmart" === d)
                    g = f.show({
                        templateUrl: "app/configuration/devices/modalTemplates/addvSmartTemplate.html",
                        controller: "addvSmartModalCtrl",
                        controllerUrl: "app/configuration/devicesController",
                        openFrom: angular.element(document.querySelector("#" + c.buttonId)),
                        closeTo: angular.element(document.querySelector("#" + c.buttonId)),
                        resolve: {
                            tableObject: function() {
                                return c.table
                            }
                        }
                    });
                else if ("vEdge 1000" === d)
                    g = f.show({
                        templateUrl: "app/configuration/addvBondTemplate.html",
                        controller: "devicesModalInstanceCtrl",
                        controllerUrl: "app/configuration/devicesController",
                        targetEvent: e
                    });
                else if ("vEdge 200" === d)
                    g = f.show({
                        templateUrl: "app/configuration/addvSmartTemplate.html",
                        controller: "devicesModalInstanceCtrl",
                        controllerUrl: "app/configuration/devicesController",
                        targetEvent: e
                    });
                else if ("CLI mode" === d)
                    g = f.show({
                        templateUrl: "app/configuration/devices/modalTemplates/changeModeTemplate.html",
                        controller: "changeModeCLICtrl",
                        controllerUrl: "app/configuration/devicesController",
                        openFrom: angular.element(document.querySelector("#" + c.buttonId)),
                        closeTo: angular.element(document.querySelector("#" + c.buttonId)),
                        resolve: {
                            tableObject: function() {
                                return c.table
                            },
                            deviceType: function() {
                                return ""
                            }
                        }
                    });
                else {
                    if ("vManage mode" !== d)
                        return !1;
                    g = f.show({
                        templateUrl: "app/configuration/devices/modalTemplates/vManageModeTemplate.html",
                        controller: "changeModevManageCtrl",
                        controllerUrl: "app/configuration/devicesController",
                        openFrom: angular.element(document.querySelector("#" + c.buttonId)),
                        closeTo: angular.element(document.querySelector("#" + c.buttonId)),
                        resolve: {
                            tableObject: function() {
                                return c.table
                            }
                        }
                    })
                }
                g.then(function(b) {
                    c.selected = b,
                    a(function() {
                        c.table.refresh()
                    }, 500)
                }, function() {
                    b.info("Modal dismissed at: " + new Date)
                })
            }
        }
        ]
    }
}
function vipButtonIcon(a, b) {
    return {
        restrict: "AE",
        templateUrl: "app/common/buttonIcon-partial.html",
        scope: {
            buttonTitle: "@",
            iconClass: "@",
            iconAngle: "@",
            customColor: "@",
            dropDown: "@",
            buttonDisabled: "=",
            layoutClass: "@",
            buttonId: "@",
            popoverContainer: "@",
            buttonType: "@",
            popoverElem: "=",
            customClass: "@",
            iconColor: "@"
        },
        link: function(c, d, e) {
            d.bind("mouseleave", function() {
                $(d).popover("destroy")
            }),
            c.$watchCollection("popoverElem", function(b, e) {
                angular.isDefined(b) && (a.isUndefinedOrEmpty(b.text) || ($(d).popover({
                    container: "." + c.popoverContainer,
                    placement: b.placement,
                    content: b.text,
                    trigger: "click focus"
                }),
                $(d).popover("show"),
                $(".popover").attr("id", "button_icon_popover")))
            }),
            b(function() {
                angular.isDefined(c.customClass) && $("#" + c.buttonId).hover(function() {
                    $("#" + c.buttonId + "_custom_button_icon").addClass("hover")
                }, function() {
                    $("#" + c.buttonId + "_custom_button_icon").removeClass("hover")
                })
            })
        }
    }
}
function certificateSigningService() {
    var a = !1;
    return {
        getProperty: function() {
            return a
        },
        setProperty: function(b) {
            a = b
        },
        processData: function(a) {
            return !!a.data && "automated" === a.data[0].certificateSigning
        }
    }
}
function chartTestController(a, b, c, d, e, f) {
    a.charts = [];
    var g = {
        name: "sample_chart",
        chartURL: "dataservice/event/severity/chart/",
        zoom: !0
    }
      , h = {
        title: {
            text: "Sample Chart"
        },
        subtitle: {
            text: "* sub title aligned right"
        }
    }
      , i = new HighStockBarChart(g,h);
    a.charts.push({
        chartObject: i
    }),
    a.url = g.chartURL,
    a.updateChart = function() {
        a.charts[0].chartObject.updateChartURL(a.url)
    }
}
function vipCheckBox() {
    return {
        restrict: "AE",
        templateUrl: "app/common/checkBox-partial.html",
        scope: {
            checkBoxLabel: "@",
            checkBoxName: "@",
            layoutClass: "@",
            value: "=",
            update: "&",
            isCheckedInitially: "=",
            requiredField: "=",
            checkBoxDisabled: "@"
        }
    }
}
function vipComboBox() {
    return {
        restrict: "AE",
        templateUrl: "app/common/comboBox-partial.html",
        scope: {
            layoutClass: "@",
            comboBoxName: "@",
            comboBoxOptions: "=",
            optSelected: "=",
            comboBoxDisabled: "=",
            optionsRequired: "=",
            showComboBoxHeader: "=",
            comboBoxLabel: "@",
            comboBoxBorder: "@",
            comboBoxSize: "=",
            update: "="
        },
        link: function(a) {
            a.showComboBoxHeader || a.$watchCollection("comboBoxOptions", function(b) {
                angular.isDefined(b) && b.length > 0 && (b[0] !== a.optSelected && _.isEmpty(_.omit(a.optSelected, "$$hashKey")) && (a.optSelected = b[0]),
                a.updateOldVal = a.optSelected)
            }),
            a.changeHandler = function(b) {
                "function" == typeof a.update && (a.update(b, a.updateOldVal),
                a.updateOldVal = b)
            }
        }
    }
}
function vipCard() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "app/common/components/cardView/cardTemplate.html",
        scope: {
            cardObject: "=",
            actionItems: "="
        }
    }
}
function vipSimpleCard(a, b) {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            callbackFn: "&",
            cardIcon: "@",
            cardText: "@"
        },
        templateUrl: "app/common/components/cardView/simpleCardTemplate.html"
    }
}
function collapseSidebar() {
    return {
        restrict: "E",
        replace: !0,
        template: function(a, b) {
            return '<div collapse="isCollapsed" class="collapse-sidebar" ng-class="{\'slide-out\': isCollapsed}"><h3>This should collapse</h3><p>Here is some content so we have something to collapse. This is just me typing so something is here. I have nothing in particular to say. </p></div>'
        },
        scope: {
            sidebarTemplate: "=",
            isCollapsed: "="
        },
        link: function(a, b, c) {}
    }
}
function vipCollapsibleChart(a, b, c, d) {
    return {
        restrict: "AE",
        templateUrl: "app/common/components/collapsibleChart/collapsibleChart-partial.html",
        scope: {
            chartTitle: "@",
            chartUrl: "=",
            isChartCollapsed: "=",
            chartNames: "=",
            iconClass: "@",
            iconAngle: "@",
            chartQuery: "=",
            chartLegends: "="
        },
        link: function(a) {
            function d() {
                $(".chartWidgetRow.collapsibleChartContainer.active.in").length ? (a.chartObject.emptyAllSeriesData(),
                a.chartObject.addSeriesFromAPI(_.map(a.chartLegends, function(a) {
                    return {
                        name: a.name,
                        display: a.display,
                        type: "column"
                    }
                }), a.chartUrl.url, a.chartQuery)) : setTimeout(function() {
                    d()
                }, 50)
            }
            var e = {
                name: a.chartNames[0],
                zoom: !0
            }
              , f = {
                options: {
                    plotOptions: {
                        column: {
                            pointWidth: null,
                            maxPointWidth: 50,
                            pointPadding: 0
                        },
                        series: {
                            events: {
                                click: function(c) {
                                    var d = this.name
                                      , e = _.find(a.chartObject.chartConfig.series, function(a) {
                                        return a.name.toLowerCase() === d.toLowerCase()
                                    });
                                    b.toggleLegends(e)
                                }
                            }
                        }
                    }
                },
                title: {
                    text: ""
                },
                yAxis: {
                    min: .1,
                    minorTickInterval: 1,
                    tickInterval: 1,
                    title: {
                        text: "Count"
                    }
                },
                xAxis: {
                    type: "datetime",
                    labels: {
                        rotation: -25,
                        align: "right"
                    }
                }
            };
            a.chartObject = new c(e,f),
            a.chartObject.setXAxisProperty("entry_time"),
            a.chartObject.setYAxisProperty(["count"]),
            a.chartObject.setSeriesNames([{
                property: a.chartQuery.aggregation.field[0].property,
                values: []
            }]),
            a.chartObject.asyncLoad = !0,
            a.chartObject.originalChartConfig.legend.enabled = !1,
            a.isChartCollapsed.value || d(),
            a.showChart = function() {
                a.isChartCollapsed.value = !a.isChartCollapsed.value,
                a.isChartCollapsed.value ? a.serverCall = !1 : d()
            }
            ,
            a.$on("collapsibleChartTimeUpdated", function() {
                a.isChartCollapsed.value || d()
            })
        }
    }
}
function vipBtnDropDownItemOrderSelector(a, b) {
    return {
        restrict: "AE",
        templateUrl: "app/common/components/dropDown/btnDropDownItemOrderSelector-partial.html",
        scope: {
            layoutClass: "@",
            stateString: "@",
            orderedItemsList: "=",
            disabledFlag: "="
        },
        link: function(a, c, d) {
            function e() {
                a.orderedItemsToDisplay.reset(),
                a.numOrderedItemsSelected = 0,
                angular.forEach(a.orderedItemsList, function(b) {
                    (b.toggleSelection && b.isSelected || !b.toggleSelection) && (a.numOrderedItemsSelected++,
                    a.orderedItemsToDisplay.push(b.name))
                })
            }
            angular.isDefined(a.disabledFlag) && a.disabledFlag && $('[name="order_toggle_button"]').prop("disabled", !0),
            b.isUndefinedOrEmpty(a.layoutClass) && (a.layoutClass = "headerButtonIcon"),
            a.orderedItemsToDisplay = [],
            a.numOrderedItemsSelected = 0,
            a.dropDownStatus = {
                isopen: !1
            },
            e(),
            a.moveItemUp = function(b, c) {
                if (c.stopPropagation(),
                a.dropDownStatus.isopen = !0,
                0 !== b) {
                    var d = a.orderedItemsList[b];
                    a.orderedItemsList[b] = a.orderedItemsList[b - 1],
                    a.orderedItemsList[b - 1] = d,
                    a.orderedItems = angular.copy(a.orderedItemsList),
                    e()
                }
            }
            ,
            a.updateOrderedItemsList = function(b) {
                b.stopPropagation(),
                a.dropDownStatus.isopen = !0,
                e()
            }
        }
    }
}
function vipCsvImport() {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            content: "=",
            result: "="
        },
        template: '<span><input id="vip_table_file_import" type="file" accept=".csv" value=""><i id="vip_table_file_import_custom" class="fa fa-file-excel-o customIconStyle"> </p>Import file</p></i></span>',
        link: function(a, b) {
            $("#vip_table_file_import_custom").bind("click", function() {
                $("#vip_table_file_import").click()
            }),
            b.on("click", function(a) {
                $("#vip_table_file_import")[0].value = null
            }),
            b.on("change", function(b) {
                var d = new FileReader;
                if (d.onload = function(b) {
                    a.$apply(function() {
                        var d = {
                            csv: b.target.result,
                            header: !0,
                            separator: ","
                        };
                        a.content = d.csv,
                        a.result = c(d)
                    })
                }
                ,
                "file" !== b.target.type || null == b.target.files && null == b.srcElement.files) {
                    if (null != a.content) {
                        var e = {
                            csv: a.content,
                            header: !a.header,
                            separator: a.separator
                        };
                        a.result = c(e)
                    }
                } else
                    d.readAsText((b.srcElement || b.target).files[0])
            });
            var c = function(a) {
                var b = a.csv.replace(/[\r]+/g, "").split("\n")
                  , c = []
                  , d = 0
                  , e = b[0].split(a.separator).length
                  , f = [];
                a.header && (f = b[0].split(a.separator),
                d = 1);
                for (var g = d; g < b.length; g++) {
                    var h = {}
                      , i = b[g].split(a.separator);
                    if (i.length === e) {
                        if (a.header)
                            for (var j = 0; j < f.length; j++)
                                h[f[j]] = i[j];
                        else
                            for (var k = 0; k < i.length; k++)
                                h[k] = i[k];
                        c.push(h)
                    }
                }
                return JSON.stringify(c)
            }
        }
    }
}
function vipIframeOnLoad() {
    return {
        restrict: "A",
        scope: {
            callBack: "&onLoadCallback"
        },
        link: function(a, b) {
            b.on("load", function() {
                return a.callBack()
            })
        }
    }
}
function vipInnerCheckbox(a) {
    return {
        restrict: "A",
        link: function(b, c, d) {
            var e = angular.element(c)
              , f = c[0].offsetTop
              , g = c[0].offsetLeft + 5
              , h = d.ngModel + "Checked";
            b[h] = !1;
            var i = ("top:" + f.toString() + "px;",
            "left:" + g + "px;")
              , j = '<input type="' + d.type + '" id="' + d.id + '" ng-model="' + d.ngModel + '" name="' + d.name + '" ng-disabled="' + h + '" /><input style="position: absolute;z-index:1000;' + i + '" type="checkbox" ng-model="' + h + '"/>';
            e.replaceWith(a(j)(b))
        }
    }
}
function InputField(a) {
    var b = function(a, b) {
        angular.extend(this, a),
        this.value = b
    };
    return b
}
function vipMultiStateInput(a, b, c, d) {
    return c.put("number", '<input id="input_{{name}}" type="number" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled" data-ng-min="(inputModel.checkUneditable() || viewMode == \'view\' || isDisabled) ? false : inputModel.dataType.min" data-ng-max="(inputModel.checkUneditable() || viewMode == \'view\' || isDisabled)? false : inputModel.dataType.max">'),
    c.put("numberNonConstant", '<input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue">'),
    c.put("numberList", '<span><input id="input_{{name}}" vip-number-list-validation type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled"></span>'),
    c.put("numberListNonConstant", '<span><input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled"></span>'),
    c.put("numberListWithTrustedList", '<span><input id="input_{{name}}" vip-number-list-validation vip-trusted-list-validation auth-list="trustedList" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled"></span>'),
    c.put("numberListWithTrustedListNonConstant", '<span><input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled"></span>'),
    c.put("numberListWithKeyList", '<input id="input_{{name}}" type="number" class="form-control" aria-label="..." vip-key-validation auth-list="keyList" data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled">'),
    c.put("numberListWithKeyListNonConstant", ' <input id="input_{{name}}" type="number" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled">'),
    c.put("numberRange", '<input id="input_{{name}}" type="number" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled" vip-number-range-validation data-range="{{inputModel.dataType.range}}">'),
    c.put("numberRangeNonConstant", '<input id="input_{{name}}" type="number" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled">'),
    c.put("textAndPassphrase", '  <input id="input_{{name}}" type="{{inputType}}"class="form-control" aria-label="..."data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled" data-ng-minlength="(inputModel.checkUneditable() || viewMode == \'view\' || isDisabled) ? false : inputModel.dataType.minLength" data-ng-maxlength="inputModel.dataType.maxLength" ng-keydown="enterHashed($event)">'),
    c.put("textWithPrependString", ' <input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled" data-noneditable-prepend-string="{{ prependString }}" vip-append-string-validation data-prepend-string="prependString" data-content-type="inputModel.dataType" data-ng-init="!inputModel.vipValue && prependString ? inputModel.vipValue =  prependString : return;">'),
    c.put("textWithPrependStringNonConstant", '<input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue">'),
    c.put("hexaDecimalText", '<input id="input_{{name}}" type="{{inputType}}" class="form-control" aria-label="..." vip-hexa-decimal-validation data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled" data-ng-minlength="inputModel.dataType.minLength" data-ng-maxlength="inputModel.dataType.maxLength">'),
    c.put("restrictedPasswordString", '<input id="input_{{name}}" type="password" class="form-control" aria-label="..." vip-restricted-password-validation data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled" data-ng-minlength="inputModel.dataType.minLength" data-ng-maxlength="inputModel.dataType.maxLength">'),
    c.put("radioButtons", '<span class="vipMultiStateRadio"><md-radio-group data-ng-change="changeState({\'state\': inputModel.vipValue})" name="{{name}}"  ng-model="inputModel.vipValue" ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled"> <md-radio-button value="true" id="true_label_{{name}}" ng-class="{checked: inputModel.vipValue === \'true\', unChecked: inputModel.vipValue === \'false\'}">{{inputModel.dataType.label ? inputModel.dataType.label.on : \'On\' }}</md-radio-button> <md-radio-button style="margin-left: -3px;" id="false_label_{{name}}" value="false" ng-class="{checked: inputModel.vipValue === \'false\', unChecked: inputModel.vipValue === \'true\'}">{{inputModel.dataType.label ? inputModel.dataType.label.off : \'Off\' }}</md-radio-button> </md-radio-group></span>'),
    c.put("enumSingleSelect", '<select id="input_{{name}}" data-ng-model="inputModel.vipValue" data-ng-options="opt.key as opt.value for opt in inputModel.dataType.values" name="{{name}}" data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" vip-select-validation data-ng-required="inputModel.vipType === \'constant\' && !isDisabled"></select>'),
    c.put("enumMultiSelect", '<div class="templateUiSelectBlock" ><ui-select ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" multiple data-ng-model="inputModel.vipValue" theme="bootstrap" class="ui-select" id="input_{{name}}"><ui-select-match id="input_{{name}}_selection" placeholder="Select groups...">{{$item.value}}</ui-select-match><ui-select-choices repeat="option.key as option in inputModel.dataType.values  | propsFilter: {key: $select.search, value: $select.search}"><div ng-bind-html="option.value | highlight: $select.search" id="select_choice_{{option.value}}_{{name}}"></div></ui-select-choices></ui-select><p ng-show="(inputModel.vipType === \'constant\' && (inputModel.vipValue.length < 1))" class="errorMsg" style="margin: 0px;" id="{{name}}_validation_msg">Required</p></div>'),
    c.put("enumMultiSelectNonConstant", '<input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\'">'),
    c.put("snmpOID", ' <span><input id="input_{{name}}" vip-oid-validation type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue"></span>'),
    c.put("snmpOIDNonConstant", '<span><input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue"></span>'),
    c.put("iface", '<span><input id="input_{{name}}"  list=\'ifList\' class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled" data-ng-minlength="inputModel.dataType.minLength" data-ng-maxlength="inputModel.dataType.maxLength"><datalist id=\'ifList\'><option  data-ng-repeat="interface in interfaceList" value="{{interface.value}}"></datalist><input id="input_{{name}}_sub_name" placeholder="-- Enter --" style="margin-left: 20px; width: 75px;" class="form-control" aria-label="..." data-ng-if="showIfSubName(inputModel.vipValue)" data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="ifKey" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled"></span>'),
    c.put("mac", '<span><input id="input_{{name}}" vip-mac-validation type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled"></span>'),
    c.put("macNonConstant", '<span><input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled"></span>'),
    c.put("macList", '<span><input id="input_{{name}}" vip-mac-list-validation type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled"></span>'),
    c.put("macListNonConstant", '<span><input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled"></span>'),
    c.put("ipv4", '<span><input id="input_{{name}}" vip-ip-v4-validation type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue"></span>'),
    c.put("ipv4NonConstant", '<span><input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue"></span>'),
    c.put("ipv4Prefix", '<span><input id="input_{{name}}" vip-ip-v4-prefix-validation type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue"></span>'),
    c.put("ipv4PrefixNonConstant", '<span><input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue"></span>'),
    c.put("ipv4List", ' <span><input id="input_{{name}}" vip-ipv4-list-validation type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-max="inputModel.dataType.max" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled"></span>'),
    c.put("ipv4ListNonConstant", '<span><input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-max="inputModel.dataType.max" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled"></span>'),
    c.put("ipv4RangeList", '<span><input id="input_{{name}}" vip-ipv4-range-list-validation type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-max="inputModel.dataType.max" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled"></span>'),
    c.put("ipv4RangeListNonConstant", '<span><input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-max="inputModel.dataType.max" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled"></span>'),
    c.put("ipv6", '<span><input id="input_{{name}}" vip-ip-v6-validation type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue"></span>'),
    c.put("ipv6NonConstant", '<span><input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue"></span>'),
    c.put("ipv6Prefix", '<span><input id="input_{{name}}" vip-ip-v6-prefix-validation type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue"></span>'),
    c.put("ipv6PrefixNonConstant", ' <span><input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue"></span>'),
    c.put("ipv6List", '<span><input id="input_{{name}}" vip-ipv6-list-validation type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-max="inputModel.dataType.max" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled"></span>'),
    c.put("ipv6ListNonConstant", ' <span><input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-max="inputModel.dataType.max" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled"></span>'),
    c.put("ip", '<span><input id="input_{{name}}" vip-ip-v4-v6-validation type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue"></span>'),
    c.put("ipNonConstant", '<span><input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-model="inputModel.vipValue"></span>'),
    c.put("ipList", '<span><input id="input_{{name}}" vip-ip-list-validation type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-max="inputModel.dataType.max" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled">'),
    c.put("ipListNonConstant", ' <span><input id="input_{{name}}" type="text" class="form-control" aria-label="..." data-ng-disabled="inputModel.checkUneditable() || viewMode == \'view\' || isDisabled" name="{{name}}" data-ng-max="inputModel.dataType.max" data-ng-model="inputModel.vipValue" data-ng-required="inputModel.vipType === \'constant\' && !isDisabled"></span>'),
    {
        restrict: "E",
        require: "^form",
        replace: !0,
        scope: {
            inputModel: "=ngModel",
            name: "@",
            type: "@",
            viewMode: "@",
            isDisabled: "=",
            prependString: "@",
            trustedList: "=",
            keyList: "=",
            radioCallBack: "&",
            customPrependVariableName: "@",
            disableDeviceSpecificVariableChanges: "@",
            disableConstantOptionValueResetOnAdd: "@",
            deviceSpecificFieldName: "@",
            inputType: "@",
            hexaNumber: "@",
            isHashed: "@"
        },
        templateUrl: "app/common/components/input/multiStateInputTemplate.html",
        link: function(e, f, g, h) {
            function i() {
                f.find(".multi-state-input-value")[0].outerHTML = '<div class="multi-state-input-value inlineBlock"></div>',
                f.find(".multi-state-input-value").append(d(c.get(l()))(e)),
                j(f, e, f.find(".multi-state-input-value")[0])
            }
            function j(a, b, c) {
                if (angular.isDefined(c)) {
                    var d = void 0;
                    angular.forEach($(c).find("input"), function(a) {
                        d = $(a).controller("ngModel"),
                        h.$addControl($(a).controller("ngModel"))
                    }),
                    angular.forEach($(c).find("select"), function(a) {
                        d = $(a).controller("ngModel"),
                        h.$addControl($(a).controller("ngModel"))
                    })
                }
            }
            function k() {
                e.inputModel.defaultOption === b.TEMPLATE_DEF_TYPE_CONSTANT ? a.isUndefinedOrEmpty(e.inputModel.dataType.default) ? (angular.isDefined(e.inputModel.dataType.values[0]) && "_blank" !== e.inputModel.dataType.values[0].key && (e.inputModel.dataType.values.splice(0, 0, m),
                "_blank" !== e.inputModel.dataType.values[1].key && "_empty" !== e.inputModel.dataType.values[1].key || e.inputModel.dataType.values.splice(1, 1)),
                e.inputModel.vipValue = e.inputModel.vipValue ? e.inputModel.vipValue : "_blank") : angular.isDefined(e.inputModel.dataType.values[0]) && "_blank" !== e.inputModel.dataType.values[0].key && e.inputModel.dataType.values.splice(0, 0, m) : e.inputModel.defaultOption === b.TEMPLATE_DEF_TYPE_IGNORE ? a.isUndefinedOrEmpty(e.inputModel.dataType.default) && (e.inputModel.dataType.values.length && "_empty" !== e.inputModel.dataType.values[0].key && (e.inputModel.dataType.values.splice(0, 0, m),
                "_blank" !== e.inputModel.dataType.values[1].key && "_empty" !== e.inputModel.dataType.values[1].key || e.inputModel.dataType.values.splice(1, 1)),
                e.inputModel.vipValue = e.inputModel.vipValue ? e.inputModel.vipValue : "_empty") : (e.inputModel.dataType.values.length && "_empty" !== e.inputModel.dataType.values[0].key && (e.inputModel.dataType.values.splice(0, 0, m),
                "_blank" !== e.inputModel.dataType.values[1].key && "_empty" !== e.inputModel.dataType.values[1].key || e.inputModel.dataType.values.splice(1, 1)),
                e.inputModel.vipValue = e.inputModel.vipValue ? e.inputModel.vipValue : "_empty")
            }
            function l() {
                return !e.inputModel || !e.inputModel.dataType || "number" !== e.inputModel.dataType.type && "number" !== e.type || e.inputModel.dataType.range || e.keyList || e.inputModel.vipType && "constant" !== e.inputModel.vipType ? !e.inputModel || !e.inputModel.dataType || "number" !== e.inputModel.dataType.type && "number" !== e.type || e.inputModel.dataType.range || e.keyList || "constant" === e.inputModel.vipType ? e.inputModel && e.inputModel.dataType && "numberList" === e.inputModel.dataType.type && !e.trustedList && "constant" === e.inputModel.vipType ? "numberList" : e.inputModel && e.inputModel.dataType && "numberList" === e.inputModel.dataType.type && !e.trustedList && "constant" !== e.inputModel.vipType ? "numberListNonConstant" : e.inputModel && e.inputModel.dataType && "numberList" === e.inputModel.dataType.type && e.trustedList && "constant" === e.inputModel.vipType ? "numberListWithTrustedList" : e.inputModel && e.inputModel.dataType && "numberList" === e.inputModel.dataType.type && e.trustedList && "constant" !== e.inputModel.vipType ? "numberListWithTrustedListNonConstant" : e.inputModel && e.inputModel.dataType && ("number" === e.inputModel.dataType.type || "number" === e.type) && !e.inputModel.dataType.range && e.keyList && "constant" === e.inputModel.vipType ? "numberListWithKeyList" : e.inputModel && e.inputModel.dataType && ("number" === e.inputModel.dataType.type || "number" === e.type) && !e.inputModel.dataType.range && e.keyList && "constant" !== e.inputModel.vipType ? "numberListWithKeyListNonConstant" : e.inputModel && e.inputModel.dataType && ("number" === e.inputModel.dataType.type || "number" === e.type) && e.inputModel.dataType.range && "constant" === e.inputModel.vipType ? "numberRange" : e.inputModel && e.inputModel.dataType && ("number" === e.inputModel.dataType.type || "number" === e.type) && e.inputModel.dataType.range && "constant" !== e.inputModel.vipType ? "numberRangeNonConstant" : !e.inputModel || !e.inputModel.dataType || "string" !== e.inputModel.dataType.type && "string" !== e.type && "passphrase" !== e.inputModel.dataType.type && "passphrase" !== e.type || "oid" === e.inputType || "asn" === e.inputType || "iface" === e.inputType || e.prependString || "true" === e.hexaNumber ? e.inputModel && e.inputModel.dataType && ("string" === e.inputModel.dataType.type || "string" === e.type) && e.prependString && "constant" === e.inputModel.vipType ? "textWithPrependString" : (e.inputModel && e.inputModel.dataType && "string" === e.inputModel.dataType.type || "string" === e.type) && e.prependString && "constant" !== e.inputModel.vipType ? "textWithPrependStringNonConstant" : !e.inputModel || !e.inputModel.dataType || "string" !== e.inputModel.dataType.type && "string" !== e.type && "passphrase" !== e.inputModel.dataType.type && "passphrase" !== e.type || e.prependString || "true" !== e.hexaNumber ? e.inputModel && e.inputModel.dataType && ("restrictedPassphrase" === e.inputModel.dataType.type || "restrictedPassphrase" === e.type) ? "restrictedPasswordString" : e.inputModel && e.inputModel.dataType && ("boolean" === e.inputModel.dataType.type || "boolean-empty" === e.inputModel.dataType.type || "boolean" === e.type) ? "radioButtons" : e.inputModel && e.inputModel.dataType && ("enum" === e.inputModel.dataType.type || "enum" === e.type) ? "enumSingleSelect" : e.inputModel && e.inputModel.dataType && ("stringList" === e.inputModel.dataType.type || "enumList" === e.inputModel.dataType.type) && e.inputModel.dataType.values ? "enumMultiSelect" : e.inputModel && e.inputModel.dataType && "stringList" === e.inputModel.dataType.type && !e.inputModel.dataType.values ? "enumMultiSelectNonConstant" : "oid" === e.inputType && "constant" === e.inputModel.vipType ? "snmpOID" : "oid" === e.inputType && "constant" !== e.inputModel.vipType ? "snmpOIDNonConstant" : "iface" === e.inputType ? "iface" : e.inputModel && e.inputModel.dataType && ("mac" === e.inputModel.dataType.type || "mac" === e.type) && "constant" === e.inputModel.vipType ? "mac" : e.inputModel && e.inputModel.dataType && ("mac" === e.inputModel.dataType.type || "mac" === e.type) && "constant" !== e.inputModel.vipType ? "macNonConstant" : e.inputModel && e.inputModel.dataType && ("macList" === e.inputModel.dataType.type || "macList" === e.type) && "constant" === e.inputModel.vipType ? "macList" : e.inputModel && e.inputModel.dataType && ("macList" === e.inputModel.dataType.type || "macList" === e.type) && "constant" !== e.inputModel.vipType ? "macListNonConstant" : e.inputModel && e.inputModel.dataType && ("ipv4" === e.inputModel.dataType.type || "ipv4" === e.type) && "constant" === e.inputModel.vipType && "list" !== e.inputModel.vipObjectType ? "ipv4" : e.inputModel && e.inputModel.dataType && ("ipv4" === e.inputModel.dataType.type || "ipv4" === e.type) && "constant" !== e.inputModel.vipType ? "ipv4NonConstant" : e.inputModel && e.inputModel.dataType && ("ipv4-prefix" === e.inputModel.dataType.type || "ipv4-prefix" === e.type) && "constant" === e.inputModel.vipType ? "ipv4Prefix" : e.inputModel && e.inputModel.dataType && ("ipv4-prefix" === e.inputModel.dataType.type || "ipv4-prefix" === e.type) && "constant" !== e.inputModel.vipType ? "ipv4PrefixNonConstant" : e.inputModel && e.inputModel.dataType && ("ipv4List" === e.inputModel.dataType.type || "ipv4List" === e.type) && "constant" === e.inputModel.vipType || e.inputModel && e.inputModel.dataType && ("ipv4" === e.inputModel.dataType.type || "ipv4" === e.type) && "constant" === e.inputModel.vipType && "list" === e.inputModel.vipObjectType ? "ipv4List" : e.inputModel && e.inputModel.dataType && ("ipv4List" === e.inputModel.dataType.type || "ipv4List" === e.type) && "constant" !== e.inputModel.vipType ? "ipv4ListNonConstant" : e.inputModel && e.inputModel.dataType && ("ipv4RangeList" === e.inputModel.dataType.type || "ipv4RangeList" === e.type) && "constant" === e.inputModel.vipType ? "ipv4RangeList" : e.inputModel && e.inputModel.dataType && ("ipv4RangeList" === e.inputModel.dataType.type || "ipv4RangeList" === e.type) && "constant" !== e.inputModel.vipType ? "ipv4RangeListNonConstant" : e.inputModel && e.inputModel.dataType && ("ipv6" === e.inputModel.dataType.type || "ipv6" === e.type) && "constant" === e.inputModel.vipType && "list" !== e.inputModel.vipObjectType ? "ipv6" : e.inputModel && e.inputModel.dataType && ("ipv6" === e.inputModel.dataType.type || "ipv6" === e.type) && "constant" !== e.inputModel.vipType ? "ipv6NonConstant" : e.inputModel && e.inputModel.dataType && ("ipv6-prefix" === e.inputModel.dataType.type || "ipv6-prefix" === e.type) && "constant" === e.inputModel.vipType ? "ipv6Prefix" : e.inputModel && e.inputModel.dataType && ("ipv6-prefix" === e.inputModel.dataType.type || "ipv6-prefix" === e.type) && "constant" !== e.inputModel.vipType ? "ipv6PrefixNonConstant" : e.inputModel && e.inputModel.dataType && ("ipv6List" === e.inputModel.dataType.type || "ipv6List" === e.type) && "constant" === e.inputModel.vipType || e.inputModel && e.inputModel.dataType && ("ipv4" === e.inputModel.dataType.type || "ipv4" === e.type) && "constant" === e.inputModel.vipType && "list" === e.inputModel.vipObjectType ? "ipv6List" : e.inputModel && e.inputModel.dataType && ("ipv6List" === e.inputModel.dataType.type || "ipv6List" === e.type) && "constant" !== e.inputModel.vipType ? "ipv6ListNonConstant" : e.inputModel && e.inputModel.dataType && ("ip" === e.inputModel.dataType.type || "ip" === e.type) && "constant" === e.inputModel.vipType && "list" !== e.inputModel.vipObjectType ? "ip" : e.inputModel && e.inputModel.dataType && ("ip" === e.inputModel.dataType.type || "ip" === e.type) && "constant" !== e.inputModel.vipType && "list" !== e.inputModel.vipObjectType ? "ipNonConstant" : e.inputModel && e.inputModel.dataType && ("ipList" === e.inputModel.dataType.type || "ipList" === e.type) && "constant" === e.inputModel.vipType || e.inputModel && e.inputModel.dataType && ("ip" === e.inputModel.dataType.type || "ip" === e.type) && "constant" === e.inputModel.vipType && "list" === e.inputModel.vipObjectType ? "ipList" : e.inputModel && e.inputModel.dataType && ("ipList" === e.inputModel.dataType.type || "ipList" === e.type) && "constant" !== e.inputModel.vipType || e.inputModel && e.inputModel.dataType && ("ip" === e.inputModel.dataType.type || "ip" === e.type) && "constant" !== e.inputModel.vipType && "list" === e.inputModel.vipObjectType ? "ipListNonConstant" : void 0 : "hexaDecimalText" : "textAndPassphrase" : "numberNonConstant" : "number"
            }
            var m = {
                key: "_blank",
                value: "-- Choose --"
            };
            e.defaultDeviceSpecificVariable = angular.isDefined(e.customPrependVariableName) ? e.customPrependVariableName + "_" + e.name : e.name,
            e.defaultDeviceSpecificVariable = "_update" === e.defaultDeviceSpecificVariable.substring(e.defaultDeviceSpecificVariable.length - "_update".length) ? e.defaultDeviceSpecificVariable.substring(0, e.defaultDeviceSpecificVariable.length - "_update".length) : e.defaultDeviceSpecificVariable,
            e.isHashed = e.isHashedfalse,
            e.validateVipVariableName = function(a) {
                return !angular.isDefined(a) || (0 === a.length || a.length > 256)
            }
            ,
            angular.isUndefined(e.inputType) && (e.inputType = "text"),
            angular.isDefined(e.isDeviceSpecificVariable) || (e.isDeviceSpecificVariable = "false",
            a.isUndefinedOrEmpty(e.disableDeviceSpecificVariableChanges) && (e.disableDeviceSpecificVariableChanges = "false")),
            angular.isDefined(e.disableConstantOptionValueResetOnAdd) || (e.disableConstantOptionValueResetOnAdd = "false"),
            e.viewMode = e.viewMode,
            (a.checkNestedProperty(e.$parent, "template", "viewMode") || a.checkNestedProperty(e.$parent, "$parent", "template", "viewMode")) && (e.viewMode = e.$parent.template.viewMode),
            e.changeState = function(a) {
                e.radioCallBack(a)
            }
            ,
            e.radioCallBack && e.$watch("inputModel.vipType", function(a, b) {
                a !== b && e.radioCallBack({
                    state: e.inputModel.vipValue
                })
            }),
            a.checkNestedProperty(e.inputModel, "dataType", "type") && i(),
            e.updateTemplate = function() {
                i()
            }
            ,
            e.$watch("inputModel", function(c, d) {
                if (angular.isDefined(c)) {
                    if (a.checkNestedProperty(c, "deviceModels") && c.notValidForDeviceModel)
                        return f.parents(".form-group").remove(),
                        void (e.inputModel = void 0);
                    a.checkNestedProperty(c, "dataType", "type") ? (c.defaultOption !== b.TEMPLATE_DEF_TYPE_CONSTANT || "number" === c.dataType.type || c.vipValue || c.vipType ? c.defaultOption !== b.TEMPLATE_DEF_TYPE_IGNORE || "number" === c.dataType.type || c.vipValue ? c.defaultOption === b.TEMPLATE_DEF_TYPE_IGNORE && "number" == c.dataType.type && angular.equals("undefined", String(c.vipValue)) && (c.vipValue = c.dataType.default) : c.vipValue = c.dataType.default : c.vipType = c.defaultOption,
                    "enum" !== c.dataType.type || "list" == c.objectType || c.deleteFlag || k(),
                    angular.equals(c.vipObjectType, "list") && c.dataType.type.indexOf("List") === -1 && (e.inputModel.dataType.type = e.inputModel.dataType.type + "List")) : angular.equals(c, d) || (c.defaultOption !== b.TEMPLATE_DEF_TYPE_IGNORE || "number" === c.dataType.type || c.vipValue ? c.defaultOption === b.TEMPLATE_DEF_TYPE_IGNORE && "number" == c.dataType.type && angular.equals("undefined", String(c.vipValue)) && (c.vipValue = c.dataType.default) : c.vipValue = c.dataType.default,
                    c.dataType && "enum" === c.dataType.type && "list" != c.objectType && !c.deleteFlag && k(),
                    angular.equals(c.vipObjectType, "list") && c.dataType && c.dataType.type.indexOf("List") === -1 && (e.inputModel.dataType.type = e.inputModel.dataType.type + "List")),
                    a.checkNestedProperty(c, "dataType", "type") && i()
                }
            }),
            "iface" === e.inputType && (e.interfaceList = [{
                key: "ge0/",
                value: "ge0/"
            }, {
                key: "ge1/",
                value: "ge1/"
            }, {
                key: "ge2/",
                value: "ge2/"
            }, {
                key: "ge3/",
                value: "ge3/"
            }, {
                key: "10ge0/",
                value: "10ge0/"
            }, {
                key: "10ge1/",
                value: "10ge1/"
            }, {
                key: "10ge2/",
                value: "10ge2/"
            }, {
                key: "10ge3/",
                value: "10ge3/"
            }, {
                key: "eth",
                value: "eth"
            }, {
                key: "irb",
                value: "irb"
            }, {
                key: "loopback",
                value: "loopback"
            }, {
                key: "mgmt0",
                value: "mgmt0"
            }]),
            e.enterHashed = function(a) {
                e.isHashed && (e.isHashed = !e.isHashed,
                e.inputModel.vipValue = "")
            }
        }
    }
}
function noneditablePrependString(a) {
    return {
        restrict: "A",
        link: function(a, b, c) {
            b.keydown(function(a) {
                8 == a.keyCode && this.selectionStart > 0 && this.selectionStart === this.selectionEnd && this.selectionStart--,
                this.selectionStart < c.noneditablePrependString.length && (this.selectionStart = c.noneditablePrependString.length,
                a.preventDefault())
            }),
            b.keyup(function(a) {
                this.selectionStart < c.noneditablePrependString.length && (this.selectionStart = c.noneditablePrependString.length,
                a.preventDefault())
            })
        }
    }
}
function vipLabel(a) {
    var b;
    return {
        restrict: "E",
        replace: !0,
        scope: {
            inputModel: "=ngModel",
            position: "@",
            name: "@"
        },
        templateUrl: "app/common/components/label/labelTemplate.html",
        link: function(c, d) {
            c.$watch("inputModel", function(c) {
                if (!a.isUndefinedOrEmpty(c) && !a.isUndefinedOrEmpty(c.details)) {
                    var e = "tooltip" + c.key;
                    d.addClass(e),
                    b = function() {
                        d.tooltip("disable")
                    }
                }
            })
        },
        controller: ["$scope", function(a) {
            a.$on("$destroy", function() {
                b()
            })
        }
        ]
    }
}
function navHeading(a) {
    return {
        restrict: "EA",
        replace: !0,
        scope: {
            headings: "="
        },
        templateUrl: "app/common/components/nav/heading.html",
        link: function(a, b, c) {}
    }
}
function vipConfirmPopover(a, b, c, d) {
    return {
        restrict: "A",
        scope: {
            okCallback: "&",
            content: "@",
            selected: "="
        },
        link: function(b, d, e) {
            var f = Math.floor(1e10 * Math.random());
            b.confirmPopoverId = "confirmPopover" + f.toString();
            var g = '<div class="confirmation-popover arrow_box" id="{{confirmPopoverId}}"><p>{{content}}</p><div class="form-actions"><vip-button button-title="OK" button-size="small" button-color="blue" ng-click="ok($event)"></vip-button><vip-button button-title="Cancel" button-size="small" button-color="white" ng-click="cancel($event)" class="button"></vip-button></div></div>';
            d.bind("click", function() {
                c(function() {
                    "true" === e.vipConfirmPopover && angular.element(d).append(a(g)(b))
                }, 100)
            })
        },
        controller: ["$scope", "$element", "$attrs", function(a, c, d) {
            function e() {
                angular.element($("#" + a.confirmPopoverId)).remove()
            }
            a.ok = function(a) {
                a.stopPropagation(),
                this.okCallback(),
                e(),
                console.log("ok")
            }
            ,
            a.cancel = function(a) {
                a.stopPropagation(),
                e(),
                console.log("cancel")
            }
            ,
            b.bind("click", function(b) {
                angular.element(b.target);
                return !($(b.target).closest("#" + a.confirmPopoverId).length > 0 || angular.isDefined(angular.element(b.target)[0].firstElementChild) && null !== angular.element(b.target)[0].firstElementChild && angular.element(b.target)[0].firstElementChild.id === a.confirmPopoverId) && void e()
            })
        }
        ]
    }
}
function vipQueryBuilder(a, b, c, d, e, f) {
    return {
        restrict: "AE",
        template: '<ng-include data-src="templateName"/>',
        scope: {
            queryBuilderObj: "=",
            queryBuilderViewObj: "=",
            showTimeStampInbuilt: "=",
            stateString: "@"
        },
        link: function(g, h) {
            function i(a) {
                return a.indexOf("hour") > -1 ? a.split("")[0] : a
            }
            function j() {
                angular.isDefined(g.queryBuilderObj.options.fieldsData) ? g.queryBuilderObj.loadQueryBuilderWithFieldsData() : g.queryBuilderObj.options.autoLoadFields && angular.isDefined(g.queryBuilderObj.options.fieldsAPIURL) && g.queryBuilderObj.createQueryBuilderComponentsFromURL().then(function() {
                    c.info("Loaded filter fields")
                }, function(a) {
                    c.error("Failed to load filter fields" + a)
                })
            }
            function k() {
                angular.isDefined(g.queryBuilderViewObj) && angular.isDefined(g.queryBuilderViewObj.buttonLayoutObj) ? g.buttonLayoutObj = angular.fromJson(g.queryBuilderViewObj.buttonLayoutObj) : (g.buttonLayoutObj = {},
                g.buttonLayoutObj.layoutClass = "actionButtonLayout",
                g.buttonLayoutObj.filterIconClass = "filter_list",
                g.buttonLayoutObj.showDropDownIcon = !0,
                g.buttonLayoutObj.filterButtonTitle = "Filter")
            }
            function l() {
                g.showFilteredTagsContainer = !(!angular.isDefined(g.queryBuilderViewObj) || !angular.isDefined(g.queryBuilderViewObj.enableFilteredTags))
            }
            function m(a) {
                a.isFromDateMissing = !1,
                a.isFromDateInvalid = !1,
                a.isToDateMissing = !1,
                a.isToDateInvalid = !1,
                a.isDateRangeInvalid = !1,
                a.isDateBeyondCurrentDate = !1,
                a.isDateOutOfRange = !1,
                a.isSameDate = !1
            }
            function n(a) {
                m(a),
                g.showCustomTimeDropDown = !1,
                a.fromDateDropDownInput = "",
                a.toDateDropDownInput = ""
            }
            function o(a) {
                var c, d, e, f;
                m(a);
                var g = a.fromDateDropDownInput.replace(/-/g, "/")
                  , h = a.toDateDropDownInput.replace(/-/g, "/");
                return b.isUndefinedOrEmpty(g) ? a.isFromDateMissing = !0 : "Invalid Date" === new Date(g).toString() && (a.isFromDateInvalid = !0),
                b.isUndefinedOrEmpty(h) ? a.isToDateMissing = !0 : "Invalid Date" === new Date(h).toString() && (a.isToDateInvalid = !0),
                !(a.isFromDateMissing || a.isToDateMissing || a.isFromDateInvalid || a.isToDateInvalid) && (c = moment(h),
                e = moment().diff(c, "minutes"),
                d = moment(g),
                f = parseInt(moment.duration(c.diff(d)).asMinutes()),
                e < 0 ? (a.isDateBeyondCurrentDate = !0,
                !1) : f <= 0 ? (a.isDateRangeInvalid = !0,
                !1) : !(f > 525600) || (a.isDateOutOfRange = !0,
                !1))
            }
            g.templateName = g.showTimeStampInbuilt ? "app/common/components/queryBuilder/queryBuilderInbuiltTimePartial.html" : "app/common/components/queryBuilder/queryBuilderSeparatedTimePartial.html",
            g.formValid = !0,
            g.initComplete = !1,
            g.showCustomTimeDropDown = !1,
            g.status = {
                isopen: !1
            },
            g.formatTimestampValue = function(a) {
                if ("Custom" !== a && "Real Time" !== a) {
                    var b = a.split(" ");
                    a = b[1] + i(b[2])
                }
                return a
            }
            ,
            g.getMoreComponentDetails = function(a) {
                a.componentTypeEnumOptions && a.componentTypeEnumOptions.length < 1 && "url" === a.fieldDataObject.type && (g.queryBuilderObj.getMoreComponentDetails(a).then(function() {
                    a.loadingDataFromServer = !1
                }, function() {
                    a.loadingDataFromServer = !1
                }),
                a.loadingDataFromServer = !0)
            }
            ,
            g.queryBuilderTimeComponentExists = function() {
                if (!angular.isDefined(g.queryBuilderObj))
                    return !1;
                var a = !1;
                if (angular.isDefined(g.queryBuilderTimeComponent))
                    a = !0;
                else {
                    var b = _.filter(g.queryBuilderObj.queryBuilderComponentsObj.components, {
                        property: "entry_time"
                    });
                    angular.isDefined(b) && b.length > 0 && (g.queryBuilderTimeComponent = b[0],
                    a = !0)
                }
                return a
            }
            ,
            g.cancel = function() {
                g.status.isopen = !1,
                g.queryBuilderObj.options.filterOverlayVisible = !1
            }
            ,
            g.searchFilterWithRealTime = function() {
                g.queryBuilderTimeComponent.dateObj.realTime || (g.showCustomTimeDropDown = !1,
                d(function() {
                    g.queryBuilderTimeComponent.dateObj.realTime = !0,
                    g.queryBuilderObj.realTimeCallback()
                }, 500, null))
            }
            ,
            g.searchFilterWithNewTimestamp = function(a) {
                d(function() {
                    g.queryBuilderObj.options.filterOverlayVisible = !1,
                    (g.queryBuilderTimeComponent.dateObj.realTime || g.queryBuilderTimeComponent.dateObj.timeStampTypeSelected !== a) && "Custom" !== a.value && (n(g.queryBuilderTimeComponent.dateObj),
                    g.queryBuilderTimeComponent.dateObj.timeStampTypeSelected = a,
                    g.queryBuilderTimeComponent.dateObj.realTime = !1,
                    g.queryBuilderObj.updateQuery()),
                    "Custom" === a.value && (g.showCustomTimeDropDown = !g.showCustomTimeDropDown)
                }, 500, null)
            }
            ,
            g.updateCustomDate = function() {
                var b, c, d, e, f, h;
                if (o(g.queryBuilderTimeComponent.dateObj)) {
                    var i = g.queryBuilderTimeComponent.dateObj.fromDateDropDownInput.replace(/-/g, "/");
                    d = new Date(i);
                    var j = g.queryBuilderTimeComponent.dateObj.toDateDropDownInput.replace(/-/g, "/");
                    e = new Date(j),
                    b = a("date")(d, "yyyy-MM-ddTHH:mm:ss", "UTC") + " UTC",
                    c = a("date")(e, "yyyy-MM-ddTHH:mm:ss", "UTC") + " UTC",
                    g.queryBuilderTimeComponent.dateObj.fromServerDate !== b || g.queryBuilderTimeComponent.dateObj.toServerDate !== c ? (g.queryBuilderTimeComponent.dateObj.fromServerDate = b,
                    g.queryBuilderTimeComponent.dateObj.toServerDate = c,
                    f = o(g.queryBuilderTimeComponent.dateObj),
                    f ? (h = _.find(g.queryBuilderTimeComponent.componentTypeEnumOptions, {
                        value: "Custom"
                    }),
                    g.queryBuilderTimeComponent.dateObj.timeStampTypeSelected = h,
                    g.showCustomTimeDropDown = !1,
                    g.queryBuilderTimeComponent.dateObj.realTime = !1,
                    g.queryBuilderObj.updateQuery()) : g.showCustomTimeDropDown = !0) : (m(g.queryBuilderTimeComponent.dateObj),
                    g.queryBuilderTimeComponent.dateObj.isSameDate = !0)
                }
            }
            ,
            g.validateFilter = function(a) {
                a.$setSubmitted(!0),
                g.formValid = !0,
                angular.forEach(g.queryBuilderObj.queryBuilderComponentsObj.components, function(a) {
                    if ("date" === a.dataType) {
                        var b = a.dateObj;
                        void 0 === b.timeStampTypeSelected ? g.formValid = !1 : "Custom" === b.timeStampTypeSelected.value && (g.formValid = o(b),
                        g.showCustomTimeDropDown = !g.formValid)
                    } else
                        "string" === a.dataType || "enum" === a.dataType
                }),
                g.formValid ? (g.status.isopen = !1,
                g.queryBuilderObj.options.filterOverlayVisible = !1,
                g.queryBuilderObj.updateQuery()) : a.$setValidity(!1)
            }
            ,
            g.computeComboBoxLabel = function(a) {
                return "VPN" === a.activeFieldName ? "VPN" : ""
            }
            ,
            g.onSetTime = function(b, c, d) {
                "from" === c ? d.dateObj.fromDateDropDownInput = a("date")(b, "dd MMM yyyy h:mm a") : d.dateObj.toDateDropDownInput = a("date")(b, "dd MMM yyyy h:mm a")
            }
            ,
            g.resetFilter = function() {
                angular.copy(g.queryBuilderObj.options.queryBuilderOriginalComponents, g.queryBuilderObj.queryBuilderComponentsObj.components),
                g.queryBuilderTimeComponent = g.queryBuilderObj.queryBuilderComponentsObj.components[0],
                g.queryBuilderObj.updateQuery()
            }
            ,
            k(),
            l(),
            angular.isDefined(g.queryBuilderObj) && j(),
            e.bind("click", function(a) {
                if (a.stopPropagation(),
                $(".query-builder__quick-timer__multiSelect").hasClass("open")) {
                    if ($(a.target).closest(".query-builder__quick-timer__custom-drop-down").length > 0)
                        return !1;
                    if ($(a.target).hasClass("date-picker") || $(a.target).hasClass("time-picker"))
                        return !1
                }
                if (g.queryBuilderObj.options.filterOverlayVisible) {
                    if ($(a.target).closest(".query-builder__filterButton").length > 0 || $(a.target).closest(".query-builder__filter-drop-down").length > 0 || $(a.target).closest(".ui-select-choices-row").length > 0 || $(a.target).closest(".ui-select-match-item").length > 0)
                        return !1;
                    f(function() {
                        g.queryBuilderObj.options.filterOverlayVisible = !1
                    })
                }
            }),
            g.closeCustomDate = function() {
                g.showCustomTimeDropDown = !1
            }
        }
    }
}
function QueryBuilderFactory(DeviceListCache, restService, $q, $timeout, CacheURLMappingValues, $parse) {
    function checkIfAllMandatoryFieldExistInComponent(a, b) {
        var c = !0;
        return b.components.length > 0 && a.length > 0 ? angular.forEach(a, function(a) {
            if (a.required && c) {
                var d = _.filter(b.components, function(b) {
                    return b.property === a.property
                });
                d.length || (c = !1)
            }
        }) : c = !0,
        c
    }
    function getCachedDataByURL(url, QueryBuilderFactoryObj) {
        var foundMappingObject = _.find(CacheURLMappingValues, function(a) {
            if (a.urlMapping.indexOf(url) > -1)
                return !0
        });
        if (angular.isDefined(foundMappingObject)) {
            var fnStr = foundMappingObject.className + "." + foundMappingObject.getMethod + "()";
            return eval(fnStr)
        }
    }
    function getNewDateValue(a) {
        if (angular.isDefined(globalTimeSettingObj))
            return globalTimeSettingObj.dateObj.realTime = !1,
            globalTimeSettingObj.dateObj.isDateBeyondCurrentDate = !1,
            globalTimeSettingObj.dateObj.isDateOutOfRange = !1,
            globalTimeSettingObj.dateObj.isDateRangeInvalid = !1,
            globalTimeSettingObj.dateObj.isFromDateInvalid = !1,
            globalTimeSettingObj.dateObj.isFromDateMissing = !1,
            globalTimeSettingObj.dateObj.isSameDate = !1,
            globalTimeSettingObj.dateObj.isToDateInvalid = !1,
            globalTimeSettingObj.dateObj.isToDateMissing = !1,
            a.dateObj = globalTimeSettingObj.dateObj,
            a.dateObj.timeStampTypeSelected.value;
        if (angular.isDefined(a.dateObj) && angular.isDefined(a.dateObj.timeStampTypeSelected.value))
            return a.dateObj.timeStampTypeSelected.value;
        var b = _.findIndex(a.componentTypeEnumOptions, function(a) {
            return angular.equals(a.isSelected, !0)
        });
        b > -1 ? a.dateObj.timeStampTypeSelected = a.componentTypeEnumOptions[b] : a.dateObj.timeStampTypeSelected = a.componentTypeEnumOptions[0]
    }
    function getNewComponentValue(a) {
        if (angular.isDefined(a.componentTypeEnumOptions)) {
            if (!angular.isDefined(a.selectedOptionsList) && (a.selectedOptionsList = a.isRightColumnMultiSelect ? [] : void 0,
            a.defaultValue)) {
                var b = _.find(a.componentTypeEnumOptions, {
                    key: a.defaultValue
                });
                return angular.isDefined(b) && (a.isRightColumnMultiSelect ? a.selectedOptionsList.push(b) : a.selectedOptionsList = b),
                b.value
            }
            if (!angular.isArray(a.selectedOptionsList))
                return angular.isDefined(a.selectedOptionsList) && null !== a.selectedOptionsList ? a.selectedOptionsList.value : void 0;
            var c = angular.copy(a.selectedOptionsList);
            a.selectedOptionsList.reset(),
            angular.forEach(c, function(b) {
                var c = _.find(a.componentTypeEnumOptions, {
                    key: b.key
                });
                angular.isDefined(c) && a.selectedOptionsList.push(c)
            })
        } else if ("string" === a.dataType)
            return a.value = angular.isDefined(a.defaultValue) ? a.defaultValue : "",
            "" === a.value ? void 0 : a.value
    }
    function checkDateValidity(a) {
        return !(!angular.isDefined(a.fromDateDropDownInput) || null === a.fromDateDropDownInput || "" === a.fromDateDropDownInput) && ("Invalid Date" !== new Date(a.fromDateDropDownInput).toString() && (!(!angular.isDefined(a.toDateDropDownInput) || null === a.toDateDropDownInput || "" === a.toDateDropDownInput) && ("Invalid Date" !== new Date(a.toDateDropDownInput).toString() && (!(a.isFromDateMissing || a.isToDateMissing || a.isFromDateInvalid || a.isToDateInvalid) && !(new Date(a.toDateDropDownInput).getTime() <= new Date(a.fromDateDropDownInput).getTime())))))
    }
    function checkIfComponentAlreadyExists(a, b) {
        var c = !1;
        return angular.isDefined(a.components) && a.components.length > 0 && angular.forEach(a.components, function(a) {
            c || a.property !== b.property || (c = !0)
        }),
        c
    }
    var QueryBuilderFactoryDefaults = {
        fieldsAPIURL: void 0,
        fieldsData: void 0,
        autoLoadFields: "true",
        fieldCustomizationsForDataTypeURL: [],
        searchCallBack: void 0,
        renderViewAfterInitComplete: !1,
        queryBuilderPersistedComponents: [],
        queryBuilderOriginalComponents: [],
        enableFilteredTags: !0,
        filterOverlayVisible: !1,
        disableUserActions: !1,
        enableRealTime: !1,
        filterStyleObj: {
            visible: !1,
            fullWidth: !1
        }
    }
      , globalTimeSettingObj = void 0
      , QueryBuilderFactory = function(a) {
        var b = this;
        angular.isDefined(a) || (a = {}),
        b.options = angular.extend({}, angular.copy(QueryBuilderFactoryDefaults), a),
        b.queryBuilderComponentsObj = {
            components: []
        },
        b.filteredTags = []
    };
    return QueryBuilderFactory.prototype.getComponents = function() {
        var a = this;
        return a.queryBuilderComponentsObj.components
    }
    ,
    QueryBuilderFactory.prototype.getOriginalComponents = function() {
        var a = this;
        return a.options.queryBuilderOriginalComponents
    }
    ,
    QueryBuilderFactory.prototype.setFilterOriginalState = function(a) {
        var b = this;
        b.options.queryBuilderOriginalComponents = a
    }
    ,
    QueryBuilderFactory.prototype.setFieldsAPIURL = function(a) {
        var b = this;
        angular.isDefined(a) && (b.options.fieldsAPIURL = a)
    }
    ,
    QueryBuilderFactory.prototype.setFieldsData = function(a) {
        var b = this;
        angular.isDefined(a) && (b.options.fieldsData = a)
    }
    ,
    QueryBuilderFactory.prototype.getFieldsData = function() {
        var a = this;
        return a.options.fieldsData
    }
    ,
    QueryBuilderFactory.prototype.setFilterOverlayVisible = function(a) {
        var b = this;
        b.options.filterOverlayVisible = a
    }
    ,
    QueryBuilderFactory.prototype.getFilterOverlayVisible = function() {
        var a = this;
        return a.options.filterOverlayVisible
    }
    ,
    QueryBuilderFactory.prototype.disableUserActions = function(a) {
        var b = this;
        b.options.disableUserActions = a
    }
    ,
    QueryBuilderFactory.prototype.appendQueryString = function(a, b) {
        var c = a.indexOf("?") > 0 ? "&" : "?";
        return a + c + b
    }
    ,
    QueryBuilderFactory.prototype.setGlobalTime = function(a) {
        globalTimeSettingObj = angular.copy(a)
    }
    ,
    QueryBuilderFactory.prototype.checkFilterComponentVisibility = function() {
        var a, b = this;
        b.queryBuilderComponentsObj.components.length > 1 && (a = _.filter(b.queryBuilderComponentsObj.components, {
            isHidden: !1
        })),
        angular.isDefined(a) && a.length > 1 ? (b.options.filterStyleObj.visible = !0,
        b.options.filterStyleObj.fullWidth = !0) : (b.options.filterStyleObj.visible = !1,
        b.options.filterStyleObj.fullWidth = !1)
    }
    ,
    QueryBuilderFactory.prototype.createQueryBuilderComponentsFromURL = function() {
        var a = this
          , b = $q.defer()
          , c = a.options.fieldsAPIURL;
        return restService.get(c).then(function(c) {
            a.setFieldsData(c.data),
            a.loadQueryBuilderWithFieldsData(),
            b.resolve()
        }, function() {
            b.reject()
        }),
        b.promise
    }
    ,
    QueryBuilderFactory.prototype.createQueryBuilderComponentsFromFieldsObj = function(a) {
        function b(a) {
            var b;
            return b = angular.isDefined(a.fieldData) ? "url" === a.fieldData.type ? "enum" : a.fieldData.type : angular.isDefined(a.dataType) ? a.dataType : "string"
        }
        function c(a) {
            return angular.isDefined(a.options) && a.options.length > 0 ? a.options : angular.isDefined(a.fieldData) && "url" === a.fieldData.type ? [] : void 0
        }
        var d, e = (a.length,
        []), f = this;
        return angular.forEach(a, function(a) {
            var g = {
                activeFieldName: "date" === a.dataType ? "Time Frame" : a.name,
                property: a.property,
                required: a.isRequired,
                dataType: a.dataType,
                isRightColumnMultiSelect: !!a.hasOwnProperty("multiSelect") && a.multiSelect,
                isHidden: !!a.hasOwnProperty("isHidden") && a.hasOwnProperty("isHidden"),
                fieldDataObject: angular.isDefined(a.fieldData) ? a.fieldData : void 0,
                componentDataType: b(a),
                condition: "in",
                defaultValue: angular.isDefined(a.defaultValue) ? a.defaultValue : void 0
            };
            if (d = c(a),
            angular.isDefined(d) && (g.componentTypeEnumOptions = d),
            "string" !== a.dataType || angular.isDefined(d) || (g.validation = a.validation),
            "entry_time" === g.property) {
                var h = {};
                g.dateObj = {
                    fromDateDropDownInput: "",
                    toDateDropDownInput: "",
                    fromServerDate: "",
                    toServerDate: "",
                    timeStampTypeSelected: h,
                    startDate: "",
                    endDate: "",
                    isDateRangeInvalid: !1,
                    isFromDateMissing: !1,
                    isToDateMissing: !1,
                    isFromDateInvalid: !1,
                    isToDateInvalid: !1
                },
                f.options.enableRealTime && (g.dateObj.realTime = !1)
            }
            angular.isDefined(g.fieldDataObject) && angular.isDefined(g.fieldDataObject.type) && "url" === g.fieldDataObject.type && (g.loadingDataFromServer = !1,
            g.componentErrorMessage = ""),
            e.push(g)
        }),
        e
    }
    ,
    QueryBuilderFactory.prototype.loadQueryBuilderWithFieldsData = function() {
        function a() {
            d.initializeComponentsData(d.queryBuilderComponentsObj.components),
            (!angular.isDefined(d.options.queryBuilderOriginalComponents) || d.options.queryBuilderOriginalComponents.length < 1) && (d.options.queryBuilderOriginalComponents = angular.copy(d.queryBuilderComponentsObj.components)),
            d.checkFilterComponentVisibility(),
            d.options.renderViewAfterInitComplete && d.updateQuery()
        }
        var b, c, d = this;
        c = angular.isDefined(d.options.queryBuilderPersistedComponents) ? d.options.queryBuilderPersistedComponents : [],
        b = d.createQueryBuilderComponentsFromFieldsObj(d.options.fieldsData),
        d.queryBuilderComponentsObj.components = d.mergeTwoComponents(b, c);
        var e = _.filter(d.queryBuilderComponentsObj.components, function(a) {
            return angular.isDefined(a.fieldDataObject) && "url" === a.fieldDataObject.type && angular.isDefined(a.defaultValue)
        });
        angular.isDefined(e) && e.length > 0 ? angular.forEach(e, function(b) {
            d.getMoreComponentDetails(b).then(function() {
                b.loadingDataFromServer = !1,
                angular.isDefined(_.find(e, {
                    loadingDataFromServer: !0
                })) || a()
            }, function() {
                b.loadingDataFromServer = !1
            }),
            b.loadingDataFromServer = !0
        }) : a()
    }
    ,
    QueryBuilderFactory.prototype.updateQuery = function() {
        var a, b = this;
        a = b.getConstructedQueryObject(b.queryBuilderComponentsObj.components),
        angular.isDefined(a) && angular.isDefined(b.options.searchCallBack) && b.options.searchCallBack.call(b, a)
    }
    ,
    QueryBuilderFactory.prototype.realTimeCallback = function() {
        var a = this;
        angular.isDefined(a.options.searchCallBack) && a.options.searchCallBack.call(a, {
            realTime: !0
        })
    }
    ,
    QueryBuilderFactory.prototype.initializeComponentsData = function(a) {
        var b, c = this;
        c.filteredTags.reset(),
        angular.forEach(a, function(a) {
            b = {
                key: "date" === a.dataType ? "Time Frame" : a.activeFieldName,
                value: "date" === a.dataType ? getNewDateValue(a) : getNewComponentValue(a),
                isHidden: a.isHidden
            },
            c.filteredTags.push(b)
        })
    }
    ,
    QueryBuilderFactory.prototype.getMoreComponentDetails = function(a) {
        var b, c, d, e = this, f = $q.defer();
        return angular.isDefined(a.fieldDataObject) && angular.isDefined(a.fieldDataObject.url) && (c = a.fieldDataObject.url,
        angular.isDefined(d = getCachedDataByURL(c, e)) && angular.isDefined(d.data) ? (angular.copy(d.data, a.componentTypeEnumOptions),
        f.resolve()) : (b = _.find(e.queryBuilderComponentsObj.components, {
            property: "vdevice_name"
        }),
        angular.isDefined(b) && (c = e.appendQueryString(a.fieldDataObject.url, "deviceId=" + b.defaultValue)),
        restService.get(c).then(function(b) {
            var c = e.options.fieldCustomizationsForDataTypeURL;
            if (c.length < 1)
                angular.copy(b.data, a.componentTypeEnumOptions);
            else {
                var d, g, h = [];
                d = _.find(c, {
                    property: a.property
                }),
                d ? (d.appendStringToTheList ? (g = {
                    value: d.stringVal + " - All",
                    key: "all"
                },
                h.push(g),
                b.hasOwnProperty("vedge") ? angular.forEach(b.vedge, function(a) {
                    var b = {};
                    b.value = d.stringVal + " - " + a,
                    b.key = a,
                    h.push(b)
                }) : angular.forEach(b.data, function(a) {
                    var b = {};
                    b.value = d.stringVal + " - " + a,
                    b.key = a,
                    h.push(b)
                })) : d.addAllForFieldTypeURL ? (g = {
                    value: "All",
                    key: "all"
                },
                h.push(g),
                angular.forEach(b.data, function(a) {
                    h.push(a)
                })) : angular.isDefined(d.filterBy) && angular.isDefined(b.data) && b.data.length > 0 && (h = _(b.data).chain().pluck(d.filterBy).unique().map(function(a, b) {
                    return {
                        key: a,
                        value: a
                    }
                }).value()),
                angular.copy(h, a.componentTypeEnumOptions)) : angular.copy(b.data, a.componentTypeEnumOptions)
            }
            f.resolve()
        }, function(b) {
            a.errorMessage = "Failed to load data",
            f.reject()
        }))),
        f.promise
    }
    ,
    QueryBuilderFactory.prototype.getConstructedQueryObject = function(a) {
        var b = this
          , c = []
          , d = {
            query: {
                condition: "AND",
                rules: []
            }
        }
          , e = b.filteredTags;
        return angular.isDefined(e) || (e = []),
        angular.forEach(a, function(a) {
            var b = {}
              , e = {};
            if (e.isHidden = a.isHidden,
            b.value = [],
            b.field = a.property,
            b.type = a.dataType,
            angular.isDefined(a.componentDataType) && "string" !== a.componentDataType && "long" !== a.componentDataType) {
                if ("enum" === a.componentDataType) {
                    e.key = a.activeFieldName,
                    b.operator = "in";
                    var f = "";
                    if (null === a.selectedOptionsList || !angular.isDefined(a.selectedOptionsList) || 0 === a.selectedOptionsList.length)
                        return;
                    if (a.isRightColumnMultiSelect) {
                        if (!(a.selectedOptionsList.length > 0))
                            return;
                        angular.forEach(a.selectedOptionsList, function(a) {
                            0 != b.value.length && (f += ", "),
                            f += a.value,
                            b.value.push(a.key)
                        })
                    } else {
                        if ("all" === a.selectedOptionsList.key)
                            return;
                        angular.isArray(a.selectedOptionsList) ? (f = a.selectedOptionsList[0].value,
                        b.value.push(a.selectedOptionsList[0].key)) : (f = a.selectedOptionsList.value,
                        b.value.push(a.selectedOptionsList.key))
                    }
                    e.value = f
                } else if ("text" === a.componentDataType)
                    e.key = a.activeFieldName,
                    b.operator = "equal";
                else if ("dateList" === a.componentDataType) {
                    if (e.key = "Time Frame",
                    void 0 === a.dateObj.timeStampTypeSelected)
                        return;
                    if ("Custom" === a.dateObj.timeStampTypeSelected.value) {
                        if (b.operator = "between",
                        "" == a.dateObj.fromServerDate)
                            return;
                        if ("" == a.dateObj.toServerDate)
                            return;
                        b.value.push(a.dateObj.fromServerDate),
                        b.value.push(a.dateObj.toServerDate),
                        e.value = a.dateObj.fromDateDropDownInput + " to " + a.dateObj.toDateDropDownInput
                    } else if (b.operator = "last_n_hours",
                    b.value.push(a.dateObj.timeStampTypeSelected.number),
                    e.value = a.dateObj.timeStampTypeSelected.value,
                    void 0 === e.value || "Choose" === e.value)
                        return
                }
            } else {
                if (!angular.isDefined(a.value) || "" == a.value)
                    return;
                b.operator = "in",
                b.value = [a.value],
                e.key = a.activeFieldName,
                e.value = a.value
            }
            c.push(e),
            d.query.rules.push(b)
        }),
        e.length = 0,
        angular.copy(c, e),
        d
    }
    ,
    QueryBuilderFactory.prototype.getQueryStringFromComponents = function(a) {
        var b, c = this;
        return b = c.getConstructedQueryObject(),
        c.getQueryStringFromQueryObject(b)
    }
    ,
    QueryBuilderFactory.prototype.getQueryStringFromQueryObject = function(a) {
        return "query=" + encodeURIComponent(JSON.stringify(a))
    }
    ,
    QueryBuilderFactory.prototype.fireClickEventOnFilter = function() {
        $timeout(function() {
            angular.element("#filter_button").triggerHandler("click")
        })
    }
    ,
    QueryBuilderFactory.prototype.mergeTwoComponents = function(a, b) {
        var c = [];
        return b.length > 0 ? angular.forEach(a, function(a) {
            var d = _.find(b, {
                activeFieldName: a.activeFieldName
            });
            angular.isDefined(d) ? c.push(d) : c.push(a)
        }) : c = a,
        c
    }
    ,
    QueryBuilderFactory
}
function resizeableComponent(a, b) {
    return {
        restrict: "A",
        replace: !0,
        priority: 0,
        controller: ["$scope", "$attrs", "$element", "responsiveContentHeight", function(a, c, d, e) {
            function f() {
                i = b.isNumeric(parseInt(c.heightOffset)) ? parseInt(c.heightOffset) : a.heightOffset,
                j = b.isNumeric(parseInt(c.divisibleBy)) ? parseInt(c.divisibleBy) : a.divisibleBy
            }
            function g() {
                var b = Math.floor(a.contentHeight / j);
                a.contentHeight = b * j
            }
            function h() {
                a.contentHeight = e.getAppContentHeight() - i,
                b.isUndefinedOrEmpty(j) || g(),
                d.css("height", a.contentHeight)
            }
            a.$on("windowResizeEvent", function() {
                h()
            }),
            c.$observe("heightOffset", function(a, b) {
                a !== b && (f(),
                h())
            });
            var i, j;
            f(),
            a.contentHeight = e.getAppContentHeight() - i,
            angular.isDefined(j) && j > 0 && g(),
            d.css("height", a.contentHeight)
        }
        ]
    }
}
function responsiveContentHeight(a, b, c, d) {
    var e = 0;
    angular.element(c).on("resize", function() {
        a.$broadcast("windowResizeEvent")
    });
    var f = {
        getAppContentHeight: function() {
            var a, b;
            return a = window.innerHeight ? window.innerHeight : Math.max(document.documentElement.clientHeight, document.body.clientHeight),
            b = a - e
        },
        setTopNavBarHeight: function(b) {
            e = b,
            a.$broadcast("windowResizeEvent")
        },
        addResponsiveContent: function() {},
        getWindowWidth: function() {
            var a = window.innerWidth ? window.innerWidth : Math.max(document.documentElement.clientWidth, document.body.clientWidth);
            return a
        }
    };
    return f
}
function vipDropdownMenu() {
    return {
        replace: !0,
        restrict: "E",
        templateUrl: "app/common/components/selector/dropdownMenuTemplate.html",
        scope: {
            menuIcon: "@",
            menuList: "=",
            menuRow: "="
        },
        link: function(a, b, c) {
            a.menuIcon = c.menuIcon,
            a.toggleDropdown = function(b) {
                b.stopPropagation(),
                a.status.isOpen = !a.status.isOpen
            }
            ,
            a.keepOpenDropdown = function(b) {
                b.stopPropagation(),
                $("[data-toggle='tooltip']").tooltip("hide"),
                a.status.isOpen = !0
            }
            ,
            a.setTooltip = function(a) {
                $("[data-toggle='tooltip']").tooltip({
                    container: "body",
                    placement: "bottom",
                    title: a.tooltip,
                    animation: !0
                })
            }
            ,
            a.$on("$destroy", function() {
                $("[data-toggle='tooltip']").tooltip("destroy")
            })
        }
    }
}
function MenuItem() {
    var a = function(a, b, c, d, e) {
        this.icon = a,
        this.label = b,
        this.tooltip = c,
        this.callbackFn = d,
        this.precondition = e
    };
    return a.prototype.registerCallBack = function(a) {
        this.callbackFn = a
    }
    ,
    a.prototype.setType = function(a, b) {
        this.type = a,
        this.message = b
    }
    ,
    a
}
function DropdownMenu() {
    var a = function() {
        this.listItems = []
    };
    return a.prototype.register = function(a) {
        this.listItems.push(a)
    }
    ,
    a
}
function vipMultiInputSelect(a, b, c, d, e, f) {
    return {
        restrict: "E",
        scope: !1,
        templateUrl: "app/common/components/selector/multiInputSelectTemplate.html",
        link: function(e, f, g, h) {
            e.thisScope = e,
            e.availableListTags = [],
            e.selectedListTags = [],
            e.cloudExpressService = c,
            e.checkbox = {
                selectAllAvailable: !1,
                selectAllSelected: !1
            },
            e.dynamicTooltipText = "dynamic",
            a.initialize().then(function(b) {
                e.selectSvc = a,
                e.multiSelectOptions = a.getOptions(),
                e.viewMode = a.getViewMode(),
                e.enableSelection = e.multiSelectOptions.enableSelection,
                e.multiSelectLists = a.getMultiSelectData(),
                e.checkSelectionValidity = function(a) {
                    angular.isDefined(a.invalid) ? a.invalid || (a.selected = !a.selected) : a.selected = !a.selected
                }
                ,
                e.multiSelectOptions.toolTip.templateCache && f.find("#toolTipPlaceHolder").append(d.get(e.multiSelectOptions.toolTip.templateCache))
            }, function(a) {}),
            e.$watchCollection("availableListTags", function(a, c) {
                if (a !== c) {
                    var d = e.availableListTags;
                    e.multiSelectOptions.enableGroupFilter && "All" !== e.multiSelectLists.available.selectedGroup && (d = _.union(d, [{
                        text: e.multiSelectLists.available.selectedGroup
                    }])),
                    e.multiSelectLists.available.records = e.multiSelectLists.available.taggedSearch.searchData(d);
                    var f = $("div.multiInputSelect-block");
                    angular.isDefined(f) && f.length > 0 && f.find(".deviceList").scrollTop(0).perfectScrollbar("update"),
                    b(function() {
                        e.$broadcast("vsRepeatTrigger")
                    })
                }
            }),
            e.$watchCollection("selectedListTags", function(a, c) {
                if (a !== c) {
                    var d = e.selectedListTags;
                    e.multiSelectOptions.enableGroupFilter && "All" !== e.multiSelectLists.selected.selectedGroup && (d = _.union(d, [{
                        text: e.multiSelectLists.selected.selectedGroup
                    }])),
                    e.multiSelectLists.selected.records = e.multiSelectLists.selected.taggedSearch.searchData(d);
                    var f = $("div.multiInputSelect-block");
                    angular.isDefined(f) && f.length > 0 && f.find(".deviceList").scrollTop(0).perfectScrollbar("update"),
                    b(function() {
                        e.$broadcast("vsRepeatTrigger")
                    })
                }
            }),
            e.selectAllAvailable = function(b) {
                b ? a.selectAll(e.multiSelectLists.available.records) : a.clearAll(e.multiSelectLists.available.records)
            }
            ,
            e.selectAllSelected = function(b) {
                b ? a.selectAll(e.multiSelectLists.selected.records) : a.clearAll(e.multiSelectLists.selected.records)
            }
            ,
            e.selectUnselectAll = function(a) {
                a ? (e.checkbox.selectAllAvailable = !1,
                e.selectSvc.clearAll(e.multiSelectLists.selected.records)) : (e.checkbox.selectAllSelected = !1,
                e.selectSvc.clearAll(e.multiSelectLists.available.records))
            }
            ,
            e.searchAvailableRecords = function() {
                var a = e.multiSelectLists.available.selectedGroup;
                "All" === a ? a = e.availableListTags : (a = _.map([a], function(a) {
                    return {
                        text: a
                    }
                }),
                a = _.union(a, e.availableListTags)),
                e.multiSelectLists.available.records = e.multiSelectLists.available.taggedSearch.searchData(a),
                b(function() {
                    e.$broadcast("vsRepeatTrigger")
                })
            }
            ,
            e.searchSelectedRecords = function(a) {
                "All" === a ? a = e.selectedListTags : (a = _.map([a], function(a) {
                    return {
                        text: a
                    }
                }),
                a = _.union(a, e.selectedListTags)),
                e.multiSelectLists.selected.records = e.multiSelectLists.selected.taggedSearch.searchData(a),
                b(function() {
                    e.$broadcast("vsRepeatTrigger")
                })
            }
        }
    }
}
function SelectionKeyboardAssist() {
    function a(a, b) {
        angular.forEach(a, function(a) {
            a[b] = !1
        })
    }
    function b(a, b, c, d) {
        for (var e = c; e <= d; e++)
            a[e][b] = !0
    }
    var c, d = {
        toggleSelection: function(b, d, e, f) {
            f ? b[d][e] = !b[d][e] : (a(b, e),
            b[d][e] = !b[d][e]),
            c = d
        },
        shiftSelect: function(a, d, e, f, g) {
            if (g) {
                var h, i;
                d > c ? (h = c,
                i = d) : (h = d,
                i = c),
                b(a, f, h, i)
            } else
                this.toggleSelection(a, row, f, !1);
            c = d
        }
    };
    return d
}
function vipStatusCircle(a, b) {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            inputModel: "=ngModel"
        },
        templateUrl: "app/common/components/status/statusCircle.html",
        link: function(c, d, e) {
            var f, g = {
                up: "fa fa-long-arrow-up",
                down: "fa fa-long-arrow-down",
                init: "fa fa-clock-o"
            };
            c.$watch("inputModel", function(c) {
                if (!a.isUndefinedOrEmpty(c)) {
                    f = b.getTunnelSummary();
                    var e = _.find(f.color, function(a) {
                        return angular.equals(a.value, c[a.property])
                    });
                    d.css({
                        "background-color": "#" + e.color
                    }),
                    c.iconClass = g[e.value];
                    var h = c["vdevice-dataKey"];
                    h = h.split(".").join("");
                    var i = "tooltip" + h;
                    d.addClass(i);
                    var j = "." + i;
                    d.on("mouseenter", function() {
                        var a = {};
                        angular.forEach(f.tooltip, function(b) {
                            a[b.name] = c[b.property]
                        }),
                        $(j).popover({
                            container: "body",
                            placement: function(a, b) {
                                var c = $(b).position();
                                return c.left > 515 ? "left" : c.left < 515 ? "right" : c.top < 110 ? "bottom" : "top"
                            },
                            html: !0,
                            content: JSON.stringify(a, null, 2).replace(/\"/g, "").replace(/[{}]/g, "").replace(/[,]/g, "</br>")
                        }),
                        $(j).popover("show")
                    }).on("mouseleave", function() {
                        $(j).popover("hide")
                    })
                }
            })
        }
    }
}
function vipRealTimeSearch() {
    return {
        restrict: "AE",
        templateUrl: "app/common/components/taggedSearch/realTimeSearch-partial.html",
        scope: {
            taggedSearchObject: "=",
            searchDisabled: "=",
            searchVisible: "=",
            layoutClass: "@",
            tags: "=?",
            onSearchCallback: "&",
            idSuffix: "@",
            uniqueOptName: "@",
            idModalSuffix: "@"
        },
        link: function(a, b) {
            a.tags = [],
            a.taggedSearchObject.element = b,
            a.$watchCollection("tags", function(b, c) {
                if (b !== c && !a.searchDisabled) {
                    var d;
                    angular.isDefined(a.taggedSearchObject) && (d = a.taggedSearchObject.searchWordPattern),
                    a.onSearchCallback({
                        tags: a.tags,
                        pattern: d.type
                    })
                }
            })
        }
    }
}
function searchWordsPattern() {
    var a, b = function(a, b) {
        this.name = a,
        this.checkPattern = b
    }, c = [], d = function(a, b) {
        return !!angular.equals(a, b)
    }, e = function() {
        var a = new b("Match",d);
        c.push(a)
    }, f = function(a, b) {
        return a.indexOf(b) > -1
    }, g = function() {
        var d = new b("Contains",f);
        a = d,
        c.push(d)
    }, h = function() {
        g(),
        e()
    };
    return {
        getSearchWordsPatternList: function() {
            return 0 == c.length && h(),
            c
        },
        getDefaultSearchWordsPattern: function() {
            return a
        }
    }
}
function vipTaggedSearch(a, b, c, d) {
    var e = function(a) {
        return "app/common/components/taggedSearch/" + a + ".html"
    };
    return {
        restrict: "AE",
        templateUrl: function(a, b) {
            return e(b.templateName)
        },
        scope: {
            searchData: "=",
            taggedSearchObject: "=",
            searchDisabled: "=",
            searchVisible: "=",
            layoutClass: "@",
            tags: "=?",
            onSearchCallback: "&",
            templateName: "@",
            idSuffix: "@",
            uniqueOptName: "@",
            idModalSuffix: "@"
        },
        link: function(a, d, e) {
            a.tags = [],
            a.taggedSearchObject.element = d,
            a.$watchCollection("tags", function(d, e) {
                if (d !== e) {
                    a.taggedSearchObject instanceof c ? a.taggedSearchObject.searchData(a.tags, a.searchVisible) : a.taggedSearchObject instanceof b && (a.searchData = a.taggedSearchObject.searchData(a.tags, a.searchVisible));
                    var f = $("div.ui-grid-render-container.ui-grid-render-container-body");
                    angular.isDefined(f) && f.length > 0 && f.find(".ui-grid-viewport").scrollTop(0).perfectScrollbar("update");
                    var g = $("div.monitor-device-info");
                    angular.isDefined(g) && g.length > 0 && g.find(".device-list-section").scrollTop(0).perfectScrollbar("update"),
                    a.onSearchCallback({
                        searchData: a.searchData
                    })
                }
            })
        }
    }
}
function ToggleButton(a) {
    var b = function(a, b, c, d, e) {
        this.title = a,
        this.active = b,
        this.states = c,
        this.value = e,
        this.params = d,
        this.callBack = void 0
    };
    return b.prototype.setCallback = function(a) {
        this.callBack = a
    }
    ,
    b.prototype.setActive = function(a) {
        this.active = a
    }
    ,
    b
}
function vipSelect(a, b) {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            optionModel: "=ngModel",
            defaultDeviceSpecificKeyName: "@",
            idValue: "@",
            parentName: "@",
            disableDeviceSpecificKeyNameChanges: "@",
            disableConstantOptionValueResetOnAdd: "@",
            disableDropDown: "=",
            deviceSpecificKeyName: "@",
            onChangeCallBack: "="
        },
        templateUrl: "app/common/components/vipSelect/vipSelectTemplate.html",
        link: function(a) {
            angular.isDefined(a.disableConstantOptionValueResetOnAdd) || (a.disableConstantOptionValueResetOnAdd = "false"),
            a.formatListElementId = function(a, b) {
                var c = b.toLowerCase().split(" ").join("_");
                return a + "_dropdown_" + c
            }
            ,
            a.$watchCollection("optionModel.optionType", function(b, c) {
                var d = {
                    key: "_empty",
                    value: ""
                };
                if (angular.isDefined(b)) {
                    for (var e = 0; e < a.optionModel.optionType.length; e++)
                        if (a.optionModel.vipType) {
                            if (a.optionModel.optionType[e].value === a.optionModel.vipType) {
                                a.selectedView = a.optionModel.optionType[e];
                                break
                            }
                        } else if (a.optionModel.optionType[e].value === a.optionModel.defaultOption) {
                            a.selectedView = a.optionModel.optionType[e],
                            a.optionModel.vipType = a.optionModel.defaultOption;
                            break
                        }
                    "variable" === a.optionModel.vipType && (a.optionModel.dataType && "enum" === a.optionModel.dataType.type ? ("_blank" === a.optionModel.dataType.values[0].key ? (a.optionModel.dataType.values.splice(0, 1),
                    a.optionModel.dataType.values.splice(0, 0, d)) : "_empty" !== a.optionModel.dataType.values[0].key && a.optionModel.dataType.values.splice(0, 0, d),
                    a.optionModel.vipValue = "_empty") : a.optionModel.vipValue = "")
                }
            }, !0)
        },
        controller: ["$scope", "$state", function(b, c) {
            var d = {
                key: "_empty",
                value: ""
            }
              , e = {
                key: "_blank",
                value: "-- Choose --"
            };
            b.onSelectOption = function(c, f) {
                if (angular.isDefined(f) && "click" === f.type) {
                    if (angular.isDefined(b.optionModel.dataType))
                        switch (b.optionModel.dataType.type) {
                        case "boolean":
                        case "boolean-empty":
                        case "string":
                        case "passphrase":
                        case "restrictedPassphrase":
                        case "mac":
                        case "macList":
                        case "number":
                        case "ip":
                        case "ipList":
                        case "ipv4":
                        case "ipv4List":
                        case "ipv4-prefix":
                        case "ipv4RangeList":
                        case "ipv6":
                        case "ipv6List":
                        case "ipv6-prefix":
                        case "stringList":
                        case "numberList":
                        case "ipv4List":
                        case "enumList":
                            "ignore" === c ? b.optionModel.vipValue = b.optionModel.dataType.default : "constant" === c ? ("false" === b.disableConstantOptionValueResetOnAdd && (b.optionModel.vipValue = ""),
                            "boolean" === b.optionModel.dataType.type && (b.optionModel.vipValue = b.optionModel.dataType.default),
                            b.$parent.prependString && (b.optionModel.vipValue = b.$parent.prependString),
                            b.optionModel.vipVariableName = b.defaultDeviceSpecificKeyName) : b.optionModel.vipValue = "";
                            break;
                        case "enum":
                            "ignore" === c ? a.isUndefinedOrEmpty(b.optionModel.dataType.default) ? ("_blank" === b.optionModel.dataType.values[0].key && b.optionModel.dataType.values.splice(0, 1),
                            "_empty" !== b.optionModel.dataType.values[0].key && b.optionModel.dataType.values.splice(0, 0, d),
                            b.optionModel.vipValue = "_empty") : (b.optionModel.vipValue = b.optionModel.dataType.default,
                            "_empty" !== b.optionModel.dataType.values[0].key && "_blank" !== b.optionModel.dataType.values[0].key || b.optionModel.dataType.values.splice(0, 1)) : "constant" === c ? "false" === b.disableConstantOptionValueResetOnAdd && ("_empty" === b.optionModel.dataType.values[0].key ? (b.optionModel.dataType.values.splice(0, 1),
                            b.optionModel.dataType.values.splice(0, 0, e)) : "_blank" !== b.optionModel.dataType.values[0].key && b.optionModel.dataType.values.splice(0, 0, e),
                            b.optionModel.vipValue = "_blank") : ("_blank" === b.optionModel.dataType.values[0].key ? (b.optionModel.dataType.values.splice(0, 1),
                            b.optionModel.dataType.values.splice(0, 0, d)) : "_empty" !== b.optionModel.dataType.values[0].key && b.optionModel.dataType.values.splice(0, 0, d),
                            b.optionModel.vipValue = "_empty")
                        }
                    b.optionModel.vipType = c,
                    b.onChangeCallBack && b.onChangeCallBack()
                }
                angular.forEach(b.optionModel.optionType, function(a) {
                    a.value === c && (b.selectedView = a)
                })
            }
            ,
            b.enterVariableName = function(a) {
                if (13 === a.which)
                    return a.preventDefault(),
                    !1
            }
        }
        ]
    }
}
function vipConfirmValidation() {
    return {
        require: "ngModel",
        scope: {
            otherModelValue: "=vipConfirmValidation",
            fieldEnabled: "="
        },
        link: function(a, b, c, d) {
            a.$watch("fieldEnabled", function(b, c) {
                b || void 0 === b ? d.$validators.confirm = function(b) {
                    return !a.otherModelValue || b == a.otherModelValue
                }
                : d.$validators.confirm = function(a) {
                    return !0
                }
            }),
            a.$watch("otherModelValue", function() {
                d.$validate()
            })
        }
    }
}
function dataTestController(a, b, c, d) {
    a.url = "",
    a.fetch = function() {
        var b = new d({
            columnResizing: !0,
            singleSelect: !1,
            enableSorting: !0
        });
        a.table = b,
        $("#tableContent").empty();
        var e = "<vip-table table-object='table' table-data-url=" + a.url + "></vip-table>";
        $("#tableContent").append(c(e)(a))
    }
}
function DeviceActionDropDownFactory(a, b, c) {
    function d(d) {
        function e(a, c, e) {
            for (var f = !1, h = !1, i = 0; i < a.length; i++) {
                var j = "read" === a[i].permission ? b.allowReadAccess : "write" === a[i].permission ? b.allowAccess : "";
                if (angular.equals(a[i].feature, "Device Monitoring") && j(a[i].feature) ? f = !0 : j(a[i].feature) && (h = !0),
                f && h)
                    break
            }
            if (f && h) {
                var k = g(c);
                angular.isDefined(d.options) && angular.isDefined(d.options.localViewHandler) && (k.localViewHandler = d.options.localViewHandler),
                e.push(k)
            }
        }
        function f(a, c, e) {
            for (var f = !1, h = 0; h < a.length; h++)
                if (!f) {
                    var i = "read" === a[h].permission ? b.allowReadAccess : "write" === a[h].permission ? b.allowAccess : "";
                    if (i(a[h].feature)) {
                        f = !0;
                        break
                    }
                }
            if (f) {
                var j = g(c);
                angular.isDefined(d.options) && angular.isDefined(d.options.localViewHandler) && (j.localViewHandler = d.options.localViewHandler),
                e.push(j)
            }
        }
        function g(b) {
            var d = {
                type: "Real Time",
                open: "callback",
                okButtonActionFn: function(b) {
                    if (angular.isDefined(b.entity["system-ip"]))
                        angular.isDefined(this.localViewHandler) && this.localViewHandler(),
                        a.go("app.monitor.devices.dashboard.realTime", {
                            systemIp: b.entity["system-ip"],
                            localSystemIp: b.entity["local-system-ip"]
                        });
                    else {
                        var d = {
                            error: {
                                message: "Failed to display real time information",
                                details: "System IP not available"
                            }
                        };
                        c.confirm(d)
                    }
                }
            }
              , e = {
                type: "Device Dashboard",
                open: "callback",
                okButtonActionFn: function(b) {
                    if (angular.isDefined(b.entity["system-ip"]))
                        angular.isDefined(this.localViewHandler) && this.localViewHandler(),
                        angular.equals(b.entity["device-type"], "vedge") ? a.go("app.monitor.devices.dashboard.hardware_health", {
                            systemIp: b.entity["system-ip"],
                            localSystemIp: b.entity["local-system-ip"],
                            deviceModel: b.entity["device-model"],
                            deviceType: b.entity["device-type"]
                        }) : a.go("app.monitor.devices.dashboard.controlConnections", {
                            systemIp: b.entity["system-ip"],
                            localSystemIp: b.entity["local-system-ip"],
                            personality: b.entity.personality,
                            deviceModel: b.entity["device-model"],
                            deviceType: b.entity["device-type"],
                            reachability: b.entity.reachability
                        });
                    else {
                        var d = {
                            error: {
                                message: "Failed to display device dashboard",
                                details: "System IP not available"
                            }
                        };
                        c.confirm(d)
                    }
                }
            }
              , f = {
                type: "SSH Terminal",
                open: "callback",
                okButtonActionFn: function(b) {
                    if (angular.isDefined(b.entity["system-ip"]) && angular.isDefined(b.entity["host-name"]))
                        angular.isDefined(this.localViewHandler) && this.localViewHandler(),
                        a.go("app.tools.ssh", {
                            deviceID: b.entity["system-ip"],
                            hostName: b.entity["host-name"],
                            reachability: "vmanage" !== b.entity.personality ? b.entity.reachability : "reachable",
                            localSystemIp: b.entity["local-system-ip"]
                        });
                    else {
                        var d = {
                            error: {
                                message: "Failed to display SSH terminal",
                                details: "System IP or Hostname not available"
                            }
                        };
                        c.confirm(d)
                    }
                }
            };
            return "DEVICE_DETAILS_PERMISSION" === b ? d : "DEVICE_DASHBOARD_PERMISSION" === b ? e : "DEVICE_SSH_PERMISSION" === b ? f : void 0
        }
        var i = [];
        return angular.forEach(h, function(a, b) {
            _.indexOf(["DEVICE_DETAILS_PERMISSION", "DEVICE_DASHBOARD_PERMISSION"], b) > -1 ? e(a, b, i) : f(a, b, i)
        }),
        i
    }
    function e(c) {
        function d(a) {
            return "redirect" === a || "download" === a ? "callback" : "confirm" === a ? "confirm" : void 0
        }
        var e = [];
        return angular.forEach(c.options.customDropDownList, function(f) {
            var g = {
                type: f.title,
                open: d(f.clickActionObj.type),
                clickActionType: f.clickActionObj.type,
                okButtonActionFn: function(b) {
                    angular.isDefined(this.localViewHandler) && this.localViewHandler(),
                    angular.isDefined(this.clickActionType) && ("redirect" === this.clickActionType ? a.go(f.url, {
                        systemIp: b.entity["system-ip"],
                        localSystemIp: b.entity["local-system-ip"],
                        personality: b.entity.personality,
                        deviceModel: b.entity["device-model"]
                    }) : "confirm" === this.clickActionType || "download" === this.clickActionType)
                }
            };
            angular.isDefined(c.options.localViewHandler) && (g.localViewHandler = c.options.localViewHandler),
            "confirm" === f.clickActionType && (g.content = f.clickActionObj.confirmMessage);
            var h = !1;
            angular.forEach(f.rbacPermissions, function(a) {
                if (!h) {
                    var c = "read" === a.permission ? b.allowReadAccess : "write" === a.permission ? b.allowAccess : "";
                    c(a.feature) && (h = !0)
                }
            }),
            h && e.push(g)
        }),
        e
    }
    var f = function(a) {
        this.options = a
    }
      , g = [{
        permission: "read",
        feature: "Device Monitoring"
    }, {
        permission: "read",
        feature: "Interface"
    }, {
        permission: "read",
        feature: "Policy"
    }, {
        permission: "read",
        feature: "Routing"
    }, {
        permission: "read",
        feature: "Security"
    }, {
        permission: "read",
        feature: "System"
    }]
      , h = {
        DEVICE_DETAILS_PERMISSION: g,
        DEVICE_DASHBOARD_PERMISSION: g,
        DEVICE_SSH_PERMISSION: [{
            permission: "write",
            feature: "Tools"
        }]
    };
    return f.prototype.getDeviceActionDropDownObj = function() {
        var a, b = this;
        return a = d(b),
        angular.isDefined(b.options) && (!angular.isDefined(b.options.multiTenancyMode) || "multiTenant-provider" !== b.options.multiTenancyMode && "multiTenant-tenant" !== b.options.multiTenancyMode || _.each(a, function(a) {
            a.hideCallback = function(a) {
                return "vsmart" === a.entity["device-type"]
            }
        }),
        angular.isDefined(b.options.customDropDownList) && b.options.customDropDownList.length > 0 && (a = a.concat(e(b)))),
        a
    }
    ,
    f
}
function vipDeviceList(a, b, c, d, e, f, g, h, i, j, k, l, m) {
    return {
        restrict: "AE",
        templateUrl: "app/common/deviceListComponents/deviceList-partial.html",
        scope: {
            deviceDataUrl: "@",
            tableObject: "=",
            selectCallBack: "&",
            viewName: "@"
        },
        link: {
            pre: function(n, o, p) {
                n.stateString = n.$parent.stateString;
                var q = e.returnEventsEnum()
                  , r = e.returnViewsEnum()
                  , s = new f(r[n.viewName],[q.DEVICE])
                  , t = 30;
                n.selectedSortOption = {},
                n.selectedDevices = [],
                n.deviceProperties = [],
                n.groupOptions = [],
                n.selectedGroupOption = {},
                n.infinitScrollCount = t,
                n.lastGroupUrl = "",
                n.deviceList = [],
                n.reverse = !1,
                n.listAscend = !0,
                n.lastIndex = -1,
                n.deviceModels = {},
                n.showList = !0,
                n.sortOptions = [{
                    id: 0,
                    value: "Reachability",
                    key: "reachability"
                }, {
                    id: 1,
                    value: "Hostname",
                    key: "host-name"
                }, {
                    id: 2,
                    value: "System IP",
                    key: "local-system-ip"
                }, {
                    id: 3,
                    value: "Site ID",
                    key: "site-id"
                }, {
                    id: 1,
                    value: "Device Model",
                    key: "device-model"
                }],
                n.taggedSearchObject = new c(n.deviceList,n.deviceProperties),
                n.filterDevicesByGroup = function(c, f) {
                    a.getDeviceList(c).then(function(a) {
                        n.serverCall = !1;
                        var c;
                        angular.forEach(a.header.columns, function(a) {
                            "device-model" === a.property && (c = a.color)
                        }),
                        angular.forEach(c, function(a) {
                            n.deviceModels[a.key] = a.displayKey
                        }),
                        f ? w(a) : u(a),
                        n.$parent.$state.params.deviceID ? (n.selectDevice(n.$parent.$state.params.deviceID),
                        n.selectedDevices.length > 0 && "reachable" === n.selectedDevices[0].reachability ? b.$broadcast("enableView") : b.$broadcast("disableView")) : b.$broadcast("selectView"),
                        e.subscribe(s)
                    }, function(a, b, c, e) {
                        d.confirm(a)
                    })
                }
                ;
                var u = function(b) {
                    if (a.setList(b.data),
                    _.isEmpty(n.selectedSortOption) ? n.deviceList = g("orderBy")(b.data, n.orderBy("reachability"), n.reverse) : n.deviceList = g("orderBy")(b.data, n.orderBy(n.selectedSortOption.key), n.reverse),
                    "singleTenant" === m.getUserMode().mode)
                        var c = ["host-name", "status", "system-ip", "site-id", "reachability", "device-model", "device-type"];
                    else
                        var c = ["host-name", "status", "local-system-ip", "site-id", "reachability", "device-model", "device-type"];
                    n.deviceProperties = v(b.header.columns, c),
                    angular.forEach(n.deviceList, function(a) {
                        "staging" === a.validity && (a.reachability = a.reachability + " - staging")
                    }),
                    n.$parent.$state.params.localSystemIp && (n.searchTags = [{
                        text: n.$parent.$state.params.localSystemIp
                    }]),
                    n.taggedSearchObject.setSearchProperties(n.deviceProperties),
                    n.taggedSearchObject.setSearchCache(n.deviceList);
                    0 != n.taggedSearchObject.getSearchTagsCache().length && angular.copy(n.taggedSearchObject.searchData(n.taggedSearchObject.getSearchTagsCache()), n.deviceList)
                }
                  , v = function(a, b) {
                    var c = [];
                    return angular.forEach(a, function(a) {
                        angular.forEach(b, function(b) {
                            if (angular.equals(b, a.property)) {
                                var d = {
                                    displayName: a.title,
                                    name: a.property
                                };
                                c.push(d)
                            }
                        })
                    }),
                    c
                }
                  , w = function(a) {
                    var b = n.taggedSearchObject.getSearchCache()
                      , c = []
                      , d = [];
                    angular.forEach(b, function(b, d) {
                        _.findIndex(a.data, function(a) {
                            return a.uuid === b.uuid
                        }) < 0 && c.push(d)
                    }),
                    i.removeFromArray(b, c),
                    angular.forEach(a.data, function(a, c) {
                        var e = _.findIndex(b, function(b) {
                            return b.uuid === a.uuid
                        });
                        e < 0 ? d.push({
                            index: c,
                            newObject: a
                        }) : angular.extend(b[e], a)
                    }),
                    i.insertIndexOfArray(b, d),
                    n.taggedSearchObject.setSearchCache(b),
                    angular.copy(g("orderBy")(n.taggedSearchObject.searchData(n.taggedSearchObject.getSearchTagsCache()), n.orderBy(n.selectedSortOption.key)), n.deviceList)
                };
                n.selectDevice = function(a) {
                    n.selectedDevices.reset(),
                    _.each(n.deviceList, function(b, c) {
                        b.deviceId === a && (n.selectedDevices.push(b),
                        n.lastIndex = c)
                    })
                }
                ,
                n.orderBy = function(a) {
                    return function(b) {
                        return "site-id" === a ? parseInt(b[a]) : b[a]
                    }
                }
                ,
                n.sortDir = function() {
                    n.listAscend = !n.listAscend,
                    n.deviceList = g("orderBy")(n.deviceList, null, !n.reverse)
                }
                ;
                var x = function(a) {
                    n.lastGroupUrl = a.uri,
                    n.serverCall = !0,
                    n.taggedSearchObject.clearSearchCache(),
                    n.filterDevicesByGroup(a.uri),
                    h(function() {
                        n.$broadcast("vsRepeatTrigger")
                    })
                };
                a.getGroupList().then(function(a) {
                    if (_.each(a.data, function(a, b) {
                        var c = {
                            id: b,
                            value: a.name,
                            uri: a.sshuri,
                            key: a.name.toLowerCase().replace(/ /g, "_")
                        };
                        n.groupOptions.push(c)
                    }),
                    l.sessionStorage.getItem("deviceGroupFilter"))
                        var b = _.find(n.groupOptions, function(a) {
                            return angular.equals(a.value, l.sessionStorage.getItem("deviceGroupFilter")) || angular.equals(a.key, l.sessionStorage.getItem("deviceGroupFilter"))
                        });
                    else
                        var b = n.groupOptions[0];
                    n.selectedGroupOption = b,
                    x(b)
                }, function(a, b, c, d) {}),
                n.toggleList = function() {
                    n.showList = !n.showList
                }
                ,
                n.sortList = function(a, b) {
                    n.listAscend = !0,
                    n.deviceList = g("orderBy")(n.deviceList, n.orderBy(a.key)),
                    h(function() {
                        n.$broadcast("vsRepeatTrigger")
                    })
                }
                ,
                n.callBack = function(a, b, c) {
                    n.selectedDevices.reset(),
                    n.selectedDevices.push(c),
                    n.lastIndex = b,
                    n.selectCallBack({
                        id: n.selectedDevices
                    })
                }
                ,
                n.$on("device_event", function(a, b) {
                    "status" !== b.eventChangeType && "delete" !== b.eventChangeType && "create" !== b.eventChangeType || (e.unsubscribe(s),
                    n.filterDevicesByGroup(n.lastGroupUrl, !0))
                }),
                n.changeDeviceGroup = function(a) {
                    if (a.uri) {
                        var c = j.current.name;
                        c.indexOf("app.tools.ssh") > -1 ? (k.clearSSHTabs(),
                        b.$broadcast("noSSHTab"),
                        (n.$parent.$state.params.deviceID || n.$parent.$state.params.hostName || n.$parent.$state.params.reachability) && (n.$parent.$state.params.deviceID = null,
                        n.$parent.$state.params.hostName = null,
                        n.$parent.$state.params.reachability = null)) : c.indexOf("app.monitor.devices.deviceDashboard") > -1 && j.go("app.monitor.devices", {
                            display: "browse"
                        }),
                        n.searchTags = [],
                        x(a)
                    }
                }
                ,
                n.currentDevice = a.getSelectedDevice(),
                n.$watchCollection("currentDevice", function(a, b) {
                    n.selectDevice(a[0])
                }),
                n.onSearch = function() {
                    n.selectDevice(n.$parent.$state.params.deviceID);
                    var a = $("div.deviceList");
                    angular.isDefined(a) && a.length > 0 && a.find(".deviceSelectList").scrollTop(0).perfectScrollbar("update")
                }
                ,
                n.loadMoreDevices = function() {
                    n.infinitScrollCount < n.deviceList.length && (n.deviceList.length >= n.infinitScrollCount + t ? n.infinitScrollCount += t : n.infinitScrollCount = n.deviceList.length)
                }
                ,
                n.$on("$destroy", function() {
                    e.unsubscribe(s),
                    l.sessionStorage.setItem("deviceGroupFilter", n.selectedGroupOption.value)
                })
            }
        }
    }
}
function deviceListService(a) {
    var b = []
      , c = [];
    return {
        DEVICE_DETAILS_URL: "/dataservice/device?deviceId=",
        GROUPS_URL: "dataservice/group/device",
        init: function() {
            c.reset()
        },
        getDeviceList: function(b) {
            return a.get(b)
        },
        setList: function(a) {
            b = a
        },
        getList: function() {
            return b
        },
        getDevicePersonality: function(b) {
            var c = this.DEVICE_DETAILS_URL + b;
            return a.get(c)
        },
        setSelectedDevice: function(a) {
            c.reset(),
            c.push(a)
        },
        getSelectedDevice: function() {
            return c
        },
        getGroupList: function() {
            return a.get(this.GROUPS_URL)
        }
    }
}
function deviceOptionsService(a) {
    var b = "/dataservice/client/monitor/device/options"
      , c = ""
      , d = ""
      , e = []
      , f = []
      , g = []
      , h = {}
      , i = []
      , j = {}
      , k = [];
    return {
        getDeviceOptions: function() {
            return a.get(b)
        },
        setStoredDeviceOption: function(a) {
            _.each(a, function(a, b) {
                e.push(a)
            })
        },
        getStoredDeviceOption: function() {
            return e
        },
        setSearchOptions: function() {
            _.each(e, function(a) {
                _.each(a.children, function(b) {
                    var c = {};
                    c.name = a.name + " " + b.name,
                    c.multiSelect = a.multiSelect,
                    c.personality = a.personality,
                    c.uri = b.uri,
                    c["filter-fields"] = b["filter-fields"],
                    f.push(c)
                })
            })
        },
        setMenuOptions: function() {
            _.each(e, function(a) {
                var b = {};
                b.name = a.name,
                b.personality = a.personality,
                b.submenu = [],
                a.children.length > 1 ? _.each(a.children, function(a) {
                    b.link = "";
                    var c = {};
                    c.name = a.name,
                    c.link = a.uri,
                    b.submenu.push(c)
                }) : b.link = a.children[0].uri,
                g.push(b)
            })
        },
        checkPersonalityList: function(a) {
            var b = _.has(h, a);
            return !!b && h[a]
        },
        getPersonalityOptions: function(a) {
            var b = _.has(h, a);
            return b ? i = h[a] : (i = [],
            h[a] = [],
            _.each(f, function(b, c) {
                _.each(b.personality, function(c) {
                    c === a && (i.push(b),
                    h[a].push(b))
                })
            })),
            i
        },
        getPersonalityMenuOptions: function(a) {
            var b = _.has(j, a);
            return b ? k = j[a] : (k = [],
            j[a] = [],
            _.each(g, function(b, c) {
                _.each(b.personality, function(c) {
                    c === a && (k.push(b),
                    j[a].push(b))
                })
            })),
            k
        },
        setLastOption: function(a) {
            c = a
        },
        getLastOption: function() {
            return c
        },
        setLastView: function(a) {
            d = a
        },
        getLastView: function() {
            return d
        }
    }
}
function vipEmptyTemplate(a, b, c, d) {
    return {
        restrict: "E",
        templateUrl: "app/common/emptyTemplates/emptyTemplate.html",
        scope: {
            staticPageTitle: "@",
            staticPageMessage: "@",
            staticPageIcon: "@",
            uuidState: "="
        },
        link: function(b, d, e) {
            b.remove = function() {
                b.$parent.$state.params.deviceID && c.removeDevice(b.$parent.$state.params.deviceID).then(function(b) {
                    a.go("app.monitor.devices", {
                        display: "browse"
                    })
                }, function(a) {})
            }
        }
    }
}
function errorPopupController(a, b, c, d) {
    a.errorDescription = d.errorDescription,
    a.errorMessage = d.errorMessage,
    a.ok = function() {
        c.dismiss()
    }
}
function eventListObject() {
    var a = function(a) {
        var b;
        return b = a.split(","),
        console.log("value of temp", b),
        b
    }
      , b = function(b, c) {
        this.view = b;
        "string" == typeof c && c && (c = a(c)),
        this.events = c
    };
    return b
}
function eventPoll(a, b, c, d, e, f) {
    function g() {
        var a = e.defer();
        return q.push(a),
        c.getEventPoll(k, {
            timeout: 7e5
        }).then(function(b) {
            a.resolve(b)
        }, function(b) {
            a.reject(b)
        }),
        a.promise
    }
    var h, i, j = !1, k = void 0, l = {}, m = {
        ALARMS: "alarm",
        CERTIFICATE: "certificate",
        DEVICE: "device",
        DEVICE_ACTION: "device-action",
        DEVICE_LINK: "device-link",
        STATISTICS: "statistics",
        ACTIVITY: "activity",
        CLUSTER: "cluster",
        TENANT: "tenant",
        TENANT_STATUS: "tenant-status",
        CLOUDX: "cloudx",
        MAINTENANCE_WINDOW: "maintenance-window"
    }, n = {
        TOP_NAVIGATION: "topNavigation",
        DASHBOARD: "dashboard",
        GEOGRAPHY: "geography",
        NETWORK: "network",
        ALARMS: "alarm",
        EVENTS: "events",
        AUDITLOG: "auditlog",
        STATISTICS: "statistics",
        DEVICES: "devices",
        CERTIFICATE: "certificate",
        TEMPLATES: "templates",
        POLICY: "policy",
        SSH_TERMINAL: "sshTerminal",
        REDISCOVER_NETWORK: "rediscoverNetwork",
        SOFTWARE_UPGRADE: "softwareUpgrade",
        SOFTWARE_REBOOT: "softwareReboot",
        SETTINGS: "settings",
        MANAGE_USER: "manageUser",
        CLUSTER_MANAGEMENT: "clusterManagement",
        DEVICE_STATUS: "deviceStatus",
        DEVICE_LIST_CACHE: "deviceListCache",
        CLOUD_X_DASHBOARD: "cloudXDashboard"
    }, o = {
        DEVICE_LIST: "deviceList",
        REBOOT: "reboot",
        CERTIFICATE: "certificate",
        CONTROL_STATUS: "controlStatus",
        SITE_HEALTH_VIEW: "siteHealthView",
        TRANSPORT_INTERFACE_DISTRIBUTION: "transportInterfaceDistribution",
        VEDGE_INVENTORY: "vedgeInventory",
        VEDGE_HARDWARE_HEALTH: "vedgeHardwareHealth",
        TRANSPORT_HEALTH: "transportHealth",
        TOP_APPLICATIONS: "topApplications",
        APPLICATION_AWARE_ROUTING: "applicationAwareRouting",
        VMANAGE_CLUSTER: "vManageCluster"
    }, p = {
        TENANT_ALARMS_LIST: "tenantAlarmsList",
        PROVIDER_CERTIFICATE: "providerCertificate",
        V_MANAGE_CLUSTER: "vmanageCluster",
        TENANT_LIST: "tenantList",
        V_BOND_STATUS: "vBond_Status"
    }, q = [], r = function() {
        b.info("Polling events now. Registration id for polling is : " + k);
        var d = this;
        g.call(d).then(function(c) {
            b.info("Event poll success"),
            q.pop(),
            _.each(c, function(b) {
                l[b.eventType] && a.$broadcast(b.eventType + "_event", b)
            }),
            angular.isDefined(k) && (i = f(function() {
                r.call(d)
            }, 1e4, 1))
        }, function(a) {
            b.info("Event poll failure " + a),
            q.pop(),
            _.indexOf([499, 503], a.status) > -1 ? i = f(function() {
                r.call(d)
            }, 1e4, 1) : _.indexOf([400], a.status) > -1 ? d.unRegisterEventPoll().then(function(a) {
                c.registerEventPoll().then(function(a) {
                    k = a.id,
                    i = f(function() {
                        r.call(d)
                    }, 1e4, 1)
                }, function(a) {
                    b.error("Error occurred registering event polling: " + a)
                })
            }, function(c) {
                b.error("Error occurred unregistering event polling: " + a)
            }) : angular.isDefined(k) && _.indexOf([0, 410, 500], a.status) < 0 && (b.info("Event poll failed. Polling again"),
            i = f(function() {
                r.call(d)
            }, 1e4, 1))
        })
    };
    return {
        initServerPolling: function() {
            r.call(this)
        },
        stopServerPolling: function() {
            f.cancel(i),
            i = {};
            for (var a = q.length - 1; a >= 0; a--)
                q[a].reject({
                    status: 410
                })
        },
        returnEventsEnum: function() {
            return m
        },
        returnViewsEnum: function() {
            return n
        },
        returnDashboardWidgetsEnum: function() {
            return o
        },
        returnProviderDashboardWidgetsEnum: function() {
            return p
        },
        setFeatureAccess: function() {
            h = !0
        },
        registerEventPoll: function() {
            var a = this;
            !angular.equals({}, l) && h && (a.stopServerPolling(),
            j = !0,
            angular.isDefined(k) ? a.unRegisterEventPoll().then(function() {
                c.registerEventPoll().then(function(b) {
                    k = b.id,
                    a.initServerPolling()
                }, function(a) {
                    b.error("Error occurred registering event polling: " + a)
                })
            }, function(a) {}) : c.registerEventPoll().then(function(b) {
                k = b.id,
                a.initServerPolling()
            }, function(a) {
                b.error("Error occurred registering event polling: " + a)
            }))
        },
        unRegisterEventPoll: function() {
            var a = e.defer();
            return j = !1,
            angular.isUndefined(k) ? (console.log("Registration Id undefined"),
            a.resolve()) : c.unRegisterEventPoll(k).then(function(c) {
                b.info("Unregistered event polling"),
                k = void 0,
                a.resolve()
            }, function(c) {
                b.error("Error occurred unregistering event polling: " + c),
                a.resolve()
            }),
            a.promise
        },
        subscribe: function(a) {
            if ("" != a.view && void 0 != a.view && void 0 != a.events) {
                for (var b = 0; b < a.events.length; b++)
                    l[a.events[b]] && l[a.events[b]].indexOf(a.view) == -1 ? l[a.events[b]].push(a.view) : (l[a.events[b]] = [],
                    l[a.events[b]].push(a.view));
                j || this.registerEventPoll()
            }
        },
        unsubscribe: function(a) {
            if (void 0 != a.view && void 0 != a.events && "" != a.view)
                for (var b = 0; b < a.events.length; b++)
                    l[a.events[b]] && l[a.events[b]].indexOf(a.view) > -1 && (l[a.events[b]].splice(l[a.events[b]].indexOf(a.view), 1),
                    0 == l[a.events[b]].length && delete l[a.events[b]],
                    angular.equals({}, l) && this.unRegisterEventPoll())
        }
    }
}
function eventPollService(a, b, c, d) {
    return {
        registerEventPoll: function() {
            return c.get(d.EVENT_POLL_REG)
        },
        unRegisterEventPoll: function(a) {
            return c.get(d.EVENT_POLL_UNREG + "/" + a)
        },
        getEventPoll: function(a, b) {
            return c.get(d.EVENT_POLL + "/" + a, b)
        }
    }
}
function onReadFile(a) {
    return {
        restrict: "A",
        scope: !1,
        link: function(b, c, d) {
            var e = a(d.onReadFile);
            c.on("change", function(a) {
                var c = new FileReader;
                c.onload = function(a) {
                    b.$apply(function() {
                        e(b, {
                            $fileContent: a.target.result
                        })
                    })
                }
                ,
                c.readAsText((a.srcElement || a.target).files[0])
            })
        }
    }
}
function vipFileUploadButton() {
    return {
        restrict: "AE",
        templateUrl: "app/common/fileUploadButton-partial.html",
        scope: {
            buttonDisabled: "@",
            layoutClass: "@",
            filesPlaceHolder: "@",
            supportMultipleFiles: "&"
        }
    }
}
function propsFilter() {
    return function(a, b) {
        var c = [];
        return angular.isArray(a) ? a.forEach(function(a) {
            for (var d = !1, e = Object.keys(b), f = 0; f < e.length; f++) {
                var g = e[f]
                  , h = b[g].toLowerCase();
                if (a[g].toString().toLowerCase().indexOf(h) !== -1) {
                    d = !0;
                    break
                }
            }
            d && c.push(a)
        }) : c = a,
        c
    }
}
function removeWhitespaces() {
    return function(a) {
        return a ? a.replace(/ /g, "") : ""
    }
}
function commaSeparatedList() {
    return function(a, b) {
        var c = [];
        return Array.isArray(a) && a.forEach(function(a) {
            c.push(a[b])
        }),
        c.toString()
    }
}
function pluck() {
    return function(a, b) {
        return _.pluck(a, b)
    }
}
function nospace() {
    return function(a) {
        return a ? a.replace(/ /g, "_") : ""
    }
}
function appendZero() {
    return function(a) {
        return 0 !== a && 1 === a.toString().length ? "0" + a.toString() : a
    }
}
function formatTitle() {
    return function(a) {
        var b, c;
        return Array.isArray(a) ? (b = a[0],
        c = a[1].capitalizeGivenLetter(0, " "),
        angular.isDefined(b) && "" !== b ? b + ": " + c : c) : a
    }
}
function initialCap() {
    return function(a) {
        return _.isEmpty(a) ? a : a[0].capitalizeGivenLetter(0, " ") + a.substring(1, a.length)
    }
}
function JSONArrayOfObjToString() {
    return function(a) {
        if (a)
            return a.$$hashKey && delete a.$$hashKey,
            JSON.stringify(a, null).replace(/\"/g, "").replace(/},{/g, " | ").replace(/[\[{}\]]/g, "")
    }
}
function formatTableString(a) {
    return function(b) {
        if (!a.isUndefinedOrEmpty(b))
            return b.split("_").join(" ")
    }
}
function formatTableStringWithDashesAndInitialCapsAllWords(a) {
    return function(b) {
        if (!a.isUndefinedOrEmpty(b))
            return b = b.replace("_", " "),
            b.split("-").join(" ").replace(/\w\S*/g, function(a) {
                return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase()
            })
    }
}
function formatBytes(a) {
    return function(b) {
        if (a.isNumeric(b)) {
            if (0 == b)
                return "0B";
            var c = ["B", "KB", "MB", "GB", "TB", "PB"]
              , d = Math.floor(Math.log(b) / Math.log(1024))
              , e = parseFloat((b / Math.pow(1024, Math.floor(d))).toFixed(2));
            return d = d < 0 ? -d : d,
            e + " " + c[d]
        }
        return b
    }
}
function formatKbpsToMbps(a) {
    return function(b) {
        if (!a.isNumeric(b))
            return b;
        if (b < 1)
            return "0 mbps";
        var c = parseFloat((b / 1e3).toFixed(2));
        return c
    }
}
function formatEmptyTableString(a) {
    return function(b) {
        return angular.isNumber(b) ? b : a.isUndefinedOrEmpty(b) ? "--" : b
    }
}
function arrayToString() {
    return function(a) {
        return a = a.toString()
    }
}
function convertIpToHostname(a, b) {
    return function(a, b) {
        return b.ip_hostname || a
    }
}
function convertTunnelIpToHostname(a, b) {
    return function(a, b) {
        return b.tunnel_hostname || a
    }
}
function propertyIsDefined() {
    return function(a, b) {
        return _.filter(a, function(a) {
            return angular.isDefined(a[b])
        })
    }
}
function propertyIsUndefined() {
    return function(a, b) {
        return _.filter(a, function(a) {
            return angular.isUndefined(a[b])
        })
    }
}
function momentDateFormat() {
    var a = moment.tz.guess();
    return function(b, c) {
        if (angular.isUndefined(b) || null === b || b < 1)
            return "--";
        if ("N/A" === b)
            return "N/A";
        var d = moment.tz(b, a);
        return d.isValid() ? d.format(c) : "--"
    }
}
function bytes(a) {
    return function(a, b) {
        if (isNaN(parseFloat(a)) || !isFinite(a))
            return "-";
        if (a) {
            "undefined" == typeof b && (b = 1);
            var c = ["bytes", "kB", "MB", "GB", "TB", "PB"]
              , d = Math.floor(Math.log(a) / Math.log(1024));
            return (a / Math.pow(1024, Math.floor(d))).toFixed(b) + " " + c[d]
        }
        return "0 bytes"
    }
}
function chartLegendSort(a) {
    return function(b, c, d) {
        if (b = _.filter(b, function(a) {
            return !angular.isDefined(a.yAxis) || 0 == a.yAxis
        }),
        b.length)
            return a.validateIpv4(b[0].name) ? b.sort(function(a, b) {
                var c = a.name.split(".")
                  , d = b.name.split(".")
                  , e = parseInt(c[0], 10) * Math.pow(256, 3) + parseInt(c[1], 10) * Math.pow(256, 2) + 256 * parseInt(c[2], 10) + 1 * parseInt(c[3], 10)
                  , f = parseInt(d[0], 10) * Math.pow(256, 3) + parseInt(d[1], 10) * Math.pow(256, 2) + 256 * parseInt(d[2], 10) + 1 * parseInt(d[3], 10);
                return e - f
            }) : b = _.sortBy(b, "name"),
            d && b.reverse(),
            b
    }
}
function filterByMultipleProperties(a) {
    return function(b, c, d) {
        return a.filterData(b, c, d)
    }
}
function newLines() {
    return function(a) {
        return a ? a.replace(/\n/g, "<br/>") : ""
    }
}
function optionsDisabled(a) {
    var b = function(a, b, c, d, e) {
        for (var f = c.find("option"), g = 0, h = 0; g < f.length; g++) {
            var i = angular.element(f[g]);
            if ("" != i.val()) {
                var j = {};
                j[b] = d[h],
                i.attr("disabled", e(a, j)),
                h++
            }
        }
    };
    return {
        priority: 0,
        require: "ngModel",
        link: function(c, d, e, f) {
            var g = e.optionsDisabled.match(/^\s*(.+)\s+for\s+(.+)\s+in\s+(.+)?\s*/)
              , h = g[3]
              , i = a(g[1]);
            c.$watch(h, function(a, e) {
                a && b(c, g[2], d, a, i)
            }, !0),
            c.$watch(e.ngModel, function(e, f) {
                var j = a(h)(c);
                e && b(c, g[2], d, j, i)
            })
        }
    }
}
function GenericController(a, b, c) {
    console.log("Hello from GenericController"),
    b.title = a.title
}
function helpDetails(a, b, c, d) {
    var e = {};
    e.url = "",
    e.text = "";
    var e = {
        getHelpDetails: function() {
            return e
        },
        truncateRoute: function(a) {
            var b = a.split(".");
            return b.length > 2 ? b = b[0] + "." + b[1] + "." + b[2] : 2 === b.length && (b = b[0] + "." + b[1]),
            b
        },
        setHelpDetails: function(a) {
            var b = c.getSidebarMenu();
            b.menu.length && _.each(b.menu, function(b) {
                e.truncateRoute(a) === e.truncateRoute(b.sref) ? (e.text = b.text + " Help",
                e.url = d.HELP_BASE_URL + b.text.replace(/\s+/g, "") + "/" + b.text.replace(/\s+/g, "")) : _.each(b.submenu, function(c) {
                    e.truncateRoute(a) === e.truncateRoute(c.sref.split("(", 1)[0]) && (e.text = c.text + " Help",
                    e.url = d.HELP_BASE_URL + b.text.replace(/\s+/g, "") + "/" + c.text)
                })
            })
        }
    };
    return e
}
function vipMessages(a, b) {
    return {
        restrict: "AE",
        require: "^form",
        replace: !1,
        templateUrl: "app/common/input-partial.html",
        scope: {},
        link: function(a, c, d, e) {
            a.formObj = e,
            a.inputName = d.elementName,
            b(function() {
                a.$apply(function() {
                    var b = $('[name="' + d.elementName + '"]');
                    b.length > 0 && (a.inputAttr = $('[name="' + d.elementName + '"]')[b.length - 1].attributes)
                })
            })
        }
    }
}
function vipIpValidation() {
    var a = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
      , b = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
    return {
        require: "ngModel",
        link: function(c, d, e, f) {
            f.$validators.ipaddress = function(c) {
                return a.test(c) || b.test(c)
            }
        }
    }
}
function maintenanceWindow(a, b, c, d) {
    return {
        checkMaintenanceWindow: function() {
            var b, e = this, f = a.defer();
            return d.getMaintenanceWindow().then(function(a) {
                angular.isObject(a.data) && !_.isEmpty(a.data) && _.isNumber(a.data[0].epochStartTimeInMillis) && _.isNumber(a.data[0].epochEndTimeInMillis) && Date.now() < a.data[0].epochEndTimeInMillis && (Date.now() + 1728e5 < a.data[0].epochStartTimeInMillis ? e.setMaintenanceWindowTimer(a.data[0].epochStartTimeInMillis - 1728e5 - Date.now(), a.data[0].epochStartTimeInMillis, a.data[0].epochEndTimeInMillis) : Date.now() < a.data[0].epochStartTimeInMillis && (b = e.getWindowStartDuration(a.data[0].epochStartTimeInMillis, a.data[0].epochEndTimeInMillis),
                c.warning(b))),
                f.resolve()
            }, function(a) {
                c.confirm(a),
                f.reject()
            }),
            f.promise
        },
        getWindowStartDuration: function(a, c) {
            var d = Math.round(c - a) / 6e4
              , e = Math.floor(d / 60)
              , f = Math.round(d % 60);
            e = e > 0 ? e + (1 == e ? " hour" : " hours") : "",
            f = f > 0 ? " " + f + (1 == f ? " minute" : " minutes") : "";
            var g = e + f;
            return "Cisco vManage will be offline for " + g + " on " + b("date")(a, "dd MMM yyyy") + " at " + b("date")(a, "h:mm a") + " for maintenance."
        },
        setMaintenanceWindowTimer: function(a, b, d) {
            var e = this;
            this.maintenanceWindowTimer && clearTimeout(this.maintenanceWindowTimer),
            this.maintenanceWindowTimer = setTimeout(function() {
                c.warning(e.getWindowStartDuration(b, d))
            }, a)
        }
    }
}
function modalHeader() {
    return {
        restrict: "AE",
        templateUrl: "app/common/modalComponents/modalHeader-partial.html",
        scope: {
            modalTitle: "@",
            modalCloseIcon: "=",
            modalCloseHandler: "=",
            modalParentStateString: "="
        }
    }
}
function ActivateVSmartPolicyModalInstanceCtrl(a, b, c, d, e, f) {
    a.policy = c ? _.clone(c) : {},
    a.showErrorSection = !1,
    a.errorMessage = {},
    a.onlineDeviceList = [],
    a.offlineDeviceList = [],
    a.postCall = {
        InProgress: !1
    },
    a.deviceFetchCall = {
        InProgress: !0
    },
    e.getVSmartConnStatus().then(function(b) {
        a.deviceFetchCall.InProgress = !1,
        b.data.length ? angular.forEach(b.data, function(b) {
            b.isOnline ? a.onlineDeviceList.push(b) : a.offlineDeviceList.push(b)
        }) : (a.showErrorSection = !0,
        a.errorMessage = {
            error: {
                type: "error",
                message: "No vSmart",
                details: "Cannot activate policy because tenant has no vSmart"
            }
        })
    }, function(b) {
        a.deviceFetchCall.InProgress = !1,
        a.showErrorSection = !0,
        a.errorMessage = b
    }),
    a.activate = function(c) {
        var d = {};
        c.isEdited && (d = {
            isEdited: c.isEdited
        }),
        a.postCall.InProgress = !0,
        e.activateVSmartPolicy(c.policyId, d).then(function(a) {
            b.hide(a),
            f.success(c.policyName + " policy successfully activated.", 2e3)
        }, function(b) {
            a.postCall.InProgress = !1,
            a.cancel(b),
            f.confirm(b)
        })
    }
    ,
    a.cancel = function() {
        b.cancel("cancel")
    }
}
function AddUserGroupModalController(a, b, c, d, e, f, g, h, i, j) {
    a.stateString = e.getStateString(c),
    a.userGroupColDef = h.getColumns(),
    a.tableScroll = {
        isSet: !1
    },
    a.postCall = {
        InProgress: !1
    },
    a.selectAll = {
        read: !1,
        write: !1
    };
    var k, l = {
        groupName: h.getGroupNameFromControlView(),
        tasks: h.getTaskListFromViewControl()
    };
    a.checkFeatureEnabled = function(a) {
        a.enabled = !1,
        a.write ? (a.read = !0,
        a.enabled = !0) : a.read && (a.enabled = !0)
    }
    ,
    a.selectAllColumnEntries = function(b, c) {
        a.selectAll[b] ? angular.forEach(a.gridOptions.data, function(c) {
            c[b] = !0,
            angular.equals(b, "write") && (c.read = !0,
            a.selectAll.read = !0)
        }) : angular.equals(b, "read") && !a.selectAll.write || angular.equals(b, "write") ? angular.forEach(a.gridOptions.data, function(a) {
            (angular.equals(b, "read") && !a.write || angular.equals(b, "write")) && (a[b] = !1)
        }) : a.selectAll.read = !0,
        c.stopPropagation()
    }
    ,
    a.gridOptions = {
        enableSorting: !0,
        rowHeight: 40,
        minRowsToShow: 10,
        columnDefs: [],
        data: l.tasks,
        onRegisterApi: function(b) {
            a.gridApi = b,
            b.core.on.rowsRendered(a, function(b) {
                k = $("div.ui-grid-render-container.ui-grid-render-container-body");
                var c;
                return !(b.grid.options.columnDefs.length < 1 && b.grid.options.data.length < 1) && (k.width() && k.height() && !a.tableScroll.isSet && (c = k.find(".ui-grid-viewport").perfectScrollbar({
                    minScrollbarLength: "20"
                })),
                void (c && (a.tableScroll.isSet = !0)))
            })
        }
    },
    a.$watch("gridOptions.data", function(b, c) {
        if (!angular.equals(b, c)) {
            var d = !0
              , e = !0;
            angular.forEach(b, function(b) {
                b.read || (a.selectAll.read = !1,
                d = !1),
                b.write || (a.selectAll.write = !1,
                e = !1),
                b.enabled = b.read || b.write
            }),
            d && (a.selectAll.read = !0),
            e && (a.selectAll.write = !0)
        }
    }, !0),
    a.$watch("tableScroll.isSet", function(a, b) {
        a && j(function() {
            k.find(".ui-grid-viewport").perfectScrollbar("update")
        }, 500)
    }),
    function() {
        angular.forEach(a.userGroupColDef, function(b) {
            return "feature" !== b.property ? (a.gridOptions.columnDefs.push({
                type: b.dataType,
                field: b.property,
                name: b.property,
                displayName: b.displayName,
                enableColumnMenu: !1,
                enableCellEdit: !0,
                allowCellFocus: !0,
                width: "*",
                cellTemplate: '<div class="ui-grid-cell-contents"><input ng-change="grid.appScope.checkFeatureEnabled(row.entity)" id="modal_{{row.entity[\'feature\'] | nospace}}_' + b.property + '" type="checkbox" ng-input="row.entity[\'' + b.property + "']\" ng-model=\"row.entity['" + b.property + "']\"/><label id=\"modal_{{row.entity['feature'] | nospace}}_" + b.property + "_label\" for=\"modal_{{row.entity['feature'] | nospace}}_" + b.property + '"></label></div>',
                editableCellTemplate: '<div class="ui-grid-cell-contents"><input ng-change="grid.appScope.checkFeatureEnabled(row.entity)" id="modal_{{row.entity[\'feature\'] | nospace}}_' + b.property + '" type="checkbox" ng-input="row.entity[\'' + b.property + "']\" ng-model=\"row.entity['" + b.property + "']\"/><label id=\"modal_{{row.entity['feature'] | nospace}}_" + b.property + "_label\" for=\"modal_{{row.entity['feature'] | nospace}}_" + b.property + '"></label></div>',
                headerCellTemplate: ' <input type="checkbox" name="select_all_' + b.property + '" data-ng-model="grid.appScope.selectAll[\'' + b.property + '\']" data-ng-click="$event.stopPropagation();grid.appScope.selectAllColumnEntries(col.displayName.toLowerCase(), $event)" id="select_all_' + b.property + '"/> <label id="select_all_' + b.property + '_label" for="select_all_' + b.property + "\" class=\"pull-left user-group-model-header\"></label> <div class=\"ui-grid-cell-contents\" col-index=\"renderIndex\"> <span>{{ col.displayName CUSTOM_FILTERS }}</span> <span ui-grid-visible=\"col.sort.direction\" style='vertical-align: middle;'><i class='material-icons md-12 icon-bold' style='color: white;' ng-if='col.sort.direction == asc'>arrow_upward</i><i class=\"material-icons md-12 icon-bold\" style='color: white;' ng-if='col.sort.direction == desc'>arrow_downward</i>     &nbsp; </span></div>"
            }),
            !0) : void a.gridOptions.columnDefs.push({
                type: b.dataType,
                field: b.property,
                name: b.property,
                displayName: b.displayName,
                enableCellEdit: !1,
                enableColumnMenu: !1,
                width: "*",
                sort: {
                    direction: i.ASC,
                    priority: 1
                }
            })
        })
    }(),
    a.groupName = l.groupName,
    a.newUserGroup = {},
    a.showErrorSection = !1,
    a.add = function() {
        var c = {};
        if (c.groupName = a.newUserGroup.groupName,
        c.tasks = a.gridOptions.data,
        _.findIndex(c.tasks, function(a) {
            return a.read === !0
        }) < 0) {
            a.showErrorSection = !0;
            var d = {
                error: {
                    message: "Failed to create user group",
                    details: "Minimum one feature should be configured."
                }
            };
            return a.errorMessage = d,
            !1
        }
        a.postCall.InProgress = !0,
        g.createUserGroup(c).then(function(c) {
            b.hide(),
            a.postCall.InProgress = !1,
            f.success("User Group successfully updated.", 2e3)
        }, function(b) {
            a.postCall.InProgress = !1,
            a.showErrorSection = !0,
            a.errorMessage = b
        })
    }
    ,
    a.cancel = function() {
        b.cancel()
    }
}
function addvManageClusterController(a, b, c, d, e, f, g, h, i, j, k) {
    a.stateString = k.getStateString(b) + "addVmanage_",
    a.selectServicesList = [],
    a.serverCall = !1,
    angular.isDefined(j) && j ? a.configureError = !1 : (a.configureError = g.getConfigureError(),
    a.configureMessage = {
        error: {
            message: "Configure IP Address on Local Device",
            details: "Configuring IP address on local device is required before adding new vManage."
        }
    });
    var l = g.getServicesList();
    a.vManageObj = {},
    angular.isDefined(f) ? (a.vManageAdd = !1,
    a.vMamangeTitle = "Edit vManage",
    a.vManageObj = {
        vmanageID: f.vmanageID,
        deviceIP: f.deviceIP,
        username: f.username,
        password: f.password
    }) : (a.vManageAdd = !0,
    a.vMamangeTitle = "Add vManage"),
    a.vManageAdd || (a.serverCall = !0,
    e.getIPList(f.vmanageID).then(function(b) {
        var c = [];
        angular.forEach(b, function(a) {
            c.indexOf(a) == -1 && c.push(a)
        }),
        angular.equals(f.deviceIP, "localhost") && (a.vManageObj.deviceIP = c[0]),
        a.vManageIPList = c,
        a.serverCall = !1
    }, function(b) {
        a.serverCall = !1,
        a.configureMessage = b,
        a.configureError = !0
    }));
    for (var m in l) {
        var n = !1
          , o = !1
          , p = !1
          , q = l[m];
        angular.equals(q.property, "wildfly") && (n = !0,
        o = !0,
        p = !0),
        a.vManageAdd || (p = f[q.property],
        angular.equals(p.status, "disabled") ? p = !1 : (o = !0,
        p = !0));
        var r = {
            displayName: q.title,
            value: p,
            disabled: n,
            isCheckedInitially: o,
            property: q.property
        };
        a.selectServicesList.push(r)
    }
    a.cancel = function() {
        c.cancel()
    }
    ,
    a.addvManageIPAddress = function() {
        c.hide();
        c.show({
            template: '<div class="modal-body"><div class="cluster_confirm_box"><p class="warning"><span class="device-warning"></span><span class="warning-message ng-binding">Adding new vManage will reboot and clear all information on the selected vManage.<br><br>Are you sure you want to add vManage({{::vManageIP}})?</span> </p><div class="clearFloat"></div></div></div><div class="modal-footer"><vip-button button-title="OK" button-size="small" button-color="blue" ng-click="ok()" class="buttonMargin" id="{{ ::stateString }}add_vmanage_modal"></vip-button><vip-button button-type="button" button-title="Cancel" button-size="small" button-color="white" ng-click="cancel()" class="buttonMargin" id="{{ ::stateString }}cancel_vmanage_modal"></vip-button></div>',
            controller: ["$scope", "$mdDialog", "ipAddress", function(a, b, c) {
                a.vManageIP = c,
                a.cancel = function() {
                    b.cancel()
                }
                ,
                a.ok = function() {
                    b.hide()
                }
            }
            ],
            resolve: {
                ipAddress: function() {
                    return a.vManageObj.deviceIP
                }
            }
        }).then(function() {
            var b = {};
            for (var c in a.selectServicesList)
                b[a.selectServicesList[c].property] = {
                    server: a.selectServicesList[c].value
                };
            var d = {
                deviceIP: a.vManageObj.deviceIP,
                username: a.vManageObj.username,
                password: a.vManageObj.password,
                genCSR: !1,
                services: b
            };
            angular.isDefined(i) && i(d)
        }, function() {
            d.info("Modal dismissed at: " + new Date)
        })
    }
    ,
    a.updatevManageIPAddress = function() {
        c.hide();
        c.show({
            template: '<div class="modal-body"><div class="cluster_confirm_box"><p class="warning"><span class="device-warning"></span><span class="warning-message ng-binding">Inorder to apply these changes the device will need to be rebooted.<br><br>Do you want to make these changes?</span> </p><div class="clearFloat"></div></div></div><div class="modal-footer"><vip-button button-title="OK" button-size="small" button-color="blue" ng-click="ok()" class="buttonMargin" id="{{ ::stateString }}edit_vmanage_modal"></vip-button><vip-button button-type="button" button-title="Cancel" button-size="small" button-color="white" ng-click="cancel()" class="buttonMargin" id="{{ ::stateString }}cancel_vmanage_modal"></vip-button></div>',
            controller: ["$scope", "$mdDialog", "ipAddress", function(a, b, c) {
                a.vManageIP = c,
                a.cancel = function() {
                    b.cancel()
                }
                ,
                a.ok = function() {
                    b.hide()
                }
            }
            ],
            resolve: {
                ipAddress: function() {
                    return a.vManageObj.deviceIP
                }
            }
        }).then(function() {
            var b = {};
            for (var c in a.selectServicesList)
                b[a.selectServicesList[c].property] = {
                    server: a.selectServicesList[c].value
                };
            var d = {
                vmanageID: a.vManageObj.vmanageID,
                deviceIP: a.vManageObj.deviceIP,
                username: a.vManageObj.username,
                password: a.vManageObj.password,
                services: b
            };
            angular.isDefined(i) && i(d)
        }, function() {
            d.info("Modal dismissed at: " + new Date)
        })
    }
}
function AttachMasterTemplateModalInstanceCtrl(a, b, c, d, e, f, g, h, i) {
    a.stateString = c.getStateString(a.$parent.$state),
    a.postCall = {
        InProgress: !1
    },
    a.template = {
        templateId: f.templateId,
        deviceIds: []
    },
    g.setOptions({
        labels: {
            heading: "Attach device from the list below",
            available: "Available Devices",
            selected: "Selected Devices"
        },
        toolTip: {
            enabled: !1,
            templateCache: ""
        },
        columns: [{
            property: "host-name",
            display: "Name"
        }, {
            property: "local-system-ip",
            display: "Device IP"
        }],
        orderBy: "host-name",
        uuid: "uuid",
        groupColumn: "device-groups",
        enableGroupFilter: !0,
        showErrorSection: !1,
        errorMessage: {}
    }),
    g.setAvailableUrl("/dataservice/template/device/config/available/" + a.template.templateId),
    a.multiSelectOpts = g.getOptions(),
    a.attach = function(c) {
        if (!g.validateRequiredFields(a.attachMasterTemplate, "numSelected") && !a.attachMasterTemplate.$valid)
            return !1;
        var e = {};
        e.templateId = c.templateId,
        e.deviceIds = _.pluck(g.getSelectedItems(), "uuid"),
        e.isEdited = !1,
        e.isMasterEdited = !1,
        a.postCall.InProgress = !0,
        d.generateInput(e).then(function(c) {
            a.postCall.InProgress = !1,
            c.selectedTemplate = f,
            c.templatePersonality = f.deviceType,
            c.selectedDevices = _.pluck(c.data, "csv-deviceId"),
            g.reset(),
            b.hide(c)
        }, function(b) {
            a.postCall.InProgress = !1,
            g.getOptions().showErrorSection = !0,
            g.getOptions().errorMessage = b
        })
    }
    ,
    a.cancel = function() {
        g.reset(),
        b.cancel("cancel")
    }
}
function auditLogDetailsController(a, b, c, d, e, f, g) {
    var h = "";
    g.auditdetails && g.auditdetails.length > 0 ? angular.forEach(g.auditdetails, function(a) {
        h += a + "\n"
    }) : h = "No details available",
    a.details = h,
    a.cancel = function() {
        f.cancel()
    }
}
function changeOrgName(a, b, c, d) {
    a.stateString = c.getStateString(b),
    a.ok = function() {
        d.hide(a.orgName.password)
    }
    ,
    a.cancel = function() {
        d.cancel()
    }
}
function ChangePasswordController(a, b, c, d, e) {
    a.cancel = function() {
        e.cancel()
    }
    ,
    a.user.oldpassword = "",
    a.user.newpassword = "",
    a.user.confirmpassword = "",
    a.showErrorSection = !1,
    a.errorMessage = {},
    a.change = function() {
        var b = {
            oldpassword: a.user.oldpassword,
            newpassword: a.user.newpassword
        };
        c.changePassword(b).then(function(b) {
            a.serverCall = !1,
            a.cancel()
        }, function(b, c, d, e) {
            a.showErrorSection = !0,
            a.serverCall = !1,
            a.errorMessage = b
        })
    }
}
function CopyGeneralTemplateModalInstanceCtrl(a, b, c, d, e, f) {
    a.stateString = e.getStateString(a.$parent.$state),
    a.postCall = {
        InProgress: !1
    },
    a.template = _.clone(c),
    a.showErrorSection = !1,
    a.ok = function() {
        var c = this;
        c.template.factoryDefault = !1,
        a.postCall.InProgress = !0;
        var e = {};
        e.templateName = c.template.templateName,
        e.templateDescription = c.template.templateDescription,
        e.templateType = c.template.templateType,
        e.deviceType = c.template.deviceType,
        e.factoryDefault = c.template.factoryDefault,
        e.templateMinVersion = c.template.templateMinVersion,
        e.templateDefinition = JSON.parse(c.template.templateDefinition),
        e.deviceModels = c.template.deviceModels,
        f.createGeneralTemplate(e).then(function(a) {
            d.refresh(),
            b.hide()
        }, function(b) {
            a.postCall.InProgress = !1,
            a.showErrorSection = !0,
            a.errorMessage = b
        })
    }
    ,
    a.cancel = function() {
        b.cancel("cancel")
    }
}
function CopyMasterTemplateModalInstanceCtrl(a, b, c, d, e, f) {
    a.stateString = e.getStateString(a.$parent.$state),
    a.postCall = {
        InProgress: !1
    },
    a.template = {},
    f.getDeviceTemplate(c.templateId).then(function(b) {
        angular.extend(a.template, b)
    }, function(b) {
        a.showErrorSection = !0,
        a.errorMessage = b
    }),
    a.showErrorSection = !1,
    a.ok = function() {
        if (this.template.factoryDefault = !1,
        angular.equals(this.template.configType, "template")) {
            var c = {
                templateName: this.template.templateName,
                templateDescription: this.template.templateDescription,
                deviceType: this.template.deviceType,
                configType: this.template.configType,
                factoryDefault: !1,
                policyId: this.template.policyId,
                featureTemplateUidRange: this.template.featureTemplateUidRange,
                generalTemplates: this.template.generalTemplates
            };
            a.postCall.InProgress = !0,
            f.createDeviceFeatureTemplate(c).then(function(a) {
                d.refresh(),
                b.hide()
            }, function(b) {
                a.postCall.InProgress = !1,
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        } else {
            var e = {
                templateName: this.template.templateName,
                templateDescription: this.template.templateDescription,
                deviceType: this.template.deviceType,
                configType: this.template.configType,
                factoryDefault: !1,
                templateConfiguration: this.template.templateConfiguration
            };
            a.postCall.InProgress = !0,
            f.createDeviceCLITemplate(e).then(function(a) {
                d.refresh(),
                b.hide()
            }, function(b) {
                a.postCall.InProgress = !1,
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        }
    }
    ,
    a.cancel = function() {
        b.cancel("cancel")
    }
}
function CreateNewVariableModalInstanceCtrl(a, b, c, d) {
    a.replaceText = d,
    a.templateVariable = {
        value: ""
    },
    a.replace = function(a) {
        var c = "{{" + a + "}}";
        b.hide(c)
    }
    ,
    a.cancel = function() {
        b.cancel("cancel")
    }
}
function CreateVariableModalInstanceCtrl(a, b, c, d) {
    function e() {
        var a, b, c, e = d, f = {
            start: 0,
            end: e.value.length,
            length: 0
        };
        if (e.selectionStart >= 0)
            return f.start = e.selectionStart,
            f.end = e.selectionEnd,
            f.length = f.end - f.start,
            e.value.substr(f.start, f.length);
        if (e.ownerDocument.selection) {
            if (a = e.ownerDocument.selection.createRange(),
            !a)
                return f;
            b = e.createTextRange(),
            c = b.duplicate(),
            b.moveToBookmark(a.getBookmark()),
            c.setEndPoint("EndToStart", b),
            f.start = c.text.length,
            f.end = c.text.length + a.text.length,
            f.text = a.text,
            f.length = a.text.length
        }
        return f.text
    }
    a.replaceText = e(),
    a.templateVariable = {
        value: ""
    },
    a.replace = function(a) {
        var c, e, f, g, h, i, j = d, k = "{{" + a + "}}";
        j.selectionStart >= 0 ? (c = j.selectionStart,
        e = j.selectionEnd,
        g = j.scrollTop,
        h = j.scrollLeft,
        j.value = j.value.substr(0, c) + k + j.value.substr(e),
        f = c + k.length,
        j.selectionStart = f,
        j.selectionEnd = f,
        j.scrollTop = g,
        j.scrollLeft = h) : j.ownerDocument.selection ? (i = j.ownerDocument.selection.createRange(),
        i.text = k,
        i.move("character", 0),
        i.select()) : (j.value += k,
        j.scrollTop = 1e5),
        b.hide(j)
    }
    ,
    a.cancel = function() {
        b.cancel("cancel")
    }
}
function DeactivateVSmartPolicyModalInstanceCtrl(a, b, c, d, e, f) {
    a.policy = c ? _.clone(c) : {},
    a.postCall = {
        InProgress: !1
    },
    a.deviceFetchCall = {
        InProgress: !0
    },
    a.showErrorSection = !1,
    a.errorMessage = {},
    a.onlineDeviceList = [],
    a.offlineDeviceList = [],
    e.getVSmartConnStatus().then(function(b) {
        angular.forEach(b.data, function(b) {
            b.isOnline ? a.onlineDeviceList.push(b) : a.offlineDeviceList.push(b)
        }),
        a.deviceFetchCall.InProgress = !1
    }, function(b) {
        a.deviceFetchCall.InProgress = !1,
        a.showErrorSection = !0,
        a.errorMessage = b
    }),
    a.deactivate = function(c) {
        a.postCall.InProgress = !0,
        e.deactivateVSmartPolicy(c.policyId).then(function(a) {
            b.hide(a),
            f.success(c.policyName + " policy successfully deactivated.", 2e3)
        }, function(b) {
            a.postCall.InProgress = !1,
            a.showErrorSection = !0,
            a.errorMessage = b
        })
    }
    ,
    a.cancel = function() {
        b.cancel("cancel")
    }
}
function DeleteStaleDevice(a, b, c, d, e, f) {
    a.stateString = c.getStateString(b),
    a.systemIp = f.entity["system-ip"],
    a.delete = function() {
        e.removeDevice(a.systemIp).then(function() {
            d.hide()
        }, function() {})
    }
    ,
    a.cancel = function() {
        d.cancel()
    }
}
function DeleteUserGroupModalController(a, b, c, d, e, f, g, h) {
    a.stateString = e.getStateString(c),
    a.selectedUserGroup = h,
    a.showErrorSection = !1,
    a.postCall = {
        InProgress: !1
    },
    a.delete = function() {
        a.postCall.InProgress = !0,
        g.deleteUserGroup(a.selectedUserGroup.name).then(function(c) {
            a.postCall.InProgress = !1,
            b.hide({
                action: "delete"
            }),
            f.success("User Group successfully removed.", 2e3)
        }, function(b) {
            a.postCall.InProgress = !1,
            a.showErrorSection = !0,
            a.errorMessage = b
        })
    }
    ,
    a.cancel = function() {
        b.cancel()
    }
}
function DetachMasterTemplateModalInstanceCtrl(a, b, c, d, e, f, g, h, i, j) {
    var k;
    a.stateString = e.getStateString(a.$parent.$state),
    a.postCall = {
        InProgress: !1
    },
    a.confirmChangeMode = !1,
    a.template = {
        templateId: i.templateId,
        deviceIds: []
    },
    k = i.deviceType.toLowerCase().contains("vedge") ? "vedge" : i.deviceType.toLowerCase().contains("vmanage") ? "vmanage" : "controller",
    g.setOptions({
        labels: {
            heading: "Detach device from the list below",
            available: "Available Devices",
            selected: "Selected Devices"
        },
        toolTip: {
            enabled: !0,
            templateCache: "'detachToolTipTemplate'"
        },
        columns: [{
            property: "cloudxStatus",
            display: " "
        }, {
            property: "host-name",
            display: "Name"
        }, {
            property: "local-system-ip",
            display: "Device IP"
        }, {
            property: "deviceIP",
            display: ""
        }, {
            property: "toolTipData",
            display: ""
        }, {
            property: "configCloudxMode",
            display: ""
        }],
        orderBy: "host-name",
        uuid: "uuid",
        groupColumn: "device-groups",
        enableGroupFilter: !0,
        showErrorSection: !1,
        errorMessage: {},
        statusColumn: !0
    }),
    h.getAvailableDevices(i.templateId).then(function(b) {
        a.serverCall = !1;
        var c = [];
        angular.forEach(b.data, function(a) {
            c.push({
                cloudxStatus: "none" !== a.configCloudxMode ? "error" : null,
                "host-name": a["host-name"],
                deviceIP: a.deviceIP,
                toolTipData: "none" !== a.configCloudxMode ? "CloudExpress is enabled on this device. If you detach the device, it will not be updated with new CloudExpress changes" : "",
                uuid: a.uuid,
                "local-system-ip": a["local-system-ip"]
            })
        }),
        g.setMultiSelectData(c)
    }, function(b) {
        a.serverCall = !1,
        g.getOptions().showErrorSection = !0,
        g.getOptions().errorMessage = b
    }),
    a.multiSelectOpts = g.getOptions(),
    a.detach = function(b) {
        return !(!g.validateRequiredFields(a.detachMasterTemplate, "numSelected") && !a.detachMasterTemplate.$valid) && (_.find(g.getSelectedItems(), function(a) {
            return "error" === a.cloudxStatus
        }) && (a.confirmChangeMode = !0),
        void (a.confirmChangeMode || a.proceedDetach()))
    }
    ,
    a.proceedDetach = function() {
        var c = {
            deviceType: k,
            devices: []
        };
        angular.forEach(g.getSelectedItems(), function(a) {
            c.devices.push({
                deviceId: a.uuid,
                deviceIP: a.deviceIP
            })
        }),
        a.postCall.InProgress = !0,
        h.postCliDevices(c).then(function(c) {
            a.postCall.InProgress = !1,
            g.reset(),
            d.hide(),
            b.go("app.device.status", {
                activity: j.getStatusAction("DEVICE_CONFIG_MODE_CLI").endpoint,
                pid: c ? c.id : ""
            })
        }, function(b) {
            a.postCall.InProgress = !1,
            a.confirmChangeMode && (a.confirmChangeMode = !1),
            g.getOptions().showErrorSection = !0,
            g.getOptions().errorMessage = b
        })
    }
    ,
    a.cancel = function() {
        a.confirmChangeMode = !1,
        g.reset(),
        d.cancel("cancel")
    }
}
function DetachVEdgePolicyModalInstanceCtrl(a, b, c, d, e, f, g, h, i) {
    a.stateString = d.getStateString(a.$parent.$state),
    a.postCall = {
        InProgress: !1
    },
    a.policy = {
        policyId: g.policyId,
        deviceIds: []
    },
    i.setOptions({
        labels: {
            heading: "Attach device from the list below",
            available: "Available Devices",
            selected: "Selected Devices"
        },
        columns: [{
            property: "host-name",
            display: "Name"
        }, {
            property: "local-system-ip",
            display: "Device IP"
        }],
        orderBy: "host-name",
        uuid: "uuid",
        showErrorSection: !1,
        errorMessage: {}
    }),
    i.setAvailableUrl("/dataservice/template/policy/vedge/devices/" + g.policyId),
    a.multiSelectOpts = i.getOptions(),
    a.detach = function(b) {
        if (!i.validateRequiredFields(a.detachVEdgePolicy, "numSelected") && !a.detachVEdgePolicy.$valid)
            return !1;
        var d = _.pluck(i.getSelectedItems(), "deviceId")
          , f = {};
        f.action = "detachpolicy",
        f.input = {
            policyId: b.policyId
        },
        f.devices = [],
        angular.forEach(d, function(a) {
            f.devices.push({
                deviceIP: a
            })
        }),
        a.postCall.InProgress = !0,
        e.detachVEdgePolicy(f).then(function(b) {
            a.postCall.InProgress = !1,
            i.reset(),
            c.close()
        }, function(b) {
            a.postCall.InProgress = !1,
            i.getOptions().showErrorSection = !0,
            i.getOptions().errorMessage = b
        })
    }
    ,
    a.cancel = function() {
        i.reset(),
        c.dismiss("cancel")
    }
}
function DeviceEventDetailsController(a, b, c) {
    var d = []
      , e = c.details.split(";");
    angular.forEach(e, function(a) {
        var b = {}
          , c = a.split("=");
        b.key = c[0].replace("-", " "),
        b.value = c[1],
        d.push(b)
    }),
    a.detailsObjArr = d,
    a.cancel = function() {
        b.hide()
    }
}
function EditDeviceConfigModalInstanceCtrl(a, b, c, d, e, f, g) {
    var h, i = _.omit(angular.copy(f), ["csv-status"]);
    a.stateString = "config_template_device_",
    a.selectedRow = angular.copy(f),
    a.formFields = [],
    a.papAndChapPasswordFieldExists = c.isPapAndChapPasswordFieldsExists(),
    a.papAndChapPasswordFieldType = c.getPapAndChapPasswordFieldType(),
    a.papAndChap = {
        hidePassword: "password" === a.papAndChapPasswordFieldType
    };
    for (var j in i)
        h = _.find(c.getTemplateDeviceInputColumns(a.selectedRow["csv-templateId"]), function(a) {
            return j === a.property
        }),
        h && ("number" === h.dataType.toLowerCase() && (a.selectedRow[j] = parseFloat(i[j])),
        h.value = i[j],
        a.formFields.push(h));
    a.checkForPapAndChapField = function(b) {
        return _.includes(b, "interface/ppp/authentication/pap/password") || _.includes(b, "interface/ppp/authentication/chap/password") ? a.papAndChapPasswordFieldType : "password"
    }
    ,
    a.changeChapAndPapDataType = function() {
        "password" === a.papAndChapPasswordFieldType ? (c.setPapAndChapPasswordFieldType("text"),
        a.papAndChapPasswordFieldType = c.getPapAndChapPasswordFieldType()) : (c.setPapAndChapPasswordFieldType("password"),
        a.papAndChapPasswordFieldType = c.getPapAndChapPasswordFieldType())
    }
    ,
    a.showErrorSection = !1,
    a.errorMessage = {},
    a.edit = function() {
        return a.editDeviceInputTemplate.$valid ? (angular.forEach(a.formFields, function(b) {
            "number" === b.dataType && (isNaN(a.selectedRow[b.property]) || "" === a.selectedRow[b.property]) && a.editDeviceInputTemplate[b.property].$setValidity("required", !1)
        }),
        a.editDeviceInputTemplate.$valid ? (a.selectedRow["csv-status"] = "complete",
        angular.extend(f, a.selectedRow),
        g.taggedSearchObject.updateSearchCacheObject(f, "csv-deviceId"),
        void b.hide()) : (a.showErrorSection = !1,
        void (a.errorMessage = {
            error: {
                message: "Please provide all required fields."
            }
        }))) : (a.showErrorSection = !1,
        void (a.errorMessage = {
            error: {
                message: "Please provide all required fields."
            }
        }))
    }
    ,
    a.cancel = function() {
        b.cancel("cancel")
    }
}
function eventDetailsController(a, b, c, d, e, f, g) {
    var h = []
      , i = g.details.split(";");
    angular.forEach(i, function(a) {
        var b = {}
          , c = a.split("=");
        b.key = c[0].replace("-", " "),
        b.value = c[1],
        h.push(b)
    }),
    a.detailsObjArr = h,
    a.cancel = function() {
        f.cancel()
    }
}
function listDevicesWithNoGeosController(a, b, c, d, e, f) {
    a.stateString = f.getStateString(c);
    var g = 0
      , h = 75
      , i = 40
      , j = 35
      , k = 40
      , l = 70;
    g = i + j + k + l + h,
    a.tableObj = new e({
        columnResizing: !0,
        tableHeightOffset: g
    }),
    a.tableObj.setToolbar({
        addRow: !1,
        search: !0,
        rowCount: !0,
        refresh: !0
    }),
    a.closeModal = function() {
        b.hide()
    }
}
function RediscoverNetworkConfirmationController(a, b, c, d, e, f, g, h, i, j) {
    a.stateString = e.getStateString(c),
    a.showErrorSection = !1,
    a.errorMessage = "",
    a.ok = function() {
        b.hide();
        var a = [];
        angular.forEach(i, function(b) {
            var c = {
                deviceId: b.uuid,
                deviceIP: b.deviceId
            };
            a.push(c)
        }),
        j.rediscoverDevice(a).then(function(a) {}, function(a, b, c, d) {
            f.confirm(a)
        })
    }
    ,
    a.cancel = function() {
        b.cancel()
    }
}
function removevManageClusterController(a, b, c, d, e, f, g, h, i) {
    a.stateString = h.getStateString(b) + "removeVmanage_",
    a.showError = !1,
    a.errorMessage = {
        error: {
            message: "",
            details: ""
        }
    },
    a.vManageObj = {
        username: "",
        password: "",
        vmanageID: f.vmanageID,
        deviceIP: f.deviceIP,
        offline: !1
    },
    a.deviceIp = f.deviceIP,
    a.cancel = function() {
        c.cancel()
    }
    ,
    a.removevManage = function() {
        a.serverCall = !0,
        e.removevManage(a.vManageObj).then(function(b) {
            c.hide(),
            angular.isDefined(g) && g(b),
            a.serverCall = !1
        }, function(b) {
            a.serverCall = !1,
            angular.equals(b.error.code, "VCC0018") ? (c.hide(),
            k(a.vManageObj, b)) : angular.equals(b.error.code, "VCC0020") ? (c.hide(),
            j(b)) : (a.showError = !0,
            a.errorMessage = b)
        })
    }
    ;
    var j = function(a) {
        c.show({
            template: '<div class="modal-body"><div class="cluster_confirm_box"><p class="warning"><span class="device-warning"></span><span class="warning-message ng-binding">{{::content}}</span> </p><div class="clearFloat"></div></div></div><div class="modal-footer"><vip-button button-title="OK" button-size="small" button-color="blue" ng-click="ok()" class="buttonMargin" id="{{ ::stateString }}process_vmanage_modal"></vip-button>',
            controller: ["$scope", "$mdDialog", function(b, c) {
                b.content = a.error.message + " : " + a.error.details,
                b.cancel = function() {
                    c.cancel()
                }
                ,
                b.ok = function() {
                    c.hide()
                }
            }
            ]
        })
    }
      , k = function(b, f) {
        b.offline = !0;
        c.show({
            template: '<div class="modal-body"><div class="cluster_confirm_box"><p class="warning"><span class="device-warning"></span><span class="warning-message ng-binding">{{::removevManageContent}}</span> </p><div class="clearFloat"></div></div></div><div class="modal-footer"><vip-button button-title="OK" button-size="small" button-color="blue" ng-click="ok()" class="buttonMargin" id="{{ ::stateString }}remove_vmanage_offline"></vip-button><vip-button button-type="button" button-title="Cancel" button-size="small" button-color="white" ng-click="cancel()" class="buttonMargin" id="{{ ::stateString }}cancel_remove_vmanage_offline"></vip-button></div>',
            controller: ["$scope", "$mdDialog", function(a, b) {
                a.removevManageContent = f.error.message + " : " + f.error.details,
                a.cancel = function() {
                    b.cancel()
                }
                ,
                a.ok = function() {
                    b.hide()
                }
            }
            ]
        }).then(function() {
            e.removevManage(a.vManageObj).then(function(a) {
                angular.isDefined(g) && g(a)
            }, function(a) {
                angular.equals(a.error.code, "VCC0020") ? j(a) : i.error(a.error.message + " : " + a.error.details)
            })
        }, function() {
            d.info("Modal dismissed at: " + new Date)
        })
    }
}
function showCommandsFilterMessage(a, b) {
    a.showFilter = function() {
        b.hide()
    }
    ,
    a.noFilter = function() {
        b.cancel()
    }
}
function TableCsvUploadModalController(a, b, c, d, e, f, g, h, i) {
    a.progressBar = {},
    a.progressBar.currentProgress = 0,
    a.showErrorSection = !1,
    a.csvFileSelected = !1,
    a.postCall = {
        InProgress: !1
    },
    a.upload = function() {
        if (!c.checkNestedProperty(h.data, "0"))
            return a.showErrorSection = !0,
            a.errorMessage = {
                error: {
                    message: "Found no device.",
                    details: "Found no devices to upload."
                }
            },
            !1;
        var b = 108e5
          , g = h.data[0]["csv-templateId"];
        if (a.csvTableFile) {
            a.csvFileSelected = !0;
            var j = {
                templateId: g,
                devices: _.pluck(f.getTemplateDeviceInputData(g), "csv-deviceId"),
                isEdited: f.isEdited(g),
                isMasterEdited: !!f.isMasterEdited(g)
            };
            a.postCall.InProgress = !0,
            e.uploadConfigCsv(a.csvTableFile, j, a.progressBar, b).then(function(a) {
                angular.forEach(a.data, function(a) {
                    a["csv-templateId"] = g
                });
                var b = f.getTemplateDeviceInputColumns(g);
                angular.forEach(a.data, function(a) {
                    for (var c in a) {
                        var d = _.find(b, function(a) {
                            return angular.equals(a.property, c)
                        });
                        d && "enum" === d.dataType && "list" === d.objectType && (a["vipEnumListClone_" + c] = a[c].split(",")),
                        d && (angular.equals(d.dataType, "boolean") || angular.equals(d.dataType, "boolean-empty")) && ([!0, "true", "True", "TRUE"].indexOf(a[c]) > -1 ? a[c] = !0 : a[c] = !1)
                    }
                }),
                h.taggedSearchObject.clearTagsCache(),
                h.taggedSearchObject.setSearchCache(a.data),
                h.setTableData(a.data),
                f.setTemplateDeviceInputData(g, h.data),
                d.hide(),
                i.success("File uploaded successfully", 2e3)
            }, function(b) {
                a.postCall.InProgress = !1,
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        } else
            a.showErrorSection = !0,
            a.errorMessage = c.createErrorObject("File Missing", "Please choose a file to upload")
    }
    ,
    a.cancel = function() {
        d.cancel()
    }
}
function ViewAttachedDevicesModalInstanceCtrl(a, b, c, d, e, f, g, h, i) {
    a.stateString = d.getStateString(a.$parent.$state),
    a.showErrorSection = !1,
    a.errorMessage = {},
    a.attachedDevicesTable = new i({
        columnResizing: !0,
        enableSorting: !0,
        minRowsToShow: 10,
        dataUid: "deviceIp",
        tableName: "attachedDevicesTable"
    }),
    a.attachedDevicesTable.setDataUrl(h.DEVICE_TEMPLATE_DEVICES_ATTACHED + g.templateId),
    a.close = function() {
        c.cancel("cancel")
    }
}
function ViewAttachedDeviceTemplatesModalInstanceCtrl(a, b, c, d, e, f, g, h, i) {
    a.stateString = d.getStateString(a.$parent.$state),
    a.showErrorSection = !1,
    a.errorMessage = {},
    a.attachedDeviceTemplatesTable = new i({
        columnResizing: !0,
        enableSorting: !0,
        minRowsToShow: 10,
        dataUid: "templateName",
        tableName: "attachedDeviceTemplatesTable",
        componentId: "attachedDeviceTemplatesTable"
    }),
    a.attachedDeviceTemplatesTable.setDataUrl(h.FEATURE_TEMPLATE_DEVICE_TEMPLATES_ATTACHED + g.templateId),
    a.close = function() {
        c.cancel("cancel")
    }
}
function vipModalError() {
    return {
        restrict: "AE",
        templateUrl: "app/common/modalError-partial.html",
        scope: {
            message: "="
        },
        link: function(a) {
            a.hasMultipleErrors = !1,
            angular.isArray(a.message) && (a.hasMultipleErrors = !0)
        }
    }
}
function restService(a, b, c, d, e, f, g, h) {
    function i(a) {
        return l.endsWith("/") || (l += "/"),
        a.startsWith("/") && (a = a.substring(1, a.length)),
        l + a
    }
    function j() {
        a.logoutUserInitialized || location.reload(!0)
    }
    function k(a, b, c, f) {
        var h, i, k = e.defer(), l = e.defer(), o = !1;
        return g.checkNestedProperty(f, "timeout") ? (i = f.timeout,
        delete f.timeout) : i = 6e4,
        setTimeout(function() {
            o = !0,
            k.resolve()
        }, i),
        n = {
            method: a,
            url: b,
            headers: {
                "Content-Type": "application/json"
            },
            data: c,
            timeout: k.promise
        },
        g.checkNestedProperty(f, "VSessionId") ? n.headers.VSessionId = f.VSessionId : angular.isDefined(m) && (n.headers.VSessionId = m),
        "GET" === a && g.checkNestedProperty(f, "params") && (n.params = f.params),
        h = d(n),
        h.success(function(a, b, c, d) {
            "text/html" === c()["content-type"] && a.search("j_security_check") > 0 ? j() : (angular.equals(typeof a, "string") || (a ? a.httpResponseHeader = c() : (a = {},
            a.httpResponseHeader = c())),
            l.resolve(a))
        }).error(function(a, b, c, d) {
            o ? l.reject({
                status: 499,
                error: {
                    message: "Request timed out",
                    details: "Client timed out waiting for request taking longer than " + i / 1e3 + " seconds."
                }
            }) : (0 === b && (j(),
            l.reject({
                status: 0,
                error: {
                    message: "Server Unreachable",
                    details: "The server is currently unavailable."
                }
            })),
            angular.isObject(a) || (a = {}),
            (403 === b || angular.isUndefined(b)) && (a.error = {
                message: "Forbidden Request",
                details: "User is not permitted to perform the requested operation."
            }),
            a.status = b,
            a.headers = c,
            a.config = d,
            l.reject(a))
        }),
        l.promise
    }
    var l = b.baseURL
      , m = void 0
      , n = {};
    return {
        get: function(a, b) {
            return k("GET", i(a), {}, b)
        },
        post: function(a, b, c) {
            return k("POST", i(a), b, c)
        },
        put: function(a, b, c) {
            return k("PUT", i(a), b, c)
        },
        delete: function(a, b) {
            return k("DELETE", i(a), {}, b)
        },
        deletePostBody: function(a, b, c) {
            return g.isUndefinedOrEmpty(b) ? k("DELETE", i(a), {}, c) : k("DELETE", i(a), b, c)
        },
        uploadFiles: function(a, b, c, d, g, h) {
            var k, l = e.defer(), n = i(a), o = !1;
            angular.isDefined(d) && (k = e.defer(),
            setTimeout(function() {
                o = !0,
                k.resolve()
            }, d));
            var p = {
                url: n,
                data: h,
                file: b,
                timeout: d
            };
            return g ? angular.isDefined(g.VSessionId) && (p.headers = {},
            p.headers.VSessionId = g.VSessionId) : angular.isDefined(m) && (p.headers = {},
            p.headers.VSessionId = m),
            f.upload(p).progress(function(a) {
                c.currentProgress = parseInt(100 * a.loaded / a.total)
            }).success(function(a, b, d, e) {
                c.currentProgress = parseInt(100),
                l.resolve(a)
            }).error(function(a, b, c, e) {
                o ? l.reject({
                    status: 499,
                    error: {
                        message: "Request timed out",
                        details: "Client timed out waiting for request taking longer than " + d / 1e3 + " seconds."
                    }
                }) : 0 === b ? (j(),
                l.reject({
                    status: 0,
                    error: {
                        message: "Server Unreachable",
                        details: "The server is currently unavailable."
                    }
                })) : (angular.isObject(a) || (a = {}),
                a.status = b,
                a.headers = c,
                a.config = e,
                l.reject(a))
            }),
            l.promise
        },
        downloadFile: function(a, b, c) {
            var f, h = e.defer(), j = i(a), k = !1;
            angular.isDefined(b) && (f = e.defer(),
            setTimeout(function() {
                k = !0,
                f.resolve()
            }, b));
            var l = {
                method: "GET",
                url: j,
                responseType: "blob",
                headers: {
                    "Content-Type": "application/json"
                }
            };
            g.checkNestedProperty(c, "VSessionId") ? l.headers.VSessionId = c.VSessionId : angular.isDefined(m) && (l.headers.VSessionId = m);
            var n = d(l);
            return n.success(function(b, c, d, e) {
                var f = d()
                  , g = f["content-disposition"].split(";")[1].split("=")[1].replace(/"/g, "")
                  , i = new Blob([b],{
                    type: f["Content-Type"]
                });
                saveAs(i, g),
                console.log("Complete downloading file : " + a),
                h.resolve()
            }).error(function() {
                console.log("Unable to download log file"),
                h.reject()
            }),
            h.promise
        },
        getTableData: function(a, b) {
            return this.get(a, b)
        },
        affixStatsAggregationHistogramUrl: function(a, b) {
            function c(a, b) {
                return !_.isNaN(parseInt(a)) && (parseInt(a) <= 1 ? (b.type = "minute",
                !0) : parseInt(a) <= 3 ? (b.type = "minute",
                b.interval = 5,
                !0) : parseInt(a) <= 6 ? (b.type = "minute",
                b.interval = 10,
                !0) : parseInt(a) <= 24 ? (b.type = "minute",
                b.interval = 30,
                !0) : parseInt(a) <= 168 ? (b.type = "hour",
                b.interval = 6,
                !0) : parseInt(a) <= 720 ? (b.type = "hour",
                b.interval = 12,
                !0) : parseInt(a) <= 2208 ? (b.type = "day",
                b.interval = 1,
                !0) : parseInt(a) <= 4416 ? (b.type = "day",
                b.interval = 3,
                !0) : parseInt(a) <= 8760 && (b.type = "week",
                b.interval = 1,
                !0))
            }
            var d = {
                property: "entry_time",
                type: "minute",
                interval: 1,
                order: "asc"
            };
            if (g.checkNestedProperty(a, "aggregation") || b) {
                var e = _.find(a.query.rules, function(a) {
                    return angular.equals(a.field, "entry_time") && angular.equals(a.type, "date")
                });
                if (e)
                    if (angular.isDefined(e.operator) && "between" == e.operator) {
                        var f, h, i;
                        if (f = e.value[0].split(" UTC")[0],
                        h = e.value[1].split(" UTC")[0],
                        i = moment.duration(moment(h).diff(moment(f))),
                        !angular.isDefined(i) || !c(i.asHours(), d))
                            return
                    } else if (!c(e.value[0], d))
                        return;
                return g.checkNestedProperty(a, "aggregation") ? (a.aggregation.histogram = d,
                a) : b ? (b.histogram = d,
                a.aggregation = b,
                a) : void 0
            }
        },
        returnPromiseHTTPGet: function(a) {
            return a = i(a),
            d.get(a)
        },
        setVSessionId: function(a) {
            m = a
        },
        getVSessionId: function() {
            return m
        },
        removeVSessionIdProperty: function() {
            angular.isDefined(n.headers.VSessionId) && delete n.headers.VSessionId
        }
    }
}
function vipNotifications(a, b, c, d) {
    var e = '<div class="notification-wrapper"><div class="notification notification-type-{{alert.type}}" id="notification-{{alert.type}}" ng-repeat="alert in queue"><div class="notification-message" id="notification-message"><p class="notification-text" data-ng-bind-html="alert.content"></p></div><div class="notification-close" id="notification-close"><i ng-if="alert.showClose" class="material-icons md-16 icon-bold" ng-click="clearNotification(alert)">cancel</i></div><div class="clearFloat"></div></div></div>';
    return {
        restrict: "A",
        scope: {},
        template: e,
        link: function(a, b, c) {
            var d = c.vipNotifications;
            d = d.split(" "),
            b.addClass("notification-container");
            for (var e = 0; e < d.length; e++)
                b.addClass(d[e])
        },
        controller: ["$scope", function(b) {
            b.notification = a,
            b.queue = a.getQueue(),
            b.clearNotification = function(a) {
                b.queue.splice(b.queue.indexOf(a), 1)
            }
        }
        ]
    }
}
function notification(a, b, c) {
    var d = []
      , e = {}
      , f = {}
      , g = {
        info: {
            type: "info",
            displayText: "Info",
            icon: "fa fa-info-circle"
        },
        warning: {
            type: "warning",
            displayText: "Warning",
            icon: "fa fa-exclamation-circle"
        },
        error: {
            type: "error",
            displayText: "Error",
            icon: "fa fa-minus-circle"
        },
        success: {
            type: "success",
            displayText: "Success",
            icon: "fa fa-check-circle"
        }
    }
      , h = function(a) {
        var c = b(function() {
            d.splice(d.indexOf(e), 1),
            b.cancel(c)
        }, a)
    };
    return {
        info: function(a, b, c) {
            return this.notify(g.info, a, b, c)
        },
        error: function(a, b, c) {
            return this.notify(g.error, a, b, c)
        },
        confirm: function(b, d, e, g, h) {
            var i = {}
              , j = c.checkNestedProperty(b, "error", "type") ? b.error.type : "error";
            i.type = j,
            i.errorDescription = c.checkNestedProperty(b, "error", "details") ? b.error.details : "Error details not available",
            i.errorMessage = c.checkNestedProperty(b, "error", "message") ? b.error.message : "Error message not available",
            i.buttonText = c.checkNestedProperty(b, "error", "buttonText") ? b.error.buttonText : "OK",
            f = a.show({
                templateUrl: "app/common/notification/confirmTemplate.html",
                controller: "confirmController",
                targetEvent: g,
                resolve: {
                    errorObject: function() {
                        return i
                    },
                    showCancelButton: function() {
                        return d
                    }
                }
            }),
            f.then(function() {
                angular.isDefined(e) && !_.isNull(e) && (angular.isDefined(h) ? e.apply(h) : e())
            }, function() {})
        },
        close: function() {
            f.cancel()
        },
        success: function(a, b, c) {
            return this.notify(g.success, a, b, c)
        },
        warning: function(a, b, c) {
            return this.notify(g.warning, a, b, c)
        },
        getQueue: function() {
            return d
        },
        notify: function(a, b, c, f) {
            return e = {
                type: a.type,
                icon: a.icon,
                title: a.displayText,
                content: b,
                showClose: !angular.isDefined(f) || f
            },
            "error" !== a.type && d.reset(),
            5 === d.length && d.pop(),
            d.push(e),
            void 0 !== c && h(c),
            e
        },
        clear: function() {
            d.reset()
        }
    }
}
function confirmController(a, b, c, d) {
    switch (a.errorDescription = c.errorDescription,
    a.errorMessage = c.errorMessage,
    a.errorType = c.type,
    a.showCancelButton = d,
    a.confirmButtonText = c.buttonText ? c.buttonText : "OK",
    c.type) {
    case "error":
        a.messageIcon = "error",
        a.messageClass = "icon-red";
        break;
    case "info":
        a.messageIcon = "info",
        a.messageClass = "blue";
        break;
    case "warning":
        a.messageIcon = "warning",
        a.messageClass = "icon-yellow";
        break;
    default:
        a.messageIcon = "error",
        a.messageClass = "icon-red"
    }
    a.ok = function() {
        b.hide()
    }
    ,
    a.cancel = function() {
        b.cancel()
    }
}
function vipPopOver() {
    return {
        restrict: "AE",
        templateUrl: "app/common/popover-partial.html",
        scope: {
            popoverPlacement: "@",
            popoverHtml: "@"
        }
    }
}
function vipRadioButton() {
    return {
        restrict: "AE",
        templateUrl: "app/common/radioButton-partial.html",
        scope: {
            buttonGrpName: "@",
            layoutClass: "@",
            idPrefix: "@",
            buttonChoices: "=",
            selected: "=",
            update: "&"
        }
    }
}
function vipRbac(a, b, c, d) {
    return {
        restrict: "A",
        controller: ["$scope", "$attrs", "$element", "rbac", function(a, b, c, e) {
            var f = b.vipRbac || b.allow;
            !d.isUndefinedOrEmpty(f) && angular.isString(f) && f.contains("{{") && (f = a.$eval(f.replace("{{", "").replace("::", "").replace("}}", "").trim()));
            var g = e.checkSidebarState();
            g && (angular.isDefined(b.allow) && angular.isDefined(f) && !e.allowAccess(f) ? c.remove() : angular.isDefined(b.readAccess) && !e.allowReadAccess(b.readAccess) && c.remove())
        }
        ]
    }
}
function rbac(a, b, c, d, e, f, g, h, i, j, k, l, m) {
    function n(a, b) {
        this.read = a || !1,
        this.write = b || !1
    }
    function o(a) {
        this.menu = a || [],
        this.isSidebarSet = !1
    }
    function p(a) {
        return _.findIndex(C, function(b) {
            return b.hasOwnProperty(a)
        })
    }
    function q(a) {
        var b, c, d, e = {};
        "admin" === a ? D = !0 : (a.contains("-read") && (b = a.split("-read").join(""),
        d = p(b),
        d > -1 ? (c = C[d],
        c[b].setRead(!0)) : (c = new n(!0),
        e[b] = c,
        C.push(e))),
        a.contains("-write") && (b = a.split("-write").join(""),
        d = p(b),
        d > -1 ? (c = C[d],
        c[b].setWrite(!0)) : (c = new n(!1,!0),
        e[b] = c,
        C.push(e))))
    }
    function r(a) {
        var b, c, d, e = {};
        a.contains("-read") && (b = a.split("-read").join(""),
        d = p(b),
        d > -1 ? (c = C[d],
        c[b].setRead(!0)) : (c = new n(!0),
        e[b] = c,
        C.push(e))),
        a.contains("license-write") && (b = a.split("-write").join(""),
        d = p(b),
        d > -1 ? (c = C[d],
        c[b].setWrite(!0)) : (c = new n(!1,!0),
        e[b] = c,
        C.push(e)))
    }
    function s(a, b) {
        if (D)
            return !0;
        var c = !1;
        if (angular.isArray(a))
            angular.forEach(a, function(a) {
                var d = p(a);
                if (d > -1) {
                    var e = C[d];
                    c = "read" === b ? e[a].read : e[a].write
                }
            });
        else {
            var d = p(a);
            if (d > -1) {
                var e = C[d];
                c = "read" === b ? e[a].read : e[a].write
            }
        }
        return c
    }
    function t(a, b) {
        if (D)
            return a;
        var c = [];
        angular.forEach(a, function(a) {
            a.submenu = u(a.submenu, b),
            c.push(a)
        });
        for (var d = c.length; d--; )
            c[d].sref.indexOf("app.dashboard") > -1 || 0 === c[d].submenu.length && c.splice(d, 1);
        return c
    }
    function u(a, b) {
        var c = [];
        return angular.forEach(a, function(a) {
            "app.config.cloudExpress.dashboard" === a.sref ? b && c.push(a) : "app.tools.ssh" === a.sref ? s("Tools", "write") && c.push(a) : a.sref.contains("app.monitor.devices") ? s("Device Monitoring", "read") && (s("Interface", "read") || s("Policy", "read") || s("Routing", "read") || s("Security", "read") || s("System", "read")) && c.push(a) : s(a.feature, "read") && c.push(a)
        }),
        c
    }
    function v(a) {
        return !(!A.isSidebarSet || _.isUndefined(a) || _.isEmpty(a) || a.split(".").length <= 2) && (g("filter")(A.menu, a, !1).length > 0 ? g("filter")(g("filter")(A.menu, a, !1)[0].submenu, a, !1)[0] : v(a.replace(/\.[^\.]+$/, "")))
    }
    function w(a) {
        B.setUserProfile(a),
        B.tenancyCheck = !0
    }
    function x(a) {
        var b = this;
        b.profile = a || void 0,
        b.tenancyCheck = !1
    }
    i.sessionStorage.setItem("isSidebarSet", !1);
    var y = f.returnEventsEnum()
      , z = f.returnViewsEnum()
      , A = new o
      , B = new x
      , C = []
      , D = !1
      , E = !1
      , F = !1;
    return n.prototype.setWrite = function(a) {
        this.write = a
    }
    ,
    n.prototype.setRead = function(a) {
        this.read = a
    }
    ,
    o.prototype.setMenu = function(a) {
        this.menu = a
    }
    ,
    o.prototype.setGeneralTemplateFA = function(a, b) {
        this.disableFullConfigPush = b
    }
    ,
    x.prototype.setUserProfile = function(a) {
        var c = this;
        c.profile = a,
        c.userMode = {
            mode: "singleTenant",
            id: "",
            roles: []
        },
        b.checkNestedProperty(B, "profile", "userMode") && b.checkNestedProperty(B, "profile", "tenancyMode") && b.checkNestedProperty(B, "profile", "viewMode") && "multitenant" === B.profile.tenancyMode.toLowerCase() && ("provider" === B.profile.userMode.toLowerCase() ? "provider" === B.profile.viewMode.toLowerCase() ? c.userMode = {
            mode: "provider",
            id: B.profile.tenantId,
            roles: B.profile.capabilities
        } : "tenant" === B.profile.viewMode.toLowerCase() && (c.userMode = {
            mode: "multiTenant-provider",
            id: B.profile.tenantId,
            roles: B.profile.capabilities
        }) : "tenant" === B.profile.userMode.toLowerCase() && (c.userMode = {
            mode: "multiTenant-tenant",
            id: B.profile.tenantId,
            roles: []
        }))
    }
    ,
    {
        checkTenancy: function() {
            var b = a.defer();
            return k.params.tenantId ? c.getVSessionId(k.params.tenantId).then(function(a) {
                a.httpResponseHeader.vsessionid && j.setVSessionId(a.httpResponseHeader.vsessionid),
                c.getFeatureAccess().then(function(a) {
                    w(a.data),
                    b.resolve()
                }, function(a) {
                    b.reject(a)
                })
            }) : c.getFeatureAccess().then(function(a) {
                w(a.data),
                b.resolve()
            }, function(a) {
                b.reject(a)
            }),
            b.promise
        },
        initialize: function() {
            var b = this
              , e = c.getUserRoles()
              , g = d.getSideMenu(B);
            a.all([e, g]).then(function(a) {
                var c = a[0]
                  , d = a[1];
                E ? (D = !1,
                angular.forEach(c.data, function(a) {
                    r(a.role.trim())
                })) : angular.forEach(c.data, function(a) {
                    q(a.role.trim())
                }),
                angular.isDefined(B.profile.cloudx) && (F = "on" === B.profile.cloudx),
                A.setGeneralTemplateFA(!!B.profile.disableFullConfigPush && B.profile.disableFullConfigPush),
                B.profile.enableServerEvents && f.setFeatureAccess();
                var e = b.cloudExpressRBAC("sideNav")
                  , g = t(d.data, e);
                A.setMenu(g),
                A.isSidebarSet = !0,
                i.sessionStorage.setItem("isSidebarSet", !0)
            }, function() {
                A = void 0,
                h.error("Error loading sidebar JSON")
            }),
            m.checkMaintenanceWindow()
        },
        isAdmin: function() {
            return D
        },
        checkAccessFromState: function(a, b) {
            var c = ["app.404", "app.dashboard", "app.profile"]
              , d = this.getUserMode();
            if (_.indexOf(c, a) > -1)
                return !0;
            if ("provider" === d.mode) {
                if (_.find(l.PROVIDER, function(b) {
                    return b === a || a.includes(b)
                }))
                    return !1
            } else if ("multiTenant-provider" === d.mode) {
                if (_.find(l.MULTI_TENANT_PROVIDER, function(b) {
                    return b === a || a.includes(b)
                }))
                    return !1
            } else if ("multiTenant-tenant" === d.mode && _.find(l.MULTI_TENANT_TENANT, function(b) {
                return b === a || a.includes(b)
            }))
                return !1;
            return ["app.maintenance.repository"].indexOf(a) > -1 ? s("Software Upgrade", "read") : ["app.device.status"].indexOf(a) > -1 ? !!b.activity && s(e.getStatusActionByEndpoint(b.activity).feature, "read") : ["app.config.device_bring_up"].indexOf(a) > -1 ? s("Tools", "read") : ["app.tools.ssh"].indexOf(a) > -1 ? s("Tools", "write") : ["app.monitor.devices"].indexOf(a) > -1 ? s("Device Monitoring", "read") && (s("Interface", "read") || s("Policy", "read") || s("Routing", "read") || s("Security", "read") || s("System", "read")) : s(v(a).feature, "read")
        },
        getSidebarMenu: function() {
            return A
        },
        allowReadAccess: function(a) {
            return s(a, "read")
        },
        allowAccess: function(a) {
            return s(a, "write")
        },
        getPermissions: function() {
            return C
        },
        isSidebarSet: function() {
            return !(!angular.isDefined(A) && "" !== A) && A.isSidebarSet
        },
        getCloudExpressStatus: function() {
            return F
        },
        setCloudExpressStatus: function(a) {
            F = a
        },
        cloudExpressRBAC: function(a) {
            function b() {
                return !!F || !!d
            }
            function c() {
                return !!F || !!f
            }
            var d = s("Settings", "read")
              , e = s("Device Inventory", "read")
              , f = s("Template Deploy", "write");
            switch (a) {
            case "sideNav":
            case "topNav":
                return !!e && b();
            case "config":
                return !!e && c()
            }
        },
        checkSidebarState: function() {
            return i.sessionStorage.getItem("isSidebarSet")
        },
        getTenancyCheck: function() {
            return B.tenancyCheck
        },
        getUserProfile: function() {
            return B
        },
        getUserMode: function() {
            return B.userMode
        },
        resetVariables: function() {
            y = f.returnEventsEnum(),
            z = f.returnViewsEnum(),
            A = new o,
            B = new x,
            C = [],
            D = !1,
            E = !1,
            F = !1
        },
        routeToDashboard: function() {
            var a = "app.dashboard"
              , b = this.getUserMode();
            "singleTenant" === b.mode || "multiTenant-tenant" === b.mode ? k.go(a) : b.id && k.go(a, {
                tenantId: b.id
            })
        }
    }
}
function rbacService(a, b, c, d) {
    return {
        getFeatureAccess: function() {
            return a.get(b.FEATURE_ACCESS)
        },
        getUserRoles: function() {
            return a.get(b.RBAC)
        },
        getVSessionId: function(b) {
            var d = c.MANAGE_TENANT_URL + "/" + b + "/vsessionid";
            return a.post(d)
        },
        getDeviceInfoFromLocalSystemIp: function(c) {
            var e = d.defer();
            return a.get(b.DEVICE_INFO + "?local-system-ip=" + c).then(function(a) {
                e.resolve(a)
            }, function() {
                e.reject()
            }),
            e.promise
        },
        getDeviceInfoFromSystemIp: function(c) {
            var e = d.defer();
            return a.get(b.DEVICE_INFO + "?system-ip=" + c).then(function(a) {
                e.resolve(a)
            }, function() {
                e.reject()
            }),
            e.promise
        }
    }
}
function vipDataList(a) {
    return {
        restrict: "AE",
        templateUrl: "app/common/simpleDataList/simpleDataList-template.html",
        scope: {
            listDataUrl: "@"
        },
        link: function(b, c, d) {
            b.headers = {},
            b.headers.title = {},
            b.headers.property = {},
            b.headers.title.left = "",
            b.headers.title.right = "",
            b.headers.property.left = "",
            b.headers.property.right = "",
            b.dataList = [],
            a.getDataList(b.listDataUrl).then(function(a) {
                b.headers.title.left = a.header.columns[0].title,
                b.headers.title.right = a.header.columns[1].title,
                b.headers.property.left = a.header.columns[0].property,
                b.headers.property.right = a.header.columns[1].property,
                b.dataList = a.data
            }, function(a) {})
        }
    }
}
function dataListService(a) {
    return {
        getDataList: function(b) {
            return a.get(b)
        }
    }
}
function Tab(a) {
    var b = function(a, b, c, d) {
        this.tabTitle = a,
        this.active = b,
        this.states = c,
        this.value = d,
        this.callBack = void 0
    };
    return b.prototype.setCallback = function(a) {
        this.callBack = a
    }
    ,
    b.prototype.setActive = function(a) {
        this.active = a
    }
    ,
    b
}
function vipCrudTable(a, b, c, d) {
    return {
        restrict: "AE",
        templateUrl: "app/common/table/crudTable.html",
        scope: {
            options: "=",
            columnDefs: "=",
            tableData: "=",
            saveFn: "=",
            enableEdit: "=",
            vipTableObj: "=",
            heightOffset: "@",
            tableName: "@"
        },
        link: function(e, f, g) {
            function h() {
                if (angular.isDefined(e.vipTableObj) && angular.isDefined(e.vipTableObj.hoverActions)) {
                    e.gridOptions.singleSelect || (e.gridOptions.singleSelect = !0,
                    e.gridOptions.enableRowSelection = !0,
                    e.gridOptions.enableFullRowSelection = !0);
                    var a = {
                        name: "hoverActions",
                        displayName: "",
                        width: 45,
                        cellTemplate: "ui-grid/hoverActionRowHeader",
                        enableCellEdit: !1,
                        enableColumnResizing: !1,
                        enableColumnMenu: !1,
                        enableFiltering: !1,
                        enableHiding: !1,
                        enableSorting: !1,
                        pinnedRight: !0,
                        exporterSuppressExport: !0
                    };
                    e.gridOptions.columnDefs.push(a)
                }
            }
            function i() {
                angular.forEach(e.columnDefs, function(a) {
                    var b = {
                        type: a.dataType,
                        field: a.property || a.name,
                        name: a.property || a.name,
                        displayName: a.title || a.displayName,
                        visible: !angular.isDefined(a.visible) || a.visible,
                        enableCellEdit: !1,
                        enableColumnMenu: !1,
                        width: "*"
                    };
                    angular.isDefined(a.cellTemplate) ? b.cellTemplate = a.cellTemplate : b.sort = {
                        direction: c.ASC,
                        priority: 1
                    },
                    e.gridOptions.columnDefs.push(b)
                }),
                h()
            }
            function j() {
                angular.forEach(e.columnDefs, function(a) {
                    var b = {
                        type: a.dataType,
                        field: a.property || a.field,
                        name: a.property || a.name,
                        displayName: a.title || a.displayName,
                        visible: !angular.isDefined(a.visible) || a.visible,
                        enableColumnMenu: !1,
                        width: "*"
                    };
                    angular.isDefined(a.cellTemplate) ? (b.cellTemplate = a.cellTemplateForEdit || a.editableCellTemplateForEdit || a.editableCellTemplate,
                    b.editableCellTemplate = a.editableCellTemplateForEdit || a.editableCellTemplate,
                    b.enableCellEdit = !0,
                    b.allowCellFocus = !0) : (b.sort = {
                        direction: c.ASC,
                        priority: 1
                    },
                    b.enableCellEdit = !1),
                    e.gridOptions.columnDefs.push(b)
                }),
                h()
            }
            function k() {
                var b;
                e.enableEdit ? e.editMode ? (e.heightOffsetReduced = parseInt(e.heightOffset) + 50,
                b = '<div  id="vip_table' + (e.tableName ? "_" + e.tableName : "") + '" ui-grid="gridOptions" ui-grid-edit data-ui-grid-auto-resize ui-grid-expandable ui-grid-selection resizeable-component data-height-offset={{heightOffsetReduced}}></div>',
                b += '<div id="crud_table_footer" class="footer footer-bottom" data-vip-rbac data-allow="Manage Users"> <vip-button data-button-title="Save" data-button-size="small" data-button-color="blue" id="save_btn" data-ng-click="saveFn(gridOptions.data);" style="margin-left: 40%"></vip-button> <vip-button data-button-title="Cancel" data-button-size="small " data-button-color="white" id="cancel_btn" data-ng-click="cancel()"></vip-button> </div>') : b = '<div  id="vip_table' + (e.tableName ? "_" + e.tableName : "") + ' " ui-grid="gridOptions" ui-grid-edit data-ui-grid-auto-resize ui-grid-expandable resizeable-component data-height-offset={{heightOffset}}></div>' : b = '<div  id="vip_table' + (e.tableName ? "_" + e.tableName : "") + '" ui-grid="gridOptions" ui-grid-edit data-ui-grid-auto-resize ui-grid-selection ui-grid-expandable resizeable-component data-height-offset="{{heightOffset}}"></div>',
                e.tableName ? $("#vip_table_" + e.tableName).remove() : $("#vip_table").remove(),
                $("#crud_table_footer").remove(),
                $("#vipCrudTableActions").after(a(b)(e))
            }
            var l = [];
            e.editMode = !1,
            e.tableScroll = {
                isSet: !1
            };
            var m;
            e.checkFeatureEnabled = function(a) {
                a.enabled = !1,
                a.write ? (a.read = !0,
                a.enabled = !0) : a.read && (a.enabled = !0)
            }
            ;
            var n = function() {
                e.vipTableObj && e.vipTableObj.options.enableExpandable && (e.gridOptions.enableExpandable = !0,
                e.gridOptions.enableExpandableRowHeader = e.vipTableObj.expandableRowOptions.enableExpandableRowHeader,
                e.gridOptions.expandableRowTemplate = e.vipTableObj.expandableRowOptions.expandableRowTemplate,
                e.gridOptions.expandableRowHeight = e.vipTableObj.expandableRowOptions.expandableRowHeight || 150,
                e.gridOptions.reduceExpandableWidth = e.vipTableObj.expandableRowOptions.reduceExpandableWidth,
                e.gridOptions.expandableRowScope = e.vipTableObj.expandableRowOptions.expandableRowScope)
            };
            e.gridOptions = {
                enableSorting: !0,
                rowHeight: 30,
                columnDefs: [],
                data: [],
                enableRowHeaderSelection: !1,
                enableExpandable: !1,
                enableExpandableRowHeader: !1,
                multiSelect: !1,
                singleSelect: !1,
                vipTable: e.vipTableObj,
                onRegisterApi: function(a) {
                    e.gridApi = a,
                    a.core.on.rowsRendered(e, function(a) {
                        m = $("div.ui-grid-render-container.ui-grid-render-container-body");
                        var b;
                        return !(a.grid.options.columnDefs.length < 1 && a.grid.options.data.length < 1 || e.tableScroll.isSet) && (m.width() && m.height() && (b = m.find(".ui-grid-viewport").perfectScrollbar({
                            minScrollbarLength: "20"
                        })),
                        void (b && (e.tableScroll.isSet = !0)))
                    })
                }
            },
            n(),
            e.$watch("tableScroll.isSet", function(a, b) {
                a && d(function() {
                    m.find(".ui-grid-viewport").perfectScrollbar("update")
                }, 500)
            }),
            angular.isDefined(e.vipTableObj) && (e.vipTableObj.tableId = "vip_table",
            e.gridOptions.appScopeProvider = e.vipTableObj.appScope),
            e.$watchCollection("columnDefs", function(a) {
                b.isUndefinedOrEmpty(a) || (i(),
                k())
            }),
            e.$watchCollection("tableData", function(a) {
                b.isUndefinedOrEmpty(a) || (e.editMode = !1,
                l = angular.copy(e.tableData),
                e.gridOptions.columnDefs.reset(),
                i(),
                angular.copy(e.tableData, e.gridOptions.data),
                k(),
                d(function() {
                    e.tableData.length > 0 && e.gridOptions.singleSelect && e.gridApi.selection.selectRow(e.gridOptions.data[0])
                }))
            }),
            e.switchEditMode = function() {
                e.gridOptions.columnDefs.reset(),
                e.editMode ? (i(),
                angular.copy(e.tableData, e.gridOptions.data)) : j(),
                e.editMode = !e.editMode,
                k()
            }
            ,
            e.switchUneditableMode = function() {
                e.gridOptions.columnDefs.reset(),
                i(),
                e.editMode = !1,
                k()
            }
            ,
            e.cancel = function() {
                e.gridOptions.columnDefs.reset(),
                i(),
                angular.copy(e.tableData, e.gridOptions.data),
                e.editMode = !1,
                k()
            }
        }
    }
}
function expandableStatusRow(a) {
    return {
        replace: !0,
        restrict: "EA",
        templateUrl: "app/common/table/statusRowDetails.html",
        require: "^uiGrid",
        link: function(b, c, d, e) {
            c.find("textarea").perfectScrollbar("destroy"),
            c.find("textarea").perfectScrollbar(),
            a(function() {
                c.find("textarea").perfectScrollbar("update")
            }, 350)
        }
    }
}
function vipTableDropdownPopover(a, b, c, d) {
    return {
        replace: !0,
        restrict: "AE",
        scope: {
            content: "=",
            okButtonActionFn: "=",
            selectedRow: "=",
            precondition: "=",
            contentCallBackFn: "=",
            eventObj: "="
        },
        link: function(a, c, e) {
            angular.isDefined(a.contentCallBackFn) && (a.content = a.contentCallBackFn(a.selectedRow));
            var f = '<div class="confirm-message arrow_box displayNone" style="background-color: #FFFDE1" id="{{directiveId}}"><p style="white-space: pre-line">{{content}}</p><div class="form-actions"><vip-button button-title="OK" button-size="small" button-color="blue" ng-click="ok($event)" id="{{directiveId}}_ok" ng-if="okButtonActionFn"></vip-button><vip-button button-title="Cancel" button-size="small" button-color="white" ng-click="cancel($event)" class="button" id="{{stateString}}_cancel"></vip-button></div></div>';
            a.precondition && a.precondition(a.selectedRow),
            c.append(b(f)(a)),
            d(function() {
                var b = $(".confirm-message").height()
                  , c = $("#table-dropdown-menu").position().top
                  , d = a.eventObj.clientY - c
                  , e = $("#vip_table").position().top;
                a.eventObj.clientY + b > e + $("#vip_table").height() && ($(".confirm-message").offset({
                    top: d - (b + 22)
                }),
                $(".confirm-message").addClass("popover-top")),
                $(".confirm-message").removeClass("displayNone"),
                $(".confirm-message").addClass("displayBlock")
            })
        },
        controller: ["$scope", "$element", "$attrs", function(a, b, d) {
            function e() {
                angular.element(b).remove(),
                $(".cellnav-dropdown-menu").removeClass("open")
            }
            a.directiveId = c.getStateString(a.$root.$state) + "confirm_popover",
            a.ok = function(a) {
                this.okButtonActionFn(),
                e()
            }
            ,
            a.cancel = function(a) {
                a.stopPropagation(),
                angular.element(b).remove()
            }
        }
        ]
    }
}
function Table(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    function r(a) {
        var b = this
          , c = _.pluck(a.keyvalue, "key");
        c = "'" + c.join("','") + "'";
        var d = '<div class="ui-grid-cell-contents" title="TOOLTIP">';
        if ("array" !== a.dataType)
            for (var e in a.keyvalue)
                d += "<span ng-if=\"row.entity['" + a.keyvalueProperty + "'] === '" + a.keyvalue[e].key + "'\">" + a.keyvalue[e].value + "</span>";
        else
            for (var e in a.keyvalue)
                d += '<span class="ui-pipe-for-array" ng-if="row.entity[\'' + a.keyvalueProperty + "'].indexOf( '" + a.keyvalue[e].key + "') > -1\">" + a.keyvalue[e].value + "</span>";
        b.cellTemplate = d + "</div>"
    }
    function s(a) {
        var b = this
          , c = _.pluck(a.color, "key");
        c = "'" + c.join("','") + "'";
        var d = '<div class="ui-grid-cell-contents" title="TOOLTIP">';
        for (var e in a.color)
            d += "<span ng-style=\"{'color': '#" + a.color[e].value + "'}\" ng-if=\"row.entity['" + a.colorProperty + "'] === '" + a.color[e].key + "'\">{{COL_FIELD CUSTOM_FILTERS}}</span>";
        d += '<span ng-if="[' + c + "].indexOf(row.entity['" + a.colorProperty + "']) < 0\">{{COL_FIELD CUSTOM_FILTERS}}</span>",
        b.cellTemplate = d + "</div>"
    }
    function t(a) {
        var b = this
          , c = '<div class="ui-grid-cell-contents" title="TOOLTIP"><span ng-if="!row.entity[\'' + a.iconProperty + "']\">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</span>";
        for (var d in a.icon)
            angular.isDefined(a.icon[d].value) ? c += '<image ng-src="' + a.icon[d].value + '" ng-if="row.entity[\'' + a.iconProperty + "'] && row.entity['" + a.iconProperty + "'] === '" + a.icon[d].key + "'\"/>" : a.icon[d].isMaterialDesignIcon && angular.isDefined(a.icon[d].materialDesignIconTextualName) && angular.isDefined(a.icon[d].materialDesignIconColorClass) && (c += '<div><i class="material-icons ' + a.icon[d].materialDesignIconColorClass + '" ng-if="row.entity[\'' + a.iconProperty + "'] && row.entity['" + a.iconProperty + "'] === '" + a.icon[d].key + "'\">" + a.icon[d].materialDesignIconTextualName + "</i>");
        b.cellTemplate = c + "</span></div>"
    }
    function u(a) {
        var b = this
          , c = '<div class="ui-grid-cell-contents" title="TOOLTIP">';
        for (var d in a.icon) {
            var e = _.findIndex(a.color, function(b) {
                return b.key === a.icon[d].key
            });
            c += "<span ng-style=\"{'background-color': '#" + a.color[e].value + "'}\" ng-if=\"row.entity['" + a.colorProperty + "'] === '" + a.color[e].key + "'\">",
            c += '<image ng-src="' + a.icon[d].value + '" ng-if="row.entity[\'' + a.iconProperty + "'] === '" + a.icon[d].key + "'\"/></span>"
        }
        b.cellTemplate = c + "</div>"
    }
    function v(a) {
        var b = this
          , c = '<div class="ui-grid-cell-contents" title="TOOLTIP"><span>';
        for (var d in a.icon)
            c += '<image ng-src="' + a.icon[d].value + '" ng-if="row.entity[\'' + a.iconProperty + "'] === '" + a.icon[d].key + "'\"/>";
        b.cellTemplate = c + "&nbsp;{{COL_FIELD CUSTOM_FILTERS}}</span></div>"
    }
    function w(a) {
        var b = this
          , c = '<div class="ui-grid-cell-contents"  title="TOOLTIP"><span ng-if="!row.entity[\'' + a.iconProperty + "'] && row.entity['" + a.defaultPropertyKey + "'] === '" + a.defaultPropertyValue + "'\">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</span>";
        for (var d in a.icon) {
            var e = a.icon[d].displayKey ? a.icon[d].displayKey : "{{row.entity['" + a.toolTipProperty + "']}}";
            c += '<image ng-src="' + a.icon[d].value + '" title="' + e + '" ng-if="(' + angular.isDefined(a.defaultPropertyKey) + "?row.entity['" + a.defaultPropertyKey + "'] === '" + a.defaultPropertyValue + "' : true)&& row.entity['" + a.iconProperty + "']  && row.entity['" + a.iconProperty + "'] === '" + a.icon[d].key + "'\"/>"
        }
        c += '<image ng-src="' + a.icon[a.icon.length - 1].value + '" title="{{row.entity[\'' + a.defaultPropertyKey + '\']}}" ng-if="' + angular.isDefined(a.defaultPropertyKey) + "&& row.entity['" + a.defaultPropertyKey + "'] !== '" + a.defaultPropertyValue + "'\"/>",
        b.cellTemplate = c + "</div>"
    }
    function x(a) {
        var b = this
          , c = _.groupBy(a.color, "property")
          , d = '<div class="ui-grid-cell-contents" title="TOOLTIP">';
        if (angular.isDefined(a.color))
            for (var e in c)
                for (var f in c[e])
                    d += "<span ng-style=\"{'color': '#" + c[e][f].value + "'}\" ng-if=\"row.entity['" + c[e][f].property + "'] === '" + c[e][f].key + '\'"><img title="' + c[e][f].displayKey + '" ng-src="' + c[e][f].icon + '" ng-if="' + angular.isDefined(c[e][f].icon) + '"/><span ng-if="' + angular.isDefined(c[e][f].displayKey) + " && " + angular.isUndefined(c[e][f].icon) + "&&" + c[e][f].prependedString + '">(' + c[e][f].displayKey + ')&nbsp;&nbsp;</span><span ng-if="' + angular.isDefined(c[e][f].displayKey) + " && " + angular.isUndefined(c[e][f].icon) + "&&" + angular.isUndefined(c[e][f].prependedString) + '">' + c[e][f].displayKey + '&nbsp;&nbsp;</span><span ng-if="' + angular.isUndefined(c[e][f].displayKey) + " && " + angular.isUndefined(c[e][f].icon) + "\">{{row.entity['" + c[e][f].property + "'] CUSTOM_FILTERS}}&nbsp;&nbsp;</span></span>";
        else
            for (var g in a.columnProperties)
                d += "<span >{{row.entity['" + a.columnProperties[g] + "'] CUSTOM_FILTERS}}&nbsp;&nbsp;</span>";
        b.cellTemplate = d + "</div>"
    }
    function y(a) {
        var b = this;
        b.cellTemplate = '<div class="ui-grid-cell-contents" title="TOOLTIP"><span class="ui-pipe-for-array" ng-repeat="item in COL_FIELD">{{item}}</span></div>'
    }
    function z(a) {
        var b = this;
        b.cellTemplate = '<div class="ui-grid-cell-contents" title="TOOLTIP"><span class="ui-pipe-for-array" ng-repeat="item in COL_FIELD">{{item | JSONArrayOfObjToString}}</span></div>'
    }
    function A(a, b) {
        var c = this;
        angular.equals(b, "_separator") && (c.cellTemplate = '<div class="ui-grid-cell-contents" title="TOOLTIP"><span>{{COL_FIELD | formatTableString}}</span></div>'),
        angular.equals(b, "-separator") && (c.cellTemplate = '<div class="ui-grid-cell-contents" title="TOOLTIP"><span>{{COL_FIELD | formatTableStringWithDashesAndInitialCapsAllWords}}</span></div>')
    }
    function B(a, b) {
        return 1 === b.length ? a[b[0]] : a[b[0]] + "_" + B(a, b.slice(1, b.length))
    }
    function C(a) {
        d(function() {
            angular.isDefined(a) && a instanceof k && j.subscribe(a)
        })
    }
    var D = []
      , E = ".ui-grid-viewport"
      , F = "div.ui-grid-render-container.ui-grid-render-container-body"
      , G = "div.right.ui-grid-render-container-right.ui-grid-render-container"
      , H = "div.left.ui-grid-render-container-left.ui-grid-render-container"
      , I = ".ui-grid-canvas"
      , J = function(a, b, c) {
        this.property = a,
        this.value = b,
        this.config = c
    }
      , K = {
        enableRowSelection: !1,
        isRowSelectable: {},
        enableRowHeaderSelection: !1,
        enableColumnMenus: !1,
        enableCellEdit: !1,
        enableSorting: !1,
        columnResizing: !1,
        multiSelect: !1,
        singleSelect: !1,
        singleSelectWithRadio: !1,
        rowSelection: !1,
        rowTemplate: !1,
        minRowsToShow: 10,
        enableExpandable: !1,
        csvExport: !1,
        csvImport: !1,
        tableHeightOffset: !1,
        autoLoad: !1,
        columnMoving: !0,
        registerAPICallbackFn: !1,
        postImportDataCallbackFn: !1,
        toggleFirstRowOnLoad: !1,
        excessColumns: 4,
        rowHeight: 30,
        headerRowHeight: 30,
        dataUid: void 0,
        savedStateKey: void 0,
        toolbar: !0,
        flatEntityAccess: !1,
        noUnselect: !1,
        addMaxRow: void 0,
        tableName: void 0,
        componentId: void 0,
        cellTemplate: void 0,
        localActions: !1,
        viewActions: !1
    }
      , L = {
        dataSourceFilter: !1,
        addRow: !1,
        search: !0,
        rowCount: !0,
        refresh: !0,
        dynamicRefresh: !1,
        delete: !1,
        menuColumnFilter: !0,
        saveState: !1,
        csvExport: !1,
        csvImport: !1,
        custom: !1,
        customTemplateUrl: ""
    }
      , M = {
        exporterMenuCsv: !1,
        exporterMenuPdf: !1,
        exporterCsvFilename: "viptela_download.csv",
        exporterCsvColumnSeparator: ",",
        exporterHeaderFilterUseName: !0,
        exporterSuppressColumns: [],
        exporterHeaderFilter: function(a) {
            return a
        },
        exporterFieldCallback: function(a, c, d, e) {
            if ("date" === d.colDef.type)
                e = b("momentDateFormat")(e, d.colDef.displayFormat);
            else if (angular.isArray(e)) {
                var f = "";
                angular.forEach(e, function(a) {
                    f = angular.isObject(a) ? JSON.stringify(_.omit(a, "$$hashKey")) + f : JSON.stringify(a) + f
                }),
                e = f
            }
            return e
        }
    }
      , N = function(a, b, c, d) {
        this.errorOccurred = !1,
        this.options = angular.extend({}, K, a),
        this.toolbar = angular.extend({}, L, b),
        this.expandableRowOptions = angular.extend({}, c),
        this.csvOptions = angular.extend({}, M, d),
        this.uiGridApi = {},
        this.columnDefs = [],
        this.data = [],
        this.dataUrl,
        this.appScope = {},
        this.hoverActions = {},
        this.taggedSearchObject = new q,
        this.savedState = {},
        this.onRowSelectionCallback = void 0,
        this.onRefreshCallback = void 0,
        this.postRefreshCallback = void 0,
        this.loadDataFromUrlCallback = void 0,
        this.name = this.options.tableName,
        this.componentId = this.options.componentId,
        this.dataSourceFilter = void 0,
        this.element = {
            ngElem: void 0,
            bodyContainer: void 0,
            leftContainer: void 0,
            leftCanvas: void 0,
            rightContainer: void 0,
            rightCanvas: void 0,
            gridCanvases: void 0
        },
        this.attributes = void 0,
        this.visibleScrollbarSet = !1,
        this.localActions = [],
        this.viewActions = [],
        this.noDataMessage = "No data available",
        this.actionHelperText = ""
    };
    N.prototype.getColumnDefs = function() {
        return this.columnDefs
    }
    ,
    N.prototype.setToolbar = function(a) {
        this.toolbar = angular.extend({}, this.toolbar, a)
    }
    ,
    N.prototype.setHoverAction = function(a) {
        this.hoverActions = a
    }
    ,
    N.prototype.setNoDataMessage = function(a) {
        this.noDataMessage = a
    }
    ,
    N.prototype.setDataUrl = function(a) {
        this.dataUrl = a
    }
    ,
    N.prototype.setDataSourceFilter = function(a, b, c, d, e, f, g) {
        this.toolbar.dataSourceFilter = !0,
        this.dataSourceFilter = new p(a,b,c,d,e,f,g)
    }
    ,
    N.prototype.setDataSourceFilterInstance = function(a) {
        this.toolbar.dataSourceFilter = !0,
        this.dataSourceFilter = a
    }
    ,
    N.prototype.setLocalActions = function(a) {
        angular.isArray(a) && a.length > 0 ? (this.options.localActions = !0,
        this.localActions = a) : angular.isObject(a) && (this.options.localActions = !0,
        this.localActions = [a])
    }
    ,
    N.prototype.setViewActions = function(a) {
        angular.isArray(a) && a.length > 0 ? (this.options.viewActions = !0,
        this.viewActions = a) : angular.isObject(a) && (this.options.viewActions = !0,
        this.viewActions = [a])
    }
    ,
    N.prototype.setActionHelperText = function(a) {
        this.actionHelperText = a
    }
    ,
    N.prototype.setAppScope = function(a) {
        this.appScope = angular.extend({}, this.appScope, a)
    }
    ,
    N.prototype.setExpandableRowOptions = function(a, b, c, d, e) {
        this.expandableRowOptions.enableExpandableRowHeader = a,
        this.expandableRowOptions.expandableRowTemplate = b,
        this.expandableRowOptions.expandableRowHeight = c,
        this.expandableRowOptions.reduceExpandableWidth = d,
        this.expandableRowOptions.expandableRowScope = e
    }
    ,
    N.prototype.setExporterCsvFilename = function(a) {
        this.csvOptions.exporterCsvFilename = a
    }
    ,
    N.prototype.setRowTemplate = function(a) {
        this.options.rowTemplate = a
    }
    ,
    N.prototype.setOnRowSelectionCallback = function(a) {
        this.onRowSelectionCallback = a
    }
    ,
    N.prototype.setOnRefreshCallback = function(a) {
        this.onRefreshCallback = a
    }
    ,
    N.prototype.setPostRefreshCallback = function(a) {
        this.postRefreshCallback = a
    }
    ,
    N.prototype.setLoadDataFromUrlCallback = function(a) {
        this.loadDataFromUrlCallback = a
    }
    ,
    N.prototype.savingState = function() {
        return this.savedState = this.uiGridApi.saveState.save(),
        !!this.options.savedStateKey && void e.put(h.VIEW_PREFERENCE + this.options.savedStateKey, {
            state: this.savedState
        }).then(function(a) {}, function(a) {
            angular.isObject(a) && g.checkNestedProperty(a, "error", "details") ? c.error("Error occurred while saving table state: " + a.error.message + ":" + a.error.details) : c.info("API error response needs to be updated to conform to company guidelines" + this.dataUrl)
        })
    }
    ,
    N.prototype.createColumns = function(a) {
        var b = this;
        if (angular.forEach(a, function(a) {
            var c = {};
            c.type = angular.equals(a.dataType, "number") || angular.equals(a.type, "number") ? "numberStr" : a.dataType || a.type,
            c.field = a.property || a.field,
            c.name = a.property || a.name,
            c.headerTooltip = a.toolTip || a.headerTooltip,
            c.cellTooltip = a.cellTooltip,
            c.displayName = a.title || a.displayName || "",
            c.minWidth = a.minWidth ? a.minWidth : 8 * c.displayName.length + 30,
            c.width = a.width && a.width > c.minWidth ? a.width : "*",
            c.enableHiding = a.hideable,
            c.enableSorting = !angular.isDefined(a.sortable) || a.sortable,
            c.sort = angular.isDefined(a.sort) ? a.sort : {},
            c.allowCellFocus = a.editable || !1,
            c.enableCellEdit = a.editable,
            c.cellTemplate = a.cellTemplate || b.options.cellTemplate,
            c.editableCellTemplate = a.editableCellTemplate,
            c.enableColumnMoving = !angular.isDefined(a.hideable) || a.hideable,
            c.enableColumnMenu = a.enableColumnMenu || !1,
            c.visible = !angular.isDefined(a.visible) || a.visible,
            c.pinnedLeft = a.isPinned || a.isLeftPinned,
            c.pinnedRight = a.isRightPinned,
            c.exporterSuppressExport = a.exporterSuppressExport,
            c.editDropdownOptionsArray = a.values,
            c.enableColumnResizing = a.enableColumnResizing,
            c.cellFilter = angular.equals(a.dataType, "number") && angular.isDefined(a.decimal) ? "number: " + a.decimal : void 0,
            c.enableHostName = !!angular.isDefined(a.enableHostName) && a.enableHostName,
            c.hostValueType = angular.isDefined(a.hostValueType) ? a.hostValueType : void 0,
            c.isSearch = a.isSearch,
            "date" === a.dataType && (c.displayFormat = a.displayFormat,
            c.cellFilter = "momentDateFormat:'" + a.displayFormat + "'",
            c.sortingAlgorithm = function(a, b) {
                return a - b
            }
            ),
            "ipv4" !== a.dataType.toLowerCase() && "ip" !== a.dataType.toLowerCase() || (c.sortingAlgorithm = function(a, b) {
                angular.isDefined(a) && null !== a || (a = "0.0.0.0"),
                angular.isDefined(b) && null !== b || (b = "0.0.0.0");
                var c = a.split(".")
                  , d = b.split(".")
                  , e = parseInt(c[0], 10) * Math.pow(256, 3) + parseInt(c[1], 10) * Math.pow(256, 2) + 256 * parseInt(c[2], 10) + 1 * parseInt(c[3], 10)
                  , f = parseInt(d[0], 10) * Math.pow(256, 3) + parseInt(d[1], 10) * Math.pow(256, 2) + 256 * parseInt(d[2], 10) + 1 * parseInt(d[3], 10);
                return e - f
            }
            ),
            "array" === a.dataType && (c.sortingAlgorithm = function(a, b) {
                return a || (a = [""]),
                b || (b = [""]),
                l.sortNumberStr(a[0], b[0])
            }
            ,
            y.call(c, a)),
            angular.isDefined(a.sort) && angular.isDefined(a.sort.type) && "stringToNumeric" === a.sort.type && angular.isDefined(a.sortConfig) && (c.sortingAlgorithm = function(b, c) {
                b = b.toLowerCase(),
                c = c.toLowerCase();
                var d = _.find(a.sortConfig, {
                    key: b
                })
                  , e = _.find(a.sortConfig, {
                    key: c
                });
                return d = angular.isDefined(d) ? d.value : null,
                e = angular.isDefined(e) ? e.value : null,
                l.sortNumber(d, e)
            }
            ),
            "string" === a.dataType && "rule_name_display" === a.property && A.call(c, a, "_separator"),
            "string" === a.dataType && "eventname" === a.property && A.call(c, a, "-separator"),
            "passphrase" !== a.dataType && "restrictedPassphrase" !== a.dataType || (c.name.contains("ppp") ? c.editableCellTemplate = '<div><form name="inputForm"><input type = "{{grid.appScope.inputType}}" ng-class="\'colt\' + col.uid" ui-grid-editor ng-model="MODEL_COL_FIELD">/></form></div>' : c.editableCellTemplate = '<div><form name="inputForm"><input type = "password" ng-class="\'colt\' + col.uid" ui-grid-editor ng-model="MODEL_COL_FIELD">/></form></div>',
            c.allowCellFocus = !0,
            c.enableCellEdit = !0),
            "keyvalue" === a.display && r.call(c, a),
            "formatBytes" === a.display && O.call(c, a),
            "formatKbpsToMbps" === a.display && P.call(c, a),
            !angular.isUndefined(a.colorProperty) && angular.isUndefined(a.iconProperty) && s.call(c, a),
            angular.isUndefined(a.colorProperty) || angular.isUndefined(a.iconProperty) || u.call(c, a),
            angular.isUndefined(a.colorProperty) && !angular.isUndefined(a.iconProperty) && "icon" === a.display && t.call(c, a),
            angular.isUndefined(a.colorProperty) && !angular.isUndefined(a.iconProperty) && "iconAndToolTip" === a.display && w.call(c, a),
            angular.isUndefined(a.colorProperty) && !angular.isUndefined(a.iconProperty) && "iconAndText" === a.display && v.call(c, a),
            "multiColumns" === a.display && x.call(c, a),
            "jsonArray" === a.dataType && z.call(c, a),
            angular.isDefined(a.enableHostName) && a.enableHostName && angular.isDefined(a.hostValueType) && "ip" === a.hostValueType && (c.field = c.field + "-hostname",
            c.name = c.name + "-hostname");
            var d = _.findIndex(D, function(b) {
                return a[b.property] === b.value
            });
            d > -1 && ("function" == typeof D[d].config ? D[d].config.call(c, a) : angular.extend(c, D[d].config)),
            angular.isUndefined(_.find(b.columnDefs, function(a) {
                return angular.equals(a.name, c.name)
            })) && b.columnDefs.push(c)
        }),
        b.options.singleSelect && b.setSingleSelect(),
        _.isEmpty(b.taggedSearchObject.searchProperties) && angular.isDefined(b.columnDefs)) {
            var c = g.getSearchPropertiesForCols(b.columnDefs);
            b.taggedSearchObject.setSearchProperties(c)
        }
    }
    ,
    N.prototype.resetCustomColumns = function(a) {
        D.reset()
    }
    ,
    N.prototype.addCustomColumns = function(a) {
        for (var b in a)
            D.push(new J(a[b].property,a[b].value,a[b].config))
    }
    ,
    N.prototype.setSingleSelect = function() {
        if (this.hoverActions.length) {
            var a = {
                name: "hoverActions",
                displayName: "",
                width: 45,
                cellTemplate: "ui-grid/hoverActionRowHeader",
                enableCellEdit: !1,
                enableColumnResizing: !1,
                enableColumnMenu: !1,
                enableFiltering: !1,
                enableHiding: !1,
                enableSorting: !1,
                pinnedRight: !0,
                exporterSuppressExport: !0
            };
            this.columnDefs.push(a)
        }
    }
    ,
    N.prototype.loadDataFromUrl = function(b, i) {
        var l = this;
        l.dataUrl = b ? b : l.dataUrl,
        angular.isDefined(i) && i instanceof k && j.unsubscribe(i),
        e.getTableData(l.dataUrl).then(function(b) {
            return l.loadDataFromUrlCallback && l.loadDataFromUrlCallback(b.data, b.header),
            _.isEmpty(l.columnDefs) && angular.isDefined(b.header) && l.createColumns(b.header.columns),
            void 0 !== b.data && l.setTableData(b.data, g.checkNestedProperty(b.header, "viewKeys", "uniqueKey") ? b.header.viewKeys.uniqueKey : void 0),
            g.checkNestedProperty(b.header, "viewKeys", "preferenceKey") ? (l.options.savedStateKey = b.header.viewKeys.preferenceKey,
            e.get(h.VIEW_PREFERENCE + l.options.savedStateKey).then(function(b) {
                if (angular.isDefined(b.state)) {
                    if (l.savedState = b.state,
                    g.checkNestedProperty(l.savedState, "columns")) {
                        var c = _.find(l.savedState.columns, function(a) {
                            return angular.equals(a.name, "hoverActions")
                        });
                        c && (c.pinned = "right")
                    }
                    delete l.savedState.selection,
                    l.uiGridApi.saveState.restore(l, l.savedState),
                    a.$broadcast("tableRestore", l.savedState),
                    l.options.toggleFirstRowOnLoad && d(function() {
                        l.uiGridApi.selection.selectRow && l.data.length > 0 && l.uiGridApi.selection.selectRow(l.uiGridApi.grid.renderContainers.body.visibleRowCache[0].entity)
                    })
                }
                C(i)
            }, function(a) {
                angular.isObject(a) && g.checkNestedProperty(a, "error", "details") ? (c.error("Error occurred while retrieving table data: " + a.error.message + ":" + a.error.details),
                f.error(a.error.message + ": " + a.error.details)) : (c.info("API error response needs to be updated to conform to company guidelines" + l.dataUrl),
                f.error("Error occurred while retrieving table data.")),
                C(i),
                l.error = !0
            })) : (l.options.toggleFirstRowOnLoad && d(function() {
                l.uiGridApi.selection.selectRow && l.data.length > 0 && l.uiGridApi.selection.selectRow(l.uiGridApi.grid.renderContainers.body.visibleRowCache[0].entity)
            }),
            void C(i))
        }, function(a) {
            angular.isObject(a) && g.checkNestedProperty(a, "error", "details") ? (c.error("Error occurred while retrieving table data: " + a.error.message + ":" + a.error.details),
            f.error(a.error.message + ": " + a.error.details)) : (c.info("API error response needs to be updated to conform to company guidelines" + l.dataUrl),
            f.error("Error occurred while retrieving table data.")),
            C(i),
            l.error = !0
        })
    }
    ,
    N.prototype.resetAllSelections = function() {
        var a = this;
        a.uiGridApi.selection.clearSelectedRows()
    }
    ,
    N.prototype.getSelectedRows = function() {
        var a = this;
        return a.uiGridApi.selection.getSelectedRows()
    }
    ,
    N.prototype.loadDataFromResource = function(a) {
        var b = this;
        a.get(function(a) {
            if (angular.isUndefined(b.columnDefs) && angular.isDefined(a.header))
                b.createColumns(a.header.columns);
            else {
                var c = [];
                for (var e in a.results[0]) {
                    var f = {
                        field: e,
                        name: e,
                        type: "numberStr",
                        enableCellEdit: !1
                    };
                    c.push(f)
                }
                b.createColumns(a.header.columns)
            }
            var h = angular.isDefined(a.data) ? a.data : a.results;
            angular.isDefined(h) && (b.setTableData(h, g.checkNestedProperty(a.header, "viewKeys", "uniqueKey") ? a.header.viewKeys.uniqueKey : void 0),
            b.options.toggleFirstRowOnLoad && d(function() {
                b.uiGridApi.selection.selectRow && b.uiGridApi.selection.selectRow(b.data[0])
            }))
        }, function(a) {
            angular.isObject(a) && g.checkNestedProperty(a, "error", "details") ? (c.error("Error occurred while retrieving table data: " + msg.error.message + ":" + msg.error.details),
            c.error(msg.error.message + ": " + msg.error.details)) : (c.info("API error response needs to be updated to conform to company guidelines" + b.dataUrl),
            c.error("Error occurred while retrieving table data.")),
            b.errorOccurred = !0
        })
    }
    ,
    N.prototype.getTableData = function() {
        var a = this;
        return e.getTableData(a.dataUrl).then(function(a) {
            return a
        }, function(b) {
            angular.isObject(b) && g.checkNestedProperty(b, "error", "details") ? (c.error("Error occurred while retrieving table data: " + b.error.message + ":" + b.error.details),
            c.error(b.error.message + ": " + b.error.details)) : (c.info("API error response needs to be updated to conform to company guidelines" + a.dataUrl),
            c.error("Error occurred while retrieving table data.")),
            a.errorOccurred = !0
        }),
        !1
    }
    ,
    N.prototype.refresh = function(a) {
        var b = this;
        return angular.isDefined(a) && a instanceof k && j.unsubscribe(a),
        b.serverCallInProgress = !0,
        b.postRefreshCallback ? (b.postRefreshCallback(),
        d(function() {
            b.serverCallInProgress = !1
        }),
        !0) : void e.getTableData(b.dataUrl).then(function(c) {
            b.serverCallInProgress = !1,
            void 0 !== c.data && (b.taggedSearchObject.setSearchCache(c.data),
            angular.isUndefined(b.taggedSearchObject) || angular.isUndefined(b.taggedSearchObject.getSearchProperties()) ? angular.isDefined(b.onRefreshCallback) ? b.onRefreshCallback(c.data) : b.refreshTableData(c.data) : (angular.isDefined(b.onRefreshCallback) ? b.onRefreshCallback(c.data) : b.refreshTableData(c.data),
            b.taggedSearchObject.searchData()),
            b.options.singleSelect && b.data.length > 0 && b.uiGridApi.grid.renderContainers.body.visibleRowCache.length > 0 && b.uiGridApi.selection.selectRow(b.uiGridApi.grid.renderContainers.body.visibleRowCache[0].entity),
            C(a)),
            b.uiGridApi.core.notifyDataChange(m.dataChange.EDIT)
        }, function(d) {
            b.serverCallInProgress = !1,
            angular.isObject(d) && g.checkNestedProperty(d, "error", "details") ? (c.error("Error occurred while retrieving table data: " + d.error.message + ":" + d.error.details),
            f.error(d.error.message + ": " + d.error.details)) : (c.info("API error response needs to be updated to conform to company guidelines:" + b.dataUrl),
            f.error("Error occurred while retrieving table data.")),
            C(a),
            b.error = !0
        })
    }
    ,
    N.prototype.addTableRow = function() {
        var a = {}
          , b = this;
        return b.options.addMaxRow && b.data.length == b.options.addMaxRow ? (c.info("Reached maximum number of rows."),
        !1) : void (angular.isUndefined(b.newRowData) ? angular.forEach(this.columnDefs, function(b, c) {
            a[b.name] = b.displayName
        }) : this.data.push(angular.copy(b.newRowData)))
    }
    ,
    N.prototype.deleteTableRow = function(a) {
        var b = this;
        angular.forEach(b.getSelectedRows(), function(a, c) {
            b.data.splice(b.data.lastIndexOf(a), 1)
        })
    }
    ,
    N.prototype.setTaggedSearchObject = function(a) {
        angular.isUndefined(a) || (this.taggedSearchObject = a)
    }
    ,
    N.prototype.setNewRowToggleData = function(a) {
        this.newRowData = a
    }
    ,
    N.prototype.setTableData = function(a, b) {
        var d = this;
        a = o.convertToHostname(d.columnDefs, a),
        angular.isDefined(d.taggedSearchObject) && !_.isEmpty(d.taggedSearchObject) && d.taggedSearchObject.setSearchCache(a),
        (!angular.isDefined(b) || b.length < 1) && c.info("Server API update needed - viewKey for call: " + d.dataUrl),
        angular.isDefined(b) && 1 == b.length && (d.options.dataUid = b[0]),
        angular.copy(a, d.data),
        angular.isDefined(b) && b.length > 1 && (d.options.dataUid = "dataUid",
        angular.forEach(d.data, function(a) {
            a.dataUid = B(a, b)
        }))
    }
    ,
    N.prototype.refreshTableData = function(a) {
        var b = this;
        if (a = o.convertToHostname(b.columnDefs, a),
        angular.isUndefined(b.options.dataUid) || b.data.length > 1e4)
            return angular.copy(a, b.data),
            !0;
        var c = []
          , d = [];
        angular.forEach(b.data, function(d, e) {
            _.findIndex(a, function(a) {
                return a[b.options.dataUid] === d[b.options.dataUid]
            }) < 0 && c.push(e)
        }),
        g.removeFromArray(b.data, c),
        angular.forEach(a, function(a, c) {
            var e = _.findIndex(b.data, function(c) {
                return c[b.options.dataUid] === a[b.options.dataUid]
            });
            e < 0 ? d.push({
                index: c,
                newObject: a
            }) : angular.extend(b.data[e], a)
        }),
        g.insertIndexOfArray(b.data, d)
    }
    ,
    N.prototype.initializeTableScrollbar = function() {
        var a = this;
        return !a.visibleScrollbarSet && void a.createBodyScrollbar()
    }
    ,
    N.prototype.createBodyScrollbar = function() {
        var a = this;
        if (a.element.bodyContainer || (a.element.bodyContainer = a.element.ngElem.find(F)),
        a.options.singleSelect) {
            if (a.element.bodyContainer.width() && a.element.bodyContainer.height()) {
                var b = a.element.bodyContainer.find(E).perfectScrollbar({
                    scrollYOpacity: "0",
                    scrollYDisplay: "none",
                    minScrollbarLength: "20"
                });
                b && (a.visibleScrollbarSet = !0,
                a.updateContainerScrollbar())
            }
        } else
            a.element.bodyContainer.width() && a.element.bodyContainer.height() && (b = a.element.bodyContainer.find(E).perfectScrollbar({
                minScrollbarLength: "20"
            }),
            b && (a.visibleScrollbarSet = !0,
            a.updateContainerScrollbar()))
    }
    ,
    N.prototype.updateContainerScrollbar = function(a) {
        function b() {
            e.element.rightContainer.find(E).perfectScrollbar({
                suppressScrollX: !0,
                minScrollbarLength: "20"
            }),
            e.element.rightContainer.find(E).perfectScrollbar("update")
        }
        function c() {
            e.element.leftContainer.find(E).perfectScrollbar({
                suppressScrollX: !0,
                scrollYDisplay: "none",
                scrollYOpacity: "0",
                minScrollbarLength: "20"
            }),
            e.element.leftContainer.find(E).perfectScrollbar("update")
        }
        var e = this;
        e.element.bodyContainer || e.createBodyScrollbar(),
        d(function() {
            e.options.singleSelect ? (e.element.rightContainer && e.element.rightContainer.length || (e.element.rightContainer = e.element.ngElem.find(G)),
            b()) : e.options.multiSelect && (e.element.leftContainer && e.element.leftContainer.length || (e.element.leftContainer = e.element.ngElem.find(H)),
            c()),
            e.element.bodyContainer.find(E).perfectScrollbar("update"),
            a || e.element.bodyContainer.find(E).scrollTop(0)
        }, 500)
    }
    ,
    N.prototype.destroyContainerScrollbar = function() {
        var a = this;
        a.element.bodyContainer.find(E).perfectScrollbar("destroy")
    }
    ,
    N.prototype.addVisibleUiGridRightContainer = function(a) {
        this.element.rightCanvas && this.element.rightCanvas.length || (this.element.rightContainer && this.element.rightContainer.length || (this.element.rightContainer = this.element.ngElem.find(G)),
        this.element.rightCanvas = this.element.rightContainer.find(I));
        var b = angular.element($(this.element.rightCanvas).children()[a].lastElementChild);
        b.children().find("md-icon").addClass("hover")
    }
    ,
    N.prototype.removeVisibleUiGridRightContainer = function(a) {
        this.element.rightCanvas && this.element.rightCanvas.length || (this.element.rightContainer && this.element.rightContainer.length || (this.element.rightContainer = this.element.ngElem.find(G)),
        this.element.rightCanvas = this.element.rightContainer.find(I));
        var b = angular.element($(this.element.rightCanvas).children()[a].lastElementChild);
        b.children().find("md-icon").removeClass("hover")
    }
    ,
    N.prototype.addVisibleUiGridBodyContainer = function(a) {
        this.element.gridCanvases || (this.element.gridCanvases = this.element.ngElem.find(I));
        for (var b = 0; b < this.element.gridCanvases.length - 1; b++)
            angular.element($(this.element.gridCanvases[b]).children()[a]).addClass("hover")
    }
    ,
    N.prototype.removeVisibleUiGridBodyContainer = function(a) {
        this.element.gridCanvases || (this.element.gridCanvases = this.element.ngElem.find(I));
        for (var b = 0; b < this.element.gridCanvases.length - 1; b++)
            angular.element($(this.element.gridCanvases[b]).children()[a]).removeClass("hover")
    }
    ,
    N.prototype.addVisibleUiGridLeftContainer = function(a) {
        this.element.gridCanvases || (this.element.gridCanvases = this.element.ngElem.find(I));
        for (var b, c = 0; c < this.element.gridCanvases.length; c++)
            $(this.element.gridCanvases[c]).children()[a] && $(this.element.gridCanvases[c]).children()[a].lastElementChild && (b = $($(this.element.gridCanvases[c]).children()[a].lastElementChild.children[0])),
            $($(this.element.gridCanvases[c]).children()[a]).addClass("hover"),
            b && b.addClass("hover")
    }
    ,
    N.prototype.removeVisibleUiGridLeftContainer = function(a) {
        this.element.gridCanvases || (this.element.gridCanvases = this.element.ngElem.find(I));
        for (var b, c = 0; c < this.element.gridCanvases.length; c++)
            $(this.element.gridCanvases[c]).children()[a] && $(this.element.gridCanvases[c]).children()[a].lastElementChild && (b = $($(this.element.gridCanvases[c]).children()[a].lastElementChild.children[0])),
            $($(this.element.gridCanvases[c]).children()[a]).removeClass("hover"),
            b && b.removeClass("hover")
    }
    ,
    N.prototype.openModal = function(a, b, c, d, e) {
        n.show({
            templateUrl: a,
            controller: b,
            resolve: c,
            targetEvent: e
        }).then(function() {
            d && d()
        })
    }
    ;
    var O = function(a) {
        var b = this;
        b.cellTemplate = '<div class="ui-grid-cell-contents">{{ COL_FIELD | formatBytes }}</div>'
    }
      , P = function(a) {
        var b = this;
        b.cellTemplate = '<div class="ui-grid-cell-contents">{{ COL_FIELD | formatKbpsToMbps }}</div>'
    };
    return N
}
function vipUiGridHoverRow(a) {
    return {
        link: function(a) {
            var b = ".hoverActionRowButtons";
            a.addOnHoverColor = function(a, c, d) {
                c.grid.hasLeftContainer() && c.grid.options.vipTable.addVisibleUiGridLeftContainer(d),
                c.grid.hasRightContainer() && ($(a.target).closest(b).length || $(a.target).find(b).length ? (c.grid.options.vipTable.addVisibleUiGridBodyContainer(d),
                angular.element(a.target.closest(b)).find("md-icon").addClass("hover")) : c.grid.options.vipTable.addVisibleUiGridRightContainer(d))
            }
            ,
            a.removeOnHoverColor = function(a, c, d) {
                c.grid.hasLeftContainer() && c.grid.options.vipTable.removeVisibleUiGridLeftContainer(d),
                c.grid.hasRightContainer() && ($(a.target).closest(b).length || $(a.target).find(b).length ? (c.grid.options.vipTable.removeVisibleUiGridBodyContainer(d),
                angular.element(a.target.closest(b)).find("md-icon").removeClass("hover")) : c.grid.options.vipTable.removeVisibleUiGridRightContainer(d))
            }
        }
    }
}
function uiGridHoverActionRowButtons(a, b, c, d, e) {
    return {
        replace: !0,
        restrict: "EA",
        template: a.get("ui-grid/hoverActionRowButtons"),
        require: "^uiGrid",
        link: function(a, c, f, g) {
            a.uiGridCtrl = g,
            a.vipTable = g.grid.options.vipTable,
            a.hoverActions = g.grid.options.vipTable.hoverActions,
            a.showHoverActionsButton = !0;
            var h = _.filter(a.hoverActions, "hideCallback")
              , i = !(!angular.isDefined(h) || h.length !== a.hoverActions.length);
            if (i && angular.isDefined(a.rowRenderIndex) && angular.isDefined(a.row) && angular.isDefined(a.row.entity)) {
                var j = 0;
                angular.forEach(h, function(b) {
                    b.hideCallback(a.row) && j++
                }),
                j === h.length && (a.showHoverActionsButton = !1)
            }
            a.status = {
                isopen: !1
            },
            a.isParentRow = function(a) {
                return !angular.isDefined(a.treeNode) || _.isEmpty(a.treeNode.parentRow)
            }
            ,
            a.toggleDropdown = function(c, d) {
                if (d.stopPropagation(),
                $("#table-dropdown-menu").remove(),
                a.tableHoverEvent = d,
                a.status.isopen)
                    a.uiGridCtrl.grid.api.selection.unSelectRow(c.entity),
                    $(".delete-confirmation").addClass("hide"),
                    $("#table-dropdown-menu").remove();
                else {
                    a.uiGridCtrl.grid.api.selection.selectRow(c.entity);
                    var f = '<ul class="dropdown-menu hover-action-cell" id="table-dropdown-menu" role="menu" aria-labelledby="dropdownMenu">';
                    if (angular.forEach(a.hoverActions, function(a, b) {
                        f += "modal" === a.open ? '<li class="pointerCursor" ng-hide="' + (!!a.hideCallback && a.hideCallback(c)) + '" id="hover-action-row-' + a.type.replace(/ /g, "") + '"><a ng-click="open(row,\'' + a.type + "')\">" + a.type + "</a></li>" : "callback" === a.open ? '<li class="pointerCursor" ng-hide="' + (!!a.hideCallback && a.hideCallback(c)) + '" id="hover-action-row-' + a.type.replace(/ /g, "") + '"><a ng-click="callBack(hoverActions[' + b + '],row); closeDropdown(row, $event)">' + a.type + "</a></li>" : '<li class="pointerCursor" ng-hide="' + (!!a.hideCallback && a.hideCallback(c)) + '" id="hover-action-row-' + a.type.replace(/ /g, "") + '"><a ng-click="confirm($event, row, hoverActions[' + b + '])">' + a.type + "</a></li>"
                    }, this),
                    f += "</ul>",
                    angular.isDefined(a.vipTable.tableId)) {
                        var h = a.vipTable.tableId;
                        $(d.target).closest("#" + h).after(b(f)(a))
                    } else
                        $(d.target).closest("#ui-grid-table").after(b(f)(a));
                    $(".hover-action-cell").addClass("open"),
                    e(function() {
                        d.clientY < $("#vip_table").height() - $(".hover-action-cell").height() ? $(".hover-action-cell").offset({
                            top: d.clientY + 22
                        }) : $(".hover-action-cell").offset({
                            top: d.clientY - ($(".hover-action-cell").height() + 22)
                        })
                    }),
                    g.grid.api.core.on.scrollBegin(a, function(b) {
                        b.verticalScrollLength > 0 && a.status.isopen && $("#table-dropdown-menu").remove()
                    }),
                    g.grid.api.core.on.scrollEnd(a, function(b) {
                        b.verticalScrollLength > 0 && a.status.isopen && $("#table-dropdown-menu").remove()
                    })
                }
                a.status.isopen = !a.status.isopen
            }
            ,
            a.confirm = function(b, c, e) {
                var f = d.confirm().title(e.title).textContent(e.content).targetEvent(a.tableHoverEvent).ok("OK").cancel("Cancel");
                e.precondition && e.precondition(c, f._options, e),
                d.show(f).then(function() {
                    e.okButtonActionFn && e.okButtonActionFn(c, a.vipTable)
                }, function() {
                    console.log("Modal dismissed at: " + new Date)
                }),
                $("#table-dropdown-menu").remove()
            }
            ,
            a.callBack = function(b, c) {
                b.okButtonActionFn(c, a.tableHoverEvent, a.vipTable)
            }
            ,
            a.addOnHoverColor = function(a, b, c) {
                var d = angular.element($(".ui-grid-render-container-body").find(".ui-grid-canvas").children()[c]);
                d.addClass("active")
            }
            ,
            a.removeOnHoverColor = function(a, b, c) {
                var d = angular.element($(".ui-grid-render-container-body").find(".ui-grid-canvas").children()[c]);
                d.removeClass("active")
            }
            ,
            a.closeDropdown = function(a, b) {
                b.stopPropagation(),
                $("#table-dropdown-menu").remove()
            }
        },
        controller: ["$scope", "$mdDialog", function(a, b) {
            a.open = function(c, d) {
                var e = {};
                a.hoverActions.some(function(f) {
                    if (d === f.type) {
                        angular.isDefined(f.resolve) && (e = angular.copy(f.resolve)),
                        e.selectedRow = function() {
                            return c.entity
                        }
                        ,
                        e.table = function() {
                            return a.vipTable
                        }
                        ;
                        b.show({
                            templateUrl: f.templateUrl,
                            controller: f.controller,
                            resolve: e,
                            targetEvent: a.tableHoverEvent
                        }).then(function(b) {
                            a.selected = b,
                            f.modalReturnCallback && f.modalReturnCallback(b, c.entity, a.vipTable),
                            a.uiGridCtrl.grid.api.selection.selectRow(c.entity)
                        }, function() {
                            console.log("Modal dismissed at: " + new Date),
                            a.uiGridCtrl.grid.api.selection.selectRow(c.entity)
                        });
                        return $("#table-dropdown-menu").remove(),
                        !0
                    }
                })
            }
            ,
            c.bind("click", function(b) {
                return b.stopPropagation(),
                !($(b.target).closest("#table-dropdown-menu").length > 0) && (angular.element($(".confirm-message")).remove(),
                $("#table-dropdown-menu").remove(),
                void (a.status.isopen = !1))
            })
        }
        ]
    }
}
function TreeBasedTable(a, b, c, d, e) {
    var f = {
        treeIndent: 10,
        showTreeExpandNoChildren: !1,
        treeLevels: {}
    }
      , g = function(b, c, d, e, g) {
        a.apply(this, [b, c, d, e]),
        this.treeSettings = angular.extend({}, g, f),
        this.onTreeExpansion = void 0
    };
    return g.prototype = new a,
    g.prototype.setTreeLevelGroupings = function(a) {
        this.treeSettings.treeLevels = a
    }
    ,
    g.prototype.loadDataFromUrl = function(a) {
        var e = this;
        e.dataUrl = a ? a : e.dataUrl,
        b.getTableData(e.dataUrl).then(function(a) {
            e.setTableData(a.data)
        }, function(a) {
            angular.isObject(a) && d.checkNestedProperty(a, "error", "details") ? ($log.error("Error occurred while retrieving table data: " + a.error.message + ":" + a.error.details),
            c.error(a.error.message + ": " + a.error.details)) : ($log.info("API error response needs to be updated to conform to company guidelines" + e.dataUrl),
            c.error("Error occurred while retrieving table data.")),
            e.error = !0
        })
    }
    ,
    g.prototype.setTableData = function(a, b) {
        var c = this;
        c.treeSettings.treeLevels = _.sortBy(c.treeSettings.treeLevels, "treeLevel");
        var f = []
          , g = {};
        angular.forEach(c.treeSettings.treeLevels, function(b) {
            _.chain(a).groupBy(b.groupByProperty).map(function(a, c) {
                g[b.newRowProperty] = c,
                g.$$treeLevel = b.treeLevel,
                angular.isDefined(b.copyToParent) && angular.forEach(b.copyToParent, function(b) {
                    g[b] = angular.isDefined(a[0][b]) ? a[0][b] : null
                }),
                f.push(angular.copy(g)),
                f = f.concat(a)
            }).value()
        }),
        f = e.convertToHostname(c.columnDefs, f),
        angular.copy(f, c.data);
        var h = d.getSearchPropertiesForCols(c.columnDefs);
        c.taggedSearchObject.setSearchProperties(h),
        c.taggedSearchObject.setSearchCache(f)
    }
    ,
    g.prototype.refreshTableData = function(b) {
        var c = this;
        c.treeSettings.treeLevels = _.sortBy(c.treeSettings.treeLevels, "treeLevel");
        var d = []
          , e = {};
        angular.forEach(c.treeSettings.treeLevels, function(a) {
            _.chain(b).groupBy(a.groupByProperty).map(function(b, c) {
                e[a.newRowProperty] = c,
                e.$$treeLevel = a.treeLevel,
                angular.isDefined(a.copyToParent) && angular.forEach(a.copyToParent, function(a) {
                    e[a] = angular.isDefined(b[0][a]) ? b[0][a] : null
                }),
                d.push(angular.copy(e)),
                d = d.concat(b)
            }).value()
        }),
        a.prototype.refreshTableData.call(c, d),
        c.taggedSearchObject.setSearchCache(d)
    }
    ,
    g.prototype.setOnTreeExpansion = function(a) {
        this.onTreeExpansion = a
    }
    ,
    g
}
function vipTextArea() {
    return {
        restrict: "E",
        templateUrl: "app/common/textArea-partial.html",
        require: ["^form", "ngModel"],
        scope: {
            textAreaLabel: "@",
            textAreaName: "@",
            textAreaClass: "@",
            textRequired: "@",
            value: "=ngModel",
            textAreaDisabled: "@"
        },
        link: function(a, b, c, d) {
            a.form = d[0],
            a.$watch("value", function() {
                d[1].$setViewValue(a.value)
            })
        }
    }
}
function vipUrlValidation() {
    var a = /(http|ftp|https):\/\/[\w-]+/
      , b = /(http|ftp):\/\/[\w-]+/;
    return {
        require: "ngModel",
        scope: {
            noHttps: "@"
        },
        link: function(c, d, e, f) {
            c.$watch(e.vipUrlValidation, function(d) {
                d ? f.$validators.url = function(d) {
                    if (c.noHttps)
                        var e = b.test(d);
                    else
                        var e = a.test(d);
                    return e
                }
                : f.$validators.url = function(a) {
                    return !0
                }
            })
        }
    }
}
function appUtil(a, b, c, d, e) {
    _.mixin({
        findByValues: function(a, b, c) {
            return _.filter(a, function(a) {
                return _.contains(c, a[b])
            })
        },
        addValueProperty: function(a, b) {
            return _.each(a, function(a) {
                a.value = a[b]
            }),
            a
        },
        pluckMultiple: function(a, b) {
            return _.map(a, function(a) {
                return _.pick(a, b)
            })
        },
        groupByMulti: function(a, b) {
            return b.length ? _.mapValues(_.groupBy(a, _.first(b)), function(a) {
                return _.groupByMulti(a, _.rest(b))
            }) : a
        }
    }),
    String.prototype.startsWith || Object.defineProperty(String.prototype, "startsWith", {
        enumerable: !1,
        configurable: !1,
        writable: !1,
        value: function(a, b) {
            return b = b || 0,
            this.lastIndexOf(a, b) === b
        }
    }),
    String.prototype.endsWith || Object.defineProperty(String.prototype, "endsWith", {
        value: function(a, b) {
            var c = this.toString();
            (void 0 === b || b > c.length) && (b = c.length),
            b -= a.length;
            var d = c.indexOf(a, b);
            return d !== -1 && d === b
        }
    }),
    Array.prototype.reset || Object.defineProperty(Array.prototype, "reset", {
        value: function() {
            this.length = 0
        }
    }),
    String.prototype.capitalizeGivenLetter || Object.defineProperty(String.prototype, "capitalizeGivenLetter", {
        value: function(a, b) {
            var c = function(a, b) {
                return a.substr(0, b) + a.charAt(b).toUpperCase() + a.substr(b + 1)
            };
            if (angular.isDefined(b) && "" !== b && this.search(b) > -1) {
                var d = this.split(b)
                  , e = [];
                return angular.forEach(d, function(b) {
                    e.push(c(b, a))
                }),
                e.join(b)
            }
            return c(this, a)
        }
    }),
    String.prototype.toInitialCapsCase || Object.defineProperty(String.prototype, "toInitialCapsCase", {
        value: function() {
            return this.replace(/\w\S*/g, function(a) {
                return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase()
            })
        }
    }),
    String.prototype.toHyphenateString || Object.defineProperty(String.prototype, "toHyphenateString", {
        value: function() {
            return this.replace(/\s+/g, "-").toLowerCase()
        }
    });
    var f = function(a) {
        return /^\d+$/.test(a)
    }
      , g = function(a) {
        if (angular.isArray(a) || (a = [a]),
        a.length < 1)
            return a;
        var b = [];
        return angular.forEach(a, function(a) {
            var c = a.split("-").shift();
            if (d.validateSoftwareImageVersion(c)) {
                for (var e = c.split("."), g = [], i = 0; i < 4; i++)
                    h.isUndefinedOrEmpty(e[i]) ? g.push(0) : f(e[i]) ? g.push(e[i]) : g.push(0);
                a = g[0].toString();
                for (var i = 1; i < 4; i++)
                    a += "." + g[i];
                b.push(a)
            } else
                b.push("99.99.999.0")
        }),
        a.reset(),
        a = angular.copy(b)
    }
      , h = {
        isUndefinedOrEmpty: function(a) {
            return _.isUndefined(a) || _.isEmpty(a)
        },
        isNull: function(a) {
            return _.isNull(a)
        },
        getStateString: function(a) {
            var b = ""
              , c = a.current.name.split(".");
            return angular.forEach(c, function(a, c) {
                0 !== c && (b += a + "_")
            }),
            b
        },
        getObjectFromArray: function(a, c) {
            var d;
            return d = b("filter")(a, {
                id: c
            })
        },
        createErrorObject: function(a, b) {
            var c;
            return c = {
                error: {
                    message: a,
                    details: b
                }
            }
        },
        createErrorObjectArray: function(a) {
            var b = this
              , c = [];
            return angular.forEach(a, function(a) {
                c.push(b.createErrorObject(a.message, a.details))
            }),
            c
        },
        stopPolling: function(a) {
            return angular.isDefined(a) && (c.cancel(a),
            a = void 0),
            a
        },
        removeFromArray: function(a, c) {
            c = b("orderBy")(c);
            for (var d = c.length; d--; )
                a.splice(c[d], 1)
        },
        insertIndexOfArray: function(a, b) {
            angular.forEach(b, function(b) {
                a.splice(b.index, 0, b.newObject)
            })
        },
        isNumeric: function(a) {
            return !isNaN(parseInt(a)) && isFinite(a)
        },
        removeObjectFromArray: function(a, b) {
            for (var c = 0; c < a.length; c++)
                if (a[c].name === b) {
                    a.splice(c, 1);
                    break
                }
        },
        checkNestedProperty: function(a) {
            if (!a)
                return !1;
            var b = Array.prototype.slice.call(arguments, 1)
              , c = b.join(".");
            return !angular.isUndefined(_.get(a, c))
        },
        convertStrToStrArray: function(a) {
            var b = [];
            return angular.forEach(a.split(","), function(a) {
                b.push(a.trim())
            }),
            b
        },
        convertCommaOrSpaceStrToStrArray: function(a) {
            var b = [];
            return a.contains(",") ? (angular.forEach(a.split(","), function(a) {
                b.push(a.trim())
            }),
            angular.forEach(b, function(a, c) {
                b = b.concat(a.split(" ")),
                b[c] = null
            })) : angular.forEach(a.split(" "), function(a) {
                b.push(a.trim())
            }),
            b = _.chain(b).omit(_.isUndefined).omit(_.isNull).value()
        },
        convertStrToIntegerArray: function(a) {
            var b = [];
            return angular.forEach(a.split(","), function(a) {
                b.push(parseInt(a.trim(), 10))
            }),
            b
        },
        convertStrWithSpacesToNumericArray: function(a) {
            var b = [];
            return angular.forEach(a.split(" "), function(a) {
                b.push(parseInt(a.trim(), 10))
            }),
            b
        },
        convertArrayToString: function(a) {
            var b = "";
            return angular.forEach(a, function(a) {
                b += a + ","
            }),
            b = b.slice(0, -1)
        },
        renameObjectKey: function(a, b, c) {
            return b !== c && (Object.defineProperty(a, c, Object.getOwnPropertyDescriptor(a, b)),
            delete a[b]),
            a
        },
        getSearchPropertiesForCols: function(a) {
            var b = _.map(a, function(a) {
                if (!angular.isDefined(a.isSearch) || 0 != a.isSearch) {
                    var b = _.pick(a, ["name", "displayName", "type", "displayFormat"]);
                    return b.isSearch = !0,
                    b
                }
            });
            return _.reject(b, function(a) {
                return angular.isUndefined(a)
            })
        },
        setTemplateFieldValues: function(a) {
            for (var b in a)
                angular.equals(b, "$$hashKey") || (a[b].hasOwnProperty("optionType") && a[b].hasOwnProperty("dataType") ? (a[b].defaultOption = a[b].vipType || a[b].defaultOption,
                angular.equals(a[b].dataType.type, "number") ? a[b].dataType.default = angular.equals(parseFloat(a[b].vipValue), NaN) ? a[b].dataType.default : parseFloat(a[b].vipValue) : a[b].dataType.default = a[b].vipValue || a[b].dataType.default) : this.setTemplateFieldValues(a[b]));
            return a
        },
        clearSelectedList: function(a) {
            angular.forEach(a, function(a) {
                angular.extend(a, {
                    selected: !1
                })
            })
        },
        generateRainbowColors: function(a, b) {
            var c, d, e, f = b / a, g = ~~(6 * f), h = 6 * f - g, i = 1 - h;
            switch (g % 6) {
            case 0:
                c = 1,
                d = h,
                e = 0;
                break;
            case 1:
                c = i,
                d = 1,
                e = 0;
                break;
            case 2:
                c = 0,
                d = 1,
                e = h;
                break;
            case 3:
                c = 0,
                d = i,
                e = 1;
                break;
            case 4:
                c = h,
                d = 0,
                e = 1;
                break;
            case 5:
                c = 1,
                d = 0,
                e = i
            }
            var j = "#" + ("00" + (~~(255 * c)).toString(16)).slice(-2) + ("00" + (~~(255 * d)).toString(16)).slice(-2) + ("00" + (~~(255 * e)).toString(16)).slice(-2);
            return j
        },
        emptyObject: function(a) {
            for (var b in a)
                a.hasOwnProperty(b) && delete a[b];
            return a
        },
        formatEncapsulation: function(a) {
            switch (a.toLowerCase()) {
            case "gre":
                return "GRE";
            case "service-gre":
                return "Service GRE";
            case "ipsec":
                return "IPSec";
            default:
                return a.toInitialCapsCase()
            }
        },
        listDiffChecker: function(a, b) {
            return a.replace(/\s+/g, "").split(",").sort().join() !== b.replace(/\s+/g, "").split(",").sort().join()
        },
        convertArrayToHashSet: function(a, b) {
            var c = {};
            return angular.forEach(a, function(a) {
                c[a[b]] = a
            }),
            c
        },
        compareVersions: function(a, b) {
            return parseInt(a.replace(/\D/g, "").substring(0, 3), 10) < parseInt(b.toString().replace(/\D/g, "").substring(0, 3), 10)
        },
        compareObjects: function(a, b, c, d) {
            if (a.length !== b.length)
                return !1;
            var e = this.convertArrayToHashSet(a, c);
            return _.every(b, function(a) {
                return a[c]in e && ("string" == typeof a[d] && "string" == typeof e[a[c]][d] ? a[d].replace(/\s+/g, "").split(",").sort().join() === e[a[c]][d].replace(/\s+/g, "").split(",").sort().join() : void 0)
            })
        },
        appendStringToDataObject: function(a, b, c) {
            var d;
            angular.isDefined(c) && angular.isArray(c) || (c = []),
            angular.forEach(a, function(a) {
                d = {},
                d.value = b + " - " + a,
                d.key = a,
                c.push(d)
            })
        },
        convertEpochToServerDate: function(a) {
            var c = new Date(a);
            return b("date")(c, "yyyy-MM-ddTHH:mm:ss")
        },
        isUpgradeVersionSupported: function(a, b) {
            var c = !0
              , d = !1
              , e = "Upgrading vEdge to version higher than the controllers may cause software incompatibilities. It is recommended that you upgrade the controller software before proceeding."
              , f = angular.copy(a)
              , h = angular.copy(b);
            f = g(f),
            h = g(h);
            var i = h[0].split(".");
            return angular.forEach(f, function(a) {
                for (var b = a.split("."), f = 0; f < 4 && c; f++)
                    if (parseInt(i[f]) > parseInt(b[f]))
                        c = !1,
                        f < 2 && (d = !0,
                        e = "Upgrading vEdge to this version is not supported. Upgrade the controllers to the same or higher major software version first.");
                    else if (parseInt(i[f]) < parseInt(b[f]))
                        break
            }),
            c ? e = "" : "",
            {
                isUpgradeSafe: c,
                blockUpgrade: d,
                warningMessage: e
            }
        },
        normalizeVersion: function(a) {
            return g(a)
        },
        filterData: function(a, b, c) {
            var d = [];
            return angular.forEach(b, function(b) {
                var b = b;
                angular.forEach(a, function(a) {
                    _.isObject(b) ? a[c] === b.id && (d.push(a),
                    a.mode = b.type) : a[c] === b && d.push(a)
                })
            }),
            d
        },
        mergeLists: function(a, b) {
            var c = [];
            return angular.forEach(b, function(b) {
                c = c.concat(a[b])
            }),
            c
        },
        formatBytes: function(a, b) {
            if (0 == a)
                return "";
            var c = ["bytes", "KB", "MB", "GB", "TB", "PB"]
              , d = Math.floor(Math.log(a) / Math.log(1024))
              , e = (a / Math.pow(1024, Math.floor(d))).toFixed(2);
            return d = d < 0 ? -d : d,
            b && (e += " " + c[d]),
            e
        },
        convertEmptyStringToNull: function(a) {
            return _.isEmpty(a) && (a = null),
            a
        }
    };
    return h
}
function isArray() {
    return function(a) {
        return angular.isArray(a)
    }
}
function uiSelectRequired() {
    return {
        require: "ngModel",
        link: function(a, b, c, d) {
            d.$validators.uiSelectRequired = function(a, b) {
                console.log("validating");
                var c;
                if (angular.isArray(a))
                    c = a;
                else {
                    if (!angular.isArray(b))
                        return !1;
                    c = b
                }
                return c.length > 0
            }
        }
    }
}
function $debounce(a, b, c, d) {
    function e(e, i, j, k) {
        var l, m, n, o = c.defer(), p = o.promise, q = angular.isDefined(j) && !j, r = !1;
        angular.forEach(g, function(a, b) {
            angular.equals(g[b].fn, e) && (r = !0,
            n = b)
        }),
        r ? (f[g[n].timeoutId].reject("bounced"),
        b.defer.cancel(g[n].timeoutId)) : (n = h++,
        g[n] = {
            fn: e
        });
        var s = function() {
            delete g[n];
            try {
                o.resolve(e(k))
            } catch (a) {
                o.reject(a),
                d(a)
            }
            q || a.$apply()
        };
        return l = b.defer(s, i),
        g[n].timeoutId = l,
        m = function(a) {
            delete f[p.$$timeoutId]
        }
        ,
        p.$$timeoutId = l,
        f[l] = o,
        p.then(m, m),
        p
    }
    var f = {}
      , g = {}
      , h = 0;
    return e.cancel = function(a) {
        return !!(a && a.$$timeoutId in f) && (f[a.$$timeoutId].reject("canceled"),
        b.defer.cancel(a.$$timeoutId))
    }
    ,
    e
}
function vipAppendStringValidation(a, b) {
    return {
        require: "ngModel",
        scope: {
            contentType: "=",
            prependString: "="
        },
        link: function(a, b, c, d) {
            a.ngmodel = d,
            d.$validators.appendFormat = function(b) {
                var c = !0;
                if ("" === b)
                    return c;
                parseInt(b.replace(/^\D+/g, ""), 10);
                var d = parseInt(b.substring(a.prependString.length), 10);
                return isNaN(d) && (c = !1),
                c
            }
            ,
            d.$validators.appendRange = function(b) {
                var c = !0;
                if ("" === b)
                    return c;
                var d = parseInt(b.substring(a.prependString.length), 10);
                c = d >= a.contentType.min && d <= a.contentType.max,
                "" + parseInt(d, 10) != d && (c = !1);
                var e = a.contentType.maxLength
                  , f = a.contentType.minLength;
                return (b.length < f || b.length > e) && (c = !1),
                c
            }
        }
    }
}
function domainValidation() {
    return {
        require: "ngModel",
        link: function(a, b, c, d) {
            var e = new CommonsValidator.DomainValidator;
            a.ngmodel = d,
            d.$validators.domain = function(a) {
                return !a || (a.endsWith(".com") && e.isValid(String(a)),
                e.isValid(String(a) + ".com"))
            }
        }
    }
}
function endsWithValidation() {
    return {
        require: "ngModel",
        link: function(a, b, c, d) {
            var e = c.endsWithValidation;
            a.ngmodel = d,
            d.$validators.endsWith = function(a) {
                if (a)
                    return String(a).endsWith(e)
            }
        }
    }
}
function enumListRequiredValidation(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            b.ngmodel = e,
            e.$validators.required = function(b) {
                return !a.isUndefinedOrEmpty(b)
            }
        }
    }
}
function vipHexaDecimalValidation(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            b.ngmodel = e,
            e.$validators.hexa = function(b) {
                return a.validateHexaDecimalNumber(b)
            }
        }
    }
}
function vipIpListValidation(a, b) {
    return {
        require: "ngModel",
        link: function(c, d, e, f) {
            c.ngmodel = f,
            f.$validators.ipv4v6address = function(c) {
                var d = !0;
                return "" === c ? d : (angular.isString(c) && (c = b.convertStrToStrArray(c)),
                angular.forEach(c, function(b) {
                    a.validateIpv4(b.trim()) || a.validateIpv6(b.trim()) || (d = !1)
                }),
                d)
            }
            ,
            f.$validators.max = function(a) {
                var c = !0;
                return angular.isString(a) && (a = b.convertStrToStrArray(a)),
                a && a.length > 8 && (c = !1),
                c
            }
        }
    }
}
function vipIpv4ListValidation(a, b) {
    return {
        require: "ngModel",
        link: function(c, d, e, f) {
            c.ngmodel = f,
            f.$validators.ipaddress = function(c) {
                var d = !0;
                return "" === c ? d : (angular.isString(c) && (c = b.convertStrToStrArray(c)),
                angular.forEach(c, function(b) {
                    a.validateIpv4(b.trim()) || (d = !1)
                }),
                d)
            }
            ,
            f.$validators.maxAllowed = function(a) {
                var d = !0;
                angular.isString(a) && (a = b.convertStrToStrArray(a));
                var e = 8;
                return c.inputModel.maxElements && (e = c.inputModel.maxElements),
                a && a.length > e && (d = !1),
                d
            }
        }
    }
}
function vipIpV4OptionalValidation(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            b.ngmodel = e,
            e.$validators.ipaddress = function(b) {
                return !(!angular.isUndefined(b) && !_.isNull(b) && 0 != b.length) || a.validateIpv4(b)
            }
        }
    }
}
function vipIpV4PrefixListValidation(a, b) {
    return {
        require: "ngModel",
        link: function(c, d, e, f) {
            c.ngmodel = f,
            f.$validators.ipprefix = function(c) {
                if (b.isUndefinedOrEmpty(c) || 0 == c.length)
                    return !0;
                var d = !0;
                return angular.isString(c) && (c = b.convertCommaOrSpaceStrToStrArray(c)),
                angular.forEach(c, function(b) {
                    a.validateIpv4Prefix(b.trim()) || (d = !1)
                }),
                d
            }
        }
    }
}
function vipIpV4PrefixValidation(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            b.ngmodel = e,
            e.$validators.ipprefix = function(b) {
                return !(!angular.isUndefined(b) && 0 != b.length) || a.validateIpv4Prefix(b)
            }
        }
    }
}
function vipIpv4RangeListValidation(a, b) {
    return {
        require: "ngModel",
        link: function(c, d, e, f) {
            c.ngmodel = f,
            f.$validators.ipaddress = function(c) {
                var d = !0;
                return angular.isString(c) && (c = b.convertStrToStrArray(c)),
                angular.forEach(c, function(b) {
                    if (b.indexOf("-")) {
                        var c = b.split("-");
                        angular.forEach(c, function(b) {
                            a.validateIpv4(b.trim()) || (d = !1)
                        })
                    } else
                        a.validateIpv4(b.trim()) || (d = !1)
                }),
                d
            }
            ,
            f.$validators.max = function(a) {
                var c = !0;
                return angular.isString(a) && (a = b.convertStrToStrArray(a)),
                a && a.length > 8 && (c = !1),
                c
            }
        }
    }
}
function vipIpV4V6Validation(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            b.ngmodel = e,
            e.$validators.ipv4v6address = function(b) {
                return !(!angular.isDefined(b) || 0 != b.length) || (a.validateIpv4(b) || a.validateIpv6(b))
            }
        }
    }
}
function vipIpV4Validation(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            b.ngmodel = e,
            e.$validators.ipaddress = function(b) {
                return !(!angular.isDefined(b) || _.isNull(b) || 0 != b.length) || a.validateIpv4(b)
            }
        }
    }
}
function vipIpv6ListValidation(a, b) {
    return {
        require: "ngModel",
        link: function(c, d, e, f) {
            c.ngmodel = f,
            f.$validators.ipv6address = function(c) {
                var d = !0;
                return "" === c ? d : (angular.isString(c) && (c = b.convertStrToStrArray(c)),
                angular.forEach(c, function(b) {
                    a.validateIpv6(b.trim()) || (d = !1)
                }),
                d)
            }
            ,
            f.$validators.max = function(a) {
                var c = !0;
                return angular.isString(ipv4Values) && (a = b.convertStrToStrArray(a)),
                a && a.length > 8 && (c = !1),
                c
            }
        }
    }
}
function vipIpV6PrefixValidation(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            b.ngmodel = e,
            e.$validators.ipv6prefix = function(b) {
                return !(!angular.isUndefined(b) && 0 != b.length) || a.validateIpv6Prefix(b)
            }
        }
    }
}
function vipIpV6Validation(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            b.ngmodel = e,
            e.$validators.ipv6address = function(b) {
                return !(!angular.isDefined(b) || 0 != b.length) || a.validateIpv6(b)
            }
        }
    }
}
function vipKeyValidation(a) {
    return {
        require: "ngModel",
        scope: {
            authList: "="
        },
        link: function(a, b, c, d) {
            a.ngmodel = d;
            var e = [];
            a.$watch("authList", function(a, b) {
                a !== b && d.$setValidity("key", d.$validators.key(d.$modelValue))
            }, !0),
            d.$validators.key = function(b) {
                return !(!angular.isUndefined(b) && "" !== b) || (e = [],
                angular.forEach(a.authList, function(a) {
                    e.push(a.number.vipValue)
                }),
                e.indexOf(b) > -1)
            }
        }
    }
}
function vipMacListValidation(a, b) {
    return {
        require: "ngModel",
        link: function(c, d, e, f) {
            c.ngmodel = f,
            f.$validators.macaddress = function(c) {
                var d = !0;
                return angular.isString(c) && (c = b.convertStrToStrArray(c)),
                angular.forEach(c, function(b) {
                    a.validateMac(b.trim()) || (d = !1)
                }),
                d
            }
        }
    }
}
function vipMacValidation(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            b.ngmodel = e,
            e.$validators.macaddress = function(b) {
                return !b || 0 == b.length || a.validateMac(b)
            }
        }
    }
}
function vipNumberListRangeValidation(a, b) {
    return {
        require: "ngModel",
        scope: {
            isRequired: "="
        },
        link: function(c, d, e, f) {
            var g = (f.$name,
            b.convertStrToStrArray(e.range))
              , h = [];
            e.invalidValues && (h = e.invalidValues.replace(/\s+/g, "").split(",")),
            c.$watch("isRequired", function(a, b) {
                a && a !== b && f.$setViewValue(f.$modelValue)
            }),
            f.$validators.range = function(b) {
                if (!c.isRequired)
                    return !0;
                if (!b)
                    return !1;
                for (var d = b.split(","), e = 0; e < d.length; e++) {
                    var f = !1
                      , i = d[e].split("-");
                    if (h.length && _.find(h, function(a) {
                        return a === i[0].replace(/\s+/g, "")
                    }))
                        return !1;
                    if (!/^\d+$/.test(i[0].replace(/\s+/g, "")))
                        return !1;
                    if (!a.validateNumberRange(parseFloat(i[0]), g))
                        return !1;
                    if (2 == i.length) {
                        if (parseFloat(i[0]) >= parseFloat(i[1]))
                            return !1;
                        if (!/^\d+$/.test(i[1].replace(/\s+/g, "")))
                            return !1;
                        if (!a.validateNumberRange(parseFloat(i[1]), g))
                            return !1;
                        if (h.length && (angular.forEach(h, function(a) {
                            f || parseFloat(a) >= parseFloat(i[0]) && parseFloat(a) <= parseFloat(i[1]) && (f = !0)
                        }),
                        f))
                            return !1
                    }
                }
                return !0
            }
        }
    }
}
function vipNumberListValidation(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            b.ngmodel = e;
            var f = b.inputModel.dataType;
            e.$validators.number = function(b) {
                var c = !0;
                return "" === b ? c : (angular.isString(b) && (b = a.convertStrToStrArray(b)),
                angular.forEach(b, function(a) {
                    if (angular.equals(parseInt(a.trim()), NaN))
                        c = !1;
                    else {
                        var b = parseInt(a.trim())
                          , d = !_.isUndefined(f.min)
                          , e = !_.isUndefined(f.max);
                        d && e ? c = b >= f.min && b <= f.max : d ? c = b >= f.min : e && (c = b <= f.max)
                    }
                }),
                c)
            }
        }
    }
}
function vipNumberRangeValidation(a, b) {
    return {
        require: "ngModel",
        link: function(c, d, e, f) {
            var g = (f.$name,
            b.convertStrToStrArray(e.range));
            f.$validators.range = function(b) {
                return "" === b || a.validateNumberRange(parseFloat(b), g)
            }
        }
    }
}
function vipNumberValidation(a) {
    return {
        require: "ngModel",
        link: function(a, b, c, d) {
            a.ngmodel = d,
            d.$validators.validNumber = function(a) {
                if (!angular.isNumber(a))
                    return !0;
                var b = !0
                  , d = !1;
                return angular.isDefined(c.decimal) && angular.equals(c.decimal, "true") && (d = !0),
                d ? angular.equals(Number(a), NaN) && (b = !1) : angular.equals(parseInt(a), NaN) && (b = !1),
                b
            }
        }
    }
}
function vipPasswordValidation(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            b.$watch(d.vipPasswordValidation, function(b) {
                b ? e.$validators.password = function(b) {
                    var c = a.validatePassword(b);
                    return c
                }
                : e.$validators.password = function(a) {
                    return !0
                }
            })
        }
    }
}
function policyNameValidation(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            b.ngmodel = e,
            e.$validators.policyName = function(b) {
                return a.validatePolicyName(b)
            }
        }
    }
}
function vipRestrictedPasswordValidation(a) {
    return {
        require: "ngModel",
        link: function(a, b, c, d) {
            a.ngmodel = d,
            d.$validators.restrictedPassword = function(a) {
                return !angular.isDefined(a) || !(a.startsWith("$4") || a.startsWith("$8"))
            }
        }
    }
}
function vipSelectValidation(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            function f(a) {
                return !angular.equals(a, "_blank")
            }
            b.ngmodel = e,
            e.$setValidity("required", f(e.$viewValue)),
            b.$watch("ngmodel.$viewValue", function(c) {
                a(function() {
                    b.$apply(function() {
                        e.$setValidity("required", f(c))
                    })
                })
            })
        }
    }
}
function vipStepValidation() {
    return {
        require: "ngModel",
        link: function(a, b, c, d) {
            a.ngmodel = d,
            d.$validators.step = function(a) {
                return "" == a || !angular.isNumber(a) || a % c.step == 0
            }
        }
    }
}
function templateNameValidation(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            b.ngmodel = e,
            e.$validators.templateName = function(b) {
                return a.validateTemplateName(b)
            }
        }
    }
}
function vipOidValidation(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            b.ngmodel = e,
            e.$validators.oidIdentifier = function(b) {
                return !(!angular.isUndefined(b) && "" !== b) || a.validateOid(b)
            }
        }
    }
}
function vipTrustedListValidation(a) {
    return {
        require: "ngModel",
        scope: {
            authList: "="
        },
        link: function(b, c, d, e) {
            b.ngmodel = e;
            var f = 0
              , g = [];
            b.$watch("authList", function(a, b) {
                a !== b && e.$setValidity("trusted", e.$validators.trusted(e.$modelValue))
            }, !0),
            e.$validators.trusted = function(c) {
                return !(c.indexOf(" ") > -1) && (f = 0,
                g = [],
                angular.forEach(b.authList, function(a) {
                    g.push(a.number.vipValue)
                }),
                !c || !angular.isString(c) || (c = a.convertStrToIntegerArray(c),
                !(c.length > b.authList.length) && (c.length ? (angular.forEach(c, function(a) {
                    var b = g.indexOf(a);
                    b === -1 && f++
                }),
                !f) : void 0)))
            }
        }
    }
}
function vipValidation(a, b) {
    var c = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/
      , d = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
      , e = /^[^<>!&"\s]+$/
      , f = /^[a-zA-Z0-9-_]+$/
      , g = /^(([A-Fa-f0-9]{2}[:]){5}[A-Fa-f0-9]{2}[,]?)+$/
      , h = /^(([0-1](\.[1-3]?[0-9]))|(2\.(0|([1-9]\d*))))(\.(0|\*|([1-9]\d*))){0,126}$/
      , i = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\/)([0-2]?[0-9]$|[3]?[0-2])$/
      , j = "[\\d]+([\\056][\\d]+)+(\\-rc[\\d]+)?"
      , k = /^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?(\/)(\b([0-9]{1,2}|1[01][0-9]|12[0-8])\b)/
      , l = /^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?$/
      , m = /^[0-9a-fA-F]+$/;
    return {
        validateIpv4: function(a) {
            return d.test(a)
        },
        validateIpv4Prefix: function(a) {
            return i.test(a)
        },
        validateIpv6: function(a) {
            return l.test(a)
        },
        validateIpv6Prefix: function(a) {
            return k.test(a)
        },
        validateMac: function(a) {
            return g.test(a)
        },
        validateHexaDecimalNumber: function(a) {
            return m.test(a)
        },
        validatePassword: function(a) {
            return c.test(a)
        },
        validateTemplateName: function(a) {
            return e.test(a) && angular.isDefined(a) && a.length <= 128
        },
        validatePolicyName: function(a) {
            return !_.isNull(a) && (angular.isDefined(a) && f.test(a) && a.length <= 128)
        },
        validateOid: function(a) {
            return h.test(a)
        },
        validateNumberRange: function(a, b) {
            if (0 == b.length)
                return !1;
            var c = angular.copy(b)
              , d = c[0].split("-");
            return c.splice(0, 1),
            1 == d.length ? a == parseFloat(d[0]) || this.validateNumberRange(a, c) : a >= parseFloat(d[0]) && a <= parseFloat(d[1]) || this.validateNumberRange(a, c)
        },
        validateSoftwareImageVersion: function(a) {
            var b = "(^"
              , c = "$)"
              , d = new RegExp(b + j + c);
            return d.test(a)
        },
        validateSoftwareImageName: function(c, d) {
            var e, f, g;
            switch (d) {
            case a.VEDGE:
                f = "(^viptela\\-",
                g = "\\-mips64.tar.(gz|bz2)$)";
                break;
            case a.VSMART:
                f = "(^viptela\\-",
                g = "\\-x86_64.tar.(gz|bz2)$)";
                break;
            case a.VMANAGE:
                f = "(^vmanage\\-",
                g = "\\-x86_64.tar.(gz|bz2)$)";
                break;
            default:
                return b.error("Unsupported device type"),
                !1
            }
            return e = new RegExp(f + j + g),
            e.test(c)
        }
    }
}
function vipVersionValidation(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            e.$validators.version = function(b) {
                return a.validateSoftwareImageVersion(b)
            }
        }
    }
}
function viewHeader(a, b) {
    return {
        restrict: "AE",
        templateUrl: "app/common/viewHeader-partial.html",
        scope: {
            iconString: "@",
            buttonFuns: "=",
            breadcrumbStates: "=",
            stateString: "@"
        },
        controller: ["$scope", function(c) {
            c.navigateToView = function(b) {
                angular.isDefined(b.state) && 0 != b.state.length && (angular.isFunction(b.state) ? b.state() : a.go(b.state, b.params ? b.params : a.params))
            }
            ,
            c.stateString = c.$parent.stateString,
            c.onButtonClick = function(a, b) {
                angular.forEach(c.buttonFuns, function(c) {
                    c.type == b && c.ButtonActionFn(a)
                })
            }
            ,
            function() {
                if ("app.config.device_bring_up" === a.current.name)
                    return void (c.headerInfo = {
                        parent: "CONFIGURATION",
                        child: "DEVICES",
                        state: "app.config.device_bring_up"
                    });
                if ("app.device.status" === a.current.name)
                    return void (c.headerInfo = {
                        parent: "TASK VIEW",
                        state: "app.device.status"
                    });
                if ("app.maintenance.repository" === a.current.name)
                    return void (c.headerInfo = {
                        parent: "MAINTENANCE",
                        child: "SOFTWARE UPGRADE",
                        state: "app.maintenance.repository"
                    });
                var d = {}
                  , e = a.current.name
                  , f = a.current.name.split(".");
                if (f.length > 3) {
                    var g = f.splice(0, 3)
                      , h = g.toString();
                    h = h.replace(/,/g, "."),
                    e = h
                }
                var i = b.getSidebarMenu();
                angular.forEach(i.menu, function(b) {
                    b.sref.includes(e) ? (d.parent = b.text.toUpperCase(),
                    d.child = void 0,
                    d.state = a.current.name) : b.submenu.length > 0 && angular.forEach(b.submenu, function(c) {
                        c.sref.includes(e) && (d.parent = b.text.toUpperCase(),
                        d.child = c.text.toUpperCase(),
                        d.state = a.current.name)
                    })
                }),
                c.headerInfo = d
            }()
        }
        ]
    }
}
function viewTab(a, b) {
    return {
        restrict: "AE",
        templateUrl: "app/common/viewTab-partial.html",
        scope: {
            tabArray: "=",
            stateString: "@"
        },
        controller: ["$scope", function(b) {
            b.activateTable = function(c, d) {
                angular.forEach(b.tabArray, function(a, b) {
                    b === d ? a.active = !0 : a.active = !1
                }),
                b.tabArray[d].callBack && b.tabArray[d].callBack(),
                a.go(c)
            }
            ,
            b.stateString = b.$parent.stateString
        }
        ]
    }
}
function ArchiveController(a, b, c, d, e, f, g, h, i, j, k, l) {
    a.stateString = e.getStateString(b),
    a.$state = b;
    var m = new h({
        columnResizing: !0,
        singleSelect: !1,
        enableSorting: !0,
        dataUid: "deviceId",
        autoLoad: !0
    });
    a.table = m,
    "grid" === l.display ? (a.radioModel = "table",
    m.columnDefs.reset(),
    m.loadDataFromUrl("/dataservice/device"),
    a.selectedView = '<i class="fa fa-table"></i>') : (a.radioModel = "list",
    a.selectedView = '<i class="fa fa-list-ul"></i>'),
    a.toggleMode = function() {
        "list" == a.radioModel ? b.go("app.monitor.devices", {
            display: "browse"
        }) : "table" == a.radioModel && b.go("app.monitor.devices", {
            display: "grid"
        })
    }
    ,
    a.monitor = function(a) {
        b.go("app.config.archive.configDetails", {
            view: "details",
            deviceID: a[0].deviceId
        })
    }
    ,
    a.test = function() {
        b.go("app.monitor.devices.deviceDetails", {
            display: "",
            view: "details",
            deviceID: "172.16.255.20",
            option: "Control Connections history"
        })
    }
    ,
    a.$on("$destroy", function() {
        i.setLastOption("")
    }),
    a.showList = !0,
    a.toggleList = function() {
        a.showList = !a.showList
    }
}
function ArchiveDetailsController(a, b, c, d, e, f, g, h, i, j, k, l) {
    a.stateString = e.getStateString(b),
    a.device = {},
    a.device.configuration = "",
    a.serverCall = !0,
    i.getDeviceConfiguration(k.deviceID).then(function(b) {
        a.serverCall = !1,
        a.device.configuration = b
    }, function(b, c, d, e) {
        a.serverCall = !1
    })
}
function configArchiveService(a) {
    var b = "/dataservice/device/config";
    return {
        getDeviceConfiguration: function(c) {
            var d = b + "?deviceId=" + c;
            return a.get(d)
        }
    }
}
function certificateManagementController(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var q = 200;
    a.certificateWritePermission = !1,
    m.checkSidebarState() ? m.allowAccess("Certificates") && (a.certificateWritePermission = !0,
    q = 260) : q = 200;
    var r = n.returnEventsEnum()
      , s = n.returnViewsEnum()
      , t = new o(s.CERTIFICATE,[r.CERTIFICATE])
      , u = m.getUserMode();
    a.stateString = e.getStateString(b),
    a.automate = !0,
    this.isActive = function(a) {
        var c = b.current.url
          , d = c.indexOf(a);
        return 1 === d
    }
    ,
    a.tabs = [],
    "provider" === u.mode ? a.tabs.push({
        tabTitle: "Controllers",
        active: "app.config.certificates.controller" === b.current.name,
        states: "app.config.certificates.controller"
    }) : "multiTenant-provider" === u.mode ? a.tabs.push({
        tabTitle: "vEdge List",
        active: "app.config.certificates.vedgelist" === b.current.name,
        states: "app.config.certificates.vedgelist"
    }, {
        tabTitle: "Controllers",
        active: "app.config.certificates.controller" === b.current.name,
        states: "app.config.certificates.controller"
    }) : "multiTenant-tenant" === u.mode ? a.tabs.push({
        tabTitle: "vEdge List",
        active: "app.config.certificates.vedgelist" === b.current.name,
        states: "app.config.certificates.vedgelist"
    }) : a.tabs.push({
        tabTitle: "vEdge List",
        active: "app.config.certificates.vedgelist" === b.current.name,
        states: "app.config.certificates.vedgelist"
    }, {
        tabTitle: "Controllers",
        active: "app.config.certificates.controller" === b.current.name,
        states: "app.config.certificates.controller"
    }),
    i.getCertificateSettings().then(function(b) {
        l.processData(b) ? (a.processText = "Waiting for Certificate",
        a.automate = !0,
        k.setProperty(!0)) : (a.processText = "Upload Certificate",
        a.automate = !1,
        k.setProperty(!1))
    }, function(a, b, c, d) {
        j.confirm(a)
    }),
    a.send = function(c) {
        a.pushed = !0,
        f.register("dataservice/certificate/vsmart/list").then(function(c) {
            a.pushed = !1,
            b.go("app.device.status", {
                activity: p.getStatusAction("PUSH_VSMART_LIST").endpoint,
                pid: c ? c.id : ""
            })
        }, function(b) {
            a.pushed = !1,
            j.confirm(b)
        })
    }
    ,
    a.$on("$destroy", function() {
        e.stopPolling(a.statusPolling)
    }),
    f.getRegisterListStatus() && (a.send("dataservice/certificate/vedge/list?action=push"),
    f.setRegisterListStatus(!1)),
    a.viewCSRObj = {
        type: "View CSR",
        open: "modal",
        templateUrl: "app/configuration/certificate/modalTemplates/viewCsrTemplate.html",
        controller: "viewCSRModalController"
    },
    a.viewCertificateObj = {
        type: "View Certificate",
        open: "modal",
        templateUrl: "app/configuration/certificate/modalTemplates/viewCertTemplate.html",
        controller: "viewCertificateModalController"
    },
    a.generateCSRObj = {
        type: "Generate CSR",
        open: "modal",
        templateUrl: "app/configuration/certificate/modalTemplates/generateCsr.html",
        controller: "generateCSRModalController"
    },
    a.resetRSAObj = {
        type: "Reset RSA",
        open: "confirm",
        title: "Are you sure you want to reset the key pairs?",
        content: "This will reset all the control connections. You cannot undo this action.",
        okButtonActionFn: function(b) {
            var d = a
              , e = {}
              , g = _.find(a.table.data, function(a) {
                return "vbond" === a.deviceType || "vedge-vbond" === a.deviceType
            });
            if ("vmanage" !== b.entity.deviceType || g) {
                var h = c.show({
                    templateUrl: "app/configuration/certificate/modalTemplates/resetRSATemplate.html",
                    controller: "regenRSAController",
                    resolve: {
                        tableObject: function() {
                            return a.table
                        },
                        selectedRow: function() {
                            return b
                        }
                    }
                });
                h.then(function(a) {}, function() {})
            } else
                e = {
                    deviceIP: b.entity.deviceIP
                },
                f.resetRSA(e).then(function(a) {
                    d.table.refresh(),
                    j.success("Reset RSA successful", 2e3)
                }, function(a) {
                    d.table.refresh(),
                    j.confirm(a)
                })
        }
    },
    a.invalidObj = {
        type: "Invalidate",
        open: "confirm",
        title: "Are you sure you want to invalidate?",
        content: "This will permanently remove the device and all control connections. You cannot undo this action",
        okButtonActionFn: function(c) {
            var d = a;
            f.invalidate(c.entity.uuid).then(function(a) {
                "installed" !== c.entity.certInstallStatus.toLowerCase() || angular.isDefined(a.localDeleteFromDB) ? d.table.refresh() : b.go("app.device.status", {
                    activity: p.getStatusAction("INVALIDATE_DEVICE").endpoint,
                    pid: a ? a.id : ""
                })
            }, function(a) {
                j.confirm(a)
            })
        }
    },
    a.tableRowHoverActions = [a.viewCSRObj, a.viewCertificateObj],
    a.certificateWritePermission && (a.tableRowHoverActions.push(a.generateCSRObj),
    a.tableRowHoverActions.push(a.resetRSAObj),
    a.tableRowHoverActions.push(a.invalidObj)),
    a.csrGenerated = !1,
    a.certificateUploaded = !1,
    a.sentToController = !1,
    a.showStatus = !1,
    a.personalityCheck = !0,
    a.systemIP = "";
    var v = {
        showProgress: function(b) {
            if (b = b.entity)
                switch (a.controllerActivity = "",
                b["local-system-ip"] ? a.systemIP = b["local-system-ip"] : a.systemIP = b.deviceIP,
                "vbond" === b.deviceType ? a.personalityCheck = !1 : a.personalityCheck = !0,
                b.state) {
                case "CSR Generated":
                    a.csrGenerated = !0,
                    a.certificateUploaded = !1,
                    a.sentToController = !1;
                    break;
                case "CSR Generation error":
                    a.csrGenerated = !1,
                    a.certificateUploaded = !1,
                    a.sentToController = !1;
                    break;
                case "Certificate Installation Inprogress":
                    a.csrGenerated = !0,
                    a.certificateUploaded = !1,
                    a.sentToController = !1;
                    break;
                case "Installed":
                    a.csrGenerated = !0,
                    a.certificateUploaded = !0,
                    a.sentToController = !1;
                    break;
                case "Certificate Installation failed":
                    a.csrGenerated = !0,
                    a.certificateUploaded = !1,
                    a.sentToController = !1;
                    break;
                case "vBond Update Inprogress":
                    a.csrGenerated = !0,
                    a.certificateUploaded = !0,
                    a.sentToController = !1;
                    break;
                case "vBond Update error":
                    a.csrGenerated = !0,
                    a.certificateUploaded = !0,
                    a.sentToController = !1;
                    break;
                case "vBond Updated":
                    a.csrGenerated = !0,
                    a.certificateUploaded = !0,
                    a.sentToController = !0;
                    break;
                default:
                    a.csrGenerated = !1,
                    a.certificateUploaded = !1,
                    a.sentToController = !1
                }
        }
    }
      , w = new h({
        columnResizing: !0,
        singleSelect: !0,
        enableSorting: !0,
        enableExpandable: !0,
        dataUid: "uuid",
        toggleFirstRowOnLoad: !0,
        noUnselect: !0,
        tableHeightOffset: q
    },{
        csvExport: !0
    },{
        enableExpandableRowHeader: !0,
        reduceExpandableWidth: 0,
        expandableRowTemplate: "app/configuration/certificate/deviceStatusDetailTemplate.html"
    },{
        exporterHeaderFilterUseName: !1,
        exporterCsvFilename: "Certificate_Controllers.csv"
    });
    w.setAppScope(v),
    w.setHoverAction(a.tableRowHoverActions),
    w.setOnRowSelectionCallback(v.showProgress),
    a.table = w,
    a.table.setAppScope({
        scrollUp: function(a) {
            var b = $(a.currentTarget).parent().siblings("textarea");
            b.scrollTop(b.scrollTop() - 50)
        },
        scrollDown: function(a) {
            var b = $(a.currentTarget).parent().siblings("textarea");
            b.scrollTop(b.scrollTop() + 50)
        }
    }),
    a.open = function(b, d, e) {
        var f = c.show({
            templateUrl: b,
            controller: d,
            targetEvent: e,
            resolve: {
                tableObject: function() {
                    return a.table
                },
                selectedRow: function() {
                    return !1
                }
            }
        });
        f.then(function(a) {}, function() {})
    }
    ,
    a.$on("certificate_event", function(b, c) {
        a.table.refresh(t),
        a.table.appScope.showProgress(a.table.data[0])
    }),
    a.$watch("table.data", function(b) {
        b.length > 0 && (a.table.appScope.showProgress(w.data[0]),
        angular.forEach(w.data, function(a) {
            a.activityList = "",
            angular.forEach(a.activity, function(b) {
                a.activityList += "- " + b + "\n"
            })
        }))
    }, !0),
    a.$on("$destroy", function() {
        n.unsubscribe(t)
    }),
    n.subscribe(t)
}
function sharedCertificateProperties() {
    var a = !1;
    return {
        getProperty: function() {
            return a
        },
        setProperty: function(b) {
            a = b
        }
    }
}
function certificateService(a, b) {
    var c = "/dataservice/certificate/install/signedCert"
      , d = "dataservice/certificate/list/status"
      , e = "dataservice/certificate/generate/csr"
      , f = "dataservice/certificate/reset/rsa"
      , g = "dataservice/certificate"
      , h = "dataservice/certificate/save/vedge/list"
      , i = "dataservice/certificate/install/signedCert"
      , j = !1;
    return {
        getCertificateTableData: function() {},
        getToken: function(b) {
            a.post(c, b).then(function(a) {}, function(a) {})
        },
        register: function(b) {
            var c = {};
            return a.post(b, c)
        },
        getStatus: function(b) {
            var c = d + "?requestID=" + b;
            return a.get(c)
        },
        installCertificate: function(b) {
            var c = {
                timeout: 25e4
            };
            return a.post(i, b, c)
        },
        generateCSR: function(b) {
            var c = {
                deviceIP: b
            }
              , d = {
                timeout: 25e4
            };
            return a.post(e, c, d)
        },
        resetRSA: function(b) {
            var c = {
                timeout: 25e4
            };
            return a.post(f, b, c)
        },
        invalidate: function(b) {
            var c = g + "/" + b
              , d = {
                timeout: 25e4
            };
            return a.delete(c, d)
        },
        validatevEdge: function(b, c) {
            var d = [{
                chasisNumber: b.entity.chasisNumber,
                serialNumber: b.entity.serialNumberKey ? b.entity.serialNumberKey : b.entity.serialNumber,
                validity: c
            }]
              , e = {
                timeout: 19e4
            };
            return a.post(h, d, e)
        },
        getRegisterListStatus: function() {
            return j
        },
        setRegisterListStatus: function(a) {
            j = a
        },
        getControllerSyncStatus: function() {
            return a.get(b.OUT_OF_SYNC_CONTROLLERS)
        }
    }
}
function certificatevEdgeListController(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    a.stateString = d.getStateString(b);
    var p = 185;
    a.buttonFunctions = [],
    a.certificateWritePermission = !1,
    a.automate = !0,
    j.checkSidebarState() ? j.allowAccess("Certificates") && (a.certificateWritePermission = !0,
    p = 213) : p = 185,
    a.syncMessage = !1,
    a.outOfSyncColor = "";
    var q = j.getUserMode();
    this.isActive = function(a) {
        var c = b.current.url
          , d = c.indexOf(a);
        return 1 === d
    }
    ,
    a.tabs = [],
    "provider" === q.mode ? a.tabs.push({
        tabTitle: "vEdge List",
        active: "app.config.certificates.vedgelist" === b.current.name,
        states: "app.config.certificates.vedgelist"
    }) : "multiTenant-provider" === q.mode ? a.tabs.push({
        tabTitle: "vEdge List",
        active: "app.config.certificates.vedgelist" === b.current.name,
        states: "app.config.certificates.vedgelist"
    }, {
        tabTitle: "Controllers",
        active: "app.config.certificates.controller" === b.current.name,
        states: "app.config.certificates.controller"
    }) : "multiTenant-tenant" === q.mode ? a.tabs.push({
        tabTitle: "vEdge List",
        active: "app.config.certificates.vedgelist" === b.current.name,
        states: "app.config.certificates.vedgelist"
    }) : a.tabs.push({
        tabTitle: "vEdge List",
        active: "app.config.certificates.vedgelist" === b.current.name,
        states: "app.config.certificates.vedgelist"
    }, {
        tabTitle: "Controllers",
        active: "app.config.certificates.controller" === b.current.name,
        states: "app.config.certificates.controller"
    }),
    m.getCloudCASettings().then(function(b) {
        0 == b.data.length || b.data.length > 0 && (!b.data[0].certificateauthority || "vmanage" === b.data[0].certificateauthority) ? a.automate = !0 : a.automate = !1
    }, function(a, b, c, d) {
        h.confirm(a)
    }),
    a.uiGridFeatures = {
        tableColResize: !0,
        selectAll: !1,
        tableColMove: !1,
        singleSelect: !1,
        dataUid: "uuid"
    };
    a.open = function(b, c, d) {
        var e = l.show({
            templateUrl: b,
            controller: c,
            targetEvent: d,
            resolve: {
                tableObject: function() {
                    return a.table
                },
                selectedRow: function() {
                    return !1
                }
            }
        });
        e.then(function(a) {}, function() {})
    }
    ,
    a.vedgeList = {
        openConfirmDialog: function(b, c, d, e, f) {
            var g = l.confirm().title(e).textContent(f).targetEvent(c).ok("OK").cancel("Cancel");
            a.rowSelected = b,
            a.vedgeList.action = d,
            l.show(g).then(function() {
                "invalidate" === a.vedgeList.action && a.vedgeList.invalidate(b),
                "validate" === a.vedgeList.action && a.vedgeList.validate(b),
                "stage" === a.vedgeList.action && a.vedgeList.stage(b)
            }, function() {
                console.log("Modal dismissed at: " + new Date)
            })
        },
        validate: function(b) {
            "valid" !== b.entity.validity && a.certificateWritePermission && e.validatevEdge(b, "valid").then(function(c) {
                var d = "Device successfully validated - " + b.entity.uuid;
                h.success(d, 2e4),
                b.entity.validity = "valid",
                a.table.taggedSearchObject.updateSearchCacheStringifyObject(b.entity, "chassisNumber"),
                v()
            }, function(a) {
                h.confirm(a)
            })
        },
        invalidate: function(b) {
            "invalid" !== b.entity.validity && a.certificateWritePermission && e.validatevEdge(b, "invalid").then(function(c) {
                var d = "Device successfully invalidated - " + b.entity.uuid;
                h.success(d, 2e4),
                b.entity.validity = "invalid",
                a.table.taggedSearchObject.updateSearchCacheStringifyObject(b.entity, "chasisNumber"),
                v()
            }, function(a) {
                h.confirm(a)
            })
        },
        stage: function(b) {
            "staging" !== b.entity.validity && a.certificateWritePermission && e.validatevEdge(b, "staging").then(function(c) {
                var d = "Device successfully staged - " + b.entity.uuid;
                h.success(d, 2e4),
                b.entity.validity = "staging",
                a.table.taggedSearchObject.updateSearchCacheStringifyObject(b.entity, "chasisNumber"),
                v()
            }, function(a) {
                h.confirm(a)
            })
        }
    },
    a.viewCSRObj = {
        type: "View CSR",
        open: "modal",
        templateUrl: "app/configuration/certificate/modalTemplates/viewCloudCsrTemplate.html",
        controller: "viewCloudCSRModalController"
    };
    var r = new f({
        columnResizing: !0,
        enableSorting: !0,
        singleSelect: !0,
        dataUid: "chasisNumber",
        tableHeightOffset: p
    },{
        csvExport: !0
    },{},{
        exporterHeaderFilterUseName: !1,
        exporterCsvFilename: "Certificate_Vedge_List.csv"
    });
    if (r.setAppScope(a.vedgeList),
    a.tableRowHoverActions = [a.viewCSRObj],
    r.setHoverAction(a.tableRowHoverActions),
    a.certificateWritePermission) {
        var s = [{
            property: "display",
            value: "toggle",
            config: {
                cellTemplate: '<div class="ui-grid-cell-contents toggleContent"><span id="invalidate_vEdge" ng-if="row.entity[col.name] != \'invalid\'" ng-click="grid.appScope.openConfirmDialog(row,$event,\'invalidate\', \'Are you sure you want to invalidate the device?\', \'This will invalidate the device.\')" class="toggleItem" ng-class="{ \'red-state\' : row.entity[col.name] == \'invalid\'}">Invalid</span><span id="invalidate_vEdge" ng-if="row.entity[col.name] == \'invalid\'" class="toggleItem" ng-class="{ \'red-state\' : row.entity[col.name] == \'invalid\'}">Invalid</span>|<span id="stage_vEdge" ng-if="row.entity[col.name] != \'staging\'"ng-click="grid.appScope.openConfirmDialog(row,$event,\'stage\', \'Are you sure you want to stage the device?\', \'This will stage the device.\')" class="toggleItem" ng-class="{ \'orange-state\' : row.entity[col.name] == \'staging\'}">Staging</span><span id="stage_vEdge" ng-if="row.entity[col.name] == \'staging\'" class="toggleItem" ng-class="{ \'orange-state\' : row.entity[col.name] == \'staging\'}">Staging</span>|<span id="validate_vEdge" ng-if="row.entity[col.name] != \'valid\'" ng-click="grid.appScope.openConfirmDialog(row,$event,\'validate\', \'Are you sure you want to validate the device?\', \'This will validate the device.\')" class="toggleItem" ng-class="{ \'green-state\' : row.entity[col.name] == \'valid\'}">Valid</span><span id="validate_vEdge" ng-if="row.entity[col.name] == \'valid\'" class="toggleItem" ng-class="{ \'green-state\' : row.entity[col.name] == \'valid\'}">Valid</span></div>',
                enableFiltering: !1,
                enableSorting: !0
            }
        }];
        r.addCustomColumns(s)
    }
    var t = function(b) {
        u(b),
        a.table.setTableData(b)
    };
    r.setOnRefreshCallback(t),
    a.table = r;
    var u = function(a) {
        angular.forEach(a, function(a) {
            angular.isDefined(a.vedgeCertificateState) && ("tokengenerated" === a.vedgeCertificateState || "bootstrapconfiggenerated" === a.vedgeCertificateState) && angular.isDefined(a.serialNumber) && (a.serialNumberKey = a.serialNumber,
            a.serialNumber = "Token - " + a.serialNumber)
        })
    };
    a.table.setLoadDataFromUrlCallback(u),
    a.table.loadDataFromUrl("/dataservice/certificate/vedge/list"),
    a.send = function() {
        a.pushed = !0,
        e.register("dataservice/certificate/vedge/list?action=push").then(function(c) {
            a.pushed = !1,
            b.go("app.device.status", {
                activity: k.getStatusAction("PUSH_VEDGE_LIST").endpoint,
                pid: c ? c.id : ""
            })
        }, function(b) {
            a.pushed = !1,
            h.confirm(b)
        })
    }
    ;
    var v = function() {
        e.getControllerSyncStatus().then(function(b) {
            b.data[0].ControllersOutOfSync > 0 && (a.syncMessage = !0,
            a.outOfSyncColor = "outOfSync")
        }, function(a) {
            h.confirm(a)
        })
    };
    v(),
    a.buttonFunctions.push({
        title: "Send to Controllers",
        customColor: a.outOfSyncColor,
        type: "Users",
        icon: "paper-plane",
        layoutClass: "actionButtonLayout",
        vipRbac: "Certificates",
        allow: "Certificates",
        ButtonActionFn: function(b) {
            a.send(b)
        }
    });
    var w = n.returnEventsEnum()
      , x = n.returnViewsEnum()
      , y = new o(x.CERTIFICATE,[w.CERTIFICATE]);
    a.$on("certificate_event", function(b, c) {
        _.indexOf(["update"], c > -1) && (n.unsubscribe(deviceEventObj),
        a.table.refresh(),
        $timeout(function() {
            n.subscribe(deviceEventObj)
        }))
    }),
    a.$on("$destroy", function() {
        for (n.unsubscribe(y),
        a.table.resetCustomColumns(); a.buttonFunctions.length; )
            a.buttonFunctions.pop()
    })
}
function sharedvEdgeProperties() {
    var a = !1;
    return {
        setPushedvEdge: function(b) {
            a = b
        },
        getPushedvEdge: function() {
            return a
        }
    }
}
function certificateInstallModalController(a, b, c, d, e, f, g, h) {
    a.certificate = {},
    a.serverCall = !1,
    a.showErrorSection = !1,
    a.stateString = c.getStateString(b),
    f ? (f["local-system-ip"] ? a.certificate.ip = f["local-system-ip"] : a.certificate.ip = f.deviceIP,
    f.certificateDetail ? a.certificate.certificateDetails = f.certificateDetail : a.certificate.certificateDetails = "No Certificate Available") : a.certificate.certificateDetails = "No Certificate Available",
    a.install = function() {
        a.serverCall = !0,
        e.installCertificate(a.certificate.install).then(function(c) {
            a.serverCall = !1,
            g.refresh(),
            a.cancel(),
            b.go("app.device.status", {
                activity: h.getStatusAction("INSTALL_CERTIFICATE").endpoint,
                pid: c ? c.id : ""
            })
        }, function(b, c, d, e) {
            a.showErrorSection = !0,
            a.serverCall = !1,
            a.errorMessage = b
        })
    }
    ,
    a.cancel = function() {
        d.cancel()
    }
    ,
    a.showContent = function(b) {
        a.certificate.install = b
    }
}
function generateCSRModalController(a, b, c, d, e, f, g, h, i) {
    a.viewCSR = !1,
    a.stateString = c.getStateString(b),
    a.showErrorSection = !1,
    a.errorMessage = "",
    a.device = {},
    e && (e["local-system-ip"] ? a.device.ip = e["local-system-ip"] : a.device.ip = e.deviceIP,
    a.device.hostname = e["host-name"]),
    a.download = function() {
        var b = document.createElement("a");
        b.download = a.device.hostname + ".csr",
        b.href = "data:csr/plain;charset=UTF-8," + encodeURIComponent(a.device.csrDetails),
        document.body.appendChild(b),
        b.click(),
        document.body.removeChild(b)
    }
    ,
    a.serverCall = !0,
    d.generateCSR(e.deviceIP).then(function(b, c) {
        a.automate = g.getProperty(),
        a.serverCall = !1,
        f.refresh(),
        "N/A" !== b.data[0].deviceCSR && b.data[0].deviceCSR ? a.device.csrDetails = b.data[0].deviceCSR : a.device.csrDetails = "No CSR available"
    }, function(b, c, d, e) {
        f.refresh(),
        a.cancel(),
        i.confirm(b)
    }),
    a.cancel = function() {
        h.cancel()
    }
}
function regenRSAController(a, b, c, d, e, f, g, h) {
    if (a.serverCall = !1,
    a.showErrorSection = !1,
    a.stateString = c.getStateString(b),
    a.deviceList = [],
    "vmanage" === f.entity.deviceType)
        _.each(g.data, function(b, c) {
            var d = {};
            "vbond" !== b.deviceType && "vedge-vbond" !== b.deviceType || (d.uuid = b.uuid ? b.uuid : "--",
            d.systemIp = b["local-system-ip"] ? b["local-system-ip"] : "--",
            d.hostName = b["host-name"] ? b["host-name"] : "--",
            d.deviceType = b.deviceType,
            b["local-system-ip"] !== b.deviceIP ? d.deviceIp = b.deviceIP : d.deviceIp = "",
            a.deviceList.push(d))
        });
    else {
        var i = {};
        i.uuid = f.entity.uuid ? f.entity.uuid : "--",
        i.systemIp = f.entity["local-system-ip"] ? f.entity["local-system-ip"] : "--",
        i.hostName = f.entity["host-name"] ? f.entity["host-name"] : "--",
        i.deviceType = f.entity.deviceType,
        i.deviceIp = "",
        a.deviceList.push(i)
    }
    a.reset = function() {
        a.serverCall = !0;
        var b = []
          , c = {};
        _.each(a.deviceList, function(a) {
            c = {},
            c.uuid = a.uuid,
            c.deviceType = a.deviceType,
            c.deviceIP = a.deviceIp,
            b.push(c)
        });
        var d = {
            deviceIP: f.entity.deviceIP,
            credentials: b
        };
        e.resetRSA(d).then(function(b) {
            g.refresh(),
            a.cancel(),
            a.serverCall = !1
        }, function(b) {
            a.serverCall = !1,
            g.refresh(),
            a.cancel(),
            h.confirm(b)
        })
    }
    ,
    a.cancel = function() {
        d.cancel()
    }
}
function viewCertificateModalController(a, b, c, d, e, f) {
    a.certificate = {},
    a.serverCall = !1,
    a.showErrorSection = !1,
    a.stateString = c.getStateString(b),
    f ? (f["local-system-ip"] ? a.certificate.ip = f["local-system-ip"] : a.certificate.ip = f.deviceIP,
    f.deviceEnterpriseCertificate ? a.certificate.certificateDetails = f.deviceEnterpriseCertificate : a.certificate.certificateDetails = "No Certificate Available",
    a.certificate.hostname = f["host-name"]) : a.certificate.certificateDetails = "No Certificate Available",
    a.download = function() {
        var b = document.createElement("a");
        b.download = a.certificate.hostname + ".txt",
        b.href = "data:text/plain;charset=UTF-8," + encodeURIComponent(a.certificate.certificateDetails),
        document.body.appendChild(b),
        b.click(),
        document.body.removeChild(b)
    }
    ,
    a.cancel = function() {
        d.cancel()
    }
}
function viewCloudCSRModalController(a, b, c, d, e, f) {
    a.viewCSR = !0,
    a.serverCall = !1,
    a.stateString = c.getStateString(b),
    a.showErrorSection = !1,
    a.device = {},
    f && (a.device.username = f.username,
    f["local-system-ip"] ? a.device.ip = f["local-system-ip"] : a.device.ip = f.deviceIP,
    "N/A" !== f.vedgeCSR && f.vedgeCSR ? a.device.csrDetails = f.vedgeCSR : a.device.csrDetails = "No CSR available",
    a.device.hostname = f["host-name"]),
    a.download = function() {
        var b = document.createElement("a");
        b.download = a.device.hostname + ".csr",
        b.href = "data:csr/plain;charset=UTF-8," + encodeURIComponent(a.device.csrDetails),
        document.body.appendChild(b),
        b.click(),
        document.body.removeChild(b)
    }
    ,
    a.cancel = function() {
        d.cancel()
    }
}
function viewCSRModalController(a, b, c, d, e, f) {
    a.viewCSR = !0,
    a.serverCall = !1,
    a.stateString = c.getStateString(b),
    a.showErrorSection = !1,
    a.device = {},
    f && (a.device.username = f.username,
    f["local-system-ip"] ? a.device.ip = f["local-system-ip"] : a.device.ip = f.deviceIP,
    "N/A" !== f.deviceCSR && f.deviceCSR ? a.device.csrDetails = f.deviceCSR : a.device.csrDetails = "No CSR available",
    a.device.hostname = f["host-name"]),
    a.download = function() {
        var b = document.createElement("a");
        b.download = a.device.hostname + ".csr",
        b.href = "data:csr/plain;charset=UTF-8," + encodeURIComponent(a.device.csrDetails),
        document.body.appendChild(b),
        b.click(),
        document.body.removeChild(b)
    }
    ,
    a.cancel = function() {
        d.cancel()
    }
}
function CloudOnRampService(a, b, c, d) {
    function e(a) {
        return a.endsWith("/") || (a += "/"),
        a
    }
    function f(a) {
        var b = "";
        return angular.forEach(a, function(a, c) {
            b += c + "=" + a + "&"
        }),
        b.trim().slice(0, -1)
    }
    return {
        list: function(b) {
            return a.get(b)
        },
        get: function(b, c) {
            var d = "";
            return angular.isDefined(c) && (b += "?",
            d = f(c)),
            a.get(b + d)
        },
        create: function(b, c, d) {
            return a.post(b, c, d)
        },
        update: function(b, c, d) {
            return a.put(b, c, d)
        },
        delete: function(b, c, e, g) {
            var h = "";
            return d.isUndefinedOrEmpty(c) || (b += "?",
            h = f(c)),
            a.delete(b + h)
        },
        deletePostBody: function(b, c, d) {
            return a.deletePostBody(e(b), c, d)
        }
    }
}
function devicesController(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    a.stateString = c.getStateString(b);
    var o, p, q, r = 150, s = !1, t = !1, u = !1, v = !1, w = g.getUserMode();
    g.checkSidebarState() && (g.allowAccess("Device Inventory") && (s = !0,
    r = 178),
    g.allowReadAccess("Device Inventory") && (t = !0),
    g.allowAccess("Template Deploy") && (u = !0),
    g.allowReadAccess("Tools") && (v = !0)),
    a.tabs = [],
    "provider" === w.mode ? a.tabs.push({
        tabTitle: "Controllers",
        active: "app.config.devices.controller" === b.current.name,
        states: "app.config.devices.controller"
    }) : "multiTenant-provider" === w.mode ? a.tabs.push({
        tabTitle: "vEdge List",
        active: "app.config.devices.vedge" === b.current.name,
        states: "app.config.devices.vedge"
    }, {
        tabTitle: "Controllers",
        active: "app.config.devices.controller" === b.current.name,
        states: "app.config.devices.controller"
    }) : "multiTenant-tenant" === w.mode ? a.tabs.push({
        tabTitle: "vEdge List",
        active: "app.config.devices.vedge" === b.current.name,
        states: "app.config.devices.vedge"
    }) : a.tabs.push({
        tabTitle: "vEdge List",
        active: "app.config.devices.vedge" === b.current.name,
        states: "app.config.devices.vedge"
    }, {
        tabTitle: "Controllers",
        active: "app.config.devices.controller" === b.current.name,
        states: "app.config.devices.controller"
    }),
    a.addControllerOptions = ["vBond", "vSmart"];
    var x = "provider" === w.mode ? "vBond" : "vSmart/vBond";
    a.changeModeOptions = [{
        id: "cli_mode",
        value: "CLI mode",
        submenu: [{
            id: "vsmart",
            value: x
        }, {
            id: "vmanage",
            value: "vManage"
        }]
    }, {
        id: "vmanage_mode",
        value: "vManage mode"
    }],
    a.addvEdgeOptions = ["vEdge 1000", "vEdge 200"],
    a.updateDeviceObj = {
        type: "Edit",
        open: "modal",
        templateUrl: "app/configuration/devices/modalTemplates/updateDeviceInfoTemplate.html",
        controller: "updateDeviceController"
    },
    a.viewUploadedConfigObj = {
        type: "Local Configuration",
        open: "modal",
        templateUrl: "app/configuration/devices/modalTemplates/configTemplate.html",
        controller: "viewUploadedConfigController"
    },
    a.viewRunningConfigObj = {
        type: "Running Configuration",
        open: "modal",
        templateUrl: "app/configuration/devices/modalTemplates/configTemplate.html",
        controller: "viewRunningConfigController"
    },
    a.viewTemplateLogsObj = {
        type: "Template Log",
        open: "modal",
        templateUrl: "app/configuration/devices/modalTemplates/templateLogs.html",
        controller: "templateLogController"
    },
    a.invalidObj = {
        type: "Invalidate",
        open: "confirm",
        title: "Are you sure you want to invalidate the device?",
        content: "This will permanently remove the device and all control connections. You cannot undo this action.",
        okButtonActionFn: function(c) {
            var e = a;
            d.invalidate(c.entity.uuid).then(function(a) {
                "installed" !== c.entity.certInstallStatus.toLowerCase() || angular.isDefined(a.localDeleteFromDB) ? e.table.refresh() : b.go("app.device.status", {
                    activity: k.getStatusAction("INVALIDATE_DEVICE").endpoint,
                    pid: a ? a.id : ""
                })
            }, function(a) {
                f.confirm(a)
            })
        }
    },
    a.deviceBringUpObj = {
        type: "Device Bring Up",
        open: "callback",
        okButtonActionFn: function(a) {
            b.go("app.config.device_bring_up", {
                deviceType: a.entity.deviceType,
                uuid: a.entity.uuid,
                localSystemIp: a.entity["local-system-ip"],
                systemIp: a.entity["system-ip"]
            })
        }
    },
    a.udpateDeviceVariableValues = {
        type: "Change Device Values",
        open: "callback",
        hideCallback: function(a) {
            return !angular.equals(a.entity.configOperationMode, "vmanage")
        },
        okButtonActionFn: function(c) {
            var d;
            a.table.taggedSearchObject.tableSpinner.isSet = !0,
            h.listDeviceTemplates().then(function(a) {
                d = c.entity.templateId ? _.find(a.data, function(a) {
                    return angular.equals(a.templateId, c.entity.templateId)
                }) : _.find(a.data, function(a) {
                    return angular.equals(a.templateName, c.entity.template)
                });
                var b = {};
                return b.templateId = d.templateId,
                b.deviceIds = [c.entity.uuid],
                b.isEdited = !1,
                b.isMasterEdited = !1,
                h.generateInput(b)
            }).then(function(a) {
                a.selectedTemplate = d,
                a.selectedDevices = [c.entity.uuid],
                a.attachedDevices = [c.entity.uuid],
                a.isEdited = !1,
                a.isMasterEdited = !1,
                i.setTemplateDeviceInput(a),
                b.go("app.config.template.device.configure", {
                    templateId: a.selectedTemplate.templateId
                })
            }, function(b) {
                a.table.taggedSearchObject.tableSpinner.isSet = !1,
                f.error(b.error.message + ": " + b.error.details)
            })
        }
    },
    a.tableRowHoverActions = [],
    t && (a.tableRowHoverActions.push(a.viewRunningConfigObj),
    a.tableRowHoverActions.push(a.viewUploadedConfigObj),
    a.tableRowHoverActions.push(a.viewTemplateLogsObj)),
    s && (a.tableRowHoverActions.push(a.updateDeviceObj),
    a.tableRowHoverActions.push(a.invalidObj)),
    u && a.tableRowHoverActions.push(a.udpateDeviceVariableValues),
    v && a.tableRowHoverActions.push(a.deviceBringUpObj),
    a.syncStatus = {
        launchDiffChecker: function(a, b) {
            if (!this.isSynced(a.entity.configStatusMessage)) {
                var c = a.entity.uuid;
                "vedge-vbond" === a.entity.deviceType && (c = c.split("vbond-").pop());
                var d = j.show({
                    templateUrl: "app/configuration/devices/modalTemplates/outOfSyncDiffModalTemplate.html",
                    controller: "outOfSyncDiffModalCtrl",
                    targetEvent: b,
                    resolve: {
                        configUrl: function() {
                            return c
                        }
                    }
                });
                d.then(function(a) {}, function() {
                    n.info("Modal dismissed at: " + new Date)
                })
            }
        },
        isSynced: function(a) {
            return !!angular.isUndefined(a) || !a.toLowerCase().includes("out of sync")
        },
        isSyncDetailsAvailable: function(a) {
            return !c.isUndefinedOrEmpty(a.configStatusMessageDetails) && !c.isNull(a.configStatusMessageDetails)
        }
    };
    var y = new e({
        columnResizing: !0,
        singleSelect: !0,
        enableSorting: !0,
        toggleFirstRowOnLoad: !0,
        dataUid: "uuid",
        autoLoad: !0,
        tableHeightOffset: r
    },{
        csvExport: !0
    },{},{
        exporterHeaderFilterUseName: !1,
        exporterCsvFilename: "Device_Controllers.csv"
    })
      , z = [{
        property: "display",
        value: "syncDiffChecker",
        config: {
            cellTemplate: '<div class="ui-grid-cell-contents" data-ng-click="grid.appScope.launchDiffChecker(row, $event)" id="sync_status_{{rowRenderIndex}}"><span id="view_config_diff" data-ng-class="grid.appScope.isSynced(row.entity.configStatusMessage) ? \'\' : \'error-link-cell\'">{{ row.entity.configStatusMessage }}</span><span data-ng-show="grid.appScope.isSyncDetailsAvailable(row.entity)"> - {{row.entity.configStatusMessageDetails}}</span></div>',
            enableFiltering: !0,
            enableSorting: !0
        }
    }];
    y.addCustomColumns(z),
    y.setAppScope(a.syncStatus),
    y.setHoverAction(a.tableRowHoverActions),
    p = "multiTenant-provider" === w.mode ? [{
        title: "vSmart",
        cssId: "vsmart_choice",
        action: function(b) {
            j.show({
                templateUrl: "app/configuration/devices/modalTemplates/addvSmartTemplate.html",
                controller: "addvSmartModalCtrl",
                controllerUrl: "app/configuration/devicesController",
                openFrom: angular.element(document.querySelector("#config_devices_controller_add_controller")),
                closeTo: angular.element(document.querySelector("#config_devices_controller_add_controller")),
                resolve: {
                    tableObject: function() {
                        return a.table
                    }
                }
            }).then(function() {
                m(function() {
                    a.table.refresh()
                }, 500)
            })
        }
    }] : [{
        title: "vBond",
        cssId: "vbond_choice",
        action: function(b) {
            j.show({
                templateUrl: "app/configuration/devices/modalTemplates/addvBondTemplate.html",
                controller: "addvBondModalCtrl",
                controllerUrl: "app/configuration/devicesController",
                openFrom: angular.element(document.querySelector("#config_devices_controller_add_controller")),
                closeTo: angular.element(document.querySelector("#config_devices_controller_add_controller")),
                resolve: {
                    tableObject: function() {
                        return a.table
                    }
                }
            }).then(function() {
                m(function() {
                    a.table.refresh()
                }, 500)
            })
        }
    }, {
        title: "vSmart",
        cssId: "vsmart_choice",
        action: function(b) {
            j.show({
                templateUrl: "app/configuration/devices/modalTemplates/addvSmartTemplate.html",
                controller: "addvSmartModalCtrl",
                controllerUrl: "app/configuration/devicesController",
                openFrom: angular.element(document.querySelector("#config_devices_controller_add_controller")),
                closeTo: angular.element(document.querySelector("#config_devices_controller_add_controller")),
                resolve: {
                    tableObject: function() {
                        return a.table
                    }
                }
            }).then(function() {
                m(function() {
                    a.table.refresh()
                }, 500)
            })
        }
    }];
    var A = [{
        title: x,
        cssId: "vsmart_option",
        action: function(b) {
            a.openModal("CLI mode", x, b)
        }
    }, {
        title: "vManage",
        cssId: "vmanage_option",
        action: function(b) {
            a.openModal("CLI mode", "vManage", b)
        }
    }];
    "multiTenant-provider" === w.mode && (A = [{
        title: "vSmart",
        cssId: "vsmart_option",
        action: function(b) {
            a.openModal("CLI mode", x, b)
        }
    }]);
    var q = [{
        title: "CLI mode",
        cssId: "cli_modeoption",
        action: function(a) {
            return !1
        },
        submenu: A
    }, {
        title: "vManage mode",
        cssId: "vmanage_modeoption",
        action: function(b) {
            a.openModal("vManage mode", void 0, b)
        }
    }];
    y.setViewActions([{
        dropdown: !0,
        title: "Add Controller",
        icon: "add_circle",
        rbac: "Device Inventory",
        cssId: a.stateString + "add_controller",
        dropdownOptions: p
    }, {
        dropdown: !0,
        title: "Change Mode",
        icon: "flip",
        rbac: "Device Inventory",
        cssId: a.stateString + "change_mode",
        dropdownOptions: q
    }]),
    a.table = y,
    a.table.loadDataFromUrl("/dataservice/system/device/controllers"),
    a.openModal = function(b, c, d) {
        if ("CLI mode" === b) {
            if (!c)
                return !1;
            o = j.show({
                templateUrl: "app/configuration/devices/modalTemplates/changeModeTemplate.html",
                controller: "changeModeCLICtrl",
                controllerUrl: "app/configuration/devicesController",
                targetEvent: d,
                closeTo: angular.element(document.querySelector("#config_devices_controller_change_mode")),
                resolve: {
                    tableObject: function() {
                        return a.table
                    },
                    deviceType: function() {
                        return c
                    }
                }
            })
        } else
            "vManage mode" === b && (o = j.show({
                templateUrl: "app/configuration/devices/modalTemplates/vManageModeTemplate.html",
                controller: "changeModevManageCtrl",
                controllerUrl: "app/configuration/devicesController",
                targetEvent: d,
                closeTo: angular.element(document.querySelector("#config_devices_controller_change_mode")),
                resolve: {
                    tableObject: function() {
                        return a.table
                    }
                }
            }))
    }
    ;
    var B = l.returnEventsEnum()
      , C = l.returnViewsEnum()
      , D = new eventListObject(C.DEVICES,[B.CERTIFICATE]);
    l.subscribe(D),
    a.$on("certificate_event", function(b, c) {
        l.unsubscribe(D),
        a.table.refresh(),
        m(function() {
            l.subscribe(D)
        })
    }),
    a.$on("$destroy", function() {
        l.unsubscribe(D)
    })
}
function devicesService(a) {
    var b = "dataservice/system/device"
      , c = "dataservice/system/device/fileupload"
      , d = "dataservice/system/device"
      , e = "dataservice/template/config/attach"
      , f = "dataservice/template/config/attached"
      , g = "dataservice/template/config/running"
      , h = "dataservice/template/config/diff"
      , i = "dataservice/template/config/device/mode/vmanage"
      , j = "dataservice/template/config/device/mode/cli"
      , k = "dataservice/device/action/status/mode/cli"
      , l = "/dataservice/device/unreachable"
      , m = "/dataservice/system/device"
      , n = "/dataservice/template/config/rmalist"
      , o = "dataservice/template/config/rmaupdate"
      , p = "/dataservice/system/device/serial"
      , q = "/dataservice/system/device/decommission"
      , r = "/dataservice/system/device/bootstrap/devices"
      , s = "/dataservice/system/device/bootstrap/device"
      , t = "/dataservice/template/device/config/attached"
      , u = "/dataservice/template/config/device/mode/vmanage?type=vedge";
    return {
        configureDevice: function(c, d) {
            var e = {
                timeout: 25e4
            };
            return angular.isDefined(d) && (e.VSessionId = d),
            a.post(b, c, e)
        },
        vEdgeListUpload: function(b, d, e, f) {
            return a.uploadFiles(c, b, e, f, null, d)
        },
        updateDevice: function(b, c) {
            var e = d + "/" + b;
            return a.put(e, c)
        },
        uploadConfig: function(b, c) {
            var d = e + "/" + b;
            return a.put(d, c)
        },
        viewUploadedConfig: function(b) {
            var c = f + "/" + b;
            return a.get(c)
        },
        viewRunningConfig: function(b) {
            var c = g + "/" + b;
            return a.get(c)
        },
        viewDiffConfig: function(b) {
            var c = h + "/" + b;
            return a.get(c)
        },
        editCertificateSerial: function(b, c) {
            var d = p + "/" + b;
            return a.put(d, c)
        },
        getvManageDevicesCtrlPromise: function() {
            return a.returnPromiseHTTPGet(i + "?type=controller")
        },
        getvManageDevicesVEdgePromise: function() {
            return a.returnPromiseHTTPGet(i + "?type=vedge")
        },
        getvManageDevices: function() {
            return a.get(i)
        },
        postvManageDevices: function(b) {
            return a.post(i, b)
        },
        getCliDevicesPromise: function() {
            return a.returnPromiseHTTPGet(j)
        },
        getCliDevices: function() {
            return a.get(j)
        },
        postCliDevices: function(b) {
            return a.post(j, b)
        },
        getCliModeStatus: function() {
            return a.get(k)
        },
        removeDevice: function(b) {
            var c = l + "/" + b;
            return a.delete(c)
        },
        deleteVedge: function(b) {
            return a.delete(m + "/" + b)
        },
        getCopyConfigurationList: function(b) {
            return a.get(n + "/" + b)
        },
        getCopyConfigurationListURL: function(a) {
            var b = n + "/" + a;
            return b
        },
        putCopyConfigurationUpdate: function(b) {
            return a.put(o, b)
        },
        generateConfig: function(b) {
            return a.post(r, b)
        },
        generateDeviceCertificateConfig: function(b, c) {
            return a.get(s + "/" + b + "?configtype=" + c)
        },
        decommissionVedge: function(b) {
            return a.put(q + "/" + b)
        },
        getAvailableDevices: function(b) {
            return a.get(t + "/" + b)
        },
        getAvailableConfigDevices: function() {
            return a.get(u)
        },
        getAvailableVmanageModeControllers: function(b) {
            return a.get(i + "?type=" + b)
        }
    }
}
function devicesvEdgeListController(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    a.stateString = d.getStateString(b);
    var o = 150
      , p = !1
      , q = !1
      , r = !1
      , s = !1
      , t = f.getUserMode();
    f.checkSidebarState() && (f.allowAccess("Device Inventory") && (p = !0,
    o = 178),
    f.allowReadAccess("Device Inventory") && (q = !0),
    f.allowAccess("Template Deploy") && (r = !0),
    f.allowReadAccess("Tools") && (s = !0)),
    a.tabs = [],
    "provider" === t.mode ? a.tabs.push({
        tabTitle: "vEdge List",
        active: "app.config.devices.vedge" === b.current.name,
        states: "app.config.devices.vedge"
    }) : "multiTenant-provider" === t.mode ? a.tabs.push({
        tabTitle: "vEdge List",
        active: "app.config.devices.vedge" === b.current.name,
        states: "app.config.devices.vedge"
    }, {
        tabTitle: "Controllers",
        active: "app.config.devices.controller" === b.current.name,
        states: "app.config.devices.controller"
    }) : "multiTenant-tenant" === t.mode ? a.tabs.push({
        tabTitle: "vEdge List",
        active: "app.config.devices.vedge" === b.current.name,
        states: "app.config.devices.vedge"
    }) : a.tabs.push({
        tabTitle: "vEdge List",
        active: "app.config.devices.vedge" === b.current.name,
        states: "app.config.devices.vedge"
    }, {
        tabTitle: "Controllers",
        active: "app.config.devices.controller" === b.current.name,
        states: "app.config.devices.controller"
    }),
    a.changeModeOptions = ["CLI mode", "vManage mode"],
    a.viewUploadedConfigObj = {
        type: "Local Configuration",
        open: "modal",
        templateUrl: "app/configuration/devices/modalTemplates/configTemplate.html",
        controller: "viewUploadedConfigController"
    },
    a.viewRunningConfigObj = {
        type: "Running Configuration",
        open: "modal",
        templateUrl: "app/configuration/devices/modalTemplates/configTemplate.html",
        controller: "viewRunningConfigController"
    },
    a.viewTemplateLogsObj = {
        type: "Template Log",
        open: "modal",
        templateUrl: "app/configuration/devices/modalTemplates/templateLogs.html",
        controller: "templateLogController"
    },
    a.deleteVedge = {
        type: "Delete vEdge",
        open: "confirm",
        title: "Are you sure you want to delete the device from the network?",
        content: "This will delete the device. You cannot undo this action",
        okButtonActionFn: function(b) {
            a.confirmDelete(b.entity)
        }
    },
    a.generateConfiguration = {
        type: "Generate Bootstrap Configuration",
        open: "modal",
        templateUrl: "app/configuration/devices/modalTemplates/generateConfig.html",
        controller: "generateConfigModalController",
        hideCallback: function(a) {
            return !angular.equals(a.entity.deviceModel, "vedge-cloud") || !angular.isDefined(a.entity.vedgeCertificateState) || !angular.equals(a.entity.vedgeCertificateState, "tokengenerated") && !angular.equals(a.entity.vedgeCertificateState, "bootstrapconfiggenerated")
        }
    },
    a.decommissionedVedge = {
        type: "Decommission vEdge",
        open: "confirm",
        title: "Are you sure you want to decommission vEdge Cloud?",
        content: "This will invalidate the vEdge Cloud device. You cannot undo this action.",
        okButtonActionFn: function(b) {
            a.confirmDecommission(b.entity)
        },
        hideCallback: function(a) {
            return !angular.equals(a.entity.deviceModel, "vedge-cloud") || !angular.equals(a.entity.validity.toUpperCase(), "valid".toUpperCase())
        }
    },
    a.copyConfiguration = {
        type: "Copy Configuration",
        open: "modal",
        templateUrl: "app/configuration/devices/modalTemplates/copyConfigurationTemplate.html",
        controller: "CopyConfigurationController"
    },
    a.confirmDelete = function(b) {
        g.deleteVedge(b.uuid).then(function() {
            var c = "Device successfully deleted - " + b.uuid;
            h.success(c, 4e4),
            a.table.refresh()
        }, function(a) {
            h.confirm(a)
        })
    }
    ,
    a.confirmDecommission = function(b) {
        g.decommissionVedge(b.uuid).then(function() {
            var c = "Device successfully decommissioned - " + b.uuid;
            h.success(c, 4e4),
            a.table.refresh()
        }, function(a) {
            h.confirm(a)
        })
    }
    ,
    a.exportUserData = {
        type: "Export User Data",
        open: "callback",
        okButtonActionFn: function(a) {
            u(a)
        }
    };
    var u = function(a) {
        $("#table-dropdown-menu").remove()
    };
    a.udpateDeviceVariableValues = {
        type: "Change Device Values",
        open: "callback",
        hideCallback: function(a) {
            return !angular.equals(a.entity.configOperationMode, "vmanage")
        },
        okButtonActionFn: function(c) {
            var d;
            a.table.taggedSearchObject.tableSpinner.isSet = !0,
            j.listDeviceTemplates().then(function(a) {
                d = c.entity.templateId ? _.find(a.data, function(a) {
                    return angular.equals(a.templateId, c.entity.templateId)
                }) : _.find(a.data, function(a) {
                    return angular.equals(a.templateName, c.entity.template)
                });
                var b = {};
                return b.templateId = d.templateId,
                b.deviceIds = [c.entity.uuid],
                b.isEdited = !1,
                b.isMasterEdited = !1,
                j.generateInput(b)
            }).then(function(a) {
                a.selectedTemplate = d,
                a.selectedDevices = [c.entity.uuid],
                a.attachedDevices = [c.entity.uuid],
                a.isEdited = !1,
                a.isMasterEdited = !1,
                i.setTemplateDeviceInput(a),
                b.go("app.config.template.device.configure", {
                    templateId: a.selectedTemplate.templateId
                })
            }, function(b) {
                a.table.taggedSearchObject.tableSpinner.isSet = !1,
                h.error(b.error.message + ": " + b.error.details)
            })
        }
    },
    a.deviceBringUpObj = {
        type: "Device Bring Up",
        open: "callback",
        okButtonActionFn: function(a) {
            b.go("app.config.device_bring_up", {
                deviceType: a.entity.deviceType,
                uuid: a.entity.uuid,
                localSystemIp: a.entity["local-system-ip"],
                systemIp: a.entity["system-ip"]
            })
        }
    },
    a.tableRowHoverActions = [],
    q && (a.tableRowHoverActions.push(a.viewRunningConfigObj),
    a.tableRowHoverActions.push(a.viewUploadedConfigObj)),
    p && (a.tableRowHoverActions.push(a.deleteVedge),
    a.tableRowHoverActions.push(a.copyConfiguration),
    a.tableRowHoverActions.push(a.decommissionedVedge),
    a.tableRowHoverActions.push(a.generateConfiguration)),
    r && a.tableRowHoverActions.push(a.udpateDeviceVariableValues),
    a.tableRowHoverActions.push(a.viewTemplateLogsObj),
    s && a.tableRowHoverActions.push(a.deviceBringUpObj),
    a.syncStatus = {
        launchDiffChecker: function(a, b) {
            if (!this.isSynced(a.entity.configStatusMessage)) {
                var d = a.entity.uuid;
                "vedge-vbond" === a.entity.deviceType && (d = d.split("vbond-").pop());
                var e = c.show({
                    templateUrl: "app/configuration/devices/modalTemplates/outOfSyncDiffModalTemplate.html",
                    controller: "outOfSyncDiffModalCtrl",
                    targetEvent: b,
                    resolve: {
                        configUrl: function() {
                            return d
                        }
                    }
                });
                e.then(function(a) {}, function() {
                    k.info("Modal dismissed at: " + new Date)
                })
            }
        },
        isSynced: function(a) {
            return !!angular.isUndefined(a) || !a.toLowerCase().includes("out of sync")
        },
        isSyncDetailsAvailable: function(a) {
            return !d.isUndefinedOrEmpty(a.configStatusMessageDetails) && !d.isNull(a.configStatusMessageDetails)
        }
    };
    var v = new e({
        columnResizing: !0,
        singleSelect: !0,
        enableSorting: !0,
        dataUid: "chasisNumber",
        toggleFirstRowOnLoad: !0,
        tableHeightOffset: o,
        autoLoad: !0
    },{
        csvExport: !0
    },{},{
        exporterHeaderFilterUseName: !1,
        exporterCsvFilename: "Device_Vedge_List.csv"
    })
      , w = [{
        property: "display",
        value: "syncDiffChecker",
        config: {
            cellTemplate: '<div class="ui-grid-cell-contents" data-ng-click="grid.appScope.launchDiffChecker(row, $event)" id="sync_status_{{rowRenderIndex}}"><span id="view_config_diff" data-ng-class="grid.appScope.isSynced(row.entity.configStatusMessage) ? \'\' : \'error-link-cell\'">{{ row.entity.configStatusMessage }}</span><span data-ng-show="grid.appScope.isSyncDetailsAvailable(row.entity)"> - {{row.entity.configStatusMessageDetails}}</span></div>',
            enableFiltering: !0,
            enableSorting: !0
        }
    }];
    v.addCustomColumns(w),
    v.setAppScope(a.syncStatus),
    v.setHoverAction(a.tableRowHoverActions),
    v.setViewActions([{
        dropdown: !0,
        title: "Change Mode",
        icon: "flip",
        rbac: "Device Inventory",
        cssId: a.stateString + "change_mode",
        dropdownOptions: [{
            title: "CLI mode",
            cssId: "cli_mode_choice",
            action: function(b) {
                c.show({
                    templateUrl: "app/configuration/devices/modalTemplates/changeModeTemplate.html",
                    controller: "changeModeCLICtrl",
                    controllerUrl: "app/configuration/devicesController",
                    openFrom: angular.element(document.querySelector("#config_devices_vedge_change_mode")),
                    closeTo: angular.element(document.querySelector("#config_devices_vedge_change_mode")),
                    resolve: {
                        tableObject: function() {
                            return a.table
                        },
                        deviceType: function() {
                            return ""
                        }
                    }
                }).then(function() {
                    m(function() {
                        a.table.refresh()
                    }, 500)
                })
            }
        }, {
            title: "vManage mode",
            cssId: "vmanage_mode_choice",
            action: function(b) {
                c.show({
                    templateUrl: "app/configuration/devices/modalTemplates/vManageModeTemplate.html",
                    controller: "changeModevManageCtrl",
                    controllerUrl: "app/configuration/devicesController",
                    openFrom: angular.element(document.querySelector("#config_devices_vedge_change_mode")),
                    closeTo: angular.element(document.querySelector("#config_devices_vedge_change_mode")),
                    resolve: {
                        tableObject: function() {
                            return a.table
                        }
                    }
                }).then(function() {
                    m(function() {
                        a.table.refresh()
                    }, 500)
                })
            }
        }]
    }, {
        button: !0,
        title: "Upload vEdge List",
        icon: "file_upload",
        rbac: "Device Inventory",
        cssId: a.stateString + "upload",
        action: function(b) {
            a.open("app/configuration/devices/modalTemplates/uploadvEdgeTemplate.html", "uploadvEdgeListController", b)
        }
    }, {
        button: !0,
        title: "Export Bootstrap Configuration",
        icon: "launch",
        rbac: "Device Inventory",
        cssId: a.stateString + "export",
        action: function(b) {
            a.open("app/configuration/devices/modalTemplates/exportCloudConfig.html", "exportCloudConfigController", b)
        }
    }]);
    var x = function(b) {
        y(b),
        a.table.setTableData(b)
    };
    v.setOnRefreshCallback(x),
    a.table = v;
    var y = function(a) {
        angular.forEach(a, function(a) {
            angular.isDefined(a.vedgeCertificateState) && ("tokengenerated" === a.vedgeCertificateState || "bootstrapconfiggenerated" === a.vedgeCertificateState) && angular.isDefined(a.serialNumber) && (a.serialNumber = "Token - " + a.serialNumber)
        })
    };
    a.table.setLoadDataFromUrlCallback(y),
    a.table.loadDataFromUrl("/dataservice/system/device/vedges"),
    a.open = function(b, d, e) {
        c.show({
            templateUrl: b,
            controller: d,
            targetEvent: e,
            resolve: {
                tableObject: function() {
                    return a.table
                }
            }
        })
    }
    ,
    a.showContent = function(b) {
        a.content = b
    }
    ;
    var z = l.returnEventsEnum()
      , A = l.returnViewsEnum()
      , B = new n(A.DEVICES,[z.DEVICE]);
    l.subscribe(B),
    a.$on("device-action_event", function(b, c) {
        _.indexOf(["sync"], c > -1) && (l.unsubscribe(B),
        a.table.refresh(),
        m(function() {
            l.subscribe(B)
        }))
    });
    var C = new n(A.DEVICES,[z.CERTIFICATE]);
    l.subscribe(C),
    a.$on("certificate_event", function(b, c) {
        l.unsubscribe(C),
        a.table.refresh(),
        m(function() {
            l.subscribe(C)
        })
    }),
    a.$on("$destroy", function() {
        l.unsubscribe(B),
        l.unsubscribe(C)
    })
}
function addvBondModalCtrl(a, b, c, d, e, f, g, h, i, j) {
    a.stateString = c.getStateString(b),
    a.vBondConfig = {},
    a.serverCall = !1,
    a.showErrorSection = !1,
    a.vbondGenerateCSR = !0,
    g.getCertificateSettings().then(function(b) {
        h.processData(b) ? a.processText = "Generate CSR and send to Symantec for signing" : a.processText = "Generate CSR"
    }, function(b, c, d, e) {
        a.serverCall = !1,
        a.showErrorSection = !0,
        a.errorMessage = b
    }),
    a.add = function() {
        a.serverCall = !0;
        var b = {
            deviceIP: a.vBondConfig.ipaddress,
            username: a.vBondConfig.username,
            password: a.vBondConfig.password,
            personality: "vbond",
            generateCSR: a.vbondGenerateCSR
        };
        e.configureDevice(b).then(function(b) {
            a.serverCall = !1,
            f.refresh(),
            a.cancel()
        }, function(b, c, d, e) {
            a.serverCall = !1,
            a.showErrorSection = !0,
            a.errorMessage = b
        })
    }
    ,
    a.cancel = function(a) {
        d.cancel()
    }
}
function addvSmartModalCtrl(a, b, c, d, e, f, g, h, i, j, k, l, m) {
    function n(b) {
        var c = {
            deviceIP: a.vSmartConfig.ipaddress,
            username: a.vSmartConfig.username,
            password: a.vSmartConfig.password,
            protocol: a.selectedProtocol.value,
            port: a.vSmartConfig.port,
            personality: "vsmart",
            generateCSR: a.vsmartGenerateCSR
        };
        if (angular.isDefined(b))
            var d = e.configureDevice(c, b);
        else
            var d = e.configureDevice(c);
        d.then(function(b) {
            angular.isDefined(b.successMessage) && j.warning(b.successMessage),
            a.serverCall = !1,
            f.refresh(),
            a.cancel()
        }, function(b, c, d, e) {
            a.serverCall = !1,
            a.showErrorSection = !0,
            a.errorMessage = b
        })
    }
    if (a.stateString = c.getStateString(b),
    a.vSmartConfig = {},
    a.serverCall = !1,
    a.disablePort = !0,
    a.showErrorSection = !1,
    a.selectedProtocol = {},
    a.protocolOptions = [{
        id: 0,
        key: 0,
        value: "DTLS"
    }, {
        id: 1,
        key: 1,
        value: "TLS"
    }],
    a.userMode = l.getUserMode(),
    "provider" === a.userMode.mode && _.indexOf(a.userMode.roles, "ListTenants") !== -1) {
        a.tenantOptions = {
            data: void 0
        },
        a.tenantOptions.selected = void 0;
        var o = k.getInstance();
        o.getTenants().then(function(b) {
            a.tenantOptions.data = b
        }, function(a) {})
    }
    g.getCertificateSettings().then(function(b) {
        h.processData(b) ? a.processText = "Generate CSR and send to Symantec for signing" : a.processText = "Generate CSR"
    }, function(b, c, d, e) {
        a.serverCall = !1,
        a.showErrorSection = !0,
        a.errorMessage = b
    }),
    a.vsmartGenerateCSR = !0,
    a.add = function() {
        a.serverCall = !0,
        c.checkNestedProperty(a.tenantOptions, "selected", "tenantId") ? m.getVSessionId(a.tenantOptions.selected.tenantId).then(function(a) {
            n(a.httpResponseHeader.vsessionid)
        }, function(b) {
            a.serverCall = !1,
            a.showErrorSection = !0,
            a.errorMessage = b
        }) : n()
    }
    ,
    a.onSelectProtocol = function(b) {
        "TLS" === b.value ? a.disablePort = !1 : "DTLS" === b.value && (a.vSmartConfig.port = "",
        a.disablePort = !0)
    }
    ,
    a.cancel = function() {
        d.cancel()
    }
}
function changeModeCLICtrl(a, b, c, d, e, f, g, h) {
    a.stateString = c.getStateString(b),
    a.popupTitle = "Change Mode - CLI",
    a.postCall = {
        InProgress: !1
    },
    a.confirmChangeMode = !1;
    var i, j, k = [];
    b.current.name.contains("app.config.devices.controller") ? ("vManage" == h ? (j = "vmanage",
    i = "/dataservice/template/config/device/mode/vmanage?type=vmanage") : (j = "controller",
    i = "/dataservice/template/config/device/mode/vmanage?type=controller"),
    k.push({
        property: "host-name",
        display: "Name"
    }, {
        property: "local-system-ip",
        display: "Device IP"
    }, {
        property: "deviceIP",
        display: ""
    }, {
        property: "uuid",
        display: ""
    })) : (j = "vedge",
    k.push({
        property: "cloudxStatus",
        display: " "
    }, {
        property: "host-name",
        display: "Name"
    }, {
        property: "local-system-ip",
        display: "Device IP"
    }, {
        property: "toolTipData",
        display: ""
    }, {
        property: "configCloudxMode",
        display: ""
    }, {
        property: "deviceIP",
        display: ""
    }, {
        property: "uuid",
        display: ""
    })),
    f.setOptions({
        labels: {
            heading: "Change mode to CLI from the list below",
            available: "vManage Mode",
            selected: "CLI Mode"
        },
        toolTip: {
            enabled: "vedge" === j,
            templateCache: "vedge" === j ? "'detachToolTipTemplate'" : ""
        },
        columns: k,
        orderBy: "host-name",
        uuid: "uuid",
        showErrorSection: !1,
        errorMessage: {},
        statusColumn: "vedge" === j
    }),
    "vedge" === j ? e.getAvailableConfigDevices().then(function(b) {
        a.serverCall = !1;
        var c = [];
        angular.forEach(b.data, function(a) {
            c.push({
                cloudxStatus: "none" !== a.configCloudxMode ? "error" : "",
                "host-name": a["host-name"],
                deviceIP: a.deviceIP,
                "local-system-ip": a["local-system-ip"],
                toolTipData: "none" !== a.configCloudxMode ? "CloudExpress is enabled on this device. If you detach the device, it will not be updated with new CloudExpress changes" : "",
                uuid: a.uuid
            })
        }),
        f.setMultiSelectData(c)
    }, function(b) {
        a.serverCall = !1,
        f.getOptions().showErrorSection = !0,
        f.getOptions().errorMessage = b
    }) : e.getAvailableVmanageModeControllers(j).then(function(b) {
        a.serverCall = !1,
        f.setMultiSelectData(b.data)
    }, function(b) {
        a.serverCall = !1,
        f.getOptions().showErrorSection = !0,
        f.getOptions().errorMessage = b
    }),
    a.multiSelectOpts = f.getOptions(),
    a.updateDevicesToCLIMode = function() {
        return !(!f.validateRequiredFields(a.deviceMode, "numSelected") && !a.deviceMode.$valid) && (_.find(f.getSelectedItems(), function(a) {
            return "error" === a.cloudxStatus
        }) && (a.confirmChangeMode = !0),
        void (a.confirmChangeMode || a.proceedChangeMode()))
    }
    ,
    a.proceedChangeMode = function() {
        var c = {
            deviceType: j,
            devices: []
        };
        angular.forEach(f.getSelectedItems(), function(a) {
            c.devices.push({
                deviceId: a.uuid,
                deviceIP: a.deviceIP
            })
        }),
        a.postCall.InProgress = !0,
        e.postCliDevices(c).then(function(c) {
            a.postCall.InProgress = !1,
            f.reset(),
            d.hide(),
            b.go("app.device.status", {
                activity: g.getStatusAction("DEVICE_CONFIG_MODE_CLI").endpoint,
                pid: c ? c.id : ""
            })
        }, function(b) {
            a.postCall.InProgress = !1,
            a.confirmChangeMode && (a.confirmChangeMode = !1),
            f.getOptions().showErrorSection = !0,
            f.getOptions().errorMessage = b
        })
    }
    ,
    a.cancel = function() {
        a.confirmChangeMode = !1,
        f.reset(),
        d.cancel()
    }
}
function changeModevManageCtrl(a, b, c, d, e, f, g, h, i, j, k, l) {
    a.ok = function() {
        c.go("app.config.template.device"),
        e.hide()
    }
    ,
    a.cancel = function() {
        e.cancel()
    }
}
function CopyConfigurationController(a, b, c, d, e, f, g, h) {
    a.stateString = c.getStateString(b),
    a.hideActionButtons = !1,
    a.popUptitle = "Copy Configuration",
    a.showErrorSection = !1,
    a.showNoDevicesError = !1,
    a.disableUpdateButton = !0,
    a.selectedRow = e,
    a.confirmUpdate = !1,
    a.putBody = {},
    a.copyConfigurationTable = new g({
        columnResizing: !0,
        multiSelect: !1,
        autoLoad: !0,
        singleSelectWithRadio: !0,
        rowTemplate: '<div data-ng-repeat="(colRenderIndex, col) in colContainer.renderedColumns track by col.colDef.name" class="ui-grid-cell enableClick" data-ng-class="{ \'ui-grid-row-header-cell\': col.isRowHeader }" data-ng-dblclick="return;" data-ng-click="grid.appScope.updateCopyConfigurationSelected(row)"  ui-grid-cell></div>'
    }),
    a.copyConfigurationTable.setToolbar({
        addRow: !1,
        search: !0,
        rowCount: !0,
        refresh: !0
    });
    var i = {
        updateCopyConfigurationSelected: function(b) {
            a.confirmUpdate = !1,
            a.showErrorSection && (a.showErrorSection = !1),
            a.disableUpdateButton = !b.isSelected,
            a.putBody = {
                oldDeviceUUID: a.selectedRow.uuid,
                newDeviceUUID: b.isSelected ? b.entity.uuid : ""
            }
        }
    };
    a.goToCertificateView = function() {
        d.cancel(),
        b.go("app.config.certificates.vedgelist")
    }
    ,
    a.copyConfigurationTable.setAppScope(i),
    a.copyConfigurationTable.setOnRowSelectionCallback(i.updateCopyConfigurationSelected),
    f.getCopyConfigurationList(e.uuid).then(function(b) {
        b.data.length > 0 ? (a.copyConfigurationTable.createColumns(b.header.columns),
        a.copyConfigurationTable.setTableData(b.data),
        a.copyConfigurationTable.setDataUrl(f.getCopyConfigurationListURL(a.selectedRow.uuid)),
        a.showNoDevicesError = !1) : (a.showNoDevicesError = !0,
        a.noDevicesErrorMessage = c.createErrorObject("No invalid devices present to copy configuration to.", "Configuration can be copied only to invalid devices. Click OK to return to the Certificates -> vEdge List screen and invalidate the device."))
    }, function(a) {
        h.confirm(a)
    }),
    a.cancel = function() {
        d.cancel()
    }
    ,
    a.confirmUpdateCopyConfiguration = function() {
        !angular.isDefined(a.putBody) || !a.putBody.hasOwnProperty("oldDeviceUUID") || !a.putBody.hasOwnProperty("newDeviceUUID") || a.putBody.newDeviceUUID.length < 1 ? (a.showErrorSection = !0,
        a.errorMessage = c.createErrorObject("No device selected to copy configuration"),
        a.disableUpdateButton = !0) : (a.confirmUpdate = !0,
        a.showErrorSection = !1,
        a.confirmContent = {
            message: " Are you sure you want to copy configuration from chassis ID " + a.putBody.oldDeviceUUID + " to chassis ID " + a.putBody.newDeviceUUID + "?"
        })
    }
    ,
    a.updateCopyConfiguration = function() {
        a.hideActionButtons = !0,
        a.confirmUpdate = !1,
        a.serverCall = !0,
        f.putCopyConfigurationUpdate(a.putBody).then(function(a) {
            d.cancel(),
            h.success("Configuration copied successfully", 2e3)
        }, function(b) {
            a.showErrorSection = !0,
            a.serverCall = !1,
            a.errorMessage = b
        })
    }
}
function diffConfigController(a, b, c, d, e, f) {
    a.stateString = c.getStateString(b),
    a.serverCall = !0,
    a.popUptitle = "Diff Configuration",
    e.viewDiffConfig(f.uuid).then(function(b) {
        a.configuration = b.config,
        a.serverCall = !1
    }, function(b, c, d, e) {
        a.showErrorSection = !0,
        a.serverCall = !1,
        a.errorMessage = b
    }),
    a.cancel = function() {
        d.cancel()
    }
}
function exportCloudConfigController(a, b, c, d, e, f, g, h, i, j) {
    a.stateString = c.getStateString(b),
    a.postCall = {
        InProgress: !1
    },
    a.bootstrapConfig = {
        type: "cloudinit"
    },
    h.setOptions({
        labels: {
            heading: "Select devices to configure",
            available: "Available Devices",
            selected: "Selected Devices"
        },
        toolTip: {
            enabled: !1,
            templateCache: ""
        },
        columns: [{
            property: "chasisNumber",
            display: "Chassis ID"
        }],
        orderBy: "chasisNumber",
        uuid: "uuid",
        showErrorSection: !1,
        errorMessage: {}
    }),
    h.setAvailableUrl("/dataservice/system/device/vedges?model=vedge-cloud&state=tokengenerated&state=bootstrapconfiggenerated"),
    a.multiSelectOpts = h.getOptions(),
    a.ok = function() {
        if (!h.validateRequiredFields(a.vedgeCloudGenerateConfig, "numSelected") && !a.vedgeCloudGenerateConfig.$valid)
            return !1;
        var b = {};
        b.uuid = _.pluck(h.getSelectedItems(), "uuid"),
        b.bootstrapConfigType = a.bootstrapConfig.type,
        a.postCall.InProgress = !0,
        d.generateConfig(b).then(function(b) {
            a.postCall.InProgress = !1,
            f.refresh(),
            j.downloadFile("/dataservice/system/device/bootstrap/download/" + b.id, 6e4).then(function() {
                a.cancel(!0)
            }, function() {
                g.error("Unable to download cloud init configuration zip file")
            }),
            h.reset(),
            e.hide(b)
        }, function(b) {
            a.postCall.InProgress = !1,
            h.getOptions().showErrorSection = !0,
            h.getOptions().errorMessage = b
        })
    }
    ,
    a.cancel = function() {
        e.cancel()
    }
}
function generateConfigModalController(a, b, c, d, e, f, g, h) {
    a.serverCallDone = !1,
    a.serverCall = !1,
    a.bootstrapConfig = {
        type: "cloudinit"
    },
    a.device = {},
    a.stateString = c.getStateString(b),
    a.showErrorSection = !1,
    a.errorMessage = "",
    e && e.uuid && (a.device.uuid = e.uuid),
    a.download = function() {
        var b = document.createElement("a");
        b.download = a.device.uuid + ".cfg",
        b.href = "data:csr/plain;charset=UTF-8," + encodeURIComponent(a.device.bootstrapConfig),
        document.body.appendChild(b),
        b.click(),
        document.body.removeChild(b)
    }
    ,
    a.ok = function() {
        a.serverCallDone = !0,
        a.serverCall = !0,
        h.generateDeviceCertificateConfig(a.device.uuid, a.bootstrapConfig.type).then(function(b, c) {
            f.refresh(),
            a.serverCall = !1,
            a.device.bootstrapConfig = b.bootstrapConfig
        }, function(b, c, d, e) {
            a.cancel(),
            g.confirm(b)
        })
    }
    ,
    a.cancel = function() {
        d.cancel()
    }
}
function outOfSyncDiffModalCtrl(a, b, c, d, e, f, g, h) {
    a.stateString = c.getStateString(b),
    a.loadingData = !0,
    a.configDiff = {
        viewType: "sidebyside"
    },
    a.errorOccurred = !1,
    a.errorMessage = " configuration is not available.",
    a.diffUsingJS = function(b, c) {
        var d = !!angular.equals(a.configDiff.viewType, "inline")
          , e = difflib.stringAsLines(b)
          , f = difflib.stringAsLines(c)
          , g = new difflib.SequenceMatcher(e,f)
          , h = g.get_opcodes()
          , i = $("#diffoutput");
        angular.forEach(i.children(), function(a) {
            a.remove()
        });
        var j = $("#contextSize").value;
        j = j ? j : null,
        i.append(diffview.buildView({
            baseTextLines: e,
            newTextLines: f,
            opcodes: h,
            baseTextName: "Running Configuration",
            newTextName: "Local Configuration",
            contextSize: j,
            viewType: d ? 1 : 0
        }))
    }
    ;
    var i = g.previewOriginalConfig(h)
      , j = f.viewRunningConfig(h);
    d.all([i, j]).then(function(b) {
        a.localConfig = b[0].deviceConfiguration,
        a.runningConfig = b[1].config,
        _.isEmpty(b[0].deviceConfiguration) && _.isEmpty(b[1].config) ? (a.errorMessage = "Running and Local" + a.errorMessage,
        a.errorOccurred = !0) : _.isEmpty(b[1].config) ? (a.errorMessage = "Running" + a.errorMessage,
        a.errorOccurred = !0) : _.isEmpty(b[0].deviceConfiguration) && (a.errorMessage = "Local" + a.errorMessage,
        a.errorOccurred = !0),
        a.loadingData = !1,
        a.diffUsingJS(a.runningConfig, a.localConfig)
    }),
    a.cancel = function() {
        e.cancel()
    }
    ,
    a.$on("$destroy", function() {})
}
function templateLogController(a, b, c, d, e) {
    a.stateString = c.getStateString(b),
    a.popUptitle = "Template Logs";
    var f = "";
    e.templateApplyLog ? _.each(e.templateApplyLog, function(a) {
        f += a + "\n"
    }) : f = "No logs available",
    a.configuration = f,
    a.cancel = function() {
        d.cancel()
    }
}
function updateDeviceController(a, b, c, d, e, f, g) {
    a.update = {},
    a.serverCall = !1,
    a.showErrorSection = !1,
    a.stateString = c.getStateString(b),
    f && (a.update.username = f.username,
    a.update.password = "",
    a.update.ipaddress = f.deviceIP,
    a.deviceUuid = f.uuid),
    a.save = function() {
        a.serverCall = !0;
        var b = {
            deviceIP: a.update.ipaddress,
            username: a.update.username,
            password: a.update.password
        };
        e.updateDevice(a.deviceUuid, b).then(function(b) {
            a.serverCall = !1,
            g.refresh(),
            a.cancel()
        }, function(b, c, d, e) {
            a.serverCall = !1,
            a.showErrorSection = !0,
            a.errorMessage = b
        })
    }
    ,
    a.cancel = function() {
        d.cancel()
    }
}
function uploadConfigController(a, b, c, d, e, f, g) {
    a.device = {},
    a.serverCall = !1,
    a.showErrorSection = !1,
    a.stateString = c.getStateString(b),
    a.add = function() {
        a.serverCall = !0;
        var b = {
            config: a.device.configuration
        };
        e.uploadConfig(f.uuid, b).then(function(b) {
            a.serverCall = !1,
            g.refresh(),
            a.cancel()
        }, function(b, c, d, e) {
            a.showErrorSection = !0,
            a.serverCall = !1,
            a.errorMessage = b
        })
    }
    ,
    a.cancel = function() {
        d.cancel()
    }
    ,
    a.showContent = function(b) {
        a.device.configuration = b
    }
}
function uploadvEdgeListController(a, b, c, d, e, f, g, h, i) {
    a.stateString = c.getStateString(b),
    a.showConfirmPopover = !1,
    a.progressBar = {},
    a.progressBar.currentProgress = 0,
    a.validateDevices = !1,
    a.showErrorSection = !1,
    a.uploadSuccessful = !1,
    a.serverCall = !1,
    a.confirmUpload = !1,
    a.upload = function() {
        a.filevEdgeList ? (a.showErrorSection = !1,
        a.confirmUpload = !0,
        a.confirmContent = {
            message: "Are you sure you want to upload " + a.filevEdgeList.name + " ?"
        }) : (a.showErrorSection = !0,
        a.errorMessage = c.createErrorObject("File Missing", "Please choose a file to upload"))
    }
    ,
    a.confirmUploadList = function() {
        var b = 108e5
          , c = "";
        c = a.validateDevices ? "valid" : "invalid";
        var d = {
            validity: c,
            upload: !0
        };
        a.serverCall = !0,
        a.confirmUpload = !1,
        e.vEdgeListUpload(a.filevEdgeList, d, a.progressBar, b).then(function(b) {
            a.serverCall = !1,
            a.uploadSuccessful = !0,
            a.sucessObj = {
                title: b.vedgeListUploadStatus || "vEdge list uploaded successfully",
                message: b.vedgeListUploadMsg || "",
                duplicate: b.vedgeListDuplicateMsg || "",
                statusCode: b.vedgeListStatusCode || "",
                id: b.id
            }
        }, function(b, c) {
            a.serverCall = !1,
            a.uploadSuccessful = !1,
            angular.isDefined(b) && null !== b && angular.isDefined(b.error) ? "VELIST0002" === b.error.code ? (f.refresh(),
            a.cancel(),
            g.confirm(b)) : angular.isDefined(b.status) && 499 === b.status ? (a.cancel(),
            g.error(b.error.message + " : " + b.error.details)) : (a.showErrorSection = !0,
            a.errorMessage = b) : angular.isDefined(b) && null !== b && (a.showErrorSection = !0,
            a.errorMessage = b)
        })
    }
    ,
    a.ok = function() {
        d.cancel(),
        a.validateDevices && !a.sucessObj.statusCode ? b.go("app.device.status", {
            activity: h.getStatusAction("PUSH_VEDGE_LIST").endpoint,
            pid: a.sucessObj.id ? a.sucessObj.id : ""
        }) : a.sucessObj.statusCode || (f.refresh(),
        g.success("File uploaded successfully", 2e3))
    }
    ,
    a.cancel = function() {
        d.cancel()
    }
}
function viewRunningConfigController(a, b, c, d, e, f, g) {
    a.stateString = c.getStateString(b),
    a.popUptitle = "Running Configuration",
    a.serverCall = !0;
    var h = f.uuid;
    "vedge-vbond" === f.deviceType && (h = h.split("vbond-").pop()),
    e.viewRunningConfig(h).then(function(b) {
        a.configuration = b.config,
        a.serverCall = !1
    }, function(b, c, d, e) {
        a.configuration = "No configuration available",
        a.showErrorSection = !0,
        a.serverCall = !1,
        a.errorMessage = b
    }),
    a.cancel = function() {
        d.cancel()
    }
}
function viewUploadedConfigController(a, b, c, d, e, f) {
    a.stateString = c.getStateString(b),
    a.popUptitle = "Local Configuration",
    a.serverCall = !0;
    var g = f.uuid;
    "vedge-vbond" === f.deviceType && (g = g.split("vbond-").pop()),
    e.viewUploadedConfig(g).then(function(b) {
        a.serverCall = !1,
        a.configuration = b.config
    }, function(b, c, d, e) {
        a.configuration = "No configuration available",
        a.showErrorSection = !0,
        a.serverCall = !1,
        a.errorMessage = b
    }),
    a.cancel = function() {
        d.cancel()
    }
}
function typeDataPolicy() {
    return {
        restrict: "AE",
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/directives/dataPolicyType.html",
        scope: {
            title: "@",
            icon: "@",
            description: "@",
            color: "@"
        }
    }
}
function CrudVSmartPolicyCtrl(a, b, c, d, e, f, g) {
    function h() {
        c.listVSmartPolicy().then(function(b) {
            var c = _.find(b.data, function(b) {
                return angular.equals(b.policyId, a.policy.policyId)
            });
            angular.extend(a.policy, c),
            a.postCall.InProgress = !1
        }, function(c) {
            angular.isObject(c) && b.checkNestedProperty(c, "error", "details") && g.error(c.error.message + ": " + c.error.details),
            a.postCall.InProgress = !1
        })
    }
    a.modalHeader,
    a.buttonFunctions.reset(),
    a.breadCrumb.states = [{
        name: "policy",
        title: "Policy",
        state: function(a) {
            e.go("app.config.policy.centralizedPolicy.vsmart", {
                reload: !0
            })
        }
    }, {
        name: "advanced-policy",
        title: "vSmart CLI Policy",
        state: function(a) {
            e.go("app.config.policy.custom.cli")
        }
    }, {
        name: "cli",
        title: "Add vSmart CLI Policy"
    }],
    a.globalButtonState.disableTabs = !0,
    a.globalButtonState.customOptions = !1,
    a.policy = {
        policyState: void 0
    },
    a.postCall = {
        InProgress: !0
    },
    a.policyEditor = ace.edit("policyDefinitionEditor"),
    a.policyEditor.setValue(""),
    a.policyEditor.$blockScrolling = 1 / 0,
    a.policyEditor.setShowPrintMargin(!1),
    a.searchBox = function() {
        a.policyEditor.execCommand("find")
    }
    ,
    b.checkNestedProperty(e, "params", "id") && (a.policy = {
        policyId: e.params.id
    }),
    "app.config.policy.centralizedPolicy.vsmart.view" === e.current.name ? (a.modalHeader = "View CLI Policy",
    a.policy.policyState = "readOnly",
    h()) : "app.config.policy.centralizedPolicy.vsmart.edit" === e.current.name ? (a.modalHeader = "Edit CLI Policy",
    a.policy.policyState = "edit",
    h()) : (a.modalHeader = "Add CLI Policy",
    a.postCall.InProgress = !1),
    a.showContent = function(b) {
        a.policy.policyDefinition = b,
        a.policyEditor.setValue(a.policy.policyDefinition, -1)
    }
    ,
    a.add = function(b) {
        a.postCall.InProgress = !0,
        b.policyDefinition = a.policyEditor.getValue(),
        c.createVSmartPolicy(b).then(function(b) {
            a.cancel()
        }, function(b) {
            a.postCall.InProgress = !1,
            g.error(b.error.message + ": " + b.error.details)
        })
    }
    ,
    a.update = function(b, h) {
        a.postCall.InProgress = !0,
        b.isEdited = !0,
        b.policyDefinition = a.policyEditor.getValue(),
        c.updateVSmartPolicy(b.policyId, b).then(function(b) {
            if (angular.isArray(b) && b.length > 0) {
                a.postCall.InProgress = !1;
                var c = d.show({
                    templateUrl: "app/common/modalPartials/activateVSmartPolicyModal.html",
                    controller: "ActivateVSmartPolicyModalInstanceCtrl",
                    targetEvent: h,
                    resolve: {
                        selectedRow: function() {
                            return a.policy.isEdited = !0,
                            a.policy
                        }
                    }
                });
                c.then(function(a) {
                    e.go("app.device.status", {
                        activity: f.getStatusAction("VSMART_POLICY_CONFIG").endpoint,
                        pid: a ? a.id : ""
                    })
                })
            }
            a.cancel()
        }, function(b) {
            a.postCall.InProgress = !1,
            g.error(b.error.message + ": " + b.error.details)
        })
    }
    ,
    a.cancel = function() {
        a.postCall.InProgress = !1,
        e.go(e.previousState.name)
    }
    ,
    a.$watch("policy.policyDefinition", function(b, c) {
        b && b !== c && a.policyEditor.setValue(a.policy.policyDefinition, -1)
    }),
    a.$on("$destroy", function() {
        a.policyEditor.destroy()
    })
}
function VSmartPolicyController(a, b, c, d, e) {
    a.stateString = c.getStateString(b),
    a.breadCrumb.states && !_.isNull(a.breadCrumb.states) && a.breadCrumb.states.reset(),
    a.buttonFunctions.reset(),
    a.globalButtonState.disableTabs = !1,
    a.globalButtonState.customOptions = !0;
    var f = 108
      , g = !1
      , h = !1
      , i = !1;
    e.checkSidebarState() && (e.allowAccess("Policy Configuration") && (g = !0,
    f = 148),
    e.allowReadAccess("Policy Configuration") && (i = !0,
    f = 148),
    e.allowAccess("Policy Deploy") && (h = !0,
    f = 148)),
    a.table = d.getTableInstance("feature", f, g, h, i),
    a.table.setDataUrl("dataservice/template/policy/vsmart"),
    d.setTableDataAndColumns(a.table, "feature"),
    a.addPolicy = function() {
        b.go("app.config.policy.wizard", {
            action: "add"
        })
    }
    ,
    a.$on("$destroy", function() {
        a.buttonFunctions.reset()
    })
}
function vSmartPolicyService(a, b, c, d, e, f, g, h, i) {
    function j(a, b) {
        d(function() {
            a.refresh()
        }, b)
    }
    function k(a) {
        f.go("app.device.status", {
            activity: g.getStatusAction("VSMART_POLICY_CONFIG").endpoint,
            pid: a ? a.id : ""
        })
    }
    return {
        listVSmartPolicy: function() {
            return a.get(b.VSMART_POLICY)
        },
        createVSmartPolicy: function(c, d) {
            return a.post(b.VSMART_POLICY, c, d)
        },
        updateVSmartPolicy: function(c, d, e) {
            return a.put(b.VSMART_POLICY + c, d, e)
        },
        deleteVSmartPolicy: function(c) {
            return a.delete(b.VSMART_POLICY + c)
        },
        getVSmartPolicy: function(c) {
            return a.get(b.VSMART_DEFINITION_POLICY + c)
        },
        activateVSmartPolicy: function(c, d, e) {
            return a.post(b.VSMART_ACTIVATE_POLICY + c + "?confirm=true", d, e)
        },
        deactivateVSmartPolicy: function(c, d, e) {
            return a.post(b.VSMART_DEACTIVATE_POLICY + c + "?confirm=true", d, e)
        },
        getVSmartConnStatus: function() {
            return a.get(b.VSMART_CONN_STATUS)
        },
        getBreadCrumbs: function() {
            return [{
                name: "policy",
                title: "Centralized Policy",
                state: function(a) {
                    f.go("app.config.policy.centralizedPolicy.vsmart", {
                        reload: !0
                    })
                }
            }, {
                name: "vsmart-cli-policy",
                title: "CLI Policy"
            }]
        },
        getTableInstance: function(a, b, d, g, i) {
            var l = new e({
                menuColumnFilter: !0,
                columnResizing: !0,
                singleSelect: !0,
                enableSorting: !0,
                autoLoad: !0,
                toggleFirstRowOnLoad: !0,
                tableHeightOffset: b,
                dataUid: "policyId"
            })
              , m = [];
            if (i && (m.push({
                type: "View",
                open: "callback",
                okButtonActionFn: function(b) {
                    "cli" === a ? f.go("app.config.policy.centralizedPolicy.vsmart.view", {
                        id: b.entity.policyId
                    }) : "cli" == b.entity.policyType.toLowerCase() ? f.go("app.config.policy.centralizedPolicy.vsmart.view", {
                        id: b.entity.policyId
                    }) : f.go("app.config.policy.wizard", {
                        action: "view",
                        policyId: b.entity.policyId
                    })
                }
            }),
            m.push({
                type: "Preview",
                open: "modal",
                hideCallback: function(a) {
                    return !angular.equals(a.entity.policyType, "feature")
                },
                templateUrl: "app/configuration/policy/preview/modal/views/policyPreview.html",
                controller: "PolicyModalPreviewController"
            })),
            d) {
                m.push({
                    type: "Copy",
                    open: "modal",
                    hideCallback: function(a) {
                        return !angular.equals(a.entity.policyType, "feature")
                    },
                    templateUrl: "app/configuration/policy/modal/copyPolicyTemplate.html",
                    controller: "CopyPolicyModalCtrl"
                }),
                m.push({
                    type: "Edit",
                    open: "callback",
                    okButtonActionFn: function(b) {
                        "cli" === a ? f.go("app.config.policy.centralizedPolicy.vsmart.edit", {
                            id: b.entity.policyId
                        }) : "cli" == b.entity.policyType.toLowerCase() ? f.go("app.config.policy.centralizedPolicy.vsmart.edit", {
                            id: b.entity.policyId
                        }) : f.go("app.config.policy.wizard", {
                            action: "edit",
                            policyId: b.entity.policyId,
                            policy: {
                                isPolicyActivated: b.entity.isPolicyActivated
                            }
                        })
                    }
                });
                var n = this.deleteVSmartPolicy;
                m.push({
                    type: "Delete",
                    open: "confirm",
                    title: "Are you sure you want to delete the policy?",
                    content: "This policy will be deleted immediately. You cannot undo the action.",
                    precondition: function(a, b, c) {
                        a.entity.isPolicyActivated && (b.title = "Active policy cannot be deleted.",
                        b.textContent = "To delete the policy, it needs to be deactivated.",
                        b.template = h.NO_CANCEL_CONFIRM_TEMPLATE)
                    },
                    okButtonActionFn: function(a, b) {
                        a.entity.isPolicyActivated || n(a.entity.policyId).then(function(d) {
                            c.success(a.entity.policyName + " template successfully deleted.", 2e3),
                            j(b, 100)
                        }, function(a) {
                            c.error(a.error.message + ": " + a.error.details)
                        })
                    }
                })
            }
            return g && (m.push({
                type: "Activate",
                open: "modal",
                hideCallback: function(b) {
                    return b.entity.isPolicyActivated || "feature" === a && "cli" == b.entity.policyType.toLowerCase()
                },
                modalReturnCallback: k,
                templateUrl: "app/common/modalPartials/activateVSmartPolicyModal.html",
                controller: "ActivateVSmartPolicyModalInstanceCtrl"
            }),
            m.push({
                type: "Deactivate",
                open: "modal",
                hideCallback: function(b) {
                    return !b.entity.isPolicyActivated || "feature" === a && "cli" == b.entity.policyType.toLowerCase()
                },
                modalReturnCallback: k,
                templateUrl: "app/common/modalPartials/deactivateVSmartPolicyModal.html",
                controller: "DeactivateVSmartPolicyModalInstanceCtrl"
            })),
            l.setHoverAction(m),
            l.setViewActions([{
                button: !0,
                cssId: "add_policy",
                title: "Add Policy",
                icon: "add_circle",
                rbac: "Policy Configuration",
                action: function() {
                    "cli" === a ? f.go("app.config.policy.centralizedPolicy.vsmart.create") : f.go("app.config.policy.wizard", {
                        action: "add"
                    })
                }
            }]),
            l
        },
        setTableDataAndColumns: function(b, c) {
            b.serverCallInProgress = !0,
            a.get("dataservice/template/policy/vsmart").then(function(a) {
                if (b.createColumns(a.header.columns),
                "cli" === c) {
                    var d = [];
                    b.taggedSearchObject.setSearchCache(a.data),
                    angular.isUndefined(b.taggedSearchObject) || angular.isUndefined(b.taggedSearchObject.getSearchProperties()) ? (angular.forEach(a.data, function(a) {
                        "cli" === a.policyType && d.push(a)
                    }),
                    b.setTableData(d)) : (angular.forEach(a.data, function(a) {
                        "cli" === a.policyType && d.push(a)
                    }),
                    b.setTableData(d),
                    b.taggedSearchObject.searchData())
                } else
                    b.setTableData(a.data);
                b.serverCallInProgress = !1
            }, function(a) {
                angular.isObject(a) && appUtil.checkNestedProperty(a, "error", "details") ? $log.error("Error occurred while saving table state: " + a.error.message + ":" + a.error.details) : $log.info("API error response needs to be updated to conform to company guidelines."),
                b.serverCallInProgress = !1
            })
        }
    }
}
function CopyDefineListController(a, b, c, d, e, f, g, h) {
    var i = a;
    i.stateString = f.getStateString(a.$parent.$state),
    i.postCall = {
        InProgress: !1
    },
    i.showErrorSection = !1,
    i.policyListManagerObj = e.getInstance(),
    i.listObj = i.policyListManagerObj.createPolicyListInst(c),
    (angular.equals(i.listObj.entryType, "app") || angular.equals(i.listObj.entryType, "appFamily")) && i.policyListManagerObj.getApplications(),
    i.title = a.policyListManagerObj.title,
    i.listObj.get().then(function() {
        i.listObj.name = c.name + "_copy",
        i.applicationFamily = angular.copy(i.policyListManagerObj.applicationFamily),
        i.applications = angular.copy(i.policyListManagerObj.applications),
        i.applicationFamily = angular.copy(i.policyListManagerObj.applicationFamily),
        i.applications = angular.copy(i.policyListManagerObj.applications),
        angular.equals(i.listObj.entryType, "appFamily") ? i.listObj.entries = _.map(i.listObj.entries, function(a) {
            var b = _.find(this.applicationFamily, {
                value: a.appFamily
            });
            if (b)
                return b.selected = !0,
                b
        }, i) : angular.equals(i.listObj.entryType, "app") ? i.listObj.entries = _.map(i.listObj.entries, function(a) {
            var b = _.find(this.applications, {
                value: a.app
            });
            if (b)
                return b.selected = !0,
                b
        }, i) : angular.equals(i.listObj.entryType, "color") ? (i.colors = angular.copy(i.policyListManagerObj.colors),
        i.listObj.entries = _.map(i.listObj.entries, function(a) {
            var b = _.find(i.colors, {
                name: a.color
            });
            if (b)
                return b.selected = !0,
                b
        }, i)) : angular.equals(i.listObj.entryType, "tloc") && (i.listObj.name = c.tloc + "_copy")
    }, function(a) {}),
    i.ok = function() {
        i.postCall.InProgress = !0,
        delete i.listObj.listId,
        i.listObj.save().then(function(a) {
            g(function() {
                angular.isDefined(h) && h(),
                b.hide()
            })
        }, function(a) {
            i.postCall.InProgress = !1
        })
    }
    ,
    i.cancel = function() {
        b.cancel("cancel")
    }
}
function CrudVEdgePolicyCtrl(a, b, c, d, e, f, g, h, i, j) {
    function k() {
        d.listVEdgePolicy().then(function(b) {
            var c = _.find(b.data, function(b) {
                return angular.equals(b.policyId, a.policy.policyId)
            });
            angular.extend(a.policy, c),
            a.postCall.InProgress = !1
        }, function(b) {
            angular.isObject(b) && c.checkNestedProperty(b, "error", "details") && j.error(b.error.message + ": " + b.error.details),
            a.postCall.InProgress = !1
        })
    }
    a.modalHeader,
    a.buttonFunctions.reset(),
    a.breadCrumb.states = [{
        name: "localized-policy",
        title: "Localized Policy",
        state: "app.config.policy.localizedPolicy.vedge"
    }, {
        name: "cli",
        title: "CLI"
    }],
    a.globalButtonState.disableTabs = !0,
    a.globalButtonState.customOptions = !1,
    a.policy = {
        policyState: void 0
    },
    a.postCall = {
        InProgress: !0
    },
    a.vEdgePolicyEditor = ace.edit("vEdgePolicyDefinitionEditor"),
    a.vEdgePolicyEditor.setValue(""),
    a.vEdgePolicyEditor.$blockScrolling = 1 / 0,
    a.vEdgePolicyEditor.setShowPrintMargin(!1),
    a.searchBox = function() {
        a.vEdgePolicyEditor.execCommand("find")
    }
    ,
    c.checkNestedProperty(i, "params", "id") && (a.policy = {
        policyId: i.params.id
    }),
    "app.config.policy.localizedPolicy.vedge.view" === i.current.name ? (a.modalHeader = "View CLI Policy",
    a.policy.policyState = "readOnly",
    k()) : "app.config.policy.localizedPolicy.vedge.edit" === i.current.name ? (a.modalHeader = "Edit CLI Policy",
    a.policy.policyState = "edit",
    k()) : (a.modalHeader = "Add CLI Policy",
    a.postCall.InProgress = !1),
    a.showContent = function(b) {
        a.policy.policyDefinition = b,
        a.vEdgePolicyEditor.setValue(a.policy.policyDefinition, -1)
    }
    ,
    a.add = function(b) {
        a.postCall.InProgress = !0,
        b.policyDefinition = a.vEdgePolicyEditor.getValue(),
        d.createVEdgePolicy(b).then(function(b) {
            a.cancel()
        }, function(b) {
            a.postCall.InProgress = !1,
            j.error(b.error.message + ": " + b.error.details)
        })
    }
    ,
    a.update = function(b) {
        a.postCall.InProgress = !0,
        b.policyDefinition = a.vEdgePolicyEditor.getValue();
        var k, l = [], m = {};
        d.updateVEdgePolicy(b.policyId, b).then(function(b) {
            return c.checkNestedProperty(b, "masterTemplatesAffected", 0) ? !!f.allowAccess("Template Deploy") && (k = b.processId,
            l = g("orderBy")(b.masterTemplatesAffected),
            e.listDeviceTemplates()) : void a.cancel()
        }).then(function(b) {
            if (c.checkNestedProperty(b, "data", 0)) {
                for (var d = 0; d < l.length; d++)
                    l[d] = {
                        selectedTemplate: _.find(b.data, function(a) {
                            return angular.equals(a.templateId, l[d])
                        })
                    };
                return e.getAttachedDevices(l[0].selectedTemplate.templateId)
            }
            a.postCall.InProgress = !1
        }).then(function(b) {
            return c.checkNestedProperty(b, "data", 0) ? (m.templateId = l[0].selectedTemplate.templateId,
            m.deviceIds = _.pluck(b.data, "uuid"),
            m.isEdited = !0,
            m.isMasterEdited = !1,
            e.generateInput(m)) : void (a.postCall.InProgress = !1)
        }).then(function(b) {
            b && (l[0].header = b.header,
            l[0].data = b.data,
            l[0].selectedDevices = _.pluck(b.data, "csv-deviceId"),
            l[0].attachedDevices = m.deviceIds,
            l[0].isEdited = !0,
            l[0].isMasterEdited = !1,
            l[0].processId = k,
            h.setTemplateDeviceInput(l),
            i.go("app.config.template.device.configure", {
                templateId: l[0].selectedTemplate.templateId
            })),
            a.postCall.InProgress = !1
        }, function(b) {
            a.postCall.InProgress = !1,
            j.error(b.error.message + ": " + b.error.details)
        })
    }
    ,
    a.cancel = function() {
        a.postCall.InProgress = !1,
        i.go("app.config.policy.localizedPolicy.vedge")
    }
    ,
    a.replaceHtmlWithVariablesModal = function(c, d, e, f, h) {
        e = g("removeWhitespaces")(e);
        var i = a.vEdgePolicyEditor.session.getTextRange(a.vEdgePolicyEditor.getSelectionRange())
          , j = b.show({
            templateUrl: c,
            controller: d,
            targetEvent: h,
            resolve: {
                highlightedElement: function() {
                    return i
                }
            }
        });
        j.then(function(b) {
            a.vEdgePolicyEditor.session.replace(a.vEdgePolicyEditor.selection.getRange(), b)
        })
    }
    ,
    a.$watch("policy.policyDefinition", function(b, c) {
        b && b !== c && a.vEdgePolicyEditor.setValue(a.policy.policyDefinition, -1)
    }),
    a.$on("$destroy", function() {
        a.vEdgePolicyEditor.destroy()
    })
}
function VEdgePolicyController(a, b, c, d, e, f, g, h, i, j, k, l, m) {
    a.stateString = f.getStateString(c),
    a.buttonFunctions.reset(),
    a.breadCrumb.states && !_.isNull(a.breadCrumb.states) && a.breadCrumb.states.reset(),
    a.globalButtonState.disableTabs = !1,
    a.globalButtonState.customOptions = !1;
    var n = 108
      , o = !1;
    m.checkSidebarState() && m.allowAccess("Policy Configuration") && (o = !0,
    n = 148),
    angular.forEach(a.$parent.tabs, function(a) {
        a.setActive(a.states === c.current.name)
    }),
    a.table = g.getTableInstance(n, o),
    a.table.setDataUrl("dataservice/template/policy/vedge"),
    g.setTableDataAndColumns(a.table),
    a.addPolicy = function() {
        c.go("app.config.policy.localizedPolicy.vedge.create")
    }
    ,
    a.$on("$destroy", function() {
        a.buttonFunctions.reset()
    })
}
function vEdgePolicyService(a, b, c, d, e, f, g) {
    function h(a, b) {
        d(function() {
            a.refresh()
        }, b)
    }
    return {
        listVEdgePolicy: function() {
            return a.get(b.VEDGE_POLICY)
        },
        createVEdgePolicy: function(c, d) {
            return a.post(b.VEDGE_POLICY, c, d)
        },
        updateVEdgePolicy: function(c, d, e) {
            return a.put(b.VEDGE_POLICY + c, d, e)
        },
        deleteVEdgePolicy: function(c) {
            return a.delete(b.VEDGE_POLICY + c)
        },
        getVEdgePolicy: function(c) {
            return a.get(b.VEDGE_DEFINITION_POLICY + c)
        },
        getDevices: function() {
            return a.returnPromiseHTTPGet(b.VEDGE_POLICY_DEVICES)
        },
        getAttachedDevices: function(c) {
            return a.returnPromiseHTTPGet(b.VEDGE_POLICY_DEVICES + c)
        },
        getTableInstance: function(a, b) {
            var d = new e({
                menuColumnFilter: !0,
                columnResizing: !0,
                singleSelect: !0,
                enableSorting: !0,
                tableHeightOffset: a,
                dataUid: "policyId"
            })
              , i = [{
                type: "View",
                open: "callback",
                okButtonActionFn: function(a) {
                    f.go("app.config.policy.localizedPolicy.vedge.view", {
                        id: a.entity.policyId
                    })
                }
            }];
            if (b) {
                a = 148,
                i.push({
                    type: "Edit",
                    open: "callback",
                    okButtonActionFn: function(a) {
                        f.go("app.config.policy.localizedPolicy.vedge.edit", {
                            id: a.entity.policyId
                        })
                    }
                });
                var j = this.deleteVEdgePolicy;
                i.push({
                    type: "Delete",
                    open: "confirm",
                    title: "Are you sure you want to delete the policy?",
                    content: "This policy will be deleted immediately. You cannot undo the action.",
                    precondition: function(a, b, c) {
                        a.entity.mastersAttached > 0 && (b.title = "vEdge policy attached to a device template cannot be deleted.",
                        b.textContent = "To delete the policy, it needs to be removed from the device template.",
                        b.template = g.NO_CANCEL_CONFIRM_TEMPLATE)
                    },
                    okButtonActionFn: function(a, b) {
                        0 == a.entity.mastersAttached && j(a.entity.policyId).then(function(d) {
                            c.success(a.entity.policyName + " policy successfully deleted.", 2e3),
                            h(b, 100)
                        }, function(a) {
                            c.error(a.error.message + ": " + a.error.details)
                        })
                    }
                })
            }
            return d.setHoverAction(i),
            d.setViewActions([{
                button: !0,
                cssId: "add_policy",
                title: "Add CLI Policy",
                icon: "add_circle",
                rbac: "Policy Configuration",
                action: function(a) {
                    f.go("app.config.policy.localizedPolicy.vedge.create")
                }
            }]),
            d
        },
        setTableDataAndColumns: function(b, c) {
            b.serverCallInProgress = !0,
            a.get("dataservice/template/policy/vedge").then(function(a) {
                b.createColumns(a.header.columns),
                b.setTableData(a.data),
                b.serverCallInProgress = !1
            }, function(a) {
                angular.isObject(a) && appUtil.checkNestedProperty(a, "error", "details") ? $log.error("Error occurred while saving table state: " + a.error.message + ":" + a.error.details) : $log.info("API error response needs to be updated to conform to company guidelines."),
                b.serverCallInProgress = !1
            })
        }
    }
}
function ActivateCentralizedPolicyModalCtrl(a, b, c, d, e, f, g) {
    function h(b) {
        a.postCall.InProgress = !1,
        a.showErrorSection = !0,
        a.errorMessage = b
    }
    a.showErrorSection = !1,
    a.errorMessage = {},
    a.onlineDeviceList = [],
    a.offlineDeviceList = [],
    a.postCall = {
        InProgress: !1
    },
    a.deviceFetchCall = {
        InProgress: !0
    },
    c ? (a.policy = c,
    a.assembly = f.getInstance({}),
    d.getVSmartConnStatus().then(function(b) {
        angular.forEach(b.data, function(b) {
            b.isOnline ? a.onlineDeviceList.push(b) : a.offlineDeviceList.push(b)
        }),
        a.deviceFetchCall.InProgress = !1
    }, function(b) {
        a.deviceFetchCall.InProgress = !1,
        a.showErrorSection = !0,
        a.errorMessage = b
    })) : (e.error("Unable to locate Policy"),
    b.cancel()),
    a.activate = function(c) {
        var e = {};
        (angular.isDefined(a.policy.activatedId) || a.policy.activated) && (e = {
            isEdited: !0
        }),
        a.postCall.InProgress = !0,
        a.policy.save().then(function(c) {
            d.activateVSmartPolicy(a.policy.activatedId || a.policy.policyId, e).then(function(a) {
                b.hide(a)
            }, function(a) {
                h(a)
            })
        }, function(a) {
            h(a)
        }),
        f.deleteInstance()
    }
    ,
    a.cancel = function() {
        b.cancel("cancel")
    }
}
function CopyPolicyModalCtrl(a, b, c, d, e, f, g, h, i, j, k) {
    a.stateString = e.getStateString(a.$parent.$state),
    a.postCall = {
        InProgress: !1
    },
    a.showErrorSection = !1,
    a.policy = {
        policyName: "",
        policyDescription: ""
    },
    c.policyType && "feature" === c.policyType ? a.aPolicyCopy = f.getInstance({
        policyName: "",
        policyDescription: "",
        policyDefinition: JSON.parse(c.policyDefinition),
        policyType: c.policyType,
        isPolicyActivated: !1
    }) : "cflowd" === c.type ? a.aPolicyCopy = new h({}) : "hubAndSpoke" === c.type ? a.aPolicyCopy = new j({}) : "mesh" === c.type ? a.aPolicyCopy = new i({}) : "vpnMembershipGroup" === c.type ? a.aPolicyCopy = new k({}) : a.aPolicyCopy = new g({
        name: "",
        description: "",
        type: c.type
    }),
    a.ok = function() {
        a.postCall.InProgress = !0,
        c.policyType && "feature" === c.policyType ? (a.aPolicyCopy.policyName = a.policy.policyName,
        a.aPolicyCopy.policyDescription = a.policy.policyDescription) : (a.aPolicyCopy.name = a.policy.policyName,
        a.aPolicyCopy.description = a.policy.policyDescription),
        a.aPolicyCopy.copy(c.definitionId).then(function(a) {
            d.refresh(),
            b.hide(a)
        }, function(b) {
            a.postCall.InProgress = !1,
            a.showErrorSection = !0,
            a.errorMessage = b
        })
    }
    ,
    a.cancel = function() {
        b.cancel("cancel")
    }
    ,
    a.$on("$destroy", function() {
        c.policyType && "feature" === c.policyType && f.deleteInstance()
    })
}
function ImportPolicyModalCtrl(a, b, c, d, e, f) {
    function g() {
        i.processedPolicyList.reset(),
        i.selectedPolicy = {},
        angular.forEach(i.policyList, function(a) {
            "topology" === i.policyType.key ? a.type !== i.topologyType || h(i.policyObj.newPolicyDefinitions[i.topologyType], a.definitionId) || i.processedPolicyList.push(a) : h(i.policyObj.newPolicyDefinitions[i.policyType.key], a.definitionId) || i.processedPolicyList.push(a)
        })
    }
    function h(a, b) {
        for (var c = 0; c < a.length; c++)
            if (a[c].id === b)
                return !0;
        return !1
    }
    var i = a;
    i.policyType = c,
    i.policyList = angular.copy(e),
    i.processedPolicyList = [],
    i.policyObj = f.getInstance(),
    "topology" === i.policyType.key && (i.enablePolicyType = !0,
    i.topologyType = "hubAndSpoke"),
    g(),
    i.updatePolicyList = function() {
        g()
    }
    ,
    i.ok = function() {
        angular.isUndefined(i.selectedPolicy) || (i.enablePolicyType ? i.policyObj.newPolicyDefinitions[i.topologyType].push({
            id: i.selectedPolicy.definitionId,
            type: "imported"
        }) : i.policyObj.newPolicyDefinitions[i.policyType.key].push({
            id: i.selectedPolicy.definitionId,
            type: "imported"
        }),
        b.hide())
    }
    ,
    i.cancel = function() {
        b.cancel("cancel")
    }
}
function policyService(a, b, c) {
    function d(a) {
        return a.endsWith("/") || (a += "/"),
        a
    }
    return {
        list: function(b) {
            return a.get(b)
        },
        get: function(b, c) {
            return a.get(d(b) + c)
        },
        create: function(b, d, e) {
            var f = c.defer();
            return angular.isDefined(d.error) ? f.reject(d) : a.post(b, d, e).then(function(a) {
                f.resolve(a)
            }, function(a) {
                f.reject(a)
            }),
            f.promise
        },
        update: function(b, e, f, g) {
            var h = c.defer();
            return angular.isDefined(f.error) ? h.reject(f) : a.put(d(b) + e, f, g).then(function(a) {
                h.resolve(a)
            }, function(a) {
                h.reject(a)
            }),
            h.promise
        },
        delete: function(b, c) {
            return a.delete(d(b) + c)
        },
        getTrafficPolicyDefinitions: function(d) {
            var e = c.defer();
            return a.get(b.TRAFFIC_POLICY_DEFINITION + d).then(function(a) {
                e.resolve(a)
            }, function(a) {
                e.reject(a)
            }),
            e.promise
        },
        getTrafficPolicyDefinitionsAsync: function() {
            var d = c.defer();
            return c.all([a.get(b.TRAFFIC_POLICY_DEFINITION + "data"), a.get(b.TRAFFIC_POLICY_DEFINITION + "approute")]).then(function(a) {
                var b = {};
                b.header = a[0].header,
                b.data = a[0].data.concat(a[1].data),
                d.resolve(b)
            }, function(a) {
                d.reject(a)
            }),
            d.promise
        },
        getPolicyDefinitionsAsync: function() {
            var d = c.defer();
            return c.all([a.get(b.TRAFFIC_POLICY_DEFINITION + "control"), a.get(b.TRAFFIC_POLICY_DEFINITION + "data"), a.get(b.TRAFFIC_POLICY_DEFINITION + "approute"), a.get(b.TRAFFIC_POLICY_DEFINITION + "cflowd"), a.get(b.TRAFFIC_POLICY_DEFINITION + "vpnmembershipgroup"), a.get(b.TRAFFIC_POLICY_DEFINITION + "hubandspoke"), a.get(b.TRAFFIC_POLICY_DEFINITION + "mesh")]).then(function(a) {
                var b = {};
                b.header = a[0].header,
                b.data = a[0].data.concat(a[1].data).concat(a[2].data).concat(a[3].data).concat(a[4].data).concat(a[5].data).concat(a[6].data),
                d.resolve(b)
            }, function(a) {
                d.reject(a)
            }),
            d.promise
        },
        getControlPolicyDefinitions: function(d) {
            var e = c.defer();
            return a.get(b.TRAFFIC_POLICY_DEFINITION + d).then(function(a) {
                var b = {};
                b.header = a[0].header,
                b.data = a[0].data,
                e.resolve(b)
            }, function(a) {
                e.reject(a)
            }),
            e.promise
        },
        getControlPolicyDefinitionsAsync: function() {
            var d = c.defer();
            return c.all([a.get(b.TRAFFIC_POLICY_DEFINITION + "control"), a.get(b.TRAFFIC_POLICY_DEFINITION + "mesh"), a.get(b.TRAFFIC_POLICY_DEFINITION + "hubandspoke")]).then(function(a) {
                var b = {};
                b.header = a[0].header,
                b.data = a[0].data.concat(a[1].data).concat(a[2].data),
                d.resolve(b)
            }, function(a) {
                d.reject(a)
            }),
            d.promise
        },
        getDataDefinitionPreview: function(b, c) {
            return a.post("dataservice/template/policy/definition/" + b.toLowerCase() + "/preview", c, {})
        },
        getDataDefinitionPreviewById: function(b, c) {
            return a.get("dataservice/template/policy/definition/" + b.toLowerCase() + "/preview/" + c, {})
        },
        formatPrefixEntries: function(a) {
            if (_.isArray(a) && a.length > 0) {
                var b = "";
                return angular.forEach(a, function(a) {
                    b += a.ipPrefix,
                    angular.isDefined(a.le) && (b += " le " + a.le),
                    angular.isDefined(a.ge) && (b += " ge " + a.ge),
                    b += ", "
                }),
                b.trim().slice(0, -1)
            }
        },
        stringifyEntries: function(a, b) {
            var c = "";
            return _.isArray(a) && angular.forEach(a, function(a) {
                c += angular.isDefined(a[b]) ? a[b] : "",
                c += ", "
            }),
            c.trim().slice(0, -1)
        },
        getPolicyDefinitionById: function(b, c) {
            return a.get("dataservice/template/policy/definition/" + c.toLowerCase() + "/" + b, {})
        }
    }
}
function cancelWizard(a, b, c, d) {
    a.stateString = c.getStateString(b),
    a.deletePolicies = function() {
        d.hide()
    }
    ,
    a.cancel = function() {
        d.cancel()
    }
}
function ConfigDeviceTemplateController(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    function r() {
        this.core.on.rowsRendered(b, function(a) {
            b.renderEventCount > 0 && (b.renderingSpinner = !1),
            b.renderEventCount++
        }),
        this.edit.on.afterCellEdit(b, function(a, c) {
            i.checkRowStatus(a, b.template.templateId),
            b.configDeviceTable.taggedSearchObject.updateSearchCacheObject(a, "csv-deviceId"),
            i.setTemplateDeviceInputData(b.template.templateId, b.configDeviceTable.taggedSearchObject.getSearchCache())
        })
    }
    function s() {
        angular.forEach(b.configDeviceTable.data, function(a) {
            i.checkRowStatus(a, b.template.templateId)
        })
    }
    function t(a) {
        return angular.forEach(a, function(a) {
            for (var b in a)
                angular.isArray(a[b]) ? delete a[b] : a[b] = String(a[b])
        }),
        a
    }
    function u(a) {
        if (!d.isUndefinedOrEmpty(a)) {
            if (!(a instanceof j)) {
                var b = angular.copy(a);
                a = new j,
                a.extendTemplate(b)
            }
            a.setDevices(i.getTemplateDeviceInputData(a.templateId))
        }
        return a
    }
    b.stateString = "config_template_device_",
    d.checkNestedProperty(c, "previousState", "name") && _.includes(c.previousState.name, "app.config.template.device") ? b.$parent.tabs[0].setActive(!0) : b.$parent.tabs[1].setActive(!0),
    b.showDiff = {
        show: !1,
        error: !1
    },
    b.previewView = "previewView",
    b.templateDiff = {
        viewType: "inline"
    },
    b.deviceSelected = {
        isSelected: !1,
        selectedDeviceObj: {}
    },
    b.totalDeviceCount = 0,
    b.papAndChap = {
        hidePassword: !0
    },
    b.inputType = "password",
    i.setPapAndChapPasswordFieldType("password"),
    b.papAndChapPasswordFieldExists = i.isPapAndChapPasswordFieldsExists(),
    b.renderingSpinner = !0,
    b.renderEventCount = 0,
    b.savingInProcess = !1,
    b.affectedDeviceTemplates = i.getTemplateDeviceInputs(),
    0 == b.affectedDeviceTemplates.length && c.go("app.config.template.device"),
    b.affectedDeviceTemplates[0].processId && (f.setTemplateLockId(b.affectedDeviceTemplates[0].processId),
    m.watch(),
    m.setIdle(240),
    m.setTimeout(30));
    var v = i.getTemplateDeviceInputSelectedTemplate(c.params.templateId);
    if (b.variableCount = i.getVariableCount(v.templateId),
    b.tooltipUISelect = function(a, b) {
        return a < 2 ? b : ""
    }
    ,
    b.setConfigFlow = function(a) {
        b.renderEventCount = 0,
        b.renderingSpinner = !0,
        "default" == a && (b.previewError = !1,
        c.go("app.config.template.device.configure", {
            templateId: b.template.templateId
        })),
        b.configFlow = a,
        angular.equals(a, "preview") && (b.renderingSpinner = !1,
        g.warning("'Configure' action will be applied to " + b.totalDeviceCount + " device(s) attached to " + b.affectedDeviceTemplates.length + " device template(s)."))
    }
    ,
    0 === b.variableCount) {
        b.savingInProcess = !0,
        i.populateAllTemplateDetails();
        var w = k(function() {
            x()
        }, 100)
          , x = function() {
            (d.checkNestedProperty(b.affectedDeviceTemplates[b.affectedDeviceTemplates.length - 1], "columnDefs") || b.affectedDeviceTemplates[b.affectedDeviceTemplates.length - 1].error) && (d.stopPolling(w),
            b.savingInProcess = !1,
            b.affectedDeviceTemplates[b.affectedDeviceTemplates.length - 1].error ? g.error("Error occurred while generating inputs for device templates. Please try again.") : (b.configFlow = "preview",
            b.renderingSpinner = !1))
        }
    }
    var y = new h({
        autoLoad: !0,
        csvExport: !0,
        columnResizing: !0,
        enableSorting: !0,
        singleSelect: !0,
        tableHeightOffset: 270,
        excessColumns: b.variableCount > 10 ? 10 : 4,
        registerAPICallbackFn: r,
        postImportDataCallbackFn: s,
        dataUid: "csv-deviceId"
    },{
        refresh: !1,
        menuColumnFilter: !1,
        saveState: !1,
        rowHeight: 50,
        csvExport: !0,
        csvImport: !0
    },{},{
        exporterMenuCsv: !0,
        exporterCsvFilename: "Template.csv"
    })
      , z = [{
        type: "Edit Device Template",
        open: "modal",
        modalReturnCallback: function() {
            i.setTemplateDeviceInputData(b.template.templateId, b.configDeviceTable.data),
            b.configDeviceTable.appScope.inputType = i.getPapAndChapPasswordFieldType(),
            b.papAndChap.hidePassword = "password" === b.configDeviceTable.appScope.inputType
        },
        templateUrl: "app/common/modalPartials/editDeviceConfigModal.html",
        controller: "EditDeviceConfigModalInstanceCtrl"
    }];
    b.tableAppScope = {
        inputType: "password",
        duplicateIpMap: {}
    },
    y.setHoverAction(z),
    y.createColumns(i.getTemplateDeviceInputColumns(v.templateId)),
    y.setTableData(i.getTemplateDeviceInputData(v.templateId)),
    b.configDeviceTable = y,
    v = u(v),
    b.template = v,
    b.configDeviceTable.setExporterCsvFilename(b.template.templateName + ".csv"),
    b.configDeviceTable.setAppScope(b.tableAppScope),
    s(),
    b.stateTemplateChange = function(a, e, f) {
        b.savingInProcess = !0,
        i.getTemplateDeviceInputSelectedTemplate(e);
        var g = k(function() {
            h()
        }, 100)
          , h = function() {
            i.getTemplateDeviceInputColumns(e) && (d.stopPolling(g),
            b.savingInProcess = !1,
            c.go("app.config.template.device.configure", {
                templateId: e
            }))
        }
    }
    ,
    b.changeTemplateSelect = function(a, c, d) {
        if (b.clearSelected(),
        !(a instanceof j)) {
            var e = angular.copy(a.selectedTemplate);
            b.template = new j,
            b.template.extendTemplate(e)
        }
        b.template.setDevices(angular.copy(a.data))
    }
    ,
    b.validateConfig = function(a) {
        var c = this;
        b.savingInProcess = !0,
        b.totalDeviceCount = 0,
        i.populateAllTemplateDetails();
        var h = k(function() {
            j()
        }, 100)
          , j = function() {
            if (d.checkNestedProperty(b.affectedDeviceTemplates[b.affectedDeviceTemplates.length - 1], "columnDefs") || b.affectedDeviceTemplates[b.affectedDeviceTemplates.length - 1].error) {
                if (d.stopPolling(h),
                b.affectedDeviceTemplates[b.affectedDeviceTemplates.length - 1].error)
                    return g.error("Error occurred while generating inputs for device templates. Please try again."),
                    b.savingInProcess = !1,
                    !1;
                angular.forEach(b.affectedDeviceTemplates, function(a) {
                    a.data && (b.totalDeviceCount = b.totalDeviceCount + a.data.length)
                });
                var j = i.getTemplateDeviceInputSelectedTemplate(a.templateId)
                  , k = i.isAllRowsInCompleteStatus();
                if (!c.configureDeviceTemplate.$valid || k.length > 0)
                    return g.warning("Required fields are missing in the following templates [" + k.toString() + "]", 2e3),
                    b.savingInProcess = !1,
                    !1;
                b.deviceInfoMap = i.getDeviceInfoMap(b.affectedDeviceTemplates),
                b.configDeviceTable.appScope.duplicateIpMap = b.deviceInfoMap.deviceIpMap;
                var l = !0;
                for (var m in b.deviceInfoMap.deviceIpMap)
                    if ("undefined" === m) {
                        l = !1;
                        break
                    }
                if (l && !i.checkForUniqueIps(b.deviceInfoMap.deviceIpMap)) {
                    b.savingInProcess = !1,
                    g.clear();
                    var n = "";
                    for (var m in b.deviceInfoMap.deviceIpMap)
                        b.deviceInfoMap.deviceIpMap.hasOwnProperty(m) && b.deviceInfoMap.deviceIpMap[m].length > 1 && (n = n + d.convertArrayToString(b.deviceInfoMap.deviceIpMap[m]) + " | ");
                    return void g.error("Duplicate IP addresses detected on " + n.substring(0, n.length - 3))
                }
                var o = {};
                o.templateId = j.templateId,
                o.device = j.devices,
                i.isEdited(o.templateId) ? (o.isEdited = i.isEdited(o.templateId),
                o.isMasterEdited = !!i.isMasterEdited(o.templateId)) : (o.isEdited = !1,
                o.isMasterEdited = !1);
                var p = [];
                p = {
                    device: b.deviceInfoMap.deviceInfo
                },
                l ? f.validateDuplicateIp(p).then(function(c) {
                    if (c.data.length > 0) {
                        b.savingInProcess = !1;
                        var d = e.show({
                            templateUrl: "app/configuration/template/device/modal/modalTemplate/duplicateIpModal.html",
                            controller: "duplicateIpController",
                            targetEvent: angular.element(document.querySelector("#config_template_device_next_btn")),
                            resolve: {
                                resolveObj: function() {
                                    return c
                                }
                            }
                        });
                        d.then(function() {
                            b.configDeviceTable.setTableData(i.getTemplateDeviceInputData(a.templateId))
                        })
                    } else
                        f.validateDeviceConfig(o).then(function(a) {
                            b.template = u(j),
                            i.setTemplateDeviceInputData(b.template.templateId, b.configDeviceTable.data),
                            b.savingInProcess = !1,
                            b.setConfigFlow("preview")
                        }, function(a) {
                            b.savingInProcess = !1,
                            g.error(a.error.message + ": " + a.error.details)
                        })
                }, function(a) {
                    b.savingInProcess = !1,
                    g.error(a.error.message + ": " + a.error.details)
                }) : f.validateDeviceConfig(o).then(function(a) {
                    b.template = u(j),
                    i.setTemplateDeviceInputData(b.template.templateId, b.configDeviceTable.data),
                    b.savingInProcess = !1,
                    b.setConfigFlow("preview")
                }, function(a) {
                    b.savingInProcess = !1,
                    g.error(a.error.message + ": " + a.error.details)
                })
            }
        }
    }
    ,
    b.clearSelected = function() {
        b.deviceConfig = "",
        angular.forEach(b.template.devices, function(a) {
            a.selected = !1
        }),
        b.deviceSelected.isSelected = !1
    }
    ,
    b.changePreviewView = function(a) {
        b.previewView = a
    }
    ,
    b.previewDeviceConfig = function(a) {
        b.clearSelected(),
        a.selected = !0,
        b.deviceSelected.selectedDeviceObj = a,
        b.showDiff.error = !1;
        for (var c in a)
            c.startsWith("vipEnumListClone_") && (a[c.substr("vipEnumListClone_".length)] = a[c]);
        var d = i.getTemplateDeviceRollBackTimer();
        d && ("-" !== b.deviceSelected.selectedDeviceObj["csv-host-name"] ? b.rollBackTimer = 0 === d[b.deviceSelected.selectedDeviceObj["csv-host-name"]] ? "Configured to no roll back" : d[b.deviceSelected.selectedDeviceObj["csv-host-name"]] : b.rollBackTimer = 0 === d[b.deviceSelected.selectedDeviceObj["csv-deviceId"]] ? "Configured to no roll back" : d[b.deviceSelected.selectedDeviceObj["csv-deviceId"]],
        b.showTimer = !!angular.isDefined(b.rollBackTimer));
        var e = {};
        e.templateId = this.template.templateId;
        var h = _.find(this.template.devices, function(b) {
            return b["csv-deviceId"] === a["csv-deviceId"]
        });
        e.device = angular.copy(h),
        delete e.device.selected,
        i.isEdited(e.templateId) ? (e.isEdited = i.isEdited(e.templateId),
        e.isMasterEdited = !!i.isMasterEdited(e.templateId)) : (e.isEdited = !1,
        e.isMasterEdited = !1),
        f.previewDeviceConfig(e).then(function(a) {
            return b.deviceConfig = a,
            e.device = i.getOriginalDataForDevice(e.templateId, e.device["csv-deviceId"]),
            e.isEdited = !1,
            e.isMasterEdited = !1,
            f.previewOriginalConfig(e.device["csv-deviceId"])
        }).then(function(a) {
            b.showDiff.show = !0,
            b.originalDeviceConfig = a.deviceConfiguration,
            b.diffUsingJS(b.deviceConfig, b.originalDeviceConfig)
        }, function(a) {
            b.showDiff.show = !1,
            b.deviceConfig ? b.showDiff.error = !0 : (b.previewError = !0,
            g.error(a.error.message + ": " + a.error.details))
        })
    }
    ,
    b.configureDevice = function(a) {
        function h() {
            b.savingInProcess = !0;
            var a = []
              , e = []
              , h = []
              , j = q.getUserMode();
            h = "provider" === j.mode ? [f.getControllerDevicesAsync()] : [f.getVedgeDevicesAsync(), f.getControllerDevicesAsync()],
            p.all(h).then(function(h) {
                angular.forEach(h, function(a) {
                    angular.forEach(a, function(a) {
                        a["local-system-ip"] && (e[a["local-system-ip"]] = a["system-ip"])
                    })
                }),
                angular.forEach(b.affectedDeviceTemplates, function(c) {
                    var d = {};
                    d.templateId = c.selectedTemplate.templateId,
                    d.device = t(angular.copy(c.data));
                    var f = i.getTemplateDeviceRollBackTimer();
                    f && angular.forEach(d.device, function(a) {
                        if ("-" === a["csv-host-name"])
                            var b = a["csv-deviceId"];
                        else
                            var b = a["csv-host-name"];
                        angular.isDefined(f[b]) && (a.pseudoCommitTimer = f[b])
                    }),
                    angular.forEach(d.device, function(a) {
                        if ("-" === a["csv-host-name"]) {
                            a["csv-deviceId"]
                        } else {
                            a["csv-host-name"]
                        }
                        "-" === a["csv-deviceIP"] ? a["csv-deviceIP"] = "-" : angular.isDefined(e[a["csv-deviceIP"]]) && (a["csv-deviceIP"] = e[a["csv-deviceIP"]])
                    }),
                    d.isEdited = c.isEdited,
                    angular.equals(b.template.configType, "file") || (d.isMasterEdited = !!i.isMasterEdited(d.templateId)),
                    a.push(d)
                }),
                angular.equals(b.template.configType, "file") ? f.saveConfigCLIDeviceTemplate({
                    deviceTemplateList: a
                }, {
                    timeout: 3e5
                }).then(function(a) {
                    i.setTemplateDeviceRollBackTimer({}),
                    A = d.stopPolling(A),
                    m.unwatch(),
                    n.getClientSessionTimeout().then(function(a) {
                        angular.isArray(a.data) && angular.isObject(a.data[0]) && !_.isEmpty(a.data[0]) && a.data[0].isEnabled && (m.watch(),
                        m.setIdle(60 * a.data[0].timeout),
                        m.setTimeout(60))
                    }, function(a) {}),
                    c.go("app.device.status", {
                        activity: l.getStatusAction("PUSH_FILE_TEMPLATE_CONFIG").endpoint,
                        pid: a ? a.id : ""
                    })
                }, function(a) {
                    g.error(a.error.message + ": " + a.error.details),
                    b.savingInProcess = !1
                }) : f.saveConfigFeatureDeviceTemplate({
                    deviceTemplateList: a
                }, {
                    timeout: 3e5
                }).then(function(a) {
                    i.setTemplateDeviceRollBackTimer({}),
                    A = d.stopPolling(A),
                    m.unwatch(),
                    n.getClientSessionTimeout().then(function(a) {
                        angular.isArray(a.data) && angular.isObject(a.data[0]) && !_.isEmpty(a.data[0]) && a.data[0].isEnabled && (m.watch(),
                        m.setIdle(60 * a.data[0].timeout),
                        m.setTimeout(60))
                    }, function(a) {}),
                    c.go("app.device.status", {
                        activity: l.getStatusAction("PUSH_FEATURE_TEMPLATE_CONFIG").endpoint,
                        pid: a ? a.id : ""
                    })
                }, function(a) {
                    g.error(a.error.message + ": " + a.error.details),
                    b.savingInProcess = !1
                })
            }, function(a) {
                g.error(a.error.message + ": " + a.error.details),
                b.savingInProcess = !1
            })
        }
        if (b.totalDeviceCount > 1) {
            g.clear();
            var j = e.show({
                templateUrl: "app/configuration/template/device/modal/modalTemplate/configDeviceTemplateWarningModal.html",
                controller: "ConfigDeviceTemplateWarningController",
                targetEvent: a,
                resolve: {
                    deviceCount: function() {
                        return b.totalDeviceCount
                    }
                }
            });
            j.then(function() {
                h()
            })
        } else
            h()
    }
    ,
    b.openModal = function(a, c, d) {
        var f = e.show({
            templateUrl: a,
            controller: c,
            targetEvent: d,
            resolve: {
                devices: function() {
                    return b.template.devices
                },
                template: function() {
                    return b.template
                },
                affectedDeviceTemplates: function() {
                    return b.affectedDeviceTemplates
                }
            }
        });
        f.then(function() {
            var a = i.getTemplateDeviceRollBackTimer();
            a && ("-" !== b.deviceSelected.selectedDeviceObj["csv-host-name"] ? b.rollBackTimer = 0 === a[b.deviceSelected.selectedDeviceObj["csv-host-name"]] ? "Configured to no roll back" : a[b.deviceSelected.selectedDeviceObj["csv-host-name"]] : b.rollBackTimer = 0 === a[b.deviceSelected.selectedDeviceObj["csv-deviceId"]] ? "Configured to no roll back" : a[b.deviceSelected.selectedDeviceObj["csv-deviceId"]],
            b.showTimer = !!angular.isDefined(b.rollBackTimer))
        })
    }
    ,
    b.diffUsingJS = function(a, c) {
        var d = !!angular.equals(b.templateDiff.viewType, "inline")
          , e = difflib.stringAsLines(c)
          , f = difflib.stringAsLines(a)
          , g = new difflib.SequenceMatcher(e,f)
          , h = g.get_opcodes()
          , i = $("#diffoutput");
        angular.forEach(i.children(), function(a) {
            a.remove()
        });
        var j = $("#contextSize").value;
        j = j ? j : null,
        i.append(diffview.buildView({
            baseTextLines: e,
            newTextLines: f,
            opcodes: h,
            baseTextName: "Local Configuration",
            newTextName: "New Configuration",
            contextSize: j,
            viewType: d ? 1 : 0
        }))
    }
    ,
    b.scrollToTop = function() {
        var a = $("div.deviceList");
        angular.isDefined(a) && a.length > 0 && a.find(".deviceSelectList").scrollTop(0).perfectScrollbar("update")
    }
    ,
    b.changeChapAndPapDataType = function() {
        "password" === b.configDeviceTable.appScope.inputType ? (i.setPapAndChapPasswordFieldType("text"),
        b.configDeviceTable.appScope.inputType = i.getPapAndChapPasswordFieldType()) : (i.setPapAndChapPasswordFieldType("password"),
        b.configDeviceTable.appScope.inputType = i.getPapAndChapPasswordFieldType())
    }
    ;
    var A = k(function() {
        var a = f.getTemplateLockId();
        a && f.extendTemplateLock(a)
    }, 27e4);
    b.$on("$destroy", function() {}),
    b.$on("$stateChangeStart", function(a, b) {
        if ("app.config.template.device.configure" !== b.name && "app.device.status" !== b.name) {
            i.setTemplateDeviceRollBackTimer({}),
            A = d.stopPolling(A),
            m.unwatch();
            var c = f.getTemplateLockId();
            c && f.deleteTemplateLock(c),
            n.getClientSessionTimeout().then(function(a) {
                angular.isArray(a.data) && angular.isObject(a.data[0]) && !_.isEmpty(a.data[0]) && a.data[0].isEnabled && (m.watch(),
                m.setIdle(60 * a.data[0].timeout),
                m.setTimeout(60))
            }, function(a) {})
        }
    })
}
function DeviceTemplateController(a, b, c, d, e, f, g, h, i, j, k) {
    function l() {
        h.getDeviceTemplates({}, !0).then(function(b) {
            a.table.serverCallInProgress = !1,
            a.table.taggedSearchObject.setSearchCache(b.data),
            a.table.refreshTableData(b.data),
            a.table.taggedSearchObject.searchData()
        }, function(b) {
            a.table.serverCallInProgress = !1,
            angular.isObject(b) && d.checkNestedProperty(b, "error", "details") ? (j.error("Error occurred while retrieving table data: " + b.error.message + ":" + b.error.details),
            k.error(b.error.message + ": " + b.error.details)) : (j.info("API error response needs to be updated to conform to company guidelines:" + a.table.dataUrl),
            k.error("Error occurred while retrieving table data.")),
            a.table.error = !0
        })
    }
    a.$parent.stateString = d.getStateString(b),
    a.stateString = d.getStateString(b),
    a.templateSvc = h;
    var m = 108
      , n = !1;
    a.templateConfigPermission = !1,
    g.checkSidebarState() && (g.allowAccess("Template Configuration") && (a.templateConfigPermission = !0,
    m = 178),
    g.allowAccess("Template Deploy") && (n = !0)),
    angular.forEach(a.$parent.tabs, function(a) {
        a.setActive(a.states === b.current.name)
    }),
    a.tableData = [];
    var o = new f({
        autoLoad: !0,
        menuColumnFilter: !0,
        columnResizing: !0,
        singleSelect: !0,
        enableSorting: !0,
        toggleFirstRowOnLoad: !0,
        tableHeightOffset: m,
        dataUid: "templateId"
    })
      , p = [{
        type: "View",
        open: "callback",
        okButtonActionFn: function(a) {
            h.transitionToViewDeviceTemplate(a.entity)
        }
    }, {
        type: "Show Attached Devices",
        open: "modal",
        templateUrl: "app/common/modalPartials/viewAttachedDevicesModal.html",
        controller: "ViewAttachedDevicesModalInstanceCtrl",
        hideCallback: function(a) {
            return a.entity.devicesAttached < 1
        }
    }, {
        type: "Export CSV",
        open: "callback",
        okButtonActionFn: function(a) {
            q(a)
        }
    }]
      , q = function(a) {
        h.exportTemplateToCSV(a)
    };
    a.templateConfigPermission && (p.splice(0, 0, {
        type: "Edit",
        open: "callback",
        okButtonActionFn: function(a) {
            h.transitionToEditDeviceTemplate(a.entity)
        }
    }),
    p.splice(2, 0, {
        type: "Delete",
        open: "confirm",
        title: "Are you sure you want to delete the template?",
        content: "This template will be deleted immediately. You cannot undo the action.",
        precondition: function(a, b, c) {
            a.entity.devicesAttached > 0 && (b.textContent = "To delete the device template, it needs to be detached from all the devices.",
            b.title = "The feature template attached to a device cannot be deleted ",
            b.template = i.NO_CANCEL_CONFIRM_TEMPLATE)
        },
        okButtonActionFn: function(b) {
            0 === b.entity.devicesAttached && h.confirmDelete(b.entity, a)
        }
    }),
    p.splice(3, 0, {
        type: "Copy",
        open: "modal",
        templateUrl: "app/common/modalPartials/copyGeneralTemplateModal.html",
        controller: "CopyMasterTemplateModalInstanceCtrl",
        okButtonActionFn: function(a) {
            h.transitionToEditDeviceTemplate(a.entity)
        }
    })),
    n && (p.splice(4, 0, {
        type: "附加设备",
        open: "modal",
        modalReturnCallback: h.attachDeviceModalReturnCallback,
        templateUrl: "app/common/modalPartials/attachMasterTemplateModal.html",
        controller: "AttachMasterTemplateModalInstanceCtrl"
    }),
    p.splice(5, 0, {
        type: "Detach Devices",
        open: "modal",
        templateUrl: "app/common/modalPartials/detachMasterTemplateModal.html",
        controller: "DetachMasterTemplateModalInstanceCtrl",
        hideCallback: function(a) {
            return a.entity.devicesAttached < 1
        }
    }),
    p.push({
        type: "Change Device Values",
        open: "callback",
        hideCallback: function(a) {
            return a.entity.devicesAttached < 1
        },
        okButtonActionFn: function(b) {
            var c = b.entity;
            a.table.taggedSearchObject.tableSpinner.isSet = !0,
            h.changeDeviceTemplateDeviceSpecificValue(c, a.table.taggedSearchObject.tableSpinner)
        }
    })),
    o.setHoverAction(p),
    o.setViewActions({
        dropdown: !0,
        title: "Create Template",
        icon: "add_circle",
        rbac: "Template Configuration",
        cssId: "config_template_device_add_template",
        dropdownOptions: [{
            title: "From Feature Template",
            cssId: "from_feature_templates_choice",
            action: function() {
                a.templateSvc.transitionToCreateDeviceTemplate("template")
            }
        }, {
            title: "CLI Template",
            cssId: "cli_template_choice",
            action: function() {
                a.templateSvc.transitionToCreateDeviceTemplate("file")
            }
        }]
    });
    var r = {
        viewOutOfSyncReason: function(b, c) {
            a.table.openModal("app/configuration/template/device/modal/modalTemplate/viewOutOfSyncDevicesModal.html", "ViewOutOfSyncDevicesModalInstanceCtrl", {
                selectedRow: function() {
                    return b
                }
            }, {}, c)
        }
    };
    o.setAppScope(r),
    o.setPostRefreshCallback(function() {
        l()
    }),
    a.table = o,
    function() {
        h.getDeviceTemplates(a.table).then(function(b) {
            a.table.createColumns(b.header.columns),
            a.table.setTableData(b.data)
        }, function(b) {
            angular.isObject(b) && d.checkNestedProperty(b, "error", "details") ? (j.error("Error occurred while retrieving table data: " + b.error.message + ":" + b.error.details),
            k.error(b.error.message + ": " + b.error.details)) : (j.info("API error response needs to be updated to conform to company guidelines:" + a.table.dataUrl),
            k.error("Error occurred while retrieving table data.")),
            a.table.error = !0
        })
    }(),
    a.$watchCollection(function() {
        return a.table.data
    }, function(b) {
        0 == a.tableData.length && (a.tableData = angular.copy(b))
    }),
    a.delayRefresh = function(b) {
        c(function() {
            a.table.refresh()
        }, b)
    }
}
function FeatureDeviceTemplateController(a, b, c, d, e, f, g, h) {
    angular.forEach(b.$parent.tabs, function(a) {
        a.setActive(a.states.indexOf("template.device") > -1)
    }),
    b.templateSvc = g,
    b.template = g.getDeviceTemplate(),
    b.template.postInProgress = !0,
    b.templateAttached = "true" === c.params.attached,
    g.isvBondConfigured().then(function(a) {
        g.getvEdgePolicies(b),
        c.previousState && c.previousState.name.contains("app.config.template.feature") ? b.template.postInProgress = !1 : f.checkNestedProperty(c, "params", "templateId") && c.params.templateId ? (b.template.templateId = c.params.templateId,
        d.getDeviceModelsPromise().then(function(a) {
            b.template.deviceModels = a,
            g.getFeatureDeviceTemplateObject(b, c.params.templateId)
        }, function(a) {
            e.error(a.error.message + ": " + a.error.details),
            b.template.postInProgress = !1
        }),
        angular.equals(c.current.name, "app.config.template.device.feature.view") ? b.template.templateState = "readOnly" : angular.equals(c.current.name, "app.config.template.device.feature.edit") && (b.template.templateState = "edit")) : d.getDeviceModelsPromise().then(function(a) {
            b.template.deviceModels = a,
            g.getGeneralTemplates(b, a)
        }, function(a) {
            e.error(a.error.message + ": " + a.error.details),
            b.template.postInProgress = !1
        })
    }, function(a) {
        e.error(a.error.message + ": " + a.error.details),
        b.template.postInProgress = !1
    }),
    b.changeDeviceModels = function(a, c) {
        return g.verifyDeviceModelSelect(a) ? (b.template.basic = [],
        b.template.transportAndManagementVPN = [],
        b.template.wlan = [],
        b.template.serviceVPNOption = [],
        b.template.serviceVPN = [],
        b.template.optional = [],
        b.template.optionalBridge = [],
        b.template.bridgeOption = [],
        b.template.cellularProfile = [],
        b.template.cellularProfileOption = [],
        b.template.navSections = [],
        void g.getDeviceTemplateDefinition(b)) : (b.template.deviceType = _.find(b.template.deviceModels, {
            name: c
        }),
        !1)
    }
    ,
    b.addFeatureDeviceTemplate = function() {
        g.addFeatureDeviceTemplate(b)
    }
    ,
    b.updateFeatureDeviceTemplate = function() {
        g.updateFeatureDeviceTemplate(b)
    }
    ,
    b.enterTemplateCount = function(a, b, c, d) {
        13 === d.which && (d.preventDefault(),
        g.addServiceVPN(a, b, c, d))
    }
}
function DeviceTemplateHttpService(a, b, c, d, e, f) {
    var g;
    return {
        isvBondConfigured: function() {
            return c.get(d.DEVICE_TEMPLATE_VBOND_CONFIG)
        },
        getDeviceTemplate: function(a) {
            return c.get(d.DEVICE_TEMPLATE_OBJECT + a)
        },
        listDeviceTemplates: function() {
            return c.get(d.DEVICE_TEMPLATE)
        },
        getDeviceTemplatesDefinition: function(a) {
            return c.get(d.DEVICE_TEMPLATE_DEFINITION + a)
        },
        updateDeviceTemplate: function(a, b) {
            return c.put(d.DEVICE_TEMPLATE + a, b, {
                timeout: 12e4
            })
        },
        deleteDeviceTemplate: function(a) {
            return c.delete(d.DEVICE_TEMPLATE + a)
        },
        createDeviceCLITemplate: function(a, b) {
            return c.post(d.DEVICE_CLI_TEMPLATE, a, b)
        },
        createDeviceFeatureTemplate: function(a) {
            return c.post(d.DEVICE_FEATURE_TEMPLATE, a, {
                timeout: 12e4
            })
        },
        getGeneralTemplatesPromise: function() {
            return c.returnPromiseHTTPGet(d.GENERAL_TEMPLATE)
        },
        getDevices: function(a) {
            return c.get(d.DEVICE_TEMPLATE_DEVICES + a)
        },
        getAttachedDevicesPromise: function(a) {
            return c.returnPromiseHTTPGet(d.DEVICE_TEMPLATE_DEVICES_ATTACHED + a)
        },
        getAttachedDevices: function(a) {
            return c.get(d.DEVICE_TEMPLATE_DEVICES_ATTACHED + a)
        },
        saveConfigCLIDeviceTemplate: function(a, b) {
            return c.post(d.DEVICE_CLI_TEMPLATE_ATTACH_DEVICES, a, b)
        },
        saveConfigFeatureDeviceTemplate: function(a, b) {
            return c.post(d.DEVICE_FEATURE_TEMPLATE_ATTACH_DEVICES, a, b)
        },
        generateInput: function(a, b) {
            return c.post(d.DEVICE_TEMPLATE_VALIDATE_INPUT, a, b)
        },
        previewDeviceConfig: function(a, b) {
            return c.post(d.DEVICE_TEMPLATE_PREVIEW_CONFIG_DEVICES, a, b);
        },
        previewOriginalConfig: function(a) {
            return c.get(d.DEVICE_TEMPLATE_ORIGINAL_CONFIG_DEVICES + a)
        },
        detachDevices: function(a, b) {
            return c.post(d.DEVICE_TEMPLATE_DETACH_DEVICES, a, b)
        },
        validateDeviceConfig: function(a, b) {
            return c.post(d.DEVICE_TEMPLATE_VALIDATE_CONFIG, a, b)
        },
        validateDuplicateIp: function(a) {
            return c.post(d.DEVICE_TEMPLATE_VALIDATE_DUPLICATE_IP, a)
        },
        getDeviceTemplatesStatus: function() {
            return c.get(d.TEMPLATE_STATUS)
        },
        exportTemplateToCSV: function(a, b) {
            return c.post(d.TEMPLATE_EXPORT_CSV, a, b)
        },
        uploadConfigCsv: function(a, b, e, f) {
            return c.uploadFiles(d.DEVICE_TEMPLATE_CONFIG_FILE_UPLOAD, a, e, f, null, b)
        },
        getDeviceOutOfSync: function() {
            return c.get(d.DEVICE_TEMPLATE_OUT_OF_SYNC)
        },
        getDeviceOutOfSyncReason: function(a) {
            return c.get(d.DEVICE_TEMPLATE_OUT_OF_SYNC + a)
        },
        extendTemplateLock: function(a) {
            return c.put(d.TEMPLATE_LOCK + a)
        },
        deleteTemplateLock: function(a) {
            return c.delete(d.TEMPLATE_LOCK + a)
        },
        setTemplateLockId: function(a) {
            g = a
        },
        getTemplateLockId: function() {
            return g
        },
        getVedgeDevicesAsync: function() {
            var a = b.defer();
            return c.get(d.VEDGE_DEVICES).then(function(b) {
                a.resolve(b.data)
            }, function(b) {
                a.reject(b)
            }),
            a.promise
        },
        getControllerDevicesAsync: function() {
            var a = b.defer();
            return c.get(d.CONTROLLER_DEVICES).then(function(b) {
                a.resolve(b.data)
            }, function(b) {
                a.reject(b)
            }),
            a.promise
        },
        getGeneralTemplates: function() {
            var a = b.defer()
              , e = this;
            return c.get(d.GENERAL_TEMPLATE).then(function(b) {
                for (var c = 0; c < b.data.length; c++)
                    e.setRequiredFlagsForFiltering(b.data[c]);
                a.resolve(b.data)
            }, function(b) {
                a.reject(b)
            }),
            a.promise
        },
        setRequiredFlagsForFiltering: function(a) {
            var b = {};
            if (b = "string" == typeof a.templateDefinition ? JSON.parse(a.templateDefinition) : a.templateDefinition,
            _.indexOf(["system-vedge"], a.templateType) > -1 && angular.isDefined(b.vbond) && angular.isDefined(b.vbond.local) && "true" === b.vbond.local.vipValue)
                return void (a.asVBond = !0);
            if (_.indexOf(["vpn-vedge-interface", "vpn-vsmart-interface", "vpn-vmanage-interface"], a.templateType) > -1 && (angular.isDefined(b["tunnel-interface"]) ? a.tunnelInterfaceEnabled = !0 : a.tunnelInterfaceEnabled = !1),
            a.deviceType.indexOf("vsmart") < 0 && a.deviceType.indexOf("vmanage") < 0 && f.checkNestedProperty(b, "tunnel-interface") && (a.connectionPreferenceRequired = !0,
            f.checkNestedProperty(b, "tunnel-interface", "vmanage-connection-preference") && _.indexOf(["constant", "variable"], b["tunnel-interface"]["vmanage-connection-preference"].vipType) > -1 ? a.connectionPreference = 0 !== b["tunnel-interface"]["vmanage-connection-preference"].vipValue : a.connectionPreference = !0),
            angular.equals(a.templateType, "vpn-vedge-interface") || angular.equals(a.templateType, "vpn-vedge-pppoe-enabled-interface") || angular.equals(a.templateType, "vpn-vedge-interface-ppp")) {
                if (!angular.equals(a.templateType, "vpn-vedge-interface-ppp") && _.indexOf(["constant", "variable"], b["qos-map"].vipType) > -1 && (a.policyRequired = !0),
                !a.policyRequired && _.indexOf(["constant", "variable"], b["rewrite-rule"]["rule-name"].vipType) > -1 && (a.policyRequired = !0),
                !a.policyRequired && f.checkNestedProperty(b, "access-list", "vipValue", "0"))
                    for (var c = 0; c < b["access-list"].vipValue.length; c++)
                        if (_.indexOf(["constant", "variable"], b["access-list"].vipValue[c]["acl-name"].vipType) > -1)
                            return void (a.policyRequired = !0);
                if (!a.policyRequired && f.checkNestedProperty(b, "policer", "vipValue", "0"))
                    for (var c = 0; c < b.policer.vipValue.length; c++)
                        if (_.indexOf(["constant", "variable"], b.policer.vipValue[c]["policer-name"].vipType) > -1)
                            return void (a.policyRequired = !0);
                if (!a.policyRequired && f.checkNestedProperty(b, "vrrp", "vipValue", "0"))
                    for (var c = 0; c < b.vrrp.vipValue.length; c++)
                        if (_.indexOf(["constant", "variable"], b.vrrp.vipValue[c]["track-prefix-list"].vipType) > -1)
                            return void (a.policyRequired = !0)
            }
            if (angular.equals(a.templateType, "bgp")) {
                if (f.checkNestedProperty(b.bgp, "address-family", "vipValue", "0", "redistribute", "vipValue", "0"))
                    for (var c = 0; c < b.bgp["address-family"].vipValue[0].redistribute.vipValue.length; c++)
                        if (_.indexOf(["constant", "variable"], b.bgp["address-family"].vipValue[0].redistribute.vipValue[c]["route-policy"].vipType) > -1)
                            return void (a.policyRequired = !0);
                if (!a.policyRequired && f.checkNestedProperty(b.bgp, "neighbor", "vipValue", "0", "address-family", "vipValue", "0", "route-policy", 0, "pol-name"))
                    for (var c = 0; c < b.bgp.neighbor.vipValue.length; c++)
                        if (_.indexOf(["constant", "variable"], b.bgp.neighbor.vipValue[c]["address-family"].vipValue[0]["route-policy"].vipValue[0]["pol-name"].vipType) > -1)
                            return void (a.policyRequired = !0)
            }
            if (angular.equals(a.templateType, "ospf")) {
                if (f.checkNestedProperty(b.ospf, "redistribute", "vipValue", "0"))
                    for (var c = 0; c < b.ospf.redistribute.vipValue.length; c++)
                        if (_.indexOf(["constant", "variable"], b.ospf.redistribute.vipValue[c]["route-policy"].vipType) > -1)
                            return void (a.policyRequired = !0);
                f.checkNestedProperty(b.ospf, "route-policy", "vipValue", "0", "pol-name") && _.indexOf(["constant", "variable"], b.ospf["route-policy"].vipValue[0]["pol-name"].vipType) > -1 && (a.policyRequired = !0)
            }
        }
    }
}
function AddTemplateController(a, b, c, d, e, f, g, h, i, j, k, l, m) {
    function n() {
        b.stateView = "next",
        l(function() {
            b.$apply(function() {
                b.transitionInProcess = !1
            })
        })
    }
    b.stateString = d.getStateString(c),
    b.state = c,
    b.deviceModels = [],
    b.templateTypes = [],
    b.transitionInProcess = !0,
    b.template = {
        templateId: c.params.templateId,
        viewMode: c.params.display,
        templateType: c.params.templateType,
        deviceType: c.params.deviceType
    },
    b.template.templateId ? h.getGeneralTemplate(b.template.templateId).then(function(a) {
        return d.isUndefinedOrEmpty(a) ? (j.error("Template Not Found."),
        b.transitionInProcess = !1,
        !1) : (angular.extend(b.template, a),
        b.template.deviceModels = [],
        f.getDeviceModels(b.deviceModels),
        void g.getTemplateTypes(b.templateTypes))
    }, function(a) {
        j.error(a.error.message + ": " + a.error.details)
    }) : b.template.templateType ? (b.template.templateMinVersion = "15.0.0",
    b.template.deviceModels = [],
    angular.isArray(b.template.deviceType) || (b.template.deviceType = [b.template.deviceType]),
    f.getDeviceModels(b.deviceModels),
    g.getTemplateTypes(b.templateTypes)) : (f.getDeviceModels(b.deviceModels),
    g.getTemplateTypes(b.templateTypes)),
    b.setStateView = function(a) {
        a || b.changeState("app.config.template.feature", {
            display: "add",
            deviceType: b.template.deviceType,
            templateType: void 0
        }),
        b.stateView = a
    }
    ,
    b.$watchCollection("deviceModels", function(a, c) {
        if (a.length > 0) {
            b.deviceModels = k("orderBy")(a, "displayName");
            var e;
            if (b.template.deviceType && !b.template.templateType && (angular.isArray(b.template.deviceType) ? angular.forEach(b.template.deviceType, function(a) {
                e = _.findIndex(b.deviceModels, {
                    name: a
                }),
                e > -1 && (b.deviceModels[e].selected = !0)
            }) : (e = _.findIndex(b.deviceModels, {
                name: b.template.deviceType
            }),
            e > -1 && (b.deviceModels[e].selected = !0)),
            b.deviceModels.selected = k("filter")(b.deviceModels, function(a) {
                return a.selected
            })),
            b.template.templateType && d.isUndefinedOrEmpty(b.template.deviceModels)) {
                var g;
                angular.forEach(b.template.deviceType, function(c) {
                    e = _.findIndex(a, {
                        name: c
                    }),
                    e > -1 && (g = f.getNewInstance(a[e].name, a[e].displayName, a[e].deviceType),
                    b.template.deviceModels.push(g))
                })
            }
            b.$watchCollection("templateTypes", function(a, c) {
                if (b.filterTemplateTypes(b.deviceModels.selected),
                a.length > 0)
                    if (b.template.templateType && angular.isString(b.template.templateType)) {
                        b.filterTemplateTypes(b.template.deviceModels);
                        var d = k("filter")(b.templateTypes, function(a) {
                            return 0 == a.disabled
                        })
                          , e = _.find(d, function(a) {
                            return angular.equals(a.displayName, b.template.templateType) || angular.equals(a.name, b.template.templateType)
                        });
                        b.template.templateType = e,
                        b.template.templateUrl = i.GENERAL_TEMPLATE_PATH + e.name + "-15.0.0.html",
                        n()
                    } else
                        b.transitionInProcess = !1
            })
        }
    }),
    b.changeDeviceModelsSelected = function(a, c) {
        return "vbond" === b.deviceModels[c].deviceType && "vBond Software" === b.deviceModels[c].displayName ? (j.warning("vBond Software has been deprecated. Please use vEdge Cloud instead."),
        !1) : (a.shiftKey ? m.shiftSelect(b.deviceModels, c, a, "selected", !0) : m.toggleSelection(b.deviceModels, c, "selected", !0),
        b.deviceModels.selected = k("filter")(b.deviceModels, function(a) {
            return a.selected
        }),
        void b.filterTemplateTypes(b.deviceModels.selected))
    }
    ,
    b.filterTemplateTypes = function(a) {
        return d.isUndefinedOrEmpty(a) ? void b.setDisableTemplateTypes() : void angular.forEach(b.templateTypes, function(b, c) {
            var d = !0;
            angular.forEach(a, function(a) {
                void 0 === _.find(b.deviceModels, {
                    name: a.name
                }) && (d = !1)
            }),
            b.disabled = !d
        })
    }
    ,
    b.setDisableTemplateTypes = function() {
        angular.forEach(b.templateTypes, function(a) {
            a.disabled = !0,
            a.selected = !1
        })
    }
    ,
    b.nextStateView = function(a) {
        b.changeState("app.config.template.feature", {
            display: "add",
            deviceType: _.pluck(b.deviceModels.selected, "name"),
            templateType: a.displayName
        })
    }
}
function FeatureTemplateController(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var o = 158;
    a.$parent.stateString = e.getStateString(b),
    a.stateString = e.getStateString(b),
    a.templateConfigPermission = !1,
    a.tableData = [],
    l.checkSidebarState() && l.allowAccess("Template Configuration") && (a.templateConfigPermission = !0,
    o = 198),
    angular.forEach(a.$parent.tabs, function(a) {
        a.setActive(a.states === b.current.name)
    }),
    a.delayRefresh = function(b) {
        k(function() {
            a.table.refresh()
        }, b)
    }
    ,
    a.copyTemplate = function(b) {
        var e = c.show({
            templateUrl: "app/common/modalPartials/copyGeneralTemplateModal.html",
            controller: "CopyGeneralTemplateModalInstanceCtrl",
            resolve: {
                selectedRow: function() {
                    return b
                },
                table: function() {
                    return a.table
                }
            }
        });
        e.then(function(b) {
            a.delayRefresh(100)
        }, function() {
            d.log("Modal dismissed at: " + new Date)
        })
    }
    ,
    a.viewTemplate = function(b) {
        f.listTemplateTypes().then(function(c) {
            a.changeState("app.config.template.feature", {
                display: "view",
                templateId: b.entity.templateId,
                templateType: _.find(c.data, function(a) {
                    return angular.equals(b.entity.templateType, a.name)
                }).displayName
            })
        }, function(a) {
            j.error("error occurred: " + a)
        })
    }
    ,
    a.editTemplate = function(b) {
        f.listTemplateTypes().then(function(c) {
            a.changeState("app.config.template.feature", {
                display: "edit",
                templateId: b.entity.templateId,
                templateType: _.find(c.data, function(a) {
                    return angular.equals(b.entity.templateType, a.name)
                }).displayName
            })
        }, function(a) {
            j.error("error occurred: " + a)
        })
    }
    ,
    a.confirmDelete = function(b) {
        f.deleteGeneralTemplate(b.templateId).then(function(c) {
            j.success(b.templateName + " template successfully deleted.", 2e3),
            a.delayRefresh(100)
        }, function(a) {
            j.error(a.error.message + ": " + a.error.details)
        })
    }
    ;
    var p = [{
        type: "View",
        open: "callback",
        okButtonActionFn: function(b) {
            a.viewTemplate(b)
        }
    }];
    a.templateConfigPermission && (p.push({
        type: "Edit",
        open: "callback",
        okButtonActionFn: function(b) {
            a.editTemplate(b)
        },
        hideCallback: function(a) {
            return a.entity.factoryDefault
        }
    }),
    p.push({
        type: "Change Device Models",
        open: "modal",
        templateUrl: "app/configuration/template/feature/modal/views/changeDeviceModels.html",
        controller: "changeDeviceModelsController",
        hideCallback: function(a) {
            return a.entity.factoryDefault
        }
    }),
    p.push({
        type: "Delete",
        open: "confirm",
        title: "Are you sure you want to delete the template?",
        content: "This template will be deleted immediately. You cannot undo the action.",
        precondition: function(a, b, c) {
            a.entity.attachedMastersCount > 0 && (b.textContent = "To delete the feature template, it needs to be detached from all the device templates.",
            b.title = "The feature template attached to a device template cannot be deleted ",
            b.template = g.NO_CANCEL_CONFIRM_TEMPLATE)
        },
        okButtonActionFn: function(b) {
            0 === b.entity.attachedMastersCount && a.confirmDelete(b.entity)
        },
        hideCallback: function(a) {
            return a.entity.factoryDefault
        }
    }),
    p.push({
        type: "Copy",
        open: "modal",
        templateUrl: "app/common/modalPartials/copyGeneralTemplateModal.html",
        controller: "CopyGeneralTemplateModalInstanceCtrl"
    }),
    p.push({
        type: "Show Attached Device Templates",
        open: "modal",
        templateUrl: "app/common/modalPartials/viewAttachedDeviceTemplatesModal.html",
        controller: "ViewAttachedDeviceTemplatesModalInstanceCtrl",
        hideCallback: function(a) {
            return a.entity.attachedMastersCount < 1
        }
    }));
    var q = new i({
        autoLoad: !0,
        menuColumnFilter: !0,
        columnResizing: !0,
        singleSelect: !0,
        toggleFirstRowOnLoad: !0,
        enableSorting: !0,
        tableHeightOffset: o,
        dataUid: "templateId"
    });
    q.setHoverAction(p),
    q.setViewActions({
        button: !0,
        title: "Add Template",
        icon: "add_circle",
        rbac: "Template Configuration",
        cssId: a.stateString + "add_template",
        action: function() {
            b.go("app.config.template.feature", {
                display: "add"
            })
        }
    });
    var r = function(b) {
        var c = l.getUserMode();
        if ("provider" === c.mode) {
            var d = [];
            angular.forEach(b, function(a) {
                (!a.factoryDefault || a.deviceType.indexOf("vmanage") > -1 || a.deviceType.indexOf("vedge-cloud") > -1) && (a.factoryDefault && (a.tempDeviceType = [],
                a.deviceType.indexOf("vmanage") > -1 && a.tempDeviceType.push("vmanage"),
                a.deviceType.indexOf("vedge-cloud") > -1 && a.tempDeviceType.push("vedge-cloud"),
                a.deviceType = angular.copy(a.tempDeviceType),
                delete a.tempDeviceType),
                d.push(a))
            }),
            a.tableData = angular.copy(d)
        } else
            a.tableData = angular.copy(b);
        a.filterData(a.selectedTemplateFilter)
    };
    q.setOnRefreshCallback(r),
    q.setDataSourceFilter("Template Type", void 0, a.filterOptions, void 0, "featureTemplateTypeFilter"),
    q.dataSourceFilter.setOnSelectionChangeFunc(function() {
        var b = this;
        a.selectedTemplateFilter = b.selectedOption,
        a.filterData(b.selectedOption)
    }),
    a.table = q,
    a.filterData = function(b) {
        var c = a;
        q.dataSourceFilter.selectedOption = b,
        a.filterDataSourceByTemplateType.call(c, b, a.tableData)
    }
    ,
    function() {
        n.getTableData("/dataservice/template/feature").then(function(b) {
            a.table.createColumns(b.header.columns);
            var c = l.getUserMode();
            if ("provider" === c.mode) {
                var d = [];
                angular.forEach(b.data, function(a) {
                    (!a.factoryDefault || a.deviceType.indexOf("vmanage") > -1 || a.deviceType.indexOf("vedge-cloud") > -1) && (a.factoryDefault && (a.tempDeviceType = [],
                    a.deviceType.indexOf("vmanage") > -1 && a.tempDeviceType.push("vmanage"),
                    a.deviceType.indexOf("vedge-cloud") > -1 && a.tempDeviceType.push("vedge-cloud"),
                    a.deviceType = angular.copy(a.tempDeviceType),
                    delete a.tempDeviceType),
                    d.push(a))
                }),
                a.table.setTableData(d),
                a.tableData = angular.copy(d)
            } else
                a.table.setTableData(b.data),
                a.tableData = angular.copy(b.data);
            h.sessionStorage.getItem("featureTemplateTypeFilter") ? a.selectedTemplateFilter = _.find(a.filterOptions, function(a) {
                return angular.equals(a.value, h.sessionStorage.getItem("featureTemplateTypeFilter")) || angular.equals(a.key, h.sessionStorage.getItem("featureTemplateTypeFilter"))
            }) : a.selectedTemplateFilter = a.filterOptions[2],
            a.filterData(a.selectedTemplateFilter)
        }, function(b) {
            angular.isObject(b) && e.checkNestedProperty(b, "error", "details") ? (d.error("Error occurred while retrieving table data: " + b.error.message + ":" + b.error.details),
            j.error(b.error.message + ": " + b.error.details)) : (d.info("API error response needs to be updated to conform to company guidelines:" + a.table.dataUrl),
            j.error("Error occurred while retrieving table data.")),
            a.table.error = !0
        })
    }()
}
function AaaTemplateCtrl(a, b, c, d, e, f, g, h) {
    a.viewScope = a;
    var i = new b;
    i.extendTemplate(a.template);
    var j = ["local", "radius", "tacacs"];
    if (a.authOrderList = [],
    a.currentLocalTabCfg = "users",
    a.template = i,
    a.navSections = [{
        title: "Authentication",
        sectionId: "section-authentication"
    }, {
        title: "Local",
        sectionId: "section-local"
    }, {
        title: "RADIUS",
        sectionId: "section-radius"
    }, {
        title: "TACACS",
        sectionId: "section-tacac"
    }],
    a.aaaLocalTab = {
        tabs: [{
            title: "USER",
            value: "users"
        }, {
            title: "USER GROUP",
            value: "userGroups"
        }],
        activeTab: "users",
        selectTab: function(b) {
            var c = this;
            ("users" != b.value || a.openUsersTab()) && (c.activeTab = b.value)
        }
    },
    e.checkNestedProperty(a.template.templateDefinition, "aaa", "auth-order") && angular.isArray(a.template.templateDefinition.aaa["auth-order"].vipValue) && a.template.templateDefinition.aaa["auth-order"].vipValue.length > 0) {
        var k = angular.copy(j)
          , l = 0;
        angular.forEach(a.template.templateDefinition.aaa["auth-order"].vipValue, function(b, c) {
            a.authOrderList[c] = {
                name: b.vipValue,
                toggleSelection: !angular.equals(b.vipValue, "local"),
                isSelected: !0,
                indexInList: c
            },
            l = c;
            var d = k.indexOf(b.vipValue);
            d > -1 && k.splice(d, 1)
        }),
        angular.forEach(k, function(b) {
            a.authOrderList.splice(l + 1, 0, {
                name: b,
                toggleSelection: !angular.equals(b, "local"),
                isSelected: !1,
                indexInList: l + 1
            })
        }),
        a.$watch("template.templateDefinition.aaa['auth-order']", function(b) {
            e.checkNestedProperty(b, "dataType", "values") && i.updateAuthOrderList(a.authOrderList)
        })
    } else
        angular.forEach(j, function(b, c) {
            a.authOrderList[c] = {
                name: b,
                toggleSelection: !angular.equals(b, "local"),
                isSelected: !0,
                indexInList: c
            }
        });
    a.openUsersTab = function() {
        var b = i.updateUserGroupsList(a.aaaUserGroupsInfo.userGroups.data, a.usersTable);
        if (a.aaaUserFormInfo.copyUserGroupOptions(b),
        0 === b.length)
            return d.info("No user groups found. Add user group before adding users"),
            !1;
        for (var c = 0; c < b.length; c++)
            if (e.isUndefinedOrEmpty(b[c].value))
                return d.info("User group name missing in some or all the user groups. Add user group name for all user groups before adding users"),
                !1;
        return !0
    }
    ,
    a.$watch("authOrderList", function(a, b) {
        angular.equals(a, b) || i.updateAuthOrderList(a)
    }, !0),
    a.userGroupsTable = a.template.createUserGroupsTable(),
    a.usersTable = a.template.createUsersTable(),
    a.radiusTable = a.template.createAuthServerTable("radius"),
    a.tacacsTable = a.template.createAuthServerTable("tacacs"),
    a.aaaUserFormInfo = new h(a.usersTable),
    a.usersTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/AAA/updateAAAUserTable.html", "UpdateFeatureTemplateTableController", a.aaaUserFormInfo, "aaaUserFormInfo")),
    a.aaaUserFormInfo.copyUserGroupOptions = function(b) {
        a.aaaUserFormInfo.formFieldDefinition.children.group.dataType.values = angular.copy(b),
        a.aaaUserFormInfo.localFormFields.children.group.dataType.values = angular.copy(b)
    }
    ,
    a.aaaRadiusFormInfo = new h(a.radiusTable),
    a.aaaRadiusFormInfo.setMaxEntries(8),
    a.radiusTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/AAA/updateAAARadiusTable.html", "UpdateFeatureTemplateTableController", a.aaaRadiusFormInfo, "aaaRadiusFormInfo")),
    a.aaaTacacsFormInfo = new h(a.tacacsTable),
    a.aaaTacacsFormInfo.setMaxEntries(8),
    a.tacacsTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/AAA/updateAAATacacsTable.html", "UpdateFeatureTemplateTableController", a.aaaTacacsFormInfo, "aaaTacacsFormInfo")),
    a.aaaUserGroupsInfo = new h(a.userGroupsTable),
    a.aaaUserGroupsInfo.selectUserGroup = function(b) {
        var c = this;
        angular.forEach(c.userGroups.data, function(a) {
            a.name.selected = !1
        }),
        b.name.selected = !0,
        a.userGroupsTable.editable = b.name.deleteFlag,
        a.userGroupsTable.data = b.taskPermission
    }
    ,
    a.aaaUserGroupsInfo.updateUserGroup = function(b) {
        if (_.findIndex(b, function(a) {
            return a.read === !0
        }) < 0) {
            var c = {
                error: {
                    message: "Failed to edit user group. ",
                    details: "Minimum one feature should be configured."
                }
            };
            return void d.error(c.error.message + c.error.details)
        }
        angular.copy(b, a.userGroupsTable.data)
    }
    ,
    a.aaaUserGroupsInfo.openModal = function(b, c, e, f, h) {
        var i = this;
        g.show({
            templateUrl: b,
            controller: c,
            targetEvent: e,
            resolve: {
                userGroup: function() {
                    return {
                        getColumns: function() {
                            var b = [];
                            return angular.forEach(a.userGroupsTable.columnDefs, function(a) {
                                b.push({
                                    dataType: a.type,
                                    property: a.name,
                                    title: a.displayName,
                                    editableCellTemplateForEdit: a.editableCellTemplate
                                })
                            }),
                            b
                        },
                        getGroupNameFromControlView: function() {
                            return angular.copy(a.template.getUserGroupName())
                        },
                        getTaskListFromViewControl: function() {
                            return angular.copy(a.template.getEmptyPermissions())
                        }
                    }
                },
                selectedRow: function() {
                    if (angular.equals(h, "delete"))
                        return {
                            confirmMessage: "Are you sure you want to delete user group " + f.name.vipValue + "?",
                            entry: f
                        }
                }
            }
        }).then(function(b) {
            if (angular.equals(b.action, "add"))
                i.userGroups.data.push(b.userGroup);
            else if (angular.equals(b.action, "delete")) {
                var c = _.findIndex(i.userGroups.data, function(a) {
                    return angular.equals(a.name.vipValue, b.userGroup.name.vipValue)
                });
                if (c > -1) {
                    for (var e = 0; e < a.usersTable.data.length; e++)
                        if (angular.isDefined(a.usersTable.data[e].group.vipValue) && a.usersTable.data[e].group.vipValue.indexOf(i.userGroups.data[c].name.vipValue) > -1)
                            return d.clear(),
                            void d.error(i.userGroups.data[c].name.vipValue + " cannot be deleted as one of the users refers to the user group.");
                    i.userGroups.data.splice(c, 1),
                    a.aaaUserGroupsInfo.selectUserGroup(a.aaaUserGroupsInfo.userGroups.data[0])
                }
            }
        })
    }
    ,
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template).then(function() {
        a.template.setUserGroupsTable(a.userGroupsTable),
        a.aaaUserGroupsInfo.userGroups = angular.copy(a.userGroupsTable),
        a.aaaUserGroupsInfo.selectUserGroup(a.aaaUserGroupsInfo.userGroups.data[0]),
        a.template.templateDefinition.aaa.usergroup = a.aaaUserGroupsInfo.userGroups,
        a.template.setUsersTable(a.usersTable),
        a.aaaUserFormInfo.copyFormFields(a.template.templateDefinition.aaa.user),
        a.template.templateDefinition.aaa.user = a.usersTable.data,
        a.openUsersTab(),
        a.template.setAuthServerTable("radius", a.radiusTable),
        a.aaaRadiusFormInfo.copyFormFields(a.template.templateDefinition.radius.server),
        a.template.templateDefinition.radius.server = a.radiusTable.data,
        a.template.setAuthServerTable("tacacs", a.tacacsTable),
        a.aaaTacacsFormInfo.copyFormFields(a.template.templateDefinition.tacacs.server),
        a.template.templateDefinition.tacacs.server = a.tacacsTable.data,
        f(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        d.error(a.error.message + ": " + a.error.details)
    })
}
function ArchiveTemplateCtrl(a, b, c, d, e) {
    var f = new b;
    f.extendTemplate(a.template),
    a.template = f,
    a.viewScope = a,
    c.callTemplateDefinition(a.template).then(function() {
        return e(function() {
            $(".template-view-port").scrollTop(0)
        }),
        !0
    }, function(a) {
        d.error(a.error.message + ": " + a.error.details)
    })
}
function BannerTemplateCtrl(a, b, c, d, e, f) {
    var g = new b;
    g.extendTemplate(a.template),
    a.viewScope = a,
    g.templateDefinition || (g.templateDefinition = {
        login: {},
        motd: {}
    }),
    a.template = g,
    d.callTemplateDefinition(a.template).then(function() {
        f(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        e.error(msg.message + ": " + msg.details)
    }),
    g.setTemplateDefinition = function() {
        this.templateDefinition.login.vipValue = this.replaceDoubleQuotes(this.templateDefinition.login.vipValue),
        this.templateDefinition.motd.vipValue = this.replaceDoubleQuotes(this.templateDefinition.motd.vipValue),
        this.omitExtraDefinitionProperty(this.templateDefinition),
        this.templateDefinition.login.vipType === c.TEMPLATE_DEF_TYPE_VARIABLE && (this.templateDefinition.login.vipType = c.TEMPLATE_DEF_TYPE_VARIABLE_NAME),
        this.templateDefinition.motd.vipType === c.TEMPLATE_DEF_TYPE_VARIABLE && (this.templateDefinition.motd.vipType = c.TEMPLATE_DEF_TYPE_VARIABLE_NAME)
    }
    ,
    g.replaceDoubleQuotes = function(a) {
        if (!angular.isUndefined(a)) {
            var b = a.split('"');
            return angular.forEach(b, function(a, c) {
                c != b.length - 1 && "\\" !== b[c + 1][0] && "\\" !== a[a.length - 1] && (b[c] = b[c] + "\\")
            }),
            b.join('"')
        }
    }
}
function bridgeController(a, b, c, d, e, f, g, h) {
    a.viewScope = a;
    var b = new b;
    b.extendTemplate(a.template),
    a.template = b,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "Interface",
        sectionId: "section-interface"
    }],
    d.checkNestedProperty(a.template, "devicesAttached") && a.template.devicesAttached > 0 && (a.disableDeviceSpecificVarNameChange = "true"),
    a.bridgeInterfaceTable = a.template.createBridgeInterfaceTable(),
    a.bridgeInterfaceFormInfo = new g(a.bridgeInterfaceTable),
    a.bridgeInterfaceTable.setAppScope({
        editRow: function(b, c, d) {
            f.show({
                templateUrl: "app/configuration/template/feature/modal/views/Bridge/updateBridgeInterfaceTable.html",
                controller: "updateBridgeInterfaceTableController",
                targetEvent: b,
                resolve: {
                    selectedRow: function() {
                        return c.entity
                    },
                    formObject: function() {
                        return a.bridgeInterfaceFormInfo
                    },
                    interfaceRowIndex: function() {
                        return d
                    }
                }
            }).then(function() {})
        }
    }),
    a.openModal = function(b) {
        f.show({
            templateUrl: "app/configuration/template/feature/modal/views/Bridge/bridgeStaticMacAddress.html",
            controller: "BridgeStaticMACAddressController",
            targetEvent: b,
            escapeToClose: !1,
            resolve: {
                selectedRow: function() {
                    return a.bridgeInterfaceFormInfo.localFormFields
                },
                operation: function() {
                    return "add"
                },
                bridgeInterfaceFormInfo: function() {
                    return null
                },
                interfaceRowIndex: function() {
                    return null
                },
                formObject: function() {
                    return {}
                }
            }
        }).then(function(a) {})
    }
    ,
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template).then(function() {
        a.template.setBridgeInterfaceTable(a.bridgeInterfaceTable),
        a.bridgeInterfaceFormInfo.copyFormFields(a.template.templateDefinition.interface),
        a.template.templateDefinition.interface = a.bridgeInterfaceTable.data,
        h(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        e.error(a.error.message + ": " + a.error.details)
    })
}
function CellularProfileController(a, b, c, d, e, f) {
    var g = new b;
    g.extendTemplate(a.template),
    a.viewScope = a,
    g.templateDefinition || (g.templateDefinition = {
        "if-name": {},
        profile: {
            "profile-id": {},
            apn: {},
            auth: {},
            "ip-addr": {},
            name: {},
            "pdn-type": {},
            "user-name": {},
            password: {},
            "primary-dns": {},
            "secondary-dns": {}
        }
    }),
    a.template = g,
    c.callTemplateDefinition(a.template).then(function() {
        return f(function() {
            $(".template-view-port").scrollTop(0)
        }),
        !0
    }, function(a) {
        d.error(a.error.message + ": " + a.error.details)
    }),
    g.setTemplateDefinition = function() {
        this.templateDefinition["if-name"].vipType === e.TEMPLATE_DEF_TYPE_VARIABLE && angular.equals(this.templateDefinition["if-name"].vipVariableName, "cellular_if_name") && (this.templateDefinition["if-name"].vipVariableName = this.templateDefinition["if-name"].vipVariableName + "_" + this.templateName),
        this.omitExtraDefinitionProperty(this.templateDefinition)
    }
}
function IgmpTemplateCtrl(a, b, c, d, e, f, g, h) {
    a.viewScope = a;
    var i = new c;
    i.extendTemplate(a.template),
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "Interface",
        sectionId: "section-interface"
    }],
    a.template = i,
    a.interfaceTable = a.template.createInterfaceTable(),
    a.igmpInterfaceFormInfo = new h(a.interfaceTable),
    a.interfaceTable.setAppScope({
        editRow: function(b, c, d) {
            f.show({
                templateUrl: "app/configuration/template/feature/modal/views/IGMP/updateIgmpInterfaceTable.html",
                controller: "updateIgmpInterfaceTableController",
                targetEvent: b,
                escapeToClose: !1,
                resolve: {
                    selectedRow: function() {
                        return c.entity
                    },
                    formObject: function() {
                        return a.igmpInterfaceFormInfo
                    },
                    interfaceRowIndex: function() {
                        return d
                    }
                }
            }).then(function() {})
        }
    }),
    a.openModal = function(b) {
        f.show({
            templateUrl: "app/configuration/template/feature/modal/views/IGMP/igmpGroupAddress.html",
            controller: "IGMPGroupAddressController",
            targetEvent: b,
            resolve: {
                selectedRow: function() {
                    return a.igmpInterfaceFormInfo.localFormFields
                },
                operation: function() {
                    return "add"
                },
                igmpInterfaceFormInfo: function() {
                    return null
                },
                interfaceRowIndex: function() {
                    return null
                },
                formObject: function() {
                    return {}
                }
            }
        }).then(function(a) {})
    }
    ,
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    d.callTemplateDefinition(a.template).then(function() {
        a.template.setInterfaceTable(a.interfaceTable),
        a.igmpInterfaceFormInfo.copyFormFields(a.template.templateDefinition.igmp.interface),
        a.template.templateDefinition.igmp.interface = a.interfaceTable.data,
        g(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        e.error(a.error.message + ": " + a.error.details)
    })
}
function LoggingTemplateCtrl(a, b, c, d, e, f) {
    a.viewScope = a;
    var g = new b;
    g.extendTemplate(a.template),
    a.template = g,
    a.navSections = [{
        title: "Disk",
        sectionId: "section-disk"
    }, {
        title: "Server",
        sectionId: "section-server"
    }],
    a.serverTable = a.template.createServerTable(a.serverTable),
    a.logginServerFormInfo = new e(a.serverTable),
    a.serverTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/logging/updateLoggingServerTable.html", "UpdateFeatureTemplateTableController", a.logginServerFormInfo, "logginServerFormInfo")),
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template).then(function() {
        a.template.setServerTable(a.serverTable),
        a.logginServerFormInfo.copyFormFields(a.template.templateDefinition.server),
        a.template.templateDefinition.server = a.serverTable.data,
        f(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        d.error(a.error.message + ": " + a.error.details)
    })
}
function MulticastTemplateCtrl(a, b, c, d, e) {
    var f = new b;
    f.extendTemplate(a.template),
    a.viewScope = a,
    f.templateDefinition || (f.templateDefinition = {
        "multicast-replicator": {
            local: {},
            threshold: {}
        }
    }),
    a.template = f,
    c.callTemplateDefinition(a.template).then(function() {
        return e(function() {
            $(".template-view-port").scrollTop(0)
        }),
        !0
    }, function(a) {
        d.error(a.error.message + ": " + a.error.details)
    })
}
function NtpTemplateCtrl(a, b, c, d, e, f, g, h) {
    a.viewScope = a;
    var i = new b;
    i.extendTemplate(a.template),
    a.template = i,
    a.navSections = [{
        title: "Server",
        sectionId: "section-server"
    }, {
        title: "Authentication",
        sectionId: "section-authentication"
    }],
    a.ntpAuthTab = {
        tabs: [{
            title: "TRUSTED KEY",
            value: "trusted"
        }, {
            title: "AUTHENTICATION KEY",
            value: "authentication"
        }],
        activeTab: "authentication",
        selectTab: function(b) {
            var c = this;
            ("trusted" !== b.value || a.openTrustedTab()) && (c.activeTab = b.value)
        }
    },
    a.currentAuthenticationTabCfg = "authentication",
    a.openServerTab = function() {
        for (var b = i.getAuthenticationKeys(a.authenticationTable.data, a.serverTable), c = 0; c < b.length; c++)
            if (angular.isUndefined(b[c].value))
                return d.info("Authentication key missing in some or all the authentication rows. Add the missing keys or Delete the key entry before adding Servers"),
                !1;
        return !0
    }
    ,
    a.openTrustedTab = function() {
        var b = i.getAuthenticationKeys(a.authenticationTable.data);
        if (0 === b.length && a.template.templateDefinition.keys.trusted.vipType != g.TEMPLATE_DEF_TYPE_CONSTANT)
            return d.info("No Authentication Keys found. Add authentication keys before adding trusted keys"),
            !1;
        for (var c = 0; c < b.length; c++)
            if (angular.isUndefined(b[c].value))
                return d.info("Authentication Key missing in some or all the authentication rows. Add the missing keys before adding trusted keys"),
                !1;
        return !0
    }
    ,
    a.serverTable = a.template.createServerTable(),
    a.authenticationTable = a.template.createAuthenticationTable(),
    a.ntpServerFormInfo = new f(a.serverTable),
    a.ntpServerFormInfo.setMaxEntries(4);
    var j = {
        editRow: function(b, c, d) {
            h.show({
                templateUrl: "app/configuration/template/feature/modal/views/NTP/updateNTPServerTable.html",
                controller: "UpdateNTPServerTableController",
                targetEvent: b,
                escapeToClose: !1,
                resolve: {
                    selectedRow: function() {
                        return c.entity
                    },
                    rowIndex: function() {
                        return d
                    },
                    formObject: function() {
                        return a.ntpServerFormInfo
                    },
                    formName: function() {
                        return "ntpServerFormInfo"
                    },
                    authenticationTableData: function() {
                        return a.authenticationTable.data
                    }
                }
            }).then(function(a) {})
        },
        getAuthenticationTableData: function() {
            return a.authenticationTable.data
        }
    };
    a.serverTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/NTP/updateNTPServerTable.html", "UpdateNTPServerTableController", a.ntpServerFormInfo, "ntpServerFormInfo")),
    a.serverTable.setAppScope(j);
    var k = {
        removeRow: function(b, c) {
            for (var e = 0; e < a.serverTable.data.length; e++)
                if (a.serverTable.data[e].key.vipType === g.TEMPLATE_DEF_TYPE_CONSTANT && a.serverTable.data[e].key.vipValue === b.grid.options.data[c].number.vipValue)
                    return d.clear(),
                    void d.error("The selected row cannot be deleted as one of the servers refers to the selected authentication key.");
            return a.template.templateDefinition.keys.trusted.vipType === g.TEMPLATE_DEF_TYPE_CONSTANT && a.template.templateDefinition.keys.trusted.vipValue.indexOf(b.grid.options.data[c].number.vipValue) > -1 ? (d.clear(),
            void d.error("The selected row cannot be deleted as the selected authentication key is used as a trusted key.")) : (b.grid.options.data.splice(c, 1),
            void angular.forEach(b.grid.options.data, function(a) {
                angular.forEach(a, function(a) {
                    angular.isDefined(a.dataType) && "enum" === a.dataType.type && (a.deleteFlag = !0)
                })
            }))
        }
    };
    a.ntpAuthFormInfo = new f(a.authenticationTable),
    a.ntpAuthFormInfo.setMaxEntries(4),
    a.authenticationTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/NTP/updateNTPAuthTable.html", "UpdateFeatureTemplateTableController", a.ntpAuthFormInfo, "ntpAuthFormInfo")),
    a.authenticationTable.setAppScope(k),
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template, ["trusted"]).then(function() {
        a.template.setServerTable(a.serverTable),
        a.ntpServerFormInfo.copyFormFields(a.template.templateDefinition.server),
        a.template.templateDefinition.server = a.serverTable.data,
        a.template.setAuthenticationTable(a.authenticationTable),
        a.ntpAuthFormInfo.copyFormFields(a.template.templateDefinition.keys.authentication),
        a.template.templateDefinition.keys.authentication = a.authenticationTable.data,
        e(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        d.error(a.error.message + ": " + a.error.details)
    })
}
function OspfTemplateCtrl(a, b, c, d, e, f, g, h, i) {
    a.viewScope = a,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "Redistribute",
        sectionId: "section-redistribute"
    }, {
        title: "Maximum Metric (Router LSA)",
        sectionId: "section-max-metric"
    }, {
        title: "Area",
        sectionId: "section-area"
    }, {
        title: "Advanced",
        sectionId: "section-advanced"
    }];
    var j = new c;
    j.extendTemplate(a.template),
    a.template = j,
    a.redistributeTable = a.template.createRedistributeTable(),
    a.routerLsaTable = a.template.createRouterLsaTable(),
    a.areaTable = a.template.createAreaTable(),
    a.ospfRedistributeFormInfo = new h(a.redistributeTable),
    a.redistributeTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/OSPF/updateOSPFRedistributeTable.html", "UpdateFeatureTemplateTableController", a.ospfRedistributeFormInfo, "ospfRedistributeFormInfo")),
    a.ospfRouterLSAFormInfo = new h(a.routerLsaTable),
    a.ospfRouterLSAFormInfo.setMaxEntries(2),
    a.routerLsaTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/OSPF/updateOSPFRouterLsaTable.html", "UpdateFeatureTemplateTableController", a.ospfRouterLSAFormInfo, "ospfRouterLSAFormInfo")),
    a.ospfAreaFormInfo = new h(a.areaTable),
    a.areaTable.setAppScope({
        editRow: function(b, c, d) {
            i.show({
                templateUrl: "app/configuration/template/feature/modal/views/OSPF/updateOSPFAreaTable.html",
                controller: "updateOspfAreaTableController",
                targetEvent: b,
                escapeToClose: !1,
                resolve: {
                    selectedRow: function() {
                        return c.entity
                    },
                    formObject: function() {
                        return a.ospfAreaFormInfo
                    },
                    areaRowIndex: function() {
                        return d
                    }
                }
            }).then(function() {})
        }
    }),
    a.openModal = function(b, c, d) {
        i.show({
            templateUrl: c,
            controller: d,
            targetEvent: b,
            escapeToClose: !1,
            resolve: {
                selectedRow: function() {
                    return a.ospfAreaFormInfo.localFormFields
                },
                operation: function() {
                    return "add"
                },
                ospfAreaFormInfo: function() {
                    return null
                },
                areaRowIndex: function() {
                    return null
                },
                formObject: function() {
                    return {}
                }
            }
        }).then(function(a) {})
    }
    ,
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    d.callTemplateDefinition(a.template, ["originate", "always", "metric", "metric-type", "route-policy"]).then(function() {
        a.template.setRedistributeTable(a.redistributeTable),
        a.ospfRedistributeFormInfo.copyFormFields(a.template.templateDefinition.ospf.redistribute),
        a.template.templateDefinition.ospf.redistribute = a.redistributeTable.data,
        a.template.setRouterLsaTable(a.routerLsaTable),
        a.ospfRouterLSAFormInfo.copyFormFields(a.template.templateDefinition.ospf["max-metric"]["router-lsa"]),
        a.template.templateDefinition.ospf["max-metric"]["router-lsa"] = a.routerLsaTable.data,
        a.template.setAreaTable(a.areaTable),
        a.ospfAreaFormInfo.copyFormFields(angular.extend({}, a.template.templateDefinition.ospf.area, {
            entity: a.template.templateDefinition.ospf.area.children
        })),
        a.template.templateDefinition.ospf.area = a.areaTable.data,
        g(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        e.error(a.message + ": " + a.details)
    })
}
function PimTemplateCtrl(a, b, c, d, e, f) {
    a.viewScope = a;
    var g = new b;
    g.extendTemplate(a.template),
    a.template = g,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "Interface",
        sectionId: "section-interface"
    }],
    a.interfaceTable = a.template.createInterfaceTable(),
    a.pimInterfaceFormInfo = new e(a.interfaceTable),
    a.interfaceTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/PIM/updatePIMInterfaceTable.html", "UpdateFeatureTemplateTableController", a.pimInterfaceFormInfo, "pimInterfaceFormInfo")),
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template).then(function() {
        a.template.setInterfaceTable(a.interfaceTable),
        a.pimInterfaceFormInfo.copyFormFields(a.template.templateDefinition.pim.interface),
        a.template.templateDefinition.pim.interface = a.interfaceTable.data,
        f(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        d.error(a.error.message + ": " + a.error.details)
    })
}
function SnmpTemplateCtrl(a, b, c, d, e, f, g, h, i) {
    function j() {
        return 0 == a.communityTable.data.length && 0 == a.viewTable.data.length && 0 == a.trapTargetTable.data.length && 0 == a.trapTargetV3Table.data.length && 0 == a.trapGroupTable.data.length && 0 == a.groupTable.data.length && 0 == a.userTable.data.length
    }
    a.viewScope = a,
    a.navSections = [{
        title: "SNMP",
        sectionId: "section-snmp"
    }, {
        title: "SNMP Version",
        sectionId: "section-version"
    }];
    var k = new d;
    k.extendTemplate(a.template),
    a.snmp = {},
    a.template = k,
    a.snmpCommunityTab = {
        tabs: [{
            title: "VIEW",
            value: "view"
        }, {
            title: "COMMUNITY",
            value: "community"
        }],
        activeTab: "view",
        selectTab: function(b) {
            var c = this;
            ("view" != b.value || a.openViewTab()) && ("community" != b.value || a.openCommunityTab()) && (c.activeTab = b.value)
        }
    },
    a.snmpGroupTab = {
        tabs: [{
            title: "VIEW",
            value: "view"
        }, {
            title: "GROUP",
            value: "group"
        }],
        activeTab: "view",
        selectTab: function(b) {
            var c = this;
            ("view" != b.value || a.openViewTab()) && ("group" != b.value || a.openGroupTab()) && (c.activeTab = b.value)
        }
    },
    a.snmpTrapTab = {
        tabs: [{
            title: "TRAP GROUP",
            value: "group"
        }, {
            title: "TRAP TARGET SERVER",
            value: "target"
        }],
        activeTab: "group",
        selectTab: function(b) {
            var c = this;
            ("group" != b.value || a.openTrapGroupTab()) && ("target" != b.value || a.openTrapTargetTab()) && (c.activeTab = b.value)
        }
    },
    "add" !== a.template.viewMode && (angular.isDefined(a.template.templateDefinition.user) || angular.isDefined(a.template.templateDefinition.group)) && (a.snmp.version = "V3",
    h(function() {
        angular.element("#TrapSelection").triggerHandler("click")
    })),
    angular.isDefined(a.snmp.version) || (a.snmp.version = "V2"),
    a.template.toggleVersion(a.snmp.version),
    a.resetTables = function() {
        a.communityTable.data.reset(),
        a.viewTable.data.reset(),
        a.trapTargetTable.data.reset(),
        a.trapTargetV3Table.data.reset(),
        a.trapGroupTable.data.reset(),
        a.groupTable.data.reset(),
        a.userTable.data.reset(),
        a.snmpGroupTab.activeTab = "view",
        a.snmpCommunityTab.activeTab = "view",
        a.snmpTrapTab.activeTab = "group"
    }
    ,
    a.changeVersion = function() {
        a.template.toggleVersion(a.snmp.version),
        a.resetTables(),
        h("V2" === a.snmp.version ? function() {
            angular.element("#view_breadcrumb").triggerHandler("click")
        }
        : function() {
            angular.element("#group_breadcrumb").triggerHandler("click")
        }
        )
    }
    ,
    a.openSwitchModal = function(c, d) {
        if (j())
            a.changeVersion();
        else {
            var e = b.confirm().title("Are you sure you want to change the SNMP version?").textContent("All the configuration values provided will be lost. You cannot undo the action.").openFrom(angular.element(document.querySelector("#snmp-version"))).closeTo(angular.element(document.querySelector("#snmp-version"))).ok("OK").cancel("Cancel");
            b.show(e).then(function() {
                a.changeVersion()
            }, function() {
                a.snmp.version = "V2" === a.snmp.version ? "V3" : "V2",
                "V3" === a.snmp.version && h(function() {
                    angular.element("#TrapSelection").triggerHandler("click")
                })
            })
        }
    }
    ,
    a.viewTable = a.template.createViewTable(),
    a.communityTable = a.template.createCommunityTable(),
    a.trapGroupTable = a.template.createTrapGroupTable(),
    a.trapTargetTable = a.template.createTrapTargetTable(),
    a.trapTargetV3Table = a.template.createTrapTargetV3Table(),
    a.groupTable = a.template.createGroupTable(),
    a.userTable = a.template.createUserTable(),
    a.snmpViewFormInfo = new c(a.viewTable),
    a.viewTable.setAppScope({
        editRow: function(c, d, e) {
            b.show({
                templateUrl: "app/configuration/template/feature/modal/views/SNMP/updateSNMPViewTable.html",
                controller: "updateSNMPViewTableController",
                targetEvent: c,
                escapeToClose: !1,
                resolve: {
                    selectedRow: function() {
                        return d.entity
                    },
                    formObject: function() {
                        return a.snmpViewFormInfo
                    },
                    viewRowIndex: function() {
                        return e
                    }
                }
            }).then(function() {})
        },
        removeRow: function(b, c) {
            var d = "";
            d = "V2" === a.snmp.version ? "communityTable" : "groupTable";
            for (var e = 0; e < a[d].data.length; e++)
                if (a[d].data[e].view.vipType === i.TEMPLATE_DEF_TYPE_CONSTANT && a[d].data[e].view.vipValue === b.grid.options.data[c].name.vipValue)
                    return f.clear(),
                    void f.error("The selected row cannot be deleted as one of the " + ("communityTable" === d ? "comunities" : "groups") + " refers to the selected view.");
            b.grid.options.data.splice(c, 1),
            angular.forEach(b.grid.options.data, function(a) {
                angular.forEach(a, function(a) {
                    angular.isDefined(a.dataType) && "enum" === a.dataType.type && (a.deleteFlag = !0)
                })
            })
        }
    }),
    a.openModal = function(c, d, e, f) {
        var g = {
            operation: function() {
                return "add"
            },
            formObject: function() {
                return {}
            }
        };
        "view" === f ? (g.selectedRow = function() {
            return a.snmpViewFormInfo.localFormFields
        }
        ,
        g.snmpViewFormInfo = function() {
            return null
        }
        ,
        g.viewRowIndex = function() {
            return null
        }
        ) : (g.selectedRow = function() {
            return a.snmpTrapGroupFormInfo.localFormFields
        }
        ,
        g.snmpTrapGroupFormInfo = function() {
            return null
        }
        ,
        g.trapGroupRowIndex = function() {
            return null
        }
        );
        b.show({
            templateUrl: d,
            controller: e,
            targetEvent: c,
            resolve: g
        }).then(function(a) {})
    }
    ,
    a.snmpCommunityFormInfo = new c(a.communityTable),
    a.communityTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/SNMP/updateSNMPCommunityTable.html", "UpdateFeatureTemplateTableController", a.snmpCommunityFormInfo, "snmpCommunityFormInfo")),
    a.communityTable.setAppScope({
        removeRow: function(b, c) {
            for (var d = 0; d < a.trapTargetTable.data.length; d++)
                if (a.trapTargetTable.data[d]["community-name"].vipType === i.TEMPLATE_DEF_TYPE_CONSTANT && a.trapTargetTable.data[d]["community-name"].vipValue === b.grid.options.data[c].name.vipValue)
                    return f.clear(),
                    void f.error("The selected row cannot be deleted as one of the trap target server refers to the selected community.");
            b.grid.options.data.splice(c, 1),
            angular.forEach(b.grid.options.data, function(a) {
                angular.forEach(a, function(a) {
                    angular.isDefined(a.dataType) && "enum" === a.dataType.type && (a.deleteFlag = !0)
                })
            })
        }
    }),
    a.snmpTrapGroupFormInfo = new c(a.trapGroupTable),
    a.trapGroupTable.setAppScope({
        editRow: function(c, d, e) {
            b.show({
                templateUrl: "app/configuration/template/feature/modal/views/SNMP/updateSNMPTrapGroupTable.html",
                controller: "updateSNMPTrapGroupTableController",
                targetEvent: c,
                escapeToClose: !1,
                resolve: {
                    selectedRow: function() {
                        return d.entity
                    },
                    formObject: function() {
                        return a.snmpTrapGroupFormInfo
                    },
                    trapGroupRowIndex: function() {
                        return e
                    }
                }
            }).then(function() {})
        },
        removeRow: function(b, c) {
            var d = "";
            d = "V2" === a.snmp.version ? "trapTargetTable" : "trapTargetV3Table";
            for (var e = 0; e < a[d].data.length; e++)
                if (a[d].data[e]["group-name"].vipType === i.TEMPLATE_DEF_TYPE_CONSTANT && a[d].data[e]["group-name"].vipValue === b.grid.options.data[c]["group-name"].vipValue)
                    return f.clear(),
                    void f.error("The selected row cannot be deleted as one of the trap target server refers to the selected trap group.");
            b.grid.options.data.splice(c, 1),
            angular.forEach(b.grid.options.data, function(a) {
                angular.forEach(a, function(a) {
                    angular.isDefined(a.dataType) && "enum" === a.dataType.type && (a.deleteFlag = !0)
                })
            })
        }
    }),
    a.snmpTrapTargetFormInfo = new c(a.trapTargetTable),
    a.trapTargetTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/SNMP/updateSNMPTrapTargetTable.html", "UpdateFeatureTemplateTableController", a.snmpTrapTargetFormInfo, "snmpTrapTargetFormInfo")),
    a.snmpTrapTargetV3FormInfo = new c(a.trapTargetV3Table),
    a.trapTargetV3Table.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/SNMP/updateSNMPTrapTargetV3Table.html", "UpdateFeatureTemplateTableController", a.snmpTrapTargetV3FormInfo, "snmpTrapTargetV3FormInfo")),
    a.snmpGroupFormInfo = new c(a.groupTable),
    a.snmpGroupFormInfo.addRow = function() {
        var b = this;
        return b.form.$valid ? (b.table.data.push(this.localFormFields.children),
        this.localFormFields = angular.copy(b.formFieldDefinition),
        this.formCollapse = !this.formCollapse,
        void a.template.updateUserGroupsList(a.groupTable.data, a.userTable, a.snmpUserFormInfo.localFormFields.children.group)) : (b.showErrorSection = !0,
        !1)
    }
    ,
    a.groupTable.setAppScope({
        editRow: function(c, d, e) {
            b.show({
                templateUrl: "app/configuration/template/feature/modal/views/SNMP/updateSNMPGroupTable.html",
                controller: "UpdateFeatureTemplateTableController",
                targetEvent: c,
                escapeToClose: !1,
                resolve: {
                    selectedRow: function() {
                        return d.entity
                    },
                    rowIndex: function() {
                        return e
                    },
                    formObject: function() {
                        return a.snmpGroupFormInfo
                    },
                    formName: function() {
                        return "snmpGroupFormInfo"
                    }
                }
            }).then(function(b) {
                a.openUserTab()
            })
        },
        removeRow: function(b, c) {
            for (var d = 0; d < a.userTable.data.length; d++)
                if (a.userTable.data[d].group.vipType === i.TEMPLATE_DEF_TYPE_CONSTANT && a.userTable.data[d].group.vipValue === b.grid.options.data[c].name.vipValue)
                    return f.clear(),
                    void f.error("The selected row cannot be deleted as one of the users refers to the selected group.");
            b.grid.options.data.splice(c, 1),
            angular.forEach(b.grid.options.data, function(a) {
                angular.forEach(a, function(a) {
                    angular.isDefined(a.dataType) && "enum" === a.dataType.type && (a.deleteFlag = !0)
                })
            })
        }
    }),
    a.snmpUserFormInfo = new c(a.userTable),
    a.snmpUserFormInfo.precheckMessage = {
        error: {
            message: "Warning",
            details: "No Groups found. Please add Groups before adding Users."
        }
    },
    a.userTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/SNMP/updateSNMPUserTable.html", "UpdateFeatureTemplateTableController", a.snmpUserFormInfo, "snmpUserFormInfo")),
    a.userTable.setAppScope({
        removeRow: function(b, c) {
            for (var d = 0; d < a.trapTargetV3Table.data.length; d++)
                if (a.trapTargetV3Table.data[d].user.vipType === i.TEMPLATE_DEF_TYPE_CONSTANT && a.trapTargetV3Table.data[d].group.vipValue === b.grid.options.data[c].name.vipValue)
                    return f.clear(),
                    void f.error("The selected row cannot be deleted as one of the users refers to the selected group.");
            b.grid.options.data.splice(c, 1),
            angular.forEach(b.grid.options.data, function(a) {
                angular.forEach(a, function(a) {
                    angular.isDefined(a.dataType) && "enum" === a.dataType.type && (a.deleteFlag = !0)
                })
            })
        }
    }),
    h(function() {
        a.snmpViewFormInfo.setForm(a.addTemplate.viewForm),
        a.snmpCommunityFormInfo.setForm(a.addTemplate.communityForm),
        a.snmpTrapGroupFormInfo.setForm(a.addTemplate.trapGroupForm),
        a.snmpTrapTargetFormInfo.setForm(a.addTemplate.trapTargetForm),
        a.snmpTrapTargetV3FormInfo.setForm(a.addTemplate.trapTargetV3Form),
        a.snmpGroupFormInfo.setForm(a.addTemplate.groupForm),
        a.snmpUserFormInfo.setForm(a.addTemplate.userForm)
    }),
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    e.callTemplateDefinition(a.template).then(function() {
        a.template.setViewTable(a.viewTable),
        a.snmpViewFormInfo.copyFormFields(a.template.templateDefinition.view),
        a.template.templateDefinition.view = a.viewTable.data,
        a.template.setCommunityTable(a.communityTable),
        a.snmpCommunityFormInfo.copyFormFields(a.template.templateDefinition.community),
        a.template.templateDefinition.community = a.communityTable.data,
        a.template.setTrapGroupTable(a.trapGroupTable),
        a.snmpTrapGroupFormInfo.copyFormFields(a.template.templateDefinition.trap.group),
        a.template.templateDefinition.trap.group = a.trapGroupTable.data,
        a.template.setTrapTargetTable(a.trapTargetTable),
        a.template.setTrapTargetV3Table(a.trapTargetV3Table),
        a.snmpTrapTargetFormInfo.copyFormFields(a.template.templateDefinition.trap.target),
        a.snmpTrapTargetV3FormInfo.copyFormFields(a.template.templateDefinition.trap.target),
        a.template.templateDefinition.trap.target = a.trapTargetTable.data,
        a.template.templateDefinition.trap.targetv3 = a.trapTargetV3Table.data,
        a.template.setGroupTable(a.groupTable),
        a.snmpGroupFormInfo.copyFormFields(a.template.templateDefinition.group),
        a.template.templateDefinition.group = a.groupTable.data,
        a.template.setUserTable(a.userTable),
        a.snmpUserFormInfo.copyFormFields(a.template.templateDefinition.user),
        a.template.templateDefinition.user = a.userTable.data,
        a.template.updateUserGroupsList(a.groupTable.data, a.userTable, a.snmpUserFormInfo.localFormFields.children.group),
        h(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        f.error(a.error.message + ": " + a.error.details)
    }),
    a.openCommunityTab = function() {
        a.collpaseForms("snmpCommunityFormInfo");
        var b = k.updateCommunityViewsList(a.viewTable.data, a.communityTable, a.snmpCommunityFormInfo.localFormFields.children.view);
        if (0 === b.length)
            return f.info("No view found. Add view before adding community"),
            !1;
        for (var c = 0; c < b.length; c++)
            if (g.isUndefinedOrEmpty(b[c].value))
                return f.info("View name missing in some or all the views. Add view name for all views before adding community"),
                !1;
        return !0
    }
    ,
    a.openGroupTab = function() {
        a.collpaseForms("snmpGroupFormInfo");
        var b = k.updateCommunityViewsList(a.viewTable.data, a.groupTable, a.snmpGroupFormInfo.localFormFields.children.view);
        if (0 === b.length)
            return f.info("No view found. Add view before adding Group"),
            !1;
        for (var c = 0; c < b.length; c++)
            if (g.isUndefinedOrEmpty(b[c].value))
                return f.info("View name missing in some or all the views. Add view name for all views before adding Group"),
                !1;
        return !0
    }
    ,
    a.openViewTab = function() {
        a.collpaseForms("snmpViewFormInfo");
        var b = k.validateCommunityViews(a.template.templateDefinition.community, a.template.templateDefinition.view);
        return !!b || (f.info("Views missing for one or more communities"),
        !1)
    }
    ,
    a.openTrapTargetTab = function() {
        var b;
        if ("V2" === a.snmp.version ? (a.collpaseForms("snmpTrapTargetFormInfo"),
        b = k.updateTrapTargetGroupsAndCommunitiesList(a.trapGroupTable.data, a.communityTable.data, a.trapTargetTable, a.snmpTrapTargetFormInfo.localFormFields.children["group-name"], a.snmpTrapTargetFormInfo.localFormFields.children["community-name"], a.snmpTrapTargetV3FormInfo.localFormFields.children.user)) : (a.collpaseForms("snmpTrapTargetV3FormInfo"),
        b = k.updateTrapTargetGroupsAndCommunitiesList(a.trapGroupTable.data, a.userTable.data, a.trapTargetV3Table, a.snmpTrapTargetV3FormInfo.localFormFields.children["group-name"], a.snmpTrapTargetV3FormInfo.localFormFields.children["community-name"], a.snmpTrapTargetV3FormInfo.localFormFields.children.user)),
        0 === b.groups.length)
            return f.info("No trap group found. Add trap group before adding trap target"),
            !1;
        if ("V2" === a.snmp.version) {
            if (0 === b.communities.length)
                return f.info("No community found. Add community before adding trap target"),
                !1
        } else if (0 === b.users.length)
            return f.info("No Users found. Add User before adding trap target"),
            !1;
        for (var c = 0; c < b.groups.length; c++)
            if (g.isUndefinedOrEmpty(b.groups[c].value))
                return f.info("Trap group name missing in some or all the trap groups. Add group name for all traps before adding target"),
                !1;
        if ("V2" === a.snmp.version) {
            for (var c = 0; c < b.communities.length; c++)
                if (g.isUndefinedOrEmpty(b.communities[c].value))
                    return f.info("Community name missing in some or all the communities. Add community name for all communities before adding target"),
                    !1
        } else
            for (var c = 0; c < b.users.length; c++)
                if (g.isUndefinedOrEmpty(b.users[c].value))
                    return f.info("User name missing in some or all the Users. Add User name for all Users before adding target"),
                    !1;
        return !0
    }
    ,
    a.openTrapGroupTab = function() {
        a.collpaseForms("snmpTrapGroupFormInfo");
        var b = k.validateTrapTargets(a.template.templateDefinition.trap.target);
        return !!b
    }
    ,
    a.openUserTab = function() {
        a.collpaseForms("snmpUserFormInfo");
        var b = k.updateUserGroupsList(a.groupTable.data, a.userTable, a.snmpUserFormInfo.localFormFields.children.group);
        if (0 === b.length)
            return f.info("No User Groups found. Add User Groups before adding Users"),
            !1;
        for (var c = 0; c < b.length; c++)
            if (g.isUndefinedOrEmpty(b[c].value))
                return f.info("Group name missing in some or all the Group. Add Group name for all views before adding community"),
                !1;
        return !0
    }
    ,
    a.collpaseForms = function(b) {
        for (var c = ["snmpCommunityFormInfo", "snmpGroupFormInfo", "snmpTrapGroupFormInfo", "snmpTrapTargetFormInfo", "snmpTrapTargetV3FormInfo", "snmpUserFormInfo", "snmpViewFormInfo"], d = 0; d < c.length; d++)
            c[d] !== b && (a[c[d]].formCollapse = !0)
    }
}
function VedgeBfdTemplateCtrl(a, b, c, d, e, f) {
    var g = new b;
    g.extendTemplate(a.template),
    a.template = g,
    a.colorTable = a.template.createColorTable(),
    a.viewScope = a,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "Color",
        sectionId: "section-color"
    }],
    a.bfdColorFormInfo = new e(a.colorTable),
    a.colorTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/BFD/updateBFDColorTable.html", "UpdateFeatureTemplateTableController", a.bfdColorFormInfo, "bfdColorFormInfo")),
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template).then(function() {
        a.template.setColorTable(a.colorTable),
        a.bfdColorFormInfo.copyFormFields(a.template.templateDefinition.color),
        a.template.templateDefinition.color = a.colorTable.data,
        f(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        d.error(msg.message + ": " + msg.details)
    })
}
function VedgeBgpTemplateCtrl(a, b, c, d, e, f, g, h) {
    a.viewScope = a;
    var i = new b;
    i.extendTemplate(a.template),
    a.template = i,
    a.isCollapsed = !0,
    a.toggleCollapse = function() {
        a.isCollapsed = !a.isCollapsed
    }
    ,
    a.setCollpaseTrue = function() {
        a.isCollapsed = !0
    }
    ,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "IPv4 Unicast Address Family",
        sectionId: "section-address-family"
    }, {
        title: "Neighbor",
        sectionId: "section-neighbor"
    }, {
        title: "Advanced",
        sectionId: "section-advanced"
    }],
    a.bgpUnicastTab = {
        tabs: [{
            title: "RE-DISTRIBUTE",
            value: "redistribute"
        }, {
            title: "NETWORK",
            value: "network"
        }, {
            title: "AGGREGATE ADDRESS",
            value: "aggregate-address"
        }],
        activeTab: "redistribute",
        selectTab: function(a) {
            var b = this;
            b.activeTab = a.value
        }
    },
    a.aggregateAddressTable = a.template.createAggregateAddressTable(),
    a.redistributeTable = a.template.createRedistributeTable(),
    a.networkTable = a.template.createNetworkTable(),
    a.neighborTable = a.template.createNeighborTable(),
    a.bgpUnicastRedistributeFormInfo = new h(a.redistributeTable),
    a.redistributeTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/BGP/updateBGPRedistributeTable.html", "UpdateFeatureTemplateTableController", a.bgpUnicastRedistributeFormInfo, "bgpUnicastRedistributeFormInfo")),
    a.bgpUnicastNetworkFormInfo = new h(a.networkTable),
    a.networkTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/BGP/updateBGPNetworkTable.html", "UpdateFeatureTemplateTableController", a.bgpUnicastNetworkFormInfo, "bgpUnicastNetworkFormInfo")),
    a.bgpUnicastAggregateAddrFormInfo = new h(a.aggregateAddressTable),
    a.aggregateAddressTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/BGP/updateBGPAggregateTable.html", "UpdateFeatureTemplateTableController", a.bgpUnicastAggregateAddrFormInfo, "bgpUnicastAggregateAddrFormInfo")),
    a.bgpNeighborFormInfo = new h(a.neighborTable),
    a.neighborTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/BGP/updateBGPNeighborTable.html", "UpdateFeatureTemplateTableController", a.bgpNeighborFormInfo, "bgpNeighborFormInfo")),
    e.checkNestedProperty(a.template.templateDefinition, "as-num", "vipType") && angular.equals(a.template.templateDefinition["as-num"].vipType, f.TEMPLATE_DEF_TYPE_CONSTANT) && (a.template.templateDefinition["as-num"].vipValue = parseInt(a.template.templateDefinition["as-num"].vipValue, 10)),
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template).then(function() {
        a.template.extendAddressFamily(),
        a.template.setAggregateAddressTable(a.aggregateAddressTable),
        a.bgpUnicastAggregateAddrFormInfo.copyFormFields(a.template.templateDefinition.bgp["address-family"][0]["aggregate-address"]),
        a.template.templateDefinition.bgp["address-family"][0]["aggregate-address"] = a.aggregateAddressTable.data,
        a.template.setRedistributeTable(a.redistributeTable),
        a.bgpUnicastRedistributeFormInfo.copyFormFields(a.template.templateDefinition.bgp["address-family"][0].redistribute),
        a.template.templateDefinition.bgp["address-family"][0].redistribute = a.redistributeTable.data,
        a.template.setNetworkTable(a.networkTable),
        a.bgpUnicastNetworkFormInfo.copyFormFields(a.template.templateDefinition.bgp["address-family"][0].network),
        a.template.templateDefinition.bgp["address-family"][0].network = a.networkTable.data,
        a.template.setNeighborTable(a.neighborTable),
        a.bgpNeighborFormInfo.copyFormFields(a.template.templateDefinition.bgp.neighbor),
        a.template.templateDefinition.bgp.neighbor = a.neighborTable.data,
        g(function() {
            $(".template-view-port").scrollTop(0),
            a.bgpNeighborFormInfo.setForm(a.addTemplate.neighborForm)
        })
    }, function(a) {
        d.error(a.error.message + ": " + a.error.details)
    })
}
function VedgeDhcpServerTemplateCtrl(a, b, c, d, e, f) {
    var g = new b;
    g.extendTemplate(a.template),
    a.template = g,
    a.viewScope = a,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "Static Lease",
        sectionId: "section-static-lease"
    }, {
        title: "Advanced",
        sectionId: "section-advanced"
    }],
    a.staticLeaseTable = a.template.createStaticLeaseTable(),
    a.dhcpStaticLeaseFormInfo = new e(a.staticLeaseTable),
    a.staticLeaseTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/DHCP-Server/updateDHCPStaticLeaseTable.html", "UpdateFeatureTemplateTableController", a.dhcpStaticLeaseFormInfo, "dhcpStaticLeaseFormInfo")),
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template).then(function() {
        a.template.setStaticLeaseTable(a.staticLeaseTable),
        a.dhcpStaticLeaseFormInfo.copyFormFields(a.template.templateDefinition["static-lease"]),
        a.template.templateDefinition["static-lease"] = a.staticLeaseTable.data,
        f(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        d.error(a.error.message + ": " + a.error.details)
    })
}
function VedgeOmpTemplateCtrl(a, b, c, d, e, f, g) {
    var h = new b;
    h.extendTemplate(a.template),
    a.viewScope = a,
    a.template = h,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "Timers",
        sectionId: "section-timers"
    }, {
        title: "Advertise",
        sectionId: "section-advertise"
    }],
    e.checkNestedProperty(a.template.templateDefinition, "overlay-as", "vipType") && angular.equals(a.template.templateDefinition["overlay-as"].vipType, f.TEMPLATE_DEF_TYPE_CONSTANT) && (a.template.templateDefinition["overlay-as"].vipValue = parseInt(a.template.templateDefinition["overlay-as"].vipValue, 10)),
    c.callTemplateDefinition(a.template, "advertise").then(function() {
        return g(function() {
            $(".template-view-port").scrollTop(0)
        }),
        !0
    }, function(a) {
        d.error(a.error.message + ": " + a.error.details)
    })
}
function VedgeSecurityTemplateCtrl(a, b, c, d, e, f) {
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "Authentication Type",
        sectionId: "section-auth-type"
    }],
    e.setOptions({
        labels: {
            heading: "Select authentication types from the list below:",
            available: "Authentication List",
            selected: "Selected List"
        },
        toolTip: {
            enabled: !1,
            templateCache: ""
        },
        columns: [{
            property: "value",
            display: "Authentication Type"
        }],
        uuid: "key",
        enableSearchBar: !1
    });
    var g = new b;
    g.extendTemplate(a.template),
    a.template = g,
    a.viewScope = a,
    e.setOptions({
        enableSelection: !("ignore" === a.template.templateDefinition.ipsec.authenticationType.vipType)
    }),
    e.setViewMode(a.template.viewMode),
    e.setMultiSelectData(a.template.templateDefinition.ipsec.authenticationValue.dataType.values, a.template.templateDefinition.ipsec.authenticationValue.vipValue),
    a.$watch("template.templateDefinition.ipsec['authenticationType'].vipType", function(b, c) {
        b != c && a.template.populateDefaultAuthValue(b)
    }),
    c.callTemplateDefinition(a.template).then(function() {
        return f(function() {
            $(".template-view-port").scrollTop(0)
        }),
        !0
    }, function(a) {
        d.error(a.error.message + ": " + a.error.details)
    }),
    a.$on("$destroy", function() {
        e.reset()
    })
}
function VedgeSystemTemplateCtrl(a, b, c, d, e, f, g, h) {
    a.viewScope = a;
    var i = new c;
    i.extendTemplate(a.template),
    a.viewScope = a,
    a.template = i,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "GPS",
        sectionId: "section-gps"
    }, {
        title: "Tracker",
        sectionId: "section-tracker"
    }, {
        title: "Advanced",
        sectionId: "section-advanced"
    }],
    a.trackerTable = a.template.createTrackerTable(),
    a.trackerFormInfo = new g(a.trackerTable),
    a.trackerFormInfo.setMaxEntries(8),
    a.trackerTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/SYSTEM/updateTrackerTable.html", "UpdateFeatureTemplateTableController", a.trackerFormInfo, "trackerFormInfo")),
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    "add" === a.template.viewMode ? a.deviceModels = f.params.deviceType : a.deviceModels = a.template.deviceType,
    a.openModal = function(c, d) {
        if (angular.equals(a.template.templateDefinition["usb-controller"].vipValue, "true")) {
            var e = b.confirm().title("Are you sure you want to enable the USB controller?").textContent("Enabling the USB controller reboots vEdge router when you attach the device template.").openFrom(angular.element(document.querySelector("#option_types_usb_controller_wrapper"))).closeTo(angular.element(document.querySelector("#option_types_usb_controller_wrapper"))).ok("OK").cancel("Cancel");
            b.show(e).then(function() {}, function() {
                a.template.templateDefinition["usb-controller"].vipValue = "false"
            })
        }
    }
    ,
    d.callTemplateDefinition(a.template).then(function() {
        return angular.equals(a.template.viewMode, "edit") && a.template.devicesAttached > 0 && (a.template.templateDefinition.vbond.local.isDisabled = !0,
        a.template.templateDefinition.vbond.remote.isDisabled = !0),
        a.template.setTrackerTable(a.trackerTable),
        a.trackerFormInfo.copyFormFields(a.template.templateDefinition.tracker),
        a.template.templateDefinition.tracker = a.trackerTable.data,
        h(function() {
            $(".template-view-port").scrollTop(0)
        }),
        !0
    }, function(a) {
        e.error(a.error.message + ": " + a.error.details)
    })
}
function VedgeVPNController(a, b, c, d, e, f, g, h, i) {
    function j(b) {
        return {
            editRow: function(c, d, e, f) {
                var g = "app/configuration/template/feature/modal/views/VPN/updateVPNIpv4RouteTable.html"
                  , h = "updateVPNIpv4RouteTableController";
                "ip" !== c && (g = "app/configuration/template/feature/modal/views/VPN/updateVPNIpv6RouteTable.html",
                h = "updateVPNIpv6RouteTableController"),
                i.show({
                    templateUrl: g,
                    controller: h,
                    targetEvent: d,
                    escapeToClose: !1,
                    resolve: {
                        selectedRow: function() {
                            return e.entity
                        },
                        formObject: function() {
                            return a[b]
                        },
                        routeRowIndex: function() {
                            return f
                        },
                        routeType: function() {
                            return c
                        }
                    }
                }).then(function() {})
            }
        }
    }
    a.viewScope = a,
    a.navSections = [{
        sectionId: "section-basic",
        title: "Basic Configuration",
        offset: 20
    }, {
        sectionId: "section-dns",
        title: "DNS",
        offset: 20
    }, {
        sectionId: "section-omp",
        title: "Advertise OMP",
        offset: 20,
        callBack: function() {
            return e.clear(),
            e.info("OMP can be configured only on service VPNs"),
            !0
        }
    }, {
        sectionId: "section-ipv4-route",
        title: "IPv4 Route",
        offset: 20
    }, {
        sectionId: "section-ipv6-route",
        title: "IPv6 Route",
        offset: 20
    }, {
        sectionId: "section-service",
        title: "Service",
        offset: 20,
        callBack: function() {
            return e.clear(),
            e.info("Service can be configured only on service VPNs"),
            !0
        }
    }, {
        sectionId: "section-gre-route",
        title: "GRE Route",
        offset: 20,
        callBack: function() {
            return e.clear(),
            e.info("GRE Route can be configured only on service VPNs"),
            !0
        }
    }];
    var k = new b;
    k.extendTemplate(a.template),
    a.template = k;
    a.openOmpTab = function() {
        e.clear(),
        e.info("Warning : OMP can be configured only for VPNs other than 0 and 512")
    }
    ,
    a.vpnOmpTab = {
        tabs: [{
            title: "NETWORK",
            value: "network"
        }, {
            title: "AGGREGATE",
            value: "aggregate"
        }],
        activeTab: "network",
        selectTab: function(a) {
            var b = this;
            b.activeTab = a.value
        }
    },
    a.ipRouteTable = a.template.createRouteTable("ip"),
    a.ipv6RouteTable = a.template.createRouteTable("ipv6"),
    a.dnsHostTable = a.template.createDnsHostTable(),
    a.serviceTable = a.template.createServiceTable(),
    a.greRouteTable = a.template.createGreRouteTable(),
    a.prefixListNetworkTable = a.template.createPrefixListTable(4),
    a.prefixListAggregateTable = a.template.createPrefixListTable(5),
    a.dnsHostFormInfo = new h(a.dnsHostTable),
    a.dnsHostTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN/updateVPNDnsTable.html", "UpdateFeatureTemplateTableController", a.dnsHostFormInfo, "dnsHostFormInfo")),
    a.ipv4FormInfo = new h(a.ipRouteTable),
    a.ipv6FormInfo = new h(a.ipv6RouteTable),
    a.ipRouteTable.setAppScope(j("ipv4FormInfo")),
    a.ipv6RouteTable.setAppScope(j("ipv6FormInfo")),
    a.openModal = function(b, c, d, e) {
        var f = {
            selectedRow: function() {
                return a[b].localFormFields
            },
            operation: function() {
                return "add"
            },
            ipFormInfo: function() {
                return null
            },
            routeRowIndex: function() {
                return null
            },
            routeType: function() {
                return "ipv4FormInfo" === b ? "ip" : "ipv6"
            },
            formObject: function() {
                return {}
            }
        };
        a[b].openModal(c, d, e, f)
    }
    ,
    a.greRouteFormInfo = new h(a.greRouteTable),
    a.greRouteTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN/updateVPNGreRouteTable.html", "UpdateFeatureTemplateTableController", a.greRouteFormInfo, "greRouteFormInfo")),
    a.serviceFormInfo = new h(a.serviceTable),
    a.serviceFormInfo.setMaxEntries(7),
    a.serviceTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN/updateVPNServiceTable.html", "UpdateFeatureTemplateTableController", a.serviceFormInfo, "serviceFormInfo")),
    a.prefixListNetworkFormInfo = new h(a.prefixListNetworkTable),
    a.prefixListNetworkTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN/updateVPNNetworkTable.html", "UpdateFeatureTemplateTableController", a.prefixListNetworkFormInfo, "prefixListNetworkFormInfo")),
    a.prefixListAggregateFormInfo = new h(a.prefixListAggregateTable),
    a.prefixListAggregateTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN/updateVPNAggregateTable.html", "UpdateFeatureTemplateTableController", a.prefixListAggregateFormInfo, "prefixListAggregateFormInfo")),
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template, ["dns", "advertise"]).then(function() {
        a.template.setDnsHostTable(a.dnsHostTable),
        a.dnsHostFormInfo.copyFormFields(a.template.templateDefinition.host),
        a.template.templateDefinition.host = a.dnsHostTable.data,
        a.template.setPrefixListTable(a.prefixListNetworkTable, 4),
        a.prefixListNetworkFormInfo.copyFormFields(a.template.templateDefinition.omp.advertise[4]["prefix-list"]),
        a.template.templateDefinition.omp.advertise[4]["prefix-list"] = a.prefixListNetworkTable.data,
        a.template.setPrefixListTable(a.prefixListAggregateTable, 5),
        a.prefixListAggregateFormInfo.copyFormFields(a.template.templateDefinition.omp.advertise[5]["prefix-list"]),
        a.template.templateDefinition.omp.advertise[5]["prefix-list"] = a.prefixListAggregateTable.data,
        a.template.setRouteTable(a.ipRouteTable, "ip"),
        a.ipv4FormInfo.copyFormFields(a.template.templateDefinition.ip.route),
        a.template.templateDefinition.ip.route = a.ipRouteTable.data,
        a.template.setRouteTable(a.ipv6RouteTable, "ipv6"),
        a.ipv6FormInfo.copyFormFields(a.template.templateDefinition.ipv6.route),
        a.template.templateDefinition.ipv6.route = a.ipv6RouteTable.data,
        a.template.setServiceTable(a.serviceTable),
        a.serviceFormInfo.copyFormFields(a.template.templateDefinition.service),
        a.template.templateDefinition.service = a.serviceTable.data,
        a.template.setGreRouteTable(a.greRouteTable),
        a.greRouteFormInfo.copyFormFields(a.template.templateDefinition.ip["gre-route"]),
        a.template.templateDefinition.ip["gre-route"] = a.greRouteTable.data,
        d(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        e.error(a.message + ": " + a.details)
    })
}
function VedgeVPNInterfaceBridgeController(a, b, c, d, e, f, g) {
    a.disableDeviceSpecificVarNameChange = "false",
    a.viewScope = a,
    a.navSections = [{
        sectionId: "section-basic",
        title: "Basic Configuration",
        offset: 20
    }, {
        sectionId: "section-acl",
        title: "ACL",
        offset: 20
    }, {
        sectionId: "section-vrrp",
        title: "VRRP",
        offset: 20
    }, {
        sectionId: "section-arp",
        title: "ARP",
        offset: 20
    }, {
        sectionId: "section-advanced",
        title: "Advanced",
        offset: 20
    }];
    var h = new b;
    h.extendTemplate(a.template),
    a.template = h,
    d.checkNestedProperty(a.template, "devicesAttached") && a.template.devicesAttached > 0 && (a.disableDeviceSpecificVarNameChange = "true"),
    a.resetHiddenFields = function(a) {
        h.resetFields(a)
    }
    ,
    a.arpTable = a.template.createArpTable(),
    a.vrrpTable = a.template.createVrrpTable(),
    a.arpFormInfo = new f(a.arpTable),
    a.arpTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN-Interface/updateVPNInterfaceArpTable.html", "UpdateFeatureTemplateTableController", a.arpFormInfo, "arpFormInfo")),
    a.vrrpFormInfo = new f(a.vrrpTable),
    a.vrrpFormInfo.setMaxEntries(1),
    a.vrrpTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN-Interface/updateVPNInterfaceVrrpTable.html", "UpdateFeatureTemplateTableController", a.vrrpFormInfo, "vrrpFormInfo")),
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template, "access-list").then(function() {
        a.template.setSecondaryAddress(),
        a.template.setVrrpTable(a.vrrpTable),
        a.vrrpFormInfo.copyFormFields(a.template.templateDefinition.vrrp),
        a.template.templateDefinition.vrrp = a.vrrpTable.data,
        a.template.setArpTable(a.arpTable),
        a.arpFormInfo.copyFormFields(a.template.templateDefinition.arp.ip),
        a.template.templateDefinition.arp.ip = a.arpTable.data,
        g(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        e.error(msg.message + ": " + msg.details)
    })
}
function VedgeVPNInterfaceCellularController(a, b, c, d, e, f, g) {
    a.disableDeviceSpecificVarNameChange = "false",
    a.viewScope = a,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "Tunnel",
        sectionId: "section-tunnel"
    }, {
        title: "NAT",
        sectionId: "section-nat"
    }, {
        title: "ACL",
        sectionId: "section-acl"
    }, {
        title: "ARP",
        sectionId: "section-arp"
    }, {
        title: "Advanced",
        sectionId: "section-advanced"
    }];
    var h = new b;
    h.extendTemplate(a.template),
    a.template = h,
    a.ipv6Config = "static",
    h.setIpv6ConfigType("static"),
    d.checkNestedProperty(a.template, "devicesAttached") && a.template.devicesAttached > 0 && (a.disableDeviceSpecificVarNameChange = "true"),
    d.checkNestedProperty(a.template.templateDefinition, "ip", "address") ? (a.ipConfig = "static",
    h.setIpConfigType("static")) : (a.ipConfig = "dynamic",
    h.setIpConfigType("dynamic")),
    d.checkNestedProperty(a.template.templateDefinition, "ipv6", "address") ? (a.ipv6Config = "static",
    h.setIpv6ConfigType("static")) : (d.checkNestedProperty(a.template.templateDefinition, "ipv6", "dhcp-client") || d.checkNestedProperty(a.template.templateDefinition, "ipv6", "dhcp-distance") || d.checkNestedProperty(a.template.templateDefinition, "ipv6", "dhcp-rapid-commit")) && (a.ipv6Config = "dynamic",
    h.setIpv6ConfigType("dynamic")),
    a.onToggle = function(b, c, d) {
        "false" !== b && "" !== b || (h.resetFields(_.omit(c, _.union([d], ["vipObjectType", "vipType"]))),
        c.hasOwnProperty("port-forward") && a.portForwardTable.data.reset())
    }
    ,
    a.changeIpConfig = function(b, c) {
        a.template.templateDefinition[b].address.vipValue = "",
        "static" === c ? h.resetFields(a.template.templateDefinition[b].address) : "dynamic" === c && (h.resetFields(a.template.templateDefinition[b]["dhcp-client"]),
        h.resetFields(a.template.templateDefinition[b]["dhcp-distance"])),
        "ip" === b ? h.setIpConfigType(c) : h.setIpv6ConfigType(c)
    }
    ,
    a.portForwardTable = a.template.createPortForwardTable(),
    a.arpTable = a.template.createArpTable(),
    a.portForwardFormInfo = new f(a.portForwardTable),
    a.portForwardTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN-Interface/updateVPNInterfacePortForwardTable.html", "UpdateFeatureTemplateTableController", a.portForwardFormInfo, "portForwardFormInfo")),
    a.arpFormInfo = new f(a.arpTable),
    a.arpTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN-Interface/updateVPNInterfaceArpTable.html", "UpdateFeatureTemplateTableController", a.arpFormInfo, "arpFormInfo")),
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template, ["encapsulation", "access-list", "policer", "nat"]).then(function() {
        a.portForwardFormInfo.copyFormFields(a.template.templateDefinition.nat["port-forward"]),
        a.template.setPortForwardTable(a.portForwardTable),
        a.template.templateDefinition["nat-port-forward"] = a.portForwardTable.data,
        a.template.setArpTable(a.arpTable),
        a.arpFormInfo.copyFormFields(a.template.templateDefinition.arp.ip),
        a.template.templateDefinition.arp.ip = a.arpTable.data,
        g(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        e.error(msg.message + ": " + msg.details)
    })
}
function VedgeVPNInterfaceController(a, b, c, d, e, f, g) {
    a.disableDeviceSpecificVarNameChange = "false",
    a.viewScope = a,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic",
        offset: 20
    }, {
        title: "Tunnel",
        sectionId: "section-tunnel",
        offset: 20,
        callBack: function() {
            return a.open_tunnel_tab()
        }
    }, {
        title: "NAT",
        sectionId: "section-nat",
        offset: 20
    }, {
        title: "VRRP",
        sectionId: "section-vrrp",
        offset: 20,
        callBack: function() {
            return a.open_vrrp_tab()
        }
    }, {
        title: "ACL/QoS",
        sectionId: "section-acl-qos",
        offset: 20
    }, {
        title: "ARP",
        sectionId: "section-arp",
        offset: 20
    }, {
        title: "802.1X",
        sectionId: "section-802",
        offset: 20,
        callBack: function() {
            return a.open_dot1x_tab()
        }
    }, {
        title: "Advanced",
        sectionId: "section-advanced",
        offset: 20
    }];
    var h = new b;
    h.extendTemplate(a.template),
    a.template = h,
    a.ipv6Config = "static",
    h.setIpv6ConfigType("static"),
    a.open_dot1x_tab = function() {
        var b = angular.equals(a.template.templateDefinition["nat-enable"].vipValue, "true") || angular.isDefined(a.template.templateDefinition["tloc-extension"].vipValue);
        return b ? (e.info("Either 'NAT' or 'TLOC Extension' is configured."),
        !1) : (e.clear(),
        e.info("Warning : 802.1X can be configured only for Global VPN 0"),
        !0)
    }
    ,
    a.open_tunnel_tab = function() {
        return e.clear(),
        e.info("Warning : Tunnel can be configured only for Global VPN 0"),
        !0
    }
    ,
    a.open_vrrp_tab = function() {
        return e.clear(),
        e.info("Warning : VRRP can be configured only for Service VPN which are other than VPN 0 or VPN 512"),
        !0
    }
    ,
    a.vpnInterfaceDot1xAttrTab = {
        tabs: [{
            title: "AUTHENTICATION",
            value: "auth"
        }, {
            title: "ACCOUNTING",
            value: "acct"
        }],
        activeTab: "auth",
        selectTab: function(a) {
            var b = this;
            b.activeTab = a.value
        }
    };
    var i = ["mab", "radius"];
    a.authOrderList = [],
    angular.forEach(i, function(b, c) {
        a.authOrderList[c] = {
            name: b,
            toggleSelection: !1,
            isSelected: !0,
            indexInList: c
        }
    }),
    d.checkNestedProperty(a.template, "devicesAttached") && a.template.devicesAttached > 0 && (a.disableDeviceSpecificVarNameChange = "true"),
    d.checkNestedProperty(a.template.templateDefinition, "ip", "address") ? (a.ipConfig = "static",
    h.setIpConfigType("static")) : (a.ipConfig = "dynamic",
    h.setIpConfigType("dynamic")),
    d.checkNestedProperty(a.template.templateDefinition, "ipv6", "address") ? (a.ipv6Config = "static",
    h.setIpv6ConfigType("static")) : (d.checkNestedProperty(a.template.templateDefinition, "ipv6", "dhcp-client") || d.checkNestedProperty(a.template.templateDefinition, "ipv6", "dhcp-distance") || d.checkNestedProperty(a.template.templateDefinition, "ipv6", "dhcp-rapid-commit")) && (a.ipv6Config = "dynamic",
    h.setIpv6ConfigType("dynamic")),
    a.onToggle = function(b, c, d) {
        "false" !== b && "" !== b || (h.resetFields(_.omit(c, _.union([d], ["vipObjectType", "vipType"]))),
        c.hasOwnProperty("port-forward") && a.portForwardTable.data.reset())
    }
    ,
    a.changeIpConfig = function(b, c) {
        a.template.templateDefinition[b].address.vipValue = "",
        "static" === c ? h.resetFields(a.template.templateDefinition[b].address) : "dynamic" === c && (h.resetFields(a.template.templateDefinition[b]["dhcp-client"]),
        h.resetFields(a.template.templateDefinition[b]["dhcp-distance"])),
        "ip" === b ? h.setIpConfigType(c) : h.setIpv6ConfigType(c)
    }
    ,
    a.portForwardTable = a.template.createPortForwardTable(),
    a.vrrpTable = a.template.createVrrpTable(),
    a.arpTable = a.template.createArpTable(),
    a.authTable = a.template.createAttrTable("auth"),
    a.acctTable = a.template.createAttrTable("acct"),
    a.portForwardFormInfo = new f(a.portForwardTable),
    a.portForwardTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN-Interface/updateVPNInterfacePortForwardTable.html", "UpdateFeatureTemplateTableController", a.portForwardFormInfo, "portForwardFormInfo")),
    a.acctFormInfo = new f(a.acctTable),
    a.acctTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN-Interface/updateVPNInterfaceAcctTable.html", "UpdateFeatureTemplateTableController", a.acctFormInfo, "acctFormInfo")),
    a.authFormInfo = new f(a.authTable),
    a.authTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN-Interface/updateVPNInterfaceAuthable.html", "UpdateFeatureTemplateTableController", a.authFormInfo, "authFormInfo")),
    a.arpFormInfo = new f(a.arpTable),
    a.arpTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN-Interface/updateVPNInterfaceArpTable.html", "UpdateFeatureTemplateTableController", a.arpFormInfo, "arpFormInfo")),
    a.vrrpFormInfo = new f(a.vrrpTable),
    a.vrrpFormInfo.setMaxEntries(1),
    a.vrrpTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN-Interface/updateVPNInterfaceVrrpTable.html", "UpdateFeatureTemplateTableController", a.vrrpFormInfo, "vrrpFormInfo")),
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template, ["encapsulation", "access-list", "policer", "nat", "dot1x"]).then(function() {
        a.template.setSecondaryAddress(),
        a.portForwardFormInfo.copyFormFields(a.template.templateDefinition.nat["port-forward"]),
        a.template.setPortForwardTable(a.portForwardTable),
        a.template.templateDefinition["nat-port-forward"] = a.portForwardTable.data,
        a.template.setVrrpTable(a.vrrpTable),
        a.vrrpFormInfo.copyFormFields(a.template.templateDefinition.vrrp),
        a.template.templateDefinition.vrrp = a.vrrpTable.data,
        a.template.setArpTable(a.arpTable),
        a.arpFormInfo.copyFormFields(a.template.templateDefinition.arp.ip),
        a.template.templateDefinition.arp.ip = a.arpTable.data,
        a.template.setAttrTable(a.authTable, "auth", "auth-req-attr"),
        a.authFormInfo.copyFormFields(a.template.templateDefinition.dot1x["auth-req-attr"]),
        a.template.templateDefinition.dot1x["auth-req-attr"] = a.authTable.data,
        a.template.setAttrTable(a.acctTable, "acct", "acct-req-attr"),
        a.acctFormInfo.copyFormFields(a.template.templateDefinition.dot1x["acct-req-attr"]),
        a.template.templateDefinition.dot1x["acct-req-attr"] = a.acctTable.data,
        g(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        e.error(msg.message + ": " + msg.details)
    })
}
function VedgeVPNInterfaceGreController(a, b, c, d, e, f) {
    a.disableDeviceSpecificVarNameChange = "false",
    a.viewScope = a;
    var g = new b;
    g.extendTemplate(a.template),
    a.template = g,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "ACL",
        sectionId: "section-acl"
    }],
    a.setModelUntouched = function(b) {
        a.addTemplate[b.key.replace(/-/g, "_")].$setUntouched(),
        a.addTemplate[b.key.replace(/-/g, "_")].$setValidity("ipaddress", !0)
    }
    ,
    f.checkNestedProperty(a.template, "devicesAttached") && a.template.devicesAttached > 0 && (a.disableDeviceSpecificVarNameChange = "true"),
    c.callTemplateDefinition(a.template, ["access-list", "policer"]).then(function() {
        return e(function() {
            $(".template-view-port").scrollTop(0)
        }),
        !0
    }, function(a) {
        d.error(msg.message + ": " + msg.details)
    })
}
function VedgeVPNInterfaceIpsecController(a, b, c, d, e, f) {
    a.disableDeviceSpecificVarNameChange = "false",
    a.viewScope = a;
    var g = new b;
    g.extendTemplate(a.template),
    a.template = g,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "DPD",
        sectionId: "section-dpd"
    }, {
        title: "IKE",
        sectionId: "section-ike"
    }, {
        title: "IPSEC",
        sectionId: "section-ipsec"
    }],
    d.checkNestedProperty(a.template, "devicesAttached") && a.template.devicesAttached > 0 && (a.disableDeviceSpecificVarNameChange = "true"),
    a.setModelUntouched = function(b) {
        a.addTemplate[b.key.replace(/-/g, "_")].$setUntouched(),
        a.addTemplate[b.key.replace(/-/g, "_")].$setValidity("ipaddress", !0)
    }
    ,
    c.callTemplateDefinition(a.template).then(function() {
        return f(function() {
            $(".template-view-port").scrollTop(0)
        }),
        !0
    }, function(a) {
        e.error(msg.message + ": " + msg.details)
    })
}
function VedgeVPNInterfaceNatpoolController(a, b, c, d, e, f, g) {
    a.disableDeviceSpecificVarNameChange = "false",
    a.viewScope = a;
    var h = new b;
    h.extendTemplate(a.template),
    a.template = h,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "Port Forward",
        sectionId: "section-port-forward"
    }, {
        title: "Static NAT",
        sectionId: "section-static-nat"
    }],
    d.checkNestedProperty(a.template, "devicesAttached") && a.template.devicesAttached > 0 && (a.disableDeviceSpecificVarNameChange = "true"),
    a.portForwardTable = a.template.createPortForwardTable(),
    a.staticNatTable = a.template.createStaticNatTable(),
    a.portForwardFormInfo = new f(a.portForwardTable),
    a.portForwardTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN-Interface/updateVPNInterfacePortForwardTable.html", "UpdateFeatureTemplateTableController", a.portForwardFormInfo, "portForwardFormInfo")),
    a.staticNatFormInfo = new f(a.staticNatTable),
    a.staticNatTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN-Interface/updateVPNInterfaceStaticNatTable.html", "UpdateFeatureTemplateTableController", a.staticNatFormInfo, "staticNatFormInfo")),
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template, ["nat"]).then(function() {
        a.portForwardFormInfo.copyFormFields(a.template.templateDefinition.nat["port-forward"]),
        a.template.setPortForwardTable(a.portForwardTable),
        a.template.templateDefinition["nat-port-forward"] = a.portForwardTable.data,
        a.staticNatFormInfo.copyFormFields(a.template.templateDefinition.nat.static),
        a.template.setStaticNatTable(a.staticNatTable),
        a.template.templateDefinition.static = a.staticNatTable.data,
        g(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        e.error(msg.message + ": " + msg.details)
    })
}
function VedgeVPNInterfacePppoeController(a, b, c, d, e, f, g, h) {
    a.disableDeviceSpecificVarNameChange = "false",
    a.viewScope = a,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "PPP",
        sectionId: "section-ppp"
    }, {
        title: "Tunnel",
        sectionId: "section-tunnel"
    }, {
        title: "NAT",
        sectionId: "section-nat"
    }, {
        title: "ACL",
        sectionId: "section-acl"
    }, {
        title: "Advanced",
        sectionId: "section-advanced"
    }],
    a.papAndChap = {},
    a.papAndChap.sameCredentials = !0,
    d.checkNestedProperty(a.template, "templateDefinition", "ppp", "authentication") && a.template.templateDefinition.ppp.authentication.vipValue.length > 1 && angular.equals(a.template.templateDefinition.ppp.authentication.vipValue[0]["sent-username"].vipType, a.template.templateDefinition.ppp.authentication.vipValue[1].hostname.vipType) && angular.equals(a.template.templateDefinition.ppp.authentication.vipValue[0].password.vipType, a.template.templateDefinition.ppp.authentication.vipValue[1].password.vipType) && (angular.equals(a.template.templateDefinition.ppp.authentication.vipValue[0]["sent-username"].vipType, f.TEMPLATE_DEF_TYPE_VARIABLE_NAME) && angular.equals(a.template.templateDefinition.ppp.authentication.vipValue[0]["sent-username"].vipVariableName, a.template.templateDefinition.ppp.authentication.vipValue[1].hostname.vipVariableName) || angular.equals(a.template.templateDefinition.ppp.authentication.vipValue[0].password.vipType, f.TEMPLATE_DEF_TYPE_VARIABLE_NAME) && angular.equals(a.template.templateDefinition.ppp.authentication.vipValue[0].password.vipVariableName, a.template.templateDefinition.ppp.authentication.vipValue[1].password.vipVariableName) || !angular.equals(a.template.templateDefinition.ppp.authentication.vipValue[0]["sent-username"].vipValue, "") && angular.equals(a.template.templateDefinition.ppp.authentication.vipValue[0]["sent-username"].vipValue, a.template.templateDefinition.ppp.authentication.vipValue[1].hostname.vipValue) && !angular.equals(a.template.templateDefinition.ppp.authentication.vipValue[0].password.vipValue, "") && angular.equals(a.template.templateDefinition.ppp.authentication.vipValue[0].password.vipValue, a.template.templateDefinition.ppp.authentication.vipValue[1].password.vipValue)) || (a.papAndChap.sameCredentials = !a.papAndChap.sameCredentials);
    var i = new b;
    i.extendTemplate(a.template),
    a.template = i,
    a.template.setSameCredentials(a.papAndChap.sameCredentials),
    d.checkNestedProperty(a.template, "devicesAttached") && a.template.devicesAttached > 0 && (a.disableDeviceSpecificVarNameChange = "true"),
    a.onToggle = function(b, c, d) {
        "false" !== b && "" !== b || (i.resetFields(_.omit(c, _.union([d], ["vipObjectType", "vipType"]))),
        c.hasOwnProperty("port-forward") && a.portForwardTable.data.reset())
    }
    ,
    a.switchSameCredentials = function() {
        a.template.setSameCredentials(a.papAndChap.sameCredentials)
    }
    ,
    a.$watch("template.templateDefinition.ppp['auth-choice'].vipValue", function(b, c) {
        angular.equals(b, c) || (a.template.templateDefinition.ppp.authentication[0]["sent-username"].vipValue = "",
        a.template.templateDefinition.ppp.authentication[0].password.vipValue = "",
        a.template.templateDefinition.ppp.authentication[1].hostname.vipValue = "",
        a.template.templateDefinition.ppp.authentication[1].password.vipValue = "",
        a.template.templateDefinition.ppp.password.vipValue = "",
        a.template.templateDefinition.ppp["username-hostname"].vipValue = "",
        "papandchap" === b && (a.papAndChap.sameCredentials = !0,
        a.template.setSameCredentials(a.papAndChap.sameCredentials)))
    }),
    a.portForwardTable = a.template.createPortForwardTable(),
    a.portForwardFormInfo = new g(a.portForwardTable),
    a.portForwardTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN-Interface/updateVPNInterfacePortForwardTable.html", "UpdateFeatureTemplateTableController", a.portForwardFormInfo, "portForwardFormInfo")),
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template, ["encapsulation", "access-list", "policer", "nat", "authentication"]).then(function() {
        a.portForwardFormInfo.copyFormFields(a.template.templateDefinition.nat["port-forward"]),
        a.template.setPortForwardTable(a.portForwardTable),
        a.template.templateDefinition["nat-port-forward"] = a.portForwardTable.data,
        h(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        e.error(msg.message + ": " + msg.details)
    })
}
function VedgeVPNInterfacePppoeEnabledController(a, b, c, d, e, f) {
    a.disableDeviceSpecificVarNameChange = "false",
    a.viewScope = a,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "ACL/QoS",
        sectionId: "section-acl-qos"
    }, {
        title: "Advanced",
        sectionId: "section-advanced"
    }];
    var g = new b;
    g.extendTemplate(a.template),
    a.template = g,
    a.ipv6Config = "static",
    g.setIpv6ConfigType("static"),
    d.checkNestedProperty(a.template, "devicesAttached") && a.template.devicesAttached > 0 && (a.disableDeviceSpecificVarNameChange = "true"),
    d.checkNestedProperty(a.template.templateDefinition, "ip", "address") ? (a.ipConfig = "static",
    g.setIpConfigType("static")) : (a.ipConfig = "dynamic",
    g.setIpConfigType("dynamic")),
    d.checkNestedProperty(a.template.templateDefinition, "ipv6", "address") ? (a.ipv6Config = "static",
    g.setIpv6ConfigType("static")) : (d.checkNestedProperty(a.template.templateDefinition, "ipv6", "dhcp-client") || d.checkNestedProperty(a.template.templateDefinition, "ipv6", "dhcp-distance") || d.checkNestedProperty(a.template.templateDefinition, "ipv6", "dhcp-rapid-commit")) && (a.ipv6Config = "dynamic",
    g.setIpv6ConfigType("dynamic")),
    a.onToggle = function(a, b, c) {
        "false" === a && g.resetFields(_.omit(b, c))
    }
    ,
    a.changeIpConfig = function(b, c) {
        a.template.templateDefinition[b].address.vipValue = "",
        "static" === c ? g.resetFields(a.template.templateDefinition[b].address) : "dynamic" === c && (g.resetFields(a.template.templateDefinition[b]["dhcp-client"]),
        g.resetFields(a.template.templateDefinition[b]["dhcp-distance"])),
        "ip" === b ? g.setIpConfigType(c) : g.setIpv6ConfigType(c)
    }
    ,
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template, ["access-list", "policer"]).then(function() {
        return f(function() {
            $(".template-view-port").scrollTop(0)
        }),
        !0
    }, function(a) {
        e.error(msg.message + ": " + msg.details)
    })
}
function VedgeVPNInterfaceVapController(a, b, c, d, e, f) {
    a.disableDeviceSpecificVarNameChange = "false",
    a.viewScope = a;
    var g = new b;
    g.extendTemplate(a.template),
    a.template = g,
    d.checkNestedProperty(a.template, "devicesAttached") && a.template.devicesAttached > 0 && (a.disableDeviceSpecificVarNameChange = "true"),
    c.callTemplateDefinition(a.template).then(function() {
        return f(function() {
            $(".template-view-port").scrollTop(0)
        }),
        !0
    }, function(a) {
        e.error(msg.message + ": " + msg.details)
    })
}
function VmanageVPNInterfaceController(a, b, c, d, e, f, g) {
    a.viewScope = a,
    a.disableDeviceSpecificVarNameChange = "false",
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "Tunnel",
        sectionId: "section-tunnel"
    }, {
        title: "ARP",
        sectionId: "section-arp"
    }, {
        title: "Advanced",
        sectionId: "section-advanced"
    }];
    var h = new b;
    h.extendTemplate(a.template),
    a.template = h,
    e.checkNestedProperty(a.template, "devicesAttached") && a.template.devicesAttached > 0 && (a.disableDeviceSpecificVarNameChange = "true"),
    e.checkNestedProperty(a.template.templateDefinition, "ip", "address") ? (a.ipConfig = "static",
    h.setIpConfigType("static")) : (a.ipConfig = "dynamic",
    h.setIpConfigType("dynamic")),
    e.checkNestedProperty(a.template.templateDefinition, "ipv6", "address") ? (a.ipv6Config = "static",
    h.setIpv6ConfigType("static")) : (a.ipv6Config = "dynamic",
    h.setIpv6ConfigType("dynamic")),
    a.changeIpConfig = function(b, c) {
        a.template.templateDefinition[b].address.vipValue = "",
        "static" === c ? h.resetFields(a.template.templateDefinition[b].address) : "dynamic" === c && h.resetFields(a.template.templateDefinition[b]["dhcp-distance"]),
        "ip" === b ? h.setIpConfigType(c) : h.setIpv6ConfigType(c)
    }
    ,
    a.onToggle = function(a, b, c) {
        "false" !== a && "" !== a || h.resetFields(_.omit(b, _.union([c], ["vipObjectType", "vipType"])))
    }
    ,
    a.arpTable = a.template.createArpTable(),
    a.arpFormInfo = new f(a.arpTable),
    a.arpTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN-Interface/updateVPNInterfaceArpTable.html", "UpdateFeatureTemplateTableController", a.arpFormInfo, "arpFormInfo")),
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template).then(function() {
        a.template.setArpTable(a.arpTable),
        a.arpFormInfo.copyFormFields(a.template.templateDefinition.arp.ip),
        a.template.templateDefinition.arp.ip = a.arpTable.data,
        g(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        d.error(msg.message + ": " + msg.details)
    })
}
function VsmartOmpTemplateCtrl(a, b, c, d, e) {
    var f = new b;
    f.extendTemplate(a.template),
    a.viewScope = a,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "Timers",
        sectionId: "section-timers"
    }],
    f.templateDefinition || (f.templateDefinition = {
        "graceful-restart": {},
        "send-path-limit": {},
        "send-backup-paths": {},
        "discard-rejected": {},
        shutdown: {},
        timers: {
            "advertisement-interval": {},
            "graceful-restart-timer": {},
            holdtime: {},
            "eor-timer": {}
        }
    }),
    a.template = f,
    c.callTemplateDefinition(a.template).then(function() {
        return e(function() {
            $(".template-view-port").scrollTop(0)
        }),
        !0
    }, function(a) {
        d.error(a.error.message + ": " + a.error.details)
    })
}
function VsmartSecurityTemplateCtrl(a, b, c, d, e) {
    var f = new b;
    f.extendTemplate(a.template),
    a.viewScope = a,
    a.template = f,
    c.callTemplateDefinition(a.template).then(function() {
        return e(function() {
            $(".template-view-port").scrollTop(0)
        }),
        !0
    }, function(a) {
        d.error(a.error.message + ": " + a.error.details)
    })
}
function VsmartSystemTemplateCtrl(a, b, c, d, e, f) {
    var g = new c;
    g.extendTemplate(a.template),
    a.viewScope = a,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "GPS",
        sectionId: "section-gps"
    }, {
        title: "Advanced",
        sectionId: "section-advanced"
    }],
    g.templateDefinition || (g.templateDefinition = {
        clock: {
            timezone: {}
        },
        "gps-location": {
            latitude: {},
            longitude: {}
        },
        timer: {
            "dns-cache-timeout": {}
        },
        location: {},
        "system-tunnel-mtu": {},
        "track-transport": {},
        "port-offset": {},
        "port-hop": {},
        "control-session-pps": {},
        "controller-group-id": {},
        description: {},
        "device-groups": {},
        "site-id": {},
        "overlay-id": {},
        "system-ip": {},
        "host-name": {},
        "track-default-gateway": {},
        "host-policer-pps": {},
        "icmp-error-pps": {},
        "iptables-enable": {},
        "admin-tech-on-failure": {},
        "idle-timeout": {}
    }),
    a.template = g,
    a.deviceType = b.params.deviceType,
    d.callTemplateDefinition(a.template).then(function() {
        return f(function() {
            $(".template-view-port").scrollTop(0)
        }),
        !0
    }, function(a) {
        e.error(a.error.message + ": " + a.error.details)
    })
}
function VSmartVpnTemplateCtrl(a, b, c, d, e, f, g, h, i, j) {
    function k(b) {
        return {
            editRow: function(c, d, e, f) {
                var g = "app/configuration/template/feature/modal/views/VPN/updateVPNIpv4RouteTable.html"
                  , h = "updateVPNIpv4RouteTableController";
                "ip" !== c && (g = "app/configuration/template/feature/modal/views/VPN/updateVPNIpv6RouteTable.html",
                h = "updateVPNIpv6RouteTableController"),
                j.show({
                    templateUrl: g,
                    controller: h,
                    targetEvent: d,
                    escapeToClose: !1,
                    resolve: {
                        selectedRow: function() {
                            return e.entity
                        },
                        formObject: function() {
                            return a[b]
                        },
                        routeRowIndex: function() {
                            return f
                        },
                        routeType: function() {
                            return c
                        }
                    }
                }).then(function() {})
            }
        }
    }
    a.viewScope = a,
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "DNS",
        sectionId: "section-dns"
    }, {
        title: "IPv4 Route",
        sectionId: "section-ipv4-route"
    }, {
        title: "IPv6 Route",
        sectionId: "section-ipv6-route"
    }];
    var l = new b;
    l.extendTemplate(a.template),
    a.template = l;
    a.dnsHostTable = a.template.createDnsHostTable(),
    a.ipRouteTable = a.template.createRouteTable("ip"),
    a.ipv6RouteTable = a.template.createRouteTable("ipv6"),
    a.dnsHostFormInfo = new h(a.dnsHostTable),
    a.dnsHostTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN/updateVPNDnsTable.html", "UpdateFeatureTemplateTableController", a.dnsHostFormInfo, "dnsHostFormInfo")),
    a.ipv4FormInfo = new h(a.ipRouteTable),
    a.ipv6FormInfo = new h(a.ipv6RouteTable),
    a.ipRouteTable.setAppScope(k("ipv4FormInfo")),
    a.ipv6RouteTable.setAppScope(k("ipv6FormInfo")),
    a.openModal = function(b, c, d, e) {
        var f = {
            selectedRow: function() {
                return a[b].localFormFields
            },
            operation: function() {
                return "add"
            },
            ipFormInfo: function() {
                return null
            },
            routeRowIndex: function() {
                return null
            },
            routeType: function() {
                return "ipv4FormInfo" === b ? "ip" : "ipv6"
            },
            formObject: function() {
                return {}
            }
        };
        a[b].openModal(c, d, e, f)
    }
    ,
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template, "dns").then(function() {
        a.template.setDnsHostTable(a.dnsHostTable),
        a.dnsHostFormInfo.copyFormFields(a.template.templateDefinition.host),
        a.template.templateDefinition.host = a.dnsHostTable.data,
        a.template.setRouteTable(a.ipRouteTable, "ip"),
        a.ipv4FormInfo.copyFormFields(a.template.templateDefinition.ip.route),
        a.template.templateDefinition.ip.route = a.ipRouteTable.data,
        a.template.setRouteTable(a.ipv6RouteTable, "ipv6"),
        a.ipv6FormInfo.copyFormFields(a.template.templateDefinition.ipv6.route),
        a.template.templateDefinition.ipv6.route = a.ipv6RouteTable.data,
        i(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        e.error(msg.message + ": " + msg.details)
    })
}
function VsmartVPNInterfaceController(a, b, c, d, e, f, g) {
    a.viewScope = a,
    a.disableDeviceSpecificVarNameChange = "false",
    a.navSections = [{
        title: "Basic Configuration",
        sectionId: "section-basic"
    }, {
        title: "Tunnel",
        sectionId: "section-tunnel"
    }, {
        title: "ARP",
        sectionId: "section-arp"
    }, {
        title: "Advanced",
        sectionId: "section-advanced"
    }];
    var h = new b;
    h.extendTemplate(a.template),
    a.template = h,
    e.checkNestedProperty(a.template, "devicesAttached") && a.template.devicesAttached > 0 && (a.disableDeviceSpecificVarNameChange = "true"),
    e.checkNestedProperty(a.template.templateDefinition, "ip", "address") ? (a.ipConfig = "static",
    h.setIpConfigType("static")) : (a.ipConfig = "dynamic",
    h.setIpConfigType("dynamic")),
    e.checkNestedProperty(a.template.templateDefinition, "ipv6", "address") ? (a.ipv6Config = "static",
    h.setIpv6ConfigType("static")) : (a.ipv6Config = "dynamic",
    h.setIpv6ConfigType("dynamic")),
    a.changeIpConfig = function(b, c) {
        a.template.templateDefinition[b].address.vipValue = "",
        "static" === c ? h.resetFields(a.template.templateDefinition[b].address) : "dynamic" === c && h.resetFields(a.template.templateDefinition[b]["dhcp-distance"]),
        "ip" === b ? h.setIpConfigType(c) : h.setIpv6ConfigType(c)
    }
    ,
    a.onToggle = function(a, b, c) {
        "false" !== a && "" !== a || h.resetFields(_.omit(b, _.union([c], ["vipObjectType", "vipType"])))
    }
    ,
    a.arpTable = a.template.createArpTable(),
    a.arpFormInfo = new f(a.arpTable),
    a.arpTable.setAppScope(a.template.getAppScope("app/configuration/template/feature/modal/views/VPN-Interface/updateVPNInterfaceArpTable.html", "UpdateFeatureTemplateTableController", a.arpFormInfo, "arpFormInfo")),
    a.cancel = function(b) {
        a[b].cancel()
    }
    ,
    a.addRow = function(b) {
        a[b].addRow()
    }
    ,
    c.callTemplateDefinition(a.template).then(function() {
        a.template.setArpTable(a.arpTable),
        a.arpFormInfo.copyFormFields(a.template.templateDefinition.arp.ip),
        a.template.templateDefinition.arp.ip = a.arpTable.data,
        g(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        d.error(msg.message + ": " + msg.details)
    })
}
function WLANController(a, b, c, d, e, f, g, h) {
    a.disableDeviceSpecificVarNameChange = "false",
    a.viewScope = a;
    var i = new c;
    i.extendTemplate(a.template),
    a.template = i,
    g.checkNestedProperty(a.template, "devicesAttached") && a.template.devicesAttached > 0 && (a.disableDeviceSpecificVarNameChange = "true"),
    a.updateDefault = function() {
        "2.4GHz" === a.template.templateDefinition.radio.vipValue ? (a.template.templateDefinition["channel-bandwidth"].dataType.default = "20",
        a.template.templateDefinition["guard-interval"].dataType.default = "800",
        a.template.templateDefinition["channel-bandwidth"].dataType.values = [a.channel_bw_values[0], a.channel_bw_values[1], a.channel_bw_values[2]]) : (a.template.templateDefinition["channel-bandwidth"].dataType.default = "80",
        a.template.templateDefinition["guard-interval"].dataType.default = "400",
        a.template.templateDefinition["channel-bandwidth"].dataType.values = a.channel_bw_values),
        angular.isDefined(a.template.templateDefinition.country.vipValue) && "_blank" !== a.template.templateDefinition.country.vipValue && i.setChannelValues(a.template.templateDefinition.radio.vipValue, a.template.templateDefinition.country.vipValue),
        d(function() {
            angular.element("#channel-bandwidth_dropdown_default").triggerHandler("click"),
            angular.element("#guard-interval_dropdown_default").triggerHandler("click"),
            angular.element("#channel_dropdown_default").triggerHandler("click")
        })
    }
    ;
    var j = !1;
    a.$watch("template.templateDefinition.country.vipValue", function(b) {
        "_blank" !== b && angular.isDefined(a.template.templateDefinition.country.vipValue) && "constant" === a.template.templateDefinition.country.vipType && angular.isDefined(a.template.templateDefinition.country.dataType) && (i.setChannelValues(a.template.templateDefinition.radio.vipValue, b),
        j = !0,
        d(function() {
            angular.element("#channel_dropdown_default").triggerHandler("click")
        }))
    }),
    f.callTemplateDefinition(a.template).then(function() {
        a.template.templateDefinition.radio.vipType = "constant",
        a.template.templateDefinition.country.dataType.values = e("orderBy")(a.template.templateDefinition.country.dataType.values, "value"),
        a.template.templateDefinition.radio.vipValue = angular.isDefined(a.template.templateDefinition.radio.vipValue) ? a.template.templateDefinition.radio.vipValue : "2.4GHz",
        a.channel_bw_values = a.template.templateDefinition["channel-bandwidth"].dataType.values,
        a.template.templateDefinition["channel-bandwidth"].dataType.values = [a.channel_bw_values[0], a.channel_bw_values[1]],
        j || i.setChannelValues(a.template.templateDefinition.radio.vipValue, "United States"),
        d(function() {
            $(".template-view-port").scrollTop(0)
        })
    }, function(a) {
        h.error(msg.message + ": " + msg.details)
    })
}
function vipOspfAreaInterfaceList(a, b, c, d, e, f) {
    return {
        restrict: "AE",
        templateUrl: "app/configuration/template/feature/directives/ospfAreaInterfaceList-partial.html",
        scope: {
            layoutClass: "@",
            areaRowObject: "="
        },
        link: function(a, b, c) {
            function g(a, b, c, g, h, i) {
                function j(a) {
                    a.defaultOption = a.vipType,
                    angular.isDefined(a.vipType) && "variableName" != a.vipType && "variable" != a.vipType && (a.dataType.default = a.vipValue)
                }
                var k = {
                    areaObjectIndex: c,
                    interfaceIndex: g
                }
                  , l = e.show({
                    templateUrl: "app/common/modalPartials/ospfAreaInterfaceModal.html",
                    controller: "OspfAreaInterfaceModalInstanceCtrl",
                    targetEvent: i,
                    resolve: {
                        interfaceDefinition: function() {
                            return b
                        },
                        areaObject: function() {
                            return a
                        },
                        areaAndInterfaceIndexObj: function() {
                            return k
                        }
                    }
                });
                l.then(function() {
                    h && (angular.forEach(b, function(a) {
                        angular.isDefined(a) && angular.isDefined(a.vipValue) ? (a.defaultOption = a.vipType,
                        j(a)) : (f.checkNestedProperty(a, "authentication-key", "vipValue") && j(a["authentication-key"]),
                        f.checkNestedProperty(a, "message-digest", "md5", "vipValue") && j(a["message-digest"].md5),
                        f.checkNestedProperty(a, "message-digest", "message-digest-key", "vipValue") && j(a["message-digest"]["message-digest-key"]),
                        f.checkNestedProperty(a, "type", "vipValue") && j(a.type))
                    }),
                    a.interfaceList.push(b)),
                    d.info("Modal closed")
                }, function() {
                    d.info("Modal dismissed at: " + new Date)
                })
            }
            a.addInterface = function(b, c, d) {
                var e = angular.copy(a.areaRowObject.entity.interface);
                g(a.areaRowObject.entity, e.children, b, c, !0, d)
            }
            ,
            a.editInterface = function(b, c, d) {
                g(a.areaRowObject.entity, a.areaRowObject.entity.interfaceList[c], b, c, !1, d)
            }
            ,
            a.removeInterface = function(b) {
                a.areaRowObject.entity.interfaceList.splice(b, 1)
            }
        }
    }
}
function vipSnmpCreateList(a, b, c, d, e) {
    return {
        restrict: "AE",
        template: '<ng-include src="getTemplateUrl()">',
        scope: {
            layoutClass: "@",
            viewType: "@",
            viewObject: "="
        },
        link: function(a, b, c) {
            a.parentRowIndex = 0,
            a.parentRowIndex = _.findIndex(a.viewObject.grid.rows, function(b) {
                return angular.equals(b.uid, a.viewObject.uid)
            }),
            a.getTemplateUrl = function() {
                return angular.equals(a.viewType, "viewOids") ? "app/configuration/template/feature/directives/snmpViewOidList-partial.html" : angular.equals(a.viewType, "viewTrapGroups") ? "app/configuration/template/feature/directives/snmpTrapGroupList-partial.html" : void 0
            }
            ,
            a.addObject = function(b, c) {
                var d = angular.copy(a.viewObject.entity[c]);
                a.viewObject.entity[b].push(d)
            }
            ,
            a.removeObject = function(b, c) {
                a.viewObject.entity[b].splice(c, 1)
            }
        }
    }
}
function MoreBgpNeighborInfoModalInstanceCtrl(a, b, c, d) {
    if (b.isUndefinedOrEmpty(d.entity["update-source-selection"]))
        var e = "ifaddress";
    else
        var e = d.entity["update-source-selection"];
    a.neighborRowIndex = d.index,
    a.neighborRowEntity = b.setTemplateFieldValues(_.omit(angular.copy(d.entity), ["update-source-selection", "viewMode"])),
    a.neighborRowEntity.viewMode = d.entity.viewMode,
    a.neighborRowEntity["update-source-selection"] = e,
    a.updateSelectedRow = function(a) {
        angular.extend(d.entity, a),
        c.hide(d)
    }
    ,
    a.cancel = function() {
        c.cancel("cancel")
    }
}
function OSPFAreaInterfaceModalInstanceCtrl(a, b, c, d, e, f, g, h, i) {
    var j;
    j = d.checkNestedProperty(c, "children") ? "children" : "entity",
    a.areaInterface = {
        definition: c[j].interface.children,
        list: c[j].interfaceList,
        currSelect: void 0,
        selectIndex: void 0
    },
    a.isAddDisabled = !1,
    a.operation = e,
    a.errorSection = {
        show: !1,
        error: {
            message: "Incorrect or missing value",
            details: "Enter valid values in the field"
        }
    },
    a.isCollapsed = !0,
    a.toggleCollapse = function() {
        a.isCollapsed = !a.isCollapsed
    }
    ;
    var k = angular.copy(c[j].interfaceList);
    a.areaInterface.list.length > 0 && (a.areaInterface.currSelect = a.areaInterface.list[0],
    a.areaInterface.selectIndex = 0),
    a.addInterface = function() {
        !a.isAddDisabled && a.ospfInterfaceInfo.$valid ? (a.isCollapsed = !0,
        a.errorSection.show = !1,
        a.ospfInterfaceInfo.$submitted = !1,
        a.isAddDisabled = !0,
        a.areaInterface.list.push(angular.copy(a.areaInterface.definition)),
        a.areaInterface.currSelect = a.areaInterface.list[a.areaInterface.list.length - 1],
        a.areaInterface.selectIndex = a.areaInterface.list.length - 1,
        i(function() {
            a.isAddDisabled = !1
        })) : this.ospfInterfaceInfo.$valid || (a.errorSection.show = !0)
    }
    ,
    a.selectInterface = function(b) {
        a.areaInterface.selectIndex != b && (a.ospfInterfaceInfo.$valid ? (a.errorSection.show = !1,
        a.ospfInterfaceInfo.$submitted = !1,
        a.areaInterface.currSelect = a.areaInterface.list[b],
        a.areaInterface.selectIndex = b) : a.errorSection.show = !0)
    }
    ,
    a.removeInterface = function(b) {
        if (a.areaInterface.list.splice(b, 1),
        a.areaInterface.list.length > 0) {
            if (0 == b)
                return a.areaInterface.currSelect = a.areaInterface.list[b],
                a.areaInterface.selectIndex = b,
                !0;
            a.areaInterface.currSelect = a.areaInterface.list[b - 1],
            a.areaInterface.selectIndex = b - 1
        }
    }
    ,
    a.updateInterfaceInfo = function(c) {
        if (this.ospfInterfaceInfo.$valid)
            if ("edit" === e) {
                b.show({
                    templateUrl: "app/configuration/template/feature/modal/views/OSPF/updateOSPFAreaTable.html",
                    controller: "updateOspfAreaTableController",
                    targetEvent: event,
                    escapeToClose: !1,
                    resolve: {
                        selectedRow: function() {
                            return f.localFormFields
                        },
                        formObject: function() {
                            return h
                        },
                        areaRowIndex: function() {
                            return g
                        }
                    }
                })
            } else
                b.hide();
        else
            a.errorSection.show = !0
    }
    ,
    a.close = function() {
        b.cancel("cancel")
    }
    ,
    a.cancel = function() {
        if (angular.isDefined(c.entity) ? c.entity.interfaceList = k : c.children.interfaceList = k,
        "edit" === e) {
            b.show({
                templateUrl: "app/configuration/template/feature/modal/views/OSPF/updateOSPFAreaTable.html",
                controller: "updateOspfAreaTableController",
                targetEvent: event,
                escapeToClose: !1,
                resolve: {
                    selectedRow: function() {
                        return f.localFormFields
                    },
                    formObject: function() {
                        return h
                    },
                    areaRowIndex: function() {
                        return g
                    }
                }
            })
        } else
            b.cancel()
    }
}
function OSPFAreaRangeModalInstanceCtrl(a, b, c, d, e, f, g, h, i, j) {
    a.stateString = d.getStateString(c),
    a.errorSection = {
        show: !1,
        errorMessage: {
            error: {
                message: void 0,
                details: void 0
            }
        }
    },
    a.operation = g;
    var k;
    k = d.checkNestedProperty(f, "children") ? "children" : "entity",
    a.selectedRow = f[k];
    var l = angular.copy(a.selectedRow.rangeList);
    a.ospfAreaRangeFormInfo = {
        ospfAreaRangeFormFieldDefinition: {},
        localOSPFAreaRangeFormFields: {},
        copyOIDFormFields: function(a) {
            var b = this;
            b.ospfAreaRangeFormFieldDefinition = angular.copy(a),
            b.localOSPFAreaRangeFormFields = angular.copy(a)
        },
        addRow: function() {
            var b = this;
            a.selectedRow.rangeList.push(b.localOSPFAreaRangeFormFields.children),
            b.localOSPFAreaRangeFormFields = angular.copy(b.ospfAreaRangeFormFieldDefinition)
        },
        localFormFields: _.isNull(h) ? null : h.localFormFields,
        removeRow: function(b) {
            a.errorSection.show = !1,
            a.errorSection.errorMessage.error.message = "",
            a.selectedRow.rangeList.splice(b, 1)
        }
    },
    angular.isDefined(a.selectedRow.range) && a.ospfAreaRangeFormInfo.copyOIDFormFields(a.selectedRow.range),
    a.save = function() {
        if (a.errorSection.show = !1,
        a.errorSection.errorMessage.error.message = "",
        a.oidForm.$setSubmitted(),
        !a.oidForm.$valid)
            return a.errorSection.show = !0,
            a.errorSection.errorMessage.error.message = "Incorrect or missing value",
            a.errorSection.errorMessage.error.details = "Enter valid values in the field",
            !1;
        if ("edit" === g) {
            b.show({
                templateUrl: "app/configuration/template/feature/modal/views/OSPF/updateOSPFAreaTable.html",
                controller: "updateOspfAreaTableController",
                targetEvent: event,
                escapeToClose: !1,
                resolve: {
                    selectedRow: function() {
                        return h.localFormFields
                    },
                    formObject: function() {
                        return j
                    },
                    areaRowIndex: function() {
                        return i
                    }
                }
            })
        } else
            b.hide()
    }
    ,
    a.close = function() {
        b.cancel("cancel")
    }
    ,
    a.cancel = function() {
        if (a.selectedRow.rangeList = l,
        "edit" === g) {
            b.show({
                templateUrl: "app/configuration/template/feature/modal/views/OSPF/updateOSPFAreaTable.html",
                controller: "updateOspfAreaTableController",
                targetEvent: event,
                escapeToClose: !1,
                resolve: {
                    selectedRow: function() {
                        return a.selectedRow
                    },
                    formObject: function() {
                        return j
                    },
                    areaRowIndex: function() {
                        return i
                    }
                }
            })
        } else
            b.cancel()
    }
}
function SNMPTrapTypeModalInstanceCtrl(a, b, c, d, e, f, g, h, i) {
    a.stateString = d.getStateString(c),
    a.errorSection = {
        show: !1,
        errorMessage: {
            error: {
                message: void 0,
                details: void 0
            }
        }
    };
    var j;
    j = d.checkNestedProperty(f, "entity") ? "entity" : "children",
    a.selectedRow = f[j],
    a.operation = g;
    var k = angular.copy(a.selectedRow.moduleList);
    a.trapTypeModulesFormInfo = {
        trapTypeModulesFormFieldDefinition: {},
        localTrapTypeModulesFormFields: {},
        copyOIDFormFields: function(a) {
            var b = this;
            b.trapTypeModulesFormFieldDefinition = angular.copy(a),
            b.localTrapTypeModulesFormFields = angular.copy(a)
        },
        addRow: function() {
            var b = this;
            a.selectedRow.moduleList.push(b.localTrapTypeModulesFormFields.children),
            b.localTrapTypeModulesFormFields = angular.copy(b.trapTypeModulesFormFieldDefinition)
        },
        removeRow: function(b) {
            a.errorSection.show = !1,
            a.errorSection.errorMessage.error.message = "",
            a.selectedRow.moduleList.splice(b, 1)
        }
    },
    a.trapTypeModulesFormInfo.copyOIDFormFields({
        children: a.selectedRow["module-definition"]
    }),
    a.save = function() {
        if (a.errorSection.show = !1,
        a.errorSection.errorMessage.error.message = "",
        a.trapTypeModuleForm.$setSubmitted(),
        !a.trapTypeModulesForm.$valid)
            return a.errorSection.show = !0,
            a.errorSection.errorMessage.error.message = "Incorrect or missing value",
            a.errorSection.errorMessage.error.details = "Enter valid values in the field",
            !1;
        if ("edit" === g) {
            b.show({
                templateUrl: "app/configuration/template/feature/modal/views/SNMP/updateSNMPTrapGroupTable.html",
                controller: "updateSNMPTrapGroupTableController",
                targetEvent: event,
                escapeToClose: !1,
                resolve: {
                    selectedRow: function() {
                        return a.selectedRow
                    },
                    formObject: function() {
                        return i
                    },
                    trapGroupRowIndex: function() {
                        return h
                    }
                }
            })
        } else
            b.hide()
    }
    ,
    a.close = function() {
        b.cancel("cancel")
    }
    ,
    a.cancel = function() {
        if (a.selectedRow.moduleList = k,
        "edit" === g) {
            b.show({
                templateUrl: "app/configuration/template/feature/modal/views/SNMP/updateSNMPTrapGroupTable.html",
                controller: "updateSNMPTrapGroupTableController",
                targetEvent: event,
                escapeToClose: !1,
                resolve: {
                    selectedRow: function() {
                        return a.selectedRow
                    },
                    formObject: function() {
                        return i
                    },
                    trapGroupRowIndex: function() {
                        return h
                    }
                }
            })
        } else
            b.cancel("cancel")
    }
}
function SNMPViewOIDModalInstanceCtrl(a, b, c, d, e, f, g, h, i) {
    a.stateString = d.getStateString(c),
    a.errorSection = {
        show: !1,
        errorMessage: {
            error: {
                message: void 0,
                details: void 0
            }
        }
    };
    var j;
    j = d.checkNestedProperty(f, "entity") ? "entity" : "children",
    a.selectedRow = f[j],
    a.operation = g;
    var k = angular.copy(a.selectedRow.oidList);
    a.viewOIDFormInfo = {
        viewOIDFormFieldDefinition: {},
        localViewOIDFormFields: {},
        copyOIDFormFields: function(a) {
            var b = this;
            b.viewOIDFormFieldDefinition = angular.copy(a),
            b.localViewOIDFormFields = angular.copy(a)
        },
        addRow: function() {
            var b = this;
            a.selectedRow.oidList.push(b.localViewOIDFormFields.children),
            b.localViewOIDFormFields = angular.copy(b.viewOIDFormFieldDefinition)
        },
        removeRow: function(b) {
            a.errorSection.show = !1,
            a.errorSection.errorMessage.error.message = "",
            a.selectedRow.oidList.splice(b, 1)
        }
    },
    a.viewOIDFormInfo.copyOIDFormFields({
        children: a.selectedRow["oid-definition"]
    }),
    a.save = function() {
        if (a.errorSection.show = !1,
        a.errorSection.errorMessage.error.message = "",
        a.oidForm.$setSubmitted(),
        !a.oidForm.$valid)
            return a.errorSection.show = !0,
            a.errorSection.errorMessage.error.message = "Incorrect or missing value",
            a.errorSection.errorMessage.error.details = "Enter valid values in the field",
            !1;
        if ("edit" === g) {
            b.show({
                templateUrl: "app/configuration/template/feature/modal/views/SNMP/updateSNMPViewTable.html",
                controller: "updateSNMPViewTableController",
                targetEvent: event,
                escapeToClose: !1,
                resolve: {
                    selectedRow: function() {
                        return a.selectedRow
                    },
                    formObject: function() {
                        return i
                    },
                    viewRowIndex: function() {
                        return h
                    }
                }
            })
        } else
            b.hide()
    }
    ,
    a.close = function() {
        b.cancel("cancel")
    }
    ,
    a.cancel = function() {
        if (a.selectedRow.oidList = k,
        "edit" === g) {
            b.show({
                templateUrl: "app/configuration/template/feature/modal/views/SNMP/updateSNMPViewTable.html",
                controller: "updateSNMPViewTableController",
                targetEvent: event,
                escapeToClose: !1,
                resolve: {
                    selectedRow: function() {
                        return a.selectedRow
                    },
                    formObject: function() {
                        return i
                    },
                    viewRowIndex: function() {
                        return h
                    }
                }
            })
        } else
            b.cancel("cancel")
    }
}
function FeatureTemplateService(a, b, c, d, e, f, g, h, i) {
    var j = function(a, b, c, d) {
        if (a && a[b]) {
            if (d.vipType = a[b].vipType,
            d.vipValue = angular.equals(a[b].vipType, i.TEMPLATE_DEF_TYPE_IGNORE) && angular.isDefined(c.dataType) && angular.isDefined(c.dataType.default) ? c.dataType.default : a[b].vipValue,
            angular.equals(a[b].vipType, i.TEMPLATE_DEF_TYPE_VARIABLE_NAME) && (d.vipType = i.TEMPLATE_DEF_TYPE_VARIABLE,
            d.vipVariableName = a[b].vipVariableName || ""),
            angular.equals(c.objectType, "tree"))
                return d;
            angular.equals(c.objectType, "list") && a[b] && (d.dataType.type = c.dataType.type + "List",
            a[b].vipValue && (d.vipValue = a[b].vipValue.join(","))),
            angular.equals(c.dataType.type, "enum") && !angular.equals(c.key, "priority") && (d.dataType.values = h("orderBy")(d.dataType.values, "value"))
        }
        return d
    }
      , k = function(a, b, c) {
        return b.children = {},
        angular.forEach(a.children, function(a) {
            var d = new f(a);
            g.isUndefinedOrEmpty(a.dataPath) ? (angular.equals(a.objectType, "tree") && (d = k(a, d)),
            d.deviceModels && d.setValidForDeviceModel(c),
            b.children[a.key] = d) : (l(b.children, angular.copy(a.dataPath)),
            m(b.children, a, d))
        }),
        b
    }
      , l = function(a, b) {
        var c = b[0];
        angular.isUndefined(a[c]) && (a[c] = {}),
        b.length > 1 && (b.splice(0, 1),
        l(a[c], b))
    }
      , m = function(a, b, c, d) {
        var e = b.dataPath[0];
        1 === b.dataPath.length ? (c = j(a[e], b.key, b, c),
        angular.equals(b.objectType, "tree") && (c = k(b, c)),
        c.deviceModels && c.setValidForDeviceModel(d),
        a[e] || (a[e] = {}),
        a[e][b.key] = c) : (b.dataPath.splice(0, 1),
        m(a[e], b, c))
    };
    return {
        getGeneralTemplateDefinition: function(a, b) {
            return c.get(d.GENERAL_TEMPLATE_DEFINITION + a + "/" + b)
        },
        getGeneralTemplate: function(a) {
            return c.get(d.GENERAL_TEMPLATE_OBJECT + a)
        },
        listGeneralTemplates: function() {
            return c.get(d.GENERAL_TEMPLATE)
        },
        createGeneralTemplate: function(a, b) {
            return c.post(d.GENERAL_TEMPLATE, a, b)
        },
        updateGeneralTemplate: function(a, b, e) {
            return c.put(d.GENERAL_TEMPLATE + a, b, e)
        },
        copyGeneralTemplate: function(a, b) {
            return c.post(d.GENERAL_TEMPLATE_COPY, a, b)
        },
        deleteGeneralTemplate: function(a) {
            return c.delete(d.GENERAL_TEMPLATE + a)
        },
        listTemplateTypes: function() {
            return c.get(d.GENERAL_TEMPLATE_TYPES)
        },
        listDeviceModels: function() {
            return c.get(d.GENERAL_TEMPLATE_MODELS)
        },
        callTemplateDefinition: function(a, c) {
            var d = a.templateType.name || a.templateType
              , e = a.templateMinVersion
              , h = b.defer();
            return this.getGeneralTemplateDefinition(d, e).then(function(b) {
                var d;
                angular.forEach(b.fields, function(b) {
                    return (!angular.isDefined(c) || !(angular.equals(c, b.key) || angular.isArray(c) && c.indexOf(b.key) > -1)) && (d = new f(b),
                    void (g.isUndefinedOrEmpty(b.dataPath) ? (d = j(a.templateDefinition, b.key, b, d),
                    angular.equals(b.objectType, "tree") && (d = k(b, d, a.deviceType)),
                    d.deviceModels && d.setValidForDeviceModel(a.deviceType),
                    a.templateDefinition[b.key] = d) : m(a.templateDefinition, b, d, a.deviceType)))
                }),
                h.resolve()
            }, function(a) {
                h.reject(a)
            }),
            h.promise
        }
    }
}
function AaaTemplate(a, b, c, d, e, f, g, h, i, j) {
    function k(a, b, c, d, e) {
        return {
            feature: a,
            permissionStr: b,
            read: c,
            write: d,
            none: e
        }
    }
    function l(a, b, c) {
        var d = _.find(a, {
            feature: i("initialCap")(b)
        });
        d && (d.permissionStr = "",
        angular.forEach(c, function(a) {
            d[a.vipValue] = !0,
            d.none = !1,
            d.permissionStr += String(a.vipValue)
        }))
    }
    var m = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            aaa: {
                "auth-order": {},
                "auth-fallback": {},
                "admin-auth-order": {},
                logs: {
                    "audit-disable": {},
                    "netconf-disable": {}
                },
                "radius-servers": {},
                usergroup: [],
                user: []
            },
            tacacs: {
                timeout: {},
                authentication: {},
                server: []
            },
            radius: {
                timeout: {},
                retransmit: {},
                server: []
            }
        },
        this.userGroupName = void 0
    };
    m.prototype = new a;
    var n;
    return m.prototype.getUserGroupName = function() {
        return this.userGroupName
    }
    ,
    m.prototype.getEmptyPermissions = function() {
        var a = [];
        return a.push(k("System", "none", !1, !1, !1)),
        a.push(k("Interface", "none", !1, !1, !1)),
        a.push(k("Policy", "none", !1, !1, !1)),
        a.push(k("Routing", "none", !1, !1, !1)),
        a.push(k("Security", "none", !1, !1, !1)),
        a
    }
    ,
    m.prototype.createUserGroupsTable = function() {
        var a = new d({
            tableName: "user_groups",
            enableExpandable: !0,
            autoLoad: !0,
            dataUid: "$$hashKey",
            minRowsToShow: 5,
            rowHeight: 30,
            editable: !1
        });
        a.setToolbar({
            search: !0,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        });
        var b = this
          , c = {
            editGroupTasks: function(a) {
                a.grid.api.expandable.toggleRowExpansion(a.entity)
            },
            updateTaskPermissionSelection: function(a, b) {
                a.permissionStr = "",
                angular.equals(b, "none") ? (a.permissionStr = "none",
                a.read = !1,
                a.write = !1) : a.read || a.write ? (a.none = !1,
                a.read && (a.permissionStr += "read"),
                a.write && (a.read && (a.permissionStr += ", "),
                a.permissionStr += "write")) : (a.none = !0,
                a.permissionStr = "none")
            },
            removeUserGroup: function(a, c) {
                if (f.checkNestedProperty(a.entity, "name", "vipType") && "constant" === a.entity.name.vipType && f.checkNestedProperty(a.entity, "name", "vipValue") && !f.isUndefinedOrEmpty(a.entity.name.vipValue) && n.data.length > 1) {
                    angular.forEach(n.data, function(b) {
                        b.group && (b.group.vipValue = _.pull(b.group.vipValue, a.entity.name.vipValue))
                    });
                    var d = "User group '" + a.entity.name.vipValue + "' entry has been removed from users";
                    g.warning(d)
                }
                a.grid.options.data.splice(c, 1),
                b.updateUserGroupsList(a.grid.options.data, n)
            }
        };
        a.setAppScope(c),
        a.setExpandableRowOptions(!0, "app/configuration/template/feature/templates/expand-aaa-userGroupsTable.html");
        var e = [{
            dataType: "string",
            property: "feature",
            title: "Feature"
        }, {
            dataType: "string",
            property: "read",
            title: "Read",
            cellTemplate: '<div class="ui-grid-cell-contents"><span style="display: inline-block"  ng-if="row.entity.read === true || row.entity.read === \'true\'" id="{{row.entity[\'feature\']}}_read"><md-icon class="material-icons viptela_green md-18" title="Enabled">check_circle</md-icon></span><span style="display: inline-block;margin-left: 5px;" ng-if="row.entity.read === false || row.entity.read === \'false\'" id="{{row.entity[\'feature\'] | nospace}}_read">--</span></div>',
            editableCellTemplate: '<div class="ui-grid-cell-contents"><input ng-change="grid.appScope.checkFeatureEnabled(row.entity)" id="{{row.entity[\'feature\'] | nospace}}_read" type="checkbox" ng-input="row.entity.read" ng-model="row.entity.read"/><label id="{{row.entity[\'feature\'] | nospace}}_read_label" for="{{row.entity[\'feature\'] | nospace}}_read"></label></div>',
            editableCellTemplateForEdit: '<div class="ui-grid-cell-contents"><input ng-change="grid.appScope.checkFeatureEnabled(row.entity)"  id="{{row.entity[\'feature\'] | nospace}}_read" type="checkbox" ng-input="row.entity.read" ng-model="row.entity.read"/><label id="{{row.entity[\'feature\'] | nospace}}_read_label" for="{{row.entity[\'feature\'] | nospace}}_read"></label></div>'
        }, {
            dataType: "string",
            property: "write",
            title: "Write",
            cellTemplate: '<div class="ui-grid-cell-contents"><span style="display: inline-block"  ng-if="row.entity.write === true || row.entity.write === \'true\'" id="{{row.entity[\'feature\']}}_write"><md-icon class="material-icons viptela_green md-18" title="Enabled">check_circle</md-icon></span><span style="display: inline-block;margin-left: 5px;" ng-if="row.entity.write === false || row.entity.write === \'false\'" id="{{row.entity[\'feature\'] | nospace}}_write">--</span></div>',
            editableCellTemplate: '<div class="ui-grid-cell-contents"><input ng-change="grid.appScope.checkFeatureEnabled(row.entity)" id="{{row.entity[\'feature\'] | nospace}}_write" type="checkbox" ng-input="row.entity.write" ng-model="row.entity.write"/><label id="{{row.entity[\'feature\'] | nospace}}_write_label" for="{{row.entity[\'feature\'] | nospace}}_write"></label></div>',
            editableCellTemplateForEdit: '<div class="ui-grid-cell-contents"><input ng-change="grid.appScope.checkFeatureEnabled(row.entity)"  id="{{row.entity[\'feature\'] | nospace}}_write" type="checkbox" ng-input="row.entity.write" ng-model="row.entity.write"/><label id="{{row.entity[\'feature\'] | nospace}}_write_label" for="{{row.entity[\'feature\'] | nospace}}_write"></label></div>'
        }];
        return a.createColumns(e),
        a
    }
    ,
    m.prototype.setUserGroupsTable = function(a) {
        function c(a) {
            var b = ["netadmin", "basic", "operator"];
            !function(b) {
                angular.forEach(b, function(b) {
                    var c = {};
                    c.name = e.editObjectTemplateField(e.templateDefinition.aaa.usergroup.children.name, {
                        vipType: e.templateDefinition.aaa.usergroup.children.name.defaultOption,
                        vipValue: b
                    }),
                    c.taskPermission = [],
                    angular.equals(b, "netadmin") ? (c.taskPermission.push(k("System", "read, write", !0, !0, !1)),
                    c.taskPermission.push(k("Interface", "read, write", !0, !0, !1)),
                    c.taskPermission.push(k("Policy", "read, write", !0, !0, !1)),
                    c.taskPermission.push(k("Routing", "read, write", !0, !0, !1)),
                    c.taskPermission.push(k("Security", "read, write", !0, !0, !1)),
                    c.viewMode = "view") : angular.equals(b, "basic") ? (c.taskPermission.push(k("System", "read, write", !0, !0, !1)),
                    c.taskPermission.push(k("Interface", "read, write", !0, !0, !1)),
                    c.taskPermission.push(k("Policy", "none", !1, !1, !0)),
                    c.taskPermission.push(k("Routing", "none", !1, !1, !0)),
                    c.taskPermission.push(k("Security", "none", !1, !1, !0))) : angular.equals(b, "operator") && (c.taskPermission.push(k("System", "read", !0, !1, !1)),
                    c.taskPermission.push(k("Interface", "read", !0, !1, !1)),
                    c.taskPermission.push(k("Policy", "read", !0, !1, !1)),
                    c.taskPermission.push(k("Routing", "read", !0, !1, !1)),
                    c.taskPermission.push(k("Security", "read", !0, !1, !1))),
                    a.push(c)
                })
            }(b)
        }
        function d(a, c) {
            function d(a) {
                a.taskPermission = [],
                angular.equals(a.name.vipValue, "netadmin") ? (a.taskPermission.push(k("System", "read, write", !0, !0, !1)),
                a.taskPermission.push(k("Interface", "read, write", !0, !0, !1)),
                a.taskPermission.push(k("Policy", "read, write", !0, !0, !1)),
                a.taskPermission.push(k("Routing", "read, write", !0, !0, !1)),
                a.taskPermission.push(k("Security", "read, write", !0, !0, !1)),
                a.viewMode = "view") : (a.taskPermission.push(k("System", "none", !1, !1, !0)),
                a.taskPermission.push(k("Interface", "none", !1, !1, !0)),
                a.taskPermission.push(k("Policy", "none", !1, !1, !0)),
                a.taskPermission.push(k("Routing", "none", !1, !1, !0)),
                a.taskPermission.push(k("Security", "none", !1, !1, !0)),
                angular.isDefined(a.task) && angular.isArray(a.task.vipValue) && a.task.vipValue.length > 0 && angular.forEach(a.task.vipValue, function(b) {
                    l(a.taskPermission, b.mode.vipValue, b.permission.vipValue)
                }))
            }
            angular.forEach(a.vipValue, function(f) {
                f.name = e.editObjectTemplateField(a.children.name, f.name),
                angular.equals(f.name.vipValue, "netadmin") || angular.equals(f.name.vipValue, "basic") || angular.equals(f.name.vipValue, "operator") ? (f.name.vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
                f.name.vipObjectType = "object") : angular.extend(f.name, {
                    deleteFlag: !0
                }),
                f.viewMode = e.viewMode,
                d(f),
                c.push(f)
            })
        }
        var e = this;
        e.userGroupName = angular.extend({}, e.templateDefinition.aaa.usergroup.children.name, {
            deleteFlag: !0
        }),
        angular.isDefined(this.templateDefinition.aaa.usergroup) && angular.isArray(this.templateDefinition.aaa.usergroup.vipValue) && this.templateDefinition.aaa.usergroup.vipValue.length > 0 ? (d(this.templateDefinition.aaa.usergroup, a.data),
        this.updateUserGroupsList(a.data)) : c(a.data)
    }
    ,
    m.prototype.createUsersTable = function() {
        return n = new d({
            autoLoad: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            singleSelect: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "users",
            toolbar: !1
        }),
        n.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        n
    }
    ,
    m.prototype.setUsersTable = function(a) {
        function c(a, b) {
            var c = {};
            c.name = e.editObjectTemplateField(a.name, {
                vipType: a.name.defaultOption,
                vipValue: "admin"
            }),
            c.password = e.editObjectTemplateField(a.password, {
                vipType: a.password.defaultOption,
                vipValue: "admin"
            }),
            c.description = e.editObjectTemplateField(a.description, {
                vipType: a.description.defaultOption
            }),
            c.group = e.editObjectTemplateField(angular.extend(a.group, {
                dataType: {
                    type: "stringList",
                    values: availableUserGroupList
                }
            }), {
                vipType: a.group.defaultOption
            }),
            b.push(c)
        }
        function d(a, c) {
            angular.forEach(a.vipValue, function(d) {
                if (d.name = e.editObjectTemplateField(a.children.name, d.name),
                d.password = e.editObjectTemplateField(a.children.password, d.password),
                d.password.originalValue = d.password.vipValue,
                d.description = e.editObjectTemplateField(a.children.description, d.description),
                d.group = e.editObjectTemplateField(a.children.group, d.group),
                angular.equals(d.name.vipValue, "admin"))
                    d.name.vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
                    d.name.vipObjectType = "object",
                    d.password.vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
                    d.password.vipObjectType = "object",
                    d.description.vipType = b.TEMPLATE_DEF_TYPE_IGNORE,
                    d.description.vipObjectType = "object",
                    d.group.vipType = b.TEMPLATE_DEF_TYPE_IGNORE,
                    d.group.vipObjectType = "object";
                else {
                    var f = [];
                    angular.forEach(d.group.vipValue, function(a) {
                        f.push(a.vipValue)
                    }),
                    d.group.vipValue = f
                }
                c.push(d)
            })
        }
        var e = this
          , f = [{
            title: "Username",
            property: "name",
            editable: !1,
            dataType: "string",
            minWidth: 220,
            headerTooltip: this.templateDefinition.aaa.user.children.name.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="user"view-mode="view" ng-model="row.entity.name" data-name="name_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Password",
            property: "password",
            editable: !1,
            dataType: "string",
            minWidth: 220,
            headerTooltip: this.templateDefinition.aaa.user.children.password.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity.password"  custom-prepend-variable-name="user" input-type="password" data-name="password_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Description",
            property: "description",
            editable: !1,
            dataType: "string",
            minWidth: 220,
            headerTooltip: this.templateDefinition.aaa.user.children.description.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input ng-if="rowRenderIndex > 0 || row.entity.name.vipValue != \'admin\'" custom-prepend-variable-name="user" view-mode="view" ng-model="row.entity.description" data-name="description_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Groups",
            property: "group",
            editable: !1,
            dataType: "string",
            minWidth: 410,
            headerTooltip: this.templateDefinition.aaa.user.children.group.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input ng-if="rowRenderIndex > 0 || row.entity.name.vipValue != \'admin\'" custom-prepend-variable-name="user" view-mode="view" ng-model="row.entity.group" data-name="group_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || f.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" ng-if="rowRenderIndex > 0 || row.entity.name.vipValue != \'admin\'" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData({
            name: this.templateDefinition.aaa.user.children.name,
            password: this.templateDefinition.aaa.user.children.password,
            description: this.templateDefinition.aaa.user.children.description,
            group: e.editObjectTemplateField(angular.extend(this.templateDefinition.aaa.user.children.group, {
                dataType: {
                    type: "stringList",
                    values: availableUserGroupList
                }
            }), {
                vipType: this.templateDefinition.aaa.user.children.group.defaultOption
            })
        }),
        a.createColumns(f),
        angular.isDefined(this.templateDefinition.aaa.user) && angular.isArray(this.templateDefinition.aaa.user.vipValue) && this.templateDefinition.aaa.user.vipValue.length > 0 ? d(this.templateDefinition.aaa.user, a.data) : c(this.templateDefinition.aaa.user.children, a.data)
    }
    ,
    m.prototype.createAuthServerTable = function(a) {
        var b = new d({
            autoLoad: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            singleSelect: !0,
            dataUid: "$$hashKey",
            addMaxRow: 8,
            rowHeight: 30,
            tableName: a,
            toolbar: !1
        });
        return b.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        b
    }
    ,
    m.prototype.setAuthServerTable = function(a, b) {
        function c(b, c) {
            angular.forEach(b.vipValue, function(e) {
                e.address = d.editObjectTemplateField(b.children.address, e.address),
                "radius" === a && (e.tag = d.editObjectTemplateField(b.children.tag, e.tag),
                e["acct-port"] = d.editObjectTemplateField(b.children["acct-port"], e["acct-port"])),
                e["auth-port"] = d.editObjectTemplateField(b.children["auth-port"], e["auth-port"]),
                e.key = d.editObjectTemplateField(b.children.key, e.key),
                e["secret-key"] = d.editObjectTemplateField(b.children["secret-key"], e["secret-key"]),
                e["source-interface"] = d.editObjectTemplateField(b.children["source-interface"], e["source-interface"]),
                e.vpn = d.editObjectTemplateField(b.children.vpn, e.vpn),
                e.priority = d.editObjectTemplateField(b.children.priority, e.priority),
                e.authType = a,
                c.push(e)
            })
        }
        var d = this
          , e = [{
            title: "IP Address",
            property: "address",
            editable: !1,
            dataType: "string",
            minWidth: 230,
            headerTooltip: this.templateDefinition[a].server.children.address.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity.address" data-name="' + a + '_address_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Authentication Port",
            property: "auth-port",
            editable: !1,
            dataType: "string",
            minWidth: 230,
            headerTooltip: this.templateDefinition[a].server.children["auth-port"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity[\'auth-port\']" data-name="' + a + '_auth_port_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Key (Deprecated)",
            property: "key",
            toolTip: "Valid for v15.3.7 or earlier",
            editable: !1,
            dataType: "string",
            minWidth: 230,
            headerTooltip: this.templateDefinition[a].server.children.key.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity.key" data-name="' + a + '_key_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Secret Key",
            property: "secret-key",
            toolTip: "Valid for v15.3.8 or later",
            editable: !1,
            dataType: "string",
            minWidth: 270,
            headerTooltip: this.templateDefinition[a].server.children["secret-key"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity[\'secret-key\']" input-type="password" data-name="' + a + '_secret_key_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Source Interface",
            property: "source-interface",
            editable: !1,
            dataType: "string",
            minWidth: 230,
            headerTooltip: this.templateDefinition[a].server.children["source-interface"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity[\'source-interface\']" data-name="' + a + '_source_interface_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "VPN",
            property: "vpn",
            editable: !1,
            dataType: "string",
            minWidth: 230,
            headerTooltip: this.templateDefinition[a].server.children.vpn.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity.vpn" data-name="' + a + '_vpn_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Priority",
            property: "priority",
            editable: !1,
            dataType: "string",
            minWidth: 230,
            headerTooltip: this.templateDefinition[a].server.children.priority.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity.priority" data-name="' + a + '_priority_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        "radius" === a && e.splice(1, 0, {
            title: "Tag",
            property: "tag",
            editable: !1,
            dataType: "string",
            minWidth: 230,
            headerTooltip: this.templateDefinition[a].server.children.tag.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity.tag" data-name="' + a + '_tag_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }),
        "radius" === a && e.splice(3, 0, {
            title: "Accounting Port",
            property: "acct-port",
            editable: !1,
            dataType: "string",
            minWidth: 230,
            headerTooltip: this.templateDefinition[a].server.children["acct-port"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity[\'acct-port\']" data-name="{{row.entity.authType}}_acct_port_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }),
        angular.equals(this.viewMode, "view") || e.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        b.setNewRowToggleData(this.templateDefinition[a].server.children),
        b.createColumns(e),
        angular.isDefined(this.templateDefinition[a].server) && angular.isArray(this.templateDefinition[a].server.vipValue) && this.templateDefinition[a].server.vipValue.length > 0 && c(this.templateDefinition[a].server, b.data)
    }
    ,
    m.prototype.updateUserGroupsList = function(a, b) {
        return availableUserGroupList.length = 0,
        angular.forEach(a, function(a) {
            availableUserGroupList.push({
                key: a.name.vipValue,
                value: a.name.vipValue
            })
        }),
        b && (b.newRowData.group.dataType.values = angular.copy(availableUserGroupList),
        angular.forEach(b.data, function(a) {
            a.group.dataType.values = angular.copy(availableUserGroupList)
        })),
        availableUserGroupList
    }
    ,
    m.prototype.updateAuthOrderList = function(a) {
        var b = this;
        b.templateDefinition.aaa["auth-order"].dataType.values.length = 0,
        angular.forEach(a, function(a) {
            a.isSelected && b.templateDefinition.aaa["auth-order"].dataType.values.push({
                key: a.name,
                value: a.name
            })
        })
    }
    ,
    m.prototype.setTemplateDefinition = function() {
        var a = {
            aaa: this.templateDefinition.aaa,
            radius: this.templateDefinition.radius,
            tacacs: this.templateDefinition.tacacs
        };
        this.templateDefinition.radius = this.omitExtraDefinitionProperty(_.omit(this.templateDefinition.radius, ["server"])),
        this.templateDefinition.tacacs = this.omitExtraDefinitionProperty(_.omit(this.templateDefinition.tacacs, ["server"])),
        a.aaa["auth-order"].dataType.values.length > 0 && (this.templateDefinition.aaa["auth-order"] = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.constructAuthOrderList(a.aaa["auth-order"].dataType.values),
            vipObjectType: "list"
        }),
        a.aaa.user.length > 0 ? this.templateDefinition.aaa.user = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.addPriorityField(this.constructUsers(a.aaa.user), ["name", "password", "description", "group"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["name"]
        } : this.templateDefinition.aaa = _.omit(this.templateDefinition.aaa, "user"),
        a.aaa.usergroup.data.length > 0 ? this.templateDefinition.aaa.usergroup = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.constructUserGroups(a.aaa.usergroup.data),
            vipObjectType: "tree",
            vipPrimaryKey: ["name"]
        } : this.templateDefinition.aaa = _.omit(this.templateDefinition.aaa, "usergroup"),
        a.radius.server.length > 0 && (this.templateDefinition.radius.server = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.addPriorityField(this.omitObjectProperties(a.radius.server), ["address", "auth-port", "vpn", "source-interface", "key", "secret-key", "priority", "tag", "acct-port"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["address"]
        },
        angular.forEach(this.templateDefinition.radius.server.vipValue, function(a) {
            delete a.authType
        })),
        a.tacacs.server.length > 0 && (this.templateDefinition.tacacs.server = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.addPriorityField(this.omitObjectProperties(a.tacacs.server), ["address", "auth-port", "vpn", "source-interface", "key", "secret-key", "priority"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["address"]
        },
        angular.forEach(this.templateDefinition.tacacs.server.vipValue, function(a) {
            delete a.authType
        })),
        this.templateDefinition.aaa["auth-fallback"] = this.omitObjectProperties(a.aaa["auth-fallback"]),
        this.templateDefinition.aaa["admin-auth-order"] = this.omitObjectProperties(a.aaa["admin-auth-order"]),
        this.templateDefinition.aaa.logs["netconf-disable"] = this.omitObjectProperties(a.aaa.logs["netconf-disable"]),
        this.templateDefinition.aaa.logs["audit-disable"] = this.omitObjectProperties(a.aaa.logs["audit-disable"]),
        this.templateDefinition.aaa["radius-servers"] = this.omitObjectProperties(a.aaa["radius-servers"]),
        this.templateDefinition.aaa["radius-servers"].vipValue = f.convertStrToStrArray(this.templateDefinition.aaa["radius-servers"].vipValue)
    }
    ,
    m.prototype.validateUserGroups = function(a) {
        if (angular.isDefined(a))
            for (var b = 0; b < a.length; b++)
                if (!angular.equals(a[b].name.vipValue, "admin")) {
                    if (f.isUndefinedOrEmpty(a[b].group))
                        return !1;
                    if ("constant" === a[b].group.vipType && (f.isUndefinedOrEmpty(a[b].group.vipValue) || angular.isArray(a[b].group.vipValue) && 0 === a[b].group.vipValue.length))
                        return !1
                }
        return !0
    }
    ,
    m.prototype.validateVPNForVsmart = function() {
        for (var a = _.find(this.deviceType, function(a) {
            return angular.equals(a, "vsmart")
        }), b = 0; b < this.templateDefinition.radius.server.length; b++) {
            var c = this.templateDefinition.radius.server[b];
            if (angular.isDefined(a) && angular.isDefined(c.vpn.vipValue) && 0 != c.vpn.vipValue && 512 != c.vpn.vipValue)
                return g.clear(),
                g.error("For vsmarts, only VPN 0 and VPN 512 can be configured. VPNs other than VPN 0 and VPN 512 has been set in one or more radius servers"),
                !1
        }
        for (var b = 0; b < this.templateDefinition.tacacs.server.length; b++) {
            var c = this.templateDefinition.tacacs.server[b];
            if (angular.isDefined(a) && angular.isDefined(c.vpn.vipValue) && 0 != c.vpn.vipValue && 512 != c.vpn.vipValue)
                return g.clear(),
                g.error("For vsmarts, only VPN 0 and VPN 512 can be configured. VPN other than VPN 0 and VPN 512 has been set in one or more tacacs servers"),
                !1
        }
        return !0
    }
    ,
    m.prototype.validateRadiusServersList = function() {
        var a = this.templateDefinition.aaa["radius-servers"].vipValue
          , b = angular.isArray(a) ? a.join(",") : a;
        return /^([^,]{4,16},)*[^,]{4,16}$/.test(b)
    }
    ,
    m.prototype.validateTemplate = function() {
        return !!this.validateVPNForVsmart() && (this.validateUserGroups(this.templateDefinition.aaa.user) ? !!this.validateRadiusServersList() || (g.error("Radius Server List is a list of tag names.  Each tag can be from 4 through 16 characters."),
        !1) : (g.error("User groups missing for one or more users"),
        !1))
    }
    ,
    m.prototype.constructAuthOrderList = function(a) {
        var c = [];
        return angular.forEach(a, function(a) {
            if (angular.equals(a.key, "local") || angular.equals(a.key, "radius") || angular.equals(a.key, "tacacs")) {
                var d = {
                    vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                    vipValue: a.key,
                    vipObjectType: "object"
                };
                c.push(d)
            }
        }),
        c
    }
    ,
    m.prototype.constructUsers = function(a) {
        function c(a) {
            if (a.vipValue !== a.originalValue) {
                var b = CryptoJS.enc.Base64.stringify(CryptoJS.lib.WordArray.random(4));
                a.vipValue = sha512crypt(a.vipValue, b)
            }
            return a = e.omitObjectProperties(a)
        }
        function d(a) {
            var c = [];
            return a = _.uniq(a),
            angular.forEach(a, function(a) {
                var d = {
                    vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                    vipValue: a,
                    vipObjectType: "object"
                };
                c.push(d)
            }),
            c
        }
        var e = this;
        return angular.forEach(a, function(a) {
            a.name = e.omitObjectProperties(a.name),
            a.description = e.omitObjectProperties(a.description),
            a.group = {
                vipType: a.group.vipType || b.TEMPLATE_DEF_TYPE_CONSTANT,
                vipValue: d(a.group.vipValue),
                vipObjectType: "list"
            },
            a.group.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE && (a.group.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE_NAME),
            a.password = c(a.password)
        }),
        a
    }
    ,
    m.prototype.constructUserGroups = function(a) {
        function c(a) {
            function c(a) {
                var c = [];
                return a.read && c.push({
                    vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                    vipValue: "read",
                    vipObjectType: "object"
                }),
                a.write && c.push({
                    vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                    vipValue: "write",
                    vipObjectType: "object"
                }),
                c
            }
            var d = [];
            for (var e in a)
                if (angular.isDefined(a[e]) && 1 != a[e].none) {
                    var f = {
                        mode: {
                            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                            vipValue: a[e].feature.toLowerCase(),
                            vipObjectType: "object"
                        },
                        permission: {
                            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                            vipValue: c(a[e]),
                            vipObjectType: "list"
                        },
                        "priority-order": ["mode", "permission"]
                    };
                    d.push(f)
                }
            return d
        }
        var d = this
          , e = [];
        return angular.forEach(a, function(a) {
            a.name = d.omitObjectProperties(a.name),
            a["priority-order"] = ["name"],
            angular.equals(a.name.vipValue, "netadmin") || (a.task = {
                vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                vipValue: c(a.taskPermission),
                vipObjectType: "tree",
                vipPrimaryKey: ["mode"]
            },
            a["priority-order"].push("task"),
            e.length = 0),
            delete a.taskPermission
        }),
        a
    }
    ,
    m.prototype.add = function(a, b) {
        var c = this;
        if (!c.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        a.transitionInProgress = !0;
        var d = angular.copy(a);
        return d.templateType = a.templateType.name,
        d.factoryDefault = !1,
        d.setDeviceType(a.deviceModels),
        d.validateTemplate() ? (d.setTemplateDefinition(),
        void e.createGeneralTemplate(d).then(function(b) {
            g.success(i("initialCap")(d.templateType) + " Template created", 2e3),
            h.previousState && h.previousState.name.contains("app.config.template.device.feature") ? (j.pushToFeatureTemplateList(angular.extend(d, {
                templateId: b.templateId
            })),
            a.transitionInProgress = !1,
            h.go(h.previousState.name)) : (a.transitionInProgress = !1,
            h.go("app.config.template.feature", {
                display: "",
                deviceType: "",
                templateType: "",
                templateId: ""
            }))
        }, function(b) {
            a.transitionInProgress = !1,
            g.error(b.error.message + ": " + b.error.details)
        })) : void (a.transitionInProgress = !1)
    }
    ,
    m.prototype.edit = function(a, b) {
        var c = this;
        if (!c.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        var d = angular.copy(a);
        return d.templateType = a.templateType.name,
        d.factoryDefault = !1,
        d.setDeviceType(a.deviceModels),
        d.validateTemplate() ? (d.setTemplateDefinition(),
        void c.callUpdateTemplate(d)) : void (a.transitionInProgress = !1)
    }
    ,
    m
}
function ArchiveTemplate(a, b, c, d, e, f, g, h, i, j) {
    var k = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            archive: {},
            interval: {},
            path: {},
            "ssh-id-file": {},
            vpn: {}
        }
    };
    return k.prototype = new a,
    k.prototype.setTemplateDefinition = function() {
        this.omitExtraDefinitionProperty(this.templateDefinition)
    }
    ,
    k.prototype.validateVPNForVsmart = function() {
        var a = _.find(this.deviceType, function(a) {
            return angular.equals(a, "vsmart")
        });
        return !angular.isDefined(a) || 0 == this.templateDefinition.vpn.vipValue || 512 == this.templateDefinition.vpn.vipValue
    }
    ,
    k.prototype.add = function(a, b) {
        if (!b.addTemplate.$valid)
            return void this.showNotificationErrorsForForm(b);
        a.transitionInProgress = !0;
        var c = angular.copy(a);
        return c.templateType = a.templateType.name,
        c.factoryDefault = !1,
        c.setDeviceType(a.deviceModels),
        c.validateVPNForVsmart() ? (c.setTemplateDefinition(),
        void d.createGeneralTemplate(c).then(function(b) {
            g.success(h("initialCap")(c.templateType) + " Template created", 2e3),
            i.previousState && i.previousState.name.contains("app.config.template.device.feature") ? (j.pushToFeatureTemplateList(angular.extend(c, {
                templateId: b.templateId
            })),
            a.transitionInProgress = !1,
            i.go(i.previousState.name)) : (a.transitionInProgress = !1,
            i.go("app.config.template.feature", {
                display: "",
                deviceType: "",
                templateType: "",
                templateId: ""
            }))
        }, function(b) {
            a.transitionInProgress = !1,
            g.error(b.error.message + ": " + b.error.details)
        })) : (a.transitionInProgress = !1,
        void g.error("For vsmarts, only VPN 0 and VPN 512 can be configured. VPN other than VPN 0 and VPN 512 has been set in one or more radius servers"))
    }
    ,
    k.prototype.edit = function(a, b) {
        if (!b.addTemplate.$valid)
            return void this.showNotificationErrorsForForm(b);
        var c = angular.copy(a);
        return c.templateType = a.templateType.name,
        c.factoryDefault = !1,
        c.setDeviceType(a.deviceModels),
        c.validateVPNForVsmart() ? (c.setTemplateDefinition(),
        void this.callUpdateTemplate(c)) : (a.transitionInProgress = !1,
        g.clear(),
        void g.error("For vsmarts, only VPN 0 and VPN 512 can be configured. VPN other than VPN 0 and VPN 512 has been set in one or more radius servers"))
    }
    ,
    k
}
function bridgeTemplate(a, b, c, d, e, f, g, h, i, j, k) {
    var l = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            "age-time": {},
            "max-macs": {},
            name: {},
            vlan: {},
            interface: []
        }
    };
    return l.prototype = new a,
    l.prototype.createBridgeInterfaceTable = function() {
        var a = new g({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "bridge_interface",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a.setAppScope(this.removeTableRow),
        a.setAppScope({
            openModal: function(a, b, c) {
                k.show({
                    templateUrl: "app/configuration/template/feature/modal/views/Bridge/bridgeStaticMacAddress.html",
                    controller: "BridgeStaticMACAddressController",
                    targetEvent: a,
                    escapeToClose: !1,
                    resolve: {
                        selectedRow: function() {
                            return b
                        },
                        operation: function() {
                            return "view"
                        },
                        bridgeInterfaceFormInfo: function() {
                            return null
                        },
                        interfaceRowIndex: function() {
                            return c
                        },
                        formObject: function() {
                            return {}
                        }
                    }
                }).then(function() {}, function(a) {})
            }
        }),
        a
    }
    ,
    l.prototype.setBridgeInterfaceTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d, e) {
                d["if-name"] = c.editObjectTemplateField(a.children["if-name"], d["if-name"]),
                d.description = c.editObjectTemplateField(a.children.description, d.description),
                d["native-vlan"] = c.editObjectTemplateField(a.children["native-vlan"], d["native-vlan"]),
                d.shutdown = c.editObjectTemplateField(a.children.shutdown, d.shutdown),
                d["static-mac-address"] = c.editObjectTemplateField(a.children["static-mac-address"], d["static-mac-address"]),
                d.staticMacAddressList = c.createBridgeInterfaceStaticMacAddressTable(d["static-mac-address"], e),
                b.push(d),
                d.viewMode = c.viewMode
            })
        }
        var c = this
          , d = [{
            title: "Interface name",
            property: "if-name",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.interface.children["if-name"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input input-type="iface" custom-prepend-variable-name="bridge" view-mode="view" ng-model="row.entity[\'if-name\']" data-name="if_name_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Description",
            property: "description",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.interface.children.description.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="bridge" view-mode="view" ng-model="row.entity.description" data-name="description_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Native VLAN Support",
            property: "native-vlan",
            editable: !1,
            minWidth: 270,
            dataType: "boolean",
            headerTooltip: this.templateDefinition.interface.children["native-vlan"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="bridge" view-mode="view" ng-model="row.entity[\'native-vlan\']" data-name="native_vlan_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Shutdown",
            property: "shutdown",
            editable: !1,
            minWidth: 270,
            dataType: "boolean",
            headerTooltip: this.templateDefinition.interface.children.shutdown.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="bridge" view-mode="view" ng-model="row.entity.shutdown" data-name="shutdown_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Static MAC Address",
            property: "static-mac-address",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.interface.children["static-mac-address"].details,
            cellTemplate: '<div class="ui-grid-cell-contents toggleContent"><span ng-class="row.entity.staticMacAddressList.data.length > 0 ? \'link-cell\'  : \'\'"  data-ng-click="row.entity.staticMacAddressList.data.length > 0 ? grid.appScope.openModal($event, row, rowRenderIndex): return;" id="add_mac_address_{{rowRenderIndex}}">{{row.entity.staticMacAddressList.data.length}}</span></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i><i class="material-icons md-14 pointerCursor blue" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        angular.extend(c.templateDefinition.interface.children, {
            staticMacAddressList: c.createBridgeInterfaceStaticMacAddressTable(c.templateDefinition.interface.children["static-mac-address"], "")
        }),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.interface) && angular.isArray(this.templateDefinition.interface.vipValue) && this.templateDefinition.interface.vipValue.length > 0 && b(this.templateDefinition.interface, a.data)
    }
    ,
    l.prototype.createBridgeInterfaceStaticMacAddressTable = function(a, b) {
        function c(a, c) {
            angular.forEach(a.vipValue, function(e) {
                e.macaddr = d.editObjectTemplateField(a.children.macaddr, e.macaddr),
                e.bridgeInterfaceTableRowIndex = b,
                c.push(e)
            })
        }
        var d = this
          , e = new g({
            autoLoad: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            singleSelect: !0,
            rowHeight: 30,
            tableName: "StaticMacAddress_" + b,
            toolbar: !1
        });
        e.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        });
        var f = [{
            title: "MAC Address",
            property: "macaddr",
            editable: !1,
            dataType: "string",
            headerTooltip: a.children.macaddr.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="bridge" view-mode="view" ng-model="row.entity.macaddr" data-name="mac_address_{{row.entity.bridgeInterfaceTableRowIndex}}_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        return angular.equals(this.viewMode, "view") || f.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-16 pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        e.setNewRowToggleData({
            macaddr: a.children.macaddr,
            bridgeInterfaceTableRowIndex: b
        }),
        e.setAppScope(this.removeTableRow),
        e.createColumns(f),
        angular.isDefined(a) && angular.isArray(a.vipValue) && a.vipValue.length > 0 && c(a, e.data),
        e
    }
    ,
    l.prototype.setTemplateDefinition = function() {
        var a = this.templateDefinition;
        this.templateDefinition = this.omitExtraDefinitionProperty(_.omit(this.templateDefinition, ["interface"])),
        a.name.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && angular.equals(this.templateDefinition.name.vipVariableName, "bridge_name") && (this.templateDefinition.name.vipVariableName = this.templateDefinition.name.vipVariableName + "_" + this.templateName),
        a.interface.length > 0 && (this.templateDefinition.interface = {
            vipType: a.interface.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(this.constructBridgeInterface(a.interface), ["if-name", "description", "native-vlan", "static-mac-address", "shutdown"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["if-name"]
        })
    }
    ,
    l.prototype.constructBridgeInterface = function(a) {
        var c = this;
        return angular.forEach(a, function(a, d) {
            !a.staticMacAddressList && a["static-mac-address"].vipValue && a["static-mac-address"].vipValue.length > 0 && (a.staticMacAddressList = a["static-mac-address"].vipValue),
            a.staticMacAddressList ? (a.staticMacAddressList.length > 0 ? (angular.forEach(a.staticMacAddressList, function(a) {
                delete a.bridgeInterfaceTableRowIndex
            }),
            a["static-mac-address"] = {
                vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                vipValue: c.addPriorityField(c.omitObjectProperties(a.staticMacAddressList), ["macaddr"]),
                vipObjectType: "tree",
                vipPrimaryKey: ["macaddr"]
            }) : a["static-mac-address"] = {
                vipType: b.TEMPLATE_DEF_TYPE_IGNORE,
                vipValue: c.addPriorityField([], ["macaddr"]),
                vipObjectType: "tree",
                vipPrimaryKey: ["macaddr"]
            },
            delete a.staticMacAddressList) : (a["static-mac-address"] = {},
            delete a.staticMacAddressList);
            for (var f in a)
                _.indexOf(["viewMode", "priority-order"], f) > -1 || angular.equals(f, "static-mac-address") || ("list" === a[f].vipObjectType && a[f].value && (a[f].value = e.convertStrToStrArray(a[f].value)),
                a[f] = c.omitObjectProperties(a[f]))
        }),
        a
    }
    ,
    l.prototype.add = function(a, b) {
        var c = this;
        if (!c.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        a.transitionInProgress = !0;
        var e = this.createTemplateCopy(a);
        e.templateType = a.templateType.name,
        e.setDeviceType(a.deviceModels),
        e.factoryDefault = !1,
        e.setTemplateDefinition(),
        d.createGeneralTemplate(e).then(function(b) {
            f.success(i("initialCap")(e.templateType) + " Template created", 2e3),
            h.previousState && h.previousState.name.contains("app.config.template.device.feature") ? (j.pushToFeatureTemplateList(angular.extend(e, {
                templateId: b.templateId
            })),
            a.transitionInProgress = !1,
            h.go(h.previousState.name)) : (a.transitionInProgress = !1,
            h.go("app.config.template.feature", {
                display: "",
                deviceType: "",
                templateType: "",
                templateId: ""
            }))
        }, function(b) {
            a.transitionInProgress = !1,
            f.error(b.error.message + ": " + b.error.details)
        })
    }
    ,
    l.prototype.edit = function(a, b) {
        var c = this;
        if (!c.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        var d = this.createTemplateCopy(a);
        d.templateType = a.templateType.name,
        d.factoryDefault = !1,
        d.setDeviceType(a.deviceModels),
        d.setTemplateDefinition(),
        this.callUpdateTemplate(d)
    }
    ,
    l.prototype.createTemplateCopy = function(a) {
        var b = a.templateDefinition
          , c = _.omit(b, "interface");
        c.interface = [],
        b.interface && b.interface.length > 0 && angular.forEach(b.interface, function(a) {
            var b = {};
            for (var d in a)
                angular.equals(d, "staticMacAddressList") ? b[d] = angular.copy(a[d].data) : b[d] = angular.copy(a[d]);
            c.interface.push(b)
        });
        var d = angular.copy(_.omit(a, "templateDefinition"));
        return d.templateDefinition = c,
        d
    }
    ,
    l
}
function IgmpTemplate(a, b, c, d, e, f, g, h, i, j) {
    var k = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            igmp: {
                shutdown: {},
                interface: []
            }
        }
    };
    return k.prototype = new a,
    k.prototype.createInterfaceTable = function() {
        var a = new f({
            tableName: "interface",
            autoLoad: !0,
            singleSelect: !0,
            dataUid: "$$hashKey",
            minRowsToShow: 5,
            columnResizing: !0,
            rowHeight: 30,
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a.setAppScope(this.removeTableRow),
        a.setAppScope({
            openModal: function(a, b, d) {
                c.show({
                    templateUrl: "app/configuration/template/feature/modal/views/IGMP/igmpGroupAddress.html",
                    controller: "IGMPGroupAddressController",
                    targetEvent: a,
                    escapeToClose: !1,
                    resolve: {
                        selectedRow: function() {
                            return b
                        },
                        operation: function() {
                            return "view"
                        },
                        igmpInterfaceFormInfo: function() {
                            return null
                        },
                        interfaceRowIndex: function() {
                            return d
                        },
                        formObject: function() {
                            return {}
                        }
                    }
                }).then(function() {}, function(a) {})
            }
        }),
        a
    }
    ,
    k.prototype.setInterfaceTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d, e) {
                d.name = c.editObjectTemplateField(a.children.name, d.name),
                d["join-group"] = c.editObjectTemplateField(a.children["join-group"], d["join-group"]),
                d.joinGroupList = c.createInterfaceJoinGrpTable(d["join-group"], e),
                b.push(d),
                d.viewMode = c.viewMode
            })
        }
        var c = this
          , d = [{
            title: "Name",
            property: "name",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.igmp.interface.children.name.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="igmp_interface" view-mode="view" ng-model="row.entity.name" data-name="name_details_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Group Address",
            property: "join-group",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.igmp.interface.children["join-group"].details,
            cellTemplate: '<div class="ui-grid-cell-contents toggleContent"><span ng-class="row.entity.joinGroupList.data.length > 0 ? \'link-cell\'  : \'\'" data-ng-click="row.entity.joinGroupList.data.length > 0 ? grid.appScope.openModal($event, row, rowRenderIndex): return;" id="add_group_address_{{rowRenderIndex}}">{{row.entity.joinGroupList.data.length}}</span></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i><i class="material-icons md-14 pointerCursor blue" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        angular.extend(c.templateDefinition.igmp.interface.children, {
            joinGroupList: c.createInterfaceJoinGrpTable(c.templateDefinition.igmp.interface.children["join-group"], "")
        }),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.igmp.interface) && angular.isArray(this.templateDefinition.igmp.interface.vipValue) && this.templateDefinition.igmp.interface.vipValue.length > 0 && b(this.templateDefinition.igmp.interface, a.data)
    }
    ,
    k.prototype.createInterfaceJoinGrpTable = function(a, b) {
        function c(a, c) {
            angular.forEach(a.vipValue, function(e) {
                e["group-address"] = d.editObjectTemplateField(a.children["group-address"], e["group-address"]),
                e.interfaceTableRowIndex = b,
                c.push(e)
            })
        }
        var d = this
          , e = new f({
            autoLoad: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            singleSelect: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "GroupAddress_" + b,
            toolbar: !1
        });
        e.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        });
        var g = [{
            title: "Group Address",
            property: "group-address",
            editable: !1,
            dataType: "string",
            headerTooltip: a.children["group-address"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="igmp-interface" view-mode="view" ng-model="row.entity[\'group-address\']" data-name="group_address_{{row.entity.interfaceTableRowIndex}}_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        return angular.equals(this.viewMode, "view") || g.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-16 pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        e.setNewRowToggleData({
            "group-address": a.children["group-address"],
            interfaceTableRowIndex: b
        }),
        e.setAppScope(this.removeTableRow),
        e.createColumns(g),
        angular.isDefined(a) && angular.isArray(a.vipValue) && a.vipValue.length > 0 && c(a, e.data),
        e
    }
    ,
    k.prototype.setTemplateDefinition = function() {
        var a = this.templateDefinition.igmp.interface;
        this.templateDefinition.igmp = this.omitExtraDefinitionProperty(_.omit(this.templateDefinition.igmp, ["interface"])),
        a.length && (this.templateDefinition.igmp.interface = {
            vipType: a.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(this.constructInterface(a), ["name", "join-group"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["name"]
        })
    }
    ,
    k.prototype.constructInterface = function(a) {
        var c = this;
        return angular.forEach(a, function(a) {
            !a.joinGroupList && a["join-group"].vipValue && a["join-group"].vipValue.length > 0 && (a.joinGroupList = a["join-group"].vipValue),
            a.joinGroupList ? (a.joinGroupList.length > 0 ? (angular.forEach(a.joinGroupList, function(a) {
                delete a.interfaceTableRowIndex
            }),
            a["join-group"] = {
                vipType: a.joinGroupList.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
                vipValue: c.addPriorityField(c.omitObjectProperties(a.joinGroupList), ["group-address"]),
                vipObjectType: "tree",
                vipPrimaryKey: ["group-address"]
            }) : a["join-group"] = {
                vipType: b.TEMPLATE_DEF_TYPE_IGNORE,
                vipValue: c.addPriorityField([], ["group-address"]),
                vipObjectType: "tree",
                vipPrimaryKey: ["group-address"]
            },
            delete a.joinGroupList) : a["join-group"] = {};
            for (var d in a)
                _.indexOf(["viewMode", "priority-order"], d) > -1 || angular.equals(d, "join-group") || ("list" === a[d].vipObjectType && a[d].value && (a[d].value = e.convertStrToStrArray(a[d].value)),
                a[d] = c.omitObjectProperties(a[d]))
        }),
        a
    }
    ,
    k.prototype.add = function(a, b) {
        var c = this;
        if (!c.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        a.transitionInProgress = !0;
        var e = this.createTemplateCopy(a);
        e.templateType = a.templateType.name,
        e.setDeviceType(a.deviceModels),
        e.factoryDefault = !1,
        e.setTemplateDefinition(),
        d.createGeneralTemplate(e).then(function(b) {
            i.success(h("initialCap")(e.templateType) + " Template created", 2e3),
            g.previousState && g.previousState.name.contains("app.config.template.device.feature") ? (j.pushToFeatureTemplateList(angular.extend(e, {
                templateId: b.templateId
            })),
            a.transitionInProgress = !1,
            g.go(g.previousState.name)) : (a.transitionInProgress = !1,
            g.go("app.config.template.feature", {
                display: "",
                deviceType: "",
                templateType: "",
                templateId: ""
            }))
        }, function(b) {
            a.transitionInProgress = !1,
            i.error(b.error.message + ": " + b.error.details)
        })
    }
    ,
    k.prototype.edit = function(a, b) {
        var c = this;
        if (!c.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        var d = this.createTemplateCopy(a);
        d.templateType = a.templateType.name,
        d.factoryDefault = !1,
        d.setDeviceType(a.deviceModels),
        d.setTemplateDefinition(),
        this.callUpdateTemplate(d)
    }
    ,
    k.prototype.createTemplateCopy = function(a) {
        var b = a.templateDefinition.igmp
          , c = _.omit(b, "interface");
        c.interface = [],
        b.interface && b.interface.length > 0 && angular.forEach(b.interface, function(a) {
            var b = {};
            for (var d in a)
                angular.equals(d, "joinGroupList") ? b[d] = angular.copy(a[d].data) : b[d] = angular.copy(a[d]);
            c.interface.push(b)
        });
        var d = angular.copy(_.omit(a, "templateDefinition"));
        return d.templateDefinition = {
            igmp: c
        },
        d
    }
    ,
    k
}
function LoggingTemplate(a, b, c, d, e, f, g, h, i) {
    var j = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            disk: {
                enable: {},
                file: {
                    size: {},
                    rotate: {}
                },
                priority: {}
            },
            server: []
        }
    };
    return j.prototype = new a,
    j.prototype.createServerTable = function() {
        var a = new f({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "server",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    j.prototype.setServerTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d.name = c.editObjectTemplateField(a.children.name, d.name),
                d.vpn = c.editObjectTemplateField(a.children.vpn, d.vpn),
                d.priority = c.editObjectTemplateField(a.children.priority, d.priority),
                d["source-interface"] = c.editObjectTemplateField(a.children["source-interface"], d["source-interface"]),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "Hostname/IP Address",
            property: "name",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.server.children.name.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="logging_server" view-mode="view" ng-model="row.entity.name" data-name="name_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "VPN ID",
            property: "vpn",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.server.children.vpn.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="logging_server" view-mode="view" ng-model="row.entity.vpn" data-name="vpn_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Source Interface",
            property: "source-interface",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.server.children["source-interface"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="logging_server" view-mode="view" ng-model="row.entity[\'source-interface\']" data-name="source_interface_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Priority",
            property: "priority",
            editable: !1,
            dataType: "string",
            width: 450,
            headerTooltip: this.templateDefinition.server.children.priority.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="logging_server" view-mode="view" ng-model="row.entity.priority" data-name="server_priority_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(this.templateDefinition.server.children),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.server) && angular.isArray(this.templateDefinition.server.vipValue) && this.templateDefinition.server.vipValue.length > 0 && b(this.templateDefinition.server, a.data);
    }
    ,
    j.prototype.setTemplateDefinition = function() {
        var a = this.templateDefinition;
        this.templateDefinition = this.omitExtraDefinitionProperty(_.omit(this.templateDefinition, "server")),
        a.server.length > 0 && (this.templateDefinition.server = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.addPriorityField(this.omitObjectProperties(a.server), ["name", "vpn", "source-interface", "priority"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["name"]
        })
    }
    ,
    j.prototype.validateVPN = function(a) {
        return !(angular.isDefined(a) && angular.isArray(a) && _.uniq(_.filter(_.pluck(a, "vpn"), function(a) {
            return "constant" == a.vipType || "ignore" == a.vipType
        }), "vipValue").length > 1)
    }
    ,
    j.prototype.validateSrcIP = function(a) {
        return !(angular.isDefined(a) && angular.isArray(a) && _.uniq(_.filter(_.pluck(a, "source-interface"), function(a) {
            return "constant" == a.vipType || "ignore" == a.vipType
        }), "vipValue").length > 1)
    }
    ,
    j.prototype.validateVPNForVsmart = function(a) {
        var b = _.find(this.deviceType, function(a) {
            return angular.equals(a, "vsmart")
        });
        if (angular.isDefined(b) && angular.isDefined(a) && angular.isArray(a))
            for (var c = 0; c < a.length; c++) {
                var d = a[c];
                if (0 != d.vpn.vipValue && 512 != d.vpn.vipValue)
                    return !1
            }
        return !0
    }
    ,
    j.prototype.add = function(a, b) {
        var c = this;
        if (!c.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        a.transitionInProgress = !0;
        var f = angular.copy(a);
        f.templateType = a.templateType.name,
        f.factoryDefault = !1,
        f.setDeviceType(a.deviceModels);
        var j = this.validateVPNForVsmart(f.templateDefinition.server);
        if (!j)
            return a.transitionInProgress = !1,
            g.clear(),
            void g.error("For vsmarts, only VPN 0 and VPN 512 can be configured. VPN other than VPN 0 and VPN 512 has been set in one or more logging servers");
        if (f.setTemplateDefinition(),
        angular.isDefined(f.templateDefinition.server)) {
            var k = this.validateVPN(f.templateDefinition.server.vipValue);
            if (!k)
                return a.transitionInProgress = !1,
                void g.error("All entered VPN ID values must be the same.");
            var l = this.validateSrcIP(f.templateDefinition.server.vipValue);
            if (!l)
                return a.transitionInProgress = !1,
                void g.error("All entered Source Interface values must be the same.")
        }
        d.createGeneralTemplate(f).then(function(b) {
            g.success(e("initialCap")(f.templateType) + " Template created", 2e3),
            h.previousState && h.previousState.name.contains("app.config.template.device.feature") ? (i.pushToFeatureTemplateList(angular.extend(f, {
                templateId: b.templateId
            })),
            a.transitionInProgress = !1,
            h.go(h.previousState.name)) : (a.transitionInProgress = !1,
            h.go("app.config.template.feature", {
                display: "",
                deviceType: "",
                templateType: "",
                templateId: ""
            }))
        }, function(b) {
            a.transitionInProgress = !1,
            g.error(b.error.message + ": " + b.error.details)
        })
    }
    ,
    j.prototype.edit = function(a, b) {
        var c = this;
        if (!c.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        var d = angular.copy(a);
        d.templateType = a.templateType.name,
        d.factoryDefault = !1,
        d.setDeviceType(a.deviceModels);
        var e = this.validateVPNForVsmart(d.templateDefinition.server);
        if (!e)
            return a.transitionInProgress = !1,
            g.clear(),
            void g.error("For vsmarts, only VPN 0 and VPN 512 can be configured. VPN other than VPN 0 and VPN 512 has been set in one or more logging servers");
        if (d.setTemplateDefinition(),
        angular.isDefined(d.templateDefinition.server)) {
            var f = this.validateVPN(d.templateDefinition.server.vipValue);
            if (!f)
                return a.transitionInProgress = !1,
                void g.error("All entered VPN ID values must be the same.");
            var h = this.validateSrcIP(d.templateDefinition.server.vipValue);
            if (!h)
                return a.transitionInProgress = !1,
                void g.error("All entered Source Interface values must be the same.")
        }
        this.callUpdateTemplate(d)
    }
    ,
    j
}
function NTPTemplate(a, b, c, d, e, f, g, h, i, j) {
    var k = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            server: [],
            keys: {
                authentication: [],
                trusted: {}
            }
        }
    }
      , l = [];
    k.prototype = new a,
    k.prototype.extendTemplate = function(a) {
        angular.extend(this, _.omit(a, ["$$hashKey"])),
        f.checkNestedProperty(this.templateDefinition, "keys") || angular.extend(this.templateDefinition, {
            keys: {
                trusted: {},
                authentication: []
            }
        });
        var b = this.templateDefinition.keys.trusted;
        this.templateDefinition.keys.trusted = m(),
        this.templateDefinition.keys.trusted.vipType = b.vipType,
        this.templateDefinition.keys.trusted.vipType === c.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (this.templateDefinition.keys.trusted.vipType = c.TEMPLATE_DEF_TYPE_VARIABLE),
        b.vipValue && (this.templateDefinition.keys.trusted.vipValue = f.convertArrayToString(b.vipValue))
    }
    ,
    k.prototype.createServerTable = function() {
        var a = new e({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            addMaxRow: 4,
            rowHeight: 30,
            tableName: "server",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    k.prototype.setServerTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d.name = c.editObjectTemplateField(a.children.name, d.name),
                d.key = c.editObjectTemplateField(a.children.key, d.key),
                d.vpn = c.editObjectTemplateField(a.children.vpn, d.vpn),
                d.version = c.editObjectTemplateField(a.children.version, d.version),
                d["source-interface"] = c.editObjectTemplateField(a.children["source-interface"], d["source-interface"]),
                d.prefer = c.editObjectTemplateField(a.children.prefer, d.prefer),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "Hostname/IP Address",
            property: "name",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.server.children.name.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ntp_server" view-mode="view" ng-model="row.entity.name" data-name="host_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Authentication Key",
            property: "key",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.server.children.key.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ntp_server_auth" view-mode="view" data-key-list="grid.appScope.getAuthenticationTableData()" ng-model="row.entity.key" data-name="server_auth_key_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "VPN",
            property: "vpn",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.server.children.vpn.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ntp_server" view-mode="view" ng-model="row.entity.vpn" data-name="vpn_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Version",
            property: "version",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.server.children.version.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ntp_server" view-mode="view" ng-model="row.entity.version" data-name="version_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Source Interface",
            property: "source-interface",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.server.children["source-interface"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ntp_server" view-mode="view" ng-model="row.entity[\'source-interface\']" data-name="source_interface_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Prefer",
            property: "prefer",
            editable: !1,
            width: "240",
            dataType: "boolean",
            headerTooltip: this.templateDefinition.server.children.prefer.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ntp_server" view-mode="view" ng-model="row.entity.prefer" data-name="prefer_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(this.templateDefinition.server.children),
        a.setNewRowToggleData({
            name: this.templateDefinition.server.children.name,
            key: this.templateDefinition.server.children.key,
            vpn: this.templateDefinition.server.children.vpn,
            version: this.templateDefinition.server.children.version,
            "source-interface": this.templateDefinition.server.children["source-interface"],
            prefer: this.templateDefinition.server.children.prefer
        }),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.server) && angular.isArray(this.templateDefinition.server.vipValue) && this.templateDefinition.server.vipValue.length > 0 && b(this.templateDefinition.server, a.data)
    }
    ,
    k.prototype.createAuthenticationTable = function() {
        var a = new e({
            autoLoad: !0,
            singleSelect: !0,
            dataUid: "$$hashKey",
            addMaxRow: 4,
            columnResizing: !0,
            rowHeight: 30,
            tableName: "authentication",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1,
            minRowsToShow: 5
        }),
        a
    }
    ,
    k.prototype.setAuthenticationTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d.number = c.editObjectTemplateField(a.children.number, d.number),
                d.md5 = c.editObjectTemplateField(a.children.md5, d.md5),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "Authentication Key",
            property: "number",
            editable: !1,
            dataType: "number",
            headerTooltip: this.templateDefinition.keys.authentication.children.number.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ntp_auth" view-mode="view" ng-model="row.entity.number" data-name="auth_key_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Authentication Value",
            property: "md5",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.keys.authentication.children.md5.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ntp_auth" input-type=\'password\' view-mode="view" ng-model="row.entity.md5" data-name="md5_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(this.templateDefinition.keys.authentication.children),
        a.createColumns(d),
        f.checkNestedProperty(this.templateDefinition, "keys", "authentication") && angular.isArray(this.templateDefinition.keys.authentication.vipValue) && this.templateDefinition.keys.authentication.vipValue.length > 0 && b(this.templateDefinition.keys.authentication, a.data)
    }
    ,
    k.prototype.getAuthenticationKeys = function(a, b) {
        return l.length = 0,
        angular.forEach(a, function(a) {
            l.push({
                key: a.number.vipValue,
                value: a.number.vipValue
            })
        }),
        l
    }
    ,
    k.prototype.setTemplateDefinition = function() {
        var a = angular.copy(this.templateDefinition);
        this.templateDefinition = this.omitExtraDefinitionProperty(_.omit(a, ["server", "keys"])),
        this.templateDefinition.keys = this.omitExtraDefinitionProperty(_.omit(a.keys, ["authentication"])),
        a.server.length > 0 && (this.templateDefinition.server = {
            vipType: a.server.length > 0 ? c.TEMPLATE_DEF_TYPE_CONSTANT : c.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(this.omitObjectProperties(a.server), ["name", "key", "vpn", "version", "source-interface", "prefer"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["name"]
        }),
        a.keys.authentication.length > 0 && (this.templateDefinition.keys.authentication = {
            vipType: a.keys.authentication.length > 0 ? c.TEMPLATE_DEF_TYPE_CONSTANT : c.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(this.omitObjectProperties(a.keys.authentication), ["number", "md5"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["number"]
        })
    }
    ,
    k.prototype.validateVPNForVsmart = function(a) {
        var b = _.find(this.deviceType, function(a) {
            return angular.equals(a, "vsmart")
        });
        if (angular.isDefined(b) && angular.isDefined(a) && angular.isArray(a))
            for (var c = 0; c < a.length; c++) {
                var d = a[c];
                if (0 != d.vpn.vipValue && 512 != d.vpn.vipValue)
                    return !1
            }
        return !0
    }
    ,
    k.prototype.add = function(a, b) {
        var c = this;
        if (!c.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        a.transitionInProgress = !0;
        var e = !0;
        if (a.templateDefinition.server.length && angular.forEach(a.templateDefinition.server, function(b) {
            e && b.vpn.vipValue !== a.templateDefinition.server[0].vpn.vipValue && (e = !1)
        }),
        !e)
            return a.transitionInProgress = !1,
            void g.error("All NTP servers must be accessible in the same VPN");
        var f = angular.copy(a);
        f.templateType = a.templateType.name,
        f.factoryDefault = !1,
        f.setDeviceType(a.deviceModels);
        var k = this.validateVPNForVsmart(f.templateDefinition.server);
        return k ? (f.setTemplateDefinition(),
        void d.createGeneralTemplate(f).then(function(b) {
            g.success(h("initialCap")(f.templateType) + " Template created", 2e3),
            i.previousState && i.previousState.name.contains("app.config.template.device.feature") ? (j.pushToFeatureTemplateList(angular.extend(f, {
                templateId: b.templateId
            })),
            a.transitionInProgress = !1,
            i.go(i.previousState.name)) : (a.transitionInProgress = !1,
            i.go("app.config.template.feature", {
                display: "",
                deviceType: "",
                templateType: "",
                templateId: ""
            }))
        }, function(b) {
            a.transitionInProgress = !1,
            g.error(b.error.message + ": " + b.error.details)
        })) : (a.transitionInProgress = !1,
        g.clear(),
        void g.error("For vsmarts, only VPN 0 and VPN 512 can be configured. VPN other than VPN 0 and VPN 512 has been set in one or more radius servers"))
    }
    ,
    k.prototype.edit = function(a, b) {
        var c = this;
        if (!c.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        var d = !0;
        if (a.templateDefinition.server.length && angular.forEach(a.templateDefinition.server, function(b) {
            d && b.vpn.vipValue !== a.templateDefinition.server[0].vpn.vipValue && (d = !1)
        }),
        !d)
            return a.transitionInProgress = !1,
            void g.error("All NTP servers must be accessible in the same VPN");
        var e = angular.copy(a);
        e.templateType = a.templateType.name,
        e.factoryDefault = !1,
        e.setDeviceType(a.deviceModels);
        var f = this.validateVPNForVsmart(e.templateDefinition.server);
        return f ? (e.setTemplateDefinition(),
        void this.callUpdateTemplate(e)) : (a.transitionInProgress = !1,
        g.clear(),
        void g.error("For vsmarts, only VPN 0 and VPN 512 can be configured. VPN other than VPN 0 and VPN 512 has been set in one or more radius servers"))
    }
    ;
    var m = function() {
        return new b({
            key: "trusted",
            description: "Trusted Keys",
            details: "Designate authentication key as trustworthy",
            optionType: ["constant", "variable", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "numberList",
                min: 1,
                max: 65535
            },
            dataPath: ["keys"],
            objectType: "list"
        })
    };
    return k
}
function PimTemplate(a, b, c, d, e, f, g, h, i, j) {
    var k = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            pim: {
                shutdown: {},
                "auto-rp": {},
                "spt-threshold": {},
                "replicator-selection": {},
                interface: []
            }
        }
    };
    return k.prototype = new a,
    k.prototype.createInterfaceTable = function() {
        var a = new d({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "interface",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    k.prototype.setInterfaceTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d.name = c.editObjectTemplateField(a.children.name, d.name),
                d["hello-interval"] = c.editObjectTemplateField(a.children["hello-interval"], d["hello-interval"]),
                d["join-prune-interval"] = c.editObjectTemplateField(a.children["join-prune-interval"], d["join-prune-interval"]),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "Name",
            property: "name",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.pim.interface.children.name.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="pim_if" view-mode="view" ng-model="row.entity.name" data-name="if_name_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Hello Interval",
            property: "hello-interval",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.pim.interface.children["hello-interval"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="pim" view-mode="view" ng-model="row.entity[\'hello-interval\']" data-name="hello_interval_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Join/Prune Interval",
            property: "join-prune-interval",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.pim.interface.children["join-prune-interval"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="pim" view-mode="view" ng-model="row.entity[\'join-prune-interval\']" data-name="join_prune_interval_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(this.templateDefinition.pim.interface.children),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.pim.interface) && angular.isArray(this.templateDefinition.pim.interface.vipValue) && this.templateDefinition.pim.interface.vipValue.length > 0 && b(this.templateDefinition.pim.interface, a.data)
    }
    ,
    k.prototype.setTemplateDefinition = function() {
        var a = this.templateDefinition.pim.interface;
        this.templateDefinition.pim = this.omitExtraDefinitionProperty(_.omit(this.templateDefinition.pim, ["interface"])),
        a.length && (this.templateDefinition.pim.interface = {
            vipType: a.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(this.omitObjectProperties(a), ["name", "hello-interval", "join-prune-interval"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["name"]
        })
    }
    ,
    k
}
function SnmpTemplate(a, b, c, d, e, f, g, h, i, j, k) {
    var l = []
      , m = []
      , n = "V2"
      , o = {
        groups: [],
        communities: [],
        users: []
    }
      , p = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            shutdown: {},
            contact: {},
            name: {},
            location: {},
            view: [],
            community: [],
            trap: {
                target: [],
                targetv3: [],
                group: []
            },
            user: [],
            group: []
        }
    };
    return p.prototype = new a,
    p.prototype.toggleVersion = function(a) {
        n = a
    }
    ,
    p.prototype.createCommunityTable = function() {
        var a = new e({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "community",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    p.prototype.setCommunityTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d.name = c.editObjectTemplateField(a.children.name, d.name),
                d.authorization = c.editObjectTemplateField(a.children.authorization, d.authorization),
                d.view = c.editObjectTemplateField(a.children.view, d.view),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "Community",
            property: "name",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.community.children.name.details,
            minWidth: 300,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="community" view-mode="view" ng-model="row.entity.name" data-name="comm_name_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Authorization",
            property: "authorization",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.community.children.authorization.details,
            minWidth: 260,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="community" view-mode="view" ng-model="row.entity.authorization" data-name="authorization_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "View",
            property: "view",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.community.children.view.details,
            minWidth: 500,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="community" view-mode="view" ng-model="row.entity.view" data-name="view_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        c.templateDefinition.community.children.view = c.editObjectTemplateField(angular.extend(c.templateDefinition.community.children.view, {
            dataType: {
                type: "enum",
                values: l
            }
        }), {
            vipType: c.templateDefinition.community.children.view.defaultOption
        }),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.community) && angular.isArray(this.templateDefinition.community.vipValue) && this.templateDefinition.community.vipValue.length > 0 && b(this.templateDefinition.community, a.data)
    }
    ,
    p.prototype.createViewTable = function() {
        var a = new e({
            tableName: "view",
            singleSelect: !0,
            autoLoad: !0,
            dataUid: "$$hashKey",
            minRowsToShow: 5,
            columnResizing: !0,
            rowHeight: 30,
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a.setAppScope(this.removeTableRow),
        a.setAppScope({
            openModal: function(a, b, c) {
                h.show({
                    templateUrl: "app/configuration/template/feature/modal/views/SNMP/snmpViewOID.html",
                    controller: "SNMPViewOIDModalInstanceCtrl",
                    targetEvent: a,
                    escapeToClose: !1,
                    resolve: {
                        selectedRow: function() {
                            return b
                        },
                        operation: function() {
                            return "view"
                        },
                        snmpViewFormInfo: function() {
                            return null
                        },
                        viewRowIndex: function() {
                            return c
                        },
                        formObject: function() {
                            return {}
                        }
                    }
                }).then(function() {}, function(a) {})
            }
        }),
        a
    }
    ,
    p.prototype.setViewTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(f) {
                f.viewMode = d.viewMode,
                f.name = d.editObjectTemplateField(a.children.name, f.name),
                f["oid-definition"] = e,
                f.oidList = [],
                angular.isDefined(f.oid) && angular.isArray(f.oid.vipValue) && f.oid.vipValue.length > 0 && c(f, f.oid.vipValue),
                b.push(f)
            })
        }
        function c(a, b) {
            angular.forEach(b, function(b) {
                var c = {};
                c.id = d.editObjectTemplateField(a["oid-definition"].id, b.id),
                c.exclude = d.editObjectTemplateField(a["oid-definition"].exclude, b.exclude),
                a.oidList.push(c)
            })
        }
        var d = this
          , e = {
            id: this.templateDefinition.view.children.oid.children.id,
            exclude: this.templateDefinition.view.children.oid.children.exclude
        }
          , f = [{
            title: "Name",
            property: "name",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.view.children.name.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="view"  view-mode="view" ng-model="row.entity.name" data-name="view_name_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "List of OIDs",
            property: "listOfOids",
            editable: !1,
            dataType: "string",
            cellTemplate: '<div class="ui-grid-cell-contents toggleContent"><span  ng-class="row.entity.oidList.length > 0 ? \'link-cell\'  : \'\'" data-ng-click="row.entity.oidList.length > 0 ? grid.appScope.openModal($event, row, rowIndex): return" id="listOids_{{rowRenderIndex}} : return">{{row.entity.oidList.length}}</span></div>'
        }];
        angular.equals(this.viewMode, "view") || f.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i><i class="material-icons md-14 pointerCursor blue" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i> </div>'
        }),
        angular.extend(this.templateDefinition.view.children, {
            "oid-definition": e,
            oidList: []
        }),
        a.createColumns(f),
        angular.isDefined(this.templateDefinition.view) && angular.isArray(this.templateDefinition.view.vipValue) && this.templateDefinition.view.vipValue.length > 0 && b(this.templateDefinition.view, a.data)
    }
    ,
    p.prototype.createTrapTargetTable = function() {
        var a = new e({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "trap_target",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    p.prototype.setTrapTargetTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d["vpn-id"] = c.editObjectTemplateField(a.children["vpn-id"], d["vpn-id"]),
                d.ip = c.editObjectTemplateField(a.children.ip, d.ip),
                d.port = c.editObjectTemplateField(a.children.port, d.port),
                d["group-name"] = c.editObjectTemplateField(a.children["group-name"], d["group-name"]),
                d["community-name"] = c.editObjectTemplateField(a.children["community-name"], d["community-name"]),
                d["source-interface"] = c.editObjectTemplateField(a.children["source-interface"], d["source-interface"]),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "VPN",
            property: "vpn-id",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.trap.target.children["vpn-id"].details,
            minWidth: 200,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity[\'vpn-id\']" data-name="vpn_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "IP Address",
            property: "ip",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.trap.target.children.ip.details,
            minWidth: 300,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity.ip" data-name="ip_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "UDP Port",
            property: "port",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.trap.target.children.port.details,
            minWidth: 200,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity.port" data-name="port_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Trap Group",
            property: "group-name",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.trap.target.children["group-name"].details,
            minWidth: 230,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="trap_target" view-mode="view" ng-model="row.entity[\'group-name\']" data-name="trap_group_name_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Community",
            property: "community-name",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.trap.target.children["community-name"].details,
            minWidth: 230,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="trap_target" view-mode="view" ng-model="row.entity[\'community-name\']" data-name="community_name_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Source Interface",
            property: "source-interface",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.trap.target.children["source-interface"].details,
            minWidth: 200,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="trap_target" view-mode="view" ng-model="row.entity[\'source-interface\']" data-name="source_interface_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        c.templateDefinition.trap.target.children["group-name"] = c.editObjectTemplateField(angular.extend(c.templateDefinition.trap.target.children["group-name"], {
            dataType: {
                type: "enum",
                values: o.groups
            }
        }), {
            vipType: this.templateDefinition.trap.target.children["group-name"].defaultOption
        }),
        c.templateDefinition.trap.target.children["community-name"] = c.editObjectTemplateField(angular.extend(c.templateDefinition.trap.target.children["community-name"], {
            dataType: {
                type: "enum",
                values: o.communities
            }
        }), {
            vipType: c.templateDefinition.trap.target.children["community-name"].defaultOption
        }),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.trap) && angular.isDefined(this.templateDefinition.trap.target) && angular.isArray(this.templateDefinition.trap.target.vipValue) && this.templateDefinition.trap.target.vipValue.length > 0 && "V2" === n && b(this.templateDefinition.trap.target, a.data)
    }
    ,
    p.prototype.createTrapTargetV3Table = function() {
        var a = new e({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "trap_target_V3",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    p.prototype.setTrapTargetV3Table = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d["vpn-id"] = c.editObjectTemplateField(a.children["vpn-id"], d["vpn-id"]),
                d.ip = c.editObjectTemplateField(a.children.ip, d.ip),
                d.port = c.editObjectTemplateField(a.children.port, d.port),
                d["group-name"] = c.editObjectTemplateField(a.children["group-name"], d["group-name"]),
                d.user = c.editObjectTemplateField(a.children.user, d.user),
                d["source-interface"] = c.editObjectTemplateField(a.children["source-interface"], d["source-interface"]),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "VPN",
            property: "vpn-id",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.trap.target.children["vpn-id"].details,
            minWidth: 200,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity[\'vpn-id\']" data-name="vpn_id_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "IP Address",
            property: "ip",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.trap.target.children.ip.details,
            minWidth: 200,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity.ip" data-name="ip_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "UDP Port",
            property: "port",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.trap.target.children.port.details,
            minWidth: 200,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity.port" data-name="port_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Trap Group",
            property: "group-name",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.trap.target.children["group-name"].details,
            minWidth: 200,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="trap_target" view-mode="view" ng-model="row.entity[\'group-name\']" data-name="group_name_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "User Name",
            property: "user",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.trap.target.children.user.details,
            minWidth: 200,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="trap_target" view-mode="view" ng-model="row.entity[\'user\']" data-name="user_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Source Interface",
            property: "source-interface",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.trap.target.children["source-interface"].details,
            minWidth: 200,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="trap_target" view-mode="view" ng-model="row.entity[\'source-interface\']" data-name="source_interface{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        c.templateDefinition.trap.target.children["group-name"] = c.editObjectTemplateField(angular.extend(this.templateDefinition.trap.target.children["group-name"], {
            dataType: {
                type: "enum",
                values: o.groups
            }
        }), {
            vipType: this.templateDefinition.trap.target.children["group-name"].defaultOption
        }),
        c.templateDefinition.trap.target.children.users = c.editObjectTemplateField(angular.extend(this.templateDefinition.trap.target.children.user, {
            dataType: {
                type: "enum",
                values: o.users
            }
        }), {
            vipType: this.templateDefinition.trap.target.children.user.defaultOption
        }),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.trap) && angular.isDefined(this.templateDefinition.trap.target) && angular.isArray(this.templateDefinition.trap.target.vipValue) && this.templateDefinition.trap.target.vipValue.length > 0 && "V3" === n && b(this.templateDefinition.trap.target, a.data)
    }
    ,
    p.prototype.createTrapGroupTable = function() {
        var a = new e({
            tableName: "trap_group",
            singleSelect: !0,
            autoLoad: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a.setAppScope(this.removeTableRow),
        a.setAppScope({
            openModal: function(a, b, c) {
                h.show({
                    templateUrl: "app/configuration/template/feature/modal/views/SNMP/snmpTrapType.html",
                    controller: "SNMPTrapTypeModalInstanceCtrl",
                    targetEvent: a,
                    escapeToClose: !1,
                    resolve: {
                        selectedRow: function() {
                            return b
                        },
                        operation: function() {
                            return "view"
                        },
                        snmpTrapGroupFormInfo: function() {
                            return null
                        },
                        trapGroupRowIndex: function() {
                            return c
                        },
                        formObject: function() {
                            return {}
                        }
                    }
                }).then(function() {}, function(a) {})
            }
        }),
        a
    }
    ,
    p.prototype.setTrapGroupTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(f) {
                f["group-name"] = d.editObjectTemplateField(a.children["group-name"], f["group-name"]),
                f["module-definition"] = e,
                f.viewMode = d.viewMode,
                f.moduleList = [],
                angular.isDefined(f.enable) && angular.isArray(f.enable.vipValue) && f.enable.vipValue.length > 0 && c(f, f.enable.vipValue),
                b.push(f)
            })
        }
        function c(a, b) {
            angular.forEach(b, function(b) {
                var c = {};
                c.module = d.editObjectTemplateField(a["module-definition"].module, b.module),
                c.level = d.editObjectTemplateField(a["module-definition"].level, b.level),
                angular.isDefined(c.level.vipValue) && angular.isArray(c.level.vipValue) && c.level.vipValue.length > 0 && (c.level.dataType.default = [],
                angular.forEach(c.level.vipValue, function(a) {
                    c.level.dataType.default.push(a)
                })),
                a.moduleList.push(c)
            })
        }
        var d = this
          , e = {
            module: this.templateDefinition.trap.group.children.enable.children.module,
            level: this.templateDefinition.trap.group.children.enable.children.level
        }
          , f = [{
            title: "Trap Group Name",
            property: "group-name",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.trap.group.children["group-name"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="trap-group" view-mode="view" ng-model="row.entity[\'group-name\']" data-name="group_name_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Trap Type Modules",
            property: "modules",
            editable: !1,
            dataType: "string",
            cellTemplate: '<div class="ui-grid-cell-contents toggleContent"><span ng-class="row.entity.moduleList.length > 0 ? \'link-cell\'  : \'\'" id="modules_{{rowRenderIndex}}" data-ng-click="row.entity.moduleList.length > 0 ? grid.appScope.openModal($event, row, rowIndex) : return">{{row.entity.moduleList.length}}</span></div>'
        }];
        angular.equals(this.viewMode, "view") || f.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i><i class="material-icons md-14 pointerCursor blue" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        angular.extend(this.templateDefinition.trap.group.children, {
            "module-definition": e,
            moduleList: []
        }),
        a.createColumns(f),
        angular.isDefined(this.templateDefinition.trap.group) && angular.isArray(this.templateDefinition.trap.group.vipValue) && this.templateDefinition.trap.group.vipValue.length > 0 && b(this.templateDefinition.trap.group, a.data)
    }
    ,
    p.prototype.createGroupTable = function() {
        var a = new e({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "group",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a.setAppScope(this.removeTableRow),
        a
    }
    ,
    p.prototype.setGroupTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d.name = c.editObjectTemplateField(a.children.name, d.name),
                d["security-level"] = c.editObjectTemplateField(a.children["security-level"], d["security-level"]),
                d.view = c.editObjectTemplateField(a.children.view, d.view),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "Group Name",
            property: "name",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.group.children.name.details,
            minWidth: 230,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity[\'name\']" data-name="name_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Security Level",
            property: "security-level",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.group.children["security-level"].details,
            minWidth: 230,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity[\'security-level\']" data-name="security_level_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "View",
            property: "view",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.group.children.view.details,
            minWidth: 230,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="snmp_group" view-mode="view" ng-model="row.entity[\'view\']" data-name="view_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        c.templateDefinition.group.children.view = c.editObjectTemplateField(angular.extend(this.templateDefinition.group.children.view, {
            dataType: {
                type: "enum",
                values: l
            }
        }), {
            vipType: this.templateDefinition.group.children.view.defaultOption
        }),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.group) && angular.isArray(this.templateDefinition.group.vipValue) && this.templateDefinition.group.vipValue.length > 0 && b(this.templateDefinition.group, a.data)
    }
    ,
    p.prototype.createUserTable = function() {
        var a = new e({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "group",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    p.prototype.setUserTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d.name = c.editObjectTemplateField(a.children.name, d.name),
                d.auth = c.editObjectTemplateField(a.children.auth, d.auth),
                d["auth-password"] = c.editObjectTemplateField(a.children["auth-password"], d["auth-password"]),
                d.priv = c.editObjectTemplateField(a.children.priv, d.priv),
                d["priv-password"] = c.editObjectTemplateField(a.children["priv-password"], d["priv-password"]),
                d.group = c.editObjectTemplateField(a.children.group, d.group),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "Username",
            property: "name",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.user.children.name.details,
            minWidth: 200,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="snmp_user" view-mode="view" ng-model="row.entity[\'name\']" data-name="name_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Authentication Type",
            property: "auth",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.user.children.auth.details,
            minWidth: 250,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="snmp_user" view-mode="view" ng-model="row.entity[\'auth\']" data-name="auth_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Authentication Password",
            property: "auth-password",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.user.children["auth-password"].details,
            minWidth: 250,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="snmp_user" view-mode="view" ng-model="row.entity[\'auth-password\']" input-type="password" data-name="auth_password_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Privacy Type",
            property: "priv",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.user.children.priv.details,
            minWidth: 250,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="snmp_user" view-mode="view" ng-model="row.entity[\'priv\']" data-name="priv_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Privacy Password",
            property: "priv-password",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.user.children["priv-password"].details,
            minWidth: 250,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="snmp_user" view-mode="view" ng-model="row.entity[\'priv-password\']" input-type="password" data-name="priv_password{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "User Group",
            property: "group",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.user.children.group.details,
            minWidth: 250,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="snmp_user"  view-mode="view" ng-model="row.entity[\'group\']" data-name="group{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        c.templateDefinition.user.children.group = c.editObjectTemplateField(angular.extend(c.templateDefinition.user.children.group, {
            dataType: {
                type: "enum",
                values: m
            }
        }), {
            vipType: this.templateDefinition.user.children.group.defaultOption
        }),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.user) && angular.isArray(this.templateDefinition.user.vipValue) && this.templateDefinition.user.vipValue.length > 0 && b(this.templateDefinition.user, a.data)
    }
    ,
    p.prototype.updateCommunityViewsList = function(a, c, d) {
        return l.reset(),
        angular.forEach(a, function(a) {
            l.push({
                key: a.name.vipValue,
                value: a.name.vipValue
            })
        }),
        d.dataType.values = angular.copy(l),
        d.dataType.values.length > 0 && "_blank" !== d.dataType.values[0].key && d.dataType.values.splice(0, 0, {
            key: "_blank",
            value: "-- Choose --"
        }),
        angular.isUndefined(d.vipValue) && (d.vipValue = "_blank"),
        c && angular.forEach(c.data, function(a) {
            a.view.defaultOption = a.view.vipType ? a.view.vipType : a.view.defaultOption,
            a.view.dataType.default = a.view.vipValue ? a.view.vipValue : a.view.dataType.default,
            a.view.dataType.values = angular.copy(l),
            a.view.vipType === b.TEMPLATE_DEF_TYPE_CONSTANT && l.map(function(a) {
                return a.key
            }).indexOf(a.view.vipValue) < 0 && (a.view.vipValue = "_blank",
            a.view.dataType.values.splice(0, 0, {
                key: "_blank",
                value: "-- Choose --"
            }))
        }),
        l
    }
    ,
    p.prototype.updateUserGroupsList = function(a, c, d) {
        return m.length = 0,
        angular.forEach(a, function(a) {
            m.push({
                key: a.name.vipValue,
                value: a.name.vipValue
            })
        }),
        d.dataType.values = angular.copy(m),
        d.dataType.values.length > 0 && "_blank" !== d.dataType.values[0].key && d.dataType.values.splice(0, 0, {
            key: "_blank",
            value: "-- Choose --"
        }),
        angular.isUndefined(d.vipValue) && (d.vipValue = "_blank"),
        c && angular.forEach(c.data, function(a) {
            a.group.defaultOption = a.group.vipType ? a.group.vipType : a.group.defaultOption,
            a.group.dataType.default = a.group.vipValue ? a.group.vipValue : a.group.dataType.default,
            a.group.dataType.values = angular.copy(m),
            a.group.vipType === b.TEMPLATE_DEF_TYPE_CONSTANT && m.map(function(a) {
                return a.key
            }).indexOf(a.group.vipValue) < 0 && (a.group.vipValue = "_blank",
            a.group.dataType.values.splice(0, 0, {
                key: "_blank",
                value: "-- Choose --"
            }))
        }),
        m
    }
    ,
    p.prototype.updateTrapTargetGroupsAndCommunitiesList = function(a, c, d, e, f, g) {
        return o.groups.reset(),
        o.communities.reset(),
        o.users.reset(),
        angular.forEach(a, function(a) {
            o.groups.push({
                key: a["group-name"].vipValue,
                value: a["group-name"].vipValue
            })
        }),
        "V2" === n ? angular.forEach(c, function(a) {
            o.communities.push({
                key: a.name.vipValue,
                value: a.name.vipValue
            })
        }) : angular.forEach(c, function(a) {
            o.users.push({
                key: a.name.vipValue,
                value: a.name.vipValue
            })
        }),
        d && angular.forEach(d.data, function(a) {
            a["group-name"].defaultOption = a["group-name"].vipType ? a["group-name"].vipType : a["group-name"].defaultOption,
            a["group-name"].dataType.default = a["group-name"].vipValue ? a["group-name"].vipValue : a["group-name"].dataType.default,
            a["group-name"].dataType.values = angular.copy(o.groups),
            a["group-name"].vipType === b.TEMPLATE_DEF_TYPE_CONSTANT && o.groups.map(function(a) {
                return a.key
            }).indexOf(a["group-name"].vipValue) < 0 && (a["group-name"].vipValue = "_blank",
            a["group-name"].dataType.values.splice(0, 0, {
                key: "_blank",
                value: "-- Choose --"
            })),
            a["group-name"].vipType === b.TEMPLATE_DEF_TYPE_VARIABLE && o.groups.map(function(a) {
                return a.key
            }).indexOf(a["group-name"].vipValue) < 0 && (a["group-name"].vipValue = "_empty",
            a["group-name"].dataType.values.splice(0, 0, {
                key: "_empty",
                value: ""
            })),
            "V2" === n ? (a["community-name"].defaultOption = a["community-name"].vipType ? a["community-name"].vipType : a["community-name"].defaultOption,
            a["community-name"].dataType.default = a["community-name"].vipValue ? a["community-name"].vipValue : a["community-name"].dataType.default,
            a["community-name"].dataType.values = angular.copy(o.communities),
            a["community-name"].vipType === b.TEMPLATE_DEF_TYPE_CONSTANT && o.communities.map(function(a) {
                return a.key
            }).indexOf(a["community-name"].vipValue) < 0 && (a["community-name"].vipValue = "_blank",
            a["community-name"].dataType.values.splice(0, 0, {
                key: "_blank",
                value: "-- Choose --"
            })),
            a["community-name"].vipType === b.TEMPLATE_DEF_TYPE_VARIABLE && o.communities.map(function(a) {
                return a.key
            }).indexOf(a["community-name"].vipValue) < 0 && (a["community-name"].vipValue = "_empty",
            a["community-name"].dataType.values.splice(0, 0, {
                key: "_empty",
                value: ""
            }))) : (a.user.defaultOption = a.user.vipType ? a.user.vipType : a.user.defaultOption,
            a.user.dataType.default = a.user.vipValue ? a.user.vipValue : a.user.dataType.default,
            a.user.dataType.values = angular.copy(o.users),
            a.user.vipType === b.TEMPLATE_DEF_TYPE_CONSTANT && o.users.map(function(a) {
                return a.key
            }).indexOf(a.user.vipValue) < 0 && (a.user.vipValue = "_blank",
            a.user.dataType.values.splice(0, 0, {
                key: "_blank",
                value: "-- Choose --"
            })))
        }),
        e.dataType.values = angular.copy(o.groups),
        e.dataType.values.length > 0 && "_blank" !== e.dataType.values[0].key && e.dataType.values.splice(0, 0, {
            key: "_blank",
            value: "-- Choose --"
        }),
        angular.isUndefined(e.vipValue) && (e.vipValue = "_blank"),
        f.dataType.values = angular.copy(o.communities),
        f.dataType.values.length > 0 && "_blank" !== f.dataType.values[0].key && f.dataType.values.splice(0, 0, {
            key: "_blank",
            value: "-- Choose --"
        }),
        angular.isUndefined(f.vipValue) && (f.vipValue = "_blank"),
        g.dataType.values = angular.copy(o.users),
        g.dataType.values.length > 0 && "_blank" !== g.dataType.values[0].key && g.dataType.values.splice(0, 0, {
            key: "_blank",
            value: "-- Choose --"
        }),
        angular.isUndefined(g.vipValue) && (g.vipValue = "_blank"),
        o
    }
    ,
    p.prototype.setTemplateDefinition = function() {
        var a = this.templateDefinition;
        this.templateDefinition = this.omitExtraDefinitionProperty(_.omit(a, ["view", "community", "trap", "group", "user"])),
        a.view.length > 0 && (this.templateDefinition.view = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.constructView(a.view),
            vipObjectType: "tree",
            vipPrimaryKey: ["name"]
        }),
        a.community.length > 0 && (this.templateDefinition.community = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.addPriorityField(this.omitObjectProperties(a.community), ["name", "authorization", "view"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["name"]
        }),
        a.group.length > 0 && (this.templateDefinition.group = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.addPriorityField(this.omitObjectProperties(a.group), ["name", "security-level", "view"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["name", "security-level"]
        }),
        a.user.length > 0 && (this.templateDefinition.user = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.addPriorityField(this.omitObjectProperties(a.user), ["name", "auth", "auth-password", "priv", "priv-password", "group"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["name"]
        }),
        "V2" === n ? this.templateDefinition.trap = {
            group: {
                vipType: b.TEMPLATE_DEF_TYPE_IGNORE,
                vipValue: [],
                vipObjectType: "tree",
                vipPrimaryKey: ["group-name"]
            },
            target: {
                vipType: b.TEMPLATE_DEF_TYPE_IGNORE,
                vipValue: [],
                vipObjectType: "tree",
                vipPrimaryKey: ["vpn-id", "ip", "port"]
            }
        } : this.templateDefinition.trap = {
            group: {
                vipType: b.TEMPLATE_DEF_TYPE_IGNORE,
                vipValue: [],
                vipObjectType: "tree",
                vipPrimaryKey: ["group-name"]
            },
            targetv3: {
                vipType: b.TEMPLATE_DEF_TYPE_IGNORE,
                vipValue: [],
                vipObjectType: "tree",
                vipPrimaryKey: ["vpn-id", "ip", "port"]
            }
        },
        a.trap.group.length > 0 && (this.templateDefinition.trap.group = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.constructTrapGroup(a.trap.group),
            vipObjectType: "tree",
            vipPrimaryKey: ["group-name"]
        }),
        (a.trap.target.length > 0 || a.trap.targetv3.length > 0) && ("V2" === n ? this.templateDefinition.trap.target = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.addPriorityField(this.omitObjectProperties(a.trap.target), ["vpn-id", "ip", "port", "group-name", "community-name", "source-interface"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["vpn-id", "ip", "port"]
        } : this.templateDefinition.trap.target = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.addPriorityField(this.omitObjectProperties(a.trap.targetv3), ["vpn-id", "ip", "port", "group-name", "user", "source-interface"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["vpn-id", "ip", "port"]
        }),
        delete this.templateDefinition.trap.targetv3
    }
    ,
    p.prototype.validateCommunityViews = function(a, c) {
        var d = [];
        if (angular.forEach(c, function(a) {
            d.push(a.name.vipValue)
        }),
        angular.isDefined(a))
            for (var e = 0; e < a.length; e++)
                if (f.isUndefinedOrEmpty(a[e].view) || angular.equals(a[e].view.vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && _.indexOf(d, a[e].view.vipValue) < 0)
                    return !1;
        return !0
    }
    ,
    p.prototype.validateTrapTargets = function(a) {
        if (angular.isDefined(a))
            for (var b = 0; b < a.length; b++) {
                if (f.isUndefinedOrEmpty(a[b]["group-name"]) || f.isUndefinedOrEmpty(a[b]["group-name"].vipValue) || angular.isArray(a[b]["group-name"].vipValue) && 0 === a[b]["group-name"].vipValue.length)
                    return !1;
                if ("V2" === n) {
                    if (f.isUndefinedOrEmpty(a[b]["community-name"]) || f.isUndefinedOrEmpty(a[b]["community-name"].vipValue) || angular.isArray(a[b]["community-name"].vipValue) && 0 === a[b]["community-name"].vipValue.length)
                        return !1
                } else if (f.isUndefinedOrEmpty(a[b].user) || f.isUndefinedOrEmpty(a[b].user.vipValue) || angular.isArray(a[b].user.vipValue) && 0 === a[b].user.vipValue.length)
                    return !1
            }
        return !0
    }
    ,
    p.prototype.validateTrapGroups = function(a) {
        if (angular.isDefined(a))
            for (var b = 0; b < a.length; b++)
                if (f.checkNestedProperty(a[b], "enable", "vipValue") && angular.isArray(a[b].enable.vipValue))
                    for (var c = 0; c < a[b].enable.vipValue.length; c++)
                        if (angular.isDefined(a[b].enable.vipValue[c].level) && angular.equals(a[b].enable.vipValue[c].level.vipType, "constant") && (f.isUndefinedOrEmpty(a[b].enable.vipValue[c].level.vipValue) || 0 === a[b].enable.vipValue[c].level.vipValue.length))
                            return !1;
        return !0
    }
    ,
    p.prototype.constructView = function(a) {
        function c(a) {
            return angular.forEach(a, function(a) {
                a.id = d.omitObjectProperties(a.id),
                a.exclude = d.omitObjectProperties(a.exclude)
            }),
            a
        }
        var d = this
          , e = [];
        return angular.forEach(a, function(a) {
            e = ["name"],
            a.name = d.omitObjectProperties(a.name),
            a.oidList && (a.oidList.length > 0 ? (e.push("oid"),
            a.oid = {
                vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                vipValue: d.addPriorityField(c(a.oidList), ["id", "exclude"]),
                vipObjectType: "tree",
                vipPrimaryKey: ["id"]
            }) : delete a.oid,
            delete a.oidList),
            delete a["oid-definition"],
            a["priority-order"] = angular.copy(e),
            e = []
        }),
        a
    }
    ,
    p.prototype.constructTrapGroup = function(a) {
        function c(a) {
            return angular.forEach(a, function(a) {
                a.module = d.omitObjectProperties(a.module),
                a.level = {
                    vipType: a.level.vipType,
                    vipValue: a.level.vipValue,
                    vipObjectType: "list",
                    vipVariableName: a.level.vipVariableName
                },
                a.level.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE && (a.level.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE_NAME)
            }),
            a
        }
        var d = this
          , e = [];
        return angular.forEach(a, function(a) {
            e = ["group-name"],
            a["group-name"] = d.omitObjectProperties(a["group-name"]),
            a.moduleList && (a.moduleList.length > 0 && (e.push("enable"),
            a.enable = {
                vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                vipValue: d.addPriorityField(c(a.moduleList), ["module", "level"]),
                vipObjectType: "tree",
                vipPrimaryKey: ["module"]
            }),
            delete a.moduleList),
            delete a["module-definition"],
            a["priority-order"] = angular.copy(e),
            e = []
        }),
        a
    }
    ,
    p.prototype.validateVPNForVsmart = function(a) {
        var b = _.find(this.deviceType, function(a) {
            return angular.equals(a, "vsmart")
        });
        if (angular.isDefined(b) && angular.isDefined(a) && angular.isArray(a))
            for (var c = 0; c < a.length; c++) {
                var d = a[c];
                if (0 != d["vpn-id"].vipValue && 512 != d["vpn-id"].vipValue)
                    return !1
            }
        return !0
    }
    ,
    p.prototype.validateModuleList = function(a) {
        for (var b = 0; b < a.length; b++)
            if (0 == a[b].moduleList.length)
                return !1;
        return !0
    }
    ,
    p.prototype.add = function(a, b) {
        var c = this;
        if (!c.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        a.transitionInProgress = !0;
        var e = angular.copy(a);
        e.templateType = a.templateType.name,
        e.factoryDefault = !1,
        e.setDeviceType(a.deviceModels);
        var f = this.validateVPNForVsmart(e.templateDefinition.trap.target);
        return f ? e.templateDefinition.trap.group.length > 0 && !this.validateModuleList(e.templateDefinition.trap.group) ? (a.transitionInProgress = !1,
        void g.error("Module List is missing in one or more trap groups")) : (e.setTemplateDefinition(),
        angular.isDefined(e.templateDefinition.community) && angular.isDefined(e.templateDefinition.community.vipValue) && !this.validateCommunityViews(e.templateDefinition.community.vipValue, e.templateDefinition.view.vipValue) ? (g.error("Views missing for one or more communities"),
        void (a.transitionInProgress = !1)) : angular.isDefined(e.templateDefinition.group) && angular.isDefined(e.templateDefinition.group.vipValue) && !this.validateCommunityViews(e.templateDefinition.group.vipValue, e.templateDefinition.view.vipValue) ? (g.error("Views missing for one or more groups"),
        void (a.transitionInProgress = !1)) : angular.isDefined(e.templateDefinition.trap.target) && angular.isDefined(e.templateDefinition.trap.target.vipValue) && !this.validateTrapTargets(e.templateDefinition.trap.target.vipValue) ? ("V2" === n ? g.error("Groups/Communities missing for one or more trap target") : g.error("Groups/Users missing for one or more trap target"),
        void (a.transitionInProgress = !1)) : angular.isDefined(e.templateDefinition.trap.group) && angular.isDefined(e.templateDefinition.trap.group.vipValue) && !this.validateTrapGroups(e.templateDefinition.trap.group.vipValue) ? (g.error("Severity level missing in for one or more trap group modules"),
        void (a.transitionInProgress = !1)) : void d.createGeneralTemplate(e).then(function(b) {
            g.success(i("initialCap")(e.templateType) + " Template created", 2e3),
            j.previousState && j.previousState.name.contains("app.config.template.device.feature") ? (k.pushToFeatureTemplateList(angular.extend(e, {
                templateId: b.templateId
            })),
            a.transitionInProgress = !1,
            j.go(j.previousState.name)) : (a.transitionInProgress = !1,
            j.go("app.config.template.feature", {
                display: "",
                deviceType: "",
                templateType: "",
                templateId: ""
            }))
        }, function(b) {
            a.transitionInProgress = !1,
            g.error(b.error.message + ": " + b.error.details)
        })) : (a.transitionInProgress = !1,
        void g.error("For vsmarts, only VPN 0 and VPN 512 can be configured. VPN other than VPN 0 and VPN 512 has been set in one or more trap targets servers"))
    }
    ,
    p.prototype.edit = function(a, b) {
        var c = this;
        if (!c.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        var d = angular.copy(a);
        d.templateType = a.templateType.name,
        d.factoryDefault = !1,
        d.setDeviceType(a.deviceModels);
        var e = this.validateVPNForVsmart(d.templateDefinition.trap.target);
        return e ? d.templateDefinition.trap.group.length > 0 && !this.validateModuleList(d.templateDefinition.trap.group) ? (a.transitionInProgress = !1,
        void g.error("Module List is missing in one or more trap groups")) : (d.setTemplateDefinition(),
        angular.isDefined(d.templateDefinition.community) && angular.isDefined(d.templateDefinition.community.vipValue) && !this.validateCommunityViews(d.templateDefinition.community.vipValue, d.templateDefinition.view.vipValue) ? void g.error("Views missing for one or more communities") : angular.isDefined(d.templateDefinition.group) && angular.isDefined(d.templateDefinition.group.vipValue) && !this.validateCommunityViews(d.templateDefinition.group.vipValue, d.templateDefinition.view.vipValue) ? void g.error("Views missing for one or more communities") : angular.isDefined(d.templateDefinition.trap.target) && angular.isDefined(d.templateDefinition.trap.target.vipValue) && !this.validateTrapTargets(d.templateDefinition.trap.target.vipValue) ? void ("V2" === n ? g.error("Groups/Communities missing for one or more trap target") : g.error("Groups/Users missing for one or more trap target")) : angular.isDefined(d.templateDefinition.trap.group) && angular.isDefined(d.templateDefinition.trap.group.vipValue) && !this.validateTrapGroups(d.templateDefinition.trap.group.vipValue) ? void g.error("Severity level missing in for one or more trap group modules") : void this.callUpdateTemplate(d)) : (a.transitionInProgress = !1,
        void g.error("For vsmarts, only VPN 0 and VPN 512 can be configured. VPN other than VPN 0 and VPN 512 has been set in one or more trap targets servers"))
    }
    ,
    p
}
function VedgeBfdTemplate(a, b, c, d) {
    var e = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            "app-route": {
                multiplier: {},
                "poll-interval": {}
            },
            color: []
        }
    };
    return e.prototype = new a,
    e.prototype.createColorTable = function() {
        var a = new d({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "color",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    e.prototype.setColorTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d.color = c.editObjectTemplateField(a.children.color, d.color),
                d["hello-interval"] = c.editObjectTemplateField(a.children["hello-interval"], d["hello-interval"]),
                d.multiplier = c.editObjectTemplateField(a.children.multiplier, d.multiplier),
                d["pmtu-discovery"] = c.editObjectTemplateField(a.children["pmtu-discovery"], d["pmtu-discovery"]),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "Color",
            property: "color",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.color.children.color.details,
            minWidth: 230,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="bfd" view-mode="view" ng-model="row.entity.color" data-name="color_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Hello Interval",
            property: "hello-interval",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.color.children["hello-interval"].details,
            minWidth: 230,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="bfd" view-mode="view" ng-model="row.entity[\'hello-interval\']" data-name="hello_interval_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Multiplier",
            property: "multiplier",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.color.children.multiplier.details,
            minWidth: 230,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="bfd" view-mode="view" ng-model="row.entity.multiplier" data-name="color_multiplier_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Path MTU",
            property: "pmtu-discovery",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.color.children["pmtu-discovery"].details,
            minWidth: 260,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="bfd" view-mode="view" ng-model="row.entity[\'pmtu-discovery\']" data-name="pmtu_discovery_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            width: 100,
            isRightPinned: !0,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(this.templateDefinition.color.children),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.color) && angular.isArray(this.templateDefinition.color.vipValue) && this.templateDefinition.color.vipValue.length > 0 && b(this.templateDefinition.color, a.data)
    }
    ,
    e.prototype.setTemplateDefinition = function() {
        var a = this.templateDefinition.color;
        this.templateDefinition = this.omitExtraDefinitionProperty(_.omit(this.templateDefinition, ["color"])),
        this.templateDefinition.color = {
            vipType: a.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(this.omitObjectProperties(a), ["color", "hello-interval", "multiplier", "pmtu-discovery"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["color"]
        }
    }
    ,
    e
}
function VedgeBgpTemplate(a, b, c, d, e, f, g, h, i, j, k, l) {
    function m(a, b, c, e) {
        return new d({
            key: "address-family-enable",
            description: "Address Family",
            details: "Address Family",
            optionType: ["constant", "ignore"],
            defaultOption: a,
            dataType: {
                type: "boolean",
                default: b
            },
            objectType: "object",
            vipType: c,
            vipValue: e
        })
    }
    var n = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            bgp: {
                "as-num": {},
                shutdown: {},
                "router-id": {},
                "propagate-aspath": {},
                distance: {
                    external: {},
                    internal: {},
                    local: {}
                },
                timers: {
                    keepalive: {},
                    holdtime: {}
                },
                "best-path": {
                    "compare-router-id": {},
                    med: {
                        "always-compare": {},
                        deterministic: {},
                        "missing-as-worst": {}
                    },
                    "as-path": {
                        "multipath-relax": {}
                    }
                },
                "address-family": [],
                neighbor: []
            }
        }
    };
    n.prototype = new a,
    n.prototype.extendAddressFamily = function() {
        angular.isDefined(this.templateDefinition.bgp["address-family"].vipValue) && this.templateDefinition.bgp["address-family"].vipValue.length > 0 ? this.templateDefinition.bgp["address-family"] = [{
            "maximum-paths": {
                paths: this.editObjectTemplateField(this.templateDefinition.bgp["address-family"].children["maximum-paths"].paths, this.templateDefinition.bgp["address-family"].vipValue[0]["maximum-paths"].paths)
            },
            "family-type": this.editObjectTemplateField(this.templateDefinition.bgp["address-family"].children["family-type"], this.templateDefinition.bgp["address-family"].vipValue[0]["family-type"]),
            "aggregate-address": this.editObjectTemplateField(this.templateDefinition.bgp["address-family"].children["aggregate-address"], this.templateDefinition.bgp["address-family"].vipValue[0]["aggregate-address"]),
            network: this.editObjectTemplateField(this.templateDefinition.bgp["address-family"].children.network, this.templateDefinition.bgp["address-family"].vipValue[0].network),
            redistribute: this.editObjectTemplateField(this.templateDefinition.bgp["address-family"].children.redistribute, this.templateDefinition.bgp["address-family"].vipValue[0].redistribute)
        }] : this.templateDefinition.bgp["address-family"] = [{
            "maximum-paths": {
                paths: this.templateDefinition.bgp["address-family"].children["maximum-paths"].paths
            },
            "family-type": this.templateDefinition.bgp["address-family"].children["family-type"],
            "aggregate-address": this.templateDefinition.bgp["address-family"].children["aggregate-address"],
            network: this.templateDefinition.bgp["address-family"].children.network,
            redistribute: this.templateDefinition.bgp["address-family"].children.redistribute
        }]
    }
    ,
    n.prototype.createAggregateAddressTable = function() {
        var a = new e({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "aggregateAddress",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    n.prototype.setAggregateAddressTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d.prefix = c.editObjectTemplateField(a.children.prefix, d.prefix),
                d["as-set"] = c.editObjectTemplateField(a.children["as-set"], d["as-set"]),
                d["summary-only"] = c.editObjectTemplateField(a.children["summary-only"], d["summary-only"]),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "Prefix",
            property: "prefix",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.bgp["address-family"][0]["aggregate-address"].children.prefix.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="bgp_aggregate" view-mode="view" ng-model="row.entity.prefix" data-name="aggregate_address_prefix_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "AS Set",
            property: "as-set",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.bgp["address-family"][0]["aggregate-address"].children["as-set"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="bgp_aggregate" view-mode="view" ng-model="row.entity[\'as-set\']" data-name="as_set_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Summary Only",
            property: "summary-only",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.bgp["address-family"][0]["aggregate-address"].children["summary-only"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="bgp_aggregate" view-mode="view" ng-model="row.entity[\'summary-only\']" data-name="summary_only_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(this.templateDefinition.bgp["address-family"][0]["aggregate-address"].children),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.bgp["address-family"]) && angular.isArray(this.templateDefinition.bgp["address-family"][0]["aggregate-address"].vipValue) && this.templateDefinition.bgp["address-family"][0]["aggregate-address"].vipValue.length > 0 && b(this.templateDefinition.bgp["address-family"][0]["aggregate-address"], a.data)
    }
    ,
    n.prototype.createRedistributeTable = function() {
        var a = new e({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "redistribute",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    n.prototype.setRedistributeTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d.protocol = c.editObjectTemplateField(a.children.protocol, d.protocol),
                d["route-policy"] = c.editObjectTemplateField(a.children["route-policy"], d["route-policy"]),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "Protocol",
            property: "protocol",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.bgp["address-family"][0].redistribute.children.protocol.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="bgp_redistribute" view-mode="view" ng-model="row.entity.protocol" data-name="protocol_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Route Policy",
            property: "route-policy",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.bgp["address-family"][0].redistribute.children["route-policy"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="bgp_redistribute" view-mode="view" ng-model="row.entity[\'route-policy\']" data-name="route_policy_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(this.templateDefinition.bgp["address-family"][0].redistribute.children),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.bgp["address-family"]) && angular.isArray(this.templateDefinition.bgp["address-family"][0].redistribute.vipValue) && this.templateDefinition.bgp["address-family"][0].redistribute.vipValue.length > 0 && b(this.templateDefinition.bgp["address-family"][0].redistribute, a.data)
    }
    ,
    n.prototype.createNetworkTable = function() {
        var a = new e({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            toolbar: !1
        });
        return a.name = "network",
        a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    n.prototype.setNetworkTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d.prefix = c.editObjectTemplateField(a.children.prefix, d.prefix),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "Network",
            property: "prefix",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.bgp["address-family"][0].network.children.prefix.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="bgp_network" view-mode="view" ng-model="row.entity.prefix" data-name="network_address_prefix_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(this.templateDefinition.bgp["address-family"][0].network.children),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.bgp["address-family"]) && angular.isArray(this.templateDefinition.bgp["address-family"][0].network.vipValue) && this.templateDefinition.bgp["address-family"][0].network.vipValue.length > 0 && b(this.templateDefinition.bgp["address-family"][0].network, a.data)
    }
    ,
    n.prototype.createNeighborTable = function() {
        var a = {
            openMoreNeighborInfoModal: function(a, b) {
                var c = f.show({
                    templateUrl: "app/configuration/template/feature/modal/views/BGP/moreBgpNeighborInfoModal.html",
                    controller: "MoreBgpNeighborInfoModalInstanceCtrl",
                    targetEvent: b,
                    resolve: {
                        selectedRow: function() {
                            return a
                        }
                    }
                });
                c.then(function(a) {})
            }
        }
          , b = new e({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "neighbor",
            toolbar: !1
        });
        return b.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        b.setAppScope(a),
        b
    }
    ,
    n.prototype.setNeighborTable = function(a) {
        function c(a, b) {
            angular.forEach(a.vipValue, function(c) {
                if (c.viewMode = i.viewMode,
                c.address = i.editObjectTemplateField(a.children.address, c.address),
                c.description = i.editObjectTemplateField(a.children.description, c.description),
                c.shutdown = i.editObjectTemplateField(a.children.shutdown, c.shutdown),
                c["remote-as"] = i.editObjectTemplateField(a.children["remote-as"], c["remote-as"]),
                c.timers.keepalive = i.editObjectTemplateField(a.children.timers.keepalive, c.timers.keepalive),
                c.timers.holdtime = i.editObjectTemplateField(a.children.timers.holdtime, c.timers.holdtime),
                c.timers["connect-retry"] = i.editObjectTemplateField(a.children.timers["connect-retry"], c.timers["connect-retry"]),
                c.timers["advertisement-interval"] = i.editObjectTemplateField(a.children.timers["advertisement-interval"], c.timers["advertisement-interval"]),
                g.checkNestedProperty(c["update-source"], "if-name") ? c["update-source-selection"] = "ifname" : c["update-source-selection"] = "ifaddress",
                angular.equals(c["update-source-selection"], "ifaddress") && (c["update-source"]["if-name"] = i.editObjectTemplateField(a.children["update-source"]["if-name"], {}),
                c["update-source"]["if-address"] = i.editObjectTemplateField(a.children["update-source"]["if-address"], c["update-source"]["if-address"])),
                angular.equals(c["update-source-selection"], "ifname") && (c["update-source"]["if-address"] = i.editObjectTemplateField(a.children["update-source"]["if-address"], {}),
                c["update-source"]["if-name"] = i.editObjectTemplateField(a.children["update-source"]["if-name"], c["update-source"]["if-name"])),
                c["next-hop-self"] = i.editObjectTemplateField(a.children["next-hop-self"], c["next-hop-self"]),
                c["send-community"] = i.editObjectTemplateField(a.children["send-community"], c["send-community"]),
                c["send-ext-community"] = i.editObjectTemplateField(a.children["send-ext-community"], c["send-ext-community"]),
                c["capability-negotiate"] = i.editObjectTemplateField(a.children["capability-negotiate"], c["capability-negotiate"]),
                c["ebgp-multihop"] = i.editObjectTemplateField(a.children["ebgp-multihop"], c["ebgp-multihop"]),
                c.password = i.editObjectTemplateField(a.children.password, c.password),
                g.checkNestedProperty(c["address-family"], "vipValue", "0")) {
                    var d = m("constant", "true", "constant", "true");
                    if (angular.extend(d, c["address-family"].vipValue[0]["address-family-enable"]),
                    g.checkNestedProperty(c["address-family"], "vipValue", "0", "route-policy", "vipValue", "0"))
                        var f = e(c["address-family"].vipValue[0]["route-policy"]);
                    else
                        var f = [{
                            in: o,
                            "pol-name": q()
                        }, {
                            out: p,
                            "pol-name": q()
                        }];
                    c["address-family"] = [{
                        "address-family-enable": d,
                        "family-type": i.editObjectTemplateField(a.children["address-family"][0]["family-type"], c["address-family"].vipValue[0]["family-type"]),
                        "maximum-prefixes": {
                            "prefix-num": i.editObjectTemplateField(a.children["address-family"][0]["maximum-prefixes"]["prefix-num"], c["address-family"].vipValue[0]["maximum-prefixes"]["prefix-num"]),
                            threshold: i.editObjectTemplateField(a.children["address-family"][0]["maximum-prefixes"].threshold, c["address-family"].vipValue[0]["maximum-prefixes"].threshold),
                            restart: i.editObjectTemplateField(a.children["address-family"][0]["maximum-prefixes"].restart, c["address-family"].vipValue[0]["maximum-prefixes"].restart),
                            "warning-only": i.editObjectTemplateField(a.children["address-family"][0]["maximum-prefixes"]["warning-only"], c["address-family"].vipValue[0]["maximum-prefixes"]["warning-only"])
                        },
                        policer: f
                    }]
                } else {
                    var d = m("ignore", "false", "ignore", "false");
                    c["address-family"] = [{
                        "address-family-enable": d,
                        "family-type": a.children["address-family"][0]["family-type"],
                        "maximum-prefixes": {
                            "prefix-num": a.children["address-family"][0]["maximum-prefixes"]["prefix-num"],
                            threshold: a.children["address-family"][0]["maximum-prefixes"].threshold,
                            restart: a.children["address-family"][0]["maximum-prefixes"].restart,
                            "warning-only": a.children["address-family"][0]["maximum-prefixes"]["warning-only"]
                        },
                        policer: [{
                            in: o,
                            "pol-name": q()
                        }, {
                            out: p,
                            "pol-name": q()
                        }]
                    }]
                }
                delete c["priority-order"],
                b.push(c)
            })
        }
        function e(a) {
            var b = [];
            if (angular.equals(a.vipValue[0].direction.vipValue, "out"))
                b = [{
                    in: o,
                    "pol-name": q()
                }],
                f(a, 0),
                b.push(a.vipValue[0]);
            else {
                a.vipValue[0]["pol-name"] = h(a.vipValue, 0);
                var c = angular.copy(o);
                c.optionType = ["constant", "ignore"],
                c = new d(c),
                c.vipType = a.vipValue[0].direction.vipType,
                c.vipValue = "true",
                a.vipValue[0].in = c,
                delete a.vipValue[0].direction,
                delete a.vipValue[0]["priority-order"],
                b.push(a.vipValue[0]),
                2 == a.vipValue.length ? (f(a, 1),
                b.push(a.vipValue[1])) : b.push({
                    out: p,
                    "pol-name": q()
                })
            }
            return b
        }
        function f(a, b) {
            var c = angular.copy(p);
            c.optionType = ["constant", "ignore"],
            c = new d(c),
            c.vipType = a.vipValue[b].direction.vipType,
            c.vipValue = "true",
            delete a.vipValue[b].direction,
            delete a.vipValue[b]["priority-order"],
            a.vipValue[b].out = c,
            a.vipValue[b]["pol-name"] = h(a.vipValue, b)
        }
        function h(a, c) {
            var d = q();
            return d.vipType = a[c]["pol-name"].vipType,
            angular.equals(d.vipType, b.TEMPLATE_DEF_TYPE_VARIABLE_NAME) && (d.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE),
            d.vipValue = a[c]["pol-name"].vipValue,
            d
        }
        var i = this
          , j = [{
            title: "Address",
            property: "address",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.bgp.neighbor.children.address.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="bgp_neighbor" view-mode="view" ng-model="row.entity.address" data-name="address_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Description",
            property: "description",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.bgp.neighbor.children.description.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input  custom-prepend-variable-name="bgp_neighbor" view-mode="view" ng-model="row.entity.description" data-name="description_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Remote AS",
            property: "remote-as",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.bgp.neighbor.children["remote-as"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input  custom-prepend-variable-name="bgp_neighbor" view-mode="view" ng-model="row.entity[\'remote-as\']" data-name="remote_as_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Action",
            property: "more",
            editable: !1,
            dataType: "string",
            headerTooltip: "Neighbor details",
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents toggleContent"><span id="more_{{rowRenderIndex}}" class="toggleItem" ng-click="grid.appScope.openMoreNeighborInfoModal(row, $event)">More</span></div>'
        }];
        angular.equals(this.viewMode, "view") || j.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.createColumns(j),
        a.setNewRowToggleData(angular.extend(this.templateDefinition.bgp.neighbor.children, {
            "update-source-selection": "ifaddress",
            "address-family": [{
                "address-family-enable": m("ignore", "false"),
                "family-type": this.templateDefinition.bgp.neighbor.children["address-family"].children["family-type"],
                "maximum-prefixes": {
                    "prefix-num": this.templateDefinition.bgp.neighbor.children["address-family"].children["maximum-prefixes"]["prefix-num"],
                    threshold: this.templateDefinition.bgp.neighbor.children["address-family"].children["maximum-prefixes"].threshold,
                    restart: this.templateDefinition.bgp.neighbor.children["address-family"].children["maximum-prefixes"].restart,
                    "warning-only": this.templateDefinition.bgp.neighbor.children["address-family"].children["maximum-prefixes"]["warning-only"]
                },
                policer: [{
                    in: o,
                    "pol-name": q()
                }, {
                    out: p,
                    "pol-name": q()
                }]
            }]
        })),
        angular.isDefined(this.templateDefinition.bgp.neighbor.vipValue) && this.templateDefinition.bgp.neighbor.vipValue.length > 0 && c(this.templateDefinition.bgp.neighbor, a.data)
    }
    ,
    n.prototype.setTemplateDefinition = function() {
        var a = this
          , c = this.templateDefinition.bgp;
        this.templateDefinition.bgp = this.omitExtraDefinitionProperty(_.omit(this.templateDefinition.bgp, ["address-family", "neighbor"])),
        c["address-family"][0]["aggregate-address"] = {
            vipType: c["address-family"][0]["aggregate-address"].length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(this.omitObjectProperties(c["address-family"][0]["aggregate-address"]), ["prefix", "as-set", "summary-only"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["prefix"]
        },
        c["address-family"][0].network = {
            vipType: c["address-family"][0].network.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(this.omitObjectProperties(c["address-family"][0].network), ["prefix"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["prefix"]
        },
        c["address-family"][0].redistribute = {
            vipType: c["address-family"][0].redistribute.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(this.omitObjectProperties(c["address-family"][0].redistribute), ["protocol", "route-policy"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["protocol"]
        },
        c["address-family"][0]["maximum-paths"].paths = this.omitObjectProperties(c["address-family"][0]["maximum-paths"].paths),
        this.templateDefinition.bgp["address-family"] = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.addPriorityField(this.omitObjectProperties(c["address-family"], ["aggregate-address", "network", "maximum-paths", "redistribute"]), ["family-type", "aggregate-address", "network", "maximum-paths", "redistribute"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["family-type"]
        },
        function b(c) {
            for (var d in c)
                _.indexOf(["update-source-selection", "$hashkey", "viewMode"], d) > -1 || (c[d].hasOwnProperty("optionType") && c[d].hasOwnProperty("dataType") ? (c[d].vipType || (c[d].vipType = "ignore"),
                c[d] = a.omitObjectProperties(c[d])) : b(c[d]))
        }(c.neighbor),
        angular.forEach(c.neighbor, function(c) {
            var d = ["family-type", "maximum-prefixes"];
            angular.equals(c["update-source-selection"], "ifaddress") && angular.isDefined(c["update-source"]["if-name"]) ? delete c["update-source"]["if-name"] : angular.equals(c["update-source-selection"], "ifname") && angular.isDefined(c["update-source"]["if-address"]) && delete c["update-source"]["if-address"],
            "true" == c["address-family"][0]["address-family-enable"].vipValue ? (c["address-family"][0]["route-policy"] = [],
            "true" == c["address-family"][0].policer[1].out.vipValue ? (c["address-family"][0]["route-policy"].splice(1, 0, {
                direction: {
                    vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                    vipValue: "out",
                    vipObjectType: "object"
                },
                "pol-name": a.omitObjectProperties(c["address-family"][0].policer[1]["pol-name"]),
                "priority-order": ["direction", "pol-name"]
            }),
            d.push("route-policy")) : c["address-family"][0].policer.splice(1, 1),
            "true" == c["address-family"][0].policer[0].in.vipValue && (c["address-family"][0]["route-policy"].splice(0, 0, {
                direction: {
                    vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                    vipValue: "in",
                    vipObjectType: "object"
                },
                "pol-name": a.omitObjectProperties(c["address-family"][0].policer[0]["pol-name"]),
                "priority-order": ["direction", "pol-name"]
            }),
            _.indexOf(d, "route-policy") < 0 && d.push("route-policy")),
            delete c["address-family"][0].policer,
            c["address-family"][0]["route-policy"] = {
                vipType: c["address-family"][0]["route-policy"].length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
                vipValue: c["address-family"][0]["route-policy"],
                vipObjectType: "tree",
                vipPrimaryKey: ["direction"]
            },
            c["address-family"][0]["maximum-prefixes"]["prefix-num"].vipType === b.TEMPLATE_DEF_TYPE_IGNORE && (delete c["address-family"][0]["maximum-prefixes"].restart,
            delete c["address-family"][0]["maximum-prefixes"].threshold,
            delete c["address-family"][0]["maximum-prefixes"]["warning-only"]),
            delete c["address-family"][0]["address-family-enable"],
            c["address-family"] = {
                vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                vipValue: a.addPriorityField(c["address-family"], d),
                vipObjectType: "tree",
                vipPrimaryKey: ["family-type"]
            }) : c["address-family"] = {
                vipType: b.TEMPLATE_DEF_TYPE_IGNORE,
                vipValue: [],
                vipObjectType: "tree",
                vipPrimaryKey: ["family-type"]
            },
            d = [],
            delete c["update-source-selection"],
            delete c.viewMode
        }),
        this.templateDefinition.bgp.neighbor = {
            vipType: c.neighbor.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(c.neighbor, ["address", "description", "shutdown", "remote-as", "timers", "update-source", "next-hop-self", "send-community", "send-ext-community", "capability-negotiate", "ebgp-multihop", "password", "address-family"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["address"]
        }
    }
    ,
    n.prototype.add = function(a, b) {
        var d = this;
        if (!d.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        a.transitionInProgress = !0;
        var e = angular.copy(a);
        e.templateType = a.templateType.name,
        e.factoryDefault = !1,
        e.setDeviceType(a.deviceModels),
        e.setTemplateDefinition(),
        c.createGeneralTemplate(e).then(function(b) {
            h.success(i("initialCap")(e.templateType) + " Template created", 2e3),
            j.previousState && j.previousState.name.contains("app.config.template.device.feature") ? (l.setRequiredFlagsForFiltering(e),
            k.pushToFeatureTemplateList(angular.extend(e, {
                templateId: b.templateId
            })),
            a.transitionInProgress = !1,
            j.go(j.previousState.name)) : (a.transitionInProgress = !1,
            j.go("app.config.template.feature", {
                display: "",
                deviceType: "",
                templateType: "",
                templateId: ""
            }))
        }, function(b) {
            a.transitionInProgress = !1,
            h.error(b.error.message + ": " + b.error.details)
        })
    }
    ,
    n.prototype.edit = function(a, b) {
        var c = this;
        if (!c.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        var d = angular.copy(a);
        d.templateType = a.templateType.name,
        d.factoryDefault = !1,
        d.setDeviceType(a.deviceModels),
        d.setTemplateDefinition(),
        this.callUpdateTemplate(d)
    }
    ;
    var o = new d({
        key: "policer-in",
        description: "Route Policy In",
        details: "Set route policy to apply to prefixes received from BGP neighbor",
        optionType: ["constant", "ignore"],
        defaultOption: "ignore",
        dataType: {
            type: "boolean",
            default: "false"
        },
        objectType: "object"
    })
      , p = new d({
        key: "policer-out",
        description: "Route Policy Out",
        details: "Set route policy to apply to prefixes transmitted to BGP neighbor",
        optionType: ["constant", "ignore"],
        defaultOption: "ignore",
        dataType: {
            type: "boolean",
            default: "false"
        },
        objectType: "object"
    })
      , q = function() {
        return new d({
            key: "pol-name",
            description: "Policy Name",
            details: "Configure name of route policy",
            optionType: ["constant", "variable"],
            defaultOption: "constant",
            dataType: {
                type: "string",
                minLength: 1,
                maxLength: 32
            },
            dataPath: [],
            objectType: "object"
        })
    };
    return n
}
function VedgeDhcpServerTemplate(a, b, c, d) {
    var e = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            "address-pool": {},
            exclude: {},
            "max-leases": {},
            "offer-time": {},
            "lease-time": {},
            "admin-state": {},
            options: {
                "interface-mtu": {},
                "domain-name": {},
                "default-gateway": {},
                "dns-servers": {},
                "tftp-servers": {}
            },
            "static-lease": []
        }
    };
    return e.prototype = new a,
    e.prototype.createStaticLeaseTable = function() {
        var a = new d({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    e.prototype.setStaticLeaseTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d["mac-address"] = c.editObjectTemplateField(a.children["mac-address"], d["mac-address"]),
                d.ip = c.editObjectTemplateField(a.children.ip, d.ip),
                d["host-name"] = c.editObjectTemplateField(a.children["host-name"], d["host-name"]),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "MAC Address",
            property: "mac-address",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition["static-lease"].children["mac-address"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="dhcp" view-mode="view" ng-model="row.entity[\'mac-address\']" data-name="mac_address_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "IP Address",
            property: "ip",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition["static-lease"].children.ip.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="dhcp" view-mode="view" ng-model="row.entity.ip" data-name="ip_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Hostname",
            property: "host-name",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition["static-lease"].children["host-name"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="dhcp" view-mode="view" ng-model="row.entity[\'host-name\']" data-name="hostname_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(this.templateDefinition["static-lease"].children),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition["static-lease"]) && angular.isArray(this.templateDefinition["static-lease"].vipValue) && this.templateDefinition["static-lease"].vipValue.length > 0 && b(this.templateDefinition["static-lease"], a.data)
    }
    ,
    e.prototype.setTemplateDefinition = function() {
        var a = this.templateDefinition["static-lease"];
        this.templateDefinition = this.omitExtraDefinitionProperty(_.omit(this.templateDefinition, ["static-lease"])),
        this.templateDefinition["static-lease"] = {
            vipType: a.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(this.omitObjectProperties(a), ["mac-address", "ip", "host-name"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["mac-address"]
        }
    }
    ,
    e
}
function VedgeOmpTemplate(a, b, c, d, e) {
    var f = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            "graceful-restart": {},
            "send-path-limit": {},
            "overlay-as": {},
            "ecmp-limit": {},
            shutdown: {},
            timers: {
                "advertisement-interval": {},
                "graceful-restart-timer": {},
                holdtime: {},
                "eor-timer": {}
            },
            advertise: [{
                bgp: this.createAdvertiseProtocolField("BGP", "false", "Advertise BGP routes")
            }, {
                ospf: this.createAdvertiseProtocolField("OSPF", "false", "Enable/Disable advertisement of OSPF external routes into OMP. Inter-area and Intra-area routes are always advertised, irrespective of this command"),
                external: this.createAdvertiseProtocolField("External", "false", "Advertise OSPF external routes")
            }, {
                connected: this.createAdvertiseProtocolField("Connected", "true", "Advertise Connected routes")
            }, {
                static: this.createAdvertiseProtocolField("Static", "true", "Advertise Static routes")
            }]
        }
    };
    return f.prototype = new a,
    f.prototype.extendTemplate = function(a) {
        function c(a) {
            function c(a, c) {
                a.vipType = c,
                a.vipValue = angular.equals(c, b.TEMPLATE_DEF_TYPE_VARIABLE) ? "false" : "true"
            }
            var e = [{
                bgp: d.createAdvertiseProtocolField("BGP", "false", "Advertise BGP routes")
            }, {
                ospf: d.createAdvertiseProtocolField("OSPF", "false", "Enable/Disable advertisement of OSPF external routes into OMP. Inter-area and Intra-area routes are always advertised, irrespective of this command"),
                external: d.createAdvertiseProtocolField("External", "false", "Advertise OSPF external routes")
            }, {
                connected: d.createAdvertiseProtocolField("Connected", "false", "Advertise Connected routes")
            }, {
                static: d.createAdvertiseProtocolField("Static", "false", "Advertise Static routes")
            }];
            return angular.forEach(a, function(a) {
                switch (a.protocol.vipValue) {
                case "bgp":
                    c(e[0].bgp, a.protocol.vipType);
                    break;
                case "ospf":
                    c(e[1].ospf, a.protocol.vipType),
                    angular.isDefined(a.route) && c(e[1].external, a.route.vipType);
                    break;
                case "connected":
                    c(e[2].connected, a.protocol.vipType);
                    break;
                case "static":
                    c(e[3].static, a.protocol.vipType)
                }
            }),
            e
        }
        var d = this;
        angular.extend(this, _.omit(a, ["$$hashKey"])),
        angular.isDefined(this.templateDefinition.advertise.vipValue) && (this.templateDefinition.advertise = c(this.templateDefinition.advertise.vipValue))
    }
    ,
    f.prototype.setTemplateDefinition = function() {
        var a = []
          , c = this.templateDefinition.advertise;
        this.templateDefinition = this.omitExtraDefinitionProperty(_.omit(this.templateDefinition, ["advertise"])),
        this.templateDefinition.advertise = this.omitExtraDefinitionProperty(c),
        function(c) {
            var d = "protocol";
            angular.forEach(c, function(c) {
                var f = {};
                for (var g in c)
                    (angular.equals(c[g].vipType, b.TEMPLATE_DEF_TYPE_VARIABLE) || angular.equals(c[g].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && "false" != c[g].vipValue) && (angular.equals(g, "external") ? (d = "route",
                    f["priority-order"] = ["protocol", "route"]) : (d = "protocol",
                    f["priority-order"] = ["protocol"]),
                    f[d] = {
                        vipType: c[g].vipType,
                        vipValue: g,
                        vipObjectType: "object"
                    });
                e.isUndefinedOrEmpty(f) || (!angular.isDefined(f.route) || angular.isDefined(f.route) && angular.isDefined(f.protocol) && "ospf" === f.protocol.vipValue) && a.push(f)
            })
        }(this.templateDefinition.advertise),
        this.templateDefinition.advertise = {
            vipType: a.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: a,
            vipObjectType: "tree",
            vipPrimaryKey: ["protocol"]
        }
    }
    ,
    f.prototype.createAdvertiseProtocolField = function(a, b, d) {
        var e = new c({
            key: a.toLowerCase(),
            description: a,
            details: d,
            optionType: ["constant"],
            defaultOption: "constant",
            dataType: {
                type: "boolean",
                default: b
            },
            objectType: "object"
        });
        return e.vipValue = b,
        e
    }
    ,
    f
}
function VedgeSecurityTemplate(a, b, c, d, e, f, g) {
    var h = new c({
        key: "authentication-type",
        description: "Authentication Type",
        details: "Authentication type",
        optionType: ["constant", "variable"],
        defaultOption: "constant",
        objectType: "list"
    })
      , i = {
        dataType: {
            type: "enum",
            values: [{
                key: "none",
                value: "none"
            }, {
                key: "sha1-hmac",
                value: "sha1-hmac"
            }, {
                key: "ah-sha1-hmac",
                value: "ah-sha1-hmac"
            }, {
                key: "ah-no-id",
                value: "ah-no-id"
            }]
        },
        vipValue: []
    }
      , j = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            ipsec: {
                rekey: {},
                "replay-window": {},
                "authentication-type": {},
                authenticationType: angular.copy(h),
                authenticationValue: angular.copy(i)
            }
        }
    };
    return j.prototype = new a,
    j.prototype.extendTemplate = function(a) {
        if (angular.extend(this, _.omit(a, ["$$hashKey"])),
        angular.isDefined(a.templateDefinition) && !f.isUndefinedOrEmpty(a.templateDefinition.ipsec["authentication-type"]))
            if (h.defaultOption = a.templateDefinition.ipsec["authentication-type"].vipType,
            this.templateDefinition.ipsec.authenticationType = h,
            this.templateDefinition.ipsec.authenticationType.vipType = h.defaultOption,
            this.templateDefinition.ipsec.authenticationValue = i,
            this.templateDefinition.ipsec.authenticationValue.vipValue = [],
            a.templateDefinition.ipsec["authentication-type"].vipValue.length > 0) {
                var c = this;
                angular.forEach(a.templateDefinition.ipsec["authentication-type"].vipValue, function(a, b) {
                    "none" === a ? c.templateDefinition.ipsec.authenticationValue.vipValue.push({
                        key: "none",
                        value: "none"
                    }) : "sha1-hmac" === a ? c.templateDefinition.ipsec.authenticationValue.vipValue.push({
                        key: "sha1-hmac",
                        value: "sha1-hmac"
                    }) : "ah-sha1-hmac" === a ? c.templateDefinition.ipsec.authenticationValue.vipValue.push({
                        key: "ah-sha1-hmac",
                        value: "ah-sha1-hmac"
                    }) : "ah-no-id" === a && c.templateDefinition.ipsec.authenticationValue.vipValue.push({
                        key: "ah-no-id",
                        value: "ah-no-id"
                    })
                })
            } else
                this.templateDefinition.ipsec.authenticationType.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (this.templateDefinition.ipsec.authenticationType.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE,
                this.populateDefaultAuthValue(b.TEMPLATE_DEF_TYPE_VARIABLE));
        else
            this.templateDefinition.ipsec.authenticationType.vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
            this.populateDefaultAuthValue(b.TEMPLATE_DEF_TYPE_CONSTANT)
    }
    ,
    j.prototype.populateDefaultAuthValue = function(a) {
        var c = this.templateDefinition.ipsec.authenticationValue;
        c.vipValue.length = 0;
        e.resetMultiSelectList(),
        angular.equals(a, b.TEMPLATE_DEF_TYPE_CONSTANT) ? (c.vipValue = [{
            key: "sha1-hmac",
            value: "sha1-hmac"
        }, {
            key: "ah-sha1-hmac",
            value: "ah-sha1-hmac"
        }],
        c.dataType.values = [{
            key: "none",
            value: "none"
        }, {
            key: "ah-no-id",
            value: "ah-no-id"
        }]) : angular.equals(a, b.TEMPLATE_DEF_TYPE_VARIABLE) || angular.equals(a, b.TEMPLATE_DEF_TYPE_VARIABLE_NAME) ? (c.vipValue = [],
        c.dataType.values = []) : (c.vipValue = [],
        c.dataType.values = [{
            key: "none",
            value: "none"
        }, {
            key: "ah-no-id",
            value: "ah-no-id"
        }, {
            key: "sha1-hmac",
            value: "sha1-hmac"
        }, {
            key: "ah-sha1-hmac",
            value: "ah-sha1-hmac"
        }]),
        e.setMultiSelectData(c.dataType.values, c.vipValue)
    }
    ,
    j.prototype.setTemplateDefinition = function() {
        var a = this.templateDefinition.ipsec.authenticationType;
        this.templateDefinition.ipsec = this.omitExtraDefinitionProperty(_.omit(this.templateDefinition.ipsec, ["authenticationType", "authenticationValue"])),
        this.templateDefinition.ipsec["authentication-type"] = {
            vipType: a.vipType,
            vipValue: _.pluck(e.getSelectedItems(), "key"),
            vipObjectType: "list",
            vipVariableName: a.vipVariableName
        },
        this.templateDefinition.ipsec["authentication-type"].vipType === b.TEMPLATE_DEF_TYPE_VARIABLE && (this.templateDefinition.ipsec["authentication-type"].vipType = b.TEMPLATE_DEF_TYPE_VARIABLE_NAME)
    }
    ,
    j.prototype.add = function(c, d) {
        return d.addTemplate.$valid ? angular.equals(d.template.templateDefinition.ipsec.authenticationType.vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && 0 === _.pluck(e.getSelectedItems(), "key").length ? (g.clear(),
        void g.error("Please select at least one authentication type")) : void a.prototype.add.call(this, c, d) : void this.showNotificationErrorsForForm(d)
    }
    ,
    j.prototype.edit = function(c, d) {
        return d.addTemplate.$valid ? angular.equals(d.template.templateDefinition.ipsec.authenticationType.vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && 0 === _.pluck(e.getSelectedItems(), "key").length ? (g.clear(),
        void g.error("Please select at least one authentication type")) : void a.prototype.edit.call(this, c, d) : void this.showNotificationErrorsForForm(d)
    }
    ,
    j
}
function VedgeSystemTemplate(a, b, c, d, e) {
    var f = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            clock: {
                timezone: {}
            },
            "gps-location": {
                latitude: {},
                longitude: {}
            },
            timer: {
                "dns-cache-timeout": {}
            },
            location: {},
            "system-tunnel-mtu": {},
            "track-transport": {},
            "track-interface-tag": {},
            "port-offset": {},
            "port-hop": {},
            "control-session-pps": {},
            description: {},
            "device-groups": {},
            "controller-group-list": {},
            "eco-friendly-mode": {},
            "site-id": {},
            "overlay-id": {},
            "system-ip": {},
            "host-name": {},
            "console-baud-rate": {},
            "max-omp-sessions": {},
            "usb-controller": {},
            "tcp-optimization-enabled": {},
            "track-default-gateway": {},
            "multicast-buffer-percent": {},
            "host-policer-pps": {},
            "icmp-error-pps": {},
            vbond: {
                local: {},
                remote: {}
            },
            "allow-same-site-tunnels": {},
            "route-consistency-check": {},
            "idle-timeout": {},
            "admin-tech-on-failure": {},
            tracker: []
        }
    };
    return f.prototype = new a,
    f.prototype.createTrackerTable = function() {
        var a = new e({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "tracker",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    f.prototype.setTrackerTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(e) {
                e.name = c.editObjectTemplateField(a.children.name, e.name),
                e.threshold = c.editObjectTemplateField(a.children.threshold, e.threshold),
                d.checkNestedProperty(e, "endpoint-ip") ? e["endpoint-type"] = "endpoint-ip" : e["endpoint-type"] = "endpoint-dns-name",
                angular.equals(e["endpoint-type"], "endpoint-ip") && (e["endpoint-ip"] = c.editObjectTemplateField(a.children["endpoint-ip"], e["endpoint-ip"]),
                e["endpoint-dns-name"] = c.editObjectTemplateField(a.children["endpoint-dns-name"], {})),
                angular.equals(e["endpoint-type"], "endpoint-dns-name") && (e["endpoint-ip"] = c.editObjectTemplateField(a.children["endpoint-ip"], {}),
                e["endpoint-dns-name"] = c.editObjectTemplateField(a.children["endpoint-dns-name"], e["endpoint-dns-name"])),
                e.multiplier = c.editObjectTemplateField(a.children.multiplier, e.multiplier),
                e.interval = c.editObjectTemplateField(a.children.interval, e.interval),
                b.push(e)
            })
        }
        var c = this
          , e = [{
            title: "Name",
            property: "name",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.tracker.children.name.details,
            minWidth: 230,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="system" view-mode="view" ng-model="row.entity.name" data-name="name_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Endpoint IP",
            property: "endpoint-ip",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.tracker.children["endpoint-ip"].details,
            minWidth: 230,
            cellTemplate: '<div class="ui-grid-cell-contents" ng-if="row.entity[\'endpoint-type\'] !== \'endpoint-dns-name\'"><vip-multi-state-input custom-prepend-variable-name="system" view-mode="view" ng-model="row.entity[\'endpoint-ip\']" data-name="endpoint-ip_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Endpoint DNS Name",
            property: "endpoint-dns-name",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.tracker.children["endpoint-dns-name"].details,
            minWidth: 230,
            cellTemplate: '<div class="ui-grid-cell-contents" ng-if="row.entity[\'endpoint-type\'] !== \'endpoint-ip\'"><vip-multi-state-input custom-prepend-variable-name="system" view-mode="view" ng-model="row.entity[\'endpoint-dns-name\']" data-name="endpoint-dns-name_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Threshold",
            property: "threshold",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.tracker.children.threshold.details,
            minWidth: 230,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="system" view-mode="view" ng-model="row.entity.threshold" data-name="threshold{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Interval",
            property: "interval",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.tracker.children.interval.details,
            minWidth: 260,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="system" view-mode="view" ng-model="row.entity.interval" data-name="interval_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Multiplier",
            property: "multiplier",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.tracker.children.multiplier.details,
            minWidth: 260,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="system" view-mode="view" ng-model="row.entity.multiplier" data-name="multiplier_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || e.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            width: 100,
            isRightPinned: !0,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(angular.extend(this.templateDefinition.tracker.children, {
            "endpoint-type": "endpoint-ip"
        })),
        a.createColumns(e),
        angular.isDefined(this.templateDefinition.tracker) && angular.isArray(this.templateDefinition.tracker.vipValue) && this.templateDefinition.tracker.vipValue.length > 0 && b(this.templateDefinition.tracker, a.data)
    }
    ,
    f.prototype.setTemplateDefinition = function() {
        this.templateDefinition["vbond-only"] && delete this.templateDefinition["vbond-only"],
        this.templateDefinition.vbond && this.templateDefinition.vbond["vbond-only"] && delete this.templateDefinition.vbond["vbond-only"],
        this.templateDefinition["max-controllers"] && delete this.templateDefinition["max-controllers"],
        this.omitExtraDefinitionProperty(_.omit(this.templateDefinition, "tracker")),
        ("ignore" === this.templateDefinition.vbond.local.vipType || "constant" === this.templateDefinition.vbond.local.vipType && "false" === this.templateDefinition.vbond.local.vipValue) && delete this.templateDefinition.vbond;
        var a = this.templateDefinition;
        this.templateDefinition.tracker = this.omitObjectProperties(a.tracker, ["endpoint-type"]),
        this.templateDefinition.tracker = {
            vipType: this.templateDefinition.tracker.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.constructTracker(this.templateDefinition.tracker),
            vipObjectType: "tree",
            vipPrimaryKey: ["name"]
        }
    }
    ,
    f.prototype.constructTracker = function(a) {
        return angular.forEach(a, function(a) {
            angular.equals(a["endpoint-type"], "endpoint-ip") ? delete a["endpoint-dns-name"] : delete a["endpoint-ip"],
            delete a["endpoint-type"]
        }),
        a
    }
    ,
    f
}
function VedgeVpnInterfaceBridgeTemplate(a, b, c, d) {
    var e = function() {
        this.templateDefinition = {
            "if-name": {},
            description: {},
            ip: {
                address: {}
            },
            "dhcp-helper": {},
            "clear-dont-fragment": {},
            mtu: {},
            "tcp-mss-adjust": {},
            shutdown: {},
            "arp-timeout": {},
            arp: {
                ip: []
            },
            vrrp: [],
            "bandwidth-upstream": {},
            "bandwidth-downstream": {},
            "mac-address": {}
        },
        this.extendAccessList()
    };
    return e.prototype = new a,
    e.prototype.extendTemplate = function(a) {
        angular.extend(this, _.omit(a, ["$$hashKey"])),
        a = angular.copy(a),
        this.templateDefinition.ipv6 && delete this.templateDefinition.ipv6,
        this.templateDefinition["bandwidth-upstream"] && delete this.templateDefinition["bandwidth-upstream"],
        this.templateDefinition["bandwidth-downstream"] && delete this.templateDefinition["bandwidth-downstream"],
        this.templateDefinition.autonegotiate && delete this.templateDefinition.autonegotiate,
        this.populateAccessList(a)
    }
    ,
    e.prototype.setTemplateDefinition = function() {
        var a = this
          , d = this.templateDefinition;
        this.templateDefinition = _.omit(d, ["arp", "vrrp"]),
        this.templateDefinition["bandwidth-upstream"] && delete this.templateDefinition["bandwidth-upstream"],
        this.templateDefinition["bandwidth-downstream"] && delete this.templateDefinition["bandwidth-downstream"],
        this.templateDefinition.autonegotiate && delete this.templateDefinition.autonegotiate,
        this.templateDefinition.ipv6 && delete this.templateDefinition.ipv6,
        this.omitExtraDefinitionProperty(this.templateDefinition),
        this.templateDefinition["if-name"].vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && angular.equals(this.templateDefinition["if-name"].vipVariableName, "vpn_if_name") && (this.templateDefinition["if-name"].vipVariableName = this.templateDefinition["if-name"].vipVariableName + "_" + this.templateName),
        this.templateDefinition.ip["secondary-address"] = {
            vipType: c.checkNestedProperty(d, "ip", "secondary-address", "vipValue", "length") && d.ip["secondary-address"].vipValue.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: c.checkNestedProperty(d, "ip", "secondary-address", "vipValue", "length") ? this.addPriorityField(this.omitObjectProperties(d.ip["secondary-address"].vipValue), ["address"]) : [],
            vipObjectType: "tree",
            vipPrimaryKey: ["address"]
        },
        this.templateDefinition.arp = {
            ip: {
                vipType: d.arp.ip.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
                vipValue: this.addPriorityField(this.omitObjectProperties(d.arp.ip), ["addr", "mac"]),
                vipObjectType: "tree",
                vipPrimaryKey: ["addr"]
            }
        },
        d.vrrp = this.omitObjectProperties(d.vrrp, ["ipv4"]),
        angular.forEach(d.vrrp, function(b) {
            b.ipv4.address = a.omitObjectProperties(b.ipv4.address)
        }),
        this.templateDefinition.vrrp = {
            vipType: d.vrrp.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(d.vrrp, ["grp-id", "priority", "timer", "track-omp", "track-prefix-list", "ipv4"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["grp-id"]
        },
        this.parseAccessList()
    }
    ,
    e
}
function VedgeVpnInterfaceCellularTemplate(a, b) {
    var c = function() {
        a.apply(this, arguments),
        this.templateDefinition.profile = {},
        this.templateDefinition.technology = {},
        delete this.templateDefinition.vrrp,
        delete this.templateDefinition.speed,
        delete this.templateDefinition.duplex,
        delete this.templateDefinition["flow-control"],
        delete this.templateDefinition["mac-address"],
        delete this.templateDefinition.ip["secondary-address"]
    };
    return c.prototype = new a,
    c.prototype.setTemplateDefinition = function() {
        var a = this.templateDefinition;
        this.templateDefinition = _.omit(a, ["arp", "nat", "nat-enable", "nat-port-forward", "dot1x", "dot1x-enable"]),
        this.omitExtraDefinitionProperty(this.templateDefinition),
        this.templateDefinition["if-name"].vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && angular.equals(this.templateDefinition["if-name"].vipVariableName, "vpn_if_name") && (this.templateDefinition["if-name"].vipVariableName = this.templateDefinition["if-name"].vipVariableName + "_" + this.templateName),
        angular.equals(this.ipConfigType, "static") ? (angular.isDefined(a.ip["dhcp-client"]) && delete this.templateDefinition.ip["dhcp-client"],
        angular.isDefined(a.ip["dhcp-distance"]) && delete this.templateDefinition.ip["dhcp-distance"]) : (a.ip["dhcp-client"].vipObjectType = "object",
        a.ip["dhcp-client"].vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
        angular.isDefined(a.ip.address) && delete this.templateDefinition.ip.address),
        angular.equals(this.ipv6ConfigType, "static") ? (angular.isDefined(a.ipv6["dhcp-client"]) && delete this.templateDefinition.ipv6["dhcp-client"],
        angular.isDefined(a.ipv6["dhcp-distance"]) && delete this.templateDefinition.ipv6["dhcp-distance"],
        angular.isDefined(a.ipv6["dhcp-rapid-commit"]) && delete this.templateDefinition.ipv6["dhcp-rapid-commit"]) : (a.ipv6["dhcp-client"].vipObjectType = "object",
        a.ipv6["dhcp-client"].vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
        angular.isDefined(a.ipv6.address) && delete this.templateDefinition.ipv6.address),
        delete this.ipConfigType,
        delete this.ipv6ConfigType,
        angular.equals(a["nat-enable"].vipType, b.TEMPLATE_DEF_TYPE_IGNORE) ? delete this.templateDefinition.nat : angular.equals(a["nat-enable"].vipType, b.TEMPLATE_DEF_TYPE_VARIABLE) ? this.templateDefinition.nat = {
            vipType: b.TEMPLATE_DEF_TYPE_VARIABLE,
            vipObjectType: "node-only"
        } : angular.equals(a["nat-enable"].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && angular.equals(a["nat-enable"].vipValue, "false") ? this.templateDefinition.nat = {
            vipType: b.TEMPLATE_DEF_TYPE_IGNORE,
            vipObjectType: "node-only"
        } : angular.equals(a["nat-enable"].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && angular.equals(a["nat-enable"].vipValue, "true") && 0 === a["nat-port-forward"].length && this.areAllPropertiesDefault(a.nat) ? this.templateDefinition.nat = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipObjectType: "node-only",
            vipValue: "true"
        } : (a.nat = _.omit(a.nat, ["vipObjectType", "vipType", "dataType", "objectType", "defaultOption", "optionType", "description", "details", "key", "addPriorityField", "checkUneditable", "removeTableRow", "primaryKeys", "deleteFlag"]),
        a.nat = this.omitExtraDefinitionProperty(a.nat),
        this.templateDefinition.nat = angular.copy(a.nat),
        this.templateDefinition.nat["port-forward"] = {
            vipType: a["nat-port-forward"].length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(this.omitObjectProperties(a["nat-port-forward"]), ["port-start", "port-end", "proto", "private-vpn", "private-ip-address"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["port-start", "port-end", "proto"]
        }),
        this.templateDefinition.arp = {
            ip: {
                vipType: a.arp.ip.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
                vipValue: this.addPriorityField(this.omitObjectProperties(a.arp.ip), ["addr", "mac"]),
                vipObjectType: "tree",
                vipPrimaryKey: ["addr"]
            }
        },
        angular.equals(this.templateDefinition["tunnel-interface"]["tunnel-interface-enable"].vipValue, "false") ? delete this.templateDefinition["tunnel-interface"] : (delete this.templateDefinition["tunnel-interface"]["tunnel-interface-enable"],
        this.parseEncap()),
        this.parsePolicer(),
        this.parseAccessList()
    }
    ,
    c
}
function VedgeVpnInterfaceGreTemplate(a, b, c, d, e) {
    var f = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            "if-name": {},
            description: {},
            ip: {
                address: {}
            },
            shutdown: {},
            "tunnel-source-selection": "tunnel-source",
            "tunnel-source-interface": {},
            "tunnel-source": {},
            "tunnel-destination": {},
            keepalive: {
                interval: {},
                retries: {}
            },
            mtu: {},
            "clear-dont-fragment": {},
            "tcp-mss-adjust": {},
            "rewrite-rule": {
                "rule-name": {}
            }
        },
        this.extendAccessList(),
        this.extendPolicer()
    };
    f.prototype = new a,
    f.prototype.extendTemplate = function(a) {
        angular.extend(this, _.omit(a, ["$$hashKey"])),
        d.isUndefinedOrEmpty(this.templateDefinition["tunnel-source-interface"]) ? this.templateDefinition["tunnel-source-selection"] = "tunnel-source" : this.templateDefinition["tunnel-source-selection"] = "tunnel-source-interface",
        angular.isDefined(this.templateDefinition["rewrite-rule"]) || (this.templateDefinition["rewrite-rule"] = {},
        this.templateDefinition["rewrite-rule"]["rule-name"] = y),
        angular.isDefined(this.templateDefinition.ipv6) && delete this.templateDefinition.ipv6,
        a = angular.copy(a),
        this.populatePolicer(a),
        this.populateAccessList(a)
    }
    ,
    f.prototype.extendPolicer = function(a) {
        this.templateDefinition = angular.extend({}, this.templateDefinition, {
            policer: [{
                in: angular.copy(t),
                "policer-name": angular.copy(x)
            }, {
                out: angular.copy(v),
                "policer-name": angular.copy(x)
            }]
        })
    }
    ,
    f.prototype.extendAccessList = function(a) {
        (!d.checkNestedProperty(this, "templateDefinition", "access-list", "vipValue") || this.templateDefinition["access-list"].vipValue.length < 1) && (this.templateDefinition = angular.extend({}, this.templateDefinition, {
            "access-list": [{
                in: k(),
                "acl-name": r()
            }, {
                out: m(),
                "acl-name": r()
            }]
        }))
    }
    ,
    f.prototype.populatePolicer = function(a) {
        var c = this;
        if (!angular.isDefined(this.templateDefinition.policer) || !angular.isDefined(this.templateDefinition.policer.vipValue) || this.templateDefinition.policer.vipValue.length < 1)
            return this.extendPolicer(),
            this.templateDefinition.policer[0].in = s(),
            void (this.templateDefinition.policer[1].out = u());
        if (angular.isDefined(a.templateDefinition.policer) && angular.equals(a.templateDefinition.policer.vipValue[0].direction.vipValue, "out"))
            c.templateDefinition.policer = [{
                in: angular.copy(t),
                "policer-name": angular.copy(x)
            }],
            g(a, 0),
            c.templateDefinition.policer.push(a.templateDefinition.policer.vipValue[0]);
        else {
            c.templateDefinition.policer = [],
            a.templateDefinition.policer.vipValue[0]["policer-name"] = h(a.templateDefinition.policer.vipValue, 0);
            var d = angular.copy(t);
            d.optionType = ["constant", "ignore"],
            d = new b(d),
            d.vipType = a.templateDefinition.policer.vipValue[0].direction.vipType,
            d.vipValue = "true",
            a.templateDefinition.policer.vipValue[0].in = d,
            delete a.templateDefinition.policer.vipValue[0].direction,
            delete a.templateDefinition.policer.vipValue[0]["priority-order"],
            c.templateDefinition.policer.push(a.templateDefinition.policer.vipValue[0]),
            2 == a.templateDefinition.policer.vipValue.length ? (g(a, 1),
            c.templateDefinition.policer.push(a.templateDefinition.policer.vipValue[1])) : c.templateDefinition.policer.push({
                out: angular.copy(v),
                "policer-name": angular.copy(x)
            })
        }
    }
    ;
    var g = function(a, c) {
        a.templateDefinition.policer.vipValue[c]["policer-name"] = h(a.templateDefinition.policer.vipValue, c);
        var d = angular.copy(v);
        d.optionType = ["constant", "ignore"],
        d = new b(d),
        d.vipType = a.templateDefinition.policer.vipValue[c].direction.vipType,
        d.vipValue = "true",
        delete a.templateDefinition.policer.vipValue[c].direction,
        delete a.templateDefinition.policer.vipValue[c]["priority-order"],
        a.templateDefinition.policer.vipValue[c].out = d
    }
      , h = function(a, b) {
        var d = angular.copy(x);
        return d.vipType = a[b]["policer-name"].vipType,
        d.vipValue = a[b]["policer-name"].vipValue,
        d.vipType === c.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (d.vipType = c.TEMPLATE_DEF_TYPE_VARIABLE),
        d
    };
    f.prototype.populateAccessList = function(a) {
        var c = this;
        if ((!d.checkNestedProperty(this, "templateDefinition", "access-list", "vipValue") || this.templateDefinition["access-list"].vipValue.length < 1) && (this.extendAccessList(),
        this.templateDefinition["access-list"][0].in = k(),
        this.templateDefinition["access-list"][1].out = m()),
        angular.isDefined(a.templateDefinition && a.templateDefinition["access-list"] && a.templateDefinition["access-list"].vipValue) && a.templateDefinition["access-list"].vipValue.length > 0)
            if (angular.equals(a.templateDefinition["access-list"].vipValue[0].direction.vipValue, "out"))
                c.templateDefinition["access-list"] = [{
                    in: k(),
                    "acl-name": r()
                }],
                i(a, 0, "v4"),
                c.templateDefinition["access-list"].push(a.templateDefinition["access-list"].vipValue[0]);
            else {
                c.templateDefinition["access-list"] = [],
                a.templateDefinition["access-list"].vipValue[0]["acl-name"] = j(a.templateDefinition["access-list"].vipValue, 0);
                var e = angular.copy(l);
                e.optionType = ["constant"],
                e = new b(e),
                e.vipType = a.templateDefinition["access-list"].vipValue[0].direction.vipType,
                e.vipValue = "true",
                a.templateDefinition["access-list"].vipValue[0].in = e,
                delete a.templateDefinition["access-list"].vipValue[0].direction,
                delete a.templateDefinition["access-list"].vipValue[0]["priority-order"],
                c.templateDefinition["access-list"].push(a.templateDefinition["access-list"].vipValue[0]),
                2 == a.templateDefinition["access-list"].vipValue.length ? (i(a, 1, "v4"),
                c.templateDefinition["access-list"].push(a.templateDefinition["access-list"].vipValue[1])) : c.templateDefinition["access-list"].push({
                    out: m(),
                    "acl-name": r()
                })
            }
    }
    ;
    var i = function(a, c, d) {
        var e = {};
        "v4" === d ? (a.templateDefinition["access-list"].vipValue[c]["acl-name"] = j(a.templateDefinition["access-list"].vipValue, c),
        e = angular.copy(n),
        e.vipType = a.templateDefinition["access-list"].vipValue[c].direction.vipType) : (a.templateDefinition.ipv6["access-list"].vipValue[c]["acl-name"] = j(a.templateDefinition.ipv6["access-list"].vipValue, c),
        e = angular.copy(q),
        e.vipType = a.templateDefinition.ipv6["access-list"].vipValue[c].direction.vipType),
        e.optionType = ["constant"],
        e = new b(e),
        e.vipValue = "true",
        "v4" === d ? (delete a.templateDefinition["access-list"].vipValue[c].direction,
        delete a.templateDefinition["access-list"].vipValue[c]["priority-order"],
        a.templateDefinition["access-list"].vipValue[c].out = e) : (delete a.templateDefinition.ipv6["access-list"].vipValue[c].direction,
        delete a.templateDefinition.ipv6["access-list"].vipValue[c]["priority-order"],
        a.templateDefinition.ipv6["access-list"].vipValue[c].out = e)
    }
      , j = function(a, b) {
        var d = r();
        return d.vipType = a[b]["acl-name"].vipType,
        d.vipValue = a[b]["acl-name"].vipValue,
        d.vipType === c.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (d.vipType = c.TEMPLATE_DEF_TYPE_VARIABLE),
        d
    };
    f.prototype.setTemplateDefinition = function() {
        "tunnel-source" === this.templateDefinition["tunnel-source-selection"] ? (delete this.templateDefinition["tunnel-source-selection"],
        delete this.templateDefinition["tunnel-source-interface"]) : (delete this.templateDefinition["tunnel-source-selection"],
        delete this.templateDefinition["tunnel-source"]),
        this.omitExtraDefinitionProperty(this.templateDefinition),
        this.templateDefinition["if-name"].vipType === c.TEMPLATE_DEF_TYPE_VARIABLE_NAME && angular.equals(this.templateDefinition["if-name"].vipVariableName, "vpn_if_name") && (this.templateDefinition["if-name"].vipVariableName = this.templateDefinition["if-name"].vipVariableName + "_" + this.templateName),
        this.parsePolicer(),
        this.parseAccessList()
    }
    ,
    f.prototype.parsePolicer = function() {
        "true" == this.templateDefinition.policer[1].out.vipValue ? (this.templateDefinition.policer[1].direction = {
            vipType: c.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: "out",
            vipObjectType: "object"
        },
        this.templateDefinition.policer[1]["priority-order"] = ["policer-name", "direction"],
        delete this.templateDefinition.policer[1].out) : this.templateDefinition.policer.splice(1, 1),
        "true" == this.templateDefinition.policer[0].in.vipValue ? (this.templateDefinition.policer[0].direction = {
            vipType: c.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: "in",
            vipObjectType: "object"
        },
        this.templateDefinition.policer[0]["priority-order"] = ["policer-name", "direction"],
        delete this.templateDefinition.policer[0].in) : this.templateDefinition.policer.splice(0, 1),
        this.templateDefinition.policer = {
            vipType: this.templateDefinition.policer.length > 0 ? c.TEMPLATE_DEF_TYPE_CONSTANT : c.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.templateDefinition.policer,
            vipObjectType: "tree",
            vipPrimaryKey: ["policer-name", "direction"]
        }
    }
    ,
    f.prototype.parseAccessList = function() {
        "true" == this.templateDefinition["access-list"][1].out.vipValue ? (this.templateDefinition["access-list"][1].direction = {
            vipType: c.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: "out",
            vipObjectType: "object"
        },
        this.templateDefinition["access-list"][1]["priority-order"] = ["direction", "acl-name"],
        delete this.templateDefinition["access-list"][1].out) : this.templateDefinition["access-list"].splice(1, 1),
        "true" == this.templateDefinition["access-list"][0].in.vipValue ? (this.templateDefinition["access-list"][0].direction = {
            vipType: c.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: "in",
            vipObjectType: "object"
        },
        this.templateDefinition["access-list"][0]["priority-order"] = ["direction", "acl-name"],
        delete this.templateDefinition["access-list"][0].in) : this.templateDefinition["access-list"].splice(0, 1),
        this.templateDefinition["access-list"] = {
            vipType: this.templateDefinition["access-list"].length > 0 ? c.TEMPLATE_DEF_TYPE_CONSTANT : c.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.templateDefinition["access-list"],
            vipObjectType: "tree",
            vipPrimaryKey: ["direction"]
        }
    }
    ,
    f.prototype.add = function(b, c) {
        if (!c.addTemplate.$valid) {
            if (!d.checkNestedProperty(c.addTemplate, "$error", "ipaddress"))
                return void this.showNotificationErrorsForForm(c);
            var f = _.find(c.addTemplate.$error.ipaddress, {
                $name: "tunnel_source"
            });
            if (!f || "tunnel-source-interface" !== b.templateDefinition["tunnel-source-selection"])
                return void this.showNotificationErrorsForForm(c);
            if (c.addTemplate.tunnel_source.$setUntouched(),
            c.addTemplate.tunnel_source.$setValidity("ipaddress", !0),
            !c.addTemplate.$valid)
                return void e.error("All required fields must be configured.")
        }
        a.prototype.add.call(this, b, c)
    }
    ,
    f.prototype.edit = function(b, c) {
        if (!c.addTemplate.$valid) {
            if (!d.checkNestedProperty(c.addTemplate, "$error", "ipaddress"))
                return void this.showNotificationErrorsForForm(c);
            var e = _.find(c.addTemplate.$error.ipaddress, {
                $name: "tunnel_source"
            });
            if (!e || "tunnel-source-interface" !== b.templateDefinition["tunnel-source-selection"])
                return void this.showNotificationErrorsForForm(c);
            if (c.addTemplate.tunnel_source.$setUntouched(),
            c.addTemplate.tunnel_source.$setValidity("ipaddress", !0),
            !c.addTemplate.$valid)
                return void this.showNotificationErrorsForForm(c)
        }
        a.prototype.edit.call(this, b, c)
    }
    ;
    var k = function() {
        return new b({
            key: "acl-in",
            description: "Ingress ACL - IPv4",
            details: "Apply ingress ACL - IPv4",
            optionType: ["constant", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "boolean",
                default: "false"
            },
            objectType: "object"
        })
    }
      , l = k()
      , m = function() {
        return new b({
            key: "acl-out",
            description: "Egress ACL - IPv4",
            details: "Apply egress ACL - IPv4",
            optionType: ["constant", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "boolean",
                default: "false"
            },
            objectType: "object"
        })
    }
      , n = m()
      , o = function() {
        return new b({
            key: "acl-in",
            description: "Ingress ACL - IPv6",
            details: "Apply ingress ACL - IPv6",
            optionType: ["constant", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "boolean",
                default: "false"
            },
            objectType: "object"
        })
    }
      , p = (o(),
    function() {
        return new b({
            key: "acl-out",
            description: "Egress ACL - IPv6",
            details: "Apply egress ACL - IPv6",
            optionType: ["constant", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "boolean",
                default: "false"
            },
            objectType: "object"
        })
    }
    )
      , q = p()
      , r = function() {
        return new b({
            key: "acl-name",
            description: "Access List",
            details: "Name of access list",
            optionType: ["constant", "variable"],
            defaultOption: "constant",
            dataType: {
                type: "string",
                minLength: 1,
                maxLength: 32
            },
            objectType: "object"
        })
    }
      , s = function() {
        return new b({
            key: "policer-in",
            description: "Ingress Policer",
            details: "Apply ingress policer",
            optionType: ["constant", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "boolean",
                default: "false"
            },
            objectType: "object"
        })
    }
      , t = s()
      , u = function() {
        return new b({
            key: "policer-out",
            description: "Egress Policer",
            details: "Apply egress policer",
            optionType: ["constant", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "boolean",
                default: "false"
            },
            objectType: "object"
        })
    }
      , v = u()
      , w = function() {
        return new b({
            key: "policer-name",
            description: "Policer Name",
            details: "Name of policer",
            optionType: ["constant", "variable"],
            defaultOption: "constant",
            dataType: {
                type: "string",
                minLength: 1,
                maxLength: 32
            },
            objectType: "object"
        })
    }
      , x = w()
      , y = function() {
        return new b({
            key: "rule-name",
            description: "Rewrite Rule",
            details: "Name of rewrite rule",
            optionType: ["constant", "variable", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "string",
                minLength: 1,
                maxLength: 128
            },
            objectType: "object"
        })
    };
    return f
}
function VedgeVpnInterfaceIpsecTemplate(a, b, c, d, e, f, g) {
    var h = function() {
        this.templateDefinition = {
            "if-name": {},
            description: {},
            ip: {
                address: {}
            },
            shutdown: {},
            "tunnel-source-selection": "tunnel-source",
            "tunnel-source-interface": {},
            "tunnel-source": {},
            "tunnel-destination": {},
            mtu: {},
            "tcp-mss-adjust": {},
            "dead-peer-detection": {
                "dpd-interval": {},
                "dpd-retries": {}
            },
            ike: {
                "ike-version": {},
                "ike-mode": {},
                "ike-rekey-interval": {},
                "ike-ciphersuite": {},
                "ike-group": {},
                "authentication-type": {
                    "pre-shared-key": {
                        "pre-shared-secret": {},
                        "ike-local-id": {},
                        "ike-remote-id": {}
                    }
                }
            },
            ipsec: {
                "ipsec-rekey-interval": {},
                "ipsec-replay-window": {},
                "ipsec-ciphersuite": {},
                "perfect-forward-secrecy": {}
            }
        }
    };
    return h.prototype = new a,
    h.prototype.extendTemplate = function(a) {
        angular.extend(this, _.omit(a, ["$$hashKey"])),
        e.isUndefinedOrEmpty(this.templateDefinition["tunnel-source-interface"]) ? this.templateDefinition["tunnel-source-selection"] = "tunnel-source" : this.templateDefinition["tunnel-source-selection"] = "tunnel-source-interface"
    }
    ,
    h.prototype.setTemplateDefinition = function() {
        "tunnel-source" === this.templateDefinition["tunnel-source-selection"] ? (delete this.templateDefinition["tunnel-source-selection"],
        delete this.templateDefinition["tunnel-source-interface"]) : (delete this.templateDefinition["tunnel-source-selection"],
        delete this.templateDefinition["tunnel-source"]),
        this.templateDefinition["if-name"].vipType === b.TEMPLATE_DEF_TYPE_VARIABLE && angular.equals(this.templateDefinition["if-name"].vipVariableName, "vpn_if_name") && (this.templateDefinition["if-name"].vipVariableName = this.templateDefinition["if-name"].vipVariableName + "_" + this.templateName),
        1 !== this.templateDefinition.ike["ike-version"].vipValue && delete this.templateDefinition.ike["ike-mode"],
        this.omitExtraDefinitionProperty(this.templateDefinition)
    }
    ,
    h.prototype.add = function(b, c) {
        if (!c.addTemplate.$valid) {
            if (!e.checkNestedProperty(c.addTemplate, "$error", "ipaddress"))
                return void this.showNotificationErrorsForForm(c);
            var d = _.find(c.addTemplate.$error.ipaddress, {
                $name: "tunnel_source"
            });
            if (!d || "tunnel-source-interface" !== b.templateDefinition["tunnel-source-selection"])
                return void this.showNotificationErrorsForForm(c);
            if (c.addTemplate.tunnel_source.$setUntouched(),
            c.addTemplate.tunnel_source.$setValidity("ipaddress", !0),
            !c.addTemplate.$valid)
                return void f.error("All required fields must be configured.")
        }
        a.prototype.add.call(this, b, c)
    }
    ,
    h.prototype.edit = function(b, c) {
        if (!c.addTemplate.$valid) {
            if (!e.checkNestedProperty(c.addTemplate, "$error", "ipaddress"))
                return void this.showNotificationErrorsForForm(c);
            var d = _.find(c.addTemplate.$error.ipaddress, {
                $name: "tunnel_source"
            });
            if (!d || "tunnel-source-interface" !== b.templateDefinition["tunnel-source-selection"])
                return void this.showNotificationErrorsForForm(c);
            if (c.addTemplate.tunnel_source.$setUntouched(),
            c.addTemplate.tunnel_source.$setValidity("ipaddress", !0),
            !c.addTemplate.$valid)
                return void this.showNotificationErrorsForForm(c)
        }
        a.prototype.edit.call(this, b, c)
    }
    ,
    h
}
function VedgeVpnInterfaceNatpoolTemplate(a, b, c, d, e, f, g) {
    var h = function() {
        this.templateDefinition = {
            "if-name": {},
            description: {},
            ip: {
                address: {}
            },
            shutdown: {},
            tracker: {},
            static: [],
            "nat-port-forward": [],
            nat: {
                refresh: {},
                "udp-timeout": {},
                "tcp-timeout": {},
                "block-icmp-error": {},
                "respond-to-ping": {},
                "block-icmp-error": {}
            }
        }
    };
    return h.prototype = new a,
    h.prototype.extendTemplate = function(a) {
        angular.extend(this, _.omit(a, ["$$hashKey"]))
    }
    ,
    h.prototype.createStaticNatTable = function() {
        var a = new g({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "static_nat",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    h.prototype.setStaticNatTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d["source-ip"] = c.editObjectTemplateField(a.children["source-ip"], d["source-ip"]),
                d["translate-ip"] = c.editObjectTemplateField(a.children["translate-ip"], d["translate-ip"]),
                d["static-nat-direction"] = c.editObjectTemplateField(a.children["static-nat-direction"], d["static-nat-direction"]),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "Source IP",
            property: "source-ip",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.nat.static.children["source-ip"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="nat_source-ip" view-mode="view" ng-model="row.entity[\'source-ip\']" data-name="source_ip_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Translate IP",
            property: "translate-ip",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.nat.static.children["translate-ip"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="nat_translate-ip" view-mode="view" ng-model="row.entity[\'translate-ip\']" data-name="translate_ip_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Direction",
            property: "static-nat-direction",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.nat.static.children["static-nat-direction"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="nat_static-nat-direction" view-mode="view" ng-model="row.entity[\'static-nat-direction\']" data-name="static_nat_direction_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(this.templateDefinition.nat.static.children),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.nat) && angular.isDefined(this.templateDefinition.nat.static) && angular.isArray(this.templateDefinition.nat.static.vipValue) && this.templateDefinition.nat.static.vipValue.length > 0 && (b(this.templateDefinition.nat.static, a.data),
        delete this.templateDefinition.nat.static)
    }
    ,
    h.prototype.createPortForwardTable = function() {
        var a = new g({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "port_forward",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    h.prototype.setPortForwardTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d["port-start"] = c.editObjectTemplateField(a.children["port-start"], d["port-start"]),
                d["port-end"] = c.editObjectTemplateField(a.children["port-end"], d["port-end"]),
                d.proto = c.editObjectTemplateField(a.children.proto, d.proto),
                d["private-vpn"] = c.editObjectTemplateField(a.children["private-vpn"], d["private-vpn"]),
                d["private-ip-address"] = c.editObjectTemplateField(a.children["private-ip-address"], d["private-ip-address"]),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "Port Start Range",
            property: "port-start",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.nat["port-forward"].children["port-start"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="nat_port-start-range" view-mode="view" ng-model="row.entity[\'port-start\']" data-name="port_start_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Port End Range",
            property: "port-end",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.nat["port-forward"].children["port-end"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="nat_port-stop-range" view-mode="view" ng-model="row.entity[\'port-end\']" data-name="port_end_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Protocol",
            property: "proto",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.nat["port-forward"].children.proto.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="nat_protocol" view-mode="view" ng-model="row.entity.proto" data-name="proto_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "VPN",
            property: "private-vpn",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.nat["port-forward"].children["private-vpn"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="vpn_if" data-path="nat_vpn" view-mode="view" ng-model="row.entity[\'private-vpn\']" data-name="private_vpn_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Private IP",
            property: "private-ip-address",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.nat["port-forward"].children["private-ip-address"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="vpn_if" data-path="nat_private-ip" view-mode="view" ng-model="row.entity[\'private-ip-address\']" data-name="private_ip_address_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(this.templateDefinition.nat["port-forward"].children),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.nat) && angular.isDefined(this.templateDefinition.nat["port-forward"]) && angular.isArray(this.templateDefinition.nat["port-forward"].vipValue) && this.templateDefinition.nat["port-forward"].vipValue.length > 0 && (b(this.templateDefinition.nat["port-forward"], a.data),
        delete this.templateDefinition.nat["port-forward"])
    }
    ,
    h.prototype.setTemplateDefinition = function() {
        delete this.templateDefinition["tunnel-interface"],
        delete this.templateDefinition["nat-enable"],
        delete this.templateDefinition["access-list"],
        delete this.templateDefinition.policer,
        delete this.templateDefinition.ipv6;
        var a = this.templateDefinition;
        this.templateDefinition = this.omitExtraDefinitionProperty(_.omit(a, ["nat", "nat-port-forward", "static"])),
        this.templateDefinition["if-name"].vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && angular.equals(this.templateDefinition["if-name"].vipVariableName, "vpn_if_name") && (this.templateDefinition["if-name"].vipVariableName = this.templateDefinition["if-name"].vipVariableName + "_" + this.templateName),
        0 === a["nat-port-forward"].length && 0 === a.static.length && this.areAllPropertiesDefault(a.nat) ? this.templateDefinition.nat = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipObjectType: "node-only",
            vipValue: "true"
        } : (a.nat = _.omit(a.nat, ["vipObjectType", "vipType", "dataType", "objectType", "defaultOption", "optionType", "description", "details", "key", "addPriorityField", "checkUneditable", "removeTableRow", "primaryKeys", "deleteFlag", "vipType", "vipValue"]),
        a.nat = this.omitExtraDefinitionProperty(a.nat),
        this.templateDefinition.nat = angular.copy(a.nat),
        this.templateDefinition.nat["port-forward"] = {
            vipType: a["nat-port-forward"].length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(this.omitObjectProperties(a["nat-port-forward"]), ["port-start", "port-end", "proto", "private-vpn", "private-ip-address"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["port-start", "port-end", "proto"]
        },
        this.templateDefinition.nat.static = {
            vipType: a.static.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(this.omitObjectProperties(a.static), ["source-ip", "translate-ip", "static-nat-direction"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["source-ip"]
        })
    }
    ,
    h
}
function VedgeVpnInterfacePppoeEnabledTemplate(a, b) {
    var c = function() {
        this.templateDefinition = {
            "if-name": {},
            description: {},
            "pppoe-client": {
                "ppp-interface": {}
            },
            ip: {
                address: {},
                "dhcp-client": {},
                "dhcp-distance": {}
            },
            ipv6: {
                address: {},
                "dhcp-client": {},
                "dhcp-distance": {}
            },
            "dhcp-helper": {},
            "flow-control": {},
            mtu: {},
            "static-ingress-qos": {},
            "tcp-mss-adjust": {},
            "mac-address": {},
            speed: {},
            duplex: {},
            shutdown: {},
            "arp-timeout": {},
            "shaping-rate": {},
            "qos-map": {},
            "rewrite-rule": {
                "rule-name": {}
            },
            "bandwidth-upstream": {},
            "bandwidth-downstream": {}
        },
        this.ipConfigType = "dynamic",
        this.ipv6ConfigType = "dynamic",
        this.extendAccessList(),
        this.extendPolicer()
    };
    return c.prototype = new a,
    c.prototype.extendTemplate = function(a) {
        angular.extend(this, _.omit(a, ["$$hashKey"])),
        a = angular.copy(a),
        this.populatePolicer(a),
        this.populateAccessList(a)
    }
    ,
    c.prototype.setTemplateDefinition = function() {
        angular.isDefined(this.templateDefinition.arp) && delete this.templateDefinition.arp,
        this.omitExtraDefinitionProperty(this.templateDefinition),
        angular.equals(this.ipConfigType, "static") ? (angular.isDefined(this.templateDefinition.ip["dhcp-client"]) && delete this.templateDefinition.ip["dhcp-client"],
        angular.isDefined(this.templateDefinition.ip["dhcp-distance"]) && delete this.templateDefinition.ip["dhcp-distance"]) : (this.templateDefinition.ip["dhcp-client"].vipObjectType = "object",
        this.templateDefinition.ip["dhcp-client"].vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
        angular.isDefined(this.templateDefinition.ip.address) && delete this.templateDefinition.ip.address),
        angular.equals(this.ipv6ConfigType, "static") ? (angular.isDefined(this.templateDefinition.ipv6["dhcp-client"]) && delete this.templateDefinition.ipv6["dhcp-client"],
        angular.isDefined(this.templateDefinition.ipv6["dhcp-distance"]) && delete this.templateDefinition.ipv6["dhcp-distance"],
        angular.isDefined(this.templateDefinition.ipv6["dhcp-rapid-commit"]) && delete this.templateDefinition.ipv6["dhcp-rapid-commit"]) : (this.templateDefinition.ipv6["dhcp-client"].vipObjectType = "object",
        this.templateDefinition.ipv6["dhcp-client"].vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
        angular.isDefined(this.templateDefinition.ipv6.address) && delete this.templateDefinition.ipv6.address),
        delete this.ipConfigType,
        delete this.ipv6ConfigType,
        this.templateDefinition["if-name"].vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && angular.equals(this.templateDefinition["if-name"].vipVariableName, "vpn_if_name") && (this.templateDefinition["if-name"].vipVariableName = this.templateDefinition["if-name"].vipVariableName + "_" + this.templateName),
        this.templateDefinition["pppoe-client"]["ppp-interface"] = {
            vipType: "link-variable",
            vipObjectType: "object",
            vipValue: ""
        },
        this.parsePolicer(),
        this.parseAccessList()
    }
    ,
    c
}
function VedgeVpnInterfacePppoeTemplate(a, b, c, d, e) {
    var f = !0
      , g = function() {
        this.templateDefinition = {
            "if-name": {},
            description: {},
            "nat-enable": {},
            "nat-port-forward": [],
            "clear-dont-fragment": {},
            "mac-address": {},
            mtu: {},
            pmtu: {},
            "tcp-mss-adjust": {},
            shutdown: {},
            "rewrite-rule": {
                "rule-name": {}
            },
            ppp: {
                "ac-name": {}
            },
            "tloc-extension": {},
            "bandwidth-upstream": {},
            "bandwidth-downstream": {}
        },
        this.extendAccessList(),
        this.extendPolicer(),
        this.extendAuthentication(),
        this.extendTunnelInterface()
    };
    g.prototype = new a,
    g.prototype.extendTemplate = function(b) {
        a.prototype.extendTemplate.call(this, b),
        b = angular.copy(b),
        this.populateAuthentication(b)
    }
    ,
    g.prototype.extendAuthentication = function() {
        this.templateDefinition.ppp = angular.extend({}, this.templateDefinition.ppp, {
            authentication: [{
                "sent-username": j(),
                password: l("PAP")
            }, {
                hostname: i(),
                password: l("CHAP")
            }]
        }),
        this.templateDefinition.ppp["auth-choice"] = h(),
        this.templateDefinition.ppp["username-hostname"] = k(),
        this.templateDefinition.ppp.password = l("")
    }
    ,
    g.prototype.setSameCredentials = function(a) {
        f = a
    }
    ,
    g.prototype.populateAuthentication = function(a) {
        this.extendAuthentication(),
        this.templateDefinition.ppp.authentication[0]["auth-choice"] = h(),
        d.checkNestedProperty(a, "templateDefinition", "ppp", "authentication") && (a.templateDefinition.ppp.authentication.vipValue.length < 2 ? angular.equals(a.templateDefinition.ppp.authentication.vipValue[0]["auth-choice"].vipValue, "pap") ? (this.templateDefinition.ppp["auth-choice"] = this.editObjectTemplateField(h(), a.templateDefinition.ppp.authentication.vipValue[0]["auth-choice"], ["constant"]),
        this.templateDefinition.ppp.authentication[0]["sent-username"] = this.editObjectTemplateField(j(), a.templateDefinition.ppp.authentication.vipValue[0]["sent-username"], ["constant", "variable"]),
        this.templateDefinition.ppp.authentication[0].password = this.editObjectTemplateField(l("PAP"), a.templateDefinition.ppp.authentication.vipValue[0].password, ["constant", "variable"])) : angular.equals(a.templateDefinition.ppp.authentication.vipValue[0]["auth-choice"].vipValue, "chap") && (this.templateDefinition.ppp["auth-choice"] = this.editObjectTemplateField(h(), a.templateDefinition.ppp.authentication.vipValue[0]["auth-choice"], ["constant"]),
        this.templateDefinition.ppp.authentication[1].hostname = this.editObjectTemplateField(i(), a.templateDefinition.ppp.authentication.vipValue[0].hostname, ["constant", "variable"]),
        this.templateDefinition.ppp.authentication[1].password = this.editObjectTemplateField(l("CHAP"), a.templateDefinition.ppp.authentication.vipValue[0].password, ["constant", "variable"])) : angular.equals(a.templateDefinition.ppp.authentication.vipValue[0]["sent-username"].vipType, a.templateDefinition.ppp.authentication.vipValue[1].hostname.vipType) && angular.equals(a.templateDefinition.ppp.authentication.vipValue[0].password.vipType, a.templateDefinition.ppp.authentication.vipValue[1].password.vipType) && (angular.equals(a.templateDefinition.ppp.authentication.vipValue[0]["sent-username"].vipType, b.TEMPLATE_DEF_TYPE_VARIABLE_NAME) && angular.equals(a.templateDefinition.ppp.authentication.vipValue[0]["sent-username"].vipVariableName, a.templateDefinition.ppp.authentication.vipValue[1].hostname.vipVariableName) || angular.equals(a.templateDefinition.ppp.authentication.vipValue[0].password.vipType, b.TEMPLATE_DEF_TYPE_VARIABLE_NAME) && angular.equals(a.templateDefinition.ppp.authentication.vipValue[0].password.vipVariableName, a.templateDefinition.ppp.authentication.vipValue[1].password.vipVariableName) || !angular.equals(a.templateDefinition.ppp.authentication.vipValue[0]["sent-username"].vipValue, "") && angular.equals(a.templateDefinition.ppp.authentication.vipValue[0]["sent-username"].vipValue, a.templateDefinition.ppp.authentication.vipValue[1].hostname.vipValue) && !angular.equals(a.templateDefinition.ppp.authentication.vipValue[0].password.vipValue, "") && angular.equals(a.templateDefinition.ppp.authentication.vipValue[0].password.vipValue, a.templateDefinition.ppp.authentication.vipValue[1].password.vipValue)) ? (this.templateDefinition.ppp["auth-choice"] = this.editObjectTemplateField(h(), a.templateDefinition.ppp.authentication.vipValue[0]["auth-choice"], ["constant"]),
        this.templateDefinition.ppp["auth-choice"].vipValue = "papandchap",
        this.templateDefinition.ppp["username-hostname"] = this.editObjectTemplateField(k(), a.templateDefinition.ppp.authentication.vipValue[0]["sent-username"], ["constant", "variable"]),
        this.templateDefinition.ppp.password = this.editObjectTemplateField(l(""), a.templateDefinition.ppp.authentication.vipValue[0].password, ["constant", "variable"])) : (this.templateDefinition.ppp["auth-choice"] = this.editObjectTemplateField(h(), a.templateDefinition.ppp.authentication.vipValue[0]["auth-choice"], ["constant"]),
        this.templateDefinition.ppp["auth-choice"].vipValue = "papandchap",
        this.templateDefinition.ppp.authentication[0]["sent-username"] = this.editObjectTemplateField(j(), a.templateDefinition.ppp.authentication.vipValue[0]["sent-username"], ["constant", "variable"]),
        this.templateDefinition.ppp.authentication[0].password = this.editObjectTemplateField(l("PAP"), a.templateDefinition.ppp.authentication.vipValue[0].password, ["constant", "variable"]),
        this.templateDefinition.ppp.authentication[1].hostname = this.editObjectTemplateField(i(), a.templateDefinition.ppp.authentication.vipValue[1].hostname, ["constant", "variable"]),
        this.templateDefinition.ppp.authentication[1].password = this.editObjectTemplateField(l("CHAP"), a.templateDefinition.ppp.authentication.vipValue[1].password, ["constant", "variable"])))
    }
    ,
    g.prototype.setTemplateDefinition = function() {
        var a = this.templateDefinition;
        this.templateDefinition = _.omit(a, ["nat", "nat-enable", "nat-port-forward", "dot1x", "dot1x-enable"]),
        this.omitExtraDefinitionProperty(this.templateDefinition),
        this.templateDefinition["if-name"].vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && angular.equals(this.templateDefinition["if-name"].vipVariableName, "vpn_if_name") && (this.templateDefinition["if-name"].vipVariableName = this.templateDefinition["if-name"].vipVariableName + "_" + this.templateName),
        angular.equals(a["nat-enable"].vipType, b.TEMPLATE_DEF_TYPE_IGNORE) ? delete this.templateDefinition.nat : angular.equals(a["nat-enable"].vipType, b.TEMPLATE_DEF_TYPE_VARIABLE) ? this.templateDefinition.nat = {
            vipType: b.TEMPLATE_DEF_TYPE_VARIABLE,
            vipObjectType: "node-only"
        } : angular.equals(a["nat-enable"].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && angular.equals(a["nat-enable"].vipValue, "false") ? this.templateDefinition.nat = {
            vipType: b.TEMPLATE_DEF_TYPE_IGNORE,
            vipObjectType: "node-only"
        } : angular.equals(a["nat-enable"].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && angular.equals(a["nat-enable"].vipValue, "true") && 0 === a["nat-port-forward"].length && this.areAllPropertiesDefault(a.nat) ? this.templateDefinition.nat = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipObjectType: "node-only",
            vipValue: "true"
        } : (a.nat = _.omit(a.nat, ["vipObjectType", "vipType", "dataType", "objectType", "defaultOption", "optionType", "description", "details", "key", "addPriorityField", "checkUneditable", "removeTableRow", "primaryKeys", "deleteFlag"]),
        a.nat = this.omitExtraDefinitionProperty(a.nat),
        this.templateDefinition.nat = angular.copy(a.nat),
        this.templateDefinition.nat["port-forward"] = {
            vipType: a["nat-port-forward"].length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(this.omitObjectProperties(a["nat-port-forward"]), ["port-start", "port-end", "proto", "private-vpn", "private-ip-address"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["port-start", "port-end", "proto"]
        }),
        this.templateDefinition.ppp.authentication = angular.copy(a.ppp.authentication),
        angular.equals(this.templateDefinition.ppp["auth-choice"].vipValue, "chap") ? (this.templateDefinition.ppp.authentication = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.addPriorityField(a.ppp.authentication, ["auth-choice", "hostname", "password"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["auth-choice"]
        },
        this.templateDefinition.ppp.authentication.vipValue.splice(0, 1),
        this.templateDefinition.ppp.authentication.vipValue[0]["auth-choice"] = this.templateDefinition.ppp["auth-choice"]) : angular.equals(this.templateDefinition.ppp["auth-choice"].vipValue, "pap") ? (this.templateDefinition.ppp.authentication = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.addPriorityField(a.ppp.authentication, ["auth-choice", "sent-username", "password"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["auth-choice"]
        },
        this.templateDefinition.ppp.authentication.vipValue.splice(1),
        this.templateDefinition.ppp.authentication.vipValue[0]["auth-choice"] = this.templateDefinition.ppp["auth-choice"]) : angular.equals(this.templateDefinition.ppp["auth-choice"].vipValue, "papandchap") && f ? (this.templateDefinition.ppp.authentication = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.addPriorityField(a.ppp.authentication, ["auth-choice", "sent-username", "password"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["auth-choice"]
        },
        this.templateDefinition.ppp.authentication.vipValue[0]["sent-username"] = this.templateDefinition.ppp["username-hostname"],
        this.templateDefinition.ppp.authentication.vipValue[0].password = this.templateDefinition.ppp.password,
        this.templateDefinition.ppp.authentication.vipValue[0]["auth-choice"] = angular.copy(this.templateDefinition.ppp["auth-choice"]),
        this.templateDefinition.ppp.authentication.vipValue[0]["auth-choice"].vipValue = "pap",
        this.templateDefinition.ppp.authentication.vipValue[1].hostname = this.templateDefinition.ppp["username-hostname"],
        this.templateDefinition.ppp.authentication.vipValue[1].password = this.templateDefinition.ppp.password,
        this.templateDefinition.ppp.authentication.vipValue[1]["auth-choice"] = angular.copy(this.templateDefinition.ppp["auth-choice"]),
        this.templateDefinition.ppp.authentication.vipValue[1]["auth-choice"].vipValue = "chap",
        this.templateDefinition.ppp.authentication.vipValue[1]["priority-order"] = ["auth-choice", "hostname", "password"]) : angular.equals(this.templateDefinition.ppp["auth-choice"].vipValue, "papandchap") && !f && (this.templateDefinition.ppp.authentication = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.addPriorityField(a.ppp.authentication, ["auth-choice", "sent-username", "password"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["auth-choice"]
        },
        this.templateDefinition.ppp.authentication.vipValue[0]["auth-choice"] = angular.copy(this.templateDefinition.ppp["auth-choice"]),
        this.templateDefinition.ppp.authentication.vipValue[0]["auth-choice"].vipValue = "pap",
        this.templateDefinition.ppp.authentication.vipValue[1]["auth-choice"] = angular.copy(this.templateDefinition.ppp["auth-choice"]),
        this.templateDefinition.ppp.authentication.vipValue[1]["auth-choice"].vipValue = "chap",
        this.templateDefinition.ppp.authentication.vipValue[1]["priority-order"] = ["auth-choice", "hostname", "password"]),
        delete this.templateDefinition.ppp["username-hostname"],
        delete this.templateDefinition.ppp.password,
        delete this.templateDefinition.ppp["auth-choice"],
        angular.equals(this.templateDefinition["tunnel-interface"]["tunnel-interface-enable"].vipValue, "false") ? delete this.templateDefinition["tunnel-interface"] : (delete this.templateDefinition["tunnel-interface"]["tunnel-interface-enable"],
        this.parseEncap()),
        this.parsePolicer(),
        this.parseAccessList()
    }
    ;
    var h = function() {
        return new c({
            key: "auth-choice",
            description: "Authentication Protocol",
            details: "Protocol for the authentication of the remote PPP peer CHAP/PAP",
            optionType: ["constant"],
            defaultOption: "constant",
            dataType: {
                type: "enum",
                values: [{
                    key: "chap",
                    value: "CHAP"
                }, {
                    key: "pap",
                    value: "PAP"
                }, {
                    key: "papandchap",
                    value: "PAP and CHAP"
                }]
            },
            dataPath: [],
            objectType: "object"
        })
    }
      , i = function() {
        return new c({
            key: "hostname",
            description: "CHAP Hostname",
            details: "Hostname",
            optionType: ["constant", "variable"],
            defaultOption: "constant",
            dataType: {
                type: "string",
                minLength: 1,
                maxLength: 255
            },
            dataPath: [],
            objectType: "object"
        })
    }
      , j = function() {
        return new c({
            key: "sent-username",
            description: "PAP Username",
            details: "Sent Username",
            optionType: ["constant", "variable"],
            defaultOption: "constant",
            dataType: {
                type: "string",
                minLength: 1,
                maxLength: 255
            },
            dataPath: [],
            objectType: "object"
        })
    }
      , k = function() {
        return new c({
            key: "hostname-username",
            description: "Hostname/Username",
            details: "Hostname/Username",
            optionType: ["constant", "variable"],
            defaultOption: "constant",
            dataType: {
                type: "string",
                minLength: 1,
                maxLength: 255
            },
            dataPath: [],
            objectType: "object"
        })
    }
      , l = function(a) {
        return new c({
            key: "password",
            description: a + " Password",
            details: "Specify " + a + " Password",
            optionType: ["constant", "variable"],
            defaultOption: "constant",
            dataType: {
                type: "restrictedPassphrase",
                minLength: 1,
                maxLength: 64
            },
            dataPath: [],
            objectType: "object"
        })
    };
    return g
}
function VedgeVpnInterfaceTemplate(a, b, c, d, e, f, g) {
    function h(a, b) {
        return new c({
            key: "nat-enable",
            description: "NAT",
            details: "NAT",
            optionType: ["constant", "variable", "ignore"],
            defaultOption: a,
            dataType: {
                type: "boolean",
                default: "false"
            },
            objectType: "object",
            vipType: a,
            vipValue: b
        })
    }
    function i(a, b) {
        return new c({
            key: "dot1x-enable",
            description: "802.1X",
            details: "Enable 802.1X authentication on this interface",
            optionType: ["constant", "ignore"],
            defaultOption: a,
            dataType: {
                type: "boolean",
                default: b
            },
            dataPath: [],
            objectType: "object",
            vipType: a,
            vipValue: b
        })
    }
    function j(a, b) {
        return new c({
            key: "allow-enable",
            description: "Allow",
            details: "Allow locally without RADIUS authentication ",
            optionType: ["constant", "variable", "ignore"],
            defaultOption: a,
            dataType: {
                type: "boolean",
                default: b
            },
            dataPath: ["dot1x", "mac-authentication-bypass"],
            objectType: "object",
            vipType: a,
            vipValue: b
        })
    }
    function k(a) {
        return new c({
            key: "preference",
            description: a + " Preference",
            details: "Set preference for TLOC",
            optionType: ["constant", "variable", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "number",
                min: 0,
                max: 4294967295
            },
            objectType: "object"
        })
    }
    function l(a) {
        return new c({
            key: "weight",
            description: a + " Weight",
            details: "Set weight for TLOC",
            optionType: ["constant", "variable", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "number",
                min: 1,
                max: 255,
                default: 1
            },
            objectType: "object"
        })
    }
    function m(a, b, d) {
        return new c({
            key: "address",
            description: "IP Address",
            details: "IP Address",
            optionType: ["constant", "variable"],
            defaultOption: "constant",
            dataType: {
                type: "ipv4-prefix"
            },
            dataPath: [],
            objectType: "object",
            vipValue: a,
            vipType: b,
            vipVariableName: d
        })
    }
    var n = function() {
        a.apply(this, arguments),
        this.templateDefinition = angular.extend({}, this.templateDefinition, {
            "nat-enable": {},
            "dot1x-enable": {},
            "shaping-rate": {},
            "qos-map": {},
            tracker: {},
            "bandwidth-upstream": {},
            "bandwidth-downstream": {},
            "block-non-source-ip": {},
            "rewrite-rule": {
                "rule-name": {}
            },
            "tloc-extension": {},
            "nat-port-forward": [],
            vrrp: []
        }),
        this.templateDefinition.ip["secondary-address"] = [],
        this.ipConfigType = "dynamic",
        this.ipv6ConfigType = "dynamic",
        this.extendAccessList(),
        this.extendPolicer()
    };
    n.prototype = new a,
    n.prototype.extendTunnelInterface = function() {
        a.prototype.extendTunnelInterface.call(this),
        this.templateDefinition["tunnel-interface"] = angular.extend({}, this.templateDefinition["tunnel-interface"], {
            encapsulation: [{
                gre: angular.copy(G),
                preference: k("GRE"),
                weight: l("GRE")
            }, {
                ipsec: angular.copy(H),
                preference: k("IPsec"),
                weight: l("IPsec")
            }],
            group: {},
            border: {},
            color: {
                value: {},
                restrict: {}
            },
            carrier: {},
            bind: {},
            "allow-service": {
                dhcp: {},
                dns: {},
                icmp: {},
                sshd: {},
                ntp: {},
                stun: {},
                all: {},
                bgp: {},
                ospf: {},
                netconf: {}
            },
            "max-control-connections": {},
            "vbond-as-stun-server": {},
            "exclude-controller-group-list": {},
            "vmanage-connection-preference": {},
            "port-hop": {},
            "low-bandwidth-link": {},
            "last-resort-circuit": {},
            "nat-refresh-interval": {},
            "hello-interval": {},
            "hello-tolerance": {}
        })
    }
    ,
    n.prototype.extendTemplate = function(c) {
        a.prototype.extendTemplate.call(this, c),
        e.checkNestedProperty(c, "templateDefinition", "nat") ? angular.isDefined(c.templateDefinition.nat.vipType) && angular.equals(c.templateDefinition.nat.vipType, b.TEMPLATE_DEF_TYPE_VARIABLE) ? this.templateDefinition["nat-enable"] = h(b.TEMPLATE_DEF_TYPE_VARIABLE, "") : angular.isDefined(c.templateDefinition.nat.vipType) && angular.equals(c.templateDefinition.nat.vipType, b.TEMPLATE_DEF_TYPE_IGNORE) ? (this.templateDefinition.nat = {
            refresh: {},
            "udp-timeout": {},
            "tcp-timeout": {},
            "block-icmp-error": {},
            "respond-to-ping": {}
        },
        this.templateDefinition["nat-enable"] = h(b.TEMPLATE_DEF_TYPE_CONSTANT, "false")) : this.templateDefinition["nat-enable"] = h(b.TEMPLATE_DEF_TYPE_CONSTANT, "true") : (this.templateDefinition = angular.extend({}, this.templateDefinition, {
            nat: {
                refresh: {},
                "udp-timeout": {},
                "tcp-timeout": {},
                "block-icmp-error": {},
                "respond-to-ping": {}
            }
        }),
        this.templateDefinition["nat-enable"] = h(b.TEMPLATE_DEF_TYPE_IGNORE, "false")),
        e.checkNestedProperty(c, "templateDefinition", "dot1x") ? angular.isDefined(c.templateDefinition.dot1x.vipType) && angular.equals(c.templateDefinition.dot1x.vipType, b.TEMPLATE_DEF_TYPE_VARIABLE) ? this.templateDefinition["dot1x-enable"] = i(b.TEMPLATE_DEF_TYPE_VARIABLE, "") : angular.isDefined(c.templateDefinition.dot1x.vipType) && angular.equals(c.templateDefinition.dot1x.vipType, b.TEMPLATE_DEF_TYPE_IGNORE) ? (this.templateDefinition.dot1x = {
            "control-direction": {},
            "wake-on-lan": {},
            reauthentication: {},
            "auth-fail-vlan": {},
            "guest-vlan": {},
            "default-vlan": {},
            "host-mode": {},
            "nas-identifier": {},
            "nas-ip-address": {},
            "radius-servers": {},
            "accounting-interval": {},
            "auth-order": {},
            timeout: {
                inactivity: {}
            },
            das: {
                port: {},
                "time-window": {},
                "require-timestamp": {},
                client: {},
                "secret-key": {}
            },
            "mac-authentication-bypass": {
                server: {},
                "allow-enable": j(b.TEMPLATE_DEF_TYPE_IGNORE, "false"),
                allow: []
            },
            "auth-req-attr": [],
            "acct-req-attr": []
        },
        this.templateDefinition["dot1x-enable"] = i(b.TEMPLATE_DEF_TYPE_CONSTANT, "false")) : (this.templateDefinition["dot1x-enable"] = i(b.TEMPLATE_DEF_TYPE_CONSTANT, "false"),
        this.templateDefinition.dot1x["mac-authentication-bypass"]["allow-enable"] = j(b.TEMPLATE_DEF_TYPE_IGNORE, "false"),
        angular.isDefined(this.templateDefinition.dot1x["mac-authentication-bypass"].allow.vipValue) && (this.templateDefinition.dot1x["mac-authentication-bypass"]["allow-enable"].vipValue = "true",
        this.templateDefinition.dot1x["mac-authentication-bypass"]["allow-enable"].vipType = "constant"),
        this.templateDefinition["dot1x-enable"].vipValue = "true") : (this.templateDefinition = angular.extend({}, this.templateDefinition, {
            dot1x: {
                "control-direction": {},
                "wake-on-lan": {},
                reauthentication: {},
                "auth-fail-vlan": {},
                "guest-vlan": {},
                "default-vlan": {},
                "host-mode": {},
                "nas-identifier": {},
                "nas-ip-address": {},
                "radius-servers": {},
                "accounting-interval": {},
                "auth-order": {},
                timeout: {
                    inactivity: {}
                },
                das: {
                    port: {},
                    "time-window": {},
                    "require-timestamp": {},
                    client: {},
                    "secret-key": {}
                },
                "mac-authentication-bypass": {
                    server: {},
                    "allow-enable": j(b.TEMPLATE_DEF_TYPE_IGNORE, "false"),
                    allow: []
                },
                "auth-req-attr": [],
                "acct-req-attr": []
            }
        }),
        this.templateDefinition["dot1x-enable"] = i(b.TEMPLATE_DEF_TYPE_IGNORE, "false")),
        c = angular.copy(c),
        this.populatePolicer(c),
        this.populateAccessList(c)
    }
    ,
    n.prototype.extendPolicer = function(a) {
        this.templateDefinition = angular.extend({}, this.templateDefinition, {
            policer: [{
                in: C,
                "policer-name": F("Ingress")
            }, {
                out: E,
                "policer-name": F("Egress")
            }]
        })
    }
    ,
    n.prototype.extendAccessList = function(a) {
        this.templateDefinition = angular.extend({}, this.templateDefinition, {
            "access-list": [{
                in: s(),
                "acl-name": A("IPv4 Ingress")
            }, {
                out: u(),
                "acl-name": A("IPv4 Egress")
            }]
        }),
        this.templateDefinition.ipv6 = angular.extend({}, this.templateDefinition.ipv6, {
            "access-list": [{
                in: w(),
                "acl-name": A("IPv6 Ingress")
            }, {
                out: y(),
                "acl-name": A("IPv6 Egress")
            }]
        })
    }
    ,
    n.prototype.populatePolicer = function(a) {
        var b = this;
        if (!angular.isDefined(this.templateDefinition.policer.vipValue) || this.templateDefinition.policer.vipValue.length < 1)
            return this.extendPolicer(),
            this.templateDefinition.policer[0].in = B(),
            void (this.templateDefinition.policer[1].out = D());
        if (angular.equals(a.templateDefinition.policer.vipValue[0].direction.vipValue, "out"))
            b.templateDefinition.policer = [{
                in: C,
                "policer-name": F("Ingress")
            }],
            o(a, 0),
            b.templateDefinition.policer.push(a.templateDefinition.policer.vipValue[0]);
        else {
            b.templateDefinition.policer = [],
            a.templateDefinition.policer.vipValue[0]["policer-name"] = p(a.templateDefinition.policer.vipValue, 0);
            var d = angular.copy(C);
            d.optionType = ["constant", "ignore"],
            d = new c(d),
            d.vipType = a.templateDefinition.policer.vipValue[0].direction.vipType,
            d.vipValue = "true",
            a.templateDefinition.policer.vipValue[0].in = d,
            delete a.templateDefinition.policer.vipValue[0].direction,
            delete a.templateDefinition.policer.vipValue[0]["priority-order"],
            b.templateDefinition.policer.push(a.templateDefinition.policer.vipValue[0]),
            2 == a.templateDefinition.policer.vipValue.length ? (o(a, 1),
            b.templateDefinition.policer.push(a.templateDefinition.policer.vipValue[1])) : b.templateDefinition.policer.push({
                out: E,
                "policer-name": F("Egress")
            })
        }
    }
    ;
    var o = function(a, b) {
        a.templateDefinition.policer.vipValue[b]["policer-name"] = p(a.templateDefinition.policer.vipValue, b);
        var d = angular.copy(E);
        d.optionType = ["constant", "ignore"],
        d = new c(d),
        d.vipType = a.templateDefinition.policer.vipValue[b].direction.vipType,
        d.vipValue = "true",
        delete a.templateDefinition.policer.vipValue[b].direction,
        delete a.templateDefinition.policer.vipValue[b]["priority-order"],
        a.templateDefinition.policer.vipValue[b].out = d
    }
      , p = function(a, c) {
        var d = F("in" === a[c].direction.vipValue ? " Ingress" : " Egress");
        return d.vipType = a[c]["policer-name"].vipType,
        d.vipValue = a[c]["policer-name"].vipValue,
        d.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (d.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE,
        d.vipVariableName = a[c]["policer-name"].vipVariableName),
        d
    };
    n.prototype.populateAccessList = function(a) {
        var b = this;
        if ((!e.checkNestedProperty(this, "templateDefinition", "access-list", "vipValue") || this.templateDefinition["access-list"].vipValue.length < 1) && (this.extendAccessList(),
        this.templateDefinition["access-list"][0].in = s(),
        this.templateDefinition["access-list"][1].out = u()),
        (!e.checkNestedProperty(this, "templateDefinition", "ipv6", "access-list", "vipValue") || this.templateDefinition.ipv6["access-list"].vipValue.length < 1) && (this.extendAccessList(),
        this.templateDefinition.ipv6["access-list"][0].in = w(),
        this.templateDefinition.ipv6["access-list"][1].out = y()),
        angular.isDefined(a.templateDefinition && a.templateDefinition["access-list"] && a.templateDefinition["access-list"].vipValue) && a.templateDefinition["access-list"].vipValue.length > 0)
            if (angular.equals(a.templateDefinition["access-list"].vipValue[0].direction.vipValue, "out"))
                b.templateDefinition["access-list"] = [{
                    in: s(),
                    "acl-name": A("IPv4 Ingress")
                }],
                q(a, 0, "v4"),
                b.templateDefinition["access-list"].push(a.templateDefinition["access-list"].vipValue[0]);
            else {
                b.templateDefinition["access-list"] = [],
                a.templateDefinition["access-list"].vipValue[0]["acl-name"] = r("IPv4", a.templateDefinition["access-list"].vipValue, 0);
                var d = angular.copy(t);
                d.optionType = ["constant", "ignore"],
                d = new c(d),
                d.vipType = a.templateDefinition["access-list"].vipValue[0].direction.vipType,
                d.vipValue = "true",
                a.templateDefinition["access-list"].vipValue[0].in = d,
                delete a.templateDefinition["access-list"].vipValue[0].direction,
                delete a.templateDefinition["access-list"].vipValue[0]["priority-order"],
                b.templateDefinition["access-list"].push(a.templateDefinition["access-list"].vipValue[0]),
                2 == a.templateDefinition["access-list"].vipValue.length ? (q(a, 1, "v4"),
                b.templateDefinition["access-list"].push(a.templateDefinition["access-list"].vipValue[1])) : b.templateDefinition["access-list"].push({
                    out: u(),
                    "acl-name": A("IPv4 Egress")
                })
            }
        if (angular.isDefined(a.templateDefinition) && angular.isDefined(a.templateDefinition.ipv6) && angular.isDefined(a.templateDefinition.ipv6["access-list"]) && angular.isDefined(a.templateDefinition.ipv6["access-list"].vipValue) && a.templateDefinition.ipv6["access-list"].vipValue.length > 0)
            if (angular.equals(a.templateDefinition.ipv6["access-list"].vipValue[0].direction.vipValue, "out"))
                b.templateDefinition.ipv6["access-list"] = [{
                    in: w(),
                    "acl-name": A("IPv6 Ingress")
                }],
                q(a, 0, "v6"),
                b.templateDefinition.ipv6["access-list"].push(a.templateDefinition.ipv6["access-list"].vipValue[0]);
            else {
                b.templateDefinition.ipv6["access-list"] = [],
                a.templateDefinition.ipv6["access-list"].vipValue[0]["acl-name"] = r("IPv6", a.templateDefinition.ipv6["access-list"].vipValue, 0);
                var d = angular.copy(x);
                d.optionType = ["constant", "ignore"],
                d = new c(d),
                d.vipType = a.templateDefinition.ipv6["access-list"].vipValue[0].direction.vipType,
                d.vipValue = "true",
                a.templateDefinition.ipv6["access-list"].vipValue[0].in = d,
                delete a.templateDefinition.ipv6["access-list"].vipValue[0].direction,
                delete a.templateDefinition.ipv6["access-list"].vipValue[0]["priority-order"],
                b.templateDefinition.ipv6["access-list"].push(a.templateDefinition.ipv6["access-list"].vipValue[0]),
                2 == a.templateDefinition.ipv6["access-list"].vipValue.length ? (q(a, 1, "v6"),
                b.templateDefinition.ipv6["access-list"].push(a.templateDefinition.ipv6["access-list"].vipValue[1])) : b.templateDefinition.ipv6["access-list"].push({
                    out: y(),
                    "acl-name": A("IPv6 Egress")
                })
            }
    }
    ;
    var q = function(a, b, d) {
        var e = {};
        "v4" === d ? (a.templateDefinition["access-list"].vipValue[b]["acl-name"] = r("IPv4", a.templateDefinition["access-list"].vipValue, b),
        e = angular.copy(v),
        e.vipType = a.templateDefinition["access-list"].vipValue[b].direction.vipType) : (a.templateDefinition.ipv6["access-list"].vipValue[b]["acl-name"] = r("IPv6", a.templateDefinition.ipv6["access-list"].vipValue, b),
        e = angular.copy(z),
        e.vipType = a.templateDefinition.ipv6["access-list"].vipValue[b].direction.vipType),
        e.optionType = ["constant", "ignore"],
        e = new c(e),
        e.vipValue = "true",
        "v4" === d ? (delete a.templateDefinition["access-list"].vipValue[b].direction,
        delete a.templateDefinition["access-list"].vipValue[b]["priority-order"],
        a.templateDefinition["access-list"].vipValue[b].out = e) : (delete a.templateDefinition.ipv6["access-list"].vipValue[b].direction,
        delete a.templateDefinition.ipv6["access-list"].vipValue[b]["priority-order"],
        a.templateDefinition.ipv6["access-list"].vipValue[b].out = e)
    }
      , r = function(a, c, d) {
        var e = A(a + (c[d].direction.vipValue ? " Ingress" : " Egress"));
        return e.vipType = c[d]["acl-name"].vipType,
        e.vipValue = c[d]["acl-name"].vipValue,
        e.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (e.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE,
        e.vipVariableName = c[d]["acl-name"].vipVariableName),
        e
    };
    n.prototype.setIpConfigType = function(a) {
        this.ipConfigType = a
    }
    ,
    n.prototype.setIpv6ConfigType = function(a) {
        this.ipv6ConfigType = a
    }
    ,
    n.prototype.addSecAddress = function() {
        this.secAddrIndex !== this.templateDefinition.ip["secondary-address"].maxElements && (0 === this.secAddrIndex && (this.templateDefinition.ip["secondary-address"].vipValue = []),
        this.templateDefinition.ip["secondary-address"].vipValue[this.secAddrIndex] = {},
        this.templateDefinition.ip["secondary-address"].vipValue[this.secAddrIndex].address = m(),
        this.secAddrIndex++)
    }
    ,
    n.prototype.deleteSecAddress = function(a) {
        this.templateDefinition.ip["secondary-address"].vipValue.splice(a, 1),
        this.secAddrIndex--
    }
    ,
    n.prototype.setSecondaryAddress = function() {
        if (e.checkNestedProperty(this, "templateDefinition", "ip", "secondary-address")) {
            var a = this;
            angular.forEach(this.templateDefinition.ip["secondary-address"].vipValue, function(c) {
                a.templateDefinition.ip["secondary-address"].vipValue[a.secAddrIndex] = {
                    address: m(c.address.vipValue, c.address.vipType, c.address.vipVariableName)
                },
                a.templateDefinition.ip["secondary-address"].vipValue[a.secAddrIndex].address.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (a.templateDefinition.ip["secondary-address"].vipValue[a.secAddrIndex].address.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE),
                a.secAddrIndex++
            })
        }
    }
    ,
    n.prototype.createPortForwardTable = function() {
        var a = new g({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "port_forward",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    n.prototype.setPortForwardTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d["port-start"] = c.editObjectTemplateField(a.children["port-start"], d["port-start"]),
                d["port-end"] = c.editObjectTemplateField(a.children["port-end"], d["port-end"]),
                d.proto = c.editObjectTemplateField(a.children.proto, d.proto),
                d["private-vpn"] = c.editObjectTemplateField(a.children["private-vpn"], d["private-vpn"]),
                d["private-ip-address"] = c.editObjectTemplateField(a.children["private-ip-address"], d["private-ip-address"]),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "Port Start Range",
            property: "port-start",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.nat["port-forward"].children["port-start"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="nat_port-start-range" view-mode="view" ng-model="row.entity[\'port-start\']" data-name="port_start_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Port End Range",
            property: "port-end",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.nat["port-forward"].children["port-end"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="nat_port-stop-range" view-mode="view" ng-model="row.entity[\'port-end\']" data-name="port_end_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Protocol",
            property: "proto",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.nat["port-forward"].children.proto.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="nat_protocol" view-mode="view" ng-model="row.entity.proto" data-name="proto_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "VPN",
            property: "private-vpn",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.nat["port-forward"].children["private-vpn"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="nat_vpn" custom-prepend-variable-name="vpn_if_port" view-mode="view" ng-model="row.entity[\'private-vpn\']" data-name="private_vpn_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Private IP",
            property: "private-ip-address",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.nat["port-forward"].children["private-ip-address"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="nat_private-ip" custom-prepend-variable-name="vpn_if_port" view-mode="view" ng-model="row.entity[\'private-ip-address\']" data-name="private_ip_address_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(this.templateDefinition.nat["port-forward"].children),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.nat) && angular.isDefined(this.templateDefinition.nat["port-forward"]) && angular.isArray(this.templateDefinition.nat["port-forward"].vipValue) && this.templateDefinition.nat["port-forward"].vipValue.length > 0 && (b(this.templateDefinition.nat["port-forward"], a.data),
        delete this.templateDefinition.nat["port-forward"])
    }
    ,
    n.prototype.createVrrpTable = function() {
        var a = new g({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            addMaxRow: 1,
            tableName: "vrrp",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    n.prototype.setVrrpTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d["grp-id"] = c.editObjectTemplateField(a.children["grp-id"], d["grp-id"]),
                d.priority = c.editObjectTemplateField(a.children.priority, d.priority),
                d.timer = c.editObjectTemplateField(a.children.timer, d.timer),
                d["track-omp"] = c.editObjectTemplateField(a.children["track-omp"], d["track-omp"]),
                d["track-prefix-list"] = c.editObjectTemplateField(a.children["track-prefix-list"], d["track-prefix-list"]),
                d.ipv4.address = c.editObjectTemplateField(a.children.ipv4.address, d.ipv4.address),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "Group ID",
            property: "grp-id",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.vrrp.children["grp-id"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="vrrp_group_{{rowRenderIndex}}" data-path="vrrp_group-id"  view-mode="view" ng-model="row.entity[\'grp-id\']" data-name="grpid_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Priority",
            property: "priority",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.vrrp.children.priority.details,
            width: 175,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="vrrp_priority" custom-prepend-variable-name="vrrp" view-mode="view" ng-model="row.entity.priority" data-name="priority_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Timer",
            property: "timer",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.vrrp.children.timer.details,
            width: 185,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="vrrp_timer" custom-prepend-variable-name="vrrp" view-mode="view" ng-model="row.entity.timer" data-name="timer_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Track OMP",
            property: "track-omp",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.vrrp.children["track-omp"].details,
            width: 240,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="vrrp_track-omp" custom-prepend-variable-name="vrrp" view-mode="view" ng-model="row.entity[\'track-omp\']" data-name="track_omp_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Track Prefix List",
            property: "track-prefix-list",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.vrrp.children["track-prefix-list"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="vrrp_track-prefix-list" custom-prepend-variable-name="vrrp" view-mode="view" data-ng-hide="row.entity[\'track-omp\'].vipValue === \'true\'" ng-model="row.entity[\'track-prefix-list\']" data-name="track_prefix_list_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "IP Address",
            property: "ipv4.address",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.vrrp.children.ipv4.address.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="vrrp_ip-address" view-mode="view" ng-model="row.entity.ipv4.address" data-name="vrrp_ipaddress_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(this.templateDefinition.vrrp.children),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.vrrp) && angular.isArray(this.templateDefinition.vrrp.vipValue) && this.templateDefinition.vrrp.vipValue.length > 0 && b(this.templateDefinition.vrrp, a.data)
    }
    ,
    a.prototype.createAttrTable = function(a) {
        var b = new g({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 3,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "dot1x-" + a,
            toolbar: !1
        });
        return b.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        b
    }
    ,
    a.prototype.setAttrTable = function(a, c, d) {
        function e(a, c) {
            angular.forEach(a.vipValue, function(d) {
                d.id = f.editObjectTemplateField(a.children.id, d.id),
                d.integer = f.editObjectTemplateField(a.children.integer, d.integer),
                d.string = f.editObjectTemplateField(a.children.string, d.string),
                d.octet = f.editObjectTemplateField(a.children.octet, d.octet),
                d.choice = f.editObjectTemplateField(a.children.choice, d.choice),
                d.choice.vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
                d.choice.vipValue = d["priority-order"][1],
                delete d["priority-order"],
                c.push(d)
            })
        }
        var f = this;
        this.templateDefinition.dot1x[d].children.choice = I;
        var g = [{
            title: "ID",
            property: "id",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.dot1x[d].children.id.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="dot1x_' + c + 'id" view-mode="view" ng-model="row.entity.id" data-name="' + c + '_id_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Syntax Choice",
            property: "syntax-choice",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.dot1x[d].children.choice.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="dot1x_' + c + 'choice" view-mode="view" ng-model="row.entity.choice" data-name="' + c + '_syntax_choice_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Syntax Value",
            property: "value",
            editable: !1,
            dataType: "string",
            cellTemplate: '<div class="ui-grid-cell-contents"><div ng-if="row.entity.choice.vipValue === \'string\'"><vip-multi-state-input data-path="dot1x_' + c + 'string" view-mode="view" ng-model="row.entity.string" data-name="' + c + '_string_{{rowRenderIndex}}"></vip-multi-state-input></div><div ng-if="row.entity.choice.vipValue === \'integer\'"><vip-multi-state-input data-path="dot1x_' + c + 'integer" view-mode="view" ng-model="row.entity.integer" data-name="' + c + '_integer_{{rowRenderIndex}}"></vip-multi-state-input></div><div ng-if="row.entity.choice.vipValue === \'octet\'"><vip-multi-state-input data-path="dot1x_' + c + 'octet" hexa-number="true" view-mode="view" ng-model="row.entity.octet" data-name="' + c + '_octet_{{rowRenderIndex}}"></vip-multi-state-input></div></div>'
        }];
        angular.equals(this.viewMode, "view") || g.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(this.templateDefinition.dot1x[d].children),
        a.setNewRowToggleData({
            id: this.templateDefinition.dot1x[d].children.id,
            choice: this.templateDefinition.dot1x[d].children.choice,
            integer: this.templateDefinition.dot1x[d].children.integer,
            string: this.templateDefinition.dot1x[d].children.string,
            octet: this.templateDefinition.dot1x[d].children.octet
        }),
        a.createColumns(g),
        angular.isDefined(this.templateDefinition.dot1x[d]) && angular.isArray(this.templateDefinition.dot1x[d].vipValue) && this.templateDefinition.dot1x[d].vipValue.length > 0 && e(this.templateDefinition.dot1x[d], a.data)
    }
    ,
    n.prototype.setTemplateDefinition = function() {
        var a = this
          , c = this.templateDefinition;
        this.templateDefinition = _.omit(c, ["arp", "vrrp", "nat", "nat-enable", "nat-port-forward", "dot1x", "dot1x-enable", "das", "allow-list", "mac-authentication-bypass"]),
        angular.isDefined(this.templateDefinition["tunnel-interface"]["hold-time"]) && delete this.templateDefinition["tunnel-interface"]["hold-time"],
        this.omitExtraDefinitionProperty(this.templateDefinition),
        this.templateDefinition["if-name"].vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && angular.equals(this.templateDefinition["if-name"].vipVariableName, "vpn_if_name") && (this.templateDefinition["if-name"].vipVariableName = this.templateDefinition["if-name"].vipVariableName + "_" + this.templateName),
        angular.equals(this.ipConfigType, "static") ? (angular.isDefined(c.ip["dhcp-client"]) && delete this.templateDefinition.ip["dhcp-client"],
        angular.isDefined(c.ip["dhcp-distance"]) && delete this.templateDefinition.ip["dhcp-distance"]) : (c.ip["dhcp-client"].vipObjectType = "object",
        c.ip["dhcp-client"].vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
        angular.isDefined(c.ip.address) && delete this.templateDefinition.ip.address),
        angular.equals(this.ipv6ConfigType, "static") ? (angular.isDefined(c.ipv6["dhcp-client"]) && delete this.templateDefinition.ipv6["dhcp-client"],
        angular.isDefined(c.ipv6["dhcp-distance"]) && delete this.templateDefinition.ipv6["dhcp-distance"],
        angular.isDefined(c.ipv6["dhcp-rapid-commit"]) && delete this.templateDefinition.ipv6["dhcp-rapid-commit"]) : (c.ipv6["dhcp-client"].vipObjectType = "object",
        c.ipv6["dhcp-client"].vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
        angular.isDefined(c.ipv6.address) && delete this.templateDefinition.ipv6.address),
        delete this.ipConfigType,
        delete this.ipv6ConfigType,
        this.templateDefinition.ip["secondary-address"] = {
            vipType: e.checkNestedProperty(c, "ip", "secondary-address", "vipValue", "length") && c.ip["secondary-address"].vipValue.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: e.checkNestedProperty(c, "ip", "secondary-address", "vipValue", "length") ? this.addPriorityField(this.omitObjectProperties(c.ip["secondary-address"].vipValue), ["address"]) : [],
            vipObjectType: "tree",
            vipPrimaryKey: ["address"]
        },
        angular.equals(c["nat-enable"].vipType, b.TEMPLATE_DEF_TYPE_IGNORE) ? delete this.templateDefinition.nat : angular.equals(c["nat-enable"].vipType, b.TEMPLATE_DEF_TYPE_VARIABLE) ? this.templateDefinition.nat = {
            vipType: b.TEMPLATE_DEF_TYPE_VARIABLE,
            vipObjectType: "node-only"
        } : angular.equals(c["nat-enable"].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && angular.equals(c["nat-enable"].vipValue, "false") ? this.templateDefinition.nat = {
            vipType: b.TEMPLATE_DEF_TYPE_IGNORE,
            vipObjectType: "node-only"
        } : angular.equals(c["nat-enable"].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && angular.equals(c["nat-enable"].vipValue, "true") && 0 === c["nat-port-forward"].length && this.areAllPropertiesDefault(c.nat) ? this.templateDefinition.nat = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipObjectType: "node-only",
            vipValue: "true"
        } : (c.nat = _.omit(c.nat, ["vipObjectType", "vipType", "dataType", "objectType", "defaultOption", "optionType", "description", "details", "key", "addPriorityField", "checkUneditable", "removeTableRow", "primaryKeys", "deleteFlag", "vipType", "vipValue"]),
        c.nat = this.omitExtraDefinitionProperty(c.nat),
        this.templateDefinition.nat = angular.copy(c.nat),
        this.templateDefinition.nat["port-forward"] = {
            vipType: c["nat-port-forward"].length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(this.omitObjectProperties(c["nat-port-forward"]), ["port-start", "port-end", "proto", "private-vpn", "private-ip-address"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["port-start", "port-end", "proto"]
        }),
        this.templateDefinition.arp = {
            ip: {
                vipType: c.arp.ip.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
                vipValue: this.addPriorityField(this.omitObjectProperties(c.arp.ip), ["addr", "mac"]),
                vipObjectType: "tree",
                vipPrimaryKey: ["addr"]
            }
        },
        c.vrrp = this.omitObjectProperties(c.vrrp, ["ipv4"]),
        angular.forEach(c.vrrp, function(b) {
            b.ipv4.address = a.omitObjectProperties(b.ipv4.address)
        }),
        this.templateDefinition.vrrp = {
            vipType: c.vrrp.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.addPriorityField(c.vrrp, ["grp-id", "priority", "timer", "track-omp", "track-prefix-list", "ipv4"]),
            vipObjectType: "tree",
            vipPrimaryKey: ["grp-id"]
        },
        angular.equals(this.templateDefinition["tunnel-interface"]["tunnel-interface-enable"].vipValue, "false") ? delete this.templateDefinition["tunnel-interface"] : (delete this.templateDefinition["tunnel-interface"]["tunnel-interface-enable"],
        this.parseEncap()),
        this.parsePolicer(),
        this.parseAccessList(),
        this.parseDot1x(c)
    }
    ,
    n.prototype.parseDot1x = function(a) {
        if (!angular.isUndefined(a["nat-enable"].vipValue) && angular.equals(a["nat-enable"].vipValue, "true") || !angular.isUndefined(a["tloc-extension"].vipValue) && angular.equals(a["tloc-extension"].vipValue, "true") || angular.equals(a["dot1x-enable"].vipType, b.TEMPLATE_DEF_TYPE_IGNORE))
            this.templateDefinition.dot1x = {
                vipType: b.TEMPLATE_DEF_TYPE_IGNORE,
                vipObjectType: "node-only"
            };
        else if (angular.equals(a["dot1x-enable"].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && angular.equals(a["dot1x-enable"].vipValue, "false"))
            this.templateDefinition.dot1x = {
                vipType: b.TEMPLATE_DEF_TYPE_IGNORE,
                vipObjectType: "node-only"
            };
        else if (angular.equals(a["dot1x-enable"].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && angular.equals(a["dot1x-enable"].vipValue, "true") && this.areAllPropertiesDefault(a.dot1x) && this.areAllPropertiesDefault(a.dot1x.timeout) && this.areAllPropertiesDefault(a.dot1x.das) && this.areAllPropertiesDefault(a.dot1x["mac-authentication-bypass"]) && 0 == a.dot1x["auth-req-attr"].length && 0 == a.dot1x["acct-req-attr"].length)
            this.templateDefinition.dot1x = {
                vipType: b.TEMPLATE_DEF_TYPE_IGNORE,
                vipObjectType: "node-only"
            };
        else {
            a.dot1x = _.omit(a.dot1x, ["vipObjectType", "dataType", "objectType", "defaultOption", "optionType", "description", "details", "key", "addPriorityField", "checkUneditable", "removeTableRow", "primaryKeys", "deleteFlag", "vipType", "vipValue"]);
            a.dot1x["mac-authentication-bypass"];
            a.dot1x = this.omitExtraDefinitionProperty(a.dot1x),
            delete a.dot1x["auth-order"],
            a.dot1x["auth-req-attr"].length > 0 ? a.dot1x["auth-req-attr"] = {
                vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                vipValue: this.constructRequestAttr(a.dot1x["auth-req-attr"]),
                vipObjectType: "tree",
                vipPrimaryKey: ["id"]
            } : delete a.dot1x["auth-req-attr"],
            a.dot1x["acct-req-attr"].length > 0 ? a.dot1x["acct-req-attr"] = {
                vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                vipValue: this.constructRequestAttr(a.dot1x["acct-req-attr"]),
                vipObjectType: "tree",
                vipPrimaryKey: ["id"]
            } : delete a.dot1x["acct-req-attr"],
            this.templateDefinition.dot1x = angular.copy(a.dot1x),
            delete this.templateDefinition.dot1x["mac-authentication-bypass"]["allow-enable"]
        }
    }
    ,
    n.prototype.constructRequestAttr = function(a) {
        var b = [];
        return angular.forEach(a, function(a) {
            var c = {};
            c.id = a.id,
            c[a.choice.vipValue] = a[a.choice.vipValue],
            c["priority-order"] = ["id"],
            c["priority-order"].push(a.choice.vipValue),
            b.push(c)
        }),
        b
    }
    ,
    n.prototype.parsePolicer = function() {
        "true" == this.templateDefinition.policer[1].out.vipValue ? (this.templateDefinition.policer[1].direction = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: "out",
            vipObjectType: "object"
        },
        this.templateDefinition.policer[1]["priority-order"] = ["policer-name", "direction"],
        delete this.templateDefinition.policer[1].out) : this.templateDefinition.policer.splice(1, 1),
        "true" == this.templateDefinition.policer[0].in.vipValue ? (this.templateDefinition.policer[0].direction = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: "in",
            vipObjectType: "object"
        },
        this.templateDefinition.policer[0]["priority-order"] = ["policer-name", "direction"],
        delete this.templateDefinition.policer[0].in) : this.templateDefinition.policer.splice(0, 1),
        this.templateDefinition.policer = {
            vipType: this.templateDefinition.policer.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.templateDefinition.policer,
            vipObjectType: "tree",
            vipPrimaryKey: ["policer-name", "direction"]
        }
    }
    ,
    n.prototype.parseAccessList = function() {
        "true" == this.templateDefinition["access-list"][1].out.vipValue ? (this.templateDefinition["access-list"][1].direction = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: "out",
            vipObjectType: "object"
        },
        this.templateDefinition["access-list"][1]["priority-order"] = ["direction", "acl-name"],
        delete this.templateDefinition["access-list"][1].out) : this.templateDefinition["access-list"].splice(1, 1),
        "true" == this.templateDefinition["access-list"][0].in.vipValue ? (this.templateDefinition["access-list"][0].direction = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: "in",
            vipObjectType: "object"
        },
        this.templateDefinition["access-list"][0]["priority-order"] = ["direction", "acl-name"],
        delete this.templateDefinition["access-list"][0].in) : this.templateDefinition["access-list"].splice(0, 1),
        this.templateDefinition["access-list"] = {
            vipType: this.templateDefinition["access-list"].length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.templateDefinition["access-list"],
            vipObjectType: "tree",
            vipPrimaryKey: ["direction"]
        },
        this.templateDefinition.ipv6 && ("true" == this.templateDefinition.ipv6["access-list"][1].out.vipValue ? (this.templateDefinition.ipv6["access-list"][1].direction = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: "out",
            vipObjectType: "object"
        },
        this.templateDefinition.ipv6["access-list"][1]["priority-order"] = ["direction", "acl-name"],
        delete this.templateDefinition.ipv6["access-list"][1].out) : this.templateDefinition.ipv6["access-list"].splice(1, 1),
        "true" == this.templateDefinition.ipv6["access-list"][0].in.vipValue ? (this.templateDefinition.ipv6["access-list"][0].direction = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: "in",
            vipObjectType: "object"
        },
        this.templateDefinition.ipv6["access-list"][0]["priority-order"] = ["direction", "acl-name"],
        delete this.templateDefinition.ipv6["access-list"][0].in) : this.templateDefinition.ipv6["access-list"].splice(0, 1),
        this.templateDefinition.ipv6["access-list"] = {
            vipType: this.templateDefinition.ipv6["access-list"].length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.templateDefinition.ipv6["access-list"],
            vipObjectType: "tree",
            vipPrimaryKey: ["direction"]
        })
    }
    ,
    n.prototype.checkForDuplicateSecondaryIp = function() {
        if (e.checkNestedProperty(this, "templateDefinition", "ip", "address") && e.checkNestedProperty(this, "templateDefinition", "ip", "secondary-address") && angular.equals(this.templateDefinition.ip.address.vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && angular.equals(this.templateDefinition.ip["secondary-address"].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT))
            for (var a = 0; a < this.templateDefinition.ip["secondary-address"].vipValue.length; a++)
                if (this.templateDefinition.ip["secondary-address"].vipValue[a].address.vipValue === this.templateDefinition.ip.address.vipValue)
                    return f.error("Ipv4 address and secondary IP address cannot be same."),
                    !0;
        return !1
    }
    ,
    n.prototype.validateConfig = function() {
        return !!((e.checkNestedProperty(this, "templateDefinition", "nat-enable", "vipValue") && angular.equals(this.templateDefinition["nat-enable"].vipValue, "true") || e.checkNestedProperty(this, "templateDefinition", "tloc-extension", "vipValue") && angular.equals(this.templateDefinition["tloc-extension"].vipValue, "true")) && e.checkNestedProperty(this, "templateDefinition", "dot1x-enable", "vipType") && angular.equals(this.templateDefinition["dot1x-enable"].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && angular.equals(this.templateDefinition["dot1x-enable"].vipValue, "true")) && (f.clear(),
        f.error("802.1X cannot be configured if either of 'NAT' or 'TLOC Extension' is configured."),
        !0)
    }
    ;
    var s = function() {
        return new c({
            key: "acl-in",
            description: "Ingress ACL - IPv4",
            details: "Apply Ingress ACL - IPv4",
            optionType: ["constant", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "boolean",
                default: "false"
            },
            objectType: "object"
        })
    }
      , t = s()
      , u = function() {
        return new c({
            key: "acl-out",
            description: "Egress ACL - IPv4",
            details: "Apply Egress ACL - IPv4",
            optionType: ["constant", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "boolean",
                default: "false"
            },
            objectType: "object"
        })
    }
      , v = u()
      , w = function() {
        return new c({
            key: "acl-in",
            description: "Ingress ACL - IPv6",
            details: "Apply Ingress ACL - IPv6",
            optionType: ["constant", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "boolean",
                default: "false"
            },
            objectType: "object"
        })
    }
      , x = w()
      , y = function() {
        return new c({
            key: "acl-out",
            description: "Egress ACL - IPv6",
            details: "Apply Egress ACL - IPv6",
            optionType: ["constant", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "boolean",
                default: "false"
            },
            objectType: "object"
        })
    }
      , z = y()
      , A = function(a) {
        return new c({
            key: "acl-name",
            description: a + " Access List",
            details: "Name of access list",
            optionType: ["constant", "variable"],
            defaultOption: "constant",
            dataType: {
                type: "string",
                minLength: 1,
                maxLength: 32
            },
            objectType: "object"
        })
    }
      , B = function() {
        return new c({
            key: "policer-in",
            description: "Ingress Policer",
            details: "Apply Ingress policer",
            optionType: ["constant", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "boolean",
                default: "false"
            },
            objectType: "object"
        })
    }
      , C = B()
      , D = function() {
        return new c({
            key: "policer-out",
            description: "Egress Policer",
            details: "Apply Egress policer",
            optionType: ["constant", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "boolean",
                default: "false"
            },
            objectType: "object"
        })
    }
      , E = D()
      , F = function(a) {
        return new c({
            key: "policer-name",
            description: a + " Policer Name",
            details: "Name of policer",
            optionType: ["constant", "variable"],
            defaultOption: "constant",
            dataType: {
                type: "string",
                minLength: 1,
                maxLength: 32
            },
            objectType: "object"
        })
    }
      , G = new c({
        key: "gre",
        description: "GRE",
        details: "Enable encapsulation GRE",
        optionType: ["constant", "ignore"],
        defaultOption: "ignore",
        dataType: {
            type: "boolean",
            default: "false"
        },
        objectType: "object"
    })
      , H = new c({
        key: "ipsec",
        description: "IPsec",
        details: "Enable encapsulation IPSec",
        optionType: ["constant", "ignore"],
        defaultOption: "ignore",
        dataType: {
            type: "boolean",
            default: "true"
        },
        objectType: "object"
    })
      , I = new c({
        key: "choice",
        description: "Syntax Choice",
        details: "Choose Syntax Choice  ",
        optionType: ["constant"],
        defaultOption: "constant",
        dataType: {
            type: "enum",
            values: [{
                key: "string",
                value: "String"
            }, {
                key: "integer",
                value: "Integer"
            }, {
                key: "octet",
                value: "Octet"
            }]
        },
        objectType: "object"
    });
    return n
}
function VedgeVpnInterfaceVapTemplate(a, b, c, d, e, f) {
    var g = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            "if-name": {},
            description: {},
            shutdown: {},
            "data-security": {},
            "mgmt-security": {},
            "radius-servers": {},
            ssid: {},
            "wpa-personal-key": {},
            "max-client": {}
        }
    };
    return g.prototype = new a,
    g.prototype.extendTemplate = function(a) {
        angular.extend(this, _.omit(a, ["$$hashKey"]))
    }
    ,
    g.prototype.setTemplateDefinition = function() {
        this.templateDefinition["if-name"].vipType === d.TEMPLATE_DEF_TYPE_VARIABLE_NAME && angular.equals(this.templateDefinition["if-name"].vipVariableName, "vpn_if_name") && (this.templateDefinition["if-name"].vipVariableName = this.templateDefinition["if-name"].vipVariableName + "_" + this.templateName),
        "none" === this.templateDefinition["data-security"].vipValue && (delete this.templateDefinition["wpa-personal-key"],
        delete this.templateDefinition["radius-servers"],
        delete this.templateDefinition["mgmt-security"]),
        "wpa-personal" === this.templateDefinition["data-security"].vipValue && (delete this.templateDefinition["radius-servers"],
        delete this.templateDefinition["mgmt-security"]),
        "wpa2-personal" !== this.templateDefinition["data-security"].vipValue && "wpa/wpa2-personal" !== this.templateDefinition["data-security"].vipValue || delete this.templateDefinition["radius-servers"],
        "wpa-enterprise" === this.templateDefinition["data-security"].vipValue && (delete this.templateDefinition["wpa-personal-key"],
        delete this.templateDefinition["mgmt-security"]),
        "wpa/wpa2-enterprise" !== this.templateDefinition["data-security"].vipValue && "wpa2-enterprise" !== this.templateDefinition["data-security"].vipValue || delete this.templateDefinition["wpa-personal-key"],
        this.templateDefinition["max-client"] && delete this.templateDefinition["max-client"],
        this.omitExtraDefinitionProperty(this.templateDefinition)
    }
    ,
    g.prototype.add = function(a, c) {
        return c.addTemplate.$valid ? void ("wpa-enterprise" !== this.templateDefinition["data-security"].vipValue && "wpa/wpa2-enterprise" !== this.templateDefinition["data-security"].vipValue && "wpa2-enterprise" !== this.templateDefinition["data-security"].vipValue || "ignore" !== this.templateDefinition["radius-servers"].vipType ? b.prototype.add.call(this, a, c) : f.error("Radius servers has to be configured if one of the enterprises is chosen as Data Security")) : void this.showNotificationErrorsForForm(c)
    }
    ,
    g.prototype.edit = function(a, c) {
        if (c.addTemplate.$valid)
            "wpa-enterprise" !== this.templateDefinition["data-security"].vipValue && "wpa/wpa2-enterprise" !== this.templateDefinition["data-security"].vipValue && "wpa2-enterprise" !== this.templateDefinition["data-security"].vipValue || "ignore" !== this.templateDefinition["radius-servers"].vipType ? b.prototype.edit.call(this, a, c) : f.error("Radius servers has to be configured if one of the enterprises is chosen as Data Security");
        else {
            f.clear();
            var d = _.uniq(_.filter(c.addTemplate.$error.required, function(a) {
                return !a.$name.toLowerCase().contains("form")
            }), function(a) {
                return a.$name
            });
            if (d.length)
                f.error("Please fill in the required fields. " + d.length + " fields are required");
            else {
                var e = 0;
                for (var g in c.addTemplate.$error)
                    e += c.addTemplate.$error[g].length;
                e > 0 && f.error("Invalid values are found in " + e + " fields. Please fill the fields with valid values and try again")
            }
        }
    }
    ,
    g
}
function VedgeVpnTemplate(a, b, c, d, e, f, g, h, i, j) {
    var k = function() {
        a.apply(this, arguments),
        this.templateDefinition = angular.extend({}, this.templateDefinition, {
            "ecmp-hash-key": {
                layer4: {}
            },
            "tcp-optimization": {},
            service: [],
            omp: {
                advertise: [{
                    bgp: this.createAdvertiseProtocolField("BGP", "false", "Advertise BGP routes")
                }, {
                    static: this.createAdvertiseProtocolField("Static", "false", "Advertise Static routes")
                }, {
                    connected: this.createAdvertiseProtocolField("Connected", "false", "Advertise Connected routes")
                }, {
                    ospf: this.createAdvertiseProtocolField("OSPF", "false", "Enable/Disable advertisement of OSPF external routes into OMP. Inter-area and Intra-area routes are always advertised, irrespective of this command"),
                    external: this.createAdvertiseProtocolField("External", "false", "Advertise OSPF external routes")
                }, {
                    network: this.createAdvertiseProtocolField("Network", "false", "Advertise Network routes"),
                    "prefix-list": this.createPrefixListTree("", "")
                }, {
                    aggregate: this.createAdvertiseProtocolField("Aggregate", "false", "Advertise Connected routes"),
                    "prefix-list": this.createPrefixListTree("", "")
                }]
            }
        })
    };
    return k.prototype = new a,
    k.prototype.extendTemplate = function(a) {
        function c() {
            function a(a, c) {
                a.vipType = c,
                a.vipValue = angular.equals(c, b.TEMPLATE_DEF_TYPE_VARIABLE) ? "false" : "true"
            }
            var c = [];
            angular.isDefined(d.templateDefinition.omp) && angular.isDefined(d.templateDefinition.omp.advertise.vipValue) && d.templateDefinition.omp.advertise.vipValue.length > 0 && (c = d.templateDefinition.omp.advertise.vipValue);
            var e = [{
                bgp: d.createAdvertiseProtocolField("BGP", "false", "Advertise BGP routes")
            }, {
                static: d.createAdvertiseProtocolField("Static", "false", "Advertise Static routes")
            }, {
                connected: d.createAdvertiseProtocolField("Connected", "false", "Advertise Connected routes")
            }, {
                ospf: d.createAdvertiseProtocolField("OSPF", "false", "Enable/Disable advertisement of OSPF external routes into OMP. Inter-area and Intra-area routes are always advertised, irrespective of this command"),
                external: d.createAdvertiseProtocolField("External", "false", "Advertise OSPF external routes")
            }, {
                network: d.createAdvertiseProtocolField("Network", "false", "Advertise Network routes"),
                "prefix-list": d.createPrefixListTree()
            }, {
                aggregate: d.createAdvertiseProtocolField("Aggregate", "false", "Advertise Connected routes"),
                "prefix-list": d.createPrefixListTree()
            }];
            return angular.isDefined(d.templateDefinition.omp) && angular.isDefined(d.templateDefinition.omp.advertise.vipValue) && d.templateDefinition.omp.advertise.vipValue.length > 0 && angular.forEach(c, function(c) {
                switch (c.protocol.vipValue) {
                case "bgp":
                    a(e[0].bgp, c.protocol.vipType);
                    break;
                case "static":
                    a(e[1].static, c.protocol.vipType);
                    break;
                case "connected":
                    a(e[2].connected, c.protocol.vipType);
                    break;
                case "ospf":
                    a(e[3].ospf, c.protocol.vipType),
                    angular.isDefined(c["protocol-sub-type"]) && a(e[3].external, c["protocol-sub-type"].vipType);
                    break;
                case "network":
                    a(e[4].network, c.protocol.vipType),
                    angular.equals(c["prefix-list"].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && (e[4]["prefix-list"].vipValue = c["prefix-list"].vipValue);
                    break;
                case "aggregate":
                    a(e[5].aggregate, c.protocol.vipType),
                    angular.equals(c["prefix-list"].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && (e[5]["prefix-list"].vipValue = c["prefix-list"].vipValue)
                }
            }),
            e
        }
        var d = this;
        angular.extend(this, _.omit(a, ["$$hashKey"])),
        this.setDnsDefinition(),
        this.templateDefinition.omp = {
            advertise: c()
        }
    }
    ,
    k.prototype.constructService = function(a) {
        return angular.forEach(a, function(a) {
            "ipAddress" === a.service.option ? (angular.isDefined(a.address.vipValue) && a.address.vipType === b.TEMPLATE_DEF_TYPE_CONSTANT && (a.address.vipValue = a.address.vipValue.split(",")),
            a["priority-order"] = ["svc-type", "address"],
            delete a.interface) : "interface" === a.service.option && (a.interface.vipType === b.TEMPLATE_DEF_TYPE_CONSTANT && (a.interface.vipValue = a.interface.vipValue.split(",").map(Function.prototype.call, String.prototype.trim)),
            a["priority-order"] = ["svc-type", "interface"],
            delete a.address),
            "TE" === a["svc-type"].vipValue && (angular.isDefined(a.address) && delete a.address,
            angular.isDefined(a.interface) && delete a.interface,
            a["priority-order"] = ["svc-type"]),
            delete a.service,
            delete a.view
        }),
        a
    }
    ,
    k.prototype.createServiceTable = function() {
        var a = new e({
            autoLoad: !0,
            singleSelect: !0,
            data: [],
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            addMaxRow: 7,
            tableName: "service",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    k.prototype.setServiceTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d.service = {},
                d.view = {},
                d["svc-type"] = c.editObjectTemplateField(a.children["svc-type"], d["svc-type"]),
                d.hasOwnProperty("address") ? (angular.isArray(d.address.vipValue) && (d.address.vipValue = d.address.vipValue.join(",")),
                d.address = c.editObjectTemplateField(a.children.address, d.address),
                d.interface = c.editObjectTemplateField(a.children.interface, d.interface),
                d.service.option = "ipAddress") : d.hasOwnProperty("interface") ? (d.address = c.editObjectTemplateField(a.children.address, d.address),
                angular.isArray(d.interface.vipValue) && (d.interface.vipValue = d.interface.vipValue.join(",")),
                d.interface = c.editObjectTemplateField(a.children.interface, d.interface),
                d.service.option = "interface") : (d.address = c.editObjectTemplateField(a.children.address, d.address),
                d.interface = c.editObjectTemplateField(a.children.interface, d.interface),
                d.service.option = "ipAddress"),
                d.view.name = c.viewMode,
                b.push(d)
            })
        }
        var c = this;
        c.view = {},
        c.view.name = c.viewMode;
        var d = [{
            title: "Service Type",
            property: "svc-type",
            editable: !1,
            width: 200,
            dataType: "string",
            headerTooltip: c.templateDefinition.service.children["svc-type"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" custom-prepend-variable-name="vpn_service" ng-model="row.entity[\'svc-type\']" data-name="svc_type_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "IP Addresses (Maximum: 4)",
            property: "address",
            editable: !1,
            dataType: "string",
            minWidth: 350,
            headerTooltip: c.templateDefinition.service.children.address.details,
            cellTemplate: '<div class="ui-grid-cell-contents" ng-if="row.entity.service.option !== \'interface\' && row.entity[\'svc-type\'].vipValue !==\'TE\'"><vip-multi-state-input custom-prepend-variable-name="vpn_service" view-mode="view" ng-model="row.entity.address" data-name="address_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Interfaces",
            property: "interface",
            editable: !1,
            dataType: "string",
            minWidth: 350,
            headerTooltip: c.templateDefinition.service.children.interface.details,
            cellTemplate: '<div class="ui-grid-cell-contents" ng-if="row.entity.service.option !== \'ipAddress\' && row.entity[\'svc-type\'].vipValue !==\'TE\'"><vip-multi-state-input custom-prepend-variable-name="vpn_service" view-mode="view" ng-model="row.entity.interface" data-name="service_interface_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(c.view.name, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        angular.extend(c.templateDefinition.service.children, {
            service: {
                option: "ipAddress"
            }
        }),
        a.createColumns(d),
        angular.isDefined(c.templateDefinition.service) && angular.isArray(c.templateDefinition.service.vipValue) && c.templateDefinition.service.vipValue.length > 0 && b(c.templateDefinition.service, a.data)
    }
    ,
    k.prototype.createGreRouteTable = function() {
        var a = new e({
            tableName: "gre-route",
            autoLoad: !0,
            singleSelect: !0,
            data: [],
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    k.prototype.setGreRouteTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d.viewMode = c.viewMode,
                d.prefix = c.editObjectTemplateField(a.children.prefix, d.prefix),
                d.vpn = c.editObjectTemplateField(a.children.vpn, d.vpn),
                d.interface = c.editObjectTemplateField(a.children.interface, d.interface),
                angular.isArray(d.interface.vipValue) && (d.interface.vipValue = d.interface.vipValue.join(",")),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "Prefix",
            property: "prefix",
            editable: !1,
            width: 200,
            dataType: "string",
            headerTooltip: this.templateDefinition.ip["gre-route"].children.prefix.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="gre_route" view-mode="view" ng-model="row.entity.prefix" data-name="gre_route_prefix_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "VPN ID",
            property: "vpn",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.ip["gre-route"].children.vpn.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity.vpn" data-name="vpn_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "GRE Interface",
            property: "interface",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.ip["gre-route"].children.interface.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="gre_route" view-mode="view" ng-model="row.entity.interface" data-name="gre_route_interface_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.createColumns(d),
        a.setNewRowToggleData({
            prefix: this.templateDefinition.ip["gre-route"].children.prefix,
            vpn: this.templateDefinition.ip["gre-route"].children.vpn,
            interface: this.templateDefinition.ip["gre-route"].children.interface
        }),
        angular.isDefined(this.templateDefinition.ip["gre-route"]) && angular.isArray(this.templateDefinition.ip["gre-route"].vipValue) && this.templateDefinition.ip["gre-route"].vipValue.length > 0 && b(this.templateDefinition.ip["gre-route"], a.data)
    }
    ,
    a.prototype.createPrefixListTable = function(a) {
        var b = new e({
            autoLoad: !0,
            singleSelect: !0,
            data: [],
            tableName: (4 === a ? "network" : "aggregate") + "PrefixList",
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            toolbar: !1
        });
        return b.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        b.setAppScope(this.removeTableRow),
        b
    }
    ,
    a.prototype.setPrefixListTable = function(a, b) {
        function c(a, b) {
            angular.forEach(a.vipValue, function(c) {
                c["prefix-entry"] = d.editObjectTemplateField(a.children["prefix-entry"], c["prefix-entry"]),
                c["aggregate-only"] && "variable" === c["aggregate-only"].vipType && (c["aggregate-only"].vipType = "constant",
                c["aggregate-only"].vipValue = "true"),
                c["aggregate-only"] = d.editObjectTemplateField(a.children["aggregate-only"], c["aggregate-only"]),
                b.push(c)
            })
        }
        var d = this
          , e = 4 === b ? "network" : "aggregate"
          , f = [{
            title: "Prefix",
            property: "prefix-entry",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.omp.advertise[b]["prefix-list"].children["prefix-entry"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity[\'prefix-entry\']" data-name="' + e + '_prefix_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        5 === b && f.splice(1, 0, {
            title: "Aggregate Only",
            property: "aggregate-only",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.omp.advertise[5]["prefix-list"].children["aggregate-only"].details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity[\'aggregate-only\']" data-name="aggregate_only_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }),
        angular.equals(this.viewMode, "view") || f.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i><i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(this.templateDefinition.omp.advertise[b]["prefix-list"].children),
        a.createColumns(f),
        angular.isDefined(this.templateDefinition.omp.advertise[b]["prefix-list"]) && angular.isArray(this.templateDefinition.omp.advertise[b]["prefix-list"].vipValue) && this.templateDefinition.omp.advertise[b]["prefix-list"].vipValue.length > 0 && c(this.templateDefinition.omp.advertise[b]["prefix-list"], a.data)
    }
    ,
    k.prototype.setTemplateDefinition = function() {
        var a = this.templateDefinition;
        if (this.templateDefinition = this.omitExtraDefinitionProperty(_.omit(this.templateDefinition, ["dns", "host", "service", "ip", "ipv6", "omp", "advertise"])),
        !angular.equals(this.templateDefinition["tcp-optimization"].vipType, b.TEMPLATE_DEF_TYPE_IGNORE) && (0 === this.templateDefinition["vpn-id"].vipValue || 512 === this.templateDefinition["vpn-id"].vipValue))
            return g.clear(),
            g.error("TCP Optimization cannot be configured for VPN " + this.templateDefinition["vpn-id"].vipValue),
            !1;
        if (angular.equals(a.dns.primary.vipType, b.TEMPLATE_DEF_TYPE_IGNORE) || (this.templateDefinition.dns = {
            vipType: angular.isDefined(a.dns.primary.vipValue) || angular.equals(a.dns.primary.vipType, b.TEMPLATE_DEF_TYPE_VARIABLE) ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.constructDns(a.dns),
            vipObjectType: "tree",
            vipPrimaryKey: ["dns-addr"]
        }),
        this.templateDefinition.host = this.omitObjectProperties(a.host),
        this.templateDefinition.host = {
            vipType: this.templateDefinition.host.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.constructHost(this.templateDefinition.host),
            vipObjectType: "tree",
            vipPrimaryKey: ["hostname"]
        },
        this.templateDefinition.service = this.omitObjectProperties(a.service, ["service"]),
        this.templateDefinition.service = {
            vipType: this.templateDefinition.service.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.constructService(this.templateDefinition.service),
            vipObjectType: "tree",
            vipPrimaryKey: ["svc-type"]
        },
        angular.equals(this.templateDefinition.service.vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && (0 === this.templateDefinition["vpn-id"].vipValue || 512 === this.templateDefinition["vpn-id"].vipValue))
            return g.clear(),
            g.error("Service cannot be configured for VPN " + this.templateDefinition["vpn-id"].vipValue),
            !1;
        if (0 === a.ip["gre-route"].length)
            this.templateDefinition.ip = {
                "gre-route": {}
            };
        else {
            if (0 === this.templateDefinition["vpn-id"].vipValue || 512 === this.templateDefinition["vpn-id"].vipValue)
                return g.clear(),
                g.error("GRE Route cannot be configured for VPN" + this.templateDefinition["vpn-id"].vipValue),
                !1;
            this.templateDefinition.ip = {
                "gre-route": {
                    vipType: a.ip["gre-route"].length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
                    vipValue: this.constructGreRoute(this.omitObjectProperties(a.ip["gre-route"])),
                    vipObjectType: "tree",
                    vipPrimaryKey: ["prefix"]
                }
            }
        }
        0 === a.ip.route.length ? this.templateDefinition.ip = {
            "gre-route": this.templateDefinition.ip["gre-route"]
        } : this.templateDefinition.ip = {
            route: {
                vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                vipValue: this.constructRoute(a.ip.route),
                vipObjectType: "tree",
                vipPrimaryKey: ["prefix"]
            },
            "gre-route": this.templateDefinition.ip["gre-route"]
        },
        0 == a.ipv6.route.length ? this.templateDefinition.ipv6 = {} : this.templateDefinition.ipv6 = {
            route: {
                vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                vipValue: this.constructRoute(a.ipv6.route),
                vipObjectType: "tree",
                vipPrimaryKey: ["prefix"]
            }
        };
        var c = []
          , d = a.omp.advertise;
        this.templateDefinition.omp = {},
        this.templateDefinition.omp.advertise = {},
        angular.forEach(d, function(a) {
            angular.isDefined(a["prefix-list"]) && angular.forEach(a["prefix-list"], function(a) {
                delete a["priority-order"]
            })
        }),
        this.templateDefinition.omp.advertise = this.omitExtraDefinitionProperty(d),
        function(a) {
            var d = "protocol";
            angular.forEach(a, function(a) {
                var e = {};
                for (var g in a)
                    (angular.equals(a[g].vipType, b.TEMPLATE_DEF_TYPE_VARIABLE) || angular.equals(a[g].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && "false" != a[g].vipValue) && (angular.equals(g, "external") ? (d = "protocol-sub-type",
                    e["priority-order"] = ["protocol", "protocol-sub-type"]) : (d = "protocol",
                    e["priority-order"] = ["protocol"]),
                    e[d] = {
                        vipType: a[g].vipType,
                        vipValue: g,
                        vipObjectType: "object"
                    });
                f.isUndefinedOrEmpty(e) || (angular.isDefined(a["prefix-list"]) && (angular.forEach(a["prefix-list"], function(a) {
                    "network" === e.protocol.vipValue ? (delete a["aggregate-only"],
                    a["priority-order"] = ["prefix-entry"]) : (a["priority-order"] = ["prefix-entry", "aggregate-only"],
                    a["aggregate-only"] && "false" === a["aggregate-only"].vipValue && (a["aggregate-only"].vipType = b.TEMPLATE_DEF_TYPE_IGNORE))
                }),
                e["priority-order"].push("prefix-list"),
                e["prefix-list"] = {
                    vipType: a["prefix-list"].length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
                    vipValue: a["prefix-list"],
                    vipObjectType: "tree",
                    vipPrimaryKey: ["prefix-entry"]
                }),
                (!angular.isDefined(e["protocol-sub-type"]) || angular.isDefined(e["protocol-sub-type"]) && angular.isDefined(e.protocol) && "ospf" === e.protocol.vipValue) && c.push(e))
            })
        }(this.templateDefinition.omp.advertise);
        var e = !0;
        return angular.forEach(c, function(a) {
            angular.isDefined(a["prefix-list"]) && 0 === a["prefix-list"].vipValue.length && (e = !1)
        }),
        e ? (this.templateDefinition.omp.advertise = {
            vipType: c.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: c,
            vipObjectType: "tree",
            vipPrimaryKey: ["protocol"]
        },
        !angular.equals(this.templateDefinition.omp.advertise.vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) || 0 !== this.templateDefinition["vpn-id"].vipValue && 512 !== this.templateDefinition["vpn-id"].vipValue || (g.clear(),
        g.error("OMP cannot be configured for VPN " + this.templateDefinition["vpn-id"].vipValue),
        !1)) : (g.clear(),
        g.error("Atleast one 'prefix-list' has to be configured if Network / Aggregate is turned on under OMP"),
        !1)
    }
    ,
    k.prototype.constructGreRoute = function(a) {
        return angular.forEach(a, function(a) {
            a.interface.vipType !== b.TEMPLATE_DEF_TYPE_CONSTANT || angular.isArray(a.interface.vipValue) || (a.interface.vipValue = a.interface.vipValue.split(",")),
            a["priority-order"] = ["prefix", "vpn", "interface"]
        }),
        a
    }
    ,
    k.prototype.add = function(a, b) {
        var d = this;
        if (!d.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        a.transitionInProgress = !0;
        var e = this.createTemplateCopy(a);
        if (e.templateType = a.templateType.name,
        e.factoryDefault = !1,
        e.setDeviceType(a.deviceModels),
        !e.setTemplateDefinition())
            return void (a.transitionInProgress = !1);
        var f = this.validatePrefixNextHop(e.templateDefinition.ip, e.templateDefinition["vpn-id"].vipValue);
        return f ? "validationFail" === f ? (g.error("VPN is chosen as a Gateway option in one or more IPv4 prefix entries. VPN cannot be configured as a Gateway option for VPN " + e.templateDefinition["vpn-id"].vipValue),
        void (a.transitionInProgress = !1)) : (f = this.validatePrefixNextHop(e.templateDefinition.ipv6, e.templateDefinition["vpn-id"].vipValue)) ? "validationFail" === f ? (g.error("VPN is chosen as a Gateway option in one or more IPv6 prefix entries. VPN cannot be configured as a Gateway option for VPN " + e.templateDefinition["vpn-id"].vipValue),
        void (a.transitionInProgress = !1)) : void c.createGeneralTemplate(e).then(function(b) {
            g.success(i("initialCap")(e.templateType) + " Template created", 2e3),
            h.previousState && h.previousState.name.contains("app.config.template.device.feature") ? (j.pushToFeatureTemplateList(angular.extend(e, {
                templateId: b.templateId
            })),
            a.transitionInProgress = !1,
            h.go(h.previousState.name)) : (a.transitionInProgress = !1,
            h.go("app.config.template.feature", {
                display: "",
                deviceType: "",
                templateType: "",
                templateId: ""
            }))
        }, function(b) {
            a.transitionInProgress = !1,
            g.error(b.error.message + ": " + b.error.details)
        }) : (g.error("Gateway is missing / misconfigured in one or more IPv6 prefix entries"),
        void (a.transitionInProgress = !1)) : (g.error("Gateway is missing / misconfigured in one or more IPv4 prefix entries"),
        void (a.transitionInProgress = !1))
    }
    ,
    k.prototype.edit = function(a, b) {
        var c = this;
        if (!c.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        var d = this.createTemplateCopy(a);
        if (d.templateType = a.templateType.name,
        d.factoryDefault = !1,
        d.setDeviceType(a.deviceModels),
        !d.setTemplateDefinition())
            return void (a.transitionInProgress = !1);
        var e = this.validatePrefixNextHop(d.templateDefinition.ip, d.templateDefinition["vpn-id"].vipValue);
        return e ? "validationFail" === e ? void g.error("VPN is chosen as a Gateway option in one or more IPv4 prefix entries. VPN cannot be configured as a Gateway option for VPN " + d.templateDefinition["vpn-id"].vipValue) : (e = this.validatePrefixNextHop(d.templateDefinition.ipv6, d.templateDefinition["vpn-id"].vipValue)) ? "validationFail" === e ? void g.error("VPN is chosen as a Gateway option in one or more IPv6 prefix entries. VPN cannot be configured as a Gateway option for VPN " + d.templateDefinition["vpn-id"].vipValue) : void this.callUpdateTemplate(d) : void g.error("Gateway is missing / misconfigured in one or more IPv6 prefix entries") : void g.error("Gateway is missing / misconfigured in one or more IPv4 prefix entries")
    }
    ,
    k.prototype.createTemplateCopy = function(a) {
        var b = a.templateDefinition
          , c = angular.copy(_.omit(b, ["ip", "ipv6"]));
        c.ip = {
            "gre-route": b.ip["gre-route"],
            route: []
        },
        c.ipv6 = {
            route: []
        },
        c.ip.route = this.copyRoutes(b.ip.route),
        c.ipv6.route = this.copyRoutes(b.ipv6.route);
        var d = angular.copy(_.omit(a, "templateDefinition"));
        return d.templateDefinition = c,
        d
    }
    ,
    k.prototype.copyRoutes = function(a) {
        var b = [];
        return a && a.length > 0 && angular.forEach(a, function(a) {
            var c = {};
            for (var d in a)
                angular.equals(d, "nextHopList") ? c[d] = angular.copy(a[d].data) : c[d] = angular.copy(a[d]);
            b.push(c)
        }),
        b
    }
    ,
    k.prototype.createAdvertiseProtocolField = function(a, b, c) {
        var e = new d({
            key: a.toLowerCase(),
            description: a,
            details: c,
            optionType: ["constant"],
            defaultOption: "constant",
            dataType: {
                type: "boolean",
                default: b
            },
            dataPath: ["omp"],
            objectType: "object"
        });
        return e.vipValue = b,
        e
    }
    ,
    k.prototype.createPrefixListTree = function(a) {
        var b = new d({
            key: "prefix-list",
            optionType: ["constant", "variable", "ignore"],
            defaultOption: "ignore",
            dataPath: [],
            objectType: "tree",
            primaryKeys: ["prefix-entry"],
            children: {
                "prefix-entry": new d({
                    key: "prefix-entry",
                    description: "Prefix",
                    details: "Prefix",
                    optionType: ["constant", "variable"],
                    defaultOption: "constant",
                    dataType: {
                        type: "ipv4-prefix"
                    },
                    dataPath: [],
                    objectType: "object"
                }),
                "aggregate-only": new d({
                    key: "aggregate-only",
                    description: "Aggregate Only",
                    details: "Aggregate Only",
                    optionType: ["constant", "ignore"],
                    defaultOption: "ignore",
                    dataType: {
                        type: "boolean",
                        default: "false"
                    },
                    dataPath: [],
                    objectType: "object"
                })
            },
            vipValue: a
        });
        return b
    }
    ,
    k
}
function VmanageVpnInterfaceTemplate(a) {
    var b = function() {
        a.apply(this, arguments)
    };
    return b.prototype = new a,
    b.prototype.extendTunnelInterface = function() {
        a.prototype.extendTunnelInterface.call(this),
        this.templateDefinition["tunnel-interface"] = angular.extend({}, this.templateDefinition["tunnel-interface"], {
            "connections-limit": {}
        }),
        this.templateDefinition["tunnel-interface"]["allow-service"] = angular.extend({}, this.templateDefinition["tunnel-interface"]["allow-service"], {
            https: {}
        })
    }
    ,
    b
}
function VpnInterfaceTemplate(a, b, c, d, e, f, g, h, i, j, k) {
    function l(a, b) {
        return new c({
            key: "tunnel-interface-enable",
            description: "Tunnel Interface",
            details: "Tunnel Interface",
            optionType: ["constant", "ignore"],
            defaultOption: a,
            dataType: {
                type: "boolean",
                default: "false"
            },
            objectType: "object",
            vipType: a,
            vipValue: b
        })
    }
    function m() {
        return new c({
            key: "preference",
            description: "Preference",
            details: "Set preference for TLOC",
            optionType: ["constant", "variable", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "number",
                min: 0,
                max: 4294967295
            },
            objectType: "object"
        })
    }
    function n() {
        return new c({
            key: "weight",
            description: "Weight",
            details: "Set weight for TLOC",
            optionType: ["constant", "variable", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "number",
                min: 1,
                max: 255,
                default: 1
            },
            objectType: "object"
        })
    }
    var o = function() {
        a.apply(this, arguments),
        this.secAddrIndex = 0,
        this.templateDefinition = {
            "if-name": {},
            description: {},
            ip: {
                address: {},
                "dhcp-client": {},
                "dhcp-distance": {}
            },
            ipv6: {
                address: {},
                "dhcp-client": {},
                "dhcp-distance": {},
                "dhcp-rapid-commit": {}
            },
            "dhcp-helper": {},
            "flow-control": {},
            "clear-dont-fragment": {},
            pmtu: {},
            mtu: {},
            "static-ingress-qos": {},
            "tcp-mss-adjust": {},
            "mac-address": {},
            speed: {},
            duplex: {},
            shutdown: {},
            "arp-timeout": {},
            autonegotiate: {},
            arp: {
                ip: []
            }
        }
    };
    o.prototype = new a,
    o.prototype.extendTemplate = function(a) {
        angular.extend(this, _.omit(a, ["$$hashKey"])),
        a = angular.copy(a),
        f.checkNestedProperty(a, "templateDefinition", "tunnel-interface") ? (this.templateDefinition["tunnel-interface"]["tunnel-interface-enable"] = l(b.TEMPLATE_DEF_TYPE_CONSTANT, "true"),
        this.populateTunnelEncap(a)) : this.extendTunnelInterface()
    }
    ,
    o.prototype.resetHiddenFieldsToDefault = function(a, b) {
        _.isEmpty(b.ip["dhcp-client"] && !_.isEmpty(b.ip["dhcp-distance"]) && !_.isEmpty(b.ip.address)) || ("static" === a ? (b.ip["dhcp-client"].vipType = b.ip["dhcp-client"].defaultOption,
        b.ip["dhcp-client"].vipValue = b.ip["dhcp-client"].dataType.default,
        b.ip["dhcp-distance"].vipType = b.ip["dhcp-distance"].defaultOption,
        b.ip["dhcp-distance"].vipValue = b.ip["dhcp-distance"].dataType.default) : (b.ip.address.vipType = b.ip.address.defaultOption,
        b.ip.address.vipValue = b.ip.address.dataType.default))
    }
    ,
    o.prototype.extendTunnelInterface = function() {
        this.templateDefinition = angular.extend({}, this.templateDefinition, {
            "tunnel-interface": {
                "tunnel-interface-enable": l(b.TEMPLATE_DEF_TYPE_IGNORE, "false")
            }
        })
    }
    ,
    o.prototype.populateTunnelEncap = function(a) {
        var d = this;
        if (angular.isDefined(this.templateDefinition["tunnel-interface"].encapsulation) && angular.isDefined(this.templateDefinition["tunnel-interface"].encapsulation.vipType) && !angular.equals(this.templateDefinition["tunnel-interface"].encapsulation.vipType, b.TEMPLATE_DEF_TYPE_IGNORE) && angular.isDefined(this.templateDefinition["tunnel-interface"].encapsulation.vipValue) && !(this.templateDefinition["tunnel-interface"].encapsulation.vipValue.length < 1))
            if (angular.equals(a.templateDefinition["tunnel-interface"].encapsulation.vipValue[0].encap.vipValue, "ipsec"))
                d.templateDefinition["tunnel-interface"].encapsulation = [{
                    gre: angular.copy(s),
                    preference: m(),
                    weight: n()
                }],
                p(a, 0),
                d.templateDefinition["tunnel-interface"].encapsulation.push(a.templateDefinition["tunnel-interface"].encapsulation.vipValue[0]);
            else {
                d.templateDefinition["tunnel-interface"].encapsulation = [],
                a.templateDefinition["tunnel-interface"].encapsulation.vipValue[0].preference = q(a.templateDefinition["tunnel-interface"].encapsulation.vipValue, 0),
                a.templateDefinition["tunnel-interface"].encapsulation.vipValue[0].weight = r(a.templateDefinition["tunnel-interface"].encapsulation.vipValue, 0);
                var e = angular.copy(s);
                e.optionType = ["constant", "ignore"],
                e = new c(e),
                e.vipType = a.templateDefinition["tunnel-interface"].encapsulation.vipValue[0].encap.vipType,
                e.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (e.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE),
                e.vipValue = "true",
                delete a.templateDefinition["tunnel-interface"].encapsulation.vipValue[0].encap,
                delete a.templateDefinition["tunnel-interface"].encapsulation.vipValue[0]["priority-order"],
                a.templateDefinition["tunnel-interface"].encapsulation.vipValue[0].gre = e,
                d.templateDefinition["tunnel-interface"].encapsulation.push(a.templateDefinition["tunnel-interface"].encapsulation.vipValue[0]),
                2 == a.templateDefinition["tunnel-interface"].encapsulation.vipValue.length ? (p(a, 1),
                d.templateDefinition["tunnel-interface"].encapsulation.push(a.templateDefinition["tunnel-interface"].encapsulation.vipValue[1])) : d.templateDefinition["tunnel-interface"].encapsulation.push({
                    ipsec: angular.copy(angular.extend(t, {
                        vipValue: "false"
                    })),
                    preference: m(),
                    weight: n()
                })
            }
    }
    ;
    var p = function(a, d) {
        a.templateDefinition["tunnel-interface"].encapsulation.vipValue[d].preference = q(a.templateDefinition["tunnel-interface"].encapsulation.vipValue, d),
        a.templateDefinition["tunnel-interface"].encapsulation.vipValue[d].weight = r(a.templateDefinition["tunnel-interface"].encapsulation.vipValue, d);
        var e = angular.copy(t);
        e.optionType = ["constant", "ignore"],
        e = new c(e),
        e.vipType = a.templateDefinition["tunnel-interface"].encapsulation.vipValue[d].encap.vipType,
        e.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (e.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE),
        e.vipValue = "true",
        delete a.templateDefinition["tunnel-interface"].encapsulation.vipValue[d].encap,
        delete a.templateDefinition["tunnel-interface"].encapsulation.vipValue[d]["priority-order"],
        a.templateDefinition["tunnel-interface"].encapsulation.vipValue[d].ipsec = e
    }
      , q = function(a, c) {
        var d = m();
        return d.vipType = a[c].preference.vipType,
        d.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (d.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE),
        d.vipValue = a[c].preference.vipValue,
        d
    }
      , r = function(a, c) {
        var d = n();
        return d.vipType = a[c].weight.vipType,
        d.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (d.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE),
        d.vipValue = a[c].weight.vipValue,
        d
    };
    o.prototype.createArpTable = function() {
        var a = new e({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: "arp",
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    o.prototype.setArpTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d.addr = c.editObjectTemplateField(a.children.addr, d.addr),
                d.mac = c.editObjectTemplateField(a.children.mac, d.mac),
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "IP Address",
            property: "addr",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.arp.ip.children.addr.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input data-path="arp_ip-address" view-mode="view" ng-model="row.entity.addr" data-name="addr_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "MAC Address",
            property: "mac",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.arp.ip.children.mac.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="arp" data-path="arp_mac-address" view-mode="view" ng-model="row.entity.mac" data-name="mac_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(this.templateDefinition.arp.ip.children),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.arp.ip) && angular.isArray(this.templateDefinition.arp.ip.vipValue) && this.templateDefinition.arp.ip.vipValue.length > 0 && b(this.templateDefinition.arp.ip, a.data)
    }
    ,
    o.prototype.parseEncap = function() {
        "true" == this.templateDefinition["tunnel-interface"].encapsulation[1].ipsec.vipValue ? (this.templateDefinition["tunnel-interface"].encapsulation[1].encap = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: "ipsec",
            vipObjectType: "object"
        },
        this.templateDefinition["tunnel-interface"].encapsulation[1]["priority-order"] = ["encap", "preference", "weight"],
        delete this.templateDefinition["tunnel-interface"].encapsulation[1].ipsec) : this.templateDefinition["tunnel-interface"].encapsulation.splice(1, 1),
        "true" == this.templateDefinition["tunnel-interface"].encapsulation[0].gre.vipValue ? (this.templateDefinition["tunnel-interface"].encapsulation[0].encap = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: "gre",
            vipObjectType: "object"
        },
        this.templateDefinition["tunnel-interface"].encapsulation[0]["priority-order"] = ["encap", "preference", "weight"],
        delete this.templateDefinition["tunnel-interface"].encapsulation[0].gre) : this.templateDefinition["tunnel-interface"].encapsulation.splice(0, 1),
        this.templateDefinition["tunnel-interface"].encapsulation = {
            vipType: this.templateDefinition["tunnel-interface"].encapsulation.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.templateDefinition["tunnel-interface"].encapsulation,
            vipObjectType: "tree",
            vipPrimaryKey: ["encap"]
        }
    }
    ,
    o.prototype.add = function(a, b) {
        var c = this;
        if (!c.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        a.transitionInProgress = !0;
        var e = angular.copy(a);
        return e.templateType = a.templateType.name,
        e.factoryDefault = !1,
        e.setDeviceType(a.deviceModels),
        e.deviceType.indexOf("vmanage") < 0 && e.deviceType.indexOf("vsmart") < 0 && e.validateConfig() ? void (a.transitionInProgress = !1) : (e.setTemplateDefinition(),
        e.deviceType.indexOf("vmanage") < 0 && e.deviceType.indexOf("vsmart") < 0 && e.checkForDuplicateSecondaryIp() ? void (a.transitionInProgress = !1) : void d.createGeneralTemplate(e).then(function(b) {
            i.success(h("initialCap")(e.templateType) + " Template created", 2e3),
            g.previousState && g.previousState.name.contains("app.config.template.device.feature") ? (k.setRequiredFlagsForFiltering(e),
            j.pushToFeatureTemplateList(angular.extend(e, {
                templateId: b.templateId
            })),
            a.transitionInProgress = !1,
            g.go(g.previousState.name)) : (a.transitionInProgress = !1,
            g.go("app.config.template.feature", {
                display: "",
                deviceType: "",
                templateType: "",
                templateId: ""
            }))
        }, function(b) {
            a.transitionInProgress = !1,
            i.error(b.error.message + ": " + b.error.details)
        }))
    }
    ,
    o.prototype.edit = function(a, b) {
        var c = this;
        if (!c.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        var d = angular.copy(a);
        d.templateType = a.templateType.name,
        d.factoryDefault = !1,
        d.setDeviceType(a.deviceModels),
        d.deviceType.indexOf("vmanage") < 0 && d.deviceType.indexOf("vsmart") < 0 && d.validateConfig() || (d.setTemplateDefinition(),
        d.deviceType.indexOf("vmanage") < 0 && d.deviceType.indexOf("vsmart") < 0 && d.checkForDuplicateSecondaryIp() || this.callUpdateTemplate(d))
    }
    ;
    var s = new c({
        key: "gre",
        description: "GRE",
        details: "Enable encapsulation GRE",
        optionType: ["constant", "ignore"],
        defaultOption: "ignore",
        dataType: {
            type: "boolean",
            default: "false"
        },
        objectType: "object"
    })
      , t = new c({
        key: "ipsec",
        description: "IPsec",
        details: "Enable encapsulation IPSec",
        optionType: ["constant", "ignore"],
        defaultOption: "ignore",
        dataType: {
            type: "boolean",
            default: "true"
        },
        objectType: "object"
    });
    return o
}
function VpnTemplate(a, b, c, d, e, f) {
    var g = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            "vpn-id": {},
            name: {},
            dns: [],
            host: [],
            ip: {
                route: []
            },
            ipv6: {
                route: []
            }
        }
    };
    g.prototype = new a,
    g.prototype.setDnsDefinition = function() {
        if (angular.isDefined(this.templateDefinition.dns) && angular.isArray(this.templateDefinition.dns.vipValue) && this.templateDefinition.dns.vipValue.length > 0) {
            var a = this
              , d = angular.copy(h);
            d.optionType = ["constant", "variable", "ignore"],
            d = new c(d);
            var e = angular.copy(i);
            e.optionType = ["constant", "variable", "ignore"],
            e = new c(e),
            angular.forEach(this.templateDefinition.dns.vipValue, function(c) {
                angular.equals(c.role.vipValue, "primary") ? (d.defaultOption = angular.isDefined(c["dns-addr"]) ? c["dns-addr"].vipType : c.role.vipType,
                d.defaultOption === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (d.defaultOption = b.TEMPLATE_DEF_TYPE_VARIABLE),
                angular.equals(c.role.vipType, "constant") && (d.vipValue = c["dns-addr"].vipValue),
                a.templateDefinition.dns.primary = d,
                "variable" !== d.defaultOption && "constant" !== d.defaultOption || (e.vipType = "ignore",
                a.templateDefinition.dns.secondary = e)) : angular.equals(c.role.vipValue, "secondary") && (e.defaultOption = angular.isDefined(c["dns-addr"]) ? c["dns-addr"].vipType : c.role.vipType,
                e.defaultOption === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (e.defaultOption = b.TEMPLATE_DEF_TYPE_VARIABLE),
                angular.equals(c.role.vipType, "constant") && (e.vipValue = c["dns-addr"].vipValue,
                e.vipType = c["dns-addr"].vipType),
                e.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (e.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE),
                a.templateDefinition.dns.secondary = e)
            })
        } else
            this.templateDefinition.dns = {
                primary: angular.copy(h),
                secondary: angular.copy(i)
            }
    }
    ,
    g.prototype.createDnsHostTable = function() {
        var a = new d({
            autoLoad: !0,
            singleSelect: !0,
            data: [],
            tableName: "dns",
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            toolbar: !1
        });
        return a.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        a
    }
    ,
    g.prototype.setDnsHostTable = function(a) {
        function b(a, b) {
            angular.forEach(a.vipValue, function(d) {
                d.hostname = c.editObjectTemplateField(a.children.hostname, d.hostname),
                angular.isArray(d.ip.vipValue) && (d.ip.vipValue = d.ip.vipValue.join(",")),
                d.ip = c.editObjectTemplateField(a.children.ip, d.ip),
                d.ip.dataType.default = !e.isUndefinedOrEmpty(d.ip.vipValue) && angular.isArray(d.ip.vipValue) ? d.ip.vipValue.join(",") : d.ip.vipValue,
                b.push(d)
            })
        }
        var c = this
          , d = [{
            title: "Hostname",
            property: "hostname",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.host.children.hostname.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="vpn" view-mode="view" ng-model="row.entity.hostname" data-name="hostname_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "List of IP Addresses (Maximum: 8)",
            property: "ip",
            editable: !1,
            dataType: "string",
            headerTooltip: this.templateDefinition.host.children.ip.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="vpn_host" view-mode="view" ng-model="row.entity.ip" data-name="ip_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        angular.equals(this.viewMode, "view") || d.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        a.setNewRowToggleData(this.templateDefinition.host.children),
        a.createColumns(d),
        angular.isDefined(this.templateDefinition.host) && angular.isArray(this.templateDefinition.host.vipValue) && this.templateDefinition.host.vipValue.length > 0 && b(this.templateDefinition.host, a.data)
    }
    ,
    g.prototype.createRouteTable = function(a) {
        var b = new d({
            tableName: a + "Route",
            autoLoad: !0,
            minRowsToShow: 7,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            toolbar: !1
        });
        return b.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        }),
        b.setAppScope(this.removeTableRow),
        b.setAppScope({
            openModal: function(a, b, c) {
                f.show({
                    templateUrl: "app/configuration/template/feature/modal/views/VPN/vpnNextHop.html",
                    controller: "VPNNextHopController",
                    targetEvent: a,
                    escapeToClose: !1,
                    resolve: {
                        selectedRow: function() {
                            return b
                        },
                        operation: function() {
                            return "view"
                        },
                        ipFormInfo: function() {
                            return null
                        },
                        routeRowIndex: function() {
                            return c
                        },
                        routeType: function() {
                            return "ipv4" === b.entity["next-hop"].children.address.dataType.type ? "ip" : "ipv6"
                        },
                        formObject: function() {
                            return {}
                        }
                    }
                }).then(function() {}, function(a) {})
            }
        }),
        b
    }
    ,
    g.prototype.setRouteTable = function(a, c) {
        function d(a, c, d) {
            angular.forEach(a.vipValue, function(g, h) {
                if (g.viewMode = f.viewMode,
                g.prefix = f.editObjectTemplateField(a.children.prefix, g.prefix),
                angular.isDefined(g["next-hop"])) {
                    g.gateway = {
                        option: "Next Hop"
                    };
                    var i = g["next-hop"];
                    g["next-hop"] = f.editObjectTemplateField(a.children["next-hop"], g["next-hop"]),
                    e.checkNestedProperty(i, "address") && (g["next-hop"].vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
                    g["next-hop"].vipValue = [],
                    i.address.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE && (i.address.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE_NAME,
                    i.address.vipVariableName = "route_next_hop_address_" + h + "_0"),
                    g["next-hop"].vipValue.push({
                        address: i.address,
                        distance: i.distance
                    })),
                    g.nextHopList = f.createRouteNextHopTable(g["next-hop"], "", d),
                    g.null0 = f.createNullGatewayTemplateField(b.TEMPLATE_DEF_TYPE_IGNORE),
                    g.distance = a.children.distance,
                    g.vpn = f.createVpnGatewayTemplateField(b.TEMPLATE_DEF_TYPE_IGNORE)
                } else
                    angular.isDefined(g.null0) ? (g.gateway = {
                        option: "Null 0"
                    },
                    g["next-hop"] = f.editObjectTemplateField(a.children["next-hop"], {}),
                    g.nextHopList = f.createRouteNextHopTable(g["next-hop"], "", d),
                    g.null0 = f.createNullGatewayTemplateField(b.TEMPLATE_DEF_TYPE_CONSTANT, "true"),
                    g.distance = f.editObjectTemplateField(a.children.distance, g.distance),
                    g.vpn = f.createVpnGatewayTemplateField(b.TEMPLATE_DEF_TYPE_IGNORE)) : angular.isDefined(g.vpn) && (g.gateway = {
                        option: "VPN"
                    },
                    g["next-hop"] = f.editObjectTemplateField(a.children["next-hop"], {}),
                    g.nextHopList = f.createRouteNextHopTable(g["next-hop"], "", d),
                    g.null0 = f.createNullGatewayTemplateField(b.TEMPLATE_DEF_TYPE_IGNORE),
                    g.distance = a.children.distance,
                    g.vpn = f.createVpnGatewayTemplateField(b.TEMPLATE_DEF_TYPE_CONSTANT, "true"));
                c.push(g)
            })
        }
        var f = this
          , g = [{
            title: "Prefix",
            property: "prefix",
            editable: !1,
            dataType: "string",
            minWidth: 200,
            headerTooltip: this.templateDefinition[c].route.children.prefix.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity.prefix" data-name="' + c + '_prefix_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Gateway",
            property: "gateway",
            editable: !1,
            dataType: "string",
            minWidth: 100,
            cellTemplate: '<div class="ui-grid-cell-contents toggleContent"><span>{{row.entity.gateway.option}}</span></div>'
        }, {
            title: "Selected Gateway Configuration",
            property: "expand",
            editable: !1,
            dataType: "string",
            minWidth: 700,
            cellTemplate: '<div class="ui-grid-cell-contents toggleContent"><span ng-if="row.entity.gateway.option == \'Next Hop\'" ng-class="row.entity.nextHopList.data.length > 0 ? \'link-cell\'  : \'\'" data-ng-click="row.entity.nextHopList.data.length > 0 ? grid.appScope.openModal($event, row, rowRenderIndex, ipType) : return">{{row.entity.nextHopList.data.length}}</span><span ng-if="row.entity.gateway.option == \'Null 0\'"><span class="pull-left" style="padding-right: 15px;width: 85px">Enable </span> <vip-multi-state-input class="pull-left ip-route-fields" style="width: 230px" view-mode="view" ng-model="' + c + 'row.entity.null0" data-name="null0_{{rowRenderIndex}}_' + c + '"></vip-multi-state-input> <span style="margin-left: 15px;padding-left: 15px;border-left: 1px solid #dbdbdb;padding-right: 15px; width: 85px;"  class="pull-left">Distance </span><vip-multi-state-input class="pull-left  ip-route-fields" style="width: 230px" view-mode="view" ng-model="row.entity.distance" data-name="' + c + 'distance_{{rowRenderIndex}}"></vip-multi-state-input></span><span ng-if="row.entity.gateway.option == \'VPN\'"><span class="pull-left" style=" padding-right: 15px;width: 85px;">Enable VPN</span><vip-multi-state-input class="pull-left ip-route-fields" view-mode="view" ng-model="row.entity.vpn" data-name="' + c + "vpn_{{rowRenderIndex}}_" + c + '"></vip-multi-state-input></span></div>'
        }];
        angular.equals(this.viewMode, "view") || g.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow(\'' + c + '\',$event, row, rowRenderIndex)">mode_edit</i><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        angular.extend(f.templateDefinition[c].route.children, {
            nextHopList: f.createRouteNextHopTable(f.templateDefinition[c].route.children["next-hop"], "", c),
            null0: f.createNullGatewayTemplateField(b.TEMPLATE_DEF_TYPE_IGNORE),
            vpn: f.createVpnGatewayTemplateField(b.TEMPLATE_DEF_TYPE_IGNORE),
            gateway: {
                option: "Next Hop"
            }
        }),
        a.createColumns(g),
        angular.isDefined(this.templateDefinition[c].route) && angular.isArray(this.templateDefinition[c].route.vipValue) && this.templateDefinition[c].route.vipValue.length > 0 && d(this.templateDefinition[c].route, a.data, c)
    }
    ,
    g.prototype.createRouteNextHopTable = function(a, b, c) {
        function e(a, b) {
            angular.forEach(a.vipValue, function(c) {
                c.address = f.editObjectTemplateField(a.children.address, c.address),
                c.distance = f.editObjectTemplateField(a.children.distance, c.distance),
                b.push(c)
            })
        }
        var f = this
          , g = new d({
            autoLoad: !0,
            singleSelect: !0,
            minRowsToShow: 5,
            columnResizing: !0,
            dataUid: "$$hashKey",
            rowHeight: 30,
            tableName: c + "_next_hop_" + b,
            toolbar: !1
        });
        g.setToolbar({
            search: !1,
            rowCount: !1,
            refresh: !1,
            menuColumnFilter: !1
        });
        var h = [{
            title: "Address",
            property: "address",
            editable: !1,
            dataType: "string",
            headerTooltip: a.children.address.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity.address" data-name="' + c + "_address_" + b + '_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }, {
            title: "Distance",
            property: "distance",
            editable: !1,
            dataType: "string",
            headerTooltip: a.children.distance.details,
            cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input view-mode="view" ng-model="row.entity.distance" data-name="' + c + "_distance_" + b + '_{{rowRenderIndex}}"></vip-multi-state-input></div>'
        }];
        return angular.equals(this.viewMode, "view") || h.push({
            title: "Action",
            displayName: "",
            property: "remove-row",
            editable: !1,
            dataType: "string",
            isRightPinned: !0,
            width: 100,
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-16 pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
        }),
        g.setNewRowToggleData({
            address: a.children.address,
            distance: a.children.distance
        }),
        g.setAppScope(this.removeTableRow),
        g.createColumns(h),
        angular.isDefined(a) && angular.isArray(a.vipValue) && a.vipValue.length > 0 && e(a, g.data),
        g
    }
    ,
    g.prototype.constructHost = function(a) {
        return angular.forEach(a, function(a) {
            a.ip.vipType === b.TEMPLATE_DEF_TYPE_CONSTANT && (a.ip.vipValue = a.ip.vipValue.split(",")),
            a["priority-order"] = ["hostname", "ip"]
        }),
        a
    }
    ,
    g.prototype.constructDns = function(a) {
        var c = [];
        for (var d in a)
            if ("primary" === d && a[d].vipType === b.TEMPLATE_DEF_TYPE_CONSTANT)
                c.push({
                    role: {
                        vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                        vipValue: "primary",
                        vipObjectType: "object"
                    },
                    "dns-addr": {
                        vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                        vipValue: a.primary.vipValue,
                        vipObjectType: "object"
                    },
                    "priority-order": ["dns-addr", "role"]
                });
            else if ("primary" === d && a[d].vipType === b.TEMPLATE_DEF_TYPE_VARIABLE)
                c.push({
                    role: {
                        vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                        vipValue: "primary",
                        vipObjectType: "object"
                    },
                    "dns-addr": {
                        vipType: b.TEMPLATE_DEF_TYPE_VARIABLE_NAME,
                        vipValue: "",
                        vipObjectType: "object",
                        vipVariableName: a.primary.vipVariableName
                    },
                    "priority-order": ["dns-addr", "role"]
                });
            else if ("secondary" === d && a[d].vipType === b.TEMPLATE_DEF_TYPE_CONSTANT) {
                var e = {
                    role: {
                        vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                        vipValue: "secondary",
                        vipObjectType: "object"
                    },
                    "dns-addr": {
                        vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                        vipValue: a.secondary.vipValue,
                        vipObjectType: "object"
                    },
                    "priority-order": ["dns-addr", "role"]
                };
                c.push(e)
            } else if ("secondary" === d && a[d].vipType === b.TEMPLATE_DEF_TYPE_VARIABLE) {
                var e = {
                    role: {
                        vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                        vipValue: "secondary",
                        vipObjectType: "object"
                    },
                    "dns-addr": {
                        vipType: b.TEMPLATE_DEF_TYPE_VARIABLE_NAME,
                        vipValue: "",
                        vipObjectType: "object",
                        vipVariableName: a.secondary.vipVariableName
                    },
                    "priority-order": ["dns-addr", "role"]
                };
                c.push(e)
            }
        return c
    }
    ,
    g.prototype.constructRoute = function(a) {
        var c = this
          , d = [];
        return angular.forEach(a, function(a) {
            var e = {
                prefix: c.omitObjectProperties(a.prefix)
            };
            angular.isUndefined(a.nextHopList) && (a.nextHopList = a["next-hop"].vipValue),
            a.gateway && "Next Hop" == a.gateway.option && angular.isDefined(a.nextHopList) && a.nextHopList.length > 0 ? (e["next-hop"] = {
                vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                vipValue: c.constructNextHop(a.nextHopList),
                vipObjectType: "tree",
                vipPrimaryKey: ["address"]
            },
            e["priority-order"] = ["prefix", "next-hop"]) : a.gateway && "Null 0" == a.gateway.option && angular.isDefined(a.null0.vipValue) ? (e.null0 = {
                vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                vipObjectType: "node-only",
                vipValue: a.null0.vipValue
            },
            e.distance = c.omitObjectProperties(a.distance),
            e["priority-order"] = ["prefix", "null0", "distance"]) : a.gateway && "VPN" == a.gateway.option && angular.isDefined(a.vpn.vipValue) && "false" !== a.vpn.vipValue && (e.vpn = {
                vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                vipObjectType: "object",
                vipValue: 0
            },
            e["priority-order"] = ["prefix", "vpn"]),
            delete a.gateway.option,
            d.push(e)
        }),
        d
    }
    ,
    g.prototype.constructNextHop = function(a) {
        var b = this;
        return angular.forEach(a, function(a) {
            a.address = b.omitObjectProperties(a.address),
            a.distance = b.omitObjectProperties(a.distance),
            a["priority-order"] = ["address", "distance"]
        }),
        a
    }
    ,
    g.prototype.validatePrefixNextHop = function(a, b) {
        if (angular.isDefined(a) && e.checkNestedProperty(a, "route", "vipValue") && angular.isArray(a.route.vipValue) && a.route.vipValue.length > 0)
            for (var c = a.route.vipValue, d = 0; d < c.length; d++) {
                if (!(e.checkNestedProperty(c[d], "next-hop") || e.checkNestedProperty(c[d], "null0") || e.checkNestedProperty(c[d], "vpn")))
                    return !1;
                if (e.checkNestedProperty(c[d], "vpn") && (0 === b || 512 == b))
                    return "validationFail";
                if (e.checkNestedProperty(c[d], "null0") && "false" === c[d].null0.vipValue)
                    return !1;
                if (e.checkNestedProperty(c[d], "vpn") && "false" == c[d].vpn.vipValue)
                    return !1
            }
        return !0
    }
    ,
    g.prototype.createVpnGatewayTemplateField = function(a, b) {
        return new c({
            key: "enable-vpn",
            description: "Enable VPN",
            details: "Default VPN",
            optionType: ["constant", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "boolean",
                default: "false"
            },
            objectType: "object",
            vipType: a,
            vipValue: b
        })
    }
    ,
    g.prototype.createNullGatewayTemplateField = function(a, b) {
        return new c({
            key: "enable-null",
            description: "Enable Null0",
            details: "",
            optionType: ["constant", "ignore"],
            defaultOption: "ignore",
            dataType: {
                type: "boolean",
                default: "false"
            },
            objectType: "object",
            vipType: a,
            vipValue: b
        })
    }
    ;
    var h = new c({
        key: "dns-addr",
        description: "Primary DNS Address",
        details: "DNS Address",
        optionType: ["constant", "variable", "ignore"],
        defaultOption: "ignore",
        dataType: {
            type: "ip"
        },
        objectType: "object"
    })
      , i = new c({
        key: "dns-addr",
        description: "Secondary DNS Address",
        details: "DNS Address",
        optionType: ["constant", "variable", "ignore"],
        defaultOption: "ignore",
        dataType: {
            type: "ip"
        },
        objectType: "object"
    });
    return g
}
function VsmartSecurityTemplate(a, b, c, d) {
    var e = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            control: {
                protocol: {},
                "tls-port": {}
            }
        }
    };
    return e.prototype = new a,
    e.prototype.setTemplateDefinition = function() {
        "dtls" == this.templateDefinition.control.protocol.vipValue && delete this.templateDefinition.control["tls-port"],
        this.omitExtraDefinitionProperty(this.templateDefinition)
    }
    ,
    e
}
function VsmartVpnInterfaceTemplate(a, b, c, d, e) {
    function f(a) {
        return angular.extend({}, a, {
            color: {
                value: {},
                restrict: {}
            },
            carrier: {},
            "hello-interval": {},
            "hello-tolerance": {},
            "nat-refresh-interval": {},
            "allow-service": {
                all: {},
                dhcp: {},
                dns: {},
                icmp: {},
                sshd: {},
                netconf: {},
                ntp: {},
                stun: {},
                bgp: {}
            }
        })
    }
    var g = function() {
        a.apply(this, arguments)
    };
    return g.prototype = new a,
    g.prototype.extendTemplate = function(b) {
        a.prototype.extendTemplate.call(this, b),
        angular.equals(this.templateDefinition["tunnel-interface"].vipObjectType, "node-only") && angular.equals(this.templateDefinition["tunnel-interface"].vipValue, "true") && (this.templateDefinition["tunnel-interface"] = {
            "tunnel-interface-enable": this.templateDefinition["tunnel-interface"]["tunnel-interface-enable"]
        },
        this.templateDefinition["tunnel-interface"] = f(this.templateDefinition["tunnel-interface"]))
    }
    ,
    g.prototype.extendTunnelInterface = function() {
        a.prototype.extendTunnelInterface.call(this),
        this.templateDefinition["tunnel-interface"] = f(this.templateDefinition["tunnel-interface"]),
        this.ipConfigType = "dynamic",
        this.ipv6ConfigType = "dynamic"
    }
    ,
    g.prototype.setIpConfigType = function(a) {
        this.ipConfigType = a
    }
    ,
    g.prototype.setIpv6ConfigType = function(a) {
        this.ipv6ConfigType = a
    }
    ,
    g.prototype.setTemplateDefinition = function() {
        var a = this.templateDefinition;
        this.templateDefinition = _.omit(a, ["arp", "tunnel-interface"]),
        this.omitExtraDefinitionProperty(this.templateDefinition),
        angular.equals(this.ipConfigType, "static") ? (angular.isDefined(a.ip["dhcp-client"]) && delete this.templateDefinition.ip["dhcp-client"],
        angular.isDefined(a.ip["dhcp-distance"]) && delete this.templateDefinition.ip["dhcp-distance"]) : (a.ip["dhcp-client"].vipObjectType = "object",
        a.ip["dhcp-client"].vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
        angular.isDefined(a.ip.address) && delete this.templateDefinition.ip.address),
        angular.equals(this.ipv6ConfigType, "static") ? (angular.isDefined(a.ipv6["dhcp-client"]) && delete this.templateDefinition.ipv6["dhcp-client"],
        angular.isDefined(a.ipv6["dhcp-distance"]) && delete this.templateDefinition.ipv6["dhcp-distance"]) : (a.ipv6["dhcp-client"].vipObjectType = "object",
        a.ipv6["dhcp-client"].vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
        angular.isDefined(a.ipv6.address) && delete this.templateDefinition.ipv6.address),
        this.templateDefinition["if-name"].vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && angular.equals(this.templateDefinition["if-name"].vipVariableName, "vpn_if_name") && (this.templateDefinition["if-name"].vipVariableName = this.templateDefinition["if-name"].vipVariableName + "_" + this.templateName),
        this.templateDefinition.arp = {
            ip: {
                vipType: a.arp.ip.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
                vipValue: this.addPriorityField(this.omitObjectProperties(a.arp.ip), ["addr", "mac"]),
                vipObjectType: "tree",
                vipPrimaryKey: ["addr"]
            }
        },
        angular.equals(a["tunnel-interface"]["tunnel-interface-enable"].vipValue, "false") ? delete a["tunnel-interface"] : (delete a["tunnel-interface"]["tunnel-interface-enable"],
        this.areAllPropertiesDefault(a["tunnel-interface"]) && this.areAllPropertiesDefault(a["tunnel-interface"].color) && this.areAllPropertiesDefault(a["tunnel-interface"]["allow-service"]) ? this.templateDefinition["tunnel-interface"] = {
            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
            vipObjectType: "node-only",
            vipValue: "true"
        } : this.templateDefinition["tunnel-interface"] = this.omitExtraDefinitionProperty(a["tunnel-interface"]))
    }
    ,
    g
}
function VsmartVpnTemplate(a, b, c, d, e, f, g) {
    var h = function() {
        a.apply(this, arguments)
    };
    return h.prototype = new a,
    h.prototype.extendTemplate = function(a) {
        angular.extend(this, _.omit(a, ["$$hashKey"])),
        this.setDnsDefinition()
    }
    ,
    h.prototype.setTemplateDefinition = function() {
        var a = this.templateDefinition;
        this.templateDefinition = this.omitExtraDefinitionProperty(_.omit(this.templateDefinition, ["dns", "host", "ip", "ipv6"])),
        angular.equals(a.dns.primary.vipType, c.TEMPLATE_DEF_TYPE_IGNORE) || (this.templateDefinition.dns = {
            vipType: c.TEMPLATE_DEF_TYPE_CONSTANT,
            vipValue: this.constructDns(a.dns),
            vipObjectType: "tree",
            vipPrimaryKey: ["dns-addr"]
        }),
        this.templateDefinition.host = this.omitObjectProperties(a.host),
        this.templateDefinition.host = {
            vipType: this.templateDefinition.host.length > 0 ? c.TEMPLATE_DEF_TYPE_CONSTANT : c.TEMPLATE_DEF_TYPE_IGNORE,
            vipValue: this.constructHost(this.templateDefinition.host),
            vipObjectType: "tree",
            vipPrimaryKey: ["hostname"]
        },
        0 === a.ip.route.length ? this.templateDefinition.ip = {} : this.templateDefinition.ip = {
            route: {
                vipType: c.TEMPLATE_DEF_TYPE_CONSTANT,
                vipValue: this.constructRoute(a.ip.route),
                vipObjectType: "tree",
                vipPrimaryKey: ["prefix"]
            }
        },
        0 === a.ipv6.route.length ? this.templateDefinition.ipv6 = {
            ipv6: {}
        } : this.templateDefinition.ipv6 = {
            route: {
                vipType: c.TEMPLATE_DEF_TYPE_CONSTANT,
                vipValue: this.constructRoute(a.ipv6.route),
                vipObjectType: "tree",
                vipPrimaryKey: ["prefix"]
            }
        }
    }
    ,
    h.prototype.add = function(a, c) {
        var h = this;
        if (!h.isTemplateFormFieldsValid(c.addTemplate))
            return void this.showNotificationErrorsForForm(c);
        a.transitionInProgress = !0;
        var i = this.createTemplateCopy(a);
        i.templateType = a.templateType.name,
        i.factoryDefault = !1,
        i.setDeviceType(a.deviceModels),
        i.setTemplateDefinition();
        var j = this.validatePrefixNextHop(i.templateDefinition.ip, i.templateDefinition["vpn-id"].vipValue);
        return j ? "validationFail" === j ? (d.error("VPN cannot be configured as a Gateway option in one or more IPv4 prefix entries"),
        void (a.transitionInProgress = !1)) : (j = this.validatePrefixNextHop(i.templateDefinition.ipv6, i.templateDefinition["vpn-id"].vipValue)) ? "validationFail" === j ? (d.error("VPN cannot be configured as a Gateway option in one or more IPv6 prefix entries"),
        void (a.transitionInProgress = !1)) : void b.createGeneralTemplate(i).then(function(b) {
            d.success(f("initialCap")(i.templateType) + " Template created", 2e3),
            e.previousState && e.previousState.name.contains("app.config.template.device.feature") ? (g.pushToFeatureTemplateList(angular.extend(i, {
                templateId: b.templateId
            })),
            a.transitionInProgress = !1,
            e.go(e.previousState.name)) : (a.transitionInProgress = !1,
            e.go("app.config.template.feature", {
                display: "",
                deviceType: "",
                templateType: "",
                templateId: ""
            }))
        }, function(b) {
            a.transitionInProgress = !1,
            d.error(b.error.message + ": " + b.error.details)
        }) : (d.error("Gateway is missing in one or more IPv6 prefix entries"),
        void (a.transitionInProgress = !1)) : (d.error("Gateway is missing in one or more IPv4 prefix entries"),
        void (a.transitionInProgress = !1))
    }
    ,
    h.prototype.edit = function(a, b) {
        var c = this;
        if (!c.isTemplateFormFieldsValid(b.addTemplate))
            return void this.showNotificationErrorsForForm(b);
        var e = this.createTemplateCopy(a);
        e.templateType = a.templateType.name,
        e.factoryDefault = !1,
        e.setDeviceType(a.deviceModels),
        e.setTemplateDefinition();
        var f = this.validatePrefixNextHop(e.templateDefinition.ip, e.templateDefinition["vpn-id"].vipValue);
        return f ? "validationFail" === f ? void d.error("VPN cannot be configured as a Gateway option in one or more IPv4 prefix entries") : (f = this.validatePrefixNextHop(e.templateDefinition.ipv6, e.templateDefinition["vpn-id"].vipValue)) ? "validationFail" === f ? void d.error("VPN cannot be configured as a Gateway option in one or more IPv6 prefix entries") : void this.callUpdateTemplate(e) : void d.error("Gateway is missing in one or more IPv6 prefix entries") : void d.error("Gateway is missing in one or more IPv4 prefix entries")
    }
    ,
    h.prototype.createTemplateCopy = function(a) {
        var b = a.templateDefinition
          , c = angular.copy(_.omit(b, ["ip", "ipv6"]));
        c.ip = {
            "gre-route": b.ip["gre-route"],
            route: []
        },
        c.ipv6 = {
            route: []
        },
        c.ip.route = this.copyRoutes(b.ip.route),
        c.ipv6.route = this.copyRoutes(b.ipv6.route);
        var d = angular.copy(_.omit(a, "templateDefinition"));
        return d.templateDefinition = c,
        d
    }
    ,
    h.prototype.copyRoutes = function(a) {
        var b = [];
        return a && a.length > 0 && angular.forEach(a, function(a) {
            var c = {};
            for (var d in a)
                angular.equals(d, "nextHopList") ? c[d] = angular.copy(a[d].data) : c[d] = angular.copy(a[d]);
            b.push(c)
        }),
        b
    }
    ,
    h
}
function WLANTemplate(a, b, c, d, e) {
    var f = function() {
        a.apply(this, arguments),
        this.templateDefinition = {
            radio: {},
            country: {},
            "channel-bandwidth": {},
            "guard-interval": {},
            channel: {}
        }
    };
    f.prototype = new a,
    f.prototype.extendTemplate = function(a) {
        angular.extend(this, _.omit(a, ["$$hashKey"])),
        a = angular.copy(a)
    }
    ,
    f.prototype.setChannelValues = function(a, b) {
        var c = g(this, b)
          , d = h[c]
          , e = [];
        this.templateDefinition.channel.dataType.values.length = 0,
        e.push({
            key: "auto",
            value: "Auto"
        }),
        "5GHz" === a && e.push({
            key: "auto-no-dfs",
            value: "Auto-No-Dfs"
        }),
        angular.forEach(d, function(b) {
            "2.4GHz" === a && b < 14 && e.push({
                key: b.toString(),
                value: b.toString()
            }),
            "5GHz" === a && b > 13 && e.push({
                key: b.toString(),
                value: b.toString()
            })
        }),
        this.templateDefinition.channel.dataType.values = e
    }
    ,
    f.prototype.add = function(b, c) {
        return c.addTemplate.$valid ? void a.prototype.add.call(this, b, c) : void this.showNotificationErrorsForForm(c)
    }
    ,
    f.prototype.edit = function(b, c) {
        return c.addTemplate.$valid ? void a.prototype.edit.call(this, b, c) : void this.showNotificationErrorsForForm(c)
    }
    ;
    var g = function(a, b) {
        var c = "";
        return angular.forEach(a.templateDefinition.country.dataType.values, function(a) {
            a.key === b && (c = a.group)
        }),
        c
    }
      , h = {
        FCC8_FCCA: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 149, 153, 157, 161, 165],
        ETSI1_WORLD: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140],
        FCC1_WORLD: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 36, 40, 44, 48, 52, 56, 60, 64, 149, 153, 157, 161, 165],
        FCC2_WORLD: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 36, 40, 44, 48, 52, 56, 60, 64, 149, 153, 157, 161, 165],
        FCC3_WORLD: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 149, 153, 157, 161, 165],
        FCC1_FCCA: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 36, 40, 44, 48, 52, 56, 60, 64, 149, 153, 157, 161, 165],
        FCC3_FCCA: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 149, 153, 157, 161, 165],
        FCC3_ETSIC: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 149, 153, 157, 161, 165],
        APL1_WORLD: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 149, 153, 157, 161, 165],
        APL2_WORLD: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 149, 153, 157, 161, 165],
        APL6_WORLD: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 36, 40, 44, 48, 52, 56, 60, 64, 149, 153, 157, 161, 165],
        APL7_FCCA: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 56, 60, 64, 100, 104, 108, 112, 116, 132, 136, 140, 149, 153, 157, 161, 165],
        APL9_WORLD: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 149, 153, 157, 161],
        MKK1_MKKA: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140]
    };
    return f
}
function TemplateController(a, b, c, d, e) {
    a.stateString = c.getStateString(b),
    a.breadCrumb = {
        states: []
    },
    a.tabs = [new d("Device",b.current.name.indexOf("template.device") > -1,"app.config.template.device"), new d("Feature",b.current.name.indexOf("template.feature") > -1,"app.config.template.feature")],
    a.changeState = function(a, c) {
        b.go(a, c)
    }
    ,
    a.filterOptions = [{
        id: 0,
        value: "All",
        key: ""
    }, {
        id: 1,
        value: "Default",
        key: !0
    }, {
        id: 2,
        value: "Non-Default",
        key: !1
    }],
    a.filterDataSourceByTemplateType = function(a, b) {
        if ("" !== a.key) {
            var c = _.filter(b, function(b) {
                return 0 == a.key && angular.isUndefined(b.factoryDefault) || b.factoryDefault == a.key
            });
            this.table.setTableData(c)
        } else
            this.table.setTableData(b);
        this.table.taggedSearchObject.searchTagsCache.length > 0 && this.table.taggedSearchObject.searchData()
    }
}
function TemplateDeviceInput(a, b, c, d, e, f) {
    function g(a) {
        var c = {};
        b.checkNestedProperty(a, "header", "columns") ? (c.selectedTemplate = a.selectedTemplate,
        c.attachedDevices = a.attachedDevices,
        c.selectedDevices = a.selectedDevices,
        c.processId = a.processId,
        c.isEdited = !!a.isEdited,
        c.isMasterEdited = !!a.isMasterEdited,
        c.templateVariableCount = a.header.templateVariableCount,
        c.data = angular.copy(a.data),
        c.originalData = h(a.data),
        c.columnDefs = angular.copy(a.header.columns),
        c.error = !1,
        c.errorMsg = void 0,
        i(c),
        q.push(c),
        angular.forEach(c.data, function(a) {
            m(a, c.selectedTemplate.templateId)
        })) : q.push(a)
    }
    function h(a) {
        return angular.forEach(a, function(a) {
            for (var c in a)
                b.isUndefinedOrEmpty(a[c]) && delete a[c]
        }),
        a
    }
    function i(a) {
        p = !1;
        var c = _.findIndex(a.columnDefs, function(a) {
            return a.property = "csv-status"
        });
        a.columnDefs[c].exporterSuppressExport = !0,
        angular.forEach(a.data, function(b) {
            b["csv-templateId"] = a.selectedTemplate.templateId
        }),
        angular.forEach(a.columnDefs, function(c) {
            "boolean" === c.dataType && angular.forEach(a.data, function(a) {
                a[c.property] = b.isUndefinedOrEmpty(a[c.property]) ? c.values : a[c.property],
                angular.isString(a[c.property]) && ("true" === a[c.property] ? a[c.property] = !0 : a[c.property] = !1)
            }),
            !c.editable || "boolean" !== c.dataType && "boolean-empty" !== c.dataType ? !c.editable || "passphrase" !== c.dataType && "restrictedPassphrase" !== c.dataType ? c.editable && "enum" === c.dataType && "list" !== c.objectType ? (c.editable = !1,
            c.cellTemplate = '<div class="ui-grid-cell-contents"><select ng-change="grid.api.edit.raise.afterCellEdit(row.entity, col.colDef)" id="' + c.property + '_{{rowRenderIndex}}" ng-model="row.entity[\'' + c.property + "']\" data-ng-options=\"opt.key as opt.value for opt in col.colDef.editDropdownOptionsArray| orderBy:'key'\"></select></div>") : c.editable && "enum" === c.dataType && "list" === c.objectType ? (c.editable = !1,
            c.width = 250,
            c.cellTemplate = '<div class="ui-grid-cell-contents"><ui-select ng-init="row.entity[\'' + c.property + "'].length > 0 ? row.entity['vipEnumListClone_" + c.property + "'] = row.entity['" + c.property + "'].split(','):row.entity['vipEnumListClone_" + c.property + "'] = []\" multiple ng-model=\"row.entity['vipEnumListClone_" + c.property + "']\" on-select=\"row.entity['" + c.property + "'] = row.entity['vipEnumListClone_" + c.property + "'].toString(); grid.api.edit.raise.afterCellEdit(row.entity, col.colDef)\" on-remove=\"row.entity['" + c.property + "'] = row.entity['vipEnumListClone_" + c.property + '\'].toString(); grid.api.edit.raise.afterCellEdit(row.entity, col.colDef)" theme="bootstrap" class="config-ui-select" style="width: ' + (c.width - 12) + 'px;" id="' + c.property + '_{{rowRenderIndex}}"> <ui-select-match id="' + c.property + '_{{rowRenderIndex}}_selection" placeholder="Select ' + c.title + '...">{{$item.value}}</ui-select-match> <ui-select-choices ng-hide="!$select.open" repeat="option.key as option in col.colDef.editDropdownOptionsArray  | propsFilter: {key: $select.search, value: $select.search}"> <div ng-bind-html="option.value | highlight: $select.search" id="select_choice_' + c.property + '_{{rowRenderIndex}}"></div> </ui-select-choices> </ui-select></div>') : c.editable ? c.cellTemplate = '<div class="ui-grid-cell-contents"><input id="' + c.property + '_{{rowRenderIndex}}" placeholder="--" style="background-color: inherit; border: 0px !important; padding: 0px !important;" ng-class="{ \'errorCell\' : grid.appScope.duplicateIpMap[row.entity[\'' + c.property + "']].length > 1 &&  '" + c.property + "' === '//system/system-ip'}\" ng-class=\"'colt' + col.uid\" ng-model=\"row.entity['" + c.property + "']\"/></div>" : c.cellTemplate = '<div class="ui-grid-cell-contents">{{row.entity[\'' + c.property + "']}}</div>" : (c.editable = !0,
            "vpn-vedge-interface-ppp" === c.templateType ? (p = !0,
            c.cellTemplate = '<div class="ui-grid-cell-contents"><input id="' + c.property + '_{{rowRenderIndex}}" placeholder="--" type="{{grid.appScope.inputType}}" style="background-color: inherit; border: 0px !important; padding: 0px !important;" ng-class="\'colt\' + col.uid" ng-model="row.entity[\'' + c.property + "']\"/></div>") : c.cellTemplate = '<div class="ui-grid-cell-contents"><input id="' + c.property + '_{{rowRenderIndex}}" placeholder="--" type="password" style="background-color: inherit; border: 0px !important; padding: 0px !important;" ng-class="\'colt\' + col.uid" ng-model="row.entity[\'' + c.property + "']\"/></div>") : (c.editable = !1,
            c.cellTemplate = '<div class="ui-grid-cell-contents"><input ng-change="grid.api.edit.raise.afterCellEdit(row.entity, col.colDef)" id="' + c.property + "_{{rowRenderIndex}}\" type=\"checkbox\" ng-init=\"([true, 'true', 'True', 'TRUE'].indexOf(row.entity['" + c.property + "']) > -1) ? row.entity['" + c.property + "'] = true: row.entity['" + c.property + "'] = false;\" ng-model=\"row.entity['" + c.property + '\']"/><label for="' + c.property + '_{{rowRenderIndex}}"></label></div>')
        })
    }
    function j(a) {
        return _.findIndex(q, function(c) {
            return b.checkNestedProperty(c, "selectedTemplate") ? angular.equals(c.selectedTemplate.templateId, a) : angular.equals(c, a)
        })
    }
    function k(a) {
        var e = q[a].selectedTemplate.templateId
          , f = {};
        d.getAttachedDevices(e).then(function(a) {
            if (b.checkNestedProperty(a, "data", 0))
                return f.templateId = e,
                f.deviceIds = _.pluck(a.data, "uuid"),
                f.isEdited = !0,
                f.isMasterEdited = !1,
                d.generateInput(f)
        }).then(function(b) {
            b && (q[a].columnDefs = b.header.columns,
            q[a].templateVariableCount = b.header.templateVariableCount,
            q[a].data = angular.copy(b.data),
            q[a].attachedDevices = f.deviceIds,
            q[a].selectedDevices = _.pluck(b.data, "csv-deviceId"),
            q[a].isEdited = !0,
            q[a].isMasterEdited = !1,
            q[a].originalData = h(b.data),
            q[a].error = !1,
            q[a].errorMsg = void 0,
            i(q[a]),
            angular.forEach(q[a].data, function(b) {
                m(b, q[a].selectedTemplate.templateId)
            }))
        }, function(a) {
            c.error(a.message + ": " + a.details)
        })
    }
    function l(a) {
        if (!a || !a.length)
            return !0;
        var c = []
          , e = [];
        angular.forEach(a, function(a) {
            c.push(d.getAttachedDevices(a))
        }),
        f.all(c).then(function(g) {
            return c.reset(),
            angular.forEach(g, function(f, g) {
                b.checkNestedProperty(f, "data", 0) && (e[g] = {
                    templateId: a[g],
                    deviceIds: _.pluck(f.data, "uuid"),
                    isEdited: !0,
                    isMasterEdited: !1
                },
                c.push(d.generateInput(e[g])))
            }),
            f.all(c)
        }).then(function(c) {
            var d;
            angular.forEach(c, function(c, f) {
                d = j(a[f]),
                b.checkNestedProperty(c, "data", 0) ? (q[d].columnDefs = c.header.columns,
                q[d].templateVariableCount = c.header.templateVariableCount,
                q[d].data = angular.copy(c.data),
                q[d].attachedDevices = e[f].deviceIds,
                q[d].selectedDevices = _.pluck(c.data, "csv-deviceId"),
                q[d].isEdited = !0,
                q[d].isMasterEdited = !1,
                q[d].originalData = h(c.data),
                q[d].error = !1,
                q[d].errorMsg = void 0,
                i(q[d]),
                angular.forEach(q[d].data, function(a) {
                    m(a, q[d].selectedTemplate.templateId)
                })) : q[d].data = []
            })
        }, function(b) {
            var c;
            angular.forEach(a, function(a) {
                c = j(a),
                q[c].error = !0,
                q[c].errorMsg = b
            })
        })
    }
    function m(a, c) {
        var d, e = "complete", f = q[j(c)].columnDefs;
        for (var g in a)
            if (!(_.indexOf(["csv-templateId", "csv-status", "csv-deviceId", "csv-deviceIP", "csv-host-name", "hoverActions", "$$hashKey", "selected"], g) > -1 || g.startsWith("vipEnumListClone_") || (d = _.find(f, function(a) {
                return angular.equals(g, a.field) || angular.equals(g, a.property)
            }),
            d = d.type || d.dataType,
            angular.equals(d, "boolean") || angular.equals(d, "boolean-empty"))))
                if (angular.equals(d, "numberStr") || angular.equals(d, "number")) {
                    if (isNaN(parseFloat(a[g]))) {
                        e = "in_complete";
                        break
                    }
                } else if (_.indexOf(["string", "object", "enum"], d) > -1) {
                    if (b.isUndefinedOrEmpty(a[g])) {
                        e = "in_complete";
                        break
                    }
                } else if (angular.equals(d, "ipv4-prefix")) {
                    if (b.isUndefinedOrEmpty(a[g])) {
                        e = "in_complete";
                        break
                    }
                } else if (angular.equals(d, "ipv4")) {
                    if (b.isUndefinedOrEmpty(a[g])) {
                        e = "in_complete";
                        break
                    }
                } else if (angular.equals(d, "ipv6")) {
                    if (b.isUndefinedOrEmpty(a[g])) {
                        e = "in_complete";
                        break
                    }
                } else if (angular.equals(d, "ipv6-prefix")) {
                    if (b.isUndefinedOrEmpty(a[g])) {
                        e = "in_complete";
                        break
                    }
                } else if (angular.equals(d, "passphrase")) {
                    if (b.isUndefinedOrEmpty(a[g])) {
                        e = "in_complete";
                        break
                    }
                } else if (angular.equals(d, "restrictedPassphrase")) {
                    if (b.isUndefinedOrEmpty(a[g])) {
                        e = "in_complete";
                        break
                    }
                } else
                    ;
        a["csv-status"] = e
    }
    function n(a) {
        var b = {
            deviceInfo: [],
            deviceIpMap: {}
        }
          , c = new Set;
        return angular.forEach(a, function(a) {
            angular.forEach(a.data, function(a) {
                b.deviceInfo.push({
                    "csv-deviceIP": a["//system/system-ip"],
                    "csv-deviceId": a["csv-deviceId"],
                    "csv-host-name": a["csv-host-name"]
                }),
                c.add(a["//system/system-ip"]),
                angular.isUndefined(b.deviceIpMap[a["//system/system-ip"]]) && (b.deviceIpMap[a["//system/system-ip"]] = []),
                b.deviceIpMap[a["//system/system-ip"]].push(a["csv-host-name"])
            })
        }),
        b
    }
    function o(a) {
        for (var b in a)
            if (a.hasOwnProperty(b) && a[b].length > 1)
                return !1;
        return !0
    }
    var p, q = [], r = {}, s = !1;
    return {
        setTemplateDeviceInput: function(a) {
            q.reset(),
            angular.isArray(a) ? angular.forEach(a, function(a) {
                g(a)
            }) : g(a)
        },
        getTemplateDeviceInputs: function() {
            return q
        },
        setTemplateDeviceInputData: function(a, b) {
            j(a) > -1 && angular.copy(b, q[j(a)].data)
        },
        getTemplateDeviceRollBackTimer: function() {
            return r
        },
        setTemplateDeviceRollBackTimer: function(a) {
            r = a
        },
        appendToTemplateDeviceRollBackTimer: function(a) {
            for (var b in a)
                r[b] = a[b]
        },
        getTemplateDeviceInputColumns: function(a) {
            return j(a) > -1 && q[j(a)].columnDefs
        },
        getTemplateDeviceInputData: function(a) {
            return j(a) > -1 && q[j(a)].data
        },
        getTemplateDeviceInputSelectedTemplate: function(a) {
            if (j(a) > -1) {
                var c = j(a);
                return b.checkNestedProperty(q[c], "columnDefs") || k(c),
                q[c].selectedTemplate
            }
            return !1
        },
        populateAllTemplateDetails: function() {
            var a = [];
            angular.forEach(q, function(c, d) {
                b.checkNestedProperty(q[d], "columnDefs") || a.push(c.selectedTemplate.templateId)
            }),
            l(a)
        },
        isAllRowsInCompleteStatus: function() {
            for (var a = [], b = 0; b < q.length; b++) {
                var c = _.findIndex(q[b].data, function(a) {
                    return "in_complete" === a["csv-status"]
                });
                c > -1 && a.push(q[b].selectedTemplate.templateName)
            }
            return a
        },
        getTemplateDeviceInputSelectedDevices: function(a) {
            return j(a) > -1 && q[j(a)].selectedDevices
        },
        isEdited: function(a) {
            return j(a) > -1 && q[j(a)].isEdited
        },
        isMasterEdited: function(a) {
            return j(a) > -1 && q[j(a)].isMasterEdited
        },
        getVariableCount: function(a) {
            return j(a) > -1 && q[j(a)].templateVariableCount
        },
        checkRowStatus: function(a, b) {
            m(a, b)
        },
        getOriginalDataForDevice: function(a, b) {
            return j(a) > -1 && _.find(q[j(a)].originalData, function(a) {
                return a["csv-deviceId"] == b
            })
        },
        isPapAndChapPasswordFieldsExists: function() {
            return p
        },
        getPapAndChapPasswordFieldType: function() {
            return s
        },
        setPapAndChapPasswordFieldType: function(a) {
            s = a
        },
        getDeviceInfoMap: function(a) {
            return n(a)
        },
        checkForUniqueIps: function(a) {
            return o(a)
        }
    }
}
function dashboardController(a, b, c, d, e, f, g) {
    b.stateString = a.getStateString(c),
    b.userMode = d.getUserMode(),
    "multiTenant-provider" !== b.userMode.mode && "provider" !== b.userMode.mode && "singleTenant" !== b.userMode.mode || e.getWebServerSettings().then(function(a) {
        if (angular.isDefined(a.validity) && "Expiring" === a.validity) {
            var b = moment()
              , c = moment(a.notAfter)
              , d = c.diff(b, "days");
            g.warning("Web Server certificate will expire in " + d + " days. Go to Administration -> Settings to generate a CSR for a new certificate", 1e4)
        } else
            angular.isDefined(a.validity) && "Expired" === a.validity && g.error("Web Server certificate is expired. Go to Administration -> Settings to generate a CSR for a new certificate", 1e4)
    })
}
function crashDetailsController(a, b, c, d, e, f, g) {
    b.stateString = a.getStateString(c);
    var h = f["vdevice-name"]
      , i = f["core-filename"];
    d.getCrashDetailsForDevice(h, i).then(function(a) {
        b.crashDetails = a.length > 0 ? a : ""
    }, function() {}),
    b.closeModal = function() {
        g.hide()
    }
}
function DashboardChartData(a, b, c, d, e, f) {
    var g = {
        showvalues: "0",
        showYAxisValues: "0",
        formatnumberscale: "0",
        plotgradientcolor: "",
        bgcolor: "FFFFFF",
        showAlternateVGridColor: "0",
        showplotborder: "0",
        showcanvasborder: "0",
        legendborderalpha: "0",
        legendshadow: "0",
        legendIconScale: "0",
        showpercentvalues: "1",
        stack100percent: "1",
        canvasborderalpha: "0",
        palettecolors: "",
        showborder: "0",
        numDivLines: "0",
        plotSpacePercent: "100",
        legendPosition: "bottom",
        showLimits: "0",
        legendItemFontSize: "8",
        legendBgColor: "#CCCCCC",
        legendPadding: "0",
        showLegend: "0",
        baseFontColor: "#FFFFFF"
    }
      , h = function(a) {
        this.chartData = {},
        this.options = angular.extend({}, g, a)
    };
    return h.prototype.setChartData = function(a) {
        var b, c = this;
        b = {},
        b.chart = {},
        b.dataset = [],
        b.categories = [],
        b.chart = c.options,
        angular.forEach(a.statusList, function(a) {
            var c, d = "", c = {
                seriesname: a.name,
                data: [{
                    value: a.count
                }]
            };
            switch (b.dataset.push(c),
            a.status) {
            case "up":
                d = "17851A";
                break;
            case "down":
            case "error":
                d = "FF0000";
                break;
            case "partial":
                d = "FF0000";
                break;
            case "normal":
                d = "0000FF";
                break;
            default:
                d = "000000"
            }
            b.chart.palettecolors = b.chart.palettecolors.length > 0 ? b.chart.palettecolors + "," + d : b.chart.palettecolors + d
        }),
        b.categories = [{
            category: [{
                label: ""
            }]
        }],
        c.chartData = b
    }
    ,
    h
}
function dashboardWidget(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    return {
        restrict: "A",
        scope: {
            widget: "=",
            dashboardFactory: "="
        },
        link: {
            pre: function(s, t) {
                function u(b) {
                    var c, d, e, f;
                    return c = "dpi" === b ? "application" : "destination",
                    d = "dpi" === b ? "octets" : "total_bytes",
                    e = {
                        name: b,
                        formatDataToBytes: !0,
                        replaceToolTipTextWithYAxisTitleText: !0
                    },
                    f = {
                        options: {
                            scrollbar: {
                                enabled: !1
                            },
                            tooltip: {
                                formatter: function() {
                                    var c = "dpi" === b ? "octets" : "Total Bytes"
                                      , d = "";
                                    return d += "<b>" + this.points[0].key + "<b><br/>",
                                    d += '<span style="color:' + this.points[0].color + '">■    </span>',
                                    d += "<span>" + c + ":  </span>",
                                    d += "<span>" + a.formatBytes(this.y, !0) + "</span>",
                                    d += "<br/>"
                                }
                            }
                        },
                        title: {
                            text: ""
                        },
                        xAxis: {
                            type: "category",
                            tickWidth: 0,
                            labels: {
                                enabled: !1
                            },
                            title: {
                                text: "dpi" === b ? "Application" : "Destination"
                            },
                            visible: !0,
                            gridLineWidth: 0,
                            lineWidth: 1,
                            lineColor: "#C0D0E0"
                        },
                        yAxis: {
                            labels: {
                                enabled: !1
                            },
                            title: {
                                text: "Usage"
                            },
                            visible: !0,
                            gridLineWidth: 0,
                            minorGridLineWidth: 0,
                            lineWidth: 0,
                            lineColor: "#C0D0E0",
                            min: 1
                        }
                    },
                    [e, f]
                }
                function v(a) {
                    var b, c, d, e;
                    return b = "loss" === a ? "loss_percentage" : a,
                    c = "loss" === a ? "%" : "ms",
                    d = {
                        name: a,
                        filtersSelected: {
                            xAxis: ["entry_time"],
                            yAxis: [b],
                            series: ["color"]
                        },
                        yAxisUnit: c
                    },
                    e = {
                        xAxis: {
                            labels: {
                                enabled: !1
                            },
                            title: {
                                text: null
                            },
                            visible: !1
                        },
                        yAxis: {
                            labels: {
                                enabled: !0
                            },
                            title: {
                                text: null
                            },
                            visible: !0
                        },
                        legend: {
                            enabled: !1
                        }
                    },
                    "loss" === a && (e.yAxis.max = 100),
                    [d, e]
                }
                function w(a) {
                    var b;
                    return !angular.isDefined(a) || a.length < 1 || (angular.forEach(a, function(a) {
                        angular.isDefined(b) && b || (b = !!j.allowReadAccess(a))
                    }),
                    b)
                }
                function x() {
                    var a = i.getAppContentHeight();
                    if (t.closest("li").length)
                        return a - t.closest("li").height() + 55;
                    var b = $("#dashboard_applicationAware_routing_table").closest("li");
                    return b.length ? a - b.height() + 55 : void 0
                }
                function y(a) {
                    "topApplications" === s.widget.name && ("dpi" === s.defaultWidgetToggleState ? a.data.length > 0 ? (s.dpiChartObject.changeNoDataMessageState(!1),
                    s.dpiChartObject.addCategoriesFromRawData([{
                        name: "Application",
                        display: "application",
                        type: "column"
                    }], {
                        names: [],
                        property: "application"
                    }, a)) : s.dpiChartObject.changeNoDataMessageState(!0) : "cflowd" === s.defaultWidgetToggleState && (a.data.length > 0 ? (s.cflowdChartObject.changeNoDataMessageState(!1),
                    s.cflowdChartObject.addCategoriesFromRawData([{
                        name: "Destination",
                        display: "destination",
                        type: "column"
                    }], {
                        names: [],
                        property: "destination"
                    }, a)) : s.cflowdChartObject.changeNoDataMessageState(!0))),
                    "transportHealth" === s.widget.name && ("loss" === s.transportHealthFilterSelected.key ? s.lossChartObject.updateChartAPIData(a) : "latency" === s.transportHealthFilterSelected.key ? s.latencyChartObject.updateChartAPIData(a) : "jitter" === s.transportHealthFilterSelected.key && s.jitterChartObject.updateChartAPIData(a))
                }
                function z() {
                    if (angular.forEach(s.widget.eventsList, function(a) {
                        F.hasOwnProperty(a) && H.push(F[a])
                    }),
                    H.length > 0) {
                        var a = s.widget.eventWidgetUniqueID;
                        s.widget.dashboardWidgetEventObj = new l(G[a],H)
                    }
                }
                function A() {
                    g.get(s.widget.templateURL, {
                        cache: f
                    }).success(function(a) {
                        t.replaceWith(c(a)(s)),
                        "table" == s.widget.type && q(function() {
                            var a = x();
                            angular.isDefined(a) && a > -1 && (s.widgetTableObj.options.tableHeightOffset = a)
                        })
                    })
                }
                function B(a) {
                    var b = s.widget.eventsTypeList;
                    return !(angular.isDefined(b) && b.length > 0) || b.indexOf(a.eventChangeType) >= 0
                }
                function C(a) {
                    var b = o.defer();
                    return e.getFieldsDataForTopApplications(a).then(function(c) {
                        "dpi" === a ? (s.fieldsDataForTopApplicationsDPI = e.formatFieldsData(c, a),
                        s.fieldsDataForTopApplicationsDPI = e.formatTimeFieldForTopApplicationsView(s.fieldsDataForTopApplicationsDPI, a),
                        s.queryBuilderObjForDPI.setFieldsData(s.fieldsDataForTopApplicationsDPI),
                        s.queryBuilderObjForDPI.loadQueryBuilderWithFieldsData()) : (s.fieldsDataForTopApplicationsCFLOWD = e.formatFieldsData(c, a),
                        s.fieldsDataForTopApplicationsCFLOWD = e.formatTimeFieldForTopApplicationsView(s.fieldsDataForTopApplicationsCFLOWD, a),
                        s.queryBuilderObjForCFLOWD.setFieldsData(s.fieldsDataForTopApplicationsCFLOWD),
                        s.queryBuilderObjForCFLOWD.loadQueryBuilderWithFieldsData()),
                        b.resolve()
                    }, function(a) {
                        $log.error(a),
                        b.resolve()
                    }),
                    b.promise
                }
                var D, E, F = k.returnEventsEnum(), G = k.returnDashboardWidgetsEnum(), H = [];
                s.dashboardType = j.getUserMode(),
                s.Math = h.Math,
                s.rbac = j,
                s.stateString = a.getStateString(b),
                s.tenantDashboardService = e;
                var I = function(a) {
                    "subscribe" === a && H.length > 0 ? (angular.forEach(H, function(a) {
                        a += "_event",
                        D = s.$on(a, function(a, b) {
                            B(b) && (s.dashboardFactory.refreshWidget(s.widget, s),
                            I("unsubscribe"))
                        })
                    }),
                    console.log("subscribing widget " + s.widget.name),
                    k.subscribe(s.widget.dashboardWidgetEventObj)) : "unsubscribe" === a && (k.unsubscribe(s.widget.dashboardWidgetEventObj),
                    _.isFunction(D) && (console.log("un-subscribed widget " + s.widget.name),
                    D(),
                    D = null))
                };
                s.refreshParentWidgetOnModalClose = function() {
                    "table" == s.widget.type && (s.tunnelEndPointName = void 0),
                    I("unsubscribe"),
                    s.dashboardFactory.refreshWidget(s.widget, s),
                    I("subscribe")
                }
                ,
                angular.isDefined(s.defaultModalTemplate) || (s.defaultModalTemplate = "app/dashboard/tenantDashboard/widgetDetails/partials/widgetDetailsModal.html"),
                angular.isDefined(s.rebootModalTemplate) || (s.rebootModalTemplate = "app/dashboard/tenantDashboard/widgetDetails/partials/networkDetailsWidget-partial.html"),
                angular.isDefined(s.transportHealthModalTemplate) || (s.transportHealthModalTemplate = "app/dashboard/tenantDashboard/widgetDetails/widgetDetailsComponents/transportHealth/transportHealthOverViewPartial.html"),
                angular.isDefined(s.modalTemplateWithTabViewBreadCrumb) || (s.modalTemplateWithTabViewBreadCrumb = "app/dashboard/tenantDashboard/widgetDetails/partials/topApplicationsWidget-partial.html"),
                angular.isDefined(s.applicationFilterSelected) || (s.applicationFilterSelected = {
                    value: "VPN - All",
                    key: "all"
                }),
                ("transportHealth" === s.widget.name || angular.isDefined(s.widget.type) && "table" == s.widget.type) && (s.routingFilterTypes = [{
                    value: "By Loss",
                    key: "loss"
                }, {
                    value: "By Latency",
                    key: "latency"
                }, {
                    value: "By Jitter",
                    key: "jitter"
                }]),
                "TLOCUtil" === s.widget.name && (s.showLinkToUtilizationDetails = !0,
                s.tlocPercentageUtilizationTemplate = "app/dashboard/tenantDashboard/widgetDetails/widgetDetailsComponents/tlocUtilizationPercentage/tlocPercentageUtilizationTemplate.html"),
                "vEdgeInventory" === s.widget.name && (s.showLinkToUtilizationDetails = !1),
                "transportHealth" === s.widget.name && (s.dashboardFactory.initializeQueryBuilderForTransportHealth(s),
                E = v("loss"),
                s.lossChartObject = new m(E[0],E[1]),
                E = v("latency"),
                s.latencyChartObject = new m(E[0],E[1]),
                E = v("jitter"),
                s.jitterChartObject = new m(E[0],E[1]),
                s.transportHealthFilterSelected = s.routingFilterTypes[0],
                p.getTransportHealthFieldsData().then(function(a) {
                    s.queryBuilderObj_transportHealth.setFieldsData(a),
                    s.queryBuilderObj_transportHealth.loadQueryBuilderWithFieldsData()
                })),
                "topApplications" === s.widget.name && (s.dashboardFactory.initializeQueryBuilderForDPI(s),
                s.dashboardFactory.initializeQueryBuilderForCFLOWD(s),
                E = u("dpi"),
                s.dpiChartObject = new n(E[0],E[1]),
                s.dpiChartObject.setXAxisProperty("application"),
                s.dpiChartObject.setYAxisProperty(["octets"]),
                s.dpiChartObject.setSeriesNames([{
                    property: "application",
                    values: []
                }]),
                E = u("cflowd"),
                s.cflowdChartObject = new n(E[0],E[1]),
                s.cflowdChartObject.setXAxisProperty("destination"),
                s.cflowdChartObject.setYAxisProperty(["total_bytes"]),
                s.cflowdChartObject.setSeriesNames([{
                    property: "destination",
                    values: []
                }]),
                e.getWidgetToEnable().then(function(a) {
                    s.defaultWidgetToggleState = a,
                    C(a)
                })),
                angular.isDefined(s.widget.type) && "table" == s.widget.type && (s.routingFilterSelected = s.routingFilterTypes[0],
                s.widget.currentWidgetAPIParams = s.routingFilterSelected.key),
                s.$on("$destroy", function() {
                    null !== D && "function" == typeof D && I("unsubscribe"),
                    angular.isDefined(s.modalInstance) && s.closeModal()
                }),
                s.getNonNormalStatusCount = function(a) {
                    var b = 0;
                    return angular.forEach(a, function(a) {
                        "normal" !== a.status && (b += a.count)
                    }),
                    b
                }
                ,
                s.$watchCollection("widget.widgetData", function(a, b) {
                    angular.isDefined(b) && "" !== b && Object.keys(b).length > 0 && angular.isDefined(a) ? (null === D && I("subscribe"),
                    angular.equals(a, b) || s.handleRefreshWidgetData(a, b)) : angular.isDefined(a) && Object.keys(a).length > 0 && s.handleNewWidgetData(a)
                }),
                s.$watchCollection("widget.handleNoAPIResponse", function(a, b) {
                    s.widget.loadingInProgress = !1,
                    !a || a.length < 1 || angular.equals(a, b) || (s.widget.loadingInProgress && (s.widget.loadingInProgress = !1),
                    s.title = s.dashboardFactory.getWidgetTitle(s.widget),
                    g.get("app/dashboard/tenantDashboard/partials/error-partial.html", {
                        cache: f
                    }).success(function(a) {
                        t.replaceWith(c(a)(s))
                    }))
                }),
                s.handleNewWidgetData = function(a) {
                    if (z(),
                    s.widget.loadingInProgress = !1,
                    s.title = s.dashboardFactory.getWidgetTitle(s.widget),
                    s.readAllowed = w(s.widget.permissions),
                    "topApplications" === s.widget.name && (s.widget.currentWidgetAPIParams = s.defaultWidgetToggleState),
                    angular.isDefined(s.widget.type) && "table" == s.widget.type) {
                        s.widgetTableObj = new d({
                            autoLoad: !0,
                            rowHeight: 30,
                            toolbar: !1,
                            columnResizing: !0,
                            tableHeightOffset: x()
                        }),
                        s.$on("gridster-resized", function() {
                            s.widgetTableObj.options.tableHeightOffset = x()
                        }),
                        s.widgetTableObj.setToolbar({
                            menuColumnFilter: !1
                        });
                        var b = {
                            showRouteStatsDetails: function(a) {
                                s.tunnelEndPointName = a.entity.name;
                                var b = angular.isDefined(a.entity["name-hostname"]) ? a.entity["name-hostname"] : a.entity.name;
                                [e.getAppAwareRoutingModalAPIForChartView("loss", s.tunnelEndPointName), e.getAppAwareRoutingModalAPIForChartView("latency", s.tunnelEndPointName), e.getAppAwareRoutingModalAPIForChartView("jitter", s.tunnelEndPointName)];
                                s.openWidgetDetailsModal("", s.title + ": " + b, "app/monitor/devices/dashboard/templates/wan/dashboardTunnel.html", "appRouteStatsView", "TunnelController")
                            }
                        };
                        s.widgetTableObj.name = this.title.split("?")[0].replace(/\s/g, "_"),
                        s.widgetTableObj.setAppScope(b),
                        s.widgetTableObj.setHoverAction({}),
                        a.header.columns.splice(0, 0, {
                            name: "chart",
                            displayName: "",
                            dataType: "string",
                            width: "50",
                            pinnedRight: !0,
                            cellTemplate: "<div class='chartIcon'><span id='view_change_history' ng-click='grid.appScope.showRouteStatsDetails(row)'><md-icon class='material-icons blue'>trending_up</md-icon></span></div>"
                        }),
                        s.widgetTableObj.createColumns(a.header.columns),
                        r.setTopPerformingTunnels(a.data),
                        a.data.splice(10, 15),
                        s.widgetTableObj.setTableData(a.data)
                    }
                    angular.isDefined(s.widget.name) && "topApplications" === s.widget.name && (angular.isDefined(s.applicationFilterTypes) || (s.applicationFilterTypes = [],
                    s.widget.currentWidgetAPIParams = s.applicationFilterSelected.key,
                    s.dashboardFactory.loadVPNList(s.applicationFilterSelected, s.applicationFilterTypes))),
                    A(),
                    ("topApplications" === s.widget.name || "transportHealth" === s.widget.name) && angular.isDefined(a.header) && angular.isDefined(a.header.chart) && y(a),
                    I("subscribe")
                }
                ,
                s.handleRefreshWidgetData = function(a) {
                    angular.isDefined(a.header) && angular.isDefined(a.header.chart) && y(a),
                    angular.isDefined(s.widget.type) && "table" == s.widget.type && angular.isDefined(s.widgetTableObj) && (r.setTopPerformingTunnels(a.data),
                    a.data.splice(10, 15),
                    s.widgetTableObj.refreshTableData(a.data))
                }
                ,
                s.updateWidgetDataOnToggle = function(a, b) {
                    if (s.defaultWidgetToggleState !== b) {
                        if (s.defaultWidgetToggleState = b,
                        angular.isDefined(s.queryBuilderObjForDPI) && s.queryBuilderObjForDPI.setFilterOverlayVisible(!1),
                        angular.isDefined(s.queryBuilderObjForCFLOWD) && s.queryBuilderObjForCFLOWD.setFilterOverlayVisible(!1),
                        "dpi" === s.defaultWidgetToggleState)
                            if (angular.isDefined(s.fieldsDataForTopApplicationsDPI)) {
                                var c = s.queryBuilderObjForDPI.getConstructedQueryObject(s.queryBuilderObjForDPI.queryBuilderComponentsObj.components);
                                s.searchCallBackForDPI(c)
                            } else
                                C(s.defaultWidgetToggleState);
                        if ("cflowd" === s.defaultWidgetToggleState)
                            if (angular.isDefined(s.fieldsDataForTopApplicationsCFLOWD)) {
                                var c = s.queryBuilderObjForCFLOWD.getConstructedQueryObject(s.queryBuilderObjForCFLOWD.queryBuilderComponentsObj.components);
                                s.searchCallBackForCFLOWD(c)
                            } else
                                C(s.defaultWidgetToggleState)
                    }
                }
                ,
                s.$watchCollection("routingFilterSelected", function(a, b) {
                    angular.isDefined(a) && angular.isDefined(b) && a.key !== b.key && s.dashboardFactory.refreshAppAwareRouting(s.widget, a.key)
                }),
                s.$watchCollection("transportHealthFilterSelected", function(a, b) {
                    angular.isDefined(a) && angular.isDefined(b) && a.key !== b.key && s.dashboardFactory.refreshTransportHealth(s.widget, a.key, s.transportHealthQueryURL)
                })
            }
        }
    }
}
function deviceHealthProgress(a, b, c) {
    return {
        restrict: "A",
        scope: {
            itemValue: "=",
            itemTotal: "=",
            itemStatus: "="
        },
        template: '<canvas id="{{\'dashboard_device_progress-bar-\'+ itemStatus}}" data-value="{{itemValue}}"> </canvas>',
        link: function(a, d) {
            function e() {
                var a, b, c, e = 72;
                a = d.closest("li.gridster-item"),
                b = .9 * a.width() / 3,
                c = .75 * a.height(),
                g = Math.min(b, c),
                h = .75 * Math.min(g / e, g / e),
                i = 2 * Math.PI,
                j = Math.PI / 2,
                k = "#eeeeee",
                l = d.find("canvas")[0],
                l.width = .75 * g,
                l.height = .75 * g,
                l.style.width = .75 * g + "px",
                l.style.height = .75 * g + "px"
            }
            function f(a, b) {
                a.beginPath(),
                a.arc(35, 36, 33, -j, i * b - j, !1),
                a.stroke()
            }
            var g, h, i, j, k, l, m;
            m = function() {
                var a = document.createElement("canvas").getContext("2d")
                  , b = window.devicePixelRatio || 1
                  , c = a.webkitBackingStorePixelRatio || a.mozBackingStorePixelRatio || a.msBackingStorePixelRatio || a.oBackingStorePixelRatio || a.backingStorePixelRatio || 1;
                return b / c
            }(),
            a.renderCanvas = function() {
                (!angular.isDefined(g) || g < 0) && e();
                var c = l.getContext("2d");
                switch (c.strokeStyle = "#eeeeee",
                c.lineCap = "square",
                c.lineWidth = 2,
                c.scale(h, h),
                f(c, 1),
                a.itemStatus) {
                case "up":
                    k = b.GLOBAL_GREEN;
                    break;
                case "down":
                    k = b.GLOBAL_RED;
                    break;
                case "warning":
                case "partial":
                    k = b.GLOBAL_YELLOW
                }
                var d = l.getContext("2d");
                d.strokeStyle = k,
                d.lineCap = "square",
                d.lineWidth = 2,
                f(d, a.itemValue / a.itemTotal);
                var i = l.getContext("2d");
                i.fillStyle = "#757575",
                i.font = "500 1.2rem Roboto",
                i.textAlign = "center",
                i.fillText(a.itemValue, 36, 42)
            }
            ,
            a.$watch(function() {
                return d.parents("li").eq(1).attr("class")
            }, function(b) {
                b.indexOf("gridster-item") > 0 && a.renderCanvas()
            }),
            a.$on("gridster-resized", function() {
                g = -1,
                a.renderCanvas()
            }),
            c(function() {
                g = -1,
                a.renderCanvas()
            })
        }
    }
}
function TenantDashboardController(a, b, c, d, e, f, g, h, i) {
    b.stateString = a.getStateString(d),
    b.dashboardType = h.getUserMode(),
    b.licenseMessage = "";
    var j = function() {
        b.licenseExpired = f.getLicensesExpired();
        var a = f.getLicensesExpInDays();
        b.licenseExpired ? b.licenseMessage = "License has been expired." : a != -1 && a <= 5 && (b.licenseMessage = a + " Days remaining for your evaluation period to expire.")
    };
    j(),
    b.openActivateTemplate = function() {
        var a = g.open({
            templateUrl: "app/admin/licenses/licensesActivateTemplate.html",
            controller: "licensesActivateController",
            windowClass: "customModalWindow",
            backdropClass: "customModalBackdrop",
            backdrop: "static",
            size: "lg"
        });
        a.result.then(function() {
            b.licenseExpired = !1,
            b.licenseMessage = "",
            h.initialize()
        }, function() {
            $log.info("Modal dismissed at: " + new Date)
        })
    }
    ,
    b.initializeGridsterLogic = function() {
        function a(a) {
            var e = angular.element(".dashboard").height();
            b.containerWidth = angular.element(".dashboard").width(),
            d = e > 673 ? Math.floor((e - c - h - j - k) / l) : 182.5,
            b.containerWidth > 935 ? (f = "auto",
            g = "auto") : (f = 133,
            g = 310)
        }
        var c = 80
          , d = 182.5
          , f = "auto"
          , g = "auto"
          , h = 15
          , j = 15
          , k = 15
          , l = 3;
        a(0),
        b.$on("gridster-resized", function() {
            a(0),
            b.dashboard2.options.gridsterOptions.rowHeight = d,
            b.dashboard1.options.gridsterOptions.colWidth = f,
            b.dashboard2.options.gridsterOptions.colWidth = g
        });
        var m = {
            margins: [0, 15],
            columns: 7,
            minColumns: 7,
            colWidth: f,
            rowHeight: c,
            outerMargin: !0,
            pushing: !1,
            floating: !1,
            mobileModeEnabled: !1,
            draggable: {
                enabled: !1
            },
            resizable: {
                enabled: !1
            }
        }
          , n = {
            margins: [15, 15],
            columns: 3,
            minColumns: 3,
            maxRows: 3,
            colWidth: g,
            rowHeight: d,
            outerMargin: !0,
            pushing: !1,
            floating: !1,
            mobileModeEnabled: !1,
            draggable: {
                enabled: !1
            },
            resizable: {
                enabled: !1
            }
        };
        b.dashboard1 = new e({
            popup: !0,
            gridsterOptions: m,
            config: []
        }),
        b.dashboard2 = new e({
            popup: !0,
            gridsterOptions: n,
            config: []
        });
        var o = i.getWidgetsList(b.dashboardType);
        angular.forEach(o.dashboard1, function(a) {
            b.dashboard1.addWidget(a)
        }),
        angular.forEach(o.dashboard2, function(a) {
            b.dashboard2.addWidget(a)
        })
    }
}
function tenantDashboardService(a, b, c, d) {
    var e, f, g, h, i, j, k, l, m, n = {
        DEVICE_LIST: "/dataservice/network/connectionssummary",
        VMANAGE_STATUS: "/dataservice/clusterManagement/health/summary",
        CONTROL_STATUS: "/dataservice/device/control/count?isCached=true",
        REBOOT_STATUS: "/dataservice/network/issues/rebootcount",
        TRANSPORT_HEALTH: "/dataservice/statistics/approute/transport/summary",
        DEVICE_HEALTH: "/dataservice/device/hardwarehealth/summary?isCached=true",
        SITE_HEALTH: "/dataservice/device/bfd/sites/summary?isCached=true",
        TOP_APPLICATIONS_DPI: "/dataservice/statistics/dpi/applications/summary?limit=10",
        TOP_APPLICATIONS_DPI_MODAL: "/dataservice/statistics/dpi/applications/summary?limit=25",
        TOP_APPLICATIONS_DPI_TEST: "/dataservice/statistics/dpi/doccount",
        TOP_APPLICATIONS_DPI_FIELDS: "dataservice/statistics/dpi/query/fields",
        TOP_APPLICATIONS_DPI_MODAL_DEVICE: "/dataservice/statistics/dpi/aggregation",
        TOP_APPLICATIONS_DPI_MODAL_DETAILS: "/dataservice/statistics/dpi/aggregation",
        TOP_APPLICATIONS_CFLOWD: "/dataservice/statistics/cflowd/applications/summary?limit=10",
        TOP_APPLICATIONS_CFLOWD_MODAL: "/dataservice/statistics/cflowd/applications/summary?limit=25",
        TOP_APPLICATIONS_CFLOWD_TEST: "/dataservice/statistics/cflowd/doccount",
        TOP_APPLICATIONS_CFLOWD_FIELDS: "dataservice/statistics/cflowd/query/fields",
        TOP_APPLICATIONS_CFLOWD_MODAL_DETAILS: "/dataservice/statistics/cflowd",
        VEDGE_INVENTORY: "/dataservice/device/vedgeinventory/summary",
        TLOCUtilDistribution: "/dataservice/device/tlocutil",
        APP_STATUS: "dataservice/statistics/approute/tunnels/summary",
        APP_STATUS_CHART: "dataservice/statistics/approute/tunnel",
        CERTIFICATE_SUMMARY: "/dataservice/certificate/stats/summary",
        CERTIFICATE_DETAILS: "dataservice/certificate/stats/detail",
        VPN_LIST: "dataservice/device/action/vpn",
        CRASH_DETAILS_FOR_DEVICE: "dataservice/device/crashlog/log",
        CRASH_LOG_DETAILS: "dataservice/device/crashlog/details"
    }, o = [{
        col: 0,
        row: 0,
        sizeY: 1,
        sizeX: 1,
        title: "Control Status",
        name: "controlStatus",
        widgetAPI: "getControlStatus",
        templateURL: "app/dashboard/tenantDashboard/partials/controlStatusWidget-partial.html",
        permissions: ["Device Monitoring"],
        eventsList: ["DEVICE"],
        eventsTypeList: ["sync"],
        eventWidgetUniqueID: "CONTROL_STATUS",
        loadingInProgress: !0
    }, {
        col: 1,
        row: 0,
        sizeY: 1,
        sizeX: 1,
        title: "Site Health View",
        name: "siteHealth",
        widgetAPI: "getSiteHealth",
        templateURL: "app/dashboard/tenantDashboard/partials/siteHealthWidget-partial.html",
        permissions: ["Device Monitoring"],
        eventsList: ["DEVICE"],
        eventsTypeList: ["sync"],
        eventWidgetUniqueID: "SITE_HEALTH_VIEW",
        loadingInProgress: !0
    }, {
        col: 2,
        row: 0,
        sizeY: 1,
        sizeX: 1,
        name: "TLOCUtil",
        title: "Transport Interface Distribution",
        widgetAPI: "getTLOCUtilDistribution",
        templateURL: "app/dashboard/tenantDashboard/partials/customListWidget-partial.html",
        permissions: ["Device Monitoring"],
        eventsList: [],
        eventWidgetUniqueID: "TRANSPORT_INTERFACE_DISTRIBUTION",
        loadingInProgress: !0
    }, {
        col: 0,
        row: 1,
        sizeY: 1,
        sizeX: 1,
        title: "vEdge Inventory",
        name: "vEdgeInventory",
        widgetAPI: "getvEdgeInventory",
        templateURL: "app/dashboard/tenantDashboard/partials/customListWidget-partial.html",
        permissions: ["Device Monitoring"],
        eventsList: ["DEVICE"],
        eventsTypeList: ["sync"],
        eventWidgetUniqueID: "VEDGE_INVENTORY",
        loadingInProgress: !0
    }, {
        col: 1,
        row: 1,
        sizeY: 1,
        sizeX: 1,
        title: "Device Health",
        name: "deviceHealth",
        widgetAPI: "getDeviceHealth",
        templateURL: "app/dashboard/tenantDashboard/partials/deviceHealthWidget-partial.html",
        permissions: ["Device Monitoring"],
        eventsList: ["DEVICE"],
        eventsTypeList: ["sync"],
        eventWidgetUniqueID: "VEDGE_HARDWARE_HEALTH",
        loadingInProgress: !0
    }, {
        col: 2,
        row: 1,
        sizeY: 1,
        sizeX: 1,
        title: "Transport Health",
        showSelectComponent: !0,
        type: "chart",
        name: "transportHealth",
        widgetAPI: "getTransportHealth",
        widgetAPIParams: "loss",
        templateURL: "app/dashboard/tenantDashboard/partials/transportHealthWidget-partial.html",
        permissions: [],
        eventsList: ["STATISTICS"],
        eventWidgetUniqueID: "TRANSPORT_HEALTH",
        loadingInProgress: !0
    }, {
        col: 0,
        row: 2,
        sizeY: 1,
        sizeX: 1,
        title: "Top Applications",
        name: "topApplications",
        type: "chart",
        widgetAPI: "getTopApplications",
        widgetAPIParams: "all",
        templateURL: "app/dashboard/tenantDashboard/partials/topApplicationsWidget-partial.html",
        permissions: ["Routing"],
        eventsList: ["STATISTICS"],
        eventWidgetUniqueID: "TOP_APPLICATIONS",
        loadingInProgress: !0
    }, {
        col: 1,
        row: 2,
        sizeY: 1,
        sizeX: 2,
        title: "Application-Aware Routing",
        showSelectComponent: !0,
        type: "table",
        name: "appRouteStats",
        widgetAPI: "getAppStats",
        widgetAPIParams: "loss",
        templateURL: "app/dashboard/tenantDashboard/partials/customTableWidget-partial.html",
        permissions: [],
        eventsList: ["STATISTICS"],
        eventWidgetUniqueID: "APPLICATION_AWARE_ROUTING",
        loadingInProgress: !0
    }], p = {
        dashboard1: [{
            col: 0,
            row: 0,
            sizeY: 1,
            sizeX: 5,
            name: "deviceList",
            widgetAPI: "getDeviceList",
            templateURL: "app/dashboard/tenantDashboard/partials/deviceListWidget-partial.html",
            permissions: ["Device Monitoring"],
            eventsList: ["DEVICE"],
            eventsTypeList: ["create", "delete", "update"],
            eventWidgetUniqueID: "DEVICE_LIST",
            loadingInProgress: !0
        }, {
            col: 5,
            row: 0,
            sizeY: 1,
            sizeX: 2,
            name: "rebootStatus",
            widgetAPI: "getRebootStatus",
            templateURL: "app/dashboard/tenantDashboard/partials/rebootWidget-partial.html",
            permissions: ["System", "Device Monitoring", "Device Reboot", "Software Upgrade"],
            eventsList: [],
            eventWidgetUniqueID: "REBOOT",
            loadingInProgress: !0
        }],
        dashboard2: o
    }, q = {
        dashboard1: [{
            col: 0,
            row: 0,
            sizeY: 1,
            sizeX: 4,
            name: "deviceList",
            widgetAPI: "getDeviceList",
            templateURL: "app/dashboard/tenantDashboard/partials/deviceListWidget-partial.html",
            permissions: ["Device Monitoring"],
            eventsList: ["DEVICE"],
            eventsTypeList: ["create", "delete", "update"],
            eventWidgetUniqueID: "DEVICE_LIST",
            loadingInProgress: !0
        }, {
            col: 4,
            row: 0,
            sizeY: 1,
            sizeX: 1,
            name: "vManageStatus",
            widgetAPI: "getvManageStatus",
            templateURL: "app/dashboard/tenantDashboard/partials/deviceListWidget-partial.html",
            permissions: ["Device Monitoring"],
            eventsList: ["CLUSTER"],
            eventsTypeList: ["sync"],
            eventWidgetUniqueID: "VMANAGE_CLUSTER",
            loadingInProgress: !0
        }, {
            col: 5,
            row: 0,
            sizeY: 1,
            sizeX: 1,
            name: "rebootStatus",
            widgetAPI: "getRebootStatus",
            templateURL: "app/dashboard/tenantDashboard/partials/rebootWidget-partial.html",
            permissions: ["System", "Device Monitoring", "Device Reboot", "Software Upgrade"],
            eventsList: [],
            eventWidgetUniqueID: "REBOOT",
            loadingInProgress: !0
        }, {
            col: 6,
            row: 0,
            sizeY: 1,
            sizeX: 1,
            name: "certificateManagement",
            widgetAPI: "getCertificateDetails",
            templateURL: "app/dashboard/tenantDashboard/partials/certificateWidget-partial.html",
            permissions: ["Certificates"],
            eventsList: ["CERTIFICATE"],
            eventWidgetUniqueID: "CERTIFICATE",
            loadingInProgress: !0
        }],
        dashboard2: o
    };
    return {
        getWidgetsList: function(a) {
            return "multiTenant-provider" === a.mode || "multiTenant-tenant" === a.mode ? p : "singleTenant" === a.mode ? q : void 0
        },
        getDeviceList: function() {
            return a.get(n.DEVICE_LIST)
        },
        getRebootStatus: function() {
            return a.get(n.REBOOT_STATUS)
        },
        getvManageStatus: function() {
            return a.get(n.VMANAGE_STATUS)
        },
        getControlStatus: function() {
            return a.get(n.CONTROL_STATUS)
        },
        getTransportHealthAPI: function(a) {
            return n.TRANSPORT_HEALTH + "/" + a + "?limit=5"
        },
        getDeviceHealth: function() {
            return a.get(n.DEVICE_HEALTH)
        },
        getSiteHealth: function() {
            return a.get(n.SITE_HEALTH)
        },
        getTopApplications: function(b) {
            return angular.isDefined(b) && "cflowd" === b ? a.get(n.TOP_APPLICATIONS_CFLOWD) : a.get(n.TOP_APPLICATIONS_DPI)
        },
        getAPIForTopApplications: function(a) {
            return angular.isDefined(a) && "cflowd" === a ? n.TOP_APPLICATIONS_CFLOWD : n.TOP_APPLICATIONS_DPI
        },
        getAPIForDPIDeviceInTopApplicationsModal: function() {
            return n.TOP_APPLICATIONS_DPI_MODAL_DEVICE
        },
        getAPIForDPIDeviceDetailsInTopApplicationsModal: function() {
            return n.TOP_APPLICATIONS_DPI_MODAL_DETAILS
        },
        getAPIForCFLOWDDeviceDetailsInTopApplicationsModal: function() {
            return n.TOP_APPLICATIONS_CFLOWD_MODAL_DETAILS
        },
        getAPIForTopApplicationsModal: function(a) {
            return angular.isDefined(a) && "cflowd" === a ? n.TOP_APPLICATIONS_CFLOWD_MODAL : n.TOP_APPLICATIONS_DPI_MODAL
        },
        getFieldsAPIForTopApplications: function(a) {
            return angular.isDefined(a) && "cflowd" === a ? n.TOP_APPLICATIONS_CFLOWD_FIELDS : n.TOP_APPLICATIONS_DPI_FIELDS;
        },
        getvEdgeInventory: function() {
            return a.get(n.VEDGE_INVENTORY)
        },
        getTLOCUtilDistribution: function() {
            return a.get(n.TLOCUtilDistribution)
        },
        getAppStats: function(b) {
            return b = angular.isDefined(b) && "" !== b ? b : "loss",
            e = n.APP_STATUS + "/" + b + "?limit=25",
            a.get(e)
        },
        getAppStatsUrl: function(a) {
            return a = angular.isDefined(a) && "" !== a ? a : "loss",
            e = n.APP_STATUS + "/" + a + "?limit=25"
        },
        getDeviceDetails: function(b) {
            return a.get(b)
        },
        getModalWidgetData: function(b) {
            return a.get(b)
        },
        getCertificateDetails: function() {
            return a.get(n.CERTIFICATE_SUMMARY)
        },
        getCertificateDetailsForModal: function(a) {
            return angular.isDefined(a) && a.length > 0 ? e = n.CERTIFICATE_DETAILS + "?status=" + a : n.CERTIFICATE_DETAILS
        },
        getVPNList: function() {
            return a.get(n.VPN_LIST)
        },
        getCrashDetailsForDevice: function(b, c) {
            return e = n.CRASH_DETAILS_FOR_DEVICE + "?deviceId=" + b + "&filename=" + c,
            a.get(e)
        },
        getCrashLogDetails: function() {
            return n.CRASH_LOG_DETAILS
        },
        getTransportHealthModalTabsAPI: function(a) {
            return n.TRANSPORT_HEALTH + "/" + a + "?limit=25"
        },
        getTransportHealthModalAPIForGridView: function(a) {
            return n.TRANSPORT_HEALTH + "/" + a + "?limit=25"
        },
        getTransportHealthModalAPIForChartView: function(a) {
            return n.TRANSPORT_HEALTH + "/" + a + "?limit=25"
        },
        getAppAwareRoutingModalAPIForChartView: function(a, b) {
            return n.APP_STATUS_CHART + "/" + a + "/summary?name=" + b
        },
        getAppAwareRoutingModalAPIForGridView: function(a) {
            return n.APP_STATUS + "/" + a + "?limit=25"
        },
        getTopApplicationsDPIFieldsData: function() {
            return f
        },
        getTopApplicationsDPIComponentsData: function() {
            return g
        },
        getTopApplicationsCFLOWDFieldsData: function() {
            return h
        },
        getTopApplicationsCFLOWDComponentsData: function() {
            return i
        },
        setTopApplicationsDPIFieldsData: function(a) {
            f = a
        },
        setTopApplicationsCFLOWDFieldsData: function(a) {
            h = a
        },
        setTopApplicationsDPIQueryURL: function(a) {
            l = a
        },
        setTopApplicationsCFLOWDQueryURL: function(a) {
            m = a
        },
        getTopApplicationsDPIQueryURL: function() {
            return l
        },
        getTopApplicationsCFLOWDQueryURL: function(a) {
            return m
        },
        setTopApplicationsCFLOWDComponentsData: function(a) {
            i = a
        },
        setTopApplicationsDPIComponentsData: function(a) {
            g = a
        },
        setTransportHealthComponentsData: function(a) {
            j = angular.copy(a)
        },
        getTransportHealthComponentsData: function() {
            return j
        },
        setTransportHealthQueryURL: function(a) {
            k = a
        },
        getTransportHealthQueryURL: function() {
            return k
        },
        getDropDownRBACPermissions: function() {
            return [{
                permission: "read",
                feature: "Device Monitoring"
            }, {
                permission: "read",
                feature: "Interface"
            }, {
                permission: "read",
                feature: "Policy"
            }, {
                permission: "read",
                feature: "Routing"
            }, {
                permission: "read",
                feature: "Security"
            }, {
                permission: "read",
                feature: "System"
            }]
        },
        getWidgetToEnable: function() {
            var c = b.defer();
            return a.get(n.TOP_APPLICATIONS_DPI_TEST).then(function(b) {
                angular.isDefined(b) && angular.isDefined(b.count) && b.count > 0 ? c.resolve("dpi") : a.get(n.TOP_APPLICATIONS_CFLOWD_TEST).then(function(a) {
                    angular.isDefined(a) && angular.isDefined(a.count) && a.count > 0 ? c.resolve("cflowd") : c.resolve("dpi")
                }, function() {
                    c.resolve("dpi")
                })
            }, function() {
                c.resolve("cflowd")
            }),
            c.promise
        },
        getFieldsDataForTopApplications: function(d) {
            var e, f, g = b.defer(), h = this;
            return angular.isDefined(d) && "dpi" === d ? (e = h.getTopApplicationsDPIFieldsData(),
            angular.isDefined(e) ? g.resolve(angular.copy(e)) : a.get(n.TOP_APPLICATIONS_DPI_FIELDS).then(function(a) {
                var b, c = a.data;
                b = _.findIndex(c, {
                    property: "application"
                }),
                b > -1 && (c[b].isHidden = !0),
                b = _.findIndex(c, {
                    property: "vdevice_name"
                }),
                b > -1 && (c[b].isHidden = !0),
                h.setTopApplicationsDPIFieldsData(c),
                g.resolve(c)
            })) : angular.isDefined(d) && "cflowd" === d ? (f = h.getTopApplicationsCFLOWDFieldsData(),
            angular.isDefined(f) ? g.resolve(angular.copy(f)) : a.get(n.TOP_APPLICATIONS_CFLOWD_FIELDS).then(function(a) {
                var b, c = a.data;
                b = _.findIndex(c, {
                    property: "dest_ip"
                }),
                b > -1 && (c[b].isHidden = !0),
                b = _.findIndex(c, {
                    property: "dest_port"
                }),
                b > -1 && (c[b].isHidden = !0),
                h.setTopApplicationsCFLOWDFieldsData(c),
                g.resolve(c)
            })) : c.error("Failed while getting fields data. Feature name is missing"),
            g.promise
        },
        formatFieldsData: function(a, b) {
            var c, d = angular.copy(a);
            switch (b) {
            case "dpi":
                c = _.findIndex(d, {
                    property: "application"
                }),
                c > -1 && d.splice(c, 1),
                c = _.findIndex(d, {
                    property: "vdevice_name"
                }),
                c > -1 && d.splice(c, 1);
                break;
            case "cflowd":
                c = _.findIndex(d, {
                    property: "dest_ip"
                }),
                c > -1 && d.splice(c, 1),
                c = _.findIndex(d, {
                    property: "dest_port"
                }),
                c > -1 && d.splice(c, 1)
            }
            return d
        },
        formatTimeFieldForTopApplicationsView: function(a, b) {
            var c, d, e;
            switch (c = _.findIndex(a, {
                property: "entry_time"
            }),
            c > -1 && (d = a[c]),
            b) {
            case "dpi":
                angular.isDefined(d) && (e = _.filter(d.options, function(a) {
                    if ("last_168_hours" !== a.key && "custom" !== a.key)
                        return a
                }),
                d.options = e);
                break;
            case "cflowd":
                angular.isDefined(d) && (e = _.filter(d.options, function(a) {
                    if ("last_1_hour" === a.key)
                        return a
                }),
                d.options = e)
            }
            return a
        },
        formatTimeFieldForTransportHealth: function(a) {
            var b, c, d;
            return b = _.findIndex(a, {
                property: "entry_time"
            }),
            b > -1 && (c = a[b],
            angular.isDefined(c) && (d = _.filter(c.options, function(a) {
                if ("custom" !== a.key)
                    return a
            }),
            c.options = d)),
            a
        },
        computeTableHeightOffset: function(a, b, c) {
            var e = 0
              , f = 40
              , g = 35
              , h = 40
              , i = 50
              , j = 70;
            switch (a) {
            case "shareModalVertically":
                return e = f + g + h + j + b,
                angular.isDefined(c) ? e + i + c : e + i;
            case "shareModalHorizontally":
                var k = d.getAppContentHeight() - f - b
                  , l = (k - h) / 2;
                e = f + g + h + l + b + j;
                break;
            case "fullModalHeight":
            case "default":
                e = f + g + h + j + b,
                angular.isDefined(c) && (e += c)
            }
            return e
        }
    }
}
function DashboardModalFactory(a, b, c, d, e, f, g, h, i, j, k, l, m) {
    function n(a, c, d) {
        if ("topApplications" === a.widget.name && (a.showModalDropDown = !1,
        a.showModalToggleButton = !0,
        a.showModalQueryBuilder = !0,
        a.defaultModalWidgetToggleState = a.defaultWidgetToggleState,
        "dpi" === a.defaultWidgetToggleState ? a.updateViewPort("dpiApplicationOverView") : "cflowd" === a.defaultWidgetToggleState && a.updateViewPort("cflowdDeviceOverView"),
        i.setFilterCurrentState(angular.copy(b.getTopApplicationsDPIComponentsData())),
        i.setFilterOriginalState(angular.copy(a.queryBuilderObjForDPI.getOriginalComponents())),
        j.setFilterCurrentState(angular.copy(b.getTopApplicationsCFLOWDComponentsData())),
        j.setFilterOriginalState(angular.copy(a.queryBuilderObjForCFLOWD.getOriginalComponents()))),
        "transportHealth" === a.widget.name) {
            angular.copy(a.routingFilterTypes, a.routingModalFilterTypes);
            var e = _.find(a.routingFilterTypes, {
                key: a.transportHealthFilterSelected.key
            });
            angular.isDefined(e) || (e = a.routingFilterTypes[0]),
            a.transportHealthModalFilterSelected = e,
            a.showRoutingFilter = !0
        }
    }
    function o(a, e, f) {
        var g, h, i, j, k, l, m = this;
        if (a.localHandlerFn = function() {
            return a.closeModal()
        }
        ,
        a.tableObj = new c({
            autoLoad: !0,
            singleSelect: !1,
            columnResizing: !0,
            enableSorting: !0,
            tableHeightOffset: angular.isArray(e) ? m.computeTableHeightOffset("shareModalVertically", a.dashboardModalHeightOffset) : m.computeTableHeightOffset("fullModalHeight", a.dashboardModalHeightOffset)
        }),
        a.tableObj.setToolbar({
            addRow: !1,
            search: !0,
            rowCount: !0,
            refresh: !0
        }),
        a.$on("windowResizeEvent", function() {
            var b = angular.isArray(e) ? m.computeTableHeightOffset("shareModalVertically", a.dashboardModalHeightOffset) : m.computeTableHeightOffset("fullModalHeight", a.dashboardModalHeightOffset);
            a.tableObj.options.tableHeightOffset = b,
            angular.isDefined(a.tableObj2) && (a.tableObj2.options.tableHeightOffset = b)
        }),
        a.modalHasChart = !1,
        "rebootTable" === f) {
            a.tableObj.name = "reboot",
            a.tableObj2 = new c({
                autoLoad: !0,
                columnResizing: !0,
                enableSorting: !0,
                singleSelect: !0,
                tableHeightOffset: m.computeTableHeightOffset("shareModalVertically", a.dashboardModalHeightOffset)
            }),
            a.tableObj2.name = "crash",
            a.tableObj2.setToolbar({
                addRow: !1,
                search: !0,
                rowCount: !0,
                refresh: !0
            });
            var n = {
                type: "View Crash Details",
                open: "modal",
                templateUrl: "app/dashboard/tenantDashboard/widgetDetails/partials/crashDetails-partial.html",
                controller: "crashDetailsController"
            };
            a.tableObj2.setHoverAction([n]),
            a.tabs = [{
                title: "Reboots",
                tableObj: a.tableObj,
                active: !0,
                loaded: !1
            }, {
                title: "Crashes",
                tableObj: a.tableObj2,
                active: !1,
                loaded: !1
            }]
        } else
            "deviceDetailsTable" === f ? (j = new d({
                localViewHandler: a.localHandlerFn,
                multiTenancyMode: a.dashboardType.mode
            }),
            g = j.getDeviceActionDropDownObj()) : "deviceDetailsTable-customControlConnectionsRow" === f ? (j = new d({
                multiTenancyMode: a.dashboardType.mode
            }),
            g = j.getDeviceActionDropDownObj()) : "deviceDetailsTable-customHardwareEnvironmentRow" === f ? (k = {
                type: "redirect"
            },
            l = b.getDropDownRBACPermissions(),
            j = new d({
                localViewHandler: a.localHandlerFn,
                customDropDownList: [{
                    title: "Hardware Environment",
                    option: "Hardware Environment",
                    url: "app.monitor.devices.dashboard.hardware_health",
                    clickActionObj: k,
                    rbacPermissions: l
                }]
            }),
            g = j.getDeviceActionDropDownObj(),
            _.remove(g, {
                type: "Device Dashboard"
            })) : "transportHealthView" === f && (a.tabs = [{
                title: "Chart",
                active: !0,
                loaded: !1
            }, {
                title: "Details",
                tableObj: a.tableObj,
                active: !1,
                loaded: !1
            }]);
        angular.isArray(e) ? m.handleMultiplePromises(a, e, f) : m.handleSinglePromise(a, e, f, g, h, i)
    }
    function p(a) {
        angular.isObject(a) && h.checkNestedProperty(a, "error", "details") ? (k.error("Error occurred while retrieving data: " + a.error.message + ":" + a.error.details),
        l.error(a.error.message + ": " + a.error.details)) : (k.info("API error response needs to be updated to conform to company guidelines"),
        l.error("Error occurred while retrieving data."))
    }
    var q = {}
      , r = function(b) {
        this.config = angular.merge({}, q, b),
        a.apply(this, this.config),
        this.computeTableHeightOffset = function(a, b, c) {
            var d = 0
              , e = 40
              , f = 35
              , g = 40
              , h = 50
              , i = 70;
            switch (a) {
            case "shareModalVertically":
                return d = e + f + g + i + b,
                angular.isDefined(c) ? d + h + c : d + h;
            case "shareModalHorizontally":
                var j = m.getAppContentHeight() - e - b
                  , k = (j - g) / 2;
                d = e + f + g + k + b + i;
                break;
            case "fullModalHeight":
            case "default":
                d = e + f + g + i + b,
                angular.isDefined(c) && (d += c)
            }
            return d
        }
    };
    return r.prototype = Object.create(a.prototype),
    r.prototype.constructor = r,
    r.prototype.handleSinglePromise = function(a, c, d, e, f, h) {
        b.getModalWidgetData(c).then(function(b) {
            angular.isDefined(b.header.columns) && angular.isDefined(b.data) && (a.tableObj.createColumns(b.header.columns),
            a.tableObj.setTableData(b.data),
            a.tableObj.setDataUrl(c),
            angular.isDefined(e) && e.length > 0 ? (a.tableObj.options.singleSelect = !0,
            a.tableObj.setHoverAction(e),
            a.tableObj.setSingleSelect()) : a.tableObj.options.singleSelect = !1,
            angular.isDefined(f) && f.length > 0 && angular.isDefined(h) && h.length > 0 && (a.tableObj.rowTemplate = h,
            a.tableObj.setAppScope(f)),
            g(function() {
                a.tableObj.uiGridApi.selection.selectRow && a.tableObj.uiGridApi.selection.selectRow(a.tableObj.data[0])
            }))
        }, function(a) {
            p(a)
        })
    }
    ,
    r.prototype.handleMultiplePromises = function(a, c, d) {
        b.getModalWidgetData(c[0]).then(function(b) {
            if ("rebootTable" === d) {
                a.tabs[0].tableObj.createColumns(b.header.columns);
                var e = h.getSearchPropertiesForCols(a.tabs[0].tableObj.columnDefs);
                a.tabs[0].tableObj.taggedSearchObject.setSearchProperties(e),
                a.tabs[0].tableObj.setTableData(b.data),
                a.tabs[0].tableObj.setDataUrl(c[0]),
                g(function() {
                    a.tabs[0].tableObj.uiGridApi.selection.selectRow && a.tabs[0].tableObj.uiGridApi.selection.selectRow(a.tabs[0].tableObj.data[0])
                })
            }
            a.tabs[0].loaded = !0
        }, function(b) {
            a.tabs[0].loaded = !0,
            p(b)
        }),
        b.getModalWidgetData(c[1]).then(function(b) {
            if ("rebootTable" === d) {
                a.tabs[1].tableObj.createColumns(b.header.columns);
                var e = h.getSearchPropertiesForCols(a.tabs[1].tableObj.columnDefs);
                a.tabs[1].tableObj.taggedSearchObject.setSearchProperties(e),
                a.tabs[1].tableObj.setTableData(b.data),
                a.tabs[1].tableObj.setDataUrl(c[1])
            }
            g(function() {
                a.tabs[1].tableObj.uiGridApi.selection.selectRow && a.tabs[1].tableObj.uiGridApi.selection.selectRow(a.tabs[1].tableObj.data[0])
            }),
            a.tabs[1].loaded = !0
        }, function(b) {
            a.tabs[1].loaded = !0,
            p(b)
        })
    }
    ,
    r.prototype.openModal = function(a, b) {
        var c = this;
        if (a.modalWidgetTitle = c.config.widgetName,
        a.showRoutingFilter = !1,
        n(a, c.config.modalDetailsUrl, c.config.tableCustomizationType),
        angular.isDefined(c.config.controller)) {
            var d = {
                templateUrl: c.config.modalTemplate,
                controller: c.config.controller,
                targetEvent: b,
                onRemoving: function() {
                    a.refreshParentWidgetOnModalClose()
                }
            };
            "appRouteStatsView" === c.config.tableCustomizationType ? d.resolve = {
                parentWidgetParams: function() {
                    return {
                        modalWidgetTitle: a.modalWidgetTitle,
                        tunnelEndPointSelected: a.tunnelEndPointName,
                        chartSelection: a.routingFilterSelected.key
                    }
                }
            } : "TLOCUtilPercentage" === c.config.tableCustomizationType ? d.preserveScope = !1 : (d.scope = a,
            d.preserveScope = !0),
            a.modalInstance = f.show(d)
        } else
            "topApplicationsView" !== this.config.tableCustomizationType && o.call(c, a, c.config.modalDetailsUrl, c.config.tableCustomizationType),
            a.modalInstance = f.show({
                templateUrl: c.config.modalTemplate,
                scope: a,
                preserveScope: !0,
                targetEvent: b
            })
    }
    ,
    r
}
function widgetDetails(a, b, c, d, e, f, g) {
    return {
        restrict: "A",
        link: function(d) {
            d.dashboardModalHeightOffset = 75,
            d.modalHeight = e.getAppContentHeight() + 40 - d.dashboardModalHeightOffset,
            d.modalDetailsUrl = "",
            d.routingModalFilterTypes = [],
            d.routingModalFilterSelected = {},
            d.applicationModalFilterTypes = [],
            d.applicationModalFilterSelected = {},
            d.openWidgetDetailsModal = function(b, c, e, f, g, h) {
                return !!(angular.isDefined(b) && angular.isDefined(e) && angular.isDefined(f)) && void (angular.isDefined(g) ? (d.dashboardModalFactory = new a({
                    modalDetailsUrl: b,
                    widgetName: c,
                    modalTemplate: e,
                    controller: g,
                    tableCustomizationType: f
                }),
                d.dashboardModalFactory.openModal(d, h)) : (d.dashboardModalFactory = new a({
                    modalDetailsUrl: b,
                    widgetName: c,
                    modalTemplate: e,
                    tableCustomizationType: f
                }),
                d.dashboardModalFactory.openModal(d, h)))
            }
            ,
            d.closeModal = function() {
                g.hide()
            }
            ,
            d.updateActiveTab = function(a, d) {
                angular.forEach(a, function(a) {
                    a.active = !1
                }),
                a[d].active = !0,
                "Chart" === a[0].title && c(function() {
                    b.$broadcast("highchartsng.reflow")
                }, 2)
            }
            ,
            d.getItemName = function(a) {
                return angular.isDefined(a) && "" !== a && (a = a.replace(/ - /g, "_"),
                a = a.replace(/ /g, "_"),
                a = a.replace(/-/g, ""),
                a = a.split("(").join(""),
                a = a.split(")").join(""),
                a = a.split("/").join("_")),
                a
            }
            ,
            d.getCursorStatus = function(a, b) {
                return a > 0 && b ? "enableClick" : b ? "noDataToClick" : "notAllowedToClick"
            }
            ,
            d.updateModalWidgetDataOnToggle = function(a, b) {
                d.defaultModalWidgetToggleState !== b && (d.defaultModalWidgetToggleState = b,
                "topApplications" === a && ("cflowd" === b ? d.updateViewPort("cflowdDeviceOverView") : "dpi" === b && d.updateViewPort("dpiApplicationOverView")))
            }
            ,
            d.updateViewPort = function(a) {
                d.viewport = a
            }
            ,
            d.openRebootCrashTable = function(a) {
                f.params.localSystemIp,
                f.params.personality;
                "rebootStatus" === a ? f.go("app.monitor.devices.dashboard.reboot", f.params) : "crashStatus" === a && f.go("app.monitor.devices.dashboard.crash", f.params)
            }
            ,
            d.$on("$destroy", function() {
                angular.isDefined(d.modalInstance) && d.closeModal()
            })
        }
    }
}
function StatusService(a) {
    var b = "/dataservice/device/action/status/"
      , c = "/dataservice/device/action/status/cancel/"
      , d = {
        REBOOT: {
            name: "Reboot",
            endpoint: "reboot",
            feature: "Device Reboot"
        },
        INSTALL: {
            name: "Install",
            endpoint: "software_install",
            feature: "Software Upgrade"
        },
        CHANGE_PARTITION: {
            name: "Change Partition",
            endpoint: "change_partition",
            feature: "Software Upgrade"
        },
        SET_DEFAULT: {
            name: "Set Default Version",
            endpoint: "default_partition",
            feature: "Software Upgrade"
        },
        DELETE_PARTITION: {
            name: "Delete Partition",
            endpoint: "delete_partition",
            feature: "Software Upgrade"
        },
        PUSH_FEATURE_TEMPLATE_CONFIG: {
            name: "Push Feature Template Configuration",
            endpoint: "push_feature_template_configuration",
            feature: "Template Deploy"
        },
        PUSH_FILE_TEMPLATE_CONFIG: {
            name: "Push Configuration",
            endpoint: "push_file_template_configuration",
            feature: "Template Deploy"
        },
        VSMART_POLICY_CONFIG: {
            name: "Push vSmart Policy",
            endpoint: "vsmart_policy_config",
            feature: "Policy Deploy"
        },
        PUSH_VSMART_LIST: {
            name: "Push vSmart List",
            endpoint: "push_vsmart_list",
            feature: "Certificates"
        },
        VEDGE_POLICY_CONFIG: {
            name: "Push vEdge Policy",
            endpoint: "vedge_policy_config",
            feature: "Policy Deploy"
        },
        PUSH_VEDGE_LIST: {
            name: "Push vEdge List",
            endpoint: "push_vedge_list",
            feature: "Certificates"
        },
        DEVICE_CONFIG_MODE_CLI: {
            name: "Device config mode - CLI",
            endpoint: "device_config_mode_cli",
            feature: "Device Inventory"
        },
        ZTP: {
            name: "ZTP Software Upgrade",
            endpoint: "ztp_install",
            feature: "Software Upgrade"
        },
        SYNC: {
            name: "Sync device",
            endpoint: "sync",
            feature: "Tools"
        },
        SYNC_ALL: {
            name: "Sync all device",
            endpoint: "syncall",
            feature: "Tools"
        },
        REDISCOVER_DEVICE: {
            name: "Rediscover",
            endpoint: "rediscover",
            feature: "Tools"
        },
        INSTALL_CERTIFICATE: {
            name: "Install Certificate",
            endpoint: "install_certificate",
            feature: "Certificates"
        },
        INVALIDATE_DEVICE: {
            name: "Invalidate Device",
            endpoint: "invalidate_device",
            feature: "Certificates"
        },
        CLUSTER_SYNC: {
            name: "Cluster Sync",
            endpoint: "cluster_sync",
            feature: "Cluster"
        },
        RESTART: {
            name: "Process Restart",
            endpoint: "restart",
            feature: "Cluster"
        },
        REBALANCE: {
            name: "Rebalance",
            endpoint: "rebalance",
            feature: "Cluster"
        },
        CREATE_TENANT: {
            name: "Creat Tenant",
            endpoint: "default",
            feature: "Tenant Management"
        },
        CREATE_TRANSIT_VPC: {
            name: "Create Transit VPC",
            endpoint: "create_transit_vpc",
            feature: "Cloud OnRamp"
        }
    };
    return {
        getStatusUrl: function() {
            return b
        },
        getStatusAction: function(a) {
            return d[a]
        },
        getStatusActionByEndpoint: function(a) {
            angular.equals(a, "install") && (a = "software_install");
            for (var b in d)
                if (angular.equals(d[b].endpoint, a))
                    return d[b]
        },
        getStatusEndpoint: function(a) {
            angular.equals(a, "install") && (a = "software_install");
            for (var b in d)
                if (angular.equals(d[b].endpoint, a))
                    return d[b].endpoint
        },
        getStatusTitle: function(a) {
            for (var b in d)
                if (angular.equals(d[b].endpoint, a))
                    return d[b].name
        },
        getDeviceStatus: function(b) {
            return a.getTableData(b)
        },
        stopScheduledTasks: function(b) {
            return a.post(c + b)
        }
    }
}
function maintenanceService(a, b, c, d, e) {
    var f = {
        timeout: 3e5
    };
    return {
        rediscoverDevice: function(a) {
            var b = {
                action: "rediscover",
                devices: a
            };
            return d.post(e.REDISCOVER, b)
        },
        rebootDevice: function(a, b) {
            var c = {
                action: "reboot",
                deviceType: b,
                devices: a
            };
            return d.post(e.REBOOT, c)
        },
        upgradeSoftware: function(a, b, g) {
            c.info("Upgrade Software Service called:");
            var h = {
                action: "install",
                input: g,
                devices: a,
                deviceType: b
            };
            return d.post(e.SOFTWARE_UPGRADE, h, f)
        },
        changePartition: function(a, b) {
            var c = {
                action: "changepartition",
                devices: a,
                deviceType: b
            };
            return d.post(e.CHANGE_PARTITION, c, f)
        },
        deleteAvailableSoftware: function(a, b) {
            var c = {
                action: "removepartition",
                devices: a,
                deviceType: b
            };
            return d.post(e.DELETE_SOFTWARE, c, f)
        },
        setDefault: function(a, b) {
            var c = {
                action: "defaultpartition",
                devices: a,
                deviceType: b
            };
            return d.post(e.SET_DEFAULT, c, f)
        },
        addNewSwFromRemoteServer: function(a) {
            return d.post(e.ADD_NEW_SW_REMOTE_SERVER, a)
        },
        filesUpload: function(a, b, c, f) {
            return d.uploadFiles(e.FILE_UPLOAD, a, b, c, null, f)
        },
        deleteRepositoryEntry: function(a) {
            return d.delete(e.REPOSITORY + a)
        },
        getRepositoryEntries: function() {
            return d.get(e.REPOSITORY)
        },
        getDeviceStatus: function(a) {
            return d.getTableData(e.DEVICE_STATUS + a)
        },
        getVpnList: function(a) {
            return d.post(e.VPN_LIST, a)
        },
        getStatusSummary: function() {
            return d.get(e.STATUS_SUMMARY)
        },
        getDeviceGroups: function() {
            return d.get(e.DEVICE_GROUPS)
        },
        getArrayOfObjects: function(a, b, c) {
            for (var d = [], e = 0; e < a.length; e++) {
                var f = {};
                f[b] = a[e][c],
                d.push(f)
            }
            return d
        },
        getZTPDetails: function() {
            return d.get(e.ZTP_DETAILS)
        },
        getControllerVersions: function() {
            var a = b.defer()
              , c = d.get(e.CONTROLLER_VERSION_LIST)
              , f = d.get(e.VMANAGE_VERSION_LIST);
            return b.all([c, f]).then(function(b) {
                var c = b[0]
                  , d = b[1];
                if (c.data.length > 0 || d.data.length > 0) {
                    var e = [];
                    angular.forEach(c.data, function(a) {
                        e.push(a["current-partition"])
                    }),
                    angular.forEach(d.data, function(a) {
                        e.push(a["current-partition"])
                    })
                }
                a.resolve(_.uniq(e))
            }, function(b) {
                a.reject(b)
            }),
            a.promise
        },
        getvManageVersions: function() {
            var a = b.defer();
            return d.get(e.VMANAGE_VERSION_LIST).then(function(b) {
                if (b.data.length > 0) {
                    var c = [];
                    angular.forEach(b.data, function(a) {
                        c.push(a["current-partition"])
                    })
                }
                a.resolve(_.uniq(c))
            }, function(b) {
                a.reject(b),
                c.error("Error occurred while retrieving vManage versions: " + b.error.message + ":" + b.error.details),
                c.error(b.error.message + ": " + b.error.details, 1e4)
            }),
            a.promise
        },
        getImageCount: function() {
            return d.get(e.IMAGE_COUNT)
        }
    }
}
function RebootController(a, b, c, d, e, f, g, h, i, j) {
    a.stateString = g.getStateString(b);
    var k = 158
      , l = !1;
    e.checkSidebarState() && e.allowAccess("Device Reboot") && (l = !0,
    k = 198),
    a.showErrorSection = !1,
    a.errorMessage = "",
    a.popoverAlert = !1,
    a.popoverElem = {
        placement: "",
        text: "",
        changeCounter: 0
    };
    var m = e.getUserMode();
    a.tabs = [],
    "provider" === m.mode ? a.tabs.push({
        tabTitle: "Controller",
        active: "/controller" === b.current.url,
        states: "app.maintenance.reboot.controller"
    }, {
        tabTitle: "vManage",
        active: "/vmanage" === b.current.url,
        states: "app.maintenance.reboot.vmanage"
    }) : "multiTenant-provider" === m.mode ? a.tabs.push({
        tabTitle: "Controller",
        active: "/controller" === b.current.url,
        states: "app.maintenance.reboot.controller"
    }, {
        tabTitle: "vEdge",
        active: "/vedge" === b.current.url,
        states: "app.maintenance.reboot.vedge"
    }) : "multiTenant-tenant" === m.mode ? a.tabs.push({
        tabTitle: "vEdge",
        active: "/vedge" === b.current.url,
        states: "app.maintenance.reboot.vedge"
    }) : a.tabs.push({
        tabTitle: "vEdge",
        active: "/vedge" === b.current.url,
        states: "app.maintenance.reboot.vedge"
    }, {
        tabTitle: "Controller",
        active: "/controller" === b.current.url,
        states: "app.maintenance.reboot.controller"
    }, {
        tabTitle: "vManage",
        active: "/vmanage" === b.current.url,
        states: "app.maintenance.reboot.vmanage"
    }),
    a.open = function(e) {
        var f = a.table.uiGridApi.selection.getSelectedRows()
          , g = {
            deviceType: {},
            numOfDevices: a.table.data.length
        };
        if ("/vedge" === b.current.url)
            g.deviceType = "vedge";
        else if ("/controller" === b.current.url)
            g.deviceType = "controller";
        else if ("/vmanage" === b.current.url && (g.deviceType = "vmanage",
        f.length > 1)) {
            var h = {
                error: {
                    message: "Invalid number of selection",
                    details: "vManage can only be rebooted one at a time.",
                    type: "warning"
                }
            };
            return j.confirm(h, null),
            !1
        }
        c.show({
            templateUrl: "app/maintenance/softwareReboot/rebootConfirmation.html",
            controller: "softwareRebootConfirmationCtrl",
            targetEvent: e,
            resolve: {
                selectedRow: function() {
                    return f
                },
                device: function() {
                    return g
                }
            }
        }).then(function(b) {
            a.selected = b
        }, function() {
            d.info("Modal dismissed at: " + new Date)
        })
    }
    ;
    var n = new f({
        columnResizing: !0,
        enableSorting: !0,
        tableHeightOffset: k,
        dataUid: "system-ip",
        autoLoad: !0,
        isRowSelectable: function(a) {
            return !angular.equals(a.entity.reachability, "unreachable")
        }
    });
    l && (n.options.multiSelect = !0),
    n.setLocalActions({
        title: "Reboot",
        icon: "refresh",
        rbac: "Device Reboot",
        precheck: "",
        action: a.open
    }),
    n.setDataSourceFilter("Device Group", h.DEVICE_GROUPS),
    n.dataSourceFilter.setOptionsKeys({
        value: "groupName",
        key: "groupId"
    }),
    n.dataSourceFilter.setOnSelectionChangeFunc(function() {
        var b = this;
        a.table.taggedSearchObject.clearSearchCache(),
        a.table.uiGridApi.grid.selection.selectAll = !1,
        a.table.loadDataFromUrl(i + "?groupId=" + b.selectedOption.key)
    }),
    a.table = n,
    a.$on("$destroy", function() {})
}
function addNewSwFromRemoteServerController(a, b, c, d, e, f, g) {
    b.stateString = f.getStateString(d),
    b.showErrorSection = !1,
    b.inputVersionName = "",
    b.inputUrl = "",
    b.serverCall = !1,
    b.hideActionButtons = !1,
    b.add = function() {
        var a = {
            versionName: b.inputVersionName,
            versionURL: b.inputUrl
        };
        b.serverCall = !0,
        b.hideActionButtons = !0,
        g.addNewSwFromRemoteServer(a).then(function(a) {
            c.hide(),
            b.serverCall = !1
        }, function(a, c, d, f) {
            e.error("error occurred"),
            b.showErrorSection = !0,
            b.errorMessage = a,
            b.serverCall = !1,
            b.hideActionButtons = !1
        })
    }
    ,
    b.cancel = function() {
        c.cancel("cancel"),
        b.serverCall = !1
    }
}
function addNewSwFromRemotevManageController(a, b, c, d, e, f, g, h, i, j) {
    a.stateString = f.getStateString(c);
    var k = [];
    a.showProgressBar = !1,
    a.showErrorSection = !1,
    a.disableFileChooser = !1,
    a.incorrectVedgeFileName = !1,
    a.incorrectVsmartFileName = !1,
    a.incorrectVmanageFileName = !1,
    a.progressBar = {},
    a.progressBar.currentProgress = 0,
    a.hideActionButtons = !1,
    a.fileVedge = void 0,
    a.fileVsmart = void 0,
    a.fileVmanage = void 0,
    a.imageVersionMismatch = !1,
    a.addSuccessful = !1,
    a.confirmAdd = !1,
    a.uploadInprogress = !1,
    a.vedgeFileSelect = function() {
        angular.isDefined(a.fileVedge) && !_.isNull(a.fileVedge) ? angular.isDefined(a.fileVedge.name) && !i.validateSoftwareImageName(a.fileVedge.name, j.VEDGE) && (a.incorrectVedgeFileName = !0) : a.incorrectVedgeFileName = !1
    }
    ,
    a.vsmartFileSelect = function() {
        angular.isDefined(a.fileVsmart) && !_.isNull(a.fileVsmart) ? angular.isDefined(a.fileVsmart.name) && !i.validateSoftwareImageName(a.fileVsmart.name, j.VSMART) && (a.incorrectVsmartFileName = !0) : a.incorrectVsmartFileName = !1
    }
    ,
    a.vmanageFileSelect = function() {
        angular.isDefined(a.fileVmanage) && !_.isNull(a.fileVmanage) ? angular.isDefined(a.fileVmanage.name) && !i.validateSoftwareImageName(a.fileVmanage.name, j.VMANAGE) && (a.incorrectVmanageFileName = !0) : a.incorrectVmanageFileName = !1
    }
    ,
    a.add = function() {
        k = [],
        a.showErrorSection = !1,
        a.disableFileChooser = !1,
        a.incorrectVedgeFileName = !1,
        a.incorrectVsmartFileName = !1,
        a.incorrectVmanageFileName = !1,
        a.imageVersionMismatch = !1;
        var b = ""
          , c = ""
          , d = ""
          , e = ""
          , g = !1
          , h = "";
        a.fileVedge || a.fileVsmart || a.fileVmanage || (g = !0),
        f.checkNestedProperty(a.fileVedge, "name") && (i.validateSoftwareImageName(a.fileVedge.name, j.VEDGE) ? (b = a.fileVedge.name.replace(/viptela-/, "").replace(/-mips64.tar.(gz|bz2)/, ""),
        "" != e && b != e && (a.imageVersionMismatch = !0),
        e = b,
        h += "Selected vedge version:&nbsp;&nbsp" + b.toString() + "<br>",
        k.push(a.fileVedge),
        a.fileVedgeName = a.fileVedge.name) : a.incorrectVedgeFileName = !0),
        f.checkNestedProperty(a.fileVsmart, "name") && (i.validateSoftwareImageName(a.fileVsmart.name, j.VSMART) ? (c = a.fileVsmart.name.replace(/viptela-/, "").replace(/-x86_64.tar.(gz|bz2)/, ""),
        "" != e && c != e && (a.imageVersionMismatch = !0),
        e = c,
        h += "Selected vsmart version:&nbsp;&nbsp" + c.toString() + "<br>",
        k.push(a.fileVsmart),
        a.fileVsmartName = a.fileVsmart.name) : a.incorrectVsmartFileName = !0),
        f.checkNestedProperty(a.fileVmanage, "name") && (i.validateSoftwareImageName(a.fileVmanage.name, j.VMANAGE) ? (d = a.fileVmanage.name.replace(/vmanage-/, "").replace(/-x86_64.tar.(gz|bz2)/, ""),
        "" != e && d != e && (a.imageVersionMismatch = !0),
        e = d,
        h += "Selected vmanage version:&nbsp;&nbsp" + d.toString() + "<br>",
        k.push(a.fileVmanage),
        a.fileVmanageName = a.fileVmanage.name) : a.incorrectVmanageFileName = !0),
        a.incorrectVedgeFileName || a.incorrectVsmartFileName || a.incorrectVmanageFileName || g ? ($(".confirmation-popover").remove(),
        g && (a.showErrorSection = !0,
        a.errorMessage = f.createErrorObject("No software image selected", "Please select at least one software image to upload"))) : a.imageVersionMismatch ? (a.confirmContent = {
            message: "Selected images are of different versions. Are you sure you want to upload?"
        },
        a.confirmAdd = !0) : a.doUpload()
    }
    ,
    a.$watch("fileVedge", function(b, c) {
        _.isNull(b) ? a.incorrectVedgeFileName = !1 : a.showErrorSection = !1
    }),
    a.$watch("fileVsmart", function(b, c) {
        _.isNull(b) ? a.incorrectVsmartFileName = !1 : a.showErrorSection = !1
    }),
    a.$watch("fileVmanage", function(b, c) {
        _.isNull(b) ? a.incorrectVmanageFileName = !1 : a.showErrorSection = !1
    }),
    a.doUpload = function() {
        var c = 108e5;
        a.hideActionButtons = !0,
        a.showProgressBar = !0,
        a.disableFileChooser = !0,
        a.uploadInprogress = !0;
        var e = {
            vmanageHost: a.vmanageHostname,
            enableVManageAsRemote: !0
        };
        g.filesUpload(k, a.progressBar, c, e).then(function(a) {
            h.success("Software images uploaded successfully"),
            b.hide()
        }, function(b, c, e, f) {
            d.error("error occurred: Files upload failed"),
            a.showErrorSection = !0,
            a.errorMessage = b,
            a.hideActionButtons = !1,
            a.disableFileChooser = !1
        })
    }
    ,
    a.cancel = function() {
        $(".confirmation-popover").remove(),
        b.cancel("cancel")
    }
}
function addNewSwFromVmanageController(a, b, c, d, e, f, g, h, i, j) {
    a.stateString = f.getStateString(c);
    var k = [];
    a.showProgressBar = !1,
    a.showErrorSection = !1,
    a.disableFileChooser = !1,
    a.incorrectVedgeFileName = !1,
    a.incorrectVsmartFileName = !1,
    a.incorrectVmanageFileName = !1,
    a.progressBar = {},
    a.progressBar.currentProgress = 0,
    a.hideActionButtons = !1,
    a.fileVedge = void 0,
    a.fileVsmart = void 0,
    a.fileVmanage = void 0,
    a.imageVersionMismatch = !1,
    a.addSuccessful = !1,
    a.confirmAdd = !1,
    a.uploadInprogress = !1,
    a.vedgeFileSelect = function() {
        f.checkNestedProperty(a.fileVedge, "name") && (i.validateSoftwareImageName(a.fileVedge.name, j.VEDGE) ? a.incorrectVedgeFileName = !1 : a.incorrectVedgeFileName = !0)
    }
    ,
    a.vsmartFileSelect = function() {
        f.checkNestedProperty(a.fileVsmart, "name") && (i.validateSoftwareImageName(a.fileVsmart.name, j.VSMART) ? a.incorrectVsmartFileName = !1 : a.incorrectVsmartFileName = !0)
    }
    ,
    a.vmanageFileSelect = function() {
        f.checkNestedProperty(a.fileVmanage, "name") && (i.validateSoftwareImageName(a.fileVmanage.name, j.VMANAGE) ? a.incorrectVmanageFileName = !1 : a.incorrectVmanageFileName = !0)
    }
    ,
    a.add = function() {
        k = [],
        a.showErrorSection = !1,
        a.disableFileChooser = !1,
        a.incorrectVedgeFileName = !1,
        a.incorrectVsmartFileName = !1,
        a.incorrectVmanageFileName = !1,
        a.imageVersionMismatch = !1;
        var b = ""
          , c = ""
          , d = ""
          , e = ""
          , g = !1
          , h = "";
        a.fileVedge || a.fileVsmart || a.fileVmanage || (g = !0),
        f.checkNestedProperty(a.fileVedge, "name") && (i.validateSoftwareImageName(a.fileVedge.name, j.VEDGE) ? (b = a.fileVedge.name.replace(/viptela-/, "").replace(/-mips64.tar.(gz|bz2)/, ""),
        "" != e && b != e && (a.imageVersionMismatch = !0),
        e = b,
        h += "Selected vedge version:&nbsp;&nbsp" + b.toString() + "<br>",
        k.push(a.fileVedge),
        a.fileVedgeName = a.fileVedge.name) : a.incorrectVedgeFileName = !0),
        f.checkNestedProperty(a.fileVsmart, "name") && (i.validateSoftwareImageName(a.fileVsmart.name, j.VSMART) ? (c = a.fileVsmart.name.replace(/viptela-/, "").replace(/-x86_64.tar.(gz|bz2)/, ""),
        "" != e && c != e && (a.imageVersionMismatch = !0),
        e = c,
        h += "Selected vsmart version:&nbsp;&nbsp" + c.toString() + "<br>",
        k.push(a.fileVsmart),
        a.fileVsmartName = a.fileVsmart.name) : a.incorrectVsmartFileName = !0),
        f.checkNestedProperty(a.fileVmanage, "name") && (i.validateSoftwareImageName(a.fileVmanage.name, j.VMANAGE) ? (d = a.fileVmanage.name.replace(/vmanage-/, "").replace(/-x86_64.tar.(gz|bz2)/, ""),
        "" != e && d != e && (a.imageVersionMismatch = !0),
        e = d,
        h += "Selected vmanage version:&nbsp;&nbsp" + d.toString() + "<br>",
        k.push(a.fileVmanage),
        a.fileVmanageName = a.fileVmanage.name) : a.incorrectVmanageFileName = !0),
        a.incorrectVedgeFileName || a.incorrectVsmartFileName || a.incorrectVmanageFileName || g ? ($(".confirmation-popover").remove(),
        g && (a.showErrorSection = !0,
        a.errorMessage = f.createErrorObject("No software image selected", "Please select at least one software image to upload"))) : a.imageVersionMismatch ? (a.confirmContent = {
            message: "Selected images are of different versions. Are you sure you want to upload?"
        },
        a.confirmAdd = !0) : a.doUpload()
    }
    ,
    a.$watch("fileVedge", function(b, c) {
        _.isNull(b) ? a.incorrectVedgeFileName = !1 : a.showErrorSection = !1
    }),
    a.$watch("fileVsmart", function(b, c) {
        _.isNull(b) ? a.incorrectVsmartFileName = !1 : a.showErrorSection = !1
    }),
    a.$watch("fileVmanage", function(b, c) {
        _.isNull(b) ? a.incorrectVmanageFileName = !1 : a.showErrorSection = !1
    }),
    a.doUpload = function() {
        var c = 108e5;
        a.hideActionButtons = !0,
        a.showProgressBar = !0,
        a.disableFileChooser = !0,
        a.uploadInprogress = !0,
        g.filesUpload(k, a.progressBar, c).then(function(a) {
            h.success("Software images uploaded successfully"),
            b.hide()
        }, function(b, c, e, f) {
            d.error("error occurred: Files upload failed"),
            a.showErrorSection = !0,
            a.errorMessage = b,
            a.hideActionButtons = !1,
            a.disableFileChooser = !1
        })
    }
    ,
    a.cancel = function() {
        $(".confirmation-popover").remove(),
        b.cancel("cancel")
    }
}
function softwareUpgradeErrorCtrl(a, b, c, d, e) {
    a.stateString = e.getStateString(c),
    a.ok = function() {
        b.hide()
    }
    ,
    a.cancel = function() {
        b.cancel()
    }
}
function softwareUpgradeActionActivateCtrl(a, b, c, d, e, f, g, h, i, j, k, l, m) {
    function n(a) {
        var b = a
          , c = _.pluck(b, "availableVersions");
        return _.union.apply(_, c)
    }
    function o(a) {
        var b = a
          , c = _.pluck(b, "mergedVersions");
        return _.intersection.apply(_, c)
    }
    a.stateString = h.getStateString(c),
    a.showZTPMismatchError = !1,
    a.serverCall = !1,
    a.showErrorMessage = !1,
    a.disableAction = !1,
    a.noUuidDeviceCount = l,
    a.isvManage = !1;
    var p = "<ul>";
    a.availableVersionsToActivateInCommon = [],
    a.devicesToSkipActivate = [];
    var q = _.findIndex(g, function(a) {
        return "vmanage" === a.personality
    });
    q > -1 ? (a.isvManage = !0,
    a.activateWarningMessage = "Activating new version of software on vManage requires a reboot, which will log out all active clients and bring down all control connections.") : a.activateWarningMessage = "Activating new version of software requires a reboot.",
    angular.forEach(g, function(a) {
        a.mergedVersions = [],
        angular.forEach(a.availableVersions, function(b) {
            a.mergedVersions.push(b)
        }),
        a.mergedVersions.push(a.version)
    });
    var r = n(g);
    o(g);
    if (r.length > 0)
        angular.forEach(r, function(b) {
            var c = {};
            c.devicesWithMatchingSoftware = _.map(_.where(g, {
                availableVersions: [b]
            }), function(a) {
                return {
                    "system-ip": a["system-ip"],
                    "host-name": a["host-name"],
                    uuid: a.uuid
                }
            }),
            c.devicesWithOutMatchingSoftware = _.map(_.reject(g, {
                availableVersions: [b]
            }), function(a) {
                return {
                    "system-ip": a["system-ip"],
                    "host-name": a["host-name"],
                    uuid: a.uuid
                }
            }),
            c.value = b,
            c.key = b,
            a.availableVersionsToActivateInCommon.push(c)
        });
    else if (0 === r.length && 0 != g.length) {
        for (var s = 0; s < g.length; s++)
            p += "<li>" + g[s]["local-system-ip"] + "(" + g[s]["host-name"] + ") </li>";
        p += "</ul>",
        a.showErrorSection = !0,
        a.disableAction = !0,
        a.errorMessage = h.createErrorObject("No software installed on other partition for following devices", p)
    }
    a.$watch("softwareActivateSelectedVersion", function(b, c) {
        if (a.showZTPMismatchError = !1,
        b !== c && void 0 !== b) {
            a.devicesToSkipActivate.reset();
            var d = _.findIndex(g, function(a) {
                return "vedge" === a.personality
            });
            d > -1 && f.getZTPDetails().then(function(c) {
                c.enableUpgrade && c.versionName !== b.value && (a.showZTPMismatchError = !0,
                a.ZTPErrorMessage = h.createErrorObject("Found mismatch between ZTP released version and chosen version", "There is a potential of the node getting downgraded on the next ZTP."))
            }),
            a.devicesToSkipActivate = angular.copy(b.devicesWithOutMatchingSoftware),
            a.devicesToSkipActivate.length < 1 && i(function() {
                angular.element("#skip_and_continue").click()
            })
        }
    }),
    a.activateSoftware = function() {
        a.showErrorSection = !1,
        a.disableAction = !1,
        a.errorMessage = "";
        var e = [];
        if ("vmanage" === k.deviceType)
            angular.forEach(g, function(b) {
                e.push({
                    version: a.softwareActivateSelectedVersion.value,
                    deviceIP: b["system-ip"],
                    deviceId: b.uuid
                })
            });
        else {
            var h = _.where(a.availableVersionsToActivateInCommon, {
                value: a.softwareActivateSelectedVersion.value
            });
            angular.forEach(h[0].devicesWithMatchingSoftware, function(a) {
                var b = {};
                b.version = h[0].value,
                b.deviceIP = a["system-ip"],
                b.deviceId = a.uuid,
                e.push(b)
            })
        }
        e.length > 0 && (a.serverCall = !0,
        f.changePartition(e, k.deviceType).then(function(d) {
            a.serverCall = !1,
            b.hide(),
            1 == k.numOfDevices && "vmanage" === k.deviceType ? m.$broadcast("logoutUser", {
                url: "/logout?reason=reboot"
            }) : c.go("app.device.status", {
                activity: j.getStatusAction("CHANGE_PARTITION").endpoint,
                pid: d ? d.id : ""
            })
        }, function(b, c, e, f) {
            d.error("error occurred: activation failed"),
            a.showErrorSection = !0,
            a.errorMessage = b,
            a.serverCall = !1
        }))
    }
    ,
    a.cancel = function() {
        b.cancel()
    }
    ,
    a.closeModal = function() {
        b.hide()
    }
}
function getAllAvailableVersions(a) {
    var b = a
      , c = _.pluck(b, "deletableVersions");
    return _.union.apply(_, c)
}
function getAllDefaultVersions(a) {
    var b = a;
    angular.forEach(b, function(a) {
        a.defaultVersions = [],
        a.defaultVersions.push(a.defaultVersion)
    });
    var c = _.pluck(b, "defaultVersions")
      , d = _.union.apply(_, c);
    return d
}
function getDevicesWithDeleteNotSupported(a) {
    var b = a;
    return _.reject(b, {
        "device-os": "next"
    })
}
function getDevicesWithDeleteSupported(a) {
    var b = a;
    return _.where(b, {
        "device-os": "next"
    })
}
function softwareUpgradeActionDeleteCtrl(a, b, c, d, e, f, g, h, i, j, k) {
    function l(b) {
        var c = b;
        return angular.forEach(c, function(b) {
            b.deletableVersions = [],
            angular.forEach(b.availableVersions, function(a) {
                b.deletableVersions.push(a)
            });
            var c = b.deletableVersions.indexOf(b.defaultVersion)
              , d = b.deletableVersions.indexOf(b.version);
            c > -1 && (b.deletableVersions.splice(c, 1),
            a.conflictingDefaultVersion = !0),
            d > -1 && b.deletableVersions.splice(d, 1)
        }),
        c
    }
    function m(a) {
        var b = 0;
        return angular.forEach(a, function(a) {
            a.deletableVersions.length < 1 && b++
        }),
        b
    }
    function n(b, c) {
        var d = [];
        return angular.forEach(c, function(c) {
            var e = {};
            e.devicesWithMatchingDefaultSoftware = _.map(_.where(b, {
                defaultVersions: [c]
            }), function(a) {
                return {
                    systemIp: a["system-ip"],
                    hostName: a["host-name"],
                    uuid: a.uuid
                }
            }),
            e.version = c,
            d.push(e),
            e.devicesWithMatchingDefaultSoftware.length > 0 && (a.hasDefaultAvailable = !0)
        }),
        d
    }
    var o, p = [], q = [];
    if (a.isConflict = !1,
    a.serverCall = !1,
    a.hasDefaultAvailable = !1,
    a.defaultWarning = "Note: Cannot delete default versions.",
    a.selectedRow = g,
    a.stateString = h.getStateString(c),
    a.showErrorMessage = !1,
    a.disableAction = !1,
    a.deleteVersionCheckboxGroupObj = [],
    a.deletableVersions = [],
    a.allDefaultVersions = [],
    a.conflictingDefaultVersion = !1,
    a.noUuidDeviceCount = e,
    o = getDevicesWithDeleteNotSupported(g),
    angular.isDefined(o) && g.length === o.length ? a.deletableVersions = [] : (a.devicesWithDeleteSupported = getDevicesWithDeleteSupported(g),
    a.devicesWithDeleteSupported.length > 0 && (a.devicesWithDeleteSupported = l(a.devicesWithDeleteSupported),
    a.allDefaultVersions = getAllDefaultVersions(a.devicesWithDeleteSupported),
    a.deletableVersions = getAllAvailableVersions(a.devicesWithDeleteSupported),
    a.countDevicesWithNoDeletableSoftware = m(a.devicesWithDeleteSupported),
    a.warningDefaultVersions = n(a.devicesWithDeleteSupported, a.allDefaultVersions),
    a.deletableVersions.length > 0 && (angular.forEach(a.deletableVersions, function(b) {
        var c = {
            label: b,
            val: !1,
            devices: _.where(a.devicesWithDeleteSupported, {
                availableVersions: [b]
            })
        };
        a.deleteVersionCheckboxGroupObj.push(c)
    }),
    a.$watch("deleteVersionCheckboxGroupObj", function(b, c) {
        var d = i("filter")(b, {
            val: !0
        });
        a.disableAction = d.length
    }, !0)),
    angular.forEach(a.devicesWithDeleteSupported, function(a) {
        a.availableVersions.length < 1 ? p.push(a) : ""
    }),
    a.conflictingDefaultVersion && (a.conflictingVersions = "<ul>",
    angular.forEach(a.warningDefaultVersions, function(b) {
        b.devicesWithMatchingDefaultSoftware.length > 0 && (a.conflictingVersions += "<li>" + b.version + ":&nbsp;&nbsp;&nbsp;",
        angular.forEach(b.devicesWithMatchingDefaultSoftware, function(b) {
            a.conflictingVersions += "&nbsp;" + b["host-name"] + "(" + b["system-ip"] + ")"
        }),
        a.conflictingVersions += "</li>")
    }),
    a.conflictingVersions += "</ul>"))),
    0 != o.length) {
        for (var r = "<ul>", s = 0; s < o.length; s++)
            r += "<li>" + o[s]["host-name"] + "&nbsp;&nbsp;(" + o[s]["local-system-ip"] + ")</li>";
        t += "</ul>",
        a.showErrorSection = !0,
        a.disableAction = !0,
        q.push({
            message: "Delete is not supported by the following devices",
            details: r
        })
    }
    if (p.length > 0) {
        for (var t = "<ul>", s = 0; s < p.length; s++)
            t += "<li>" + p[s]["host-name"] + "&nbsp;&nbsp;(" + p[s]["local-system-ip"] + ")</li>";
        t += "</ul>",
        a.showErrorSection = !0,
        a.disableAction = !0,
        q.push({
            message: "No software installed on other partition for following devices",
            details: t
        })
    }
    if (a.selectedRow.length > 0 && a.countDevicesWithNoDeletableSoftware === a.devicesWithDeleteSupported.length && angular.isDefined(a.devicesWithDeleteSupported) && a.devicesWithDeleteSupported.length > 0) {
        for (var u = "<ul>", s = 0; s < a.devicesWithDeleteSupported.length; s++)
            u += "<li>" + a.devicesWithDeleteSupported[s]["host-name"] + "&nbsp;&nbsp;(" + a.devicesWithDeleteSupported[s]["local-system-ip"] + ")</li>";
        if (u += "</ul>",
        a.showErrorSection = !0,
        a.disableAction = !0,
        a.conflictingDefaultVersion) {
            var v = "<ul>";
            angular.forEach(a.warningDefaultVersions, function(a) {
                a.devicesWithMatchingDefaultSoftware.length > 0 && (v += "<li>" + a.version + "</li>")
            }),
            v += "</ul>";
            var w = v;
            q.push({
                message: "Cannot delete default versions:",
                details: w
            })
        } else
            q.push({
                message: "No deletable software for following devices",
                details: u
            })
    }
    q.length > 0 && (a.errorMessages = h.createErrorObjectArray(q)),
    a.checkDefaultVersionConflicts = function() {
        a.isConflict = !1,
        a.versionsSelected = _.where(a.deleteVersionCheckboxGroupObj, {
            val: !0
        }),
        angular.forEach(a.versionsSelected, function(b) {
            angular.forEach(b.devices, function(c) {
                c.defaultVersion === b.label && (a.isConflict = !0,
                a.versionsSelected.length > 1 ? a.conflictWarning = "These versions will not be deleted from devices that have this as default version." : a.conflictWarning = "This version will not be deleted from devices that have this as default version.")
            })
        })
    }
    ,
    a.deleteSoftware = function() {
        var e, g = {}, i = [];
        a.showErrorSection = !1,
        a.disableAction = !1,
        a.serverCall = !0,
        a.errorMessage = "",
        a.versionsSelected = _.where(a.deleteVersionCheckboxGroupObj, {
            val: !0
        }),
        angular.forEach(a.versionsSelected, function(a) {
            e = a.label,
            angular.forEach(a.devices, function(a) {
                g = _.find(i, function(b) {
                    return angular.equals(b.deviceIP, a["system-ip"])
                }),
                g ? g.version.push(e) : (g = {
                    deviceIP: a["system-ip"],
                    deviceId: a.uuid,
                    version: [e]
                },
                i.push(g))
            })
        }),
        f.deleteAvailableSoftware(i, k.deviceType).then(function(d) {
            a.serverCall = !1,
            b.hide(),
            c.go("app.device.status", {
                activity: j.getStatusAction("DELETE_PARTITION").endpoint,
                pid: d ? d.id : ""
            })
        }, function(b, c, e, f) {
            d.error("error occurred: deletion failed"),
            a.showErrorSection = !0,
            a.deleteVersionCheckboxGroupObj.reset(),
            a.errorMessages = h.createErrorObject(b.error.message, b.error.details),
            a.serverCall = !1
        })
    }
    ,
    a.closeModal = function() {
        b.hide()
    }
    ,
    a.cancel = function() {
        b.hide()
    }
}
function softwareUpgradeActionUpgradeCtrl(a, b, c, d, e, f, g, h, i, j, k, l, m) {
    a.stateString = g.getStateString(d),
    a.showZTPMismatchError = !1,
    a.showErrorSection = !1,
    a.showUpgradeButton = !0,
    a.showRepositoryButton = !1,
    a.showVmanageRadioButton = !1,
    a.showRemoteRadioButton = !1,
    a.showRemotevManageRadioButton = !1,
    a.chooseVersionDisabled = !1,
    a.chooseVmanageVpnDisabled = !1,
    a.chooseVedgeVpnDisabled = !1,
    a.versionOptionsRequired = !0,
    a.vedgeVpnOptionsRequired = !1,
    a.vmanageVpnOptionsRequired = !1,
    a.selectedRadioButton = "",
    a.versionOptions = [],
    a.vsmartVpnOptions = [],
    a.vedgeVpnOptions = [],
    a.showVmanageRebootWarningMessage = !1,
    a.selectedRow = h,
    a.currentState = d.current.url,
    a.noUuidDeviceCount = b,
    a.disableUpgrade = !1,
    a.showDBWarningMessage = !1,
    a.controllerVersionList = [],
    a.userMode = m.getUserMode();
    var n = {
        deviceId: []
    };
    "vedge" === k.deviceType && i.getControllerVersions().then(function(b) {
        a.controllerVersionList = b
    }, function(b) {
        a.showErrorSection = !0,
        a.errorMessage = b
    });
    var o = [];
    h.length > 0 && "vmanage" === h[0].personality && (a.showDBWarningMessage = !0,
    a.DBWarningMessage = "Backup of data volume is highly recommended before upgrading vManage."),
    i.getRepositoryEntries().then(function(b) {
        angular.forEach(b.data, function(a, c) {
            var d, e = b.data[c].versionName, f = b.data[c].versionType;
            if (d = _.filter(o, {
                id: e
            }),
            d.length > 0)
                d[0].value.push(f);
            else {
                var g = {};
                g.id = e,
                g.value = [f],
                o.push(g)
            }
        }),
        angular.forEach(o, function(b, c) {
            a.versionOptions.push({
                id: c,
                key: o[c].id,
                value: o[c].id
            })
        }),
        0 === a.versionOptions.length && (a.showUpgradeButton = !1,
        a.showErrorSection = !0,
        "multiTenant-tenant" === a.userMode.mode || "multiTenant-provider" === a.userMode.mode ? a.errorMessage = g.createErrorObject("No software image found", "Provider should add new software image.") : (a.errorMessage = g.createErrorObject("No software image found", "Click Repository to add new software image."),
        a.showRepositoryButton = !0))
    }),
    a.$watch("selectedVersion", function(b, c) {
        if (a.showZTPMismatchError = !1,
        a.showVEdgeUpgradeWarningMessage = !1,
        a.showVEdgeUpgradeErrorMessage = !1,
        a.disableUpgrade = !1,
        b != c && void 0 != b) {
            a.vedgeIndex = _.findIndex(h, function(a) {
                return "vedge" === a.personality
            }),
            a.vmanageIndex = _.findIndex(h, function(a) {
                return "vmanage" === a.personality
            }),
            a.vbondIndex = _.findIndex(h, function(a) {
                return "vbond" === a.personality
            }),
            a.vsmartIndex = _.findIndex(h, function(a) {
                return "vsmart" === a.personality
            }),
            a.vedgeIndex > -1 && i.getZTPDetails().then(function(c) {
                c.enableUpgrade && c.versionName !== b.value && (a.showZTPMismatchError = !0,
                a.ZTPErrorMessage = g.createErrorObject("Found mismatch between ZTP released version and chosen version", "There is a potential of the node getting downgraded on the next ZTP."))
            }),
            a.showVmanageRadioButton = !1,
            a.showRemoteRadioButton = !1,
            a.showRemotevManageRadioButton = !1,
            a.selectedRadioButton = "",
            angular.forEach(o, function(b, c) {
                if (o[c].id === a.selectedVersion.value)
                    for (var d = 0; d < o[c].value.length; d++)
                        "vmanage" === o[c].value[d] && (a.showVmanageRadioButton = !0),
                        "remote" === o[c].value[d] && (a.showRemoteRadioButton = !0),
                        "vmanage-remote" === o[c].value[d] && (a.showRemotevManageRadioButton = !0)
            }),
            a.showVmanageRadioButton === !0 ? a.selectedRadioButton = "vmanage" : a.showRemoteRadioButton === !0 ? (a.selectedRadioButton = "remote",
            (a.vedgeIndex > -1 || a.vbondIndex > -1) && (a.vedgeVpnOptionsRequired = !0,
            a.chooseVmanageVpnDisabled = !0),
            (a.vmanageIndex > -1 || a.vsmartIndex > -1) && (a.vmanageVpnOptionsRequired = !0,
            a.chooseVedgeVpnDisabled = !0),
            a.vmanageVpnOptionsRequired && a.vedgeVpnOptionsRequired && (a.chooseVedgeVpnDisabled = !1,
            a.chooseVmanageVpnDisabled = !1)) : a.showRemotevManageRadioButton === !0 && (a.selectedRadioButton = "vmanage-remote",
            (a.vedgeIndex > -1 || a.vbondIndex > -1) && (a.vedgeVpnOptionsRequired = !0,
            a.chooseVmanageVpnDisabled = !0),
            (a.vmanageIndex > -1 || a.vsmartIndex > -1) && (a.vmanageVpnOptionsRequired = !0,
            a.chooseVedgeVpnDisabled = !0),
            a.vmanageVpnOptionsRequired && a.vedgeVpnOptionsRequired && (a.chooseVedgeVpnDisabled = !1,
            a.chooseVmanageVpnDisabled = !1));
            var d = g.normalizeVersion(a.selectedVersion.value);
            if (angular.equals(k.deviceType, "vedge") && !angular.equals(d[0], "99.99.999.0")) {
                var e = g.isUpgradeVersionSupported(a.controllerVersionList, a.selectedVersion.value);
                e.isUpgradeSafe || (e.blockUpgrade ? (a.disableUpgrade = !0,
                a.showVEdgeUpgradeErrorMessage = !0,
                a.vEdgeUpgradeErrorMessage = e.warningMessage) : (a.showVEdgeUpgradeWarningMessage = !0,
                a.vEdgeUpgradeWarningMessage = e.warningMessage))
            }
        }
    }),
    a.$watch("selectedRadioButton", function(b) {
        "vmanage" === b ? (a.vedgeVpnOptionsRequired = !1,
        a.vmanageVpnOptionsRequired = !1,
        a.chooseVmanageVpnDisabled = !1,
        a.chooseVedgeVpnDisabled = !1) : "remote" !== b && "vmanage-remote" !== b || ((a.vedgeIndex > -1 || a.vbondIndex > -1) && (a.vedgeVpnOptionsRequired = !0,
        a.chooseVmanageVpnDisabled = !0),
        (a.vmanageIndex > -1 || a.vsmartIndex > -1) && (a.vmanageVpnOptionsRequired = !0,
        a.chooseVedgeVpnDisabled = !0),
        a.vmanageVpnOptionsRequired && a.vedgeVpnOptionsRequired && (a.chooseVedgeVpnDisabled = !1,
        a.chooseVmanageVpnDisabled = !1))
    }),
    angular.forEach(h, function(a) {
        n.deviceId.push(a["system-ip"])
    }),
    i.getVpnList(n).then(function(b) {
        angular.forEach(b.vedge, function(b, c) {
            a.vedgeVpnOptions.push({
                id: c,
                key: b,
                value: b
            })
        }),
        angular.forEach(b.vsmart, function(b, c) {
            a.vsmartVpnOptions.push({
                id: c,
                key: b,
                value: b
            })
        })
    }),
    a.activateAndReboot = !1,
    a.updateCheckboxSelection = function(b) {
        if (b) {
            var c = _.findIndex(a.selectedRow, function(a) {
                return "vmanage" === a.personality
            });
            c > -1 && (a.showVmanageRebootWarningMessage = !0,
            a.vmanageRebootWarningMessage = g.createErrorObject("Activate and Reboot", "Upgrading vManage will log out all active clients and bring down all control connections."))
        } else
            a.showVmanageRebootWarningMessage = !1
    }
    ,
    a.upgrade = function() {
        a.serverCall = !0;
        var b = [];
        b = _.map(h, function(a) {
            return a = {
                deviceIP: a["system-ip"],
                deviceId: a.uuid
            }
        });
        var f = {
            vEdgeVPN: a.vpnVedge ? a.vpnVedge.value.toString() : 0,
            vSmartVPN: a.vpnVsmart ? a.vpnVsmart.value.toString() : 0,
            version: a.selectedVersion.value,
            versionType: a.selectedRadioButton,
            reboot: a.activateAndReboot,
            sync: !0
        };
        i.upgradeSoftware(b, k.deviceType, f).then(function(b) {
            a.serverCall = !1,
            c.hide(a.versionOptions),
            1 == k.numOfDevices && "vmanage" === k.deviceType && f.reboot === !0 ? l.$broadcast("logoutUser", {
                url: "/logout.html?reason=reboot"
            }) : d.go("app.device.status", {
                activity: j.getStatusAction("INSTALL").endpoint,
                pid: b ? b.id : ""
            })
        }, function(b, c, d, f) {
            e.error("error occurred: Upgrade failed"),
            a.showErrorSection = !0,
            a.errorMessage = b,
            a.showUpgradeButton = !1,
            a.showRepositoryButton = !1,
            a.serverCall = !1
        })
    }
    ,
    a.repository = function() {
        c.hide(a.versionOptions),
        d.go("app.maintenance.repository")
    }
    ,
    a.cancel = function() {
        c.cancel(a.versionOptions)
    }
}
function softwareUpgradeActionDefaultCtrl(a, b, c, d, e, f, g, h, i, j, k) {
    function l(a) {
        var b = a
          , c = _.pluck(b, "mergedVersions");
        return _.union.apply(_, c)
    }
    a.stateString = h.getStateString(c),
    a.serverCall = !1,
    a.showZTPMismatchError = !1,
    a.showErrorMessage = !1,
    a.disableAction = !1,
    a.noUuidDeviceCount = e;
    var m = "<ul>";
    a.versionsToDefaultInCommon = [],
    a.devicesToSkipDefault = [],
    a.currentDefaultVersion = g[0].defaultVersion;
    var n = _.findIndex(g, function(a) {
        return "vmanage" === a.personality
    });
    n > -1 ? a.selectDefaultMessage = "Select default software version for all selected devices." : a.selectDefaultMessage = "Select default software version for all selected devices.",
    angular.forEach(g, function(a) {
        a.mergedVersions = [],
        angular.forEach(a.availableVersions, function(b) {
            a.mergedVersions.push(b)
        }),
        a.mergedVersions.push(a.version)
    });
    var o = l(g);
    if (o.length > 0)
        angular.forEach(o, function(b) {
            var c = {};
            c.devicesWithMatchingSoftware = _.map(_.where(g, {
                mergedVersions: [b]
            }), function(a) {
                return {
                    "system-ip": a["system-ip"],
                    "host-name": a["host-name"],
                    uuid: a.uuid
                }
            }),
            c.devicesWithOutMatchingSoftware = _.map(_.reject(g, {
                mergedVersions: [b]
            }), function(a) {
                return {
                    "system-ip": a["system-ip"],
                    "host-name": a["host-name"],
                    uuid: a.uuid
                }
            }),
            c.value = b,
            c.key = b,
            a.versionsToDefaultInCommon.push(c)
        });
    else if (0 === o.length && 0 != g.length) {
        for (var p = 0; p < g.length; p++)
            m += "<li>" + g[p]["local-system-ip"] + "(" + g[p]["host-name"] + ") </li>";
        m += "</ul>",
        a.showErrorSection = !0,
        a.disableAction = !0,
        a.errorMessage = h.createErrorObject("No software installed on other partition for following devices", m)
    }
    a.$watch("softwareDefaultSelectedVersion", function(b, c) {
        if (a.showZTPMismatchError = !1,
        b !== c && void 0 !== b) {
            a.devicesToSkipDefault.reset();
            var d = _.findIndex(g, function(a) {
                return "vedge" === a.personality
            });
            d > -1 && f.getZTPDetails().then(function(c) {
                c.enableUpgrade && c.versionName !== b.value && (a.showZTPMismatchError = !0,
                a.ZTPErrorMessage = h.createErrorObject("Found mismatch between ZTP released version and chosen version", "There is a potential of the node getting downgraded on the next ZTP."))
            }),
            a.devicesToSkipDefault = angular.copy(b.devicesWithOutMatchingSoftware),
            a.devicesToSkipDefault.length < 1 && i(function() {
                angular.element("#skip_and_continue").click()
            })
        }
    }),
    a.defaultSoftware = function() {
        a.showErrorSection = !1,
        a.disableAction = !1,
        a.errorMessage = "";
        var e = [];
        "vmanage" === k.deviceType ? angular.forEach(g, function(b) {
            e.push({
                version: a.softwareDefaultSelectedVersion.value,
                deviceIP: b["system-ip"],
                deviceId: b.uuid
            })
        }) : angular.forEach(g, function(b) {
            var c = {};
            c.version = a.softwareDefaultSelectedVersion.value,
            c.deviceIP = b["system-ip"],
            c.deviceId = b.uuid,
            e.push(c)
        }),
        e.length > 0 && (a.serverCall = !0,
        f.setDefault(e, k.deviceType).then(function(d) {
            a.serverCall = !1,
            b.hide(),
            c.go("app.device.status", {
                activity: j.getStatusAction("SET_DEFAULT").endpoint,
                pid: d ? d.id : ""
            })
        }, function(b, c, e, f) {
            d.error("error occurred: set default-version failed"),
            a.showErrorSection = !0,
            a.errorMessage = b,
            a.serverCall = !1
        }))
    }
    ,
    a.cancel = function() {
        b.cancel()
    }
    ,
    a.closeModal = function() {
        b.hide()
    }
}
function SoftwareUpgradeController(a, b, c, d, e, f, g, h, i) {
    var j = !0
      , k = 158
      , l = 0
      , m = function() {
        l = 0
    };
    a.stateString = f.getStateString(b);
    var n = g.getUserMode();
    a.selectedUpgradeType = "deviceList",
    a.showSoftwareUpgradeRepository = !0,
    a.tabs = [],
    "provider" === n.mode ? (a.showSoftwareUpgradeRepository = !0,
    a.tabs.push({
        tabTitle: "Controller",
        active: "/controller" === b.current.url,
        states: "app.maintenance.upgrade.controller"
    }, {
        tabTitle: "vManage",
        active: "/vmanage" === b.current.url,
        states: "app.maintenance.upgrade.vmanage"
    })) : "multiTenant-provider" === n.mode ? (a.showSoftwareUpgradeRepository = !1,
    a.tabs.push({
        tabTitle: "Controller",
        active: "/controller" === b.current.url,
        states: "app.maintenance.upgrade.controller"
    }, {
        tabTitle: "vEdge",
        active: "/vedge" === b.current.url,
        states: "app.maintenance.upgrade.vedge"
    })) : "multiTenant-tenant" === n.mode ? (a.showSoftwareUpgradeRepository = !1,
    a.tabs.push({
        tabTitle: "vEdge",
        active: "/vedge" === b.current.url,
        states: "app.maintenance.upgrade.vedge"
    })) : (a.showSoftwareUpgradeRepository = !0,
    a.tabs.push({
        tabTitle: "vEdge",
        active: "/vedge" === b.current.url,
        states: "app.maintenance.upgrade.vedge"
    }, {
        tabTitle: "Controller",
        active: "/controller" === b.current.url,
        states: "app.maintenance.upgrade.controller"
    }, {
        tabTitle: "vManage",
        active: "/vmanage" === b.current.url,
        states: "app.maintenance.upgrade.vmanage"
    })),
    a.softwareUpgradePermission = !1,
    g.checkSidebarState() && g.allowAccess("Software Upgrade") && (a.softwareUpgradePermission = !0,
    k = 198),
    a.serverCall = !1,
    a.isVmanage = function() {
        var a = this;
        "/vmanage" === b.current.url ? a.disable = !1 : a.disable = !0
    }
    ,
    a.open = function(d) {
        var e, f, g = a.table.uiGridApi.selection.getSelectedRows(), h = this;
        if (angular.forEach(g, function(a) {
            angular.isDefined(a.uuid) && a.uuid || l++
        }),
        g.length && g.length === l) {
            var i = {
                error: {
                    message: "Invalid chassis number",
                    details: "All selected devices do not have a valid chassis number. No actions can be performed",
                    type: "warning"
                }
            };
            notification.confirm(i, null, m)
        } else {
            var k = {
                deviceType: {},
                numOfDevices: a.table.data.length
            };
            if ("/vedge" === b.current.url ? k.deviceType = "vedge" : "/controller" === b.current.url ? k.deviceType = "controller" : "/vmanage" === b.current.url && (k.deviceType = "vmanage",
            g = a.table.data),
            angular.equals(h.title, "Upgrade") ? (f = "softwareUpgradeActionUpgradeCtrl",
            e = "app/maintenance/softwareUpgrade/softwareUpgradeActionUpgrade.html") : angular.equals(h.title, "Activate") ? (f = "softwareUpgradeActionActivateCtrl",
            e = "app/maintenance/softwareUpgrade/softwareUpgradeActionActivate.html") : angular.equals(h.title, "Delete Available Software") ? (f = "softwareUpgradeActionDeleteCtrl",
            e = "app/maintenance/softwareUpgrade/softwareUpgradeActionDelete.html") : angular.equals(h.title, "Set Default Version") && (f = "softwareUpgradeActionDefaultCtrl",
            e = "app/maintenance/softwareUpgrade/softwareUpgradeActionDefault.html"),
            j) {
                c.show({
                    templateUrl: e,
                    controller: f,
                    targetEvent: d,
                    resolve: {
                        selectedRow: function() {
                            return g
                        },
                        device: function() {
                            return k
                        },
                        noUuidCount: function() {
                            return l
                        }
                    }
                }).then(function(b) {
                    a.selected = b,
                    m()
                }, function() {
                    m()
                })
            }
        }
    }
    ;
    var o = new e({
        columnResizing: !0,
        enableSorting: !0,
        tableHeightOffset: k,
        autoLoad: !0,
        dataUid: "system-ip"
    },{
        csvExport: !0
    },{},{
        exporterHeaderFilterUseName: !1,
        exporterCsvFilename: "Software_Upgrade.csv"
    });
    "/vmanage" !== b.current.url && (a.softwareUpgradePermission && (o.options.multiSelect = !0),
    o.options.isRowSelectable = function(a) {
        return !angular.equals(a.entity.reachability, "unreachable")
    }
    ),
    o.setDataSourceFilter("Device Group", h.DEVICE_GROUPS),
    o.dataSourceFilter.setOptionsKeys({
        value: "groupName",
        key: "groupId"
    }),
    o.dataSourceFilter.setOnSelectionChangeFunc(function() {
        var b = this;
        a.table.taggedSearchObject.clearSearchCache(),
        a.table.uiGridApi.grid.selection.selectAll = !1,
        a.table.loadDataFromUrl(i + "?groupId=" + b.selectedOption.key)
    }),
    o.setLocalActions([{
        title: "Upgrade",
        icon: "settings_backup_restore",
        rbac: "Software Upgrade",
        initState: a.isVmanage,
        action: a.open
    }, {
        title: "Activate",
        icon: "settings_power",
        rbac: "Software Upgrade",
        initState: a.isVmanage,
        action: a.open
    }, {
        title: "Delete Available Software",
        icon: "delete_sweep",
        rbac: "Software Upgrade",
        initState: a.isVmanage,
        action: a.open
    }, {
        title: "Set Default Version",
        icon: "done_all",
        rbac: "Software Upgrade",
        initState: a.isVmanage,
        action: a.open
    }]),
    a.table = o,
    a.changeUpgradeType = function(a) {
        "deviceList" == a ? b.previousState && "app.admin.settings" !== b.previousState.name ? b.go(b.previousState.name) : b.go("app.maintenance.upgrade.vedge") : b.go("app.maintenance.repository")
    }
    ,
    a.$on("$destroy", function() {})
}
function SoftwareUpgradeRepositoryController(a, b, c, d, e, f, g, h, i, j) {
    a.stateString = f.getStateString(b);
    var k = 108;
    a.softwareUpgradePermission = !1,
    h.checkSidebarState() && h.allowAccess("Software Upgrade") && (a.softwareUpgradePermission = !0,
    k = 148),
    a.selectedUpgradeType = "repository";
    var l = new e({
        columnResizing: !0,
        enableSorting: !0,
        singleSelect: !0,
        dataUid: "versionId",
        tableHeightOffset: k
    })
      , m = [];
    !a.softwareUpgradePermission || "provider" !== h.getUserMode().mode && "singleTenant" !== h.getUserMode().mode || m.push({
        type: "Delete",
        open: "confirm",
        title: "Are you sure you want to delete the software?",
        content: "This software will be deleted immediately. You cannot undo the action.",
        okButtonActionFn: function(b) {
            g.deleteRepositoryEntry(b.entity.versionId).then(function(b) {
                a.table.refresh()
            }, function(a) {
                i.confirm(a)
            })
        }
    }),
    "provider" !== h.getUserMode().mode && "singleTenant" !== h.getUserMode().mode || l.setViewActions([{
        dropdown: !0,
        title: "Add New Software",
        icon: "add_circle",
        rbac: "Software Upgrade",
        cssId: a.stateString + "new_sw_locations_dropdown",
        dropdownOptions: [{
            title: "vManage",
            cssId: "cli_mode_choice",
            action: function(b) {
                g.getImageCount().then(function(b) {
                    if (b.data.imageCount < 15)
                        j.show({
                            templateUrl: "app/maintenance/softwareUpgrade/addNewSwFromVmanage-partial.html",
                            controller: "addNewSwFromVmanageController",
                            controllerUrl: "app/maintenance/softwareUpgrade/AddNewSwFromVmanageController",
                            openFrom: angular.element(document.querySelector("#maintenance_repository_new_sw_locations_dropdown")),
                            closeTo: angular.element(document.querySelector("#maintenance_repository_new_sw_locations_dropdown"))
                        }).then(function() {
                            c(function() {
                                a.table.refresh()
                            }, 500)
                        });
                    else {
                        var d = {
                            error: {
                                message: "Repository image limit exceeded",
                                details: "vManage repository can store up to 15 software images. Please remove unwanted software images from repository before adding a new one",
                                type: "info"
                            }
                        };
                        i.confirm(d)
                    }
                }, function(a) {})
            }
        }, {
            title: "Remote Server",
            cssId: "vmanage_mode_choice",
            action: function(b) {
                j.show({
                    templateUrl: "app/maintenance/softwareUpgrade/addNewSwFromRemoteServer-partial.html",
                    controller: "addNewSwFromRemoteServerController",
                    controllerUrl: "app/maintenance/softwareUpgrade/AddNewSwFromRemoteServerController",
                    openFrom: angular.element(document.querySelector("#maintenance_repository_new_sw_locations_dropdown")),
                    closeTo: angular.element(document.querySelector("#maintenance_repository_new_sw_locations_dropdown"))
                }).then(function() {
                    c(function() {
                        a.table.refresh()
                    }, 500)
                })
            }
        }, {
            title: "Remote Server - vManage",
            cssId: "remote_vmanage_mode_choice",
            action: function(b) {
                g.getImageCount().then(function(b) {
                    if (b.data.imageCount < 15)
                        j.show({
                            templateUrl: "app/maintenance/softwareUpgrade/addNewSwFromRemotevManage-partial.html",
                            controller: "addNewSwFromRemotevManageController",
                            controllerUrl: "app/maintenance/softwareUpgrade/AddNewSwFromRemotevManageController",
                            openFrom: angular.element(document.querySelector("#maintenance_repository_new_sw_locations_dropdown")),
                            closeTo: angular.element(document.querySelector("#maintenance_repository_new_sw_locations_dropdown"))
                        }).then(function() {
                            c(function() {
                                a.table.refresh()
                            }, 500)
                        });
                    else {
                        var d = {
                            error: {
                                message: "Repository image limit exceeded",
                                details: "vManage repository can store up to 15 software images. Please remove unwanted software images from repository before adding a new one",
                                type: "info"
                            }
                        };
                        i.confirm(d)
                    }
                }, function(a) {})
            }
        }]
    }]),
    l.setHoverAction(m),
    a.table = l,
    a.locationOptions = ["vManage", "Remote Server"],
    a.changeUpgradeType = function(a) {
        "deviceList" == a ? b.previousState && "app.admin.settings" !== b.previousState.name ? b.go(b.previousState.name) : b.go("app.maintenance.upgrade.vedge") : b.go("app.maintenance.repository")
    }
}
function AlarmDetailsController(a, b, c, d, e, f, g, h, i, j, k) {
    function l(b) {
        a.showTable = !1,
        a.showView = !1;
        var e = p + b;
        return a.table.setDataUrl(e),
        h.isUndefinedOrEmpty(b) ? void c.error("No UUID found for selected alarm") : void i.getAlarmDetails(b).then(function(b) {
            if (b.data && b.data[0]) {
                a.showView = !0,
                a.alarmName = b.data[0].rule_name_display.split("_").join(" "),
                a.possibleCausesOfAlarm = b.data[0].possible_causes;
                var c = b.data[0].type;
                a.possibleCausesOfAlarm && 0 !== a.possibleCausesOfAlarm.length || (a.possibleCause.open = !1),
                c && "app-list-update" === c && (a.isAppListUpdate = !0),
                a.impactedEntitiesList = b.data[0].values,
                a.impactedEntitiesList && 0 !== a.impactedEntitiesList.length || (a.impactedEntities.open = !1),
                b.data[0].consumed_events && b.data[0].consumed_events.length > 0 && (a.table.taggedSearchObject.clearSearchCache(),
                s.createColumns(i.createColumns()),
                s.setTableData(b.data[0].consumed_events),
                a.showTable = !0),
                a.alarmSeverityLevel = b.data[0].severity.toLowerCase(),
                a.alarmMessage = b.data[0].message,
                a.alarmDate = d("date")(b.data[0].entry_time, "dd MMM yyyy h:mm:ss a"),
                b.data[0].cleared_events && b.data[0].cleared_events.length > 0 ? (a.clearedEventsPresent = !0,
                a.linkUUID = b.data[0].cleared_events[0],
                a.clearDate = d("date")(b.data[0].entry_time, "dd MMM yyyy h:mm:ss a")) : b.data[0].cleared_by && b.data[0].cleared_time ? (a.isClearedAlarm = !0,
                a.linkUUID = b.data[0].cleared_by,
                a.clearDate = d("date")(b.data[0].cleared_time, "dd MMM yyyy h:mm:ss a")) : a.clearDate = "NA",
                a.possibleCause.open && o("#alarmProbableCause > .panel-group > .panel.panel-default > .panel-collapse.collapse.in", 50),
                a.impactedEntities.open && o("#alarmImpactedEntities > .panel-group > .panel.panel-default > .panel-collapse.collapse.in", 50)
            }
        }, function(a, d, e, f) {
            c.error("Failed to Alarm details for UUID:" + b)
        })
    }
    function m() {
        return $(".panel-collapse")[0].clientHeight + 20
    }
    function n() {
        return $(".panel-collapse")[1].clientHeight + 20
    }
    function o(b, c) {
        return $(b).length ? void (a.table.options.tableHeightOffset = q + m() + n()) : void setTimeout(function() {
            o(b)
        }, c)
    }
    a.breadCrumb = {
        states: [{
            name: "alarms",
            title: "Alarms",
            state: "app.monitor.alarms.list"
        }, {
            name: "alarms-details",
            title: "Alarms Details"
        }]
    },
    a.stateString = h.getStateString(b);
    var p = "/dataservice/alarms/uuid/"
      , q = 400
      , r = e.uuid;
    a.possibleCause = {
        open: !0
    },
    a.impactedEntities = {
        open: !0
    },
    a.possibleCausesOfAlarm = [],
    a.impactedEntitiesList = [],
    a.showPossibleCauses = !1,
    a.clearedEventsPresent = !1,
    a.alarmSeverityLevel = "",
    a.alarmMessage = "",
    a.alarmDate = "",
    a.clearDate = "",
    a.linkUUID = "",
    a.isClearedAlarm = !1,
    a.isAppListUpdate = !1;
    var s = new j({
        autoLoad: !0,
        columnResizing: !0,
        singleSelect: !1,
        enableSorting: !0,
        tableHeightOffset: 400
    });
    a.table = s,
    a.table.setOnRefreshCallback(function() {
        l(r)
    }),
    l(r),
    a.$watch("possibleCause.open", function(b, c) {
        b != c && (b === !1 ? a.table.options.tableHeightOffset = q + n() : o("#alarmProbableCause > .panel-group > .panel.panel-default > .panel-collapse.collapse.in", 50))
    }),
    a.$watch("impactedEntities.open", function(b, c) {
        b != c && (b === !1 ? a.table.options.tableHeightOffset = q + m() : o("#alarmImpactedEntities > .panel-group > .panel.panel-default > .panel-collapse.collapse.in", 50))
    }),
    a.goToAlarmDetails = function() {
        b.go("app.monitor.alarms.list")
    }
    ,
    a.goToAlarm = function() {
        var b = a.linkUUID;
        h.checkNestedProperty(e, "tenantId") && e.tenantId ? g.path("/" + e.tenantId + "/app/monitor/alarms/details/" + b) : g.path("/app/monitor/alarms/details/" + b),
        l(b),
        a.possibleCause.open && o("#alarmProbableCause > .panel-group > .panel.panel-default > .panel-collapse.collapse.in", 50),
        a.impactedEntities.open && o("#alarmImpactedEntities > .panel-group > .panel.panel-default > .panel-collapse.collapse.in", 50)
    }
}
function RealTimeController(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    a.stateString = i.getStateString(e),
    a.deviceOption = {},
    a.deviceOption.selected = void 0,
    a.personality = "",
    a.reachableFlag = "default",
    a.showFilter = !1,
    a.showFilterMessage = !1;
    var u = new Set
      , v = new Set
      , w = [];
    a.uuid = {
        notExist: !1
    },
    a.queryBuilderViewObj = {},
    a.queryBuilderViewObj.buttonLayoutObj = {
        layoutClass: "actionButtonLayout",
        filterIconClass: "filter_list",
        filterButtonTitle: "Filter",
        showDropDownIcon: !0
    },
    a.breadCrumb.states = [{
        name: "network",
        title: "Network",
        state: "app.monitor.devices.grid"
    }, {
        name: "real-time",
        title: "Real Time"
    }],
    a.uri = {},
    a.filterFields = {},
    a.queryBuilderInitialized = !1,
    a.showQueryBuilderTimeStampInbuilt = !0,
    h.getDevicePersonality(o.systemIp).then(function(b) {
        "reachable" === b.data[0].reachability ? (a.deviceType = b.data[0]["device-type"],
        a.reachableFlag = "reachable",
        a.systemIp = o.systemIp,
        a.personality = b.data[0]["device-type"],
        p.setSelectedDevice(o.systemIp),
        a.loadViewData()) : (a.unreachableDevice = b.data[0],
        a.reachableFlag = "unreachable",
        angular.isDefined(b.data[0].uuid) ? (i.isUndefinedOrEmpty(b.data[0].uuid) || i.isNull(b.data[0].uuid)) && (a.uuid.notExist = !0) : a.uuid.notExist = !0)
    }, function(a) {
        q.confirm(a)
    });
    var x = new l({
        columnResizing: !0,
        singleSelectDefault: !0,
        enableSorting: !0,
        dataUid: "vdevice-dataKey",
        tableHeightOffset: a.showFilter ? 213 : 183,
        autoLoad: !0,
        tableName: "deviceMonitorTable"
    });
    a.monitorTable = x,
    a.lastSelected = {},
    a.deviceOptionSelected = "",
    a.checkQueryBuilderOrLoadTable = function(b, c) {
        angular.isDefined(c) ? (a.showFilter = !0,
        a.showFilterMessage = !0,
        a.filterFields = c,
        a.uri = b,
        a.getVPNInterfacesList(),
        a.openModal("app/monitor/devices/dashboard/templates/realTime/show_command_filter_message.html", "showCommandsFilterMessage", b, c)) : a.loadTable(b + "?deviceId=" + o.systemIp)
    }
    ,
    a.loadTable = function(b) {
        a.deviceOptionSelected = "table";
        var c = b;
        x.columnDefs.reset(),
        x.data.reset(),
        x.taggedSearchObject.clearSearchCache(),
        x.setDataUrl(c),
        x.loadDataFromUrl(c),
        a.showFilter ? x.options.tableHeightOffset = 213 : x.options.tableHeightOffset = 183,
        $(window).resize()
    }
    ,
    a.loadViewData = function() {
        if (m.getStoredDeviceOption().length)
            if (o.option) {
                var b = m.checkPersonalityList(a.personality);
                if (b.length) {
                    a.deviceOptions = b;
                    var c = _.find(b, function(a) {
                        return a.name === o.option
                    });
                    if (c)
                        a.deviceOption.selected = c,
                        m.setLastOption(c),
                        a.showCommand = c.name,
                        a.checkQueryBuilderOrLoadTable(c.uri, c["filter-fields"]);
                    else {
                        var d = {};
                        d.name = o.option,
                        a.deviceOption.selected = d,
                        a.deviceOptionSelected = "invalid"
                    }
                } else {
                    a.deviceOptions = m.getPersonalityOptions(a.personality);
                    var e = _.find(a.deviceOptions, function(a) {
                        return a.name === o.option
                    });
                    if (e)
                        a.deviceOption.selected = e,
                        m.setLastOption(e),
                        a.showCommand = e.name,
                        a.checkQueryBuilderOrLoadTable(e.uri, e["filter-fields"]);
                    else {
                        var d = {};
                        d.name = o.option,
                        a.deviceOption.selected = d,
                        a.deviceOptionSelected = "invalid"
                    }
                }
            } else {
                a.deviceOptions = m.getPersonalityOptions(a.personality);
                var f = _.find(a.deviceOptions, function(a, b) {
                    return "System Information" === a.name
                });
                f || (f = a.deviceOptions[0]),
                a.deviceOption.selected = f,
                m.setLastOption(f),
                a.lastSelected = f,
                a.showCommand = f.name,
                a.checkQueryBuilderOrLoadTable(f.uri, f["filter-fields"])
            }
        else
            m.getDeviceOptions().then(function(b) {
                if (m.setStoredDeviceOption(b.data),
                m.setSearchOptions(),
                m.setMenuOptions(),
                a.deviceOptions = m.getPersonalityOptions(a.personality),
                a.deviceMenuOptions = m.getPersonalityMenuOptions(a.personality),
                o.option) {
                    var c = _.find(a.deviceOptions, function(a, b) {
                        return a.name === o.option
                    });
                    if (c)
                        a.deviceOption.selected = c,
                        m.setLastOption(c),
                        a.lastSelected = c,
                        a.showCommand = c.name,
                        a.checkQueryBuilderOrLoadTable(c.uri, c["filter-fields"]);
                    else {
                        var d = {};
                        d.name = o.option,
                        a.deviceOption.selected = d,
                        a.deviceOptionSelected = "invalid"
                    }
                } else {
                    var e = _.find(a.deviceOptions, function(a, b) {
                        return "System Information" === a.name
                    });
                    e || (e = a.deviceOptions[0]),
                    a.deviceOption.selected = e,
                    a.showCommand = e.name,
                    a.checkQueryBuilderOrLoadTable(e.uri, e["filter-fields"])
                }
            }, function(a, b, c, d) {
                q.confirm(a)
            })
    }
    ,
    a.displayData = function(a, b, c, d) {
        if (c)
            e.go("app.monitor.devices.dashboard.realTime", {
                systemIp: o.systemIp,
                localSystemIp: o.localSystemIp,
                option: a.name
            });
        else if (d && a.link) {
            var f = d + " " + a.name;
            e.go("app.monitor.devices.dashboard.realTime", {
                systemIp: o.systemIp,
                localSystemIp: o.localSystemIp,
                option: f
            })
        } else
            a.link && e.go("app.monitor.devices.dashboard.realTime", {
                systemIp: o.systemIp,
                localSystemIp: o.localSystemIp,
                option: a.name
            })
    }
    ,
    a.status = {
        isopen: !1
    },
    a.getQueryBuilderParams = function(a) {
        var b = "";
        return angular.forEach(a, function(a) {
            null != a.value[0] && (b += a.field + "=" + a.value[0] + "&")
        }),
        b.substring(0, b.length - 1)
    }
    ,
    a.searchCallBack = function(b) {
        if (a.queryBuilderInitialized || (a.queryBuilderInitialized = !0),
        a.loadTableFlag) {
            a.showFilter = !0,
            a.showFilterMessage = !1;
            var c = a.getQueryBuilderParams(b.query.rules);
            a.loadTable(a.uri + "?deviceId=" + o.systemIp + "&" + c)
        }
        a.loadTableFlag = !0
    }
    ,
    a.initializeQueryBuilder = function() {
        var b = {
            autoLoadFields: !1,
            searchCallBack: a.searchCallBack,
            filterInterfaceObjValidComponents: !0,
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0
        };
        a.queryBuilderObj = new c(b);
        var d = a.getQueryBuilderFields();
        a.queryBuilderObj.setFieldsData(d),
        a.queryBuilderObj.loadQueryBuilderWithFieldsData()
    }
    ,
    a.getQueryBuilderFields = function() {
        return a.formatFields(a.filterFields)
    }
    ,
    a.formatFields = function(a) {
        var b = [];
        return angular.forEach(a, function(a) {
            var c = {
                dataType: angular.isDefined(a.dataType) ? a.dataType : "string",
                isRequired: !1,
                name: a.displayName,
                property: a.name,
                validation: a.validation,
                options: a.options
            };
            if (c.dataType && angular.equals(c.dataType, "color") && (c.dataType = "enum",
            c.options = d.colorOptions),
            c.dataType && angular.equals(c.dataType, "vpn")) {
                c.dataType = "enum";
                var e = Array.from(u)
                  , f = [];
                angular.forEach(e, function(a) {
                    f.push({
                        key: a,
                        value: a
                    })
                }),
                c.options = f
            }
            if (c.dataType && angular.equals(c.dataType, "if")) {
                c.dataType = "enum";
                var g = Array.from(v)
                  , h = [];
                angular.forEach(g, function(a) {
                    h.push({
                        key: a,
                        value: a
                    })
                }),
                c.options = h
            }
            if (c.dataType && angular.equals(c.dataType, "cloud_app")) {
                c.dataType = "enum";
                var i = [];
                angular.forEach(w, function(a) {
                    i.push({
                        key: a.key,
                        value: a.value
                    })
                }),
                c.options = i
            }
            b.push(c)
        }),
        b
    }
    ;
    var y = function() {
        return !(!angular.equals(a.deviceType, "vsmart") || !a.showCommand.startsWith("OMP"))
    };
    a.getVPNInterfacesList = function() {
        var b = s.defer();
        return y() ? h.getVpnList().then(function(c) {
            angular.isDefined(c.vedge) && angular.forEach(c.vedge, function(a) {
                angular.equals(a, "0") || angular.equals(a, "512") || u.add(a)
            }),
            angular.isDefined(c.vsmart) && angular.forEach(c.vsmart, function(a) {
                angular.equals(a, "0") || angular.equals(a, "512") || u.add(a)
            }),
            a.initializeQueryBuilder(),
            b.resolve([])
        }, function() {
            g.info("Error while retrieving VPN/Interface List for show commands filter"),
            b.reject([])
        }) : s.all([h.getInterfaceList(o.localSystemIp), t.getAvailableApplications()]).then(function(c) {
            angular.forEach(c[0].data, function(a) {
                angular.isDefined(a["vpn-id"]) && u.add(a["vpn-id"]),
                angular.isDefined(a.ifname) && v.add(a.ifname)
            }),
            angular.forEach(c[1].data, function(a) {
                w.push({
                    key: a.appType,
                    value: a.longName
                })
            }),
            a.initializeQueryBuilder(),
            b.resolve([])
        }, function() {
            g.info("Error while retrieving VPN/Interface List for show commands filter"),
            b.reject([])
        }),
        b.promise
    }
    ,
    a.openModal = function(b, c, d, e) {
        f.show({
            templateUrl: b,
            controller: c,
            openFrom: angular.element(document.querySelector("#monitor_devices_dashboard_realTime_device_options_select_input")),
            closeTo: angular.element(document.querySelector("#monitor_devices_dashboard_realTime_device_options_select_input"))
        }).then(function() {
            a.queryBuilderObj.fireClickEventOnFilter()
        }, function() {
            a.showFilterMessage = !1,
            a.loadTable(d + "?deviceId=" + o.systemIp)
        })
    }
}
function deviceBringUpErrorLogController(a, b, c, d, e, f) {
    a.stateString = c.getStateString(b),
    a.popUptitle = "Device Bringup Error";
    var g = "";
    e.message ? angular.isArray(e.message) ? _.each(e.message, function(a) {
        angular.isString(a) ? g += a + "\n" : angular.isObject(a) && "eventname"in a && "details"in a ? (g += "Event Name : " + a.eventname + "\n",
        g += "Event Details : " + a.details + "\n",
        g += "\n") : angular.isObject(a) && "devices"in a && (angular.isDefined(a.entry_time) && (g += "Time Stamp : " + f("date")(a.entry_time, "yyyy-MM-dd HH:mm:ss a") + "\n"),
        a.devices.length > 0 && angular.isDefined(a.devices[0]["system-ip"]) && (g += "System IP : " + a.devices[0]["system-ip"] + "\n"),
        angular.isDefined(a.eventname) && a.eventname.length > 0 && (g += "Operation Name : " + a.eventname + "\n"),
        angular.isDefined(a.type) && a.type.length > 0 && (g += "Event Type : " + a.type + "\n"),
        angular.isDefined(a.message) && a.message.length > 0 && (g += "Message : " + a.message + "\n"),
        g += "\n")
    }) : angular.isString(e.message) && (g += e.message + "\n") : g = "No logs available",
    a.configuration = g,
    a.cancel = function() {
        d.cancel()
    }
}
function controlConnectionNetworkGraph(a, b) {
    return {
        restrict: "EA",
        replace: !0,
        scope: {
            nodePaths: "="
        },
        link: function(a, b, c) {}
    }
}
function speedometer(a, b) {
    return {
        restrict: "AEC",
        template: "<div></div>",
        scope: {
            configuredSpeed: "=",
            actualSpeed: "=",
            disabled: "="
        },
        link: function(a, b, c) {
            var d = 20
              , e = 40
              , f = "#90CC84"
              , g = "#FFD562"
              , h = "#FF6E56"
              , i = "#AAAAAA"
              , j = "#BBBBBB"
              , k = "#CCCCCC"
              , l = a.configuredSpeed * d / 100
              , m = a.configuredSpeed * e / 100;
            console.log("$scope.disabled: ", a.disabled);
            var n = Highcharts.chart(b[0], {
                chart: {
                    type: "gauge",
                    plotBackgroundColor: null,
                    plotBackgroundImage: null,
                    plotBorderWidth: 0,
                    plotShadow: !1
                },
                credits: {
                    enabled: !1
                },
                title: {
                    text: ""
                },
                pane: {
                    startAngle: -130,
                    endAngle: 130,
                    background: [{
                        backgroundColor: "#FFF",
                        borderWidth: 0
                    }]
                },
                yAxis: {
                    min: 0,
                    max: a.configuredSpeed,
                    minorTickInterval: "auto",
                    minorTickWidth: 0,
                    minorTickLength: 0,
                    minorTickPosition: "inside",
                    minorTickColor: "#666",
                    tickPixelInterval: 30,
                    tickWidth: 2,
                    tickPosition: "inside",
                    tickLength: 10,
                    tickColor: "#666",
                    labels: {
                        step: 2,
                        rotation: "auto",
                        style: {
                            "font-size": "14px",
                            "font-weight": "bold"
                        }
                    },
                    title: {
                        text: "Mbps"
                    },
                    plotBands: [{
                        from: m,
                        to: a.configuredSpeed,
                        color: a.disabled ? i : f
                    }, {
                        from: l,
                        to: m,
                        color: a.disabled ? j : g
                    }, {
                        from: 0,
                        to: l,
                        color: a.disabled ? k : h
                    }]
                },
                series: [{
                    name: "Speed",
                    data: [a.actualSpeed],
                    tooltip: {
                        valueSuffix: " Mbps"
                    }
                }]
            });
            window.myscope = a,
            window.mychart = n,
            a.$watch("actualSpeed", function() {
                n.series[0].data[0].update(a.actualSpeed)
            }),
            a.$watch("disabled", function() {
                console.log("[2] $scope.disabled: ", a.disabled),
                n.yAxis[0].removePlotBand(),
                n.yAxis[0].addPlotBand({
                    from: m,
                    to: a.configuredSpeed,
                    color: a.disabled ? i : f
                }),
                n.yAxis[0].addPlotBand({
                    from: l,
                    to: m,
                    color: a.disabled ? j : g
                }),
                n.yAxis[0].addPlotBand({
                    from: 0,
                    to: l,
                    color: a.disabled ? k : h
                })
            })
        }
    }
}
function traceroutePath(a, b) {
    return b.put("ltrTraceroute.html", '<div ng-repeat="nexthop in row" class="inlineBlock animate-repeat"> <div ng-if="!nexthop.noHop && !nexthop.lastHop"><div class="inlineBlock result-list_entity"> <span class="inlineBlock vmanage-spritesheet-url next-hop"></span> <p>{{nexthop[\'ipAddress\'] || \'N/A\'}}</p> </div> <svg height="65" width="120"> <text x="10" y="10">{{(nexthop[\'meanLatency\'] | number : 2)}}ms</text> <line x1="0" y1="18" x2="120" y2="18"></line> <image xlink:href="/images/rightArrow.png" x="-60" y="-22" height="10" width="10"></image></svg></div><div ng-if="nexthop.noHop && !nexthop.error"> <svg height="65" width="153"> <line x1="0" y1="18" x2="153" y2="18"></line> </svg> </div><div ng-if="nexthop.noHop && nexthop.error"> <svg height="65" width="153"> <line stroke-dasharray="10, 5" x1="0" y1="18" x2="153" y2="18" style="stroke:rgb(255,0,0)"></line> </svg> </div></div><svg height="40" width="2" class="overflowVisible"> <line x1="1" y1="-7" x2="1" y2="-60"></line> </svg>'),
    b.put("rtlTraceroute.html", '<svg height="40" width="2" class="overflowVisible"> <line x1="2" y1="-60" x2="2" y2="-7"></line> </svg><div ng-repeat="nexthop in row" class="inlineBlock animate-repeat"> <div ng-if="!nexthop.noHop && !nexthop.lastHop"><svg height="65" width="120"> <text x="40" y="10">{{nexthop[\'meanLatency\'] | number : 2}}ms </text> <line x1="0" y1="18" x2="120" y2="18"></line> <image xlink:href="/images/rightArrow.png" x="60" y="13" height="10" width="10"></image> </svg> <div class="inlineBlock result-list_entity"> <span class="inlineBlock vmanage-spritesheet-url next-hop"></span> <p class="ng-binding" ng-class="{\'na\': !nexthop[\'ipAddress\']}">{{nexthop[\'ipAddress\'] || \'N/A\'}}</p> </div></div><div ng-if="nexthop.noHop && !nexthop.error"> <svg height="65" width="153"> <line x1="0" y1="18" x2="153" y2="18"></line> </svg> </div><div ng-if="nexthop.noHop && nexthop.error"> <svg height="65" width="153"> <line stroke-dasharray="10, 5" x1="0" y1="18" x2="153" y2="18" style="stroke:rgb(255,0,0)"></line> </svg> </div></div>'),
    b.put("firstRTLTraceroute.html", '<svg height="40" width="2" class="overflowVisible"> <line x1="2" y1="-40" x2="2" y2="-7"></line> </svg><div ng-repeat="nexthop in row" class="inlineBlock animate-repeat"> <div ng-if="!nexthop.noHop && !nexthop.lastHop"><svg height="65" width="120"> <text x="40" y="10">{{nexthop[\'meanLatency\'] | number : 2}}ms </text> <line x1="0" y1="18" x2="120" y2="18"></line> <image xlink:href="/images/rightArrow.png" x="60" y="13" height="10" width="10"></image> </svg> <div class="inlineBlock result-list_entity"> <span class="inlineBlock vmanage-spritesheet-url next-hop"></span> <p class="ng-binding" ng-class="{\'na\': !nexthop[\'ipAddress\']}">{{nexthop[\'ipAddress\'] || \'N/A\'}}</p> </div> </div> <div ng-if="nexthop.noHop && !nexthop.error"> <svg height="65" width="153"> <line x1="0" y1="18" x2="153" y2="18"></line> </svg> </div><div ng-if="nexthop.noHop && nexthop.error"> <svg height="65" width="153"> <line stroke-dasharray="10, 5" x1="0" y1="18" x2="153" y2="18" style="stroke:rgb(255,0,0)"></line> </svg> </div></div>'),
    {
        restrict: "EA",
        replace: !0,
        scope: {
            rtl: "@",
            row: "="
        },
        link: function(c, d, e) {
            var f;
            angular.isDefined(c.row) && c.row.length && (f = c.$parent.$odd ? b.get("ltrTraceroute.html") : b.get("rtlTraceroute.html"),
            d.append(f),
            a(d)(c))
        }
    }
}
function hardwareHealthService(a, b, c) {
    var d = {
        HARDWARE_DATA_URL: "dataservice/device/hardware/status/summary",
        REBOOT_STATUS: "/dataservice/network/issues/rebootcount",
        CRASH: "/dataservice/device/crashlog/synced",
        CRASH_LOGS: "dataservice/device/crashlog/log",
        UNPLANNED_REBOOT_TABLE: "/dataservice/device/reboothistory/synced",
        COUNTER_URL: "dataservice/device/counters",
        CPUUSAGE: "/dataservice/statistics/system/cpu",
        MEMORYUSAGE: "/dataservice/statistics/system/memory",
        SYSTEM_AGGREGATION_URL: "/dataservice/statistics/system/aggregation",
        SYSTEM_STATS_URL: "/dataservice/statistics/system/",
        REALTIME_SYSTEM_STATUS_URL: "/dataservice/device/system/status?deviceId="
    }
      , e = "CPU (%)"
      , f = "Memory (%)"
      , g = "%"
      , h = {
        title: {
            text: null
        },
        lineWidth: .5
    }
      , i = {
        plotOptions: {
            series: {
                lineWidth: 2.5
            }
        }
    }
      , j = {
        customOptions: {
            yAxisUnit: g
        },
        title: {
            text: e
        },
        height: "45%",
        min: 0,
        max: 100,
        tickInterval: 50,
        lineWidth: .5
    }
      , k = {
        min: 0,
        max: 100,
        minRange: 1,
        tickInterval: 50,
        lineWidth: .5,
        labels: {
            enabled: !0
        },
        customOptions: {
            yAxisUnit: g
        },
        title: {
            text: f
        },
        top: "55%",
        height: "45%",
        offset: "0",
        opposite: !1
    }
      , l = {
        name: "mem_util",
        display: "Memory utilization",
        yAxis: 1
    }
      , m = {
        name: "cpu_used",
        display: "CPU utilization",
        yAxis: 0
    }
      , n = function(a, b, c) {
        "mem_util" !== b ? a.data = _.chain(a.data).reject(function(a) {
            return void 0 === a[b]
        }).map(function(a) {
            var c = 100 * a[b];
            return c > 100 ? c = 100 : "",
            a[b] = c,
            angular.extend(a, {
                prop: "cpu_used",
                cpu_used: a[b]
            })
        }).value() : "mem_util" === b && (a.data = _.map(a.data, function(a) {
            return a[b] = a[b] > 1 ? 100 : 100 * a[b],
            angular.extend(a, {
                prop: b
            })
        }));
        var d = _.reduce(a.data, function(a, c) {
            return a + c[b]
        }, 0);
        return a.totalAvg = a.data.length ? d / a.data.length : 0,
        a
    };
    return moment.relativeTimeThreshold("s", 60),
    moment.relativeTimeThreshold("m", 60),
    moment.relativeTimeThreshold("h", 24),
    moment.relativeTimeThreshold("d", 28),
    moment.relativeTimeThreshold("M", 12),
    {
        getQueryBuilderTimeComponent: function(a) {
            var b;
            return b = _.find(a, {
                property: "entry_time"
            }),
            angular.isDefined(b) ? b : void 0
        },
        getRebootStatus: function(b) {
            return a.get(d.REBOOT_STATUS + "?deviceIp=" + b)
        },
        getUnplannedRebootTableData: function(a) {
            return d.UNPLANNED_REBOOT_TABLE + "?deviceId=" + a
        },
        getCounterValues: function(b) {
            var c = d.COUNTER_URL + "?deviceId=" + b;
            return a.get(c)
        },
        getCrashTableData: function(a) {
            return d.CRASH + "?deviceId=" + a
        },
        getCrashLogs: function(b, c) {
            var e = d.CRASH_LOGS + "?deviceId=" + b + "&filename=" + c;
            return a.get(e)
        },
        getHardwareData: function(b) {
            var c = d.HARDWARE_DATA_URL + "?deviceId=" + b;
            return a.get(c)
        },
        getEnvironmentAPIURL: function(a) {
            return d.ENVIRONMENT + "/" + a
        },
        getMemoryService: function() {
            return l
        },
        getCpuService: function() {
            return m
        },
        getPlotOptions: function() {
            return i
        },
        getXAxisConfig: function() {
            return h
        },
        getYAxisConfig: function(a) {
            return "yAxisConfigCPU" === a ? j : "yAxisConfigMEM" === a ? k : void 0
        },
        getSystemQueryFields: function() {
            return a.get("dataservice/statistics/system/query/fields")
        },
        getTotalMemory: function(c) {
            var e = b.defer();
            return a.get(d.REALTIME_SYSTEM_STATUS_URL + c).then(function(a) {
                var b = null;
                a.data.length > 0 && (b = 1e3 * a.data[0].mem_total),
                e.resolve(b)
            }, function(a) {
                e.reject(a)
            }),
            e.promise
        },
        fetchRealTimeData: function(e, f, g) {
            var h = b.defer()
              , i = c.getCpuCount(f);
            return a.get(d.REALTIME_SYSTEM_STATUS_URL + e).then(function(a) {
                var b = [];
                if (a.data.length > 0) {
                    var c = 100 * a.data[0].min1_avg / i
                      , d = a.data[0].mem_used / a.data[0].mem_total * 100;
                    b.push({
                        count: a.data[0].total_cpu_count,
                        entry_time: a.data[0].lastupdated,
                        cpu_used: c > 100 ? 100 : c,
                        prop: "cpu_used"
                    }),
                    b.push({
                        count: 1,
                        entry_time: a.data[0].lastupdated,
                        mem_util: d > 100 ? 100 : d,
                        prop: "mem_util"
                    })
                }
                h.resolve(b)
            }, function(a) {
                h.reject(a)
            }),
            h.promise
        },
        appendFilterAggregation: function(b, c, d) {
            var e = angular.copy(b);
            if (e.query.rules.push({
                value: [c],
                field: "vdevice_name",
                type: "string",
                operator: "in"
            }),
            "between" === e.query.rules[0].operator)
                var f = this.getTimeDuration(e);
            return "between" === e.query.rules[0].operator && f.days > 0 || "last_n_hours" === e.query.rules[0].operator && parseInt(e.query.rules[0].value[0]) > 24 ? (e.aggregation = {
                metrics: [{
                    property: d,
                    type: "avg"
                }]
            },
            e = a.affixStatsAggregationHistogramUrl(e)) : (e.fields = ["entry_time", "count", d],
            e.sort = [{
                field: "entry_time",
                type: "date",
                order: "asc"
            }]),
            e
        },
        getChartData: function(c, e, f) {
            var g = b.defer();
            return angular.isDefined(c.aggregation) ? a.post(d.SYSTEM_AGGREGATION_URL, c).then(function(a) {
                a = n(a, e, f),
                g.resolve(a)
            }, function(a) {
                g.reject(a)
            }) : a.post(d.SYSTEM_STATS_URL, c).then(function(a) {
                a = n(a, e, f),
                g.resolve(a)
            }, function(a) {
                g.reject(a)
            }),
            g.promise
        },
        getCurrentTimeSelectionString: function(a) {
            var b = "Load average over ";
            if ("between" === a.query.rules[0].operator) {
                var c = this.getTimeDuration(a, !0);
                b += c
            } else if ("last_n_hours" === a.query.rules[0].operator) {
                var d = this.getTimeDuration(a);
                b += d > 24 ? d / 24 + " days" : 1 === d ? d + " hr" : d + " hrs"
            }
            return b
        },
        getTimeDuration: function(a, b) {
            if ("between" === a.query.rules[0].operator) {
                var c, d;
                return c = a.query.rules[0].value[0].split(" UTC")[0],
                d = a.query.rules[0].value[1].split(" UTC")[0],
                b ? moment.duration(moment(d).diff(moment(c))).humanize() : moment.duration(moment(d).diff(moment(c)))._data
            }
            if ("last_n_hours" === a.query.rules[0].operator)
                return parseInt(a.query.rules[0].value[0])
        }
    }
}
function hardwareHealthWidget(a, b, c, d, e, f, g, h) {
    return {
        restrict: "A",
        scope: {
            widget: "=",
            hardwareHealthFactory: "="
        },
        link: {
            pre: function(i, j) {
                function k(a) {
                    var b;
                    return !angular.isDefined(a) || a.length < 1 || (angular.forEach(a, function(a) {
                        angular.isDefined(b) && b || (b = !!h.allowReadAccess(a))
                    }),
                    b)
                }
                function l() {
                    f.get(i.widget.templateURL, {
                        cache: e
                    }).success(function(a) {
                        j.replaceWith(c(a)(i))
                    })
                }
                i.Math = g.Math,
                i.rbac = h,
                i.stateString = a.getStateString(b),
                i.hardwareHealthService = d,
                angular.isDefined(i.defaultModalTemplate) || (i.defaultModalTemplate = "app/dashboard/tenantDashboard/widgetDetails/partials/widgetDetailsModal.html"),
                i.$on("$destroy", function() {
                    angular.isDefined(i.modalInstance) && i.closeModal()
                }),
                i.title = i.hardwareHealthFactory.getWidgetTitle(i.widget),
                i.readAllowed = k(i.widget.permissions),
                l(),
                i.isStatusUnknown = function(a) {
                    var b = ["ok", "error", "down", "failed", "na"]
                      , c = _.findIndex(b, function(b) {
                        return angular.equals(b, a.toLowerCase())
                    });
                    return !(c > -1)
                }
                ,
                i.$watchCollection("widget.handleNoAPIResponse", function(a, b) {
                    !a || a.length < 1 || angular.equals(a, b) || (i.title = i.hardwareHealthFactory.getWidgetTitle(i.widget),
                    f.get("app/dashboard/tenantDashboard/partials/error-partial.html", {
                        cache: e
                    }).success(function(a) {
                        j.replaceWith(c(a)(i))
                    }))
                })
            }
        }
    }
}
function realTimeFactory(a, b, c, d) {
    var e = {
        DEVICE_DETAILS_URL: "/dataservice/device?deviceId=",
        INTERFACE_LIST: "/dataservice/device/interface/synced",
        VPN_LIST: "/dataservice/device/action/vpn"
    };
    return {
        getDevicePersonality: function(a) {
            var b = e.DEVICE_DETAILS_URL + a;
            return c.get(b)
        },
        getInterfaceList: function(a) {
            return c.get(e.INTERFACE_LIST + "?deviceId=" + a)
        },
        getVpnList: function() {
            return c.get(e.VPN_LIST)
        }
    }
}
function PacketCaptureService(a, b, c, d, e) {
    function f(a, b, f, g, h) {
        return H(n),
        c.post(d.URL_PACKET_CAPTURE_GET_SESSION, {
            deviceUUID: a,
            vpn: String(b),
            interface: f,
            type: g,
            source_ip: e.isUndefinedOrEmpty(h.sourceIP) ? void 0 : h.sourceIP,
            source_port: !_.isNull(h.sourcePort) && angular.isNumber(h.sourcePort) ? String(h.sourcePort) : void 0,
            destination_ip: e.isUndefinedOrEmpty(h.destinationIP) ? void 0 : h.destinationIP,
            destination_port: !_.isNull(h.destinationPort) && angular.isNumber(h.destinationPort) ? String(h.destinationPort) : void 0,
            protocol: _.isNull(h.protocol) || e.isUndefinedOrEmpty(h.protocol) ? void 0 : String(h.protocol)
        }, {
            timeout: 6e4
        }).then(function(a) {
            return H(o),
            a
        })
    }
    function g() {
        return H(r),
        c.get(d.URL_PACKET_CAPTURE_START + F.sessionId).then(function(a) {
            return H(s),
            a
        })
    }
    function h() {
        return H(t),
        c.get(d.URL_PACKET_CAPTURE_STOP + F.sessionId).then(function(a) {
            return H(u),
            a
        })
    }
    function i(b) {
        return H(b ? p : y),
        angular.isDefined(E) && (a.cancel(E),
        E = null),
        c.get(d.URL_PACKET_CAPTURE_DISABLE_SESSION + F.sessionId).then(function(a) {
            return H(b ? q : z),
            a
        }).catch(function(a) {
            F.sessionId = void 0,
            H(A, a)
        })
    }
    function j() {
        return H(w),
        c.downloadFile(d.URL_PACKET_CAPTURE_DOWNLOAD + F.sessionId, 6e4)
    }
    function k() {
        return c.get(d.URL_PACKET_CAPTURE_STATUS + F.sessionId)
    }
    function l() {
        k().then(function(b) {
            if (angular.equals(b.fileDownloadStatus, C))
                H(v, b),
                a.cancel(E),
                E = null;
            else {
                if (angular.equals(b.fileDownloadStatus, D))
                    return H(B, b),
                    a.cancel(E),
                    E = null,
                    b;
                E = a(function() {
                    l()
                }, 1e4)
            }
        }, function(b) {
            H(B, b),
            a.cancel(E),
            E = null
        })
    }
    const m = "STATE_READY"
      , n = "STATE_REQUESTING_SESSION_ID"
      , o = "STATE_RECEIVED_SESSION_ID"
      , p = "STATE_REQUESTING_OLD_SESSIONEND"
      , q = "STATE_COMPLETED_OLD_SESSIONEND"
      , r = "STATE_REQUESTING_PACKET_CAPTURE"
      , s = "STATE_INPROGRESS_PACKETCAPTURE"
      , t = "STATE_STOPPING_PACKETCAPTURE"
      , u = "STATE_COMPLETED_PACKETCAPTURE"
      , v = "STATE_FILE_READY"
      , w = "STATE_REQUESTING_DOWNLOAD"
      , x = "STATE_COMPLETED_DOWNLOAD"
      , y = "STATE_REQUESTING_SESSIONEND"
      , z = "STATE_COMPLETED_SESSIONEND"
      , A = "STATE_SESSIONEND_ERROR"
      , B = "STATE_ERROR"
      , C = "COMPLETED"
      , D = "ERROR";
    var E, F = null, G = function() {
        F = {
            state: m,
            callbackStateChange: null,
            sessionId: null
        }
    }, H = function(a, b) {
        F.state = a,
        F.callbackStateChange(a, b)
    };
    return G(),
    {
        start: function(b, c, d, e, h) {
            var j = this;
            return _.defaults(h, {
                onChangeState: function() {}
            }),
            G(),
            F.callbackStateChange = h.onChangeState,
            f(b, c, d, e, h).then(function(f) {
                if (f.isOwner && !f.isNewSession)
                    return F.sessionId = f.sessionId,
                    i(!0).then(function(f) {
                        a(function() {
                            j.start(b, c, d, e, h)
                        }, 2e3)
                    });
                if (f.isOwner || f.isNewSession)
                    F.sessionId = f.sessionId,
                    g().then(function() {
                        return l()
                    });
                else {
                    F.sessionId = void 0;
                    var k = {};
                    k.message = "Already pcap session is active and started",
                    H(B, k)
                }
            }).catch(function(a) {
                H(B, a)
            })
        },
        stop: function(b) {
            return a.cancel(E),
            E = null,
            h().then(function() {
                if (!angular.isDefined(E) || _.isNull(E))
                    return l()
            }).catch(function(a) {
                console.error("An error occurred: ", a),
                H(B, a)
            })
        },
        download: function() {
            return j().then(function(a) {
                return H(x),
                i(!1)
            }, function(a) {
                return a
            }).then(function() {
                H(m)
            })
        },
        forceStop: function() {
            return i(!1)
        },
        getSession: function() {
            return F
        },
        getState: function() {
            return F.state
        },
        setState: function(a) {
            H(a)
        },
        resetSession: function() {
            G()
        }
    }
}
function SimulateFlowsService(a, b, c, d, e, f, g, h, i, j) {
    return {
        getSimulateFlows: function(a, b, e) {
            if ("service" === e)
                var f = d.SIMULATE_SERVICE_FLOWS + "/" + a;
            else if ("tunnel" === e)
                var f = d.SIMULATE_TUNNEL_FLOWS + "/" + a;
            return c.post(f, {
                deviceIp: a,
                vpn: b.vpn,
                interface: b.interface,
                sourceIp: b.sourceIp,
                destIp: b.destIp,
                protocol: b.protocol,
                all: b.all,
                sourcePort: b["source-port"],
                destPort: b["dest-port"],
                dscp: b.dscp,
                app: b.app
            }, {
                timeout: 6e5
            })
        },
        getVpnList: function() {
            return c.get(d.VPN_LIST)
        },
        getInterfaceList: function(a) {
            return c.get(d.INTERFACE_LIST + "?deviceId=" + a)
        },
        getApplicationList: function() {
            return c.get(d.APPLICATION_LIST)
        }
    }
}
function SpeedTestService(a, b, c, d, e, f) {
    function g(c, d, e, f, g, h) {
        return q(o.STATE_REQUESTING_SESSIONID),
        a.post(b.URL_SPEED_TEST_GET_SESSION, {
            deviceUUID: c,
            sourceIp: d,
            sourceColor: e,
            destinationIp: f,
            destinationColor: g,
            port: h
        }, {
            timeout: 6e5
        }).then(function(a) {
            return q(o.STATE_COMPLETED_SESSIONEND),
            a
        })
    }
    function h() {
        return q(o.STATE_REQUESTING_SPEEDTEST),
        a.get(b.URL_SPEED_TEST_START + n.sessionId).then(function(a) {
            return q(o.STATE_INPROGRESS_SPEEDTEST, {
                timeout: m
            }),
            a
        })
    }
    function i() {
        var f = this;
        return q(o.STATE_REQUESTING_STATUS),
        a.get(b.URL_SPEED_TEST_LOGS + n.sessionId + "?logId=" + n.logId).then(function(a) {
            if (c.checkNestedProperty(a.data, "0")) {
                if (a.data = _.sortBy(a.data, "logid"),
                a.data[a.data.length - 1].error && !angular.equals(a.data[a.data.length - 1].error, "None"))
                    return q(o.STATE_ERROR, {
                        error: a.data[a.data.length - 1].error
                    }),
                    a;
                q(o.STATE_COMPLETED_STATUS, {
                    downloadSpeed: a.data[a.data.length - 1].down_speed,
                    uploadSpeed: a.data[a.data.length - 1].up_speed,
                    currentSpeedUpdate: n.lastSpeedUpdated
                }),
                a.data[a.data.length - 1].status && "completed" !== a.data[a.data.length - 1].status.toLowerCase() && r(),
                n.logId = a.data[a.data.length - 1].logid + 1,
                angular.isDefined(a.data[a.data.length - 1].status) && "completed" === a.data[a.data.length - 1].status && "download" === n.lastSpeedUpdated && (clearTimeout(n.sessionTimeoutID),
                s())
            }
            return a
        }).catch(function(a) {
            e.clear(),
            angular.isObject(a) && c.checkNestedProperty(a, "error", "details") ? (d.error("Error occurred while enabling log: " + a.error.message + ":" + a.error.details),
            e.error(a.error.message + ": " + a.error.details)) : (d.info("API error response needs to be updated to conform to company guidelines" + a.config.url),
            e.error($scope.debugLogOutput.selectedLogFile + " Streaming failed")),
            f.forceStop()
        })
    }
    function j() {
        return a.get(b.URL_SPEED_TEST_STOP + n.sessionId).then(function(a) {
            return q(o.STATE_COMPLETED_SPEEDTEST),
            a
        })
    }
    function k() {
        return q(o.STATE_REQUESTING_SESSIONEND),
        new Promise(function(a) {
            setTimeout(function() {
                q(o.STATE_COMPLETED_SESSIONEND),
                setTimeout(function() {
                    q(o.STATE_READY),
                    p()
                }, 0),
                a()
            }, 0)
        }
        )
    }
    var l = 2e3
      , m = 6e4
      , n = null
      , o = {
        STATE_READY: "STATE_READY",
        STATE_REQUESTING_SESSION_ID: "STATE_REQUESTING_SESSION_ID",
        STATE_COMPLETED_SESSION_ID: "STATE_RECEIVED_SESSION_ID",
        STATE_REQUESTING_SPEEDTEST: "STATE_REQUESTING_SPEEDTEST",
        STATE_INPROGRESS_SPEEDTEST: "STATE_INPROGRESS_SPEEDTEST",
        STATE_STOPPING_SPEEDTEST: "STATE_STOPPING_SPEEDTEST",
        STATE_COMPLETED_SPEEDTEST: "STATE_COMPLETED_SPEEDTEST",
        STATE_REQUESTING_STATUS: "STATE_REQUESTING_STATUS",
        STATE_COMPLETED_STATUS: "STATE_COMPLETED_STATUS",
        STATE_REQUESTING_SESSIONEND: "STATE_REQUESTING_SESSIONEND",
        STATE_COMPLETED_SESSIONEND: "STATE_COMPLETED_SESSIONEND",
        STATE_REQUESTING_OLD_SESSIONEND: "STATE_REQUESTING_OLD_SESSIONEND",
        STATE_ERROR: "STATE_ERROR"
    }
      , p = function() {
        n = {
            state: o.STATE_READY,
            callbackStateChange: null,
            sessionId: null,
            pollingIntervalID: null,
            sessionTimeoutID: null,
            logId: 2,
            lastSpeedUpdated: "download"
        }
    }
      , q = function(a, b) {
        n.state = a,
        n.callbackStateChange(a, b)
    }
      , r = function() {
        return angular.equals(n.lastSpeedUpdated, "download") ? void (n.lastSpeedUpdated = "upload") : void (n.lastSpeedUpdated = "download")
    }
      , s = function(a, b) {
        clearInterval(n.pollingIntervalID),
        q(o.STATE_STOPPING_SPEEDTEST),
        j().then(k).then(a).catch(b)
    };
    return p(),
    {
        start: function(a, b, c, e, k, r, t) {
            var u = this;
            return _.defaults(t, {
                onChangeState: function() {}
            }),
            p(),
            n.callbackStateChange = t.onChangeState,
            g(a, b, c, e, k, r).then(function(d) {
                if (d.isOwner && !d.isNewSession)
                    n.sessionId = d.sessionId,
                    j().then(function(d) {
                        f(function() {
                            u.start(a, b, c, e, k, r, t)
                        }, 2e3)
                    });
                else {
                    if (d.isOwner || d.isNewSession)
                        return n.sessionId = d.sessionId,
                        h().then(function() {
                            return n.pollingIntervalID = setInterval(i.bind(u), l),
                            new Promise(function(a, b) {
                                n.sessionTimeoutID = setTimeout(function() {
                                    s(a, b)
                                }, m)
                            }
                            )
                        });
                    n.sessionId = void 0;
                    var g = {};
                    g.message = "Speed test session is already in progress.",
                    q(o.STATE_ERROR, g)
                }
            }).catch(function(a) {
                d.error("An error occurred: ", a),
                q(o.STATE_ERROR, {
                    error: a
                })
            })
        },
        getButtonLabel: function(a) {
            switch (a) {
            default:
            case o.STATE_READY:
                return "";
            case o.STATE_REQUESTING_SESSION_ID:
                return "Requesting Session ID ...";
            case o.STATE_COMPLETED_SESSION_ID:
                return "Received Session ID ...";
            case o.STATE_REQUESTING_SPEEDTEST:
                return "Initiating Speed Test ...";
            case o.STATE_INPROGRESS_SPEEDTEST:
                return "Speed Test In Progress ...";
            case o.STATE_STOPPING_SPEEDTEST:
                return "Stopping Speed Test ...";
            case o.STATE_COMPLETED_SPEEDTEST:
                return "Completed Speed Test ...";
            case o.STATE_REQUESTING_STATUS:
                return "Speed Test In Progress ...";
            case o.STATE_COMPLETED_STATUS:
                return "Speed Test In Progress ...";
            case o.STATE_REQUESTING_SESSIONEND:
                return "Ending Session ...";
            case o.STATE_COMPLETED_SESSIONEND:
                return "Session Ended"
            }
        },
        forceStop: function() {
            clearTimeout(n.sessionTimeoutID),
            clearInterval(n.pollingIntervalID),
            q(o.STATE_STOPPING_SPEEDTEST),
            angular.isDefined(n.sessionId) && null !== n.sessionId ? j().then(k) : k()
        },
        getConfiguredBandwidth: function(c, d) {
            return a.get(b.URL_SPEED_TEST_BANDWIDTH + "?circuit=" + d + "&deviceUUID=" + c)
        },
        getCompletedSpeedTest: function(c) {
            var d = {
                query: {
                    condition: "AND",
                    rules: [{
                        value: [c],
                        field: "source_local_ip",
                        type: "string",
                        operator: "in"
                    }, {
                        value: ["completed"],
                        field: "status",
                        type: "string",
                        operator: "in"
                    }]
                },
                size: 1e4
            };
            return a.post(b.URL_SPEED_TEST_STATS, d)
        },
        getSession: function() {
            return n
        },
        getState: function() {
            return n.state
        },
        getStates: function() {
            return o
        },
        resetSession: function() {
            p()
        }
    }
}
function geographyController(a, b, c, d, e, f, g) {
    a.loadingMarkerData = !1,
    a.loadingPathData = !1,
    a.filterOverlayVisible = !1,
    a.filterDataForLinks = "",
    a.filterDataForDevices = "",
    a.showLabelsForMarkers = !1,
    a.mapSearchProperties = [],
    a.deviceCountWithNoGeoCoords = 0,
    a.markersForLeaflet = [],
    a.markersFiltered = [],
    a.loadingMapData = a.loadingMarkerData && a.loadingPathData,
    a.filteredGroup = [],
    a.selectedLinkFilters = [],
    a.groupNames = [],
    a.mapRendered = !1,
    a.markersLoaded = !1,
    a.map = "",
    a.mapFilters = "",
    a.pathDataInitialized = !1,
    a.ignoreLinkUpdates = !1,
    a.taggedSearchObject = new g(a.markersFiltered,a.mapSearchProperties),
    c.setGeoControllerScope(a),
    c.setBaseConfigData(),
    c.loadMapFiltersJSON(),
    angular.element("#googleMapsAPIElement").length < 1 ? (f.googleMapsAPIDone = !1,
    window.mapsInitialize = function() {
        f.googleMapsAPIDone = !0,
        c.appendVipMapDirective()
    }
    ,
    c.loadScript(mapsInitialize)) : c.appendVipMapDirective(),
    a.loadGroupNames = function() {
        return c.getGroupData().then(function(b) {
            b && b.data.length > 0 && (angular.extend(a.groupNames, b.data),
            a.filteredGroup.push(a.groupNames[0]),
            a.ignoreLinkUpdates = !1,
            a.taggedSearchObject.clearTagsCache(),
            c.loadMapData(a.filteredGroup[0].mapuri, !1))
        }, function(a) {
            d.error("Error while retrieving group names. " + a)
        }),
        !0
    }
    ,
    a.filterOnGroupSelected = function(b, d, e) {
        a.ignoreLinkUpdates = !1,
        a.taggedSearchObject.clearTagsCache(),
        c.loadMapData(b.mapuri, !0)
    }
    ,
    a.$watch("filterDataForDevices", function(b) {
        angular.isDefined(b) && isArray(b) && b.length > 0 && (angular.isDefined(a.selectedDeviceFilters) && a.selectedDeviceFilters.length > 0 ? a.selectedDeviceFilters.reset() : a.selectedDeviceFilters = [],
        angular.forEach(b, function(b) {
            var c = _.filter(b.options, {
                selected: !0
            });
            angular.isDefined(c) && c.length > 0 && angular.forEach(c, function(b) {
                a.selectedDeviceFilters.push(b)
            })
        }),
        a.markersLoaded && c.updateOnSelectedDeviceFilters(a.selectedDeviceFilters))
    }, !0),
    a.$watch("filterDataForLinks", function(b) {
        angular.isDefined(b) && isArray(b) && b.length > 0 && (angular.isDefined(a.selectedLinkFilters) && a.selectedLinkFilters.length > 0 ? a.selectedLinkFilters.reset() : a.selectedLinkFilters = [],
        angular.forEach(b, function(b) {
            var c = _.filter(b.options, {
                selected: !0
            });
            angular.isDefined(c) && c.length > 0 && angular.forEach(c, function(b) {
                a.selectedLinkFilters.push(b)
            })
        }),
        a.pathDataInitialized && (c.clearPathLinks(),
        c.updateOnSelectedLinkFilters()))
    }, !0),
    a.$watchCollection("taggedSearchObject.getSearchTagsCache()", function(a, b) {
        angular.equals(a, b) || (c.clearPathLinks(),
        c.updateOnMarkersFilterChange())
    }),
    a.checkAll = function() {
        a.selectedLinkFilters = angular.copy(a.filterDataForLinks),
        a.selectedDeviceFilters = angular.copy(a.filterDataForDevices)
    }
    ,
    a.resetFilteredGroup = function() {
        a.filteredGroup.reset(),
        a.filteredGroup.push(a.groupNames[0]),
        a.filterOnGroupSelected(a.groupNames[0])
    }
    ,
    a.refreshGeographyView = function() {
        c.resetAllFilters(),
        a.resetFilteredGroup(),
        a.showLabelsForMarkers = !1
    }
    ,
    a.deleteTag = function(a, b, c) {
        var d, e = c[a];
        angular.forEach(b, function(a) {
            d || (d = _.find(a.options, {
                id: e.id
            }))
        }),
        angular.isDefined(d) && (d.selected = !1)
    }
    ,
    a.showDevicesWithOutGeoCoordinates = function(a, b, c) {
        e.show({
            templateUrl: a,
            controller: b,
            targetEvent: c
        })
    }
    ,
    a.$on("windowResizeEvent", function() {
        c.updateToFitBounds()
    }),
    a.$on("$destroy", function() {
        c.geographyServerEventHandler("unsubscribe", "device"),
        c.geographyServerEventHandler("unsubscribe", "device-link")
    })
}
function MonitorController(a) {
    console.log("hi this is MonitorController")
}
function AboutController(a, b, c, d, e, f) {
    a.stateString = b.getStateString(c),
    a.about = {},
    d.getData().then(function(b) {
        a.about.viptelaLogo = b.data.logo,
        a.about.softWareName = b.data.title,
        a.about.softwareVersion = b.data.version,
        a.about.applicationVersion = b.data.applicationVersion,
        a.about.copyrightText = b.data.copyright,
        a.about.time = b.data.time,
        a.about.timeZone = b.data.timeZone,
        a.about.applicationServer = b.data.applicationServer
    }, function(a) {
        f.confirm(a)
    }),
    a.ok = function() {
        e.cancel()
    }
}
function aboutService(a, b) {
    var c = "dataservice/client/about";
    return {
        getData: function() {
            return a.get(c)
        }
    }
}
function ProfileController(a, b, c, d) {
    a.user = c.getUserName(),
    a.open = function(b) {
        var c = d.show({
            templateUrl: "app/nav/profile/changePasswordTemplate.html",
            controller: "ChangePasswordController",
            scope: a,
            preserveScope: !0,
            targetEvent: b
        });
        c.then(function(a) {}, function() {})
    }
}
function SidebarController(a, b, c, d, e) {
    function f(a) {
        var c = a.name.split(".")[1];
        "config" === c ? c = "configuration" : "admin" === c ? c = "administration" : "device" === c && (c = m.text);
        var d = {
            text: c.capitalizeGivenLetter(0)
        };
        return "vanalytics" === c && (d.text = "vAnalytics"),
        angular.isDefined(_.filter(b.sidebarMenu.menu, d)) ? _.filter(b.sidebarMenu.menu, d) : {
            id: null
        }
    }
    function g() {
        var a = $(".side-nav-inner .nav .active")[0]
          , c = $(a).index();
        return angular.isDefined(b.sidebarMenu.menu[c]) ? b.sidebarMenu.menu[c] : {
            id: null
        }
    }
    function h(a) {
        angular.forEach(s, function(b, c) {
            a !== c && (s[c] = !0)
        })
    }
    function i(a) {
        if (angular.isDefined(n)) {
            if (n !== a) {
                var b = $("#" + n.id).children("em");
                b.removeClass(n.icon + "-hover"),
                b.addClass(n.icon),
                n = a
            }
        } else
            n = a;
        return i
    }
    function j(a, b, c) {
        $(".open").removeClass("open"),
        i(b);
        var d = $("#" + b.id);
        if (s[a])
            d.closest("li").addClass("open"),
            d.children("em").removeClass(b.icon),
            d.children("em").addClass(b.icon + "-hover");
        else {
            if (d.closest("li").removeClass("open"),
            d.closest("li").hasClass("open"))
                return;
            d.children("em").removeClass(b.icon + "-hover"),
            d.children("em").addClass(b.icon)
        }
    }
    function k(a, c, d) {
        $(".open").removeClass("open"),
        i(d),
        s[a] ? ($(c.target).closest("li").addClass("open"),
        b.addHoverClass(c, d)) : ($(c.target).closest("li").removeClass("open"),
        b.removeHoverClass(c, d))
    }
    function l() {
        return p.hasClass("side-nav-collapsed")
    }
    var m, n, o = a.$state.current.name, p = ($(window),
    $("body")), q = a.$on("$stateChangeStart", function(c, d, e, h, i) {
        if (angular.equals(d.name, "banner"))
            return !1;
        if (d.name.split(".").slice(0, 2).join() != h.name.split(".").slice(0, 2).join()) {
            o = d.name;
            var j = f(d)[0]
              , k = g();
            if (!$("#" + j.id).closest("li").hasClass("open") && j.id !== k.id) {
                var l = _.findIndex(b.sidebarMenu.menu, j);
                b.toggleCollapse(l, j, void 0, k)
            }
            a.$broadcast("closeSidebarMenu")
        }
    });
    b.sidebarMenu = e.getSidebarMenu();
    var r = function(a) {
        if (a) {
            if (a.sref && "#" != a.sref) {
                var b = c.$current.parent.self.name;
                if (b.match(/[^.]*/g).length > 4) {
                    b = b.match(/[^.]*/g);
                    for (var e = "", f = 0; f <= 4; f++)
                        d.isUndefinedOrEmpty(b[f]) && (b[f] = "."),
                        e += b[f];
                    return a.sref.search(e) >= 0
                }
                return c.is(a.sref)
            }
            var g = !1;
            return angular.forEach(a.submenu, function(a) {
                r(a) && (g = !0)
            }),
            g
        }
    };
    b.getMenuItemPropClasses = function(a) {
        if (r(a)) {
            if ("#" !== a.sref && a.sref.indexOf("app.dashboard") < 0)
                return "active";
            if (angular.isDefined(m)) {
                if (m !== a) {
                    var b = $("#" + m.id).children("em");
                    b.removeClass(m.icon + "-active"),
                    b.removeClass(m.icon + "-hover"),
                    b.addClass(m.icon),
                    m = a
                }
            } else
                m = a;
            var c = $("#" + a.id).children("em");
            return c.removeClass(a.icon),
            c.removeClass(a.icon + "-hover"),
            c.addClass(a.icon + "-active"),
            "active"
        }
        return ""
    }
    ;
    var s = [];
    b.addCollapse = function(a, b) {
        s[a] = !r(b)
    }
    ,
    b.isCollapse = function(a) {
        return s[a]
    }
    ,
    b.toggleCollapse = function(a, b, c, d) {
        return angular.isDefined(c) && c.stopPropagation(),
        !!l() || (void 0 === typeof s[a] || (h(a),
        angular.isDefined(c) ? k(a, c, b) : j(a, b, d),
        s[a] = !s[a],
        !0))
    }
    ,
    b.addHoverClass = function(a, b) {
        $(a.target).children("em").removeClass(b.icon),
        $(a.target).children("em").addClass(b.icon + "-hover")
    }
    ,
    b.removeHoverClass = function(a, b) {
        $(a.target).closest("li").hasClass("open") || ($(a.target).children("em").removeClass(b.icon + "-hover"),
        $(a.target).children("em").addClass(b.icon))
    }
    ,
    b.siderBarRootNodeClickHandler = function(a) {
        return !(!angular.isDefined(a) || "#" === a) && void c.go(a)
    }
    ,
    b.$on("$destroy", function() {
        q()
    })
}
function sidebar(a, b) {
    return {
        restrict: "EA",
        template: '<nav class="sidebar" data-ng-transclude></nav>',
        transclude: !0,
        replace: !0,
        link: function(c, d, e) {
            b.bind("click", function(a) {
                if (a.stopPropagation(),
                $("body").hasClass("side-nav-collapsed")) {
                    if ($(a.target).closest(".side-nav-inner").length > 0)
                        return !1;
                    var b = $(".side-nav ul");
                    angular.forEach(b, function(a) {
                        $(a).removeClass("nav-floating"),
                        $(a).css("position", "")
                    })
                }
            }),
            c.$on("closeSidebarMenu", function() {
                $(".sidebar-subnav.nav-floating").remove(),
                $(".sidebar li.open").removeClass("open")
            }),
            c.showCollapsedSubMenu = function(b) {
                if ($("body").hasClass("side-nav-collapsed")) {
                    var c = $(b.currentTarget);
                    if ("undefined" !== c) {
                        var d = c.find("ul");
                        if ("undefined" !== d && d.length) {
                            var e = d.clone();
                            e.children()[0].remove(),
                            e[0].children.length && e.prepend("<div class='float-menu-header'>" + e[0].id + "</div>"),
                            _.each(e.children("li"), function(a) {
                                a.firstElementChild.attributes.id.value = a.firstElementChild.attributes.id.value + "_collapsed"
                            });
                            var f = e.appendTo($(".side-nav"));
                            $(".sidebar-subnav.nav-floating").remove(),
                            $(".float-menu-header").on("click", function(a) {
                                a.stopPropagation()
                            });
                            var g = c.position().top - $(".sidebar").scrollTop()
                              , h = $(a).height();
                            f.addClass("nav-floating").css({
                                position: "absolute",
                                top: g,
                                bottom: f.outerHeight(!0) + g > h ? 0 : "auto"
                            }),
                            f.on("mouseleave", function() {
                                f.remove()
                            })
                        }
                    }
                }
            }
        }
    }
}
function sidebarMenuService(a, b, c, d) {
    return {
        getSideMenu: function(c) {
            return angular.equals(c.userMode.mode, "provider") ? a.get(b.PROVIDER_NAVIGATION_TREE) : angular.equals(c.userMode.mode, "multiTenant-provider") ? a.get(b.PROVIDER_TENANT_NAVIGATION_TREE) : angular.equals(c.userMode.mode, "multiTenant-tenant") ? a.get(b.TENANT_NAVIGATION_TREE) : a.get(b.CLIENT_NAVIGATION_TREE)
        }
    }
}
function TopNavController(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x) {
    function y() {
        E.getTenants().then(function(b) {
            a.tenantOptions = b,
            "multiTenant-provider" === a.userMode.mode ? a.tenantOptions.selected = _.find(a.tenantOptions, function(a) {
                return a.tenantId === c.params.tenantId
            }) : a.tenantOptions.selected = {}
        }, function(a) {
            n.confirm(a)
        })
    }
    function z() {
        a.activeAlarmsCount = 0,
        v.getAlarmsCount().then(function(b) {
            a.activeAlarmsCount = b.data[0].count >= 1e3 ? "999+" : b.data[0].count
        }, function(a) {
            n.confirm(a),
            x.error("Failed to get active alarms count")
        })
    }
    function A() {
        a.activeTasksCount = 0,
        w.getTasksCount().then(function(b) {
            a.activeTasksCount = b.data.activeTaskCount >= 1e3 ? "999+" : b.data.activeTaskCount
        }, function(a) {
            n.confirm(a),
            x.error("Failed to get active tasks count")
        })
    }
    h.setTopNavBarHeight($(".topnavbar").height());
    var B = i.returnEventsEnum()
      , C = i.returnViewsEnum()
      , D = l.getUserProfile();
    a.userMode = l.getUserMode();
    var E = k.getInstance();
    a.listTenantPermissions = !1,
    a.globalHelp = q.HELP_BASE_URL,
    s.put("cloudXIconTemplateForTopNav.html", '<a href="javascript:void(0)" data-ng-if="showCloudExpressIcon"\n   data-toggle="dropdown" dropdown-animate=""\n   class="dropdown-toggle navicon"\n   id="topnav_cloud_on_ramp">\n  <md-icon md-font-set="material-icons" class="material-icons md-18">cloud</md-icon>\n</a>\n<!-- START Dropdown menu-->\n<ul class="dropdown-menu animated" id="cloud_on_ramp_dropdown">\n  <li class="arrow_box">\n    <!-- START list group-->\n    <div class="list-group">\n      <!-- list item-->\n      <a href="javascript:void(0)" ng-click="goToCloudExpress()"\n         class="list-group-item"\n         id="topnav_cor_cloud_express">\n        <p class="m0">\n          Cloud OnRamp for SaaS (Cloud Express)\n        </p>\n      </a>\n\n      <a href="javascript:void(0)" ng-click="goToCloudOnRamp()"\n         class="list-group-item"\n         id="topnav_cor_cloud_on_ramp">\n        <p class="m0">\n          Cloud OnRamp for IaaS (AWS)\n        </p>\n      </a>\n    </div>\n    <!-- END list group-->\n  </li>\n</ul>\n<!-- END Dropdown menu-->'),
    a.eventPoll = i,
    a.user.name = D.profile.user,
    a.vmanageserver = D.profile.server,
    d.setUserName(D.profile.user),
    angular.isDefined(D.profile.roles) && D.profile.roles.length > 0 && d.setUserGroup(D.profile.roles.join()),
    D.profile.description && d.setName(D.profile.description),
    angular.isDefined(D.profile.externalUser) && d.setExternalUserDetails(D.profile.externalUser),
    a.showCloudExpressIcon = l.cloudExpressRBAC("topNav"),
    a.cloudExpressEnabled = l.getCloudExpressStatus();
    var F = !1;
    if (("provider" === a.userMode.mode || "multiTenant-provider" === a.userMode.mode) && _.indexOf(a.userMode.roles, "ListTenants") !== -1) {
        var G = new p(C.TOP_NAVIGATION,[B.TENANT]);
        i.subscribe(G),
        a.listTenantPermissions = !0,
        y(),
        a.$on("tenant_event", function(a, b) {
            y()
        })
    }
    a.switchTenant = function(a) {
        return i.stopServerPolling(),
        !F && void i.unRegisterEventPoll().then(function() {
            F = !1,
            angular.isDefined(a) ? c.go("app.dashboard", {
                tenantId: a.tenantId
            }, {
                reload: !0
            }) : c.go("app.dashboard", {
                tenantId: D.profile.providerId
            }, {
                reload: !0
            })
        }, function(b) {
            F = !1,
            angular.isDefined(a) ? c.go("app.dashboard", {
                tenantId: a.tenantId
            }, {
                reload: !0
            }) : c.go("app.dashboard", {
                tenantId: D.profile.providerId
            }, {
                reload: !0
            })
        })
    }
    ,
    b.$on("switchToTenantView", function(b, c) {
        angular.isDefined(c.tenant) && a.switchTenant(c.tenant)
    }),
    a.open = function(a) {
        var b = j.show({
            templateUrl: "app/nav/about/aboutTemplate.html",
            controller: "AboutController",
            targetEvent: a,
            closeTo: angular.element(document.querySelector("#more_info"))
        });
        b.then(function(a) {}, function() {})
    }
    ,
    a.logOutUser = function() {
        b.$broadcast("logoutUser", {
            url: "/logout.html?nocache=" + (new Date).getTime()
        })
    }
    ;
    var H = new p(C.TOP_NAVIGATION,[B.ALARMS]);
    i.subscribe(H),
    a.activeAlarmsCount = 0,
    a.$on("alarm_event", function(a, b) {
        z()
    }),
    a.alarmIconClickHandler = function() {
        a.$emit("sliderNavUpdate", {
            templateStr: '<activity-manager activity-manager-obj="vSliderNavCtrl.sliderNavObj"></activity-manager>',
            classInstance: new e
        })
    }
    ,
    z();
    var I = new p(C.TOP_NAVIGATION,[B.ACTIVITY]);
    i.subscribe(I),
    a.activeTasksCount = 0,
    a.$on("activity_event", function(a, b) {
        A()
    }),
    a.taskIconClickHandler = function() {
        a.$emit("sliderNavUpdate", {
            templateStr: '<activity-manager activity-manager-obj="vSliderNavCtrl.sliderNavObj"></activity-manager>',
            classInstance: new f
        })
    }
    ,
    A(),
    a.goToStatusPage = function(a) {
        c.go("app.device.status", {
            activity: a.action,
            pid: a.processId
        }),
        $("#status_dropdown").removeClass("open")
    }
    ,
    a.goToCloudExpress = function() {
        c.go("app.config.cloudExpress.dashboard")
    }
    ,
    a.goToCloudOnRamp = function() {
        c.go("app.config.cloudOnRamp.dashboard")
    }
    ,
    a.helpInformation = o.getHelpDetails(),
    a.$watchCollection("helpInformation", function(b, c) {
        a.featureHelp = b.text,
        a.featureHelpUrl = b.url
    })
}
function topNavService(a, b, c) {
    var d = "dataservice/admin/user/profile/password"
      , e = {
        name: "",
        username: "",
        usergroup: "",
        isExternalUser: !1
    };
    return {
        getTenants: function() {
            return a.get(c.MANAGE_TENANT_URL)
        },
        setName: function(a) {
            e.name = a
        },
        getName: function() {
            return e
        },
        setExternalUserDetails: function(a) {
            e.isExternalUser = a
        },
        getExternalUserDetails: function(a) {
            return e.isExternalUser
        },
        setUserName: function(a) {
            e.username = a
        },
        getUserName: function() {
            return e
        },
        setUserGroup: function(a) {
            e.usergroup = a
        },
        getUserGroup: function() {
            return e
        },
        vEdgeListUpload: function(b, c, d) {
            return a.uploadFiles(UPLOAD_VEDGE_LIST_URL, b, d, null, c)
        },
        updateDevice: function(b, c) {
            var d = UPDATE_DEVICE_URL + "/" + b;
            return a.put(d, c)
        },
        changePassword: function(b) {
            return a.put(d, b)
        }
    }
}
function tenantManagementService(a, b, c, d) {
    return {
        getTenantList: function() {
            return a.get(b.MANAGE_TENANT_URL)
        },
        getTenantDetails: function(c) {
            var d = b.MANAGE_TENANT_URL + "/" + c;
            return a.get(d)
        },
        createTenant: function(c) {
            return a.post(b.ADD_TENANT_URL, c)
        },
        editTenantDetails: function(c, d) {
            var e = b.MANAGE_TENANT_URL + "/" + c;
            return a.put(e, d)
        },
        deleteTenant: function(c, d) {
            var e = b.MANAGE_TENANT_URL + "/" + c + "/delete";
            return a.post(e, d, {
                timeout: 3e5
            })
        }
    }
}
function AdminTechListController(a, b, c, d, e, f, g, h) {
    a.showErrorSection = !1,
    a.adminTechList = g,
    a.download = function(a) {
        return h.downloadFile("/dataservice/device/tools/admintech/download/" + a, 6e4).then(function() {}, function() {
            e.error("Unable to download admin-tech information")
        }),
        !1
    }
    ,
    a.delete = function(b, c) {
        d.deleteAdminTech(b).then(function(b) {
            a.adminTechList.splice(c, 1)
        }, function(b, c, d, e) {
            a.showErrorSection = !0,
            a.errorMessage = b
        })
    }
    ,
    a.close = function() {
        c.cancel()
    }
}
function GenerateAdminTechController(a, b, c, d, e, f, g, h, i) {
    a.showErrorSection = !1,
    a.selectedDevice = d.entity.deviceId,
    a.localSystemIP = d.entity["local-system-ip"],
    a.include = {
        log: !0,
        core: !1,
        tech: !1
    };
    var j = ""
      , k = !0;
    a.adminTechModalObject = {
        state: "init",
        title: "Generate admin-tech File"
    },
    "reachable" === d.entity.reachability ? (a.reachablility = !0,
    a.generate = function() {
        a.adminTechModalObject = {
            state: "generate",
            title: "Generate admin-tech File"
        };
        var b = {
            deviceIP: d.entity.deviceId,
            "exclude-cores": !a.include.core,
            "exclude-tech": !a.include.tech,
            "exclude-logs": !a.include.log
        };
        e.generateAdminTech(b).then(function(b) {
            k ? (a.adminTechModalObject = {
                state: "download",
                title: "Admin-tech ready"
            },
            j = b.fileName) : a.cancel(!0)
        }, function(b, c, d, e) {
            a.showErrorSection = !0,
            a.errorMessage = b
        })
    }
    ) : (a.reachablility = !1,
    a.serverCall = !1,
    a.showErrorSection = !0,
    a.errorMessage = g.createErrorObject("Failed to create admin tech", "Device Unreachable")),
    a.download = function() {
        return i.downloadFile("/dataservice/device/tools/admintech/download/" + j, 6e4).then(function() {
            a.cancel(!0)
        }, function() {
            f.error("Unable to download admin-tech information for " + a.localSystemIP)
        }),
        !1
    }
    ,
    a.cancel = function(a) {
        k = a,
        c.cancel()
    }
}
function InterfaceResetController(a, b, c, d, e, f, g, h) {
    a.serverCall = !0,
    a.errorCondition = !1,
    a.showErrorSection = !1,
    a.stateString = c.getStateString(b),
    a.interfaceOptions = [],
    "reachable" === e.reachability ? e && e["local-system-ip"] && f.getInterfaceOptions(e["local-system-ip"]).then(function(b) {
        a.serverCall = !1,
        b.data.length ? (_.each(b.data, function(b) {
            var c = {
                id: b.index,
                value: "VPN " + b.vpnId + " - " + b.ifname,
                vpnId: parseInt(b.vpnId, 10),
                postValue: {
                    vpnId: b.vpnId,
                    ifname: b.ifname
                },
                key: b.vpnId + "-" + b.ifname
            };
            a.interfaceOptions.push(c)
        }),
        a.interfaceOptions = h("orderBy")(a.interfaceOptions, "vpnId")) : (a.errorCondition = !0,
        a.showErrorSection = !0,
        a.errorMessage = c.createErrorObject("No interface options available", ""))
    }, function(a, b, c, d) {
        g.confirm(a)
    }) : (a.errorCondition = !0,
    a.serverCall = !1,
    a.showErrorSection = !0,
    a.errorMessage = c.createErrorObject("Failed to Reset Interface", "Device Unreachable")),
    a.onSelectInterface = function(b) {
        a.selectedInterfaceOption = b
    }
    ,
    a.reset = function() {
        a.showErrorSection = !1,
        a.serverCall = !0,
        f.postInterfaceReset(a.selectedInterfaceOption.postValue, e.deviceId).then(function(b) {
            a.serverCall = !1,
            a.cancel()
        }, function(b) {
            a.cancel(),
            g.confirm(b)
        })
    }
    ,
    a.cancel = function() {
        d.cancel()
    }
}
function portHopColorController(a, b, c, d, e, f, g) {
    a.serverCall = !0,
    a.errorCondition = !1,
    a.showErrorSection = !1,
    a.stateString = c.getStateString(b),
    a.colorOptions = [],
    "reachable" === e.reachability ? e && ("vedge" === e.personality ? f.getPortHopOptions(e["local-system-ip"]).then(function(b) {
        a.serverCall = !1,
        b.data.length ? _.each(b.data, function(b, c) {
            var d = {
                id: c,
                key: b.color,
                value: b.color,
                postValue: {
                    color: b.color
                }
            };
            a.colorOptions.push(d)
        }) : (a.errorCondition = !0,
        a.showErrorSection = !0,
        a.errorMessage = c.createErrorObject("No color options available", ""))
    }, function(a, b, c, d) {
        g.confirm(a)
    }) : (a.errorCondition = !0,
    a.serverCall = !1,
    a.showErrorSection = !0,
    a.errorMessage = c.createErrorObject("Failed to Request Port Hop", "Request Port Hop not supported on  " + e.personality))) : (a.errorCondition = !0,
    a.serverCall = !1,
    a.showErrorSection = !0,
    a.errorMessage = c.createErrorObject("Failed to Request Port Hop", "Device Unreachable")),
    a.onSelectColor = function(b) {
        a.selectedColorOption = b
    }
    ,
    a.request = function() {
        a.showErrorSection = !1,
        a.serverCall = !0,
        f.postPortHopRequest(a.selectedColorOption.postValue, e.deviceId).then(function(b) {
            a.serverCall = !1,
            a.cancel()
        }, function(b) {
            a.cancel(),
            g.confirm(b)
        })
    }
    ,
    a.cancel = function() {
        d.cancel()
    }
}
function resetLockedUserController(a, b, c, d, e, f, g) {
    a.serverCall = !0,
    a.errorCondition = !1,
    a.showErrorSection = !1,
    a.stateString = c.getStateString(b),
    a.userOptions = [],
    "reachable" === e.reachability ? e && f.getUserOptions(e.deviceId).then(function(b) {
        a.serverCall = !1,
        b.data.length ? _.each(b.data, function(b, c) {
            var d = {
                id: c,
                key: c,
                value: b.user,
                postValue: {
                    user: b.user
                }
            };
            a.userOptions.push(d)
        }) : (a.errorCondition = !0,
        a.showErrorSection = !0,
        a.errorMessage = c.createErrorObject("No users options available", ""))
    }, function(a, b, c, d) {
        g.confirm(a)
    }) : (a.errorCondition = !0,
    a.serverCall = !1,
    a.showErrorSection = !0,
    a.errorMessage = c.createErrorObject("Failed to Reset Locked User", "Device Unreachable")),
    a.onSelectUser = function(b) {
        a.selectedUserOption = b
    }
    ,
    a.reset = function() {
        a.showErrorSection = !1,
        a.serverCall = !0,
        f.postResetLockedUser(a.selectedUserOption.postValue, e.deviceId).then(function(b) {
            a.serverCall = !1,
            a.cancel()
        }, function(b) {
            a.cancel(),
            g.confirm(b)
        })
    }
    ,
    a.cancel = function() {
        d.cancel()
    }
}
function OpCommandsController(a, b, c, d, e, f, g) {
    a.groupOptions = [];
    var h = []
      , i = {
        type: "Admin Tech",
        open: "callback",
        okButtonActionFn: function(a, b) {
            f.show({
                templateUrl: "app/tools/opCommands/modalTemplates/generateAdminTechModalTemplate.html",
                controller: "GenerateAdminTechController",
                targetEvent: b,
                resolve: {
                    selectedRow: function() {
                        return a
                    }
                }
            }).then(function(a) {}, function() {})
        }
    }
      , j = {
        type: "Interface Reset",
        open: "modal",
        templateUrl: "app/tools/opCommands/modalTemplates/interfaceResetModalTemplate.html",
        controller: "InterfaceResetController"
    }
      , k = {
        type: "Request Port Hop Color",
        open: "modal",
        templateUrl: "app/tools/opCommands/modalTemplates/portHopColorModalTemplate.html",
        controller: "portHopColorController"
    }
      , l = {
        type: "Reset Locked User",
        open: "modal",
        templateUrl: "app/tools/opCommands/modalTemplates/resetLockedUserModalTemplate.html",
        controller: "resetLockedUserController"
    }
      , m = d.checkSidebarState();
    m && d.allowAccess("Tools") && (h.push(i),
    h.push(j),
    h.push(k),
    h.push(l));
    var n = new c({
        columnResizing: !0,
        singleSelect: !0,
        enableSorting: !0,
        tableHeightOffset: 178,
        dataUid: "deviceId",
        toggleFirstRowOnLoad: !0,
        autoLoad: !0
    });
    n.setDataSourceFilter("Device Group", b.GROUPS_URL),
    n.dataSourceFilter.setOnSelectionChangeFunc(function() {
        var b = this;
        a.table.taggedSearchObject.clearSearchCache(),
        a.table.loadDataFromUrl(b.selectedOption.uri)
    }),
    n.setHoverAction(h),
    a.table = n,
    a.showAdminTechList = function(b) {
        g.getAdminTechList().then(function(c) {
            if (a.serverCall = !1,
            c.data.length) {
                f.show({
                    templateUrl: "app/tools/opCommands/modalTemplates/adminTechListModalTemplate.html",
                    controller: "AdminTechListController",
                    targetEvent: b,
                    resolve: {
                        adminTechData: function() {
                            return c.data
                        }
                    }
                }).then(function(a) {}, function() {})
            } else {
                var d = {
                    error: {
                        message: "No admin-tech information",
                        details: "There is no admin-tech information available for any device",
                        type: "info"
                    }
                };
                e.confirm(d, !1, null, b)
            }
        }, function(b, c, d, e) {
            a.serverCall = !1,
            a.showErrorSection = !0,
            a.errorMessage = b
        })
    }
    ,
    a.buttonFunctions = [{
        title: "show Admin Tech List",
        type: "AdminTechList",
        buttonSize: "small ",
        buttonColor: "blue",
        layoutClass: "headerButtonIcon",
        ButtonActionFn: function(b) {
            a.showAdminTechList(b)
        }
    }]
}
function opCommandsFactory(a, b) {
    return {
        getAdminTechList: function() {
            return a.get(b.ADMIN_TECH_LIST)
        },
        deleteAdminTech: function(c) {
            var d = b.ADMIN_TECH + "/" + c;
            return a.delete(d)
        },
        generateAdminTech: function(c) {
            var d = b.ADMIN_TECH
              , e = {
                timeout: 24e5
            };
            return a.post(d, c, e)
        },
        getInterfaceOptions: function(c) {
            var d = b.INTERFACE_OPTIONS + "?deviceId=" + c;
            return a.get(d)
        },
        getPortHopOptions: function(c) {
            var d = b.PORT_HOP_OPTIONS + "?deviceId=" + c;
            return a.get(d)
        },
        getUserOptions: function(c) {
            var d = b.USER_OPTIONS + "?deviceId=" + c;
            return a.get(d)
        },
        postInterfaceReset: function(c, d) {
            var e = b.INTERFACE_RESET + "/" + d;
            return a.post(e, c)
        },
        postPortHopRequest: function(c, d) {
            var e = b.PORT_HOP + "/" + d;
            return a.post(e, c)
        },
        postResetLockedUser: function(c, d) {
            var e = b.RESET_LOCK + "/" + d;
            return a.post(e, c)
        }
    }
}
function RediscoverNetworkController(a, b, c, d, e, f, g, h, i, j, k) {
    function l() {
        a.table.refresh(o)
    }
    var m = g.returnEventsEnum()
      , n = g.returnViewsEnum()
      , o = new h(n.REDISCOVER_NETWORK,[m.DEVICE])
      , p = !0
      , q = 150
      , r = !1;
    a.toolPermission = !1,
    i.checkSidebarState() && i.allowAccess("Tools") && (a.toolPermission = !0,
    q = 191,
    r = !0),
    a.stateString = f.getStateString(b),
    a.groupOptions = [],
    a.popoverElem = {
        placement: "",
        text: "",
        changeCounter: 0
    },
    a.tabs = [{
        tabTitle: "Rediscover Network",
        active: "/rediscover_network" === b.current.url,
        states: "app.tools.rediscover_network"
    }],
    a.rediscover = function(b) {
        var e = a.table.uiGridApi.selection.getSelectedRows();
        a.table.data;
        if (p) {
            c.show({
                templateUrl: "app/tools/rediscoverNetwork/rediscoverNetworkConfirmation.html",
                controller: "RediscoverNetworkConfirmationController",
                targetEvent: b,
                resolve: {
                    selectedRow: function() {
                        return e
                    }
                }
            }).then(function(b) {
                a.selected = b
            }, function() {
                d.info("Modal dismissed at: " + new Date)
            })
        }
    }
    ;
    var s = new e({
        autoLoad: !0,
        columnResizing: !0,
        multiSelect: r,
        enableSorting: !0,
        dataUid: "uuid",
        tableHeightOffset: q,
        isRowSelectable: function(a) {
            return !0
        }
    });
    s.setDataSourceFilter("Device Group", j.DEVICE_GROUPS),
    s.dataSourceFilter.setOptionsKeys({
        value: "groupName",
        key: "groupId"
    }),
    s.dataSourceFilter.setOnSelectionChangeFunc(function(b) {
        var c = this;
        a.table.taggedSearchObject.clearSearchCache(),
        a.table.uiGridApi.grid.selection.selectAll = !1,
        a.table.loadDataFromUrl(j.SYNC_STATUS_URL + "?groupId=" + c.selectedOption.key, o),
        a.$on("device_event", function(a, b) {
            k(l, 1e3, !1)
        })
    }),
    s.setLocalActions({
        title: "Rediscover",
        icon: "sync",
        rbac: "Tools",
        precheck: "",
        action: a.rediscover
    }),
    a.table = s,
    a.$on("$destroy", function() {
        g.unsubscribe(o)
    })
}
function SSHDeviceListController(a, b, c, d, e, f, g, h, i, j, k, l) {
    b.stateString = g.getStateString(c),
    b.defaultView = !0,
    b.monitor = function(a) {
        b.defaultView = !1,
        h.numSSHTabs() < 5 || h.isTabWithTitleCreated(a[0].deviceId) ? b.goToTabView(a[0].deviceId, a[0]["host-name"], a[0].reachability, a[0]["local-system-ip"]) : j.info("Only 5 SSH terminals are allowed")
    }
    ,
    b.login = function(a) {
        a.showErrorSection = !1,
        b.serverCall = !0;
        var c = $("#sshConsoleTabs").width() - 8;
        h.launchSSH(a.deviceId, c, 1e3, "dummy", "dummy").then(function(c) {
            a.authSuccess = !0,
            a.url = c.data.connectURL,
            a.destroyUrl = c.data.destroyURL,
            b.serverCall = !1
        }, function(c, e, f, g) {
            d.error("Server returned error"),
            a.showErrorSection = !0,
            a.errorMessage = c,
            b.serverCall = !1
        })
    }
    ,
    b.goToTabView = function(a, c, d, e) {
        if (b.defaultView && (b.defaultView = !1),
        !g.isUndefinedOrEmpty(a) && !g.isUndefinedOrEmpty(c)) {
            var f, i, l = h.getSSHTabs(), m = _.findIndex(l, function(b) {
                return b.deviceId === a
            });
            m <= -1 && 5 === h.numSSHTabs() ? (j.info("Only 5 SSH terminals are allowed"),
            f = l[0].deviceId) : (angular.forEach(l, function(b) {
                b.deviceId === a ? (b.active = !0,
                i = b) : b.active = !1
            }),
            m <= -1 && (l = h.createSSHTabs(a, c, d, e),
            l.length > 0 && (i = l[l.length - 1])),
            f = a,
            angular.isDefined(i) && !i.authSuccess && b.login(i)),
            b.tabs = l,
            k.init(),
            k.setSelectedDevice(f)
        }
    }
    ,
    b.removeTab = function(d) {
        h.removeSSHTab(d);
        var e = h.getSSHTabs();
        0 === h.numSSHTabs() ? (k.setSelectedDevice(),
        c.go("app.tools.ssh"),
        a.$broadcast("noSSHTab")) : (b.tabs = e,
        b.goToTabView(e[0].deviceId, e[0]["host-name"], e[0].reachability, e[0].localSystemIp))
    }
    ,
    angular.isDefined(c.params.deviceID) && angular.isDefined(c.params.hostName) && angular.isDefined(c.params.reachability) && b.goToTabView(c.params.deviceID, c.params.hostName, c.params.reachability, c.params.localSystemIp),
    b.$on("noSSHTab", function() {
        b.defaultView = !0
    }),
    b.$on("sshTerminalClicked", function() {
        var a = h.getSSHTabs();
        0 === a.length ? b.defaultView = !0 : b.defaultView = !1,
        b.defaultView ? k.init() : angular.forEach(a, function(a, c) {
            if (a.active)
                return void b.goToTabView(a.deviceId, a["host-name"], a.reachability, a.localSystemIp)
        })
    }),
    b.$on("$destroy", function() {
        h.clearSSHTabs()
    })
}
function ToolsController(a) {}
function toolsService(a, b, c, d) {
    var e = [];
    return {
        launchSSH: function(a, b, d, e, f) {
            var g = {
                width: b,
                height: d,
                password: f,
                username: e
            };
            return c.post(this.SSH_CONNECTION + a, g)
        },
        disconnectSSH: function(a) {
            return c.post(a)
        },
        numSSHTabs: function() {
            return e.length
        },
        getSSHTabs: function() {
            return e
        },
        getDeviceGroups: function() {
            return c.get(this.DEVICE_GROUPS)
        },
        isTabWithTitleCreated: function(a) {
            for (var b = this.getSSHTabs(), c = 0; c < b.length; c++)
                if (b[c].title === a)
                    return !0;
            return !1
        },
        removeSSHTab: function(a) {
            d.isUndefinedOrEmpty(e[a].destroyUrl) || this.disconnectSSH(e[a].destroyUrl),
            e.splice(a, 1),
            this.numSSHTabs() > 0 && (e[0].active = !0)
        },
        clearSSHTabs: function() {
            e.splice(0, e.length)
        },
        createSSHTabs: function(a, b, c, d) {
            var f = d ? d : a
              , g = {
                title: f,
                deviceId: a,
                sshTabId: "ssh_screen" + f.split(".").join("_"),
                currentScrollPosition: 0,
                sshWindowWidth: 0,
                sshWindowHeight: 0,
                "host-name": b,
                content: "",
                active: "true",
                username: "",
                password: "",
                errorMessage: "",
                showErrorSection: "",
                authSuccess: !1,
                url: "",
                destroyUrl: "",
                reachability: c,
                localSystemIp: d
            };
            return e.push(g),
            e
        },
        findSSHTabIndexById: function(a) {
            return _.findIndex(e, {
                sshTabId: a
            })
        },
        SSH_CONNECTION: "dataservice/newssh/connection/",
        DEVICE_GROUPS: "dataservice/group",
        SYNC_STATUS_URL: "dataservice/device/sync_status"
    }
}
angular.module("vManage", ["ngRoute", "ngResource", "ngMessages", "ngSanitize", "ngAnimate", "ui.bootstrap", "ui.router", "ui.grid", "ui.grid.autoResize", "ui.grid.edit", "ui.grid.resizeColumns", "ui.grid.pinning", "ui.grid.selection", "ui.grid.exporter", "ui.grid.moveColumns", "ui.grid.cellNav", "ui.grid.expandable", "ui.grid.saveState", "ui.grid.grouping", "ui.grid.treeView", "ui.select", "ui.bootstrap.datetimepicker", "duScroll", "angularAwesomeSlider", "ngTagsInput", "ngFileUpload", "gridster", "leaflet-directive", "validation.match", "infinite-scroll", "highcharts-ng", "vs-repeat", "platypus.jsonviewer", "ui.ace", "ngDragDrop", "angular.filter", "ngMaterial", "smDateTimeRangePicker", "ngIdle"]),
angular.module("vManage").config(["$httpProvider", "$interpolateProvider", "$resourceProvider", function(a, b, c) {
    a.defaults.xsrfCookieName = "XSRF-TOKEN",
    a.defaults.xsrfHeaderName = "X-XSRF-TOKEN"
}
]),
angular.module("vManage").config(["$provide", function(a) {
    function b(a, b) {
        var c = (a.info,
        a.error,
        log4javascript.getLogger())
          , d = new log4javascript.BrowserConsoleAppender;
        return d.setThreshold(log4javascript.Level.ALL),
        c.addAppender(d),
        a.info = function(a) {
            c.info(a)
        }
        ,
        a.debug = function(a) {
            c.debug(a)
        }
        ,
        a.warn = function(a) {
            c.warn(a)
        }
        ,
        a.error = function(a) {
            c.error(a)
        }
        ,
        a.fatal = function(a, b) {
            c.error(a, b)
        }
        ,
        a
    }
    a.decorator("$log", b),
    b.$inject = ["$delegate", "$sniffer"]
}
]),
angular.module("vManage").config(["TitleProvider", function(a) {
    a.enabled(!1)
}
]),
angular.module("vManage").run(["$rootScope", "$state", "$stateParams", "$window", "$location", "$templateCache", "rbac", "uiSelectConfig", "Idle", "notification", "adminService", "$log", "appUtil", function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
    k.getClientSessionTimeout().then(function(a) {
        angular.isArray(a.data) && angular.isObject(a.data[0]) && !_.isEmpty(a.data[0]) && a.data[0].isEnabled && (i.watch(),
        i.setIdle(60 * a.data[0].timeout),
        i.setTimeout(60))
    }, function(a) {
        l.error(a)
    }),
    h.closeOnSelect = "false",
    a.$watch(function() {
        return g.isSidebarSet()
    }, function(a) {
        if (a) {
            var b = e.$$path.toLowerCase().replace("/", "").replace(/\//g, ".").replace("administration", "admin");
            if (b.endsWith(".") && (b = b.substring(0, b.length - 1)),
            angular.isDefined(c.tenantId) && c.tenantId) {
                var d = b.split(".");
                d.splice(0, 1),
                b = d.join(".")
            }
            g.checkAccessFromState(b, c) || angular.equals(b, "banner") ? b.indexOf("app.monitor.devices.dashboard.troubleshooting") > -1 && !g.allowReadAccess("Tools") && (m.checkNestedProperty(c, "tenantId") ? e.path("/" + c.tenantId + "/app/monitor/devices/grid") : e.path("/app/monitor/devices/grid")) : m.checkNestedProperty(c, "tenantId") ? e.path("/" + c.tenantId + "/app/404") : e.path("/app/404")
        }
    }, !0),
    a.$state = b,
    a.$stateParams = c,
    a.$storage = d.localStorage,
    a.user = {},
    a.logoutUserInitialized = !1,
    f.put("ui-grid/hoverActionRowHeader", "<ui-grid-hover-action-row-buttons></ui-grid-hover-action-row-buttons>"),
    f.put("ui-grid/hoverActionRowButtons", '<div class="hoverActionRowButtons" data-ng-show="isParentRow(row) && showHoverActionsButton"><md-icon md-font-set="material-icons" class="more-options dropdown-toggle pointerCursor" ng-click="!row.hideHoverActionsButton? toggleDropdown(row, $event):return;" ng-mouseenter="addOnHoverColor($event,row, rowRenderIndex)" ng-mouseleave="removeOnHoverColor($event,row, rowRenderIndex)" id="table-dropdown-options">more_horiz</md-icon></div>'),
    f.put("ui-grid/ui-grid", '<div ui-i18n="en" class="ui-grid"><!-- TODO (c0bra): add "scoped" attr here, eventually? --><style ui-grid-style>.grid{{ grid.id }} {\n      /* Styles for the grid */\n    }\n\n    .grid{{ grid.id }} .ui-grid-row, .grid{{ grid.id }} .ui-grid-cell, .grid{{ grid.id }} .ui-grid-cell .ui-grid-vertical-bar {\n      height: {{ grid.options.rowHeight }}px;\n    }\n\n    .grid{{ grid.id }} .ui-grid-row:last-child .ui-grid-cell {\n      border-bottom-width: {{ ((grid.getTotalRowHeight() < grid.getViewportHeight()) && \'1\') || \'0\' }}px;\n    }\n\n    {{ grid.verticalScrollbarStyles }}\n    {{ grid.horizontalScrollbarStyles }}\n\n    /*\n    .ui-grid[dir=rtl] .ui-grid-viewport {\n      padding-left: {{ grid.verticalScrollbarWidth }}px;\n    }\n    */\n\n    {{ grid.customStyles }}</style><div class="ui-grid-contents-wrapper"><div ui-grid-menu-button ng-if="grid.options.enableGridMenu" id="table_show_hide_columns"></div><div ng-if="grid.hasLeftContainer()" style="width: 0" ui-grid-pinned-container="\'left\'"></div><div ui-grid-render-container vip-id="table_main_content" container-id="\'body\'" col-container-name="\'body\'" row-container-name="\'body\'" bind-scroll-horizontal="true" bind-scroll-vertical="true" enable-horizontal-scrollbar="grid.options.enableHorizontalScrollbar" enable-vertical-scrollbar="grid.options.enableVerticalScrollbar"></div><div ng-if="grid.hasRightContainer()" style="width: 0" ui-grid-pinned-container="\'right\'"></div><div ui-grid-grid-footer ng-if="grid.options.showGridFooter"></div><div ui-grid-column-menu ng-if="grid.options.enableColumnMenus"></div><div ng-transclude></div></div></div>'),
    f.put("ui-grid/uiGridMenu", '<div class="ui-grid-menu" ng-if="shown"><div class="ui-grid-menu-mid" ng-show="shownMid"><div class="ui-grid-menu-inner"><button type="button" ng-focus="focus=true" ng-blur="focus=false" class="ui-grid-menu-close-button" ng-class="{\'ui-grid-sr-only\': (!focus)}"><i class="ui-grid-icon-cancel" ui-grid-one-bind-aria-label="i18n.close"></i></button><ul role="menu" class="ui-grid-menu-items"><li ng-repeat="item in menuItems" id="{{item.title | removeWhitespaces}}_menu_filter_{{item.icon}}" role="menuitem" ui-grid-menu-item ui-grid-one-bind-id="\'menuitem-\'+$index" action="item.action" name="item.title" active="item.active" icon="item.icon" shown="item.shown" context="item.context" template-url="item.templateUrl" leave-open="item.leaveOpen" screen-reader-only="item.screenReaderOnly"></li></ul></div></div></div>'),
    f.put("ui-grid/uiGridViewport", '<div role="rowgroup" class="ui-grid-viewport" ng-style="colContainer.getViewportStyle()"><!-- tbody --><div class="ui-grid-canvas"><div ng-repeat="(rowRenderIndex, row) in rowContainer.renderedRows track by $index" class="ui-grid-row" ng-style="Viewport.rowStyle(rowRenderIndex)" vip-ui-grid-hover-row ng-mouseenter="addOnHoverColor($event,row, rowRenderIndex)" ng-mouseleave="removeOnHoverColor($event,row, rowRenderIndex)"><div role="row" ui-grid-row="row" row-render-index="rowRenderIndex"></div></div></div></div>'),
    f.put("ui-grid/uiGridCell", '<div class="ui-grid-cell-contents" title="TOOLTIP">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'),
    f.put("ui-grid/expandableRow", '<div ui-grid-expandable-row ng-if="expandableRow.shouldRenderExpand()" class="expandableRow" style="float:left; margin-top: 1px; margin-bottom: 1px" ng-style="{width: (grid.renderContainers.body.getCanvasWidth() - grid.options.reduceExpandableWidth) + \'px\', height: grid.options.expandableRowHeight + \'px\'}"></div>'),
    f.put("ui-grid/selectionHeaderCell", '<div><!-- <div class="ui-grid-vertical-bar">&nbsp;</div> --><div class="ui-grid-cell-contents" col-index="renderIndex"><ui-grid-selection-select-all-buttons ng-if="grid.options.enableSelectAll"></ui-grid-selection-select-all-buttons><div style="width: 42px; height: 26px; background-color:#5abfdf;" ng-if="!grid.options.enableSelectAll"></div></div></div>'),
    f.put("ui-grid/selectionRowHeaderButtons", "<div ng-attr-title=\"{{row.enableSelection?'':'    Operation cannot be performed because device is unreachable'}}\" class=\"ui-grid-icon-ok\" ng-class=\"{'ui-grid-row-selected': row.isSelected, 'ui-grid-selection-row-header-buttons': grid.options.multiSelect,  'ui-grid-selection-row-header-radio-buttons': grid.options.singleSelect, 'ui-grid-row-button-select-disable': (row.enableSelection == 'false' || !row.enableSelection)}\" ng-click=\"selectButtonClick(row, $event)\">&nbsp;</div>"),
    f.put("ngTagsInput/tags-input.html", '<div class="host" tabindex="-1" ti-transclude-append=""><div class="tags" ng-class="{focused: hasFocus}"><div class=\'vertical-center-align-outer-container pull-left\'><md-icon md-font-set="material-icons" class="material-icons md-24 vertical-center-align-inner-container">search</md-icon></div><ul class="tag-list"><li class="tag-item" id="tag_{{$index}}" ng-repeat="tag in tagList.items track by track(tag)" ng-class="{ selected: tag == tagList.selected }"><span ng-bind="getDisplayText(tag)"></span> <em class="remove-button md-chip-remove" id="tag_close_{{$index}}" ng-click="tagList.remove($index)"></em></li><input id="search_tag_input" class="input" ng-model="newTag.text" ng-change="newTagChange()" ng-trim="false" ng-class="{\'invalid-tag\': newTag.invalid}" ti-bind-attrs="{type: options.type, placeholder: options.placeholder, tabindex: options.tabindex}" ti-autosize=""></ul></div></div>'),
    f.put("select2/choices.tpl.html", '<ul class="ui-select-choices ui-select-choices-content select2-results"><li class="ui-select-choices-group" ng-class="{\'select2-result-with-children\': $select.choiceGrouped($group) }"><div ng-show="$select.choiceGrouped($group)" class="ui-select-choices-group-label select2-result-label" ng-bind-html="$group.name"></div><ul ng-class="{\'select2-result-sub\': $select.choiceGrouped($group), \'select2-result-single\': !$select.choiceGrouped($group) }"><li id="select_choice_{{$index}}" class="ui-select-choices-row" ng-class="{\'select2-highlighted\': $select.isActive(this), \'select2-disabled\': $select.isDisabled(this)}"><div class="select2-result-label ui-select-choices-row-inner"></div></li></ul></li></ul>'),
    f.put("select2/select-multiple.tpl.html", '<div class="ui-select-container ui-select-multiple select2 select2-container select2-container-multi" ng-class="{\'select2-container-active select2-dropdown-open open\': $select.open,\n                \'select2-container-disabled\': $select.disabled}"><ul class="select2-choices"><span class="ui-select-match"></span><li class="select2-search-field"><input type="text" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" class="select2-input ui-select-search pointerCursor" id="select_search_input" placeholder="{{$select.getPlaceholder()}}" ng-disabled="$select.disabled" ng-hide="$select.disabled" ng-model="$select.search" ng-click="$select.activate()" style="width: 34px;"><i ng-click="$select.activate()" class="fa fa-caret-down select2-caret-down pointerCursor"</i></li></ul><div class="select2-drop select2-with-searchbox select2-drop-active" ng-class="{\'select2-display-none\': !$select.open}"><div class="ui-select-choices"></div></div></div>'),
    f.put("select2/match-multiple.tpl.html", '<span class="ui-select-match"><li id="{{$item.name}}_selected" class="ui-select-match-item select2-search-choice" ng-repeat="$item in $select.selected" ng-class="{\'select2-search-choice-focus\':$select.activeMatchIndex === $index, \'select2-locked\':$select.isLocked(this, $index)}"><span uis-transclude-append=""></span> <a href="javascript:;" id="{{$item.name}}_select_close" class="ui-select-match-close select2-search-choice-close" ng-click="$select.removeChoice($index)" tabindex="-1"></a></li></span>'),
    f.put("vip/inputCellTemplate.html", '<div><input id="{{row.entity[\'deviceId\']}}_{{col.colDef.name}}_{{rowRenderIndex}}" type="INPUT_TYPE" ng-model="row.entity[\'col.colDef.name\']" required></div>'),
    f.put("cloudxToolTipTemplate", '<div class="tooltip-device-details" data-ng-repeat="device in entity.toolTipData"><div class="tooltip-device-details-header" ng-if="device[\'host-name\']">{{ device[\'host-name\'] ? device[\'host-name\'] : device[\'system-ip\']}}</div><div class="clearfix tooltip-device-details-content"><div class="pull-left tooltip-device-details-content-label">Version</div><div class="pull-right" ng-class="{\'invalidField\': cloudExpressService.checkVersionValidity(device.version)}">{{device.version}}</div></div><div class="clearfix tooltip-device-details-content"><div class="pull-left tooltip-device-details-content-label">Mode</div><div class="pull-right" ng-class="{\'invalidField\': device.configOperationMode === \'cli\'}">{{device.configOperationMode}}</div></div></div>'),
    f.put("detachToolTipTemplate", '<div class="tooltip-device-details">{{ entity.toolTipData }}</div>')
}
]),
angular.module("vManage").constant("appConstants", {
    LOCAL_ENVIRONMENT: {
        name: "local",
        baseURL: "https://192.168.13.88:9912"
    },
    DEV_ENVIRONMENT: {
        name: "development",
        baseURL: "https://10.0.1.32"
    },
    PROD_ENVIRONMENT: {
        name: "production",
        baseURL: "/"
    }
}),
angular.module("vManage").factory("appConfig", appConfig),
appConfig.$inject = ["appConstants"],
angular.module("vManage").controller("AppController", AppController),
AppController.$inject = ["$rootScope", "$scope", "$state", "$window", "$log", "notification", "rbac", "deviceListService", "helpDetails", "responsiveContentHeight", "eventListObject", "eventPoll", "DeviceListCache", "DeviceModelListCache", "CFLOWDDestinationsService", "CFLOWDSourcesService", "DpiApplicationDetailService", "DpiApplicationFamilyService", "DpiApplicationService", "DeviceEventsService", "WANTunnelService", "AlarmsService", "ACLLogService", "EventsService", "restService", "geographyService", "DebugLogService", "$mdDialog", "$timeout", "maintenanceWindow"],
function() {
    function a(a, b, c, d, e, f, g, h) {
        a.bannerInfo = void 0;
        var i = function() {
            g.routeToDashboard()
        };
        g.checkTenancy().then(function() {
            d.getLoginBannerInfoSetting().then(function(b) {
                g.initialize(),
                angular.isObject(b.data[0]) && !_.isEmpty(b.data[0]) && angular.equals(b.data[0].mode, "on") ? a.bannerInfo = b.data[0].bannerDetail : i()
            }, function(a) {
                angular.isObject(a) && f.checkNestedProperty(a, "error", "details") ? (c.error("Error occurred while retrieving login banner info: " + a.error.message + ":" + a.error.details),
                e.error(a.error.message + ": " + a.error.details),
                g.routeToDashboard()) : (c.info("API error response needs to be updated to conform to company guidelines" + a.config.url),
                e.error("Error occurred while retrieving login banner information."),
                g.routeToDashboard())
            })
        }, function(a) {}),
        a.goToDashboard = function() {
            i()
        }
    }
    angular.module("vManage").controller("LoginBannerController", a),
    a.$inject = ["$scope", "$state", "$log", "adminService", "notification", "appUtil", "rbac", "restService"]
}(),
angular.module("vManage").controller("AdminController", AdminController),
AdminController.$inject = ["$scope"],
angular.module("vManage").service("adminService", adminService),
adminService.$inject = ["restService", "$q", "$log"],
angular.module("vManage").controller("ClusterManagementController", ClusterManagementController),
ClusterManagementController.$inject = ["$scope", "$state", "appUtil", "Table", "$mdDialog", "$log", "ClusterManagementService", "notification", "ClusterManagement", "eventPoll", "eventListObject", "rbac", "adminService"],
angular.module("vManage").controller("ClusterManagementDetailsController", ClusterManagementDetailsController),
ClusterManagementDetailsController.$inject = ["$scope", "$state", "appUtil", "Table", "TreeBasedTable", "rbac", "apiConstants", "restService", "DeviceListCache", "$log", "notification"],
angular.module("vManage").service("ClusterManagement", ClusterManagement),
ClusterManagement.$inject = ["ClusterManagementService"],
angular.module("vManage").service("ClusterManagementService", ClusterManagementService),
ClusterManagementService.$inject = ["restService"],
angular.module("vManage").controller("ClusterMgmtReachabilityCtrl", ClusterMgmtReachabilityCtrl),
ClusterMgmtReachabilityCtrl.$inject = ["$scope", "$state", "appUtil", "Table", "$log", "ClusterManagementService", "notification", "ClusterManagement"],
angular.module("vManage").controller("LicensesController", LicensesController),
LicensesController.$inject = ["$scope", "$state", "appUtil", "Table", "$modal", "$log"],
angular.module("vManage").controller("licensesActivateController", licensesActivateController),
licensesActivateController.$inject = ["$scope", "$state", "appUtil", "$modalInstance", "licensesService"],
angular.module("vManage").factory("licenses", licenses),
licenses.$inject = ["licensesService", "notification"],
angular.module("vManage").factory("licensesService", licensesService),
licensesService.$inject = ["restService", "apiConstants"],
angular.module("vManage").controller("ManageUsersController", ManageUsersController),
ManageUsersController.$inject = ["$scope", "$state", "appUtil", "Tab"],
angular.module("vManage").controller("UsergroupsController", UsergroupsController),
UsergroupsController.$inject = ["$scope", "Table", "appUtil", "$state", "$mdDialog", "adminService", "$log", "userGroup", "notification", "$filter"],
angular.module("vManage").factory("userGroup", userGroup),
userGroup.$inject = ["adminService", "$log", "$filter", "$q"],
angular.module("vManage").controller("updateUserController", updateUserController),
updateUserController.$inject = ["$scope", "$mdDialog", "$state", "$log", "$filter", "appUtil", "notification", "adminService", "selectedRow", "action", "groups"],
angular.module("vManage").controller("usersController", usersController),
usersController.$inject = ["$scope", "Table", "$http", "appUtil", "$state", "$mdDialog", "$timeout", "adminService", "notification", "rbac"],
angular.module("vManage").controller("customSelectDevicesTemplateModalCtrl", customSelectDevicesTemplateModalCtrl),
customSelectDevicesTemplateModalCtrl.$inject = ["$scope", "$mdDialog", "appUtil", "MultiSelectService", "option", "mode", "Table", "$timeout"],
angular.module("vManage").controller("settingsController", settingsController),
settingsController.$inject = ["$scope", "$state", "appUtil", "adminService", "notification", "$mdDialog", "$filter", "rbac", "$log", "$compile", "$templateCache", "Idle", "maintenanceService", "$window", "eventPoll", "$rootScope"],
function() {
    function a(a, b, c, d, e, f) {
        function g(a, b) {
            angular.copy(a, j.statsDBConfigList),
            angular.forEach(j.statsDBConfigList, function(a) {
                a.currentSize = a.currentSize.substring(0, a.currentSize.length - 2),
                j.totalCurrentSize += parseFloat(a.currentSize),
                b.push(a)
            }),
            j.totalCurrentSize = j.totalCurrentSize.toFixed(4)
        }
        var h, i, j = this, k = function(a) {
            var b = a.target.value
              , c = b.split(".");
            if ($.inArray(a.which, [46, 8, 9, 27, 13, 110, 190, 0]) === -1 && (65 != a.which || a.ctrlKey !== !0 && a.metaKey !== !0)) {
                if (2 == c.length) {
                    var d = c[1];
                    d.length > 2 && (a.target.value = c[0] + "." + c[1].substring(0, 2))
                }
                j.showErrorSection = !1,
                j.errorMessage = ""
            }
        }, l = {
            limitToTwoDecimal: k,
            readOnly: !j.editMode,
            getEditStatus: function() {
                return l.readOnly
            }
        }, m = [{
            title: "Statistics Type",
            property: "displayName",
            editable: !1,
            dataType: "string",
            width: 200
        }, {
            title: "Current Size(GB)",
            property: "currentSize",
            editable: !1,
            dataType: "string",
            width: 200
        }, {
            title: "Size(GB)",
            property: "sizeInGB",
            editable: !1,
            dataType: "string",
            width: 400,
            cellTemplate: '<div class="ui-grid-cell-contents"><input type="number" data-ng-min="0.1" required vip-number-validation decimal="true" ng-readonly="!!grid.appScope.getEditStatus()" ng-keyup="grid.appScope.limitToTwoDecimal($event);" ng-model="row.entity.sizeInGB" name="size_{{::rowRenderIndex}}"/><vip-messages style="margin-left: 5px;" element-name="size_{{::rowRenderIndex}}"></vip-messages></div>'
        }];
        j.$onInit = function() {
            j.statsDBConfigList = [],
            j.showErrorSection = !1,
            j.errorMessage = "",
            j.showTopErrorSection = !1,
            j.serverCallInProgress = !1,
            j.totalCurrentSize = 0,
            j.currentAvalSpace = 0,
            j.stateString = c.getStateString(b),
            h = new e({
                autoLoad: !0,
                minRowsToShow: 5,
                dataUid: "$$hashKey",
                rowHeight: 40,
                tableHeightOffset: 500,
                toolbar: !1,
                tableName: "statisticsDatabase"
            }),
            j.updateStatsDBConfig = function() {
                j.serverCallInProgress = !0;
                var a = []
                  , b = 0;
                for (var c in j.statsDBConfigList) {
                    var e = j.statsDBConfigList[c]
                      , g = {};
                    if (g.indexName = e.indexName,
                    g.sizeInGB = parseFloat(e.sizeInGB),
                    0 == e.sizeInGB)
                        return j.showErrorSection = !0,
                        j.errorMessage = {
                            error: {
                                message: "Size of " + e.displayName + " is 0."
                            }
                        },
                        void (j.serverCallInProgress = !1);
                    b += g.sizeInGB,
                    a.push(g)
                }
                if (j.maxAvalSpace < b)
                    return j.showErrorSection = !0,
                    j.serverCallInProgress = !1,
                    void (j.errorMessage = {
                        error: {
                            message: "Total size exceeds maximum available space.",
                            details: "Total size of the statisitics type should not exceed the maximum available space"
                        }
                    });
                var h = {
                    indexSize: a
                };
                d.updateStatsDBConfig(h).then(function(a) {
                    j.serverCallInProgress = !1,
                    f.success("Statistics Database Configuration updated successfully", 2e3),
                    j.onSave({
                        maxAvailableSize: j.maxAvalSpace
                    })
                }, function(a) {
                    j.serverCallInProgress = !1,
                    j.showErrorSection = !0,
                    j.errorMessage = a,
                    j.onSave({
                        maxAvailableSize: j.maxAvalSpace
                    })
                })
            }
            ,
            j.resetForm = function() {
                angular.forEach(j.statisticsDatabaseTable.data, function(a, b) {
                    a.sizeInGB = i[b].sizeInGB,
                    a.currentSize = i[b].currentSize
                }),
                j.showErrorSection = !1,
                j.errorMessage = "",
                j.showTopErrorSection = !1,
                j.serverCallInProgress = !1
            }
            ,
            j.cancelEditing = function() {
                j.resetForm(),
                j.onCancel()
            }
            ,
            h.setAppScope(l),
            d.listStatsDBConfig().then(function(a) {
                j.maxAvalSpace = parseFloat(a.availableSpaceInGB),
                g(a.indexSize, h.data),
                i = angular.copy(h.data),
                j.onLoad({
                    maxAvailableSize: j.maxAvalSpace
                })
            }, function(a) {
                j.showTopErrorSection = !0,
                j.errorMessage = {
                    error: {
                        message: "Failed to load Statistics Database Configuration."
                    }
                }
            }),
            h.setToolbar({
                search: !1,
                rowCount: !1,
                refresh: !1,
                menuColumnFilter: !1
            }),
            h.createColumns(m),
            a.$watch("statsDBConfigCtrl.statisticsDatabaseTable.data", function(a, b) {
                if (!angular.equals(a, b)) {
                    var c = j;
                    j.currentAvalSpace = 0,
                    angular.forEach(a, function(a) {
                        c.currentAvalSpace += a.sizeInGB ? parseFloat(a.sizeInGB) : 0
                    }),
                    j.currentAvalSpace = j.currentAvalSpace.toFixed(4)
                }
            }, !0),
            j.statisticsDatabaseTable = h
        }
        ,
        j.$onChanges = function(a) {
            angular.isDefined(a.editMode.currentValue) && (j.editMode = a.editMode.currentValue,
            l.readOnly = !a.editMode.currentValue)
        }
    }
    a.$inject = ["$scope", "$state", "appUtil", "ClusterManagementService", "Table", "notification"],
    angular.module("vManage").component("statsDatabaseConfiguration", {
        templateUrl: "app/admin/settings/statsDBConfig/statsDBConfigTemplate.html",
        bindings: {
            editMode: "<",
            onSave: "&?",
            onCancel: "&?",
            onLoad: "&?"
        },
        controller: a,
        controllerAs: "statsDBConfigCtrl"
    })
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        function i() {
            b.previousState ? b.go(b.previousState.name) : h.routeToDashboard()
        }
        d.get(e.ANALYTICS_GET_SAML_TOKEN).then(function(a) {
            if (angular.equals(a.status, "success")) {
                var b = a.url.split("loginToRp=")[1]
                  , c = ({
                    SAMLResponse: a.message
                },
                document.createElement("form"));
                c.setAttribute("method", "post"),
                c.setAttribute("id", "analytics_form"),
                c.setAttribute("action", b + "/saml2/acs/"),
                c.setAttribute("target", "_blank");
                var d = document.createElement("input");
                d.setAttribute("name", "SAMLResponse"),
                d.setAttribute("value", a.message),
                c.appendChild(d),
                document.body.appendChild(c),
                c.submit();
                var e = document.getElementById("analytics_form");
                e.parentNode.removeChild(e),
                i()
            } else if (404 == a.code)
                g.open(a.url, "_blank"),
                i();
            else {
                var h = {
                    error: {
                        message: a.message
                    }
                };
                f.error(h.error.message)
            }
        }, function(a) {
            f.error(a.error.message + ":" + a.error.details)
        })
    }
    angular.module("vManage").controller("AnalyticsController", a),
    a.$inject = ["$scope", "$state", "$log", "restService", "apiConstants", "notification", "$window", "rbac"]
}(),
angular.module("vManage").config(["$mdThemingProvider", function(a) {
    var b = {
        50: "#bae3df",
        100: "#6bfffa",
        200: "#33fff8",
        300: "#00c9c2",
        400: "#00ccc5",
        500: "#00ada7",
        600: "#008e89",
        700: "#00706c",
        800: "#00514e",
        900: "#003331",
        A100: "#b7fffd",
        A200: "#6bfffa",
        A400: "#00ccc5",
        A700: "#00706c",
        contrastDefaultColor: "light",
        contrastDarkColors: "50 100 200 300 400 A100 A200 A400"
    }
      , c = {
        50: "#001413",
        100: "#002d2c",
        200: "#004745",
        300: "#00605d",
        400: "#007a76",
        500: "#00938e",
        600: "#00c6c0",
        700: "#00e0d8",
        800: "#00f9f1",
        900: "#14fff7",
        A100: "#00c6c0",
        A200: "#00ada7",
        A400: "#00938e",
        A700: "#2dfff8"
    };
    a.definePalette("vipPrimary", b).definePalette("customAccent", c),
    a.theme("default").primaryPalette("vipPrimary", {
        default: "500",
        "hue-1": "50",
        "hue-2": "300"
    }).accentPalette("customAccent")
}
]),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        function l(b) {
            g.get(b).then(function(c) {
                a.table.setDataUrl(b),
                a.table.createColumns(c.header.columns),
                angular.copy(c.data, a.table.data),
                a.table.taggedSearchObject.setSearchCache(a.table.data),
                d(function() {
                    a.table.taggedSearchObject.getSearchTagsCache().length && a.table.taggedSearchObject.searchData(a.table.taggedSearchObject.getSearchTagsCache()),
                    a.table.uiGridApi.selection.selectRow && a.table.data.length > 0 && a.table.uiGridApi.selection.selectRow(a.table.uiGridApi.grid.renderContainers.body.visibleRowCache[0].entity)
                })
            }, function(a) {
                c.error("Failed to get audit log data from server")
            })
        }
        function m(b, c) {
            c && a.table.data.reset(),
            l(b.tableURL)
        }
        a.stateString = f.getStateString(b),
        a.queryBuilderInitialized = !1,
        a.showQueryBuilderTimeStampInbuilt = !1,
        a.table = new e({
            autoLoad: !0,
            columnResizing: !0,
            enableSorting: !0,
            dataUid: "logid",
            singleSelect: !0,
            tableHeightOffset: 155
        },{
            csvExport: !0
        },{},{
            exporterHeaderFilterUseName: !1,
            exporterCsvFilename: "Audit_Log.csv"
        });
        var n = [{
            type: "Audit Log Details",
            open: "modal",
            templateUrl: "app/common/modalPartials/auditLogDetails.html",
            controller: "auditLogDetailsController"
        }, {
            type: "CLI Diff",
            open: "modal",
            templateUrl: "app/common/modalPartials/auditLogCLIDiff.html",
            controller: "auditLogCLIDiffModalInstanceCtrl",
            hideCallback: function(a) {
                return !a.entity.auditextras.config_id_0 && !a.entity.auditextras.config_id_1
            },
            resolve: {
                tableObject: function() {
                    return a.table
                }
            }
        }];
        a.table.setHoverAction(n),
        a.searchCallBack = function(b) {
            var c, d = {};
            c = a.queryBuilderObj.getQueryStringFromQueryObject(b),
            d.tableURL = a.queryBuilderObj.appendQueryString(h.getAuditLogTableAPI(), c),
            h.setFilterCurrentState(a.queryBuilderObj.getComponents()),
            a.queryBuilderInitialized ? m(d, !0) : (a.queryBuilderInitialized = !0,
            j.get("app/monitor/commonTemplates/tableTemplate.html", {
                cache: k
            }).success(function(b) {
                var c = $("#" + a.stateString + "view");
                angular.isDefined(c) && c.length > 0 && (m(d, !1),
                c.append(i(b)(a)))
            }))
        }
        ,
        h.initializeQueryBuilder(a),
        a.$on("$destroy", function() {
            h.setFilterOriginalState(a.queryBuilderObj.getOriginalComponents())
        })
    }
    angular.module("vManage").controller("AuditLogController", a),
    a.$inject = ["$scope", "$state", "$log", "$timeout", "Table", "appUtil", "restService", "AuditLogService", "$compile", "$http", "$templateCache"]
}(),
function() {
    function a(a, b) {
        var c = {
            FIELDS_API_URL: "/dataservice/auditlog/query/fields",
            AUDIT_LOG_URL_TABLE: "/dataservice/auditlog/severity",
            AUDIT_LOG_URL_CHART: "/dataservice/auditlog/severity/summary",
            AUDIT_LOG_CONFIG_DIFF: "/dataservice/device/history/config/diff/list"
        }
          , d = void 0
          , e = void 0;
        return {
            getFilterCurrentState: function() {
                return d
            },
            setFilterCurrentState: function(a) {
                d = a
            },
            setFilterOriginalState: function(a) {
                e = a
            },
            getFilterOriginalState: function() {
                return e
            },
            getAuditLogTableAPI: function() {
                return c.AUDIT_LOG_URL_TABLE
            },
            getAuditLogChartAPI: function() {
                return c.AUDIT_LOG_URL_CHART
            },
            initializeQueryBuilder: function(b) {
                var d = this
                  , e = {
                    autoLoadFields: !0,
                    fieldsAPIURL: c.FIELDS_API_URL,
                    searchCallBack: b.searchCallBack,
                    filterInterfaceObjValidComponents: !0,
                    queryBuilderPersistedComponents: d.getFilterCurrentState(),
                    queryBuilderOriginalComponents: d.getFilterOriginalState(),
                    isDynamicQuery: !0,
                    enableChartURL: !1,
                    renderViewAfterInitComplete: !0,
                    enableFilteredTags: !0
                };
                b.queryBuilderObj = new a(e),
                b.queryBuilderViewObj = {},
                b.queryBuilderViewObj.buttonLayoutObj = {
                    layoutClass: "actionButtonLayout",
                    filterIconClass: "filter_list",
                    filterButtonTitle: "Filter",
                    showDropDownIcon: !0
                }
            },
            getConfigDiff: function(a, d) {
                return b.get(c.AUDIT_LOG_CONFIG_DIFF + "?config_id1=" + a + "&config_id2=" + d)
            }
        }
    }
    angular.module("vManage").service("AuditLogService", a),
    a.$inject = ["QueryBuilderFactory", "restService"]
}(),
angular.module("vManage").directive("vipButton", vipButton),
angular.module("vManage").directive("vipButtonDropDownIcon", vipButtonDropDownIcon),
vipButtonDropDownIcon.$inject = ["$timeout", "$log", "$state"],
angular.module("vManage").directive("vipButtonIcon", vipButtonIcon),
vipButtonIcon.$inject = ["appUtil", "$timeout"],
angular.module("vManage").service("certificateSigningService", certificateSigningService),
function() {
    function a(a, b, c, d, e) {
        return {
            restrict: "AE",
            scope: {
                chartObject: "="
            },
            templateUrl: "app/common/chart/chartTemplate.html",
            link: function(f) {
                f.chartError = a,
                f.chartExport = !1,
                angular.isDefined(f.chartObject.chartURL) && !f.chartObject.autoLoad ? f.chartObject.getChartDataFromURL() : angular.isDefined(f.chartObject.APIData) && !f.chartObject.autoLoad && f.chartObject.updateChartAPIData(f.chartObject.APIData),
                f.$watch("chartError.getChartErrorState()", function(a, c) {
                    angular.isDefined(a) && a && (f.chartErrorObj = f.chartError.getChartError()[0],
                    b.info("Chart DEBUG: " + f.chartErrorObj.description))
                }),
                f.export = function() {
                    f.chartObject.highChartApi.downloadCSV(!0)
                }
                ,
                d.get(e.VIEW_PREFERENCE + "exportChart").then(function(a) {
                    f.chartExport = a.enable
                }),
                c(function() {
                    f.chartObject.highChartApi = $("#chart_" + f.chartObject.chartName).highcharts()
                })
            }
        }
    }
    angular.module("vManage").directive("vipChart", a),
    a.$inject = ["ChartError", "$log", "$timeout", "restService", "apiConstants"]
}(),
angular.module("vManage").constant("ChartErrorConstants", {
    NO_SERIES_IN_HEADER: "Missing series Information",
    NO_SERIES: "Missing series Information",
    NO_Y_AXIS: "yAxis Data Missing",
    NO_CHART_CONFIG: "Chart Configuration Missing"
}),
function() {
    function a(a) {
        var b = []
          , c = !1;
        return {
            getChartErrorState: function() {
                return c
            },
            setChartError: function(d, e) {
                var f = {
                    key: "",
                    message: "",
                    description: ""
                };
                f.key = d,
                a.hasOwnProperty(d) ? (f.message = '<span class="error-note">Chart Error: </span> <span class="error-description">' + a[d] + "</span>",
                f.description = a[d]) : (f.message = '<span class="error-note">Chart Error: </span> <span class="error-description">' + e + "</span>",
                f.description = e),
                c = !0,
                b.push(f)
            },
            getChartError: function() {
                return b
            },
            deleteChartError: function(a) {
                angular.isDefined(b[a]) && (b.pop(a),
                b.length < 1 && (c = !1))
            }
        }
    }
    angular.module("vManage").factory("ChartError", a),
    a.$inject = ["ChartErrorConstants"]
}(),
function() {
    function a(b, c, d, e, f, g, h, i) {
        var j = function(a, b) {
            if (a < 1)
                return "0 B";
            var c = ["B", "KB", "MB", "GB", "TB", "PB"]
              , d = Math.floor(Math.log(a) / Math.log(1024));
            if (a < 1024)
                var e = parseInt(a / Math.pow(1024, Math.floor(d)));
            else
                var e = parseFloat((a / Math.pow(1024, Math.floor(d))).toFixed(2));
            return d = d < 0 ? -d : d,
            b && (e += " " + c[d]),
            e
        }
          , k = function(a, b) {
            if (a < 1)
                return "0bps";
            var c = ["bits", "Kbps", "Mbps", "Gbps", "Tbps", "Pbps"]
              , d = Math.floor(Math.log(a) / Math.log(1024))
              , e = parseFloat((a / Math.pow(1024, Math.floor(d))).toFixed(2));
            return d = d < 0 ? -d : d,
            b && (e += " " + c[d]),
            e
        }
          , l = function(a, b) {
            if (0 == a)
                return "0kbps";
            if (a < 1)
                return a + "kbps";
            var c = ["Kbps", "Mbps", "Gbps", "Tbps", "Pbps"]
              , d = Math.floor(Math.log(a) / Math.log(1024))
              , e = parseFloat((a / Math.pow(1024, Math.floor(d))).toFixed(2));
            return d = d < 0 ? -d : d,
            b && (e += " " + c[d]),
            e
        }
          , m = function(a, b) {
            if (a < 1)
                return "0";
            var c = ["", "K", "M", "G", "T", "P"]
              , d = Math.floor(Math.log(a) / Math.log(1e3))
              , e = parseInt((a / Math.pow(1e3, Math.floor(d))).toFixed(2));
            return d = d < 0 ? -d : d,
            b && (e += " " + c[d]),
            e
        }
          , n = function() {
            var a, b;
            if (b = angular.isDefined(this.series) ? this.series : this.points[0].series,
            "datetime" === b.xAxis.userOptions.type) {
                var c = moment(this.x);
                a = c.format("MMM DD, HH:mm:ss")
            } else
                a = "category" === b.xAxis.userOptions.type ? angular.isDefined(this.key) ? this.key : this.points[0].key : this.x;
            return a
        }
          , o = function(a) {
            var b;
            return b = "" == this.point.y || null == this.point.y ? this.point.y : a.formatDataToBytes ? j(this.point.y, !0) : a.formatDataToPackets ? m(this.point.y, !0) : a.formatDataToPacketsPerSecond ? m(this.point.y, !0) : a.formatDataToBitsPerSecond ? k(this.point.y, !0) : a.formatDataToKiloBitsPerSecond ? l(this.point.y, !0) : a.formatDataToPacketCount ? m(this.point.y, !0) + " packets" : a.formatDecimals ? this.point.y.toFixed(2) : a.yAxisUnit ? this.point.y.toFixed(2) + a.yAxisUnit : this.point.y
        }
          , p = function() {
            var a, b, c, d = "";
            return a = n.call(this),
            d += "<b>" + a + "<b><br/>",
            $.each(this.points, function() {
                b = r(this),
                d += '<span style="color:' + this.series.color + '">■    </span>',
                c = angular.isDefined(this.series.userOptions.display) && this.series.userOptions.display !== this.series.userOptions.name ? this.series.userOptions.display : this.series.name,
                d += this.series.userOptions.axisIndexLabel ? "<span>" + c + "[" + this.series.userOptions.axisIndexLabel + "]:</span> " : "<span>" + c + ":  </span>",
                d += "<span> <b>" + o.call(this, b) + "</b></span> <br/>"
            }),
            d += "<br/>"
        }
          , q = function() {
            var a, b, c = "";
            return angular.isDefined(this.series.yAxis) ? b = angular.isDefined(this.series.yAxis.options.customOptions) ? this.series.yAxis.options.customOptions : this.series.yAxis.options.userOptions.customOptions : this.series.tooltipOptions.formatDataToBytes && (b = {
                formatDataToBytes: !0
            }),
            a = angular.isDefined(this.x) ? n.call(this) : this.key,
            c += "<b>" + a + "<b><br/>",
            c += '<span style="color:' + this.series.color + '">■    </span>',
            c += angular.isDefined(this.series.userOptions.display) && this.series.userOptions.display !== this.series.userOptions.name ? "<span>" + this.series.userOptions.display + ":</span> " : "<span>" + this.series.name + ":  </span>",
            c += "<span>" + o.call(this, b) + "</span>",
            c += "<br/>"
        }
          , r = function(a) {
            return i.checkNestedProperty(a.series, "userOptions", "customOptions") && angular.isDefined(a.series.userOptions.customOptions) ? a.series.userOptions.customOptions : i.checkNestedProperty(a.axis, "series", "0", "userOptions", "customOptions") && angular.isDefined(a.axis.series[0].userOptions.customOptions) ? a.axis.series[0].userOptions.customOptions : i.checkNestedProperty(a.series, "yAxis", "userOptions", "customOptions") ? a.series.yAxis.userOptions.customOptions : a.axis.userOptions.customOptions
        }
          , s = {
            type: "",
            title: {
                text: "",
                align: "left"
            },
            lang: {
                noData: "No data to display"
            },
            subtitle: {
                align: "right",
                x: -10
            },
            options: {
                chart: {
                    marginTop: 20,
                    events: {}
                },
                colors: c.SWATCH_LINE,
                lang: {
                    loading: "Loading Chart",
                    noData: "No data to display"
                },
                tooltip: {
                    formatter: function() {
                        return angular.isDefined(this.points) && this.points.length > 0 ? p.call(this) : q.call(this)
                    },
                    style: {
                        fontWeight: "bold"
                    },
                    useHTML: !1
                },
                loading: {
                    labelStyle: {
                        color: "#616161",
                        opacity: .5
                    },
                    style: {
                        backgroundColor: "#FFFFFF",
                        height: "100%",
                        width: "100%",
                        left: 0,
                        top: 0,
                        position: "absolute",
                        opacity: 1
                    }
                }
            },
            xAxis: {
                title: {
                    text: null
                },
                visible: !0,
                labels: {
                    enabled: !0
                }
            },
            yAxis: {
                showLastLabel: !0,
                title: {
                    text: null
                },
                visible: !0,
                labels: {
                    enabled: !0,
                    formatter: function() {
                        function a(a) {
                            return a % 1 === 0
                        }
                        var b;
                        if ("" == this.value || null == this.value)
                            return this.value;
                        if (angular.isDefined(this.series) ? b = angular.isDefined(this.series.yAxis.options.customOptions) ? this.series.yAxis.options.customOptions : this.series.yAxis.options.userOptions.customOptions : angular.isDefined(this.axis.userOptions.customOptions) || i.checkNestedProperty(this.axis, "series", "0", "userOptions", "customOptions") ? b = r(this) : angular.isDefined(this.points) && (b = this.points[0].series.yAxis.userOptions.customOptions),
                        b.formatDataToBytes)
                            return j(this.value, !0);
                        if (b.yAxisUnit)
                            return this.axis.defaultLabelFormatter.call(this) + " " + b.yAxisUnit;
                        if (b.formatDataToBitsPerSecond)
                            return k(this.value, !0);
                        if (b.formatDataToKiloBitsPerSecond)
                            return l(this.value, !0);
                        if (b.formatDataToPackets) {
                            if (a(this.value))
                                return m(this.value, !0)
                        } else if (b.formatDataToPacketCount) {
                            if (a(this.value))
                                return m(this.value, !0)
                        } else {
                            if (b.formatDecimals)
                                return this.value.toFixed(2);
                            if (!b.formatDataToPacketsPerSecond)
                                return this.value;
                            if (a(this.value))
                                return m(this.value, !0)
                        }
                    }
                }
            },
            legend: {
                enabled: !0
            },
            credits: {
                enabled: !1
            }
        };
        return a = function(a, b) {
            this.chartName = angular.isDefined(a.name) ? this.createUniqueChartName(a.name) : "",
            this.chartURL = angular.isDefined(a.chartURL) ? a.chartURL : void 0,
            this.APIData = angular.isDefined(a.APIData) ? a.APIData : void 0,
            this.autoLoad = !(!angular.isDefined(a.autoLoad) || !a.autoLoad),
            this.filtersSelected = angular.isDefined(a.filtersSelected) ? a.filtersSelected : void 0,
            this.chartSeriesClickHandler = angular.isDefined(a.seriesClickHandler) ? a.seriesClickHandler : void 0,
            this.fillZeros = angular.isDefined(a.fillZeros) ? a.fillZeros : void 0,
            this.insertAPIDataToSeriesPoints = angular.isDefined(a.insertAPIDataToSeriesPoints) ? a.insertAPIDataToSeriesPoints : void 0,
            this.chartConfig = angular.merge({}, s, b),
            this.chartConfig.yAxis.customOptions = {
                formatDataToBytes: !!a.formatDataToBytes,
                formatDataToPackets: !!a.formatDataToPackets,
                formatDataToPacketsPerSecond: !!a.formatDataToPacketsPerSecond,
                formatDataToBitsPerSecond: !!a.formatDataToBitsPerSecond,
                formatDataToKiloBitsPerSecond: !!a.formatDataToKiloBitsPerSecond,
                formatDataToPacketCount: !!a.formatDataToPacketCount,
                formatDecimals: !!a.formatDecimals,
                yAxisUnit: a.yAxisUnit
            },
            a.enableSharedToolTip && (this.chartConfig.options.tooltip.crosshairs = [{
                width: 1,
                color: "#616161",
                zIndex: 50
            }, !1],
            this.chartConfig.options.tooltip.shared = !0),
            this.originalChartConfig = angular.copy(this.chartConfig),
            this.filters = {}
        }
        ,
        a.prototype.processChartURL = function(a) {
            var b = this
              , c = angular.isDefined(a) && a.length > 0 ? a : b.getChartURL();
            return h.get(c)
        }
        ,
        a.prototype.createUniqueChartName = function(a) {
            return a.toLowerCase().replace(/ /g, "_")
        }
        ,
        a.prototype.extendChart = function(a) {
            angular.extend(this, _.omit(a, ["$$hashKey"]))
        }
        ,
        a.prototype.chartReflow = function() {
            g(function() {
                e.$broadcast("highchartsng.reflow")
            }, 2)
        }
        ,
        a.prototype.mergeNoDataObjectsToOtherObjects = function(a, b) {
            var c, e, f;
            if (e = angular.copy(a.APIData.data),
            c = _.without(_.uniq(_.pluck(_.flatten(e), b.property)), ""),
            !(c.length < 1)) {
                var g = _.filter(e, b.property, "");
                return angular.forEach(g, function(a) {
                    f = _.findIndex(e, a),
                    angular.forEach(c, function(c, d) {
                        var g = angular.copy(a);
                        g[b.property] = c;
                        var h = d < 1 ? 1 : 0;
                        e.splice(f, h, g),
                        f++
                    })
                }),
                e
            }
            d.setChartError("NO_SERIES_IN_HEADER"),
            a.changeNoDataMessageState(!0)
        }
        ,
        a.prototype.getChartURL = function() {
            return this.chartURL
        }
        ,
        a.prototype.setChartURL = function(a) {
            this.chartURL = a
        }
        ,
        a.prototype.getChartAPIData = function() {
            return this.APIData
        }
        ,
        a.prototype.setChartAPIData = function(a) {
            this.APIData = angular.copy(a)
        }
        ,
        a.prototype.convertToArrayOfValuesFromArray = function(a, b) {
            var c = [];
            return angular.forEach(a, function(a) {
                var b = !!a.hasOwnProperty("entry_time")
                  , d = _.values(a);
                d[0] = b && isFinite(parseInt(d[0])) ? parseInt(d[0]) : d[0],
                d[1] = parseFloat(d[1]),
                c.push(d)
            }),
            c
        }
        ,
        a.prototype.createCustomData = function(a, b, c) {
            var d = [];
            return angular.forEach(a, function(a) {
                var e = !!a.hasOwnProperty("entry_time")
                  , f = a[b]
                  , g = a[c];
                f = e && isFinite(parseInt(f)) ? parseInt(f) : f,
                g = parseFloat(g),
                d.push({
                    x: f,
                    y: g,
                    originalDataObj: a
                })
            }),
            d
        }
        ,
        a.prototype.convertToArrayOfValuesFromObject = function(a) {
            var b = _.values(a);
            return b[1] = parseFloat(b[1]),
            b
        }
        ,
        a.prototype.constructChartSeriesFromSelectedFilters = function(a, b, d, e) {
            var f = []
              , g = this;
            if (d.property.length > 0) {
                var h = 0;
                f = _.chain(e).groupBy(d.property).map(function(d, e) {
                    var f = {
                        name: e.toUpperCase(),
                        data: g.convertToArrayOfValuesFromArray(_.pluckMultiple(d, [a.property, b.property], b.property)),
                        visible: !0
                    };
                    return "entry_time" === a.property && (f.data = _.sortBy(f.data, function(a) {
                        return a[0]
                    })),
                    f.data = _.uniq(f.data, function(a) {
                        return JSON.stringify(a)
                    }),
                    angular.isDefined(c[f.name]) ? f.color = c[f.name] : (f.color = c.SWATCH_LINE[h],
                    h++),
                    angular.isDefined(g.chartSeriesClickHandler) && (f.cursor = "pointer",
                    f.events = {
                        click: g.chartSeriesClickHandler
                    }),
                    f.showInLegend = !!g.chartConfig.legend.enabled,
                    f
                }).value()
            }
            if (f.length < 1) {
                var i = {
                    showInLegend: !1,
                    data: []
                };
                f.push(i)
            }
            return f
        }
        ,
        a.prototype.constructChartDataWithOutSeries = function(a, b, c) {
            var d = []
              , e = this
              , f = _.chain(c).map(function(c, d) {
                return e.convertToArrayOfValuesFromObject(_.pick(c, [a.property, b.property]))
            }).value()
              , g = {
                data: f,
                showInLegend: !1,
                name: b.property
            };
            if (angular.isDefined(b.display) && (g.display = b.display),
            d.push(g),
            angular.isDefined(e.chartSeriesClickHandler) && (d.events = {
                click: e.chartSeriesClickHandler
            }),
            d.length < 1) {
                var h = {
                    showInLegend: !1,
                    data: []
                };
                d.push(h)
            }
            return d
        }
        ,
        a.prototype.createFilters = function(a) {
            var c = [];
            return c.xAxis = _.addValueProperty(_.findByValues(a, "dataType", b.X_FILTER_TYPES), "property"),
            c.yAxis = _.addValueProperty(_.findByValues(a, "dataType", b.Y_FILTER_TYPES), "property"),
            c.series = _.addValueProperty(_.findByValues(a, "dataType", b.SERIES_FILTER_TYPES), "property"),
            c
        }
        ,
        a.prototype.changeLoadingIndicatorState = function(a) {
            var b = this;
            b.chartConfig.loading = !!a
        }
        ,
        a.prototype.changeNoDataMessageState = function(a) {
            var b = this;
            if (a) {
                var c = {
                    noData: "No data to display",
                    loading: !0,
                    xAxis: {
                        visible: !1,
                        minorTickLength: 0,
                        tickLength: 0,
                        lineWidth: 0,
                        minorGridLineWidth: 0,
                        lineColor: "transparent",
                        labels: {
                            enabled: !1
                        }
                    },
                    yAxis: {
                        visible: !1,
                        labels: {
                            enabled: !1
                        }
                    }
                };
                b.chartConfig = angular.extend({}, b.chartConfig, c)
            } else
                b.chartConfig = angular.copy(b.originalChartConfig)
        }
        ,
        a.prototype.formatChartHeader = function(a, b) {
            var c = []
              , d = ["xAxis", "yAxis", "series"]
              , e = _.pick(a, d);
            return _.each(e, function(a, d) {
                c[d] = [],
                _.each(a, function(a) {
                    var e = _.find(b, {
                        property: a
                    });
                    c[d].push(e)
                })
            }),
            c
        }
        ,
        a.prototype.handleChartLabels = function(a, b) {
            var c = this;
            angular.isDefined(c.chartConfig.yAxis.labels.text) && null !== c.chartConfig.yAxis.labels.text && (c.chartConfig.yAxis.title.text = c.chartConfig.yAxis.labels.text.length > 0 ? c.chartConfig.yAxis.labels.text : b),
            angular.isDefined(c.chartConfig.xAxis.labels.text) && null !== c.chartConfig.xAxis.labels.text && (c.chartConfig.xAxis.title.text = c.chartConfig.xAxis.title.text.length > 0 ? c.chartConfig.xAxis.labels.text : a)
        }
        ,
        a.prototype.deleteChartSeries = function() {
            var a = this;
            angular.isDefined(a.chartConfig.series) && a.chartConfig.series.reset(),
            a.changeNoDataMessageState(!0)
        }
        ,
        a
    }
    angular.module("vManage").constant("chartConstants", {
        X_FILTER_TYPES: ["string", "date"],
        Y_FILTER_TYPES: ["number"],
        SERIES_FILTER_TYPES: ["string"]
    }),
    angular.module("vManage").constant("chartColors", {
        BAD: "#ff6e56",
        GOOD: "#90cc84",
        AVERAGE: "#ffd562",
        MAJOR: "#ffd562",
        MINOR: "#90cc84",
        CRITICAL: "#ff6e56",
        MEDIUM: "#59a2cb",
        OPTIMIZED: "#e67e22",
        UNOPTIMIZED: "#34495e",
        UP: "#90cc84",
        DOWN: "#ff6e56",
        MEM_USED: "#ffd562",
        MIN1_AVG: "#ffd562",
        SWATCH_AREA: ["#77DD77", "#FFB347", "#B39EB5", "#FDFD96", "#836953", "#FF6961", "#779ECB"],
        SWATCH_LINE: ["#16A085", "#F1C40F", "#2980B9", "#9B59B6", "#34495E", "#227889", "#E67E22", "#E74C3C", "#00B2CA", "#B25B66", "#7DCFB6", "#27AE60", "#B38FB1", "#888688", "#C78D6B", "#7F8040", "#955251", "#F79256", "#7DCFB6", "#7F8C8D", "#A0ECFB", "#1ABC9C", "#F39C12", "#3498DB", "#8E44AD", "#2C3E50", "#58C1BE", "#D35400", "#C0392B", "#1D4E89", "#803C80", "#FFDE55", "#2ECC71", "#94D9BB", "#C6CBCC", "#D2B29A", "#4E6E38", "#E3868F", "#EAD98B", "#9DC6D8", "#95A5A6", "#EAD98B"],
        TOTAL: "#616161"
    }),
    Highcharts.setOptions({
        global: {
            useUTC: !1
        }
    }),
    angular.module("vManage").factory("Chart", a),
    a.$inject = ["chartConstants", "chartColors", "ChartError", "$rootScope", "$q", "$timeout", "restService", "appUtil"]
}(),
function() {
    function a() {
        var a = {
            color: "",
            key: "",
            displayName: "",
            visible: !0
        }
          , b = function(b) {
            this.legendConfig = angular.merge({}, a, b)
        };
        return b.prototype.setDisplayName = function(a) {
            angular.isDefined(a) && (this.legendConfig.displayName = a)
        }
        ,
        b.prototype.setColor = function(a) {
            angular.isDefined(a) && (this.legendConfig.color = a)
        }
        ,
        b.prototype.setKey = function(a) {
            angular.isDefined(a) && (this.legendConfig.key = a.toLowerCase().replace(" ", "_"))
        }
        ,
        b.prototype.getVisibility = function() {
            return this.legendConfig.visible
        }
        ,
        b.prototype.toggleVisibility = function() {
            this.legendConfig.visible = !this.legendConfig.visible
        }
        ,
        b.prototype.setVisibility = function(a) {
            angular.isDefined(a) && (this.legendConfig.visible = a)
        }
        ,
        b
    }
    angular.module("vManage").factory("CategoryLegend", a),
    a.$inject = []
}(),
function() {
    function a(a) {
        var b = function(a, b) {
            var c = this;
            c.chartConfig = a,
            c.tableObject = b,
            angular.isDefined(c.chartConfig) && isArray(c.chartConfig.series) && c.chartConfig.series.length > 0 && c.chartConfig.series[0].data ? c.setCategoriesFromChartData(c.chartConfig.series[0].data) : c.categories = []
        };
        return b.prototype.setChartObject = function(a) {
            this.chartObject = a
        }
        ,
        b.prototype.setTableObject = function(a) {
            this.tableObject = a
        }
        ,
        b.prototype.setCategories = function(a) {
            this.categories = a
        }
        ,
        b.prototype.setCategoriesFromChartData = function(a) {
            var b = this;
            _.each(a, function(a, c) {
                b.addCategory(a, c)
            })
        }
        ,
        b.prototype.addCategory = function(b, c) {
            var d = new a
              , e = this;
            d.setDisplayName(b.name),
            angular.isDefined(e.chartConfig) && angular.isDefined(e.chartConfig.options.plotOptions.column) && angular.isDefined(e.chartConfig.options.plotOptions.column.colors) && angular.isDefined(e.chartConfig.options.plotOptions.column.colors.length > 0) ? d.setColor(e.chartConfig.options.plotOptions.column.colors[c]) : angular.isDefined(e.chartConfig) && angular.isDefined(e.chartConfig.options.colors) && angular.isDefined(e.chartConfig.options.colors.length > 0) && d.setColor(e.chartConfig.options.colors[c]),
            d.setKey(b.name),
            e.categories.splice(c, 0, d)
        }
        ,
        b.prototype.getCategoryIndex = function(a) {
            var b = this
              , c = -1;
            return _.each(b.categories, function(b, d) {
                c < 0 && b.legendConfig.key == a.legendConfig.key && (c = d)
            }),
            c
        }
        ,
        b.prototype.toggleLegend = function(a) {
            var b = this
              , c = b.getCategoryIndex(a);
            if (c > -1) {
                var d = b.categories[c];
                _.each(b.categories, function(a) {
                    a.getVisibility() ? a.setVisibility(d.legendConfig.key === a.legendConfig.key) : a.setVisibility(!!d.getVisibility())
                }),
                b.categories[c].setVisibility(!0)
            }
        }
        ,
        b.prototype.removeLegend = function(a) {
            var b = this
              , c = b.getCategoryIndex(a);
            angular.isDefined(c) && c > -1 && b.categories.splice(c)
        }
        ,
        b.prototype.updateCategoriesFromChartSeries = function(a) {
            var b = this;
            a[0].data.length !== b.categories.length && _.each(a[0].data, function(a) {
                var c;
                _.each(b.categories, function(b) {
                    b.displayName == a.name && (c = b)
                }),
                angular.isDefined(c) || b.addCategory(a, b.categories.length)
            })
        }
        ,
        b
    }
    angular.module("vManage").factory("CategoryLegendManager", a),
    a.$inject = ["CategoryLegend"]
}(),
function() {
    function a(a, b) {
        var c = this;
        c.$onInit = function() {
            c.categoryLegendManagerObject = new a(c.chartConfig)
        }
        ,
        c.toggleLegend = function(a) {
            c.categoryLegendManagerObject.toggleLegend(a),
            c.toggleLegendHandler({
                legendObj: a
            })
        }
        ,
        c.removeLegend = function(a) {
            c.categoryLegendManagerObject.removeLegend(a),
            c.removeLegendHandler({
                legendObj: a
            })
        }
        ,
        c.$doCheck = function() {
            angular.isDefined(this.chartConfig) && angular.isArray(this.chartConfig.series) && this.chartConfig.series.length > 0 && c.categoryLegendManagerObject.updateCategoriesFromChartSeries(this.chartConfig.series)
        }
        ,
        b.$on("chartCategoryLegendToggled", function(a, b) {
            var d;
            _.each(c.categoryLegendManagerObject.categories, function(a) {
                a.legendConfig.displayName === b.name && (d = a)
            }),
            angular.isDefined(d) && c.categoryLegendManagerObject.toggleLegend(d)
        })
    }
    a.$inject = ["CategoryLegendManager", "$scope"],
    angular.module("vManage").component("vipCategoryLegends", {
        templateUrl: "app/common/chart/components/categoryLegends/categoryLegendsTemplate.html",
        bindings: {
            chartConfig: "<",
            removeLegendHandler: "&",
            toggleLegendHandler: "&",
            removeLegendEnabled: "<"
        },
        controller: a,
        controllerAs: "vipCategoryLegendsCtrl"
    })
}(),
function() {
    function a() {
        var a, b;
        return {
            setChartObject: function(b) {
                a = b
            },
            setTableObject: function(a) {
                b = a
            },
            removeSeries: function(c) {
                angular.forEach(_.filter(a.chartConfig.series, {
                    name: c.name
                }), function(b, d) {
                    a.removeSeriesNames({
                        name: c.name,
                        yAxis: d
                    })
                }),
                angular.isDefined(b) && b.uiGridApi.selection.toggleRowSelection(_.find(b.data, function(b) {
                    return angular.isDefined(b[a.filtersSelected.series[0].property]) ? b[a.filtersSelected.series[0].property].toLowerCase() === c.name.toLowerCase() : b["name-hostname"].toLowerCase() === c.display.toLowerCase()
                }))
            },
            toggleLegends: function(b) {
                var c, d = [], e = [];
                angular.forEach(a.highChartApi.series, function(f, g) {
                    c = _.findIndex(a.chartConfig.series, function(a) {
                        return angular.isDefined(a.yAxis) ? f.name == a.name && f.yAxis.options.index == a.yAxis : f.name == a.name && (!angular.isDefined(a.yAxis) || 0 == a.yAxis)
                    }),
                    "total" !== f.name.toLowerCase() && (f.name.toLowerCase() !== b.name.toLowerCase() ? b.visible ? (a.chartConfig.series[c].visible = !a.chartConfig.series[c].visible,
                    a.chartConfig.series[c].visible ? f.setVisible(!0, !1) : f.setVisible(!1, !1)) : (a.chartConfig.series[c].visible = !1,
                    f.setVisible(!1, !1)) : (d.push(g),
                    e.push(c)))
                }),
                angular.forEach(d, function(b) {
                    a.highChartApi.series[b].setVisible(!0, !1)
                }),
                angular.forEach(e, function(b) {
                    a.chartConfig.series[b].visible = !0
                }),
                a.highChartApi.redraw()
            },
            removeMultiSeries: function(c) {
                angular.forEach(c, function(b) {
                    angular.forEach(_.filter(a.chartConfig.series, {
                        name: b.name
                    }), function(c, d) {
                        a.removeSeriesNames({
                            name: b.name,
                            yAxis: d
                        })
                    })
                }),
                angular.isDefined(b) && b.uiGridApi.selection.toggleRowSelection(_.find(b.data, function(b) {
                    return angular.isDefined(b[a.filtersSelected.series[0].property[0]]) ? b[a.filtersSelected.series[0].property[0]].toLowerCase() === c[0].name.toLowerCase() : b["name-hostname"].toLowerCase() === c[0].display.toLowerCase()
                }))
            },
            toggleMultiLegends: function(b) {
                var c, d = [], e = [], f = [];
                angular.forEach(b, function(b) {
                    angular.forEach(a.highChartApi.series, function(g, h) {
                        c = _.findIndex(a.chartConfig.series, function(a) {
                            return angular.isDefined(a.yAxis) ? g.name == a.name && g.yAxis.options.index == a.yAxis && 0 == _.difference(g.options.value, a.value).length : g.name == a.name && (!angular.isDefined(a.yAxis) || 0 == a.yAxis) && 0 == _.difference(g.options.value, a.value).length
                        }),
                        "total" !== g.name.toLowerCase() && _.indexOf(f, c) == -1 && (g.name.toLowerCase() !== b.name.toLowerCase() ? b.visible ? (a.chartConfig.series[c].visible = !a.chartConfig.series[c].visible,
                        f.push(c),
                        a.chartConfig.series[c].visible ? g.setVisible(!0, !1) : g.setVisible(!1, !1)) : (a.chartConfig.series[c].visible = !1,
                        f.push(c),
                        g.setVisible(!1, !1)) : (d.push(h),
                        e.push(c),
                        f.push(c)))
                    })
                }),
                angular.forEach(_.uniq(d), function(b) {
                    a.highChartApi.series[b].setVisible(!0, !1)
                }),
                angular.forEach(_.uniq(e), function(b) {
                    a.chartConfig.series[b].visible = !0
                }),
                a.highChartApi.redraw()
            }
        }
    }
    angular.module("vManage").factory("CustomLegend", a),
    a.$inject = []
}(),
function() {
    function a(a) {
        return {
            restrict: "AE",
            scope: {
                tableObject: "=",
                chartObject: "=",
                position: "=",
                keyProperty: "=",
                callBack: "&?",
                closeButtonEnable: "@"
            },
            templateUrl: "app/common/chart/components/customLegendsTemplate.html",
            link: function(b) {
                b.showCloseButton = "false" !== b.closeButtonEnable,
                a.setChartObject(b.chartObject),
                a.setTableObject(b.tableObject);
                var c = function() {
                    b.listInActive = _.find(b.chartObject.chartConfig.series, function(a) {
                        return a.visible === !1
                    })
                };
                b.removeSeries = function(b) {
                    a.removeSeries(b)
                }
                ,
                b.toggleLegends = function(d) {
                    a.toggleLegends(d),
                    c(),
                    angular.isDefined(b.callBack) && b.callBack()
                }
                ,
                c()
            }
        }
    }
    angular.module("vManage").directive("vipCustomLegends", a),
    a.$inject = ["CustomLegend"]
}(),
function() {
    function a(a) {
        return {
            restrict: "AE",
            scope: {
                tableObject: "=",
                chartObject: "=",
                position: "=",
                keyProperty: "=",
                callBack: "&?"
            },
            templateUrl: "app/common/chart/components/customMultiGroupLegendsTemplate.html",
            link: function(b) {
                a.setChartObject(b.chartObject),
                a.setTableObject(b.tableObject);
                var c = function() {
                    b.listInActive = _.find(b.chartObject.chartConfig.series, function(a) {
                        return a.visible === !1
                    })
                };
                b.removeSeries = function(b) {
                    a.removeMultiSeries(b)
                }
                ,
                b.toggleLegends = function(d) {
                    a.toggleMultiLegends(d),
                    c(),
                    angular.isDefined(b.callBack) && b.callBack()
                }
                ,
                c()
            }
        }
    }
    angular.module("vManage").directive("vipMultiGroupByCustomLegends", a),
    a.$inject = ["CustomLegend"]
}(),
function() {
    function a() {
        return {
            restrict: "AE",
            scope: {
                chartObject: "="
            },
            templateUrl: "app/common/chart/chartTemplate.html",
            link: function(a) {
                a.chartObject.getChartDataFromURL(),
                a.updateCheckboxSelection = function(a, b) {}
            }
        }
    }
    angular.module("vManage").directive("vipHighStockLineChart", a),
    a.$inject = []
}(),
function() {
    function a(a, b, c) {
        var d = function(b, c) {
            i.originalChartConfig = {
                chartDefinition: b,
                chartConfig: c
            },
            this.chartConfig = angular.merge({}, i, c),
            b.formatDataToBytes && (this.chartConfig.options.tooltip.formatDataToBytes = !0),
            a.apply(this, [b, this.chartConfig]),
            delete this.chartConfig.xAxis
        };
        return d.prototype = Object.create(a.prototype),
        d.prototype.constructor = d,
        d
    }
    angular.module("vManage").factory("GaugeChart", a);
    var b = 20
      , c = 40
      , d = "#AAAAAA"
      , e = "#BBBBBB"
      , f = "#CCCCCC"
      , g = 60 * b / 100
      , h = 60 * c / 100
      , i = {
        options: {
            chart: {
                type: "gauge",
                plotBackgroundColor: null,
                plotBackgroundImage: null,
                plotBorderWidth: 0,
                plotShadow: !1
            },
            pane: {
                startAngle: -130,
                endAngle: 130,
                background: [{
                    backgroundColor: "#fff",
                    borderWidth: 0
                }]
            },
            tooltip: {
                formatter: function() {
                    var a = '<span style="color:' + this.series.color + '">■    </span>';
                    return a += "<b> Speed " + this.y + " Mbps<b><br/>"
                }
            }
        },
        yAxis: {
            min: 0,
            max: 60,
            minorTickInterval: "auto",
            minorTickWidth: 0,
            minorTickLength: 0,
            minorTickPosition: "inside",
            minorTickColor: "#666",
            tickPixelInterval: 30,
            tickWidth: 2,
            tickPosition: "inside",
            tickLength: 10,
            tickColor: "#666",
            labels: {
                step: 2,
                rotation: "auto",
                style: {
                    "font-size": "14px",
                    "font-weight": "bold"
                }
            },
            title: {
                text: "Mbps"
            },
            plotBands: [{
                from: h,
                to: 60,
                max: 60,
                color: d
            }, {
                from: g,
                to: h,
                color: e
            }, {
                from: 0,
                to: g,
                color: f
            }]
        },
        series: [{
            name: "Speed",
            data: [0]
        }],
        subtitle: {},
        useHighStocks: !1
    };
    a.$inject = ["Chart", "$q", "ChartError"]
}(),
function() {
    function a(a, c, d, e, f) {
        var g = function(c, d) {
            c.enableSharedToolTip = !0,
            b.originalChartConfig = {
                chartDefinition: c,
                chartConfig: d
            },
            this.chartConfig = angular.merge({}, b, d),
            a.apply(this, [c, this.chartConfig])
        };
        return g.prototype = Object.create(a.prototype),
        g.prototype.constructor = g,
        g.prototype.updateChartsData = function(a, b, c, d) {
            function e(a, b) {
                var c = _.filter(a, {
                    property: b
                });
                return angular.isDefined(c) && angular.isArray(c) ? c[0] : c
            }
            var f, g, h, i;
            f = b.length > 1 ? e(b, a.filtersSelected.xAxis[0]) : b[0],
            g = c.length > 1 ? e(c, a.filtersSelected.yAxis[0]) : c[0],
            h = d.length > 1 ? e(d, a.filtersSelected.series[0]) : d[0],
            f.property.length > 0 && g.property.length > 0 && angular.isDefined(h) && (i = a.mergeNoDataObjectsToOtherObjects(a, h),
            angular.isDefined(i) && (a.chartConfig.series = a.constructChartSeriesFromSelectedFilters(f, g, h, i),
            1 === a.chartConfig.series.length && a.chartConfig.series[0].data.length < 1 && !angular.isDefined(a.chartConfig.noData) && a.changeNoDataMessageState(!0),
            a.handleChartLabels(a, f.property.toUpperCase(), g.property.toUpperCase())))
        }
        ,
        g.prototype.updateChartAPIData = function(a) {
            var b = this;
            b.setChartAPIData(a),
            b.chartConfig = angular.copy(b.originalChartConfig);
            var c = a;
            if (b.changeLoadingIndicatorState(!1),
            angular.isDefined(c.header.chart))
                if (Object.keys(c.header.chart).length < 1)
                    f.setChartError("NO_CHART_CONFIG"),
                    b.changeNoDataMessageState(!0);
                else {
                    var d = b.formatChartHeader(a.header.chart, a.header.fields);
                    b.updateChartsData(b, d.xAxis, d.yAxis, d.series),
                    b.chartReflow()
                }
        }
        ,
        g.prototype.updateChartURL = function(a) {
            var b = this;
            a && (b.chartURL = a),
            b.getChartDataFromURL()
        }
        ,
        g.prototype.getChartDataFromURL = function() {
            var a = this
              , b = a.chartURL;
            a.changeLoadingIndicatorState(!0),
            a.processChartURL(b).then(function(b) {
                angular.isDefined(b) && angular.isDefined(b.data) ? a.updateChartAPIData(b) : a.changeNoDataMessageState(!0),
                a.chartReflow()
            }, function(b) {
                angular.isObject(b) && c.checkNestedProperty(b, "error", "details") ? (d.error("Error occurred while retrieving chart data: " + b.error.message + ":" + b.error.details),
                e.error(b.error.message + ": " + b.error.details)) : (d.info("API error response needs to be updated to conform to company guidelines" + a.chartURL),
                e.error("Error occurred while retrieving chart data.")),
                a.changeNoDataMessageState(!0)
            })
        }
        ,
        g
    }
    angular.module("vManage").factory("LineChart", a),
    a.$inject = ["Chart", "appUtil", "$log", "notification", "ChartError"];
    var b = {
        options: {
            scrollbar: {
                enabled: !1
            },
            chart: {
                type: "line",
                zoomType: "x",
                panning: !0,
                panKey: "shift",
                resetZoomButton: {
                    position: {
                        x: 0,
                        y: -10
                    },
                    theme: {
                        fill: "#0091ea",
                        style: {
                            color: "white",
                            cursor: "pointer"
                        },
                        stroke: "silver",
                        r: 0,
                        states: {
                            hover: {
                                fill: "#42A5F5",
                                style: {
                                    color: "white",
                                    cursor: "pointer"
                                }
                            }
                        }
                    }
                }
            },
            plotOptions: {
                series: {
                    lineWidth: 1.5,
                    marker: {
                        symbol: "circle",
                        enabled: null,
                        radius: 3
                    },
                    connectNulls: !0,
                    softThreshold: !1
                }
            },
            legend: {
                enabled: !0
            },
            rangeSelector: {
                enabled: !1
            },
            navigator: {
                enabled: !1
            },
            tooltip: {
                shared: !1,
                crosshairs: !1
            }
        },
        xAxis: {
            type: "datetime",
            labels: {
                enabled: !0,
                formatter: function() {
                    var a = moment(this.value)
                      , b = a.format("MMM DD, HH:mm");
                    return b
                }
            },
            title: {
                text: null
            },
            visible: !0,
            minorTickLength: 1,
            lineWidth: 1
        },
        yAxis: {
            title: {
                text: null
            },
            minPadding: 0,
            maxPadding: 0,
            min: 0,
            minRange: 1,
            showEmpty: !1,
            opposite: !1
        },
        useHighStocks: !0
    }
}(),
function() {
    function a(a, c, d, e) {
        var f = function(c, d) {
            b.originalChartConfig = {
                chartDefinition: c,
                chartConfig: d
            },
            this.chartConfig = angular.merge({}, b, d),
            c.formatDataToBytes && (this.chartConfig.options.tooltip.formatDataToBytes = !0),
            a.apply(this, [c, this.chartConfig])
        };
        return f.prototype = Object.create(a.prototype),
        f.prototype.constructor = f,
        f.prototype.constructChartDataWithOutSeries = function(a, b, c) {
            var d = []
              , f = [];
            return _.each(c, function(c) {
                var d = c[a.property]
                  , g = c[b.property]
                  , h = {
                    name: d,
                    y: g
                };
                angular.isDefined(e[d.toUpperCase()]) && (h.color = e[d.toUpperCase()]),
                f.push(h)
            }),
            d.push({
                data: f,
                showInLegend: !1,
                name: b.property
            }),
            d
        }
        ,
        f.prototype.updateChartsData = function(a, b, c) {
            function d(a, b) {
                var c = _.filter(a, {
                    property: b
                });
                return angular.isDefined(c) && angular.isArray(c) ? c[0] : c
            }
            var e, f, g;
            e = b.length > 1 ? d(b, a.filtersSelected.name[0]) : b[0],
            f = c.length > 1 ? d(c, a.filtersSelected.yAxis[0]) : c[0],
            e.property.length > 0 && f.property.length > 0 && (g = angular.copy(a.APIData.data),
            a.chartConfig.series = a.constructChartDataWithOutSeries(e, f, g),
            1 === a.chartConfig.series.length && a.chartConfig.series[0].data.length < 1 && !angular.isDefined(a.chartConfig.noData) && a.changeNoDataMessageState(!0),
            a.handleChartLabels(a, e.property.toUpperCase(), f.property.toUpperCase()))
        }
        ,
        f.prototype.formatChartHeader = function(a, b) {
            var c = []
              , d = ["name", "yAxis"]
              , e = _.pick(a, d);
            return _.each(e, function(a, d) {
                c[d] = [],
                _.each(a, function(a) {
                    var e = _.find(b, {
                        property: a
                    });
                    c[d].push(e)
                })
            }),
            c
        }
        ,
        f.prototype.updateChartAPIData = function(a) {
            var b = this;
            b.setChartAPIData(a),
            b.chartConfig = angular.copy(b.originalChartConfig);
            var c = a;
            if (b.changeLoadingIndicatorState(!1),
            angular.isDefined(c.header.chart))
                if (Object.keys(c.header.chart).length < 1)
                    d.setChartError("NO_CHART_CONFIG"),
                    b.changeNoDataMessageState(!0);
                else {
                    var e = b.formatChartHeader(a.header.chart, a.header.fields);
                    b.updateChartsData(b, e.name, e.yAxis),
                    b.chartReflow()
                }
        }
        ,
        f.prototype.updateChartURL = function(a) {
            var b = this;
            a && (b.chartURL = a),
            b.getChartDataFromURL()
        }
        ,
        f.prototype.getChartDataFromURL = function() {
            var a = this
              , b = a.chartURL;
            a.changeLoadingIndicatorState(!0),
            a.processChartURL(b).then(function(b) {
                angular.isDefined(b) && angular.isDefined(b.data) ? a.updateChartAPIData(b) : a.changeNoDataMessageState(!0),
                a.chartReflow()
            }, function(b) {
                angular.isDefined(b.status) && 499 === b.status && a.changeNoDataMessageState(!0)
            })
        }
        ,
        f
    }
    angular.module("vManage").factory("PieChart", a),
    a.$inject = ["Chart", "$q", "ChartError", "chartColors"];
    var b = {
        options: {
            chart: {
                type: "pie"
            },
            tooltip: {}
        },
        subtitle: {}
    }
}(),
function() {
    function a(a) {
        var b = {
            options: {
                chart: {
                    type: "area"
                }
            }
        }
          , c = function(c, d) {
            b.originalChartConfig = {
                chartDefinition: c,
                chartConfig: d
            },
            this.chartConfig = angular.merge({}, b, d),
            a.apply(this, [c, this.chartConfig])
        };
        return c.prototype = Object.create(a.prototype),
        c.prototype.constructor = c,
        c
    }
    angular.module("vManage").factory("HighStockAreaChart", a),
    a.$inject = ["HighStockLineChart"]
}(),
function() {
    function a(a, b) {
        var c = {
            options: {
                chart: {
                    type: "column"
                },
                plotOptions: {
                    column: {
                        pointWidth: 20,
                        color: "#0091ea"
                    }
                },
                scrollbar: {
                    enabled: !1
                }
            },
            subtitle: {},
            xAxis: {
                crosshair: !1,
                type: "datetime",
                labels: {
                    enabled: !0,
                    formatter: function() {
                        var a = moment(this.value)
                          , b = a.format("MMM DD, HH:mm");
                        return b
                    }
                },
                title: {
                    text: null
                },
                visible: !0
            },
            yAxis: {
                type: "logarithmic",
                minorTickInterval: 1,
                tickInterval: 1,
                gridLineWidth: 0,
                labels: {
                    enabled: !0
                },
                title: {
                    text: null
                },
                visible: !0
            }
        }
          , d = function(b, d) {
            c.originalChartConfig = {
                chartDefinition: b,
                chartConfig: d
            },
            this.chartConfig = angular.merge({}, c, d),
            a.apply(this, [b, this.chartConfig])
        };
        d.prototype = Object.create(a.prototype),
        d.prototype.constructor = d,
        d.prototype.seriesClickHandler = function(a, b) {
            var c, d, e = (a.category,
            a.selected);
            e ? angular.forEach(a.series.points, function(a) {
                var b = {};
                c = Highcharts.Color(a.color).setOpacity(1).get(),
                d = Highcharts.Color(a.color).setOpacity(.4).get(),
                a.pointAttr.select.color != c && (b.states = {
                    select: {
                        color: c
                    }
                }),
                b.color = d,
                a.update(b, !0, !1)
            }) : angular.forEach(a.series.points, function(a) {
                c = Highcharts.Color(a.color).setOpacity(1).get(),
                a.update({
                    color: c
                }, !0, !1)
            }),
            a.series.yAxis.options.customOptions.chartSeriesClickHandler(b)
        }
        ;
        var e = function(a, b, c, d) {
            var e = []
              , f = this
              , g = c.property;
            if (c.names.length > 0) {
                d || (d = f.APIData.data);
                var g = c.property;
                _.each(c.names, function(b) {
                    var c = {};
                    c[g] = b.name;
                    var f = _.find(d.data, c);
                    angular.isDefined(f) && f.hasOwnProperty(g) && f.hasOwnProperty(a) && e.push({
                        name: f[g],
                        y: f[a]
                    })
                })
            } else
                d.data.length > 0 && _.each(d.data, function(b) {
                    angular.isDefined(b) && b.hasOwnProperty(g) && b.hasOwnProperty(a) && e.push({
                        name: b[g],
                        y: b[a]
                    })
                });
            return [{
                name: b[0].name,
                display: b[0].display,
                colorByPoint: !0,
                data: e,
                yAxis: 0,
                visible: !0
            }]
        };
        d.prototype.addFromRawData = function(a, b) {
            var c = this
              , d = e.call(c, c.filtersSelected.yAxis, c.filtersSelected.series[0].values, a, b);
            c.chartConfig.series[0].data = d[0].data,
            c.updateOriginalChartConfigSeries(c.chartConfig.series),
            c.changeLoadingIndicatorState(!1),
            c.checkSetNoDataMessage(),
            c.chartReflow()
        }
        ,
        d.prototype.addCategoriesFromRawData = function(a, b, c) {
            var d = this;
            angular.isArray(a) || (a = [a]),
            a.length > 1 && a.splice(1);
            var f = a.filter(function(a) {
                return !d.filtersSelected.series[0].values.some(function(b) {
                    return angular.isDefined(a.yAxis) ? a.name == b.name && a.yAxis == b.yAxis : a.name == b.name && (!angular.isDefined(a.yAxis) || 0 == a.yAxis)
                })
            });
            if (f.length < 1)
                return d.addFromRawData(b, c),
                !0;
            d.filtersSelected.series[0].values.reset(),
            d.filtersSelected.series[0].values.push(f[0]);
            var g = e.call(d, d.filtersSelected.yAxis, f, b, c);
            if (angular.forEach(g, function(a) {
                d.addSeries(a, a.data, a.display, a.visible)
            }),
            d.updateOriginalChartConfigSeries(d.chartConfig.series),
            angular.isDefined(d.chartSeriesClickHandler)) {
                var h = {
                    bubble: {
                        dataLabels: {
                            enabled: !0,
                            color: "black",
                            style: {
                                textShadow: "none"
                            },
                            formatter: function() {
                                return this.point.name
                            }
                        }
                    },
                    series: {
                        cursor: "pointer",
                        point: {
                            events: {
                                select: function(a) {
                                    this.selected = !0,
                                    d.seriesClickHandler(this, a)
                                },
                                unselect: function(a) {
                                    var b = _.find(this.series.chart.getSelectedPoints(), this);
                                    angular.isDefined(b) && (b.selected = !1,
                                    d.seriesClickHandler(this, a))
                                }
                            }
                        }
                    }
                };
                d.chartConfig.options.plotOptions = angular.merge({}, d.chartConfig.options.plotOptions, h),
                d.chartConfig.yAxis[0].customOptions.chartSeriesClickHandler = d.chartSeriesClickHandler
            }
            d.updateOriginalChartConfigSeries(d.chartConfig.series),
            d.changeLoadingIndicatorState(!1),
            d.checkSetNoDataMessage(),
            angular.isDefined(d.highChartApi) && d.highChartApi.zoomOut(),
            d.chartReflow()
        }
        ,
        d.prototype.removeSeriesNames = function(a) {
            var b = this;
            angular.isArray(a) || (a = [a]),
            angular.forEach(a, function(a) {
                f(a, b.chartConfig.series)
            })
        }
        ;
        var f = function(a, b) {
            var c = _.findIndex(b, function(b) {
                return a.yAxis ? a.name === b.name && a.yAxis == b.yAxis : a.name === b.name && (!angular.isDefined(b.yAxis) || 0 == b.yAxis)
            });
            c > -1 && b.splice(c, 1)
        };
        return d
    }
    angular.module("vManage").factory("HighStockBarChart", a),
    a.$inject = ["HighStockLineChart", "Chart"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        var g, h = {
            options: {
                scrollbar: {
                    enabled: !1
                },
                chart: {
                    type: "line",
                    zoomType: "x",
                    panning: !0,
                    panKey: "shift",
                    resetZoomButton: {
                        position: {
                            x: 0,
                            y: -10
                        },
                        theme: {
                            fill: "#0091ea",
                            style: {
                                color: "white",
                                cursor: "pointer"
                            },
                            stroke: "silver",
                            r: 0,
                            states: {
                                hover: {
                                    fill: "#42A5F5",
                                    style: {
                                        color: "white",
                                        cursor: "pointer"
                                    }
                                }
                            }
                        }
                    }
                },
                plotOptions: {
                    series: {
                        lineWidth: 1.5,
                        marker: {
                            symbol: "circle",
                            enabled: null,
                            radius: 3
                        },
                        connectNulls: !0,
                        softThreshold: !1
                    }
                },
                rangeSelector: {
                    enabled: !1
                },
                legend: {
                    enabled: !1
                }
            },
            xAxis: {
                type: "datetime",
                labels: {
                    enabled: !0,
                    formatter: function() {
                        var a = moment(this.value);
                        return a.format("MMM DD, HH:mm")
                    }
                },
                title: {
                    text: ""
                },
                visible: !0,
                minorTickLength: 1,
                lineWidth: 1
            },
            legend: {
                enabled: !1
            },
            series: [],
            useHighStocks: !0
        }, i = function(b, d) {
            if (b.enableSharedToolTip || (b.enableSharedToolTip = !0),
            b.filtersSelected = b.filtersSelected ? b.filtersSelected : {},
            h.originalChartConfig = {
                chartDefinition: b,
                chartConfig: d
            },
            this.chartConfig = angular.merge({}, h, d),
            a.apply(this, [b, this.chartConfig]),
            c.checkNestedProperty(d, "yAxis"))
                angular.isArray(d.yAxis) ? (angular.forEach(d.yAxis, function(a) {
                    angular.extend(a, {
                        customOptions: this.chartConfig.yAxis.customOptions,
                        labels: this.chartConfig.yAxis.labels
                    })
                }, this),
                this.chartConfig.yAxis = d.yAxis) : (this.chartConfig.yAxis.opposite = !1,
                this.chartConfig.yAxis = [this.chartConfig.yAxis]);
            else {
                var e = {
                    min: 0,
                    minRange: 1,
                    lineWidth: 2,
                    title: {
                        text: null
                    },
                    opposite: !1
                };
                this.chartConfig.yAxis = [angular.merge({}, this.chartConfig.yAxis, e)]
            }
            this.originalChartConfig = angular.copy(this.chartConfig),
            this.realTimeLoad = b.realTimeLoad,
            this.asyncLoad = b.asyncLoad,
            this.showToolbar = b.showToolbar
        };
        i.prototype = Object.create(a.prototype),
        i.prototype.constructor = i,
        i.prototype.setXAxisProperty = function(a) {
            angular.isArray(a) || (a = [a]),
            this.filtersSelected.xAxis = a
        }
        ,
        i.prototype.setYAxisProperty = function(a) {
            angular.isArray(a) || (a = [a]),
            this.filtersSelected.yAxis = a
        }
        ,
        i.prototype.addChartOptionsYAxis = function(a) {
            if (angular.isDefined(a)) {
                if (angular.isDefined(this.chartConfig.yAxis) && this.chartConfig.yAxis.length > 0)
                    var b = angular.copy(this.chartConfig.yAxis[0]);
                a = angular.merge(b, a),
                this.chartConfig.yAxis.push(a)
            }
        }
        ,
        i.prototype.setChartOptionsYAxis = function(a, b) {
            angular.isDefined(a) && c.checkNestedProperty(this.chartConfig.yAxis, b) && (this.chartConfig.yAxis[b] = angular.merge(this.chartConfig.yAxis[b], a),
            this.originalChartConfig.yAxis[b] = angular.copy(this.chartConfig.yAxis[b]))
        }
        ,
        i.prototype.setChartOptionsXAxis = function(a, b) {
            angular.isDefined(a) && c.checkNestedProperty(this.chartConfig.xAxis, b) ? (this.chartConfig.xAxis[b] = angular.merge(this.chartConfig.xAxis[b], a),
            this.originalChartConfig.xAxis[b] = angular.copy(this.chartConfig.xAxis[b])) : angular.isDefined(a) && (this.chartConfig.xAxis = angular.merge(this.chartConfig.xAxis, a),
            this.originalChartConfig.xAxis = angular.copy(this.chartConfig.xAxis))
        }
        ,
        i.prototype.setChartOptions = function(a) {
            angular.isDefined(a) && angular.isDefined(this.chartConfig.options) && (this.chartConfig.options = angular.merge(this.chartConfig.options, a),
            this.originalChartConfig.options = angular.copy(this.chartConfig.options))
        }
        ,
        i.prototype.setSeriesCustomOptions = function(a) {
            var b = this;
            b.seriesCustomOptions = a,
            angular.forEach(b.chartConfig.series, function(b) {
                b.customOptions = a
            })
        }
        ,
        i.prototype.setPostProcessing = function(a) {
            var b = this;
            b.postProcessingFunc = a
        }
        ,
        i.prototype.setSeriesNames = function(a) {
            var b = this;
            angular.isArray(a) || (a = [a]),
            b.filtersSelected.series = a,
            b.chartConfig.series.reset(),
            angular.forEach(a.values, function(a) {
                b.addSeries(a, [], a.display, a.visible)
            })
        }
        ,
        i.prototype.getSeriesNames = function() {
            var a = this;
            return a.chartConfig.series
        }
        ,
        i.prototype.addSeriesNames = function(a) {
            var b = this;
            angular.isArray(a) || (a = [a]);
            var c = a.filter(function(a) {
                return !b.filtersSelected.series[0].values.some(function(b) {
                    return angular.isDefined(a.yAxis) ? a.name == b.name && a.yAxis == b.yAxis : a.name == b.name && (!angular.isDefined(a.yAxis) || 0 == a.yAxis)
                })
            });
            b.filtersSelected.series[0].values = b.filtersSelected.series[0].values.concat(c),
            angular.forEach(c, function(a) {
                b.addSeries(a, [], a.display, a.visible)
            })
        }
        ,
        i.prototype.removeSeriesNames = function(a) {
            var b = this;
            angular.isArray(a) || (a = [a]),
            angular.forEach(a, function(a) {
                p(a, b.filtersSelected.series[0].values),
                p(a, b.chartConfig.series)
            })
        }
        ,
        i.prototype.removeAllSeriesNames = function() {
            var a = this;
            angular.forEach(a.filtersSelected.series, function(a) {
                a.values.reset()
            }),
            a.chartConfig.series.reset()
        }
        ,
        i.prototype.setData = function(a, b) {
            var c = this
              , d = o(c.chartConfig.series, a);
            d && (d.data = b),
            c.updateOriginalChartConfigSeries(c.chartConfig.series),
            angular.isDefined(c.highChartApi) && c.highChartApi.zoomOut()
        }
        ,
        i.prototype.changeNoDataMessageState = function(b) {
            var c = this;
            a.prototype.changeNoDataMessageState.call(c, b),
            angular.isArray(c.chartConfig.yAxis) || (c.chartConfig.yAxis = [c.chartConfig.yAxis])
        }
        ,
        i.prototype.addFromRawData = function(a) {
            var b = this
              , c = m.call(b, b.filtersSelected.yAxis, b.filtersSelected.series[0].values, a);
            angular.forEach(c, function(a) {
                var c = o(b.chartConfig.series, a);
                c && (c.data = a.data)
            }),
            b.updateOriginalChartConfigSeries(b.chartConfig.series),
            angular.isDefined(b.highChartApi) && b.highChartApi.zoomOut()
        }
        ,
        i.prototype.prefillSeriesData = function(a, b) {
            var c, d = this;
            angular.forEach(d.highChartApi.series, function(e) {
                if (!(e.data.length < b))
                    return !1;
                for (c = -(b - 1); c <= 0; c += 1)
                    e.addPoint([a - 6e4 * Math.abs(c), null], !0, !1);
                var f = _.find(d.chartConfig.series, function(a) {
                    return angular.isDefined(e.yAxis.options.index) ? e.name === a.name && e.yAxis.options.index == a.yAxis : e.name === a.name && (!angular.isDefined(a.yAxis) || 0 == a.yAxis)
                });
                f.data = e.options.data
            }),
            d.updateOriginalChartConfigSeries(d.chartConfig.series)
        }
        ,
        i.prototype.concatFromRawData = function(a, b, c) {
            var d = this
              , e = m.call(d, d.filtersSelected.yAxis, d.filtersSelected.series[0].values, a);
            angular.forEach(e, function(a) {
                var e = _.find(d.highChartApi.series, function(b) {
                    return angular.isDefined(a.yAxis) ? a.name === b.name && a.yAxis == b.yAxis.options.index : a.name === b.name && 0 == b.yAxis.options.index
                });
                if (e) {
                    b && e.data.length >= c ? e.addPoint(a.data[0], !0, !0) : e.addPoint(a.data[0], !0, !1);
                    var f = o(d.chartConfig.series, a);
                    f && (f.data = e.options.data)
                }
            }),
            d.updateOriginalChartConfigSeries(d.chartConfig.series),
            angular.isDefined(d.highChartApi) && d.highChartApi.zoomOut()
        }
        ,
        i.prototype.addSeriesFromRawData = function(a, b) {
            var c = this;
            angular.isArray(a) || (a = [a]);
            var d = a.filter(function(a) {
                return !c.filtersSelected.series[0].values.some(function(b) {
                    return angular.isDefined(a.yAxis) ? a.name == b.name && a.yAxis == b.yAxis : a.name == b.name && (!angular.isDefined(a.yAxis) || 0 == a.yAxis)
                })
            });
            if (d.length < 1)
                return c.addFromRawData(b),
                !0;
            c.filtersSelected.series[0].values = c.filtersSelected.series[0].values.concat(d);
            var e = m.call(c, c.filtersSelected.yAxis, d, b);
            angular.forEach(e, function(a) {
                c.addSeries(a, a.data, a.display, a.visible)
            }),
            c.updateOriginalChartConfigSeries(c.chartConfig.series),
            angular.isDefined(c.highChartApi) && c.highChartApi.zoomOut()
        }
        ,
        i.prototype.addSeriesFromRawDataMultiYAxis = function(a, b, c) {
            var d = this;
            angular.isArray(a) || (a = [a]);
            var e = a.filter(function(a) {
                return !d.filtersSelected.series[c].values.some(function(b) {
                    return a.name == b.name
                })
            });
            d.filtersSelected.series[c].values = d.filtersSelected.series[c].values.concat(e);
            var f = n.call(d, d.filtersSelected.yAxis, e, b, c);
            angular.isDefined(f) && f.length > 0 ? angular.forEach(f, function(a) {
                d.addSeries(a, a.data, a.display, a.visible)
            }) : angular.forEach(e, function(a) {
                var b = o(d.chartConfig.series, a);
                b || (a.yAxis = angular.isDefined(c) && c > 0 ? c : 0,
                d.addSeries(a, [], a.display, a.visible))
            }),
            d.updateOriginalChartConfigSeries(d.chartConfig.series),
            d.changeLoadingIndicatorState(!1),
            d.checkSetNoDataMessage(),
            angular.isDefined(d.highChartApi) && d.highChartApi.zoomOut()
        }
        ,
        i.prototype.concatFromRawDataMultiYAxis = function(a, b, c, d, e) {
            var f = this;
            angular.isArray(a) || (a = [a]);
            var g = a.filter(function(a) {
                return !f.filtersSelected.series[c].values.some(function(b) {
                    return a.name == b.name
                })
            });
            f.filtersSelected.series[c].values = f.filtersSelected.series[c].values.concat(g);
            var h = n.call(f, f.filtersSelected.yAxis, g, b, c);
            angular.forEach(h, function(a) {
                var b = _.find(f.highChartApi.series, function(b) {
                    return angular.isDefined(a.yAxis) ? a.name === b.name && a.yAxis == b.yAxis.options.index : a.name === b.name && 0 == b.yAxis.options.index
                });
                if (b) {
                    d && b.data.length >= e ? b.addPoint(a.data[0], !0, !0) : b.addPoint(a.data[0], !0, !1);
                    var c = o(f.chartConfig.series, a);
                    c && (c.data = b.options.data)
                }
            }),
            angular.isDefined(f.highChartApi) && f.highChartApi.zoomOut()
        }
        ,
        i.prototype.addSeriesFromAPI = function(a, b, c) {
            var d = this;
            d.changeLoadingIndicatorState(!0),
            angular.isArray(a) || (a = [a]);
            var e = a.filter(function(a) {
                return !d.filtersSelected.series[0].values.some(function(b) {
                    return angular.isDefined(a.yAxis) ? a.name == b.name && a.yAxis == b.yAxis : a.name == b.name && (!angular.isDefined(a.yAxis) || 0 == a.yAxis)
                })
            });
            return d.filtersSelected.series[0].values = d.filtersSelected.series[0].values.concat(e),
            d.realTimeLoad ? (k.call(d, b, d.filtersSelected.yAxis, e),
            !0) : (c = q(c),
            void (c && (d.asyncLoad ? l.call(d, b, c, 1e4, void 0, d.filtersSelected.yAxis, e) : d.getChartDataFromURL(b, c),
            angular.isDefined(d.highChartApi) && d.highChartApi.zoomOut())))
        }
        ,
        i.prototype.getChartDataFromURL = function(a, b) {
            var c = this;
            return a && (c.chartURL = {
                url: a,
                postBody: b
            }),
            c.changeLoadingIndicatorState(!0),
            c.realTimeLoad ? (k.call(c, c.chartURL.url, c.filtersSelected.yAxis),
            !0) : (c.chartURL.postBody = q(c.chartURL.postBody),
            void (c.chartURL.postBody && (c.asyncLoad && l.call(c, c.chartURL.url, c.chartURL.postBody, 1e4, void 0, c.filtersSelected.yAxis),
            angular.isDefined(c.highChartApi) && c.highChartApi.zoomOut())))
        }
        ,
        i.prototype.updateSeriesAxisLabel = function(a, b) {
            var c = this;
            angular.forEach(c.originalChartConfig.series, function(c) {
                0 != b || c.yAxis != b && angular.isDefined(c.yAxis) ? c.yAxis == b && (c.axisIndexLabel = a) : c.axisIndexLabel = a
            })
        }
        ,
        i.prototype.updateOriginalChartConfigSeries = function(a) {
            var b = this;
            b.originalChartConfig.series = a
        }
        ,
        i.prototype.refresh = function(a, b) {
            var c = this;
            a && (c.chartURL = {
                url: a,
                postBody: b
            }),
            angular.forEach(c.chartConfig.series, function(a) {
                a.data.reset()
            }),
            c.updateOriginalChartConfigSeries(c.chartConfig.series),
            c.getChartDataFromURL()
        }
        ,
        i.prototype.emptySeriesData = function(a) {
            var b = this;
            angular.isArray(a) || (a = [a]),
            angular.forEach(a, function(a) {
                var c = o(b.chartConfig.series, a);
                c && c.data.reset()
            }),
            b.updateOriginalChartConfigSeries(b.chartConfig.series)
        }
        ,
        i.prototype.emptyAllSeriesData = function() {
            var a = this;
            angular.forEach(a.chartConfig.series, function(a) {
                a.data.reset()
            }),
            a.updateOriginalChartConfigSeries(a.chartConfig.series)
        }
        ,
        i.prototype.cancelRealTimePolling = function() {
            e.cancel(g),
            g = {}
        }
        ,
        i.prototype.addSeries = function(a, b, c, d) {
            var e = this;
            e.chartConfig.series.push({
                type: angular.isDefined(a.type) ? a.type : null,
                data: angular.isDefined(b) ? b : [],
                display: c ? c : a.name,
                name: a.name,
                value: a.value,
                color: j(a, e),
                visible: !angular.isDefined(d) || d,
                axisIndexLabel: a.axisIndexLabel ? a.axisIndexLabel : "",
                yAxis: a.yAxis ? a.yAxis : 0,
                customOptions: a.seriesCustomOptions ? a.seriesCustomOptions : e.seriesCustomOptions,
                index: "Total" === a.name ? 0 : null,
                marker: e.chartConfig.options.plotOptions.series.marker
            })
        }
        ;
        var j = function(a, c) {
            return angular.isDefined(b[a.name.toUpperCase()]) ? b[a.name.toUpperCase()] : c.assignUniqueColor(a)
        };
        i.prototype.checkSetNoDataMessage = function() {
            var a = this
              , b = _.findIndex(a.chartConfig.series, function(a) {
                return a.data.length > 0
            });
            b < 0 && a.changeNoDataMessageState(!0)
        }
        ,
        i.prototype.assignUniqueColor = function(a) {
            var c = this;
            if (angular.isDefined(a.yAxis) && 0 != a.yAxis) {
                var d = _.find(c.chartConfig.series, function(b) {
                    return angular.equals(a.name, b.name) && (!angular.isDefined(b.yAxis) || angular.equals(b.yAxis, 0))
                });
                if (d)
                    return d.color
            }
            return _.find(b.SWATCH_LINE, function(a) {
                if (!_.find(c.chartConfig.series, function(b) {
                    return b.color === a
                }))
                    return a
            })
        }
        ,
        i.prototype.validateUrl = function(a) {
            return q(a)
        }
        ;
        var k = function(a, b, c) {
            function h(a, b, c) {
                d.get(a).then(function(d) {
                    if (i.APIData = d,
                    0 == d.data.length)
                        return !0;
                    d.data = f.convertToHostname(d.header.columns, d.data);
                    var j = m.call(i, b, c);
                    c && c.length > 0 ? angular.forEach(c, function(a) {
                        var b = o(j, a);
                        b ? i.addSeries(b, b.data, a.display, a.visible) : i.addSeries(a, [], a.display, a.visible)
                    }) : angular.forEach(j, function(a) {
                        var b = o(i.chartConfig.series, a);
                        b && b.data.length > 999 ? b.data.reset() : b && b.data.push(a.data[0])
                    }),
                    i.updateOriginalChartConfigSeries(i.chartConfig.series),
                    i.changeLoadingIndicatorState(!1),
                    i.checkSetNoDataMessage(),
                    i.chartReflow(),
                    g = e(function() {
                        h.call(i, a, b)
                    }, 3e4, 1)
                }, function(a) {
                    angular.isDefined(a.status) && 499 === a.status && i.checkSetNoDataMessage()
                })
            }
            var i = this;
            h.call(i, a, b, c)
        }
          , l = function(a, b, e, g, h, i) {
            var j, k = this;
            j = a.split("?")[0],
            d.post(j, b).then(function(d) {
                if (d.data = f.convertToHostname(d.header.columns, d.data),
                k.postProcessingFunc && (d = k.postProcessingFunc(d)),
                k.APIData = d,
                d.data.length > 0) {
                    k.changeNoDataMessageState(!1);
                    var e = m.call(k, h, i);
                    i && i.length > 0 ? angular.forEach(i, function(a) {
                        var b = o(e, a);
                        b ? k.addSeries(b, b.data, a.display, a.visible) : k.addSeries(a, [], a.display, a.visible)
                    }) : angular.forEach(e, function(a) {
                        var b = o(k.chartConfig.series, a);
                        b && (b.data = b.data.concat(a.data))
                    }),
                    c.checkNestedProperty(d, "pageInfo", "hasMoreData") && d.pageInfo.hasMoreData && l.call(k, a, b, {}, d.pageInfo.scrollId, h, i)
                } else
                    angular.forEach(i, function(a) {
                        var b = o(k.chartConfig.series, a);
                        b || k.addSeries(a, [], a.display, a.visible)
                    });
                k.updateOriginalChartConfigSeries(k.chartConfig.series),
                k.changeLoadingIndicatorState(!1),
                k.checkSetNoDataMessage(),
                k.chartReflow()
            }, function(a) {
                k.checkSetNoDataMessage()
            })
        }
          , m = function(a, b, c) {
            var d = []
              , e = this;
            return (!b || b.length < 1) && (b = e.filtersSelected.series[0].values),
            b.length > 0 && (c || (c = e.APIData.data),
            d = _.chain(c).groupBy(e.filtersSelected.series[0].property).map(function(c, d) {
                var f = _.indexOf(_.pluck(b, "name"), d);
                if (!(f < 0)) {
                    var g = [];
                    return angular.forEach(a, function(a, h) {
                        var i = {
                            name: d,
                            data: angular.isDefined(e.insertAPIDataToSeriesPoints) ? e.createCustomData(c, e.filtersSelected.xAxis[0], a) : e.convertToArrayOfValuesFromArray(_.pluckMultiple(c, [e.filtersSelected.xAxis[0], a])),
                            yAxis: h,
                            visible: !angular.isDefined(b[f].visible) || b[f].visible,
                            seriesCustomOptions: angular.isDefined(b[f].seriesCustomOptions) ? b[f].seriesCustomOptions : ""
                        };
                        angular.isDefined(b[f].display) ? i.display = b[f].display : i.display = b[f].name,
                        i.data = _.uniq(i.data, function(a) {
                            return JSON.stringify(a)
                        }),
                        angular.isDefined(e.fillZeros) && e.fillZeros && (i.data = e.APIData.entryTimeList.map(function(a) {
                            return _.find(i.data, [a]) || [a, 0]
                        })),
                        g.push(i)
                    }),
                    g
                }
            }).value()),
            _.remove(_.flatten(d), function(a) {
                return void 0 !== a
            })
        }
          , n = function(a, b, c, d) {
            var e = []
              , f = this;
            return (!b || b.length < 1) && (b = f.filtersSelected.series[d].values),
            b.length > 0 && (c || (c = f.APIData.data),
            e = _.chain(c).groupBy(f.filtersSelected.series[d].property).map(function(c, e) {
                var g = _.pluck(b, "name")
                  , h = _.indexOf(g, e);
                if (!(h < 0)) {
                    var i = []
                      , j = {
                        name: e,
                        data: f.convertToArrayOfValuesFromArray(_.pluckMultiple(c, [f.filtersSelected.xAxis[0], a[d]])),
                        yAxis: d,
                        visible: !angular.isDefined(b[h].visible) || b[h].visible,
                        seriesCustomOptions: angular.isDefined(b[h].seriesCustomOptions) ? b[h].seriesCustomOptions : ""
                    };
                    return angular.isDefined(b[h].display) ? j.display = b[h].display : j.display = b[h].name,
                    j.data = _.uniq(j.data, function(a) {
                        return JSON.stringify(a)
                    }),
                    angular.isDefined(f.fillZeros) && f.fillZeros && (j.data = f.APIData.entryTimeList.map(function(a) {
                        return _.find(j.data, [a]) || [a, 0]
                    })),
                    i.push(j),
                    i
                }
            }).value()),
            _.remove(_.flatten(e), function(a) {
                return void 0 !== a
            })
        }
          , o = function(a, b) {
            return _.find(a, function(a) {
                return angular.isDefined(b.yAxis) ? b.name === a.name && b.yAxis === a.yAxis : b.name === a.name && (!angular.isDefined(a.yAxis) || 0 == a.yAxis)
            })
        }
          , p = function(a, b) {
            var c = _.findIndex(b, function(b) {
                return a.yAxis ? a.name === b.name && a.yAxis == b.yAxis : a.name === b.name && (!angular.isDefined(b.yAxis) || 0 == b.yAxis)
            });
            c > -1 && b.splice(c, 1)
        }
          , q = function(a) {
            return angular.isDefined(a) && angular.isDefined(a.aggregation) && angular.isDefined(a.aggregation.histogram) && angular.isDefined(a.aggregation.histogram.interval) ? a : d.affixStatsAggregationHistogramUrl(a)
        };
        return i
    }
    angular.module("vManage").factory("HighStockLineChart", a),
    a.$inject = ["LineChart", "chartColors", "appUtil", "restService", "$interval", "DeviceListCache"]
}(),
function() {
    function a(a, b, c, d, e) {
        var f = function(b, c) {
            a.apply(this, [b, c])
        };
        f.prototype = Object.create(a.prototype),
        f.prototype.constructor = f,
        f.prototype.addSeriesNames = function(b) {
            var c = this;
            if (!angular.isArray(c.filtersSelected.series[0].property) || 1 == c.filtersSelected.series[0].property.length)
                return a.prototype.addSeriesNames.call(this, b),
                !0;
            angular.isArray(b) || (b = [b]);
            var d = b.filter(function(a) {
                return j(a, c)
            });
            c.filtersSelected.series[0].values = c.filtersSelected.series[0].values.concat(d),
            angular.forEach(d, function(a) {
                c.addSeries(a, [], a.display)
            })
        }
        ,
        f.prototype.addSeriesFromAPI = function(b, c, e) {
            var f = this;
            if (!angular.isArray(f.filtersSelected.series[0].property) || 1 == f.filtersSelected.series[0].property.length)
                return a.prototype.addSeriesFromAPI.call(this, b, c, e),
                !0;
            f.changeLoadingIndicatorState(!0),
            angular.isArray(b) || (b = [b]);
            var h = b.filter(function(a) {
                return j(a, f)
            });
            f.filtersSelected.series[0].values = f.filtersSelected.series[0].values.concat(h),
            e = d.affixStatsAggregationHistogramUrl(e),
            e && (f.asyncLoad ? g.call(f, c, e, 1e4, void 0, f.filtersSelected.yAxis, h) : f.getChartDataFromURL(c, e),
            f.highChartApi.zoomOut())
        }
        ,
        f.prototype.getChartDataFromURL = function(b, c) {
            var e = this;
            return angular.isArray(e.filtersSelected.series[0].property) && 1 != e.filtersSelected.series[0].property.length ? (b && (e.chartURL = {
                url: b,
                postBody: c
            }),
            e.changeLoadingIndicatorState(!0),
            e.chartURL.postBody = d.affixStatsAggregationHistogramUrl(e.chartURL.postBody),
            void (e.chartURL.postBody && (e.asyncLoad && g.call(e, e.chartURL.url, e.chartURL.postBody, 1e4, void 0, e.filtersSelected.yAxis),
            angular.isDefined(e.highChartApi) && e.highChartApi.zoomOut()))) : (a.prototype.getChartDataFromURL.call(this, b, c),
            !0)
        }
        ,
        f.prototype.concatFromRawData = function(b, c, d) {
            var e = this;
            if (!angular.isArray(e.filtersSelected.series[0].property) || 1 == e.filtersSelected.series[0].property.length)
                return a.prototype.concatFromRawData.call(this, b, c, d),
                !0;
            var f = h.call(e, e.filtersSelected.yAxis, e.filtersSelected.series[0].values, b);
            angular.forEach(f, function(a) {
                var b = _.find(e.highChartApi.series, function(b) {
                    return angular.isDefined(a.yAxis) ? a.name === b.name && a.yAxis == b.yAxis.options.index && 0 == _.difference(a.value, b.options.value).length : a.name === b.name && 0 == b.yAxis.options.index && 0 == _.difference(a.value, b.options.value).length
                });
                if (b) {
                    c && b.data.length >= d ? b.addPoint(a.data[0], !0, !0) : b.addPoint(a.data[0], !0, !1);
                    var f = k(e.chartConfig.series, a);
                    f && (f.data = b.options.data)
                }
            }),
            e.updateOriginalChartConfigSeries(e.chartConfig.series),
            e.highChartApi.zoomOut()
        }
        ,
        a.prototype.assignUniqueColor = function(a) {
            var c = this;
            if (angular.isDefined(a.yAxis) && 1 == a.yAxis) {
                var d = _.find(c.chartConfig.series, function(b) {
                    return angular.equals(a.name, b.name) && (!angular.isDefined(b.yAxis) || angular.equals(b.yAxis, 0) && 0 == _.difference(a.value, b.value).length)
                });
                if (d)
                    return d.color
            }
            return _.find(b.SWATCH_LINE, function(a) {
                if (!_.find(c.chartConfig.series, function(b) {
                    return b.color === a
                }))
                    return a
            })
        }
        ;
        var g = function(a, b, f, i, j, l) {
            var m, n = this;
            m = a.split("?")[0],
            d.post(m, b).then(function(d) {
                if (d.data = e.convertToHostname(d.header.columns, d.data),
                n.postProcessingFunc && (d = n.postProcessingFunc(d)),
                n.APIData = d,
                d.data.length > 0) {
                    n.changeNoDataMessageState(!1);
                    var f = h.call(n, j, l);
                    l && l.length > 0 ? angular.forEach(l, function(a) {
                        var b = k(f, a);
                        b ? n.addSeries(b, b.data, a.display) : n.addSeries(a, [], a.display)
                    }) : angular.forEach(f, function(a) {
                        var b = k(n.chartConfig.series, a);
                        b && (b.data = b.data.concat(a.data))
                    }),
                    c.checkNestedProperty(d, "pageInfo", "hasMoreData") && d.pageInfo.hasMoreData && g.call(n, a, b, {}, d.pageInfo.scrollId, j, l)
                } else
                    angular.forEach(l, function(a) {
                        var b = k(n.chartConfig.series, a);
                        b || n.addSeries(a, [], a.display)
                    });
                n.updateOriginalChartConfigSeries(n.chartConfig.series),
                n.changeLoadingIndicatorState(!1),
                n.checkSetNoDataMessage(),
                n.chartReflow()
            }, function(a) {
                n.checkSetNoDataMessage()
            })
        }
          , h = function(a, b, c) {
            var d = []
              , e = this;
            return (!b || b.length < 1) && (b = e.filtersSelected.series[0].values),
            b.length > 0 && (c || (c = e.APIData.data),
            d = i(e, c, a, b)),
            _.remove(_.flatten(d), function(a) {
                return void 0 !== a
            })
        }
          , i = function(a, b, c, d) {
            if (!a)
                return [];
            var e = _.chain(b).groupByMulti(angular.isArray(a.filtersSelected.series[0].property) ? a.filtersSelected.series[0].property : [a.filtersSelected.series[0].property]).map(function(b, e) {
                var f = [];
                return _.map(b, function(b, g) {
                    var h = _.indexOf(_.pluck(d, "name"), e);
                    h < 0 || angular.forEach(c, function(c, i) {
                        var j = {
                            name: e,
                            value: [e, g.toLowerCase()],
                            data: a.convertToArrayOfValuesFromArray(_.pluckMultiple(b, [a.filtersSelected.xAxis[0], c])),
                            yAxis: i,
                            visible: !0
                        };
                        angular.isDefined(d[h].display) ? j.display = d[h].display : j.display = d[h].name,
                        j.data = _.uniq(j.data, function(a) {
                            return JSON.stringify(a)
                        }),
                        angular.isDefined(a.fillZeros) && a.fillZeros && (j.data = a.APIData.entryTimeList.map(function(a) {
                            return _.find(j.data, [a]) || [a, 0]
                        })),
                        f.push(j)
                    })
                }),
                f
            }).flatten().value();
            return e
        }
          , j = function(a, b) {
            return !b.filtersSelected.series[0].values.some(function(b) {
                return angular.isDefined(a.yAxis) ? a.name == b.name && a.yAxis == b.yAxis && 0 == _.difference(a.value, b.value).length : a.name == b.name && (!angular.isDefined(a.yAxis) || 0 == a.yAxis) && 0 == _.difference(a.value, b.value).length
            })
        }
          , k = function(a, b) {
            return _.find(a, function(a) {
                return angular.isDefined(b.yAxis) ? b.name === a.name && b.yAxis === a.yAxis && 0 == _.difference(b.value, a.value).length : b.name === a.name && (!angular.isDefined(a.yAxis) || 0 == a.yAxis) && 0 == _.difference(b.value, a.value).length
            })
        };
        return f
    }
    angular.module("vManage").factory("HighStockMultiGroupLineChart", a),
    a.$inject = ["HighStockLineChart", "chartColors", "appUtil", "restService", "DeviceListCache"]
}(),
function() {
    function a(a) {
        var b = {
            options: {
                chart: {
                    type: "area",
                    backgroundColor: "rgba(255, 255, 255, 0.1)",
                    zoomType: void 0,
                    borderWidth: 0,
                    style: {
                        overflow: "visible"
                    },
                    skipClone: !0
                },
                colors: ["#FFFFFF"],
                plotOptions: {
                    series: {
                        animation: !1,
                        lineWidth: 1,
                        shadow: !1,
                        states: {
                            hover: {
                                lineWidth: 1
                            }
                        },
                        marker: {
                            fillColor: "#0091EA",
                            radius: 2,
                            states: {
                                hover: {
                                    radius: 3
                                }
                            }
                        },
                        fillOpacity: .25
                    },
                    column: {
                        negativeColor: "#910000",
                        borderColor: "silver"
                    }
                },
                tooltip: {
                    borderWidth: 0,
                    shadow: !1,
                    useHTML: !0,
                    hideDelay: 0,
                    shared: !1,
                    padding: 0,
                    style: {
                        fontSize: "7pt"
                    }
                }
            },
            xAxis: {
                labels: {
                    enabled: !1
                },
                title: {
                    text: null
                },
                startOnTick: !1,
                endOnTick: !1,
                tickPositions: []
            },
            yAxis: {
                endOnTick: !1,
                startOnTick: !1,
                labels: {
                    enabled: !1
                },
                title: {
                    text: null
                },
                tickPositions: [0]
            },
            legend: {
                enabled: !1
            }
        }
          , c = function(c, d) {
            c.enableSharedToolTip = !1,
            b.originalChartConfig = {
                chartDefinition: c,
                chartConfig: d
            },
            this.chartConfig = angular.merge({}, b, d),
            a.apply(this, [c, this.chartConfig])
        };
        return c.prototype = Object.create(a.prototype),
        c.prototype.constructor = c,
        c
    }
    angular.module("vManage").factory("HighStockSparklineChartFactory", a),
    a.$inject = ["HighStockLineChart"]
}(),
function() {
    function a(a) {
        var b = {
            options: {
                chart: {
                    type: "area"
                },
                plotOptions: {
                    area: {
                        stacking: "normal"
                    }
                }
            }
        }
          , c = function(c, d) {
            b.originalChartConfig = {
                chartDefinition: c,
                chartConfig: d
            },
            this.chartConfig = angular.merge({}, b, d),
            a.apply(this, [c, this.chartConfig])
        };
        return c.prototype = Object.create(a.prototype),
        c.prototype.constructor = c,
        c
    }
    angular.module("vManage").factory("HighStockStackedAreaChart", a),
    a.$inject = ["HighStockLineChart"]
}(),
function() {
    function a(a) {
        var b = {
            options: {
                chart: {
                    type: "column"
                },
                plotOptions: {
                    column: {
                        stacking: "normal"
                    }
                }
            }
        }
          , c = function(c, d) {
            b.originalChartConfig = {
                chartDefinition: c,
                chartConfig: d
            },
            this.chartConfig = angular.merge({}, b, d),
            a.apply(this, [c, this.chartConfig])
        };
        return c.prototype = Object.create(a.prototype),
        c.prototype.constructor = c,
        c
    }
    angular.module("vManage").factory("HighStockStackedBarChart", a),
    a.$inject = ["HighStockLineChart"]
}(),
angular.module("vManage").controller("chartTestController", chartTestController),
chartTestController.$inject = ["$scope", "restService", "Chart", "LineChart", "HighStockBarChart", "$compile"],
angular.module("vManage").directive("vipCheckBox", vipCheckBox),
angular.module("vManage").directive("vipComboBox", vipComboBox),
angular.module("vManage").value("CacheURLMappingValues", {
    deviceList: {
        urlMapping: ["dataservice/device/keyvalue"],
        className: "DeviceListCache",
        getMethod: "getSystemIpListFormatted"
    }
}),
function() {
    function a(a, b, c, d, e, f) {
        return {
            isDataValid: function(a) {
                return angular.isDefined(a) && null !== a && "" !== a
            },
            isHostNameUpdateRequired: function(a, b) {
                return !angular.isDefined(a) || null === a || "" === a || a !== b
            },
            updateCacheFromAPI: function() {
                var a = this
                  , c = d.defer();
                return b.getDeviceList().then(function(b) {
                    _.isEmpty(b) || a.updateCache(b),
                    c.resolve()
                }, function(a) {
                    f.error(a),
                    c.reject()
                }),
                c.promise
            },
            updateCache: function(a, b) {
                var c = this
                  , d = [];
                angular.isDefined(b) || (b = "true"),
                angular.forEach(a.data, function(a) {
                    if (c.isDataValid(a["local-system-ip"]) && c.isDataValid(a["host-name"])) {
                        a.official_cpu_count = e.getCpuCountAttribute(a["device-model"]) ? a[e.getCpuCountAttribute(a["device-model"])] : 1,
                        d.push(angular.extend({
                            "system-ip": a["local-system-ip"]
                        }, _.omit(a, ["system-ip"])));
                        var f = c.getDeviceHostName(a["local-system-ip"]);
                        ("false" === b || c.isHostNameUpdateRequired(f, a["host-name"])) && c.setDeviceHostName(a["local-system-ip"], a["host-name"])
                    }
                }),
                c.setSystemIpList(JSON.stringify(d))
            },
            setDeviceListCache: function(b) {
                angular.forEach(b.data, function(b) {
                    angular.isDefined(b["local-system-ip"]) && angular.isDefined(b["host-name"]) && null !== b["local-system-ip"] && "" !== b["local-system-ip"] && null !== b["host-name"] && "" !== b["host-name"] && a.sessionStorage.setItem(b["local-system-ip"], b["host-name"])
                })
            },
            init: function() {
                var c = this
                  , e = d.defer()
                  , g = c.isDeviceListInitialized();
                return "false" !== g && g || b.getDeviceList().then(function(b) {
                    _.isEmpty(b) || (c.updateCache(b, g),
                    a.sessionStorage.setItem("isDeviceListLoaded", !0),
                    e.resolve())
                }, function(a) {
                    f.error(a),
                    e.reject(a)
                }),
                e.promise
            },
            convertToHostname: function(a, b) {
                var d = this
                  , e = [];
                return angular.forEach(a, function(a) {
                    angular.isDefined(a.enableHostName) && a.enableHostName && e.push(a)
                }),
                e.length > 0 && angular.forEach(b, function(a) {
                    angular.forEach(e, function(b) {
                        if (angular.isDefined(b.enableHostName) && b.enableHostName && angular.isDefined(b.hostValueType)) {
                            var e, f = b.field ? b.field : b.name ? b.name : b.property ? b.property : void 0;
                            c.isUndefinedOrEmpty(f) || (e = f.replace("-hostname", ""));
                            var g = e + "-hostname";
                            if (void 0 !== e)
                                if ("tunnel" === b.hostValueType) {
                                    var h = a[e];
                                    if (a[g] = h,
                                    !c.isUndefinedOrEmpty(h)) {
                                        var i = h.split(":");
                                        if (3 === i.length) {
                                            for (var j = i[0], k = null, l = null, m = i[2], n = i[1], o = "", p = [], q = 0; q < n.length; q++)
                                                "-" === n[q] && p.push(q);
                                            if (p.length > 1)
                                                k = n.substring(p[p.length - 1] + 1),
                                                l = n.substring(0, p[p.length - 1]);
                                            else if (1 === p.length) {
                                                var r = n.split("-");
                                                l = r[0],
                                                k = r[1]
                                            }
                                            if (null !== j && "" !== j) {
                                                var s = d.getDeviceHostName(j);
                                                o += null !== s && "" !== s ? s + ":" + l + "-" : j + ":" + l + "-"
                                            }
                                            if (null !== k && "" !== k) {
                                                var t = d.getDeviceHostName(k);
                                                o += null !== t && "" !== t ? t + ":" + m : k + ":" + m
                                            }
                                            a[g] = o
                                        }
                                    }
                                } else if ("ip" === b.hostValueType) {
                                    var u = e.replace("-hostname", "")
                                      , h = a[u];
                                    if (a[g] = h,
                                    !c.isUndefinedOrEmpty(h)) {
                                        var v = d.getDeviceHostName(h);
                                        null !== v && "" !== v && (a[g] = v)
                                    }
                                }
                        }
                    })
                }),
                angular.forEach(a, function(a) {
                    angular.isDefined(a.enableHostName) && a.enableHostName && (angular.isDefined(a.field) ? a.field = a.field.replace("-hostname", "") + "-hostname" : "",
                    angular.isDefined(a.name) ? a.name = a.name.replace("-hostname", "") + "-hostname" : "",
                    angular.isDefined(a.property) ? a.property = a.property.replace("-hostname", "") + "-hostname" : "")
                }),
                b
            },
            getDeviceHostName: function(b) {
                return a.sessionStorage.getItem(b)
            },
            setDeviceHostName: function(b, c) {
                a.sessionStorage.setItem(b, c)
            },
            getSystemIpListStringified: function() {
                return a.sessionStorage.getItem("device-list")
            },
            getSystemIpList: function() {
                return JSON.parse(this.getSystemIpListStringified())
            },
            getSystemIpListFormatted: function() {
                var a = this.getSystemIpList();
                return _.map(a, function(a) {
                    a.key = a["system-ip"],
                    a.value = a["host-name"] + " (" + a["system-ip"] + ")",
                    delete a["system-ip"],
                    delete a["host-name"]
                }),
                a
            },
            getCpuCount: function(a) {
                var b = this.getSystemIpList()
                  , c = _.find(b, {
                    "system-ip": a
                });
                return c && c.official_cpu_count ? c.official_cpu_count : 1
            },
            setSystemIpList: function(b) {
                a.sessionStorage.setItem("device-list", b)
            },
            isDeviceListInitialized: function(b) {
                return a.sessionStorage.getItem("isDeviceListLoaded")
            }
        }
    }
    angular.module("vManage").factory("DeviceListCache", a),
    a.$inject = ["$window", "adminService", "appUtil", "$q", "DeviceModelListCache", "$log"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        var g = [];
        return {
            updateCache: function(a, b) {
                var c = this
                  , d = [];
                angular.isDefined(b) || (b = "true"),
                d = a.data,
                c.setDeviceModelList(JSON.stringify(d)),
                g.reset(),
                g = d
            },
            init: function() {
                var c = this
                  , e = d.defer()
                  , g = c.isDeviceModelListInitialized();
                return "false" !== g && g || b.getAllDeviceModels().then(function(b) {
                    _.isEmpty(b) || (c.updateCache(b, g),
                    a.sessionStorage.setItem("isDeviceModelListLoaded", !0),
                    e.resolve())
                }, function(a) {
                    f.error(a),
                    e.reject(a)
                }),
                e.promise
            },
            isDeviceModelListInitialized: function(b) {
                return a.sessionStorage.getItem("isDeviceModelListLoaded")
            },
            setDeviceModelList: function(b) {
                a.sessionStorage.setItem("device-model-list", b)
            },
            getDeviceModelListStringified: function() {
                return a.sessionStorage.getItem("device-model-list")
            },
            getDeviceModelList: function() {
                return JSON.parse(this.getDeviceModelListStringified())
            },
            isCiscoDeviceModel: function(a) {
                var b = this.getDeviceModelList()
                  , c = _.find(b, {
                    name: a
                });
                return angular.isDefined(c) && c.hasOwnProperty("isCiscoDeviceModel") && c.isCiscoDeviceModel
            },
            getDeviceModelValue: function(a) {
                var b = this.getDeviceModelList()
                  , c = _.find(b, {
                    name: a
                });
                return c ? c.displayName : ""
            },
            getAllVedgeDeviceModels: function() {
                var a = this.getDeviceModelList()
                  , b = _.pluck(_.filter(a, function(a) {
                    return "vedge" === a.deviceType
                }), "name");
                return b
            },
            getViptelaDeviceModels: function() {
                var a = this.getDeviceModelList()
                  , b = _.pluck(_.filter(a, function(a) {
                    return !a.isCiscoDeviceModel
                }), "name");
                return b
            },
            getAllDeviceModels: function() {
                var a = this.getDeviceModelList()
                  , b = _.pluck(a, "name");
                return b
            },
            getViptelaVedgeDeviceModels: function() {
                var a = this.getDeviceModelList()
                  , b = _.pluck(_.filter(a, function(a) {
                    return "vedge" === a.deviceType && !a.isCiscoDeviceModel
                }), "name");
                return b
            },
            getCpuCountAttribute: function(a) {
                var b = _.find(g, {
                    name: a
                });
                if (c.checkNestedProperty(b, "cpuCountAttribute") && b.cpuCountAttribute.enable)
                    return b.cpuCountAttribute.attributeField
            }
        }
    }
    angular.module("vManage").factory("DeviceModelListCache", a),
    a.$inject = ["$window", "adminService", "appUtil", "$q", "notification", "$log"]
}(),
angular.module("vManage").directive("vipCard", vipCard),
angular.module("vManage").directive("vipSimpleCard", vipSimpleCard),
vipSimpleCard.$inject = ["$q", "$parse"],
function() {
    function a() {
        return {
            restrict: "AE",
            templateUrl: "app/common/components/checkbox/checkBox-partial.html",
            scope: {
                checkBoxLabel: "@",
                checkBoxName: "@",
                layoutClass: "@",
                value: "=",
                update: "&",
                isCheckedInitially: "=",
                requiredField: "=",
                checkBoxDisabled: "="
            }
        }
    }
    angular.module("vManage").directive("vipCheckBoxExt", a)
}(),
angular.module("vManage").directive("collapseSidebar", collapseSidebar),
angular.module("vManage").directive("vipCollapsibleChart", vipCollapsibleChart),
vipCollapsibleChart.$inject = ["$rootScope", "CustomLegend", "HighStockBarChart", "$timeout"],
angular.module("vManage").directive("vipBtnDropDownItemOrderSelector", vipBtnDropDownItemOrderSelector),
vipBtnDropDownItemOrderSelector.$inject = ["$log", "appUtil"],
function() {
    function a(a) {
        var b = this;
        b.featureAccess = !0,
        angular.isDefined(b.rbacFeature) && !a.allowAccess(b.rbacFeature) && (b.featureAccess = !1)
    }
    angular.module("vManage").controller("emptyStateController", a),
    a.$inject = ["rbac"],
    angular.module("vManage").component("emptyState", {
        templateUrl: "app/common/components/emptyState/emptyState.html",
        bindings: {
            customClass: "@",
            icon: "@",
            message: "@",
            actionButtonTitle: "@",
            actionButtonCallBack: "&",
            actionButtonId: "@",
            iconSize: "@",
            rbacFeature: "@",
            readOnlyMessage: "@",
            readOnlyIcon: "@",
            secondaryActionButtonTitle: "@",
            secondaryActionButtonCallBack: "&",
            secondaryActionButtonId: "@"
        },
        controller: a,
        controllerAs: "emptyStateCtrl"
    })
}(),
angular.module("vManage").directive("vipCsvImport", vipCsvImport),
angular.module("vManage").directive("vipIframeOnLoad", vipIframeOnLoad),
angular.module("vManage").directive("vipInnerCheckbox", vipInnerCheckbox),
vipInnerCheckbox.$inject = ["$compile"],
angular.module("vManage").factory("InputField", InputField),
InputField.$inject = ["appUtil"],
function() {
    function a() {
        return {
            restrict: "A",
            scope: {
                elemClass: "@",
                elemId: "@",
                elemHeight: "@"
            },
            link: function(a, b, c) {
                a.elemClass ? $("." + a.elemClass).linedtextarea({
                    height: a.elemHeight
                }) : a.elemId && $("#" + a.elemId).linedtextarea({
                    height: a.elemHeight
                })
            }
        }
    }
    angular.module("vManage").directive("linedTextArea", a)
}(),
angular.module("vManage").directive("vipMultiStateInput", vipMultiStateInput),
vipMultiStateInput.$inject = ["appUtil", "templateConstants", "$templateCache", "$compile"],
angular.module("vManage").directive("noneditablePrependString", noneditablePrependString),
noneditablePrependString.$inject = ["$compile"],
angular.module("vManage").directive("vipLabel", vipLabel),
vipLabel.$inject = ["appUtil"],
angular.module("vManage").directive("navHeading", navHeading),
navHeading.$inject = ["appUtil"],
function() {
    function a() {}
    a.$inject = [],
    angular.module("vManage").component("noDataTemplate", {
        templateUrl: "app/common/components/noDataTemplate/noDataTemplate.html",
        bindings: {
            imageClass: "@",
            message: "@"
        },
        controller: a,
        controllerAs: "noDataTemplateCtrl"
    })
}(),
angular.module("vManage").directive("vipConfirmPopover", vipConfirmPopover),
vipConfirmPopover.$inject = ["$compile", "$document", "$timeout", "appUtil"],
angular.module("vManage").directive("vipQueryBuilder", vipQueryBuilder),
vipQueryBuilder.$inject = ["$filter", "appUtil", "$log", "$debounce", "$document", "$timeout"],
angular.module("vManage").factory("QueryBuilderFactory", QueryBuilderFactory),
QueryBuilderFactory.$inject = ["DeviceListCache", "restService", "$q", "$timeout", "CacheURLMappingValues", "$parse"],
angular.module("vManage").directive("resizeableComponent", resizeableComponent),
resizeableComponent.$inject = ["responsiveContentHeight", "appUtil"],
angular.module("vManage").factory("responsiveContentHeight", responsiveContentHeight),
responsiveContentHeight.$inject = ["$rootScope", "$log", "$window", "$document"],
function() {
    function a(a) {
        return {
            restrict: "E",
            replace: !0,
            templateUrl: "app/common/components/scroll/stickyHeaderScroll.html",
            scope: {
                topOffsetIdentifier: "@",
                headerIdentifier: "@",
                navList: "="
            },
            link: function(b, c) {
                var d = !1
                  , e = $(b.topOffsetIdentifier).outerHeight()
                  , f = e + 15;
                $(b.headerIdentifier).scroll(function() {
                    g()
                }),
                b.createEventListeners = function(e, h) {
                    if (!e.callBack || e.callBack()) {
                        h.preventDefault();
                        var i = "#" + e.sectionId
                          , j = $(i);
                        $(b.headerIdentifier).off("scroll"),
                        $(".nav-header ul li a").each(function() {
                            $(this).removeClass("active")
                        }),
                        $(h.target).addClass("active"),
                        d = !0,
                        angular.equals(j.attr("id"), b.navList[0].sectionId) ? $(b.headerIdentifier).scrollTop() > f && $(b.headerIdentifier).scrollTo(i, {
                            duration: 500,
                            offset: {
                                top: -15,
                                left: 0
                            }
                        }) : $(b.headerIdentifier).scrollTo(i, {
                            duration: 500,
                            offset: {
                                top: -125,
                                left: 0
                            }
                        }),
                        a(function() {
                            var a = $(b.headerIdentifier).scrollTop();
                            e.sectionId !== b.navList[0].sectionId && $(c).next().outerHeight() - $(c).parent().outerHeight() < 16 && (a += 30),
                            a >= f + 15 ? $(".nav-header").addClass("fixed") : $(".nav-header").removeClass("fixed"),
                            $(b.headerIdentifier).on("scroll", g)
                        }, 500)
                    }
                }
                ;
                var g = function() {
                    var a = $(b.headerIdentifier).scrollTop()
                      , e = $("#" + $(".nav-header ul li a").last().attr("section-id"));
                    $(c).next().outerHeight() - $(c).parent().outerHeight() < 16 && (a += 15),
                    a >= f ? $(".nav-header").addClass("fixed") : $(".nav-header").removeClass("fixed"),
                    d || ($(".nav-header a").each(function() {
                        var b = $(this)
                          , c = $("#" + b.attr("section-id"));
                        c.position().top <= a && c.position().top + c.height() > a ? ($(".nav-header ul li a").removeClass("active"),
                        b.addClass("active")) : b.removeClass("active")
                    }),
                    a <= f ? $(".nav-header ul li a").first().addClass("active") : a >= e.position().top - 30 && $(".nav-header ul li a").last().addClass("active")),
                    d = !1
                }
            }
        }
    }
    angular.module("vManage").directive("stickyHeaderScroll", a),
    a.$inject = ["$timeout"]
}(),
angular.module("vManage").directive("vipDropdownMenu", vipDropdownMenu),
angular.module("vManage").factory("MenuItem", MenuItem),
angular.module("vManage").factory("DropdownMenu", DropdownMenu),
angular.module("vManage").directive("vipMultiInputSelect", vipMultiInputSelect),
vipMultiInputSelect.$inject = ["MultiSelectService", "$timeout", "CloudExpressService", "$templateCache", "$compile", "TaggedSearchService"],
function() {
    function a(a, b, c, d, e, f) {
        function g(a) {
            var b = _.union(_.pluck(i.columns, "property"), [i.uuid]);
            return i.enableGroupFilter && b.push(i.groupColumn),
            _.map(a, function(a) {
                var c = {};
                for (var d in b)
                    c[b[d]] = a[b[d]];
                return c
            })
        }
        function h(a, b, c) {
            k.available.resolved = a,
            k.selected.resolved = b,
            i.showErrorSection = !0,
            i.errorMessage = c
        }
        var i = {
            labels: {
                heading: "Select from the available list below",
                available: "Available",
                selected: "Selected"
            },
            toolTip: {
                enabled: !1,
                templateCache: ""
            },
            minSelectedRequired: 1,
            columns: [],
            orderBy: void 0,
            uuid: "localSystemIp",
            groupColumn: void 0,
            showErrorSection: !1,
            errorMessage: {},
            enableGroupFilter: !1,
            enableSelection: !0,
            enableSearchBar: !0,
            enableSort: !1,
            statusColumn: !1
        }
          , j = "edit"
          , k = {
            available: {
                url: "",
                original: [],
                records: [],
                groups: [],
                selectedGroup: "All",
                resolved: !0
            },
            selected: {
                url: "",
                original: [],
                records: [],
                groups: [],
                selectedGroup: "All",
                resolved: !0
            }
        };
        return {
            reset: function() {
                j = "edit",
                i = {
                    labels: {
                        heading: "Select from the available list below",
                        available: "Available",
                        selected: "Selected"
                    },
                    toolTip: {
                        enabled: !1,
                        templateCache: ""
                    },
                    minSelectedRequired: 1,
                    columns: [],
                    orderBy: void 0,
                    uuid: "localSystemIp",
                    showErrorSection: !1,
                    errorMessage: {},
                    enableGroupFilter: !1,
                    enableSelection: !0,
                    enableSearchBar: !0,
                    enableSort: !1
                },
                k = {
                    available: {
                        url: "",
                        original: [],
                        records: [],
                        groups: [],
                        selectedGroup: "All",
                        resolved: !0
                    },
                    selected: {
                        url: "",
                        original: [],
                        records: [],
                        groups: [],
                        selectedGroup: "All",
                        resolved: !0
                    }
                }
            },
            initialize: function() {
                var b = f.defer()
                  , c = this
                  , j = _.union(_.pluck(i.columns, "property"), [i.uuid]);
                return i.enableGroupFilter && j.push(i.groupColumn),
                angular.forEach(j, function(a, b) {
                    var c = _.filter(i.columns, function(b) {
                        return b.property == a
                    });
                    j[b] = {
                        name: a,
                        displayName: c.length > 0 ? c[0].display : a,
                        isSearch: !0
                    }
                }),
                k.available.url || k.selected.url ? (c.resetMultiSelectList(),
                k.available.resolved = !1,
                k.selected.resolved = !1,
                k.available.url && !k.selected.url || k.available.url && k.selected.url ? d.getTableData(k.available.url).then(function(c) {
                    k.available.records = g(c.data),
                    k.selected.url ? k.selected.url().then(function(c) {
                        k.selected.records = g(c.data),
                        i.orderBy ? (k.available.records = a("orderObjectBy")(_.difference(k.available.records, k.selected.records), i.orderBy),
                        k.available.taggedSearch = new e(k.available.records,j),
                        k.selected.records = a("orderObjectBy")(_.difference(k.selected.records, k.available.records), i.orderBy),
                        k.selected.taggedSearch = new e(k.selected.records,j)) : (k.available.records = _.difference(k.available.records, k.selected.records),
                        k.available.taggedSearch = new e(k.available.records,j),
                        k.selected.records = _.difference(k.selected.records, k.available.records),
                        k.selected.taggedSearch = new e(k.selected.records,j)),
                        k.available.records = k.available.taggedSearch.getSearchCache(),
                        k.selected.records = k.selected.taggedSearch.getSearchCache(),
                        k.available.resolved = !0,
                        k.selected.resolved = !0,
                        b.resolve(k)
                    }, function(a) {
                        h(!0, !0, a),
                        b.reject(a)
                    }) : (i.orderBy ? (k.available.records = a("orderObjectBy")(_.difference(k.available.records, k.selected.records), i.orderBy),
                    k.available.taggedSearch = new e(k.available.records,j)) : (k.available.records = _.difference(k.available.records, k.selected.records),
                    k.available.taggedSearch = new e(k.available.records,j)),
                    k.selected.taggedSearch = new e(k.selected.records,j),
                    k.available.records = k.available.taggedSearch.getSearchCache(),
                    k.selected.records = k.selected.taggedSearch.getSearchCache(),
                    k.available.resolved = !0,
                    k.selected.resolved = !0,
                    i.enableGroupFilter && (k.available.groups = _.uniq(_.flatten(_.pluck(k.available.records, i.groupColumn))),
                    k.available.groups.unshift(k.available.selectedGroup),
                    k.selected.groups = _.uniq(_.flatten(_.pluck(k.available.records, i.groupColumn))),
                    k.selected.groups.unshift(k.selected.selectedGroup)),
                    b.resolve(k))
                }, function(a) {
                    h(!0, !0, a),
                    b.reject(a)
                }) : k.selected.url && !k.available.url && k.selected.url.then(function(c) {
                    k.selected.records = g(c.data),
                    i.orderBy ? (k.available.records = a("orderObjectBy")(_.difference(k.available.records, k.selected.records), i.orderBy),
                    k.available.taggedSearch = new e(k.available.records,j),
                    k.selected.records = a("orderObjectBy")(_.difference(k.selected.records, k.available.records), i.orderBy),
                    k.selected.taggedSearch = new e(k.selected.records,j)) : (k.available.records = _.difference(k.available.records, k.selected.records),
                    k.available.taggedSearch = new e(k.available.records,j),
                    k.selected.records = _.difference(k.selected.records, k.available.records),
                    k.selected.taggedSearch = new e(k.selected.records,j)),
                    k.available.records = k.available.taggedSearch.getSearchCache(),
                    k.selected.records = k.selected.taggedSearch.getSearchCache(),
                    k.available.resolved = !0,
                    k.selected.resolved = !0,
                    b.resolve(k)
                }, function(a) {
                    h(!0, !0, a),
                    b.reject(a)
                }),
                b.promise) : (k.available.taggedSearch = new e(k.available.records,j),
                k.selected.taggedSearch = new e(k.selected.records,j),
                b.resolve(k),
                b.promise)
            },
            getOptions: function() {
                return i
            },
            setOptions: function(a) {
                i = angular.extend({}, i, a)
            },
            getViewMode: function() {
                return j
            },
            setViewMode: function(a) {
                j = a
            },
            setMultiSelectData: function(a, b) {
                var c = _.union(_.pluck(i.columns, "property"), [i.uuid]);
                i.enableSearchBar ? (angular.forEach(c, function(a, b) {
                    c[b] = {
                        name: a,
                        displayName: a,
                        isSearch: !0
                    }
                }),
                k.available.taggedSearch = new e(g(a),c),
                k.available.records = k.available.taggedSearch.getSearchCache(),
                k.selected.taggedSearch = new e(g(b),c),
                k.selected.records = k.selected.taggedSearch.getSearchCache()) : (k.selected.records = g(b),
                k.available.records = g(a),
                k.available.records = _.filter(k.available.records, function(a) {
                    return !_.where(k.selected.records, a).length
                }))
            },
            setAvailableUrl: function(a) {
                k.available.url = a
            },
            setSelectedUrl: function(a) {
                k.selected.url = a
            },
            getMultiSelectData: function() {
                return k
            },
            getSelectedItems: function() {
                return i.enableSearchBar ? k.selected.taggedSearch.getSearchCache() : k.selected.records
            },
            resetMultiSelectList: function() {
                k.available.records.length = 0,
                k.selected.records.length = 0
            },
            addToSelected: function(b, d, e) {
                k.available.resolved = !1,
                k.selected.resolved = !1,
                k.selected.records.length || (k.selected.records = []),
                i.enableSearchBar ? i.orderBy ? (k.selected.records = a("orderObjectBy")(k.selected.taggedSearch.getSearchCache().concat(_.where(k.available.taggedSearch.getSearchCache(), {
                    selected: !0
                })), i.orderBy),
                k.selected.taggedSearch.setSearchCache(k.selected.records),
                k.available.records = a("orderObjectBy")(_.difference(k.available.taggedSearch.getSearchCache(), k.selected.records), i.orderBy),
                k.available.taggedSearch.setSearchCache(k.available.records),
                i.enableGroupFilter && ("All" !== k.available.selectedGroup && (d = _.union(d, [{
                    text: k.available.selectedGroup
                }])),
                "All" !== k.selected.selectedGroup && (e = _.union(e, [{
                    text: k.selected.selectedGroup
                }]))),
                k.selected.records = k.selected.taggedSearch.searchData(e),
                k.available.records = k.available.taggedSearch.searchData(d)) : (k.selected.records = k.selected.taggedSearch.getSearchCache().concat(_.where(k.available.taggedSearch.getSearchCache(), {
                    selected: !0
                })),
                k.selected.taggedSearch.setSearchCache(k.selected.records),
                k.available.records = _.difference(k.available.taggedSearch.getSearchCache(), k.selected.records),
                k.available.taggedSearch.setSearchCache(k.available.records),
                k.selected.records = k.selected.taggedSearch.searchData(e),
                k.available.records = k.available.taggedSearch.searchData(d)) : i.orderBy ? (k.selected.records = a("orderObjectBy")(k.selected.records.concat(_.where(k.available.records, {
                    selected: !0
                })), i.orderBy),
                k.available.records = a("orderObjectBy")(_.difference(k.available.records, k.selected.records), i.orderBy)) : (k.selected.records = k.selected.records.concat(_.where(k.available.records, {
                    selected: !0
                })),
                k.available.records = _.difference(k.available.records, k.selected.records),
                i.orderBy),
                c(function() {
                    k.available.resolved = !0,
                    k.selected.resolved = !0,
                    b.$broadcast("vsRepeatTrigger")
                })
            },
            removeFromSelected: function(b, d, e) {
                k.available.resolved = !1,
                k.selected.resolved = !1,
                i.enableSearchBar ? i.orderBy ? (k.available.records = a("orderObjectBy")(k.available.taggedSearch.getSearchCache().concat(_.where(k.selected.taggedSearch.getSearchCache(), {
                    selected: !0
                })), i.orderBy),
                k.available.taggedSearch.setSearchCache(k.available.records),
                k.selected.records = a("orderObjectBy")(_.difference(k.selected.taggedSearch.getSearchCache(), k.available.records), i.orderBy),
                k.selected.taggedSearch.setSearchCache(k.selected.records),
                i.enableGroupFilter && ("All" !== k.available.selectedGroup && (d = _.union(d, [{
                    text: k.available.selectedGroup
                }])),
                "All" !== k.selected.selectedGroup && (e = _.union(e, [{
                    text: k.selected.selectedGroup
                }]))),
                k.available.records = k.available.taggedSearch.searchData(d),
                k.selected.records = k.selected.taggedSearch.searchData(e)) : (k.available.records = k.available.taggedSearch.getSearchCache().concat(_.where(k.selected.taggedSearch.getSearchCache(), {
                    selected: !0
                })),
                k.available.taggedSearch.setSearchCache(k.available.records),
                k.selected.records = _.difference(k.selected.taggedSearch.getSearchCache(), k.available.taggedSearch.getSearchCache()),
                k.selected.taggedSearch.setSearchCache(k.selected.records),
                k.available.records = k.available.taggedSearch.searchData(d),
                k.selected.records = k.selected.taggedSearch.searchData(e)) : i.orderBy ? (k.available.records = a("orderObjectBy")(k.available.records.concat(_.where(k.selected.records, {
                    selected: !0
                })), i.orderBy),
                k.selected.records = a("orderObjectBy")(_.difference(k.selected.records, k.available.records), i.orderBy)) : (k.available.records = k.available.records.concat(_.where(k.selected.records, {
                    selected: !0
                })),
                k.selected.records = _.difference(k.selected.records, k.available.records),
                i.orderBy),
                c(function() {
                    k.available.resolved = !0,
                    k.selected.resolved = !0,
                    b.$broadcast("vsRepeatTrigger")
                })
            },
            clearAll: function(a) {
                angular.forEach(a, function(a) {
                    angular.extend(a, {
                        selected: !1
                    })
                })
            },
            selectAll: function(a) {
                angular.forEach(a, function(a) {
                    angular.isDefined(a.invalid) ? a.invalid || angular.extend(a, {
                        selected: !0
                    }) : angular.extend(a, {
                        selected: !0
                    })
                })
            },
            toggleSelection: function(a, c, d) {
                var e = _.findIndex(a, function(a) {
                    return angular.equals(a, c)
                });
                d.shiftKey ? b.shiftSelect(a, e, d, "selected", !0) : b.toggleSelection(a, e, "selected", !0)
            },
            isColPropertyDefinedForObject: function(a) {
                var b = !1;
                for (var c in i.columns)
                    if (b = void 0 !== a[i.columns[c].property] && null !== a[i.columns[c].property] && "" !== a[i.columns[c].property] && "--" !== a[i.columns[c].property])
                        return !0;
                return b
            },
            isSelected: function(a) {
                return !(!a.records || i.enableSearchBar && _.isEmpty(a.taggedSearch)) && (i.enableSearchBar ? _.find(a.records, "selected", !0) || _.find(a.taggedSearch.getSearchCache(), "selected", !0) : _.find(a.records, "selected", !0))
            },
            validateRequiredFields: function(a, b) {
                a[b].$setValidity("min", k.selected.taggedSearch.getSearchCache().length >= i.minSelectedRequired)
            },
            getTaggedSearchSearchProperties: function() {
                return k.available.taggedSearch.getSearchProperties()
            },
            setTaggedSearchSearchProperties: function(a) {
                k.available.taggedSearch.setSearchProperties(a),
                k.selected.taggedSearch.setSearchProperties(a)
            }
        }
    }
    angular.module("vManage").factory("MultiSelectService", a),
    a.$inject = ["$filter", "SelectionKeyboardAssist", "$timeout", "restService", "TaggedSearchService", "$q"]
}(),
angular.module("vManage").factory("SelectionKeyboardAssist", SelectionKeyboardAssist),
SelectionKeyboardAssist.$inject = [],
angular.module("vManage").directive("vipStatusCircle", vipStatusCircle),
vipStatusCircle.$inject = ["appUtil", "TunnelSummaryService"],
function() {
    function a(a) {
        var b = {
            color: void 0,
            tooltip: void 0
        };
        return {
            setTunnelSummary: function(c) {
                a.checkNestedProperty(c, "color") && (b.color = c.color),
                a.checkNestedProperty(c, "tooltip") && (b.tooltip = c.tooltip)
            },
            getTunnelSummary: function() {
                return b
            }
        }
    }
    angular.module("vManage").factory("TunnelSummaryService", a),
    a.$inject = ["appUtil"]
}(),
function() {
    function a(a, b, c) {
        a.spaceEnable = !0,
        a.separatorKeys = [c.KEY_CODE.ENTER, c.KEY_CODE.SPACE],
        a.allValue = !0,
        a.idSuffix = a.idSuffix.replace(/ /g, "_");
        "_" + a.idSuffix;
        a.idSuffix = (angular.isDefined(a.idModalSuffix) ? a.idModalSuffix : "") + a.idSuffix,
        a.selectedPattern = {},
        a.radioOptions = [{
            name: "AND",
            type: "and"
        }, {
            name: "OR",
            type: "or"
        }],
        a.selectedPattern = a.radioOptions[0],
        angular.isDefined(a.taggedSearchObject) && a.taggedSearchObject.setSearchWordPattern(a.selectedPattern),
        a.columnDropDownStatus = {
            isopen: !1
        },
        a.restoreCursor = function() {
            var a = this;
            b(function() {
                $(a.taggedSearchObject.element).find("#search_tag_input").length > 0 && $(a.taggedSearchObject.element).find("#search_tag_input").focus()
            }, 500)
        }
        ,
        a.newSearchTag = function(a) {
            return {
                text: a
            }
        }
        ,
        a.toggleColSearchDropDown = function(b) {
            b.stopPropagation(),
            a.columnDropDownStatus.isopen = !0
        }
        ,
        a.patternUpdate = function() {
            a.patternValue = a.selectedPattern.type,
            angular.isDefined(a.taggedSearchObject) && a.taggedSearchObject.setSearchWordPattern(a.selectedPattern),
            a.tags.length > 0 && a.onSearchCallback({
                tags: a.tags,
                pattern: a.patternValue
            })
        }
    }
    angular.module("vManage").controller("RealTimeSearchController", a),
    a.$inject = ["$scope", "$timeout", "$mdConstant"]
}(),
angular.module("vManage").directive("vipRealTimeSearch", vipRealTimeSearch),
vipRealTimeSearch.$inject = [],
angular.module("vManage").factory("searchWordsPattern", searchWordsPattern),
searchWordsPattern.$inject = [],
function() {
    function a(a) {
        function b(a, b, c, d) {
            for (var e, f = a.grid.getVisibleRowCount() != a.grid.rows.length ? a.grid.rows.length - a.grid.getVisibleRowCount() : 0, g = !1, h = d ? a.visibleProperties : a.searchProperties, i = b ? a.grid.getVisibleRows() : a.grid.rows, j = 0; j < i.length; j++) {
                for (var k = 0; k < c.length; k++) {
                    g = !1;
                    for (var l = c[k], m = 0; m < h.length; m++) {
                        e = h[m];
                        var n = a.searchDataByTags(e, i[j].entity, l);
                        if (n) {
                            g = !0;
                            break
                        }
                    }
                    if (g === !1) {
                        i[j].forceInvisible = !0,
                        i[j].visible = !1,
                        b && f++;
                        break
                    }
                }
                g === !0 && (i[j].visible || (i[j].forceInvisible = !1,
                i[j].visible = !0,
                b || f--))
            }
            a.grid.refresh(),
            a.grid.api.core.raise.rowsVisibleChanged(),
            a.searchRowCountText = a.grid.rows.length - f + " of " + a.grid.rows.length
        }
        var c = function() {
            a.apply(this, arguments)
        };
        return c.prototype = new a,
        c.prototype.searchData = function(a, c) {
            var d = this;
            if (a || (a = d.searchTagsCache),
            0 === a.length) {
                for (var e = 0; e < d.grid.rows.length; e++)
                    d.grid.api.core.clearRowInvisible(d.grid.rows[e]);
                d.searchRowCountText = d.grid.rows.length
            } else
                a.length < d.searchTagsCache.length ? b(d, !1, a, c) : b(d, !0, a, c);
            d.setSearchTagsCache(a)
        }
        ,
        c
    }
    angular.module("vManage").factory("SelectTaggedSearchService", a),
    a.$inject = ["TaggedSearchService"]
}(),
function() {
    function a(a, b, c) {
        var d = function() {
            a.apply(this, arguments),
            this.searchRowCountText = {
                value: 0
            }
        };
        d.prototype = new a,
        d.prototype.setSpinnerVisibleFn = function(a) {
            this.tableSpinner = a
        }
        ,
        d.prototype.setSearchRowCountText = function(a) {
            this.searchRowCountText = a,
            angular.isUndefined(this.searchRowCountText.value) && (this.searchRowCountText.value = this.dataSetCache ? this.dataSetCache.length : 0)
        }
        ,
        d.prototype.searchData = function(a, c) {
            var d = this;
            d.tableSpinner.isSet = !0,
            b(function() {
                d.setSearchTagsCache(a);
                var b = d.gridApi.grid.rows;
                if (0 === d.searchTagsCache.length)
                    d.prevSearchTagsCache.reset(),
                    b.forEach(function(a) {
                        a.visible = !0,
                        a.clearRowInvisible(a)
                    });
                else {
                    var c = d.getSearchTagAdded();
                    b.forEach(function(a, b) {
                        angular.isUndefined(a.treeLevel) && d.checkRowForSearchTag(c, a, b)
                    })
                }
                d.gridApi.grid.options.enableTreeView && d.gridApi.treeBase.expandAllRows(),
                d.gridApi.grid.refresh().then(function() {
                    h.call(d),
                    i.call(d),
                    d.prevSearchTagsCache = [],
                    angular.forEach(d.searchTagsCache, function(a) {
                        d.prevSearchTagsCache.push(a.text)
                    }),
                    d.tableSpinner.isSet = !1
                })
            })
        }
        ,
        d.prototype.checkRowForSearchTag = function(a, b, c) {
            var d = this
              , g = !1
              , h = d.stringifyKeyArray[c];
            if (d.searchTagsCache.length == d.prevSearchTagsCache.length) {
                var i = e(d, b, h);
                !i && b.visible ? (b.visible = !1,
                b.setRowInvisible(b)) : i && !b.visible && (b.visible = !0,
                b.clearRowInvisible(b))
            } else if (angular.isDefined(a) && b.visible) {
                if (!angular.isArray(a)) {
                    var j = a.text.toLowerCase();
                    if (d.isDefaultSearch) {
                        var k = h.data.toLowerCase();
                        k.indexOf(j) > -1 && (g = !0)
                    } else
                        for (var l in d.searchProperties) {
                            var m = d.searchProperties[l].name;
                            if (g = f(m, l, d, b, j))
                                break
                        }
                    g || (b.visible = !1,
                    b.setRowInvisible(b))
                }
            } else if (!b.visible) {
                var i = e(d, b, h);
                i && (b.visible = !0,
                b.clearRowInvisible(b))
            }
        }
        ;
        var e = function(a, b, c) {
            for (var d = 0, e = 0; e < a.searchTagsCache.length; e++) {
                var g = a.searchTagsCache[e].text.toLowerCase()
                  , h = !1;
                if (a.isDefaultSearch) {
                    var i = c.data.toLowerCase();
                    i.indexOf(g) > -1 && (h = !0)
                } else
                    for (var j in a.searchProperties) {
                        var k = a.searchProperties[j].name;
                        if (h = f(k, j, a, b, g))
                            break
                    }
                h && d++
            }
            return d == a.searchTagsCache.length
        }
          , f = function(a, b, d, e, f) {
            if (angular.isDefined(e.entity[a]) && d.searchProperties[b].isSearch) {
                var h;
                if (angular.isArray(e.entity[a])) {
                    for (var i = e.entity[a], j = angular.copy(i), k = 0; k < j.length; k++)
                        j[k] = g(j[k]);
                    if ("object" == typeof j)
                        for (var k = 0; k < j.length; k++)
                            j[k] = c("JSONArrayOfObjToString")(j[k]);
                    j = j.join("|");
                    var l = j.replace(/[\[\]&\\#+()$~%*?<>{}]/g, "");
                    h = l.toString().toLowerCase()
                } else {
                    var i = e.entity[a];
                    angular.equals(a, "rule_name_display") && (i = c("formatTableString")(i)),
                    angular.equals(a, "eventname") && (i = c("formatTableStringWithDashesAndInitialCapsAllWords")(i)),
                    angular.equals(d.searchProperties[b].type, "date") && (i = c("momentDateFormat")(i, d.searchProperties[b].displayFormat)),
                    i = g(i),
                    h = i.toString().toLowerCase()
                }
                var m = !1;
                d.searchWordPattern.checkPattern(h, f) && (m = !0)
            }
            return m
        }
          , g = function(a) {
            switch (a) {
            case "vedge-cloud":
                return "vEdge Cloud";
            case "vedge-1000":
                return "vEdge 1000";
            case "vedge-2000":
                return "vEdge 2000";
            case "vedge-100":
                return "vEdge 100";
            case "vedge-100-B":
                return "vEdge 100 B";
            case "vedge-100-WM":
                return "vEdge 100 WM";
            case "vedge-100-M":
                return "vEdge 100 M";
            case "vedge-5000":
                return "vEdge 5000";
            case "vmanage":
                return "vManage";
            case "vsmart":
                return "vSmart";
            default:
                return a
            }
        };
        d.prototype.setSearchCache = function(a) {
            var b = this;
            this.dataSetCache = this.copySearchCache(a),
            this.getSearchTagsCache().length < 1 && (angular.isUndefined(b.gridApi) || !b.gridApi.grid.options.enableTreeView ? this.searchRowCountText.value = this.stringifyKeyArray.length : this.searchRowCountText.value = _.filter(a, function(a) {
                return angular.isUndefined(a.$$treeLevel)
            }).length)
        }
        ,
        d.prototype.searchDataByProperty = function(a, b) {
            var c = this
              , d = !1;
            c.setSearchTagsCache(a);
            var e = c.gridApi.grid.rows;
            c.gridApi.grid.options.enableTreeView && c.gridApi.treeBase.expandAllRows(),
            e.forEach(function(e, f) {
                if (d = !1,
                angular.isDefined(e.entity[b]) && angular.isDefined(a)) {
                    var g;
                    if (angular.isArray(e.entity[b])) {
                        var h = e.entity[b].toString().replace(/[\[\]&\/\\#,+()$~%*?<>{}]/g, "");
                        g = h.toString().toLowerCase()
                    } else
                        g = e.entity[b].toString().toLowerCase();
                    angular.forEach(a, function(a) {
                        c.searchWordPattern.checkPattern(g, a.toLowerCase()) && (d = !0)
                    })
                }
                !d && angular.isUndefined(e.treeLevel) ? (e.visible = !1,
                e.setRowInvisible(e)) : (e.visible = !0,
                e.clearRowInvisible(e))
            }),
            c.gridApi.grid.refresh().then(function() {
                h.call(c),
                i.call(c),
                c.tags = _.uniq(c.tags.concat(c.searchTagsCache)),
                c.prevSearchTagsCache = [],
                angular.forEach(c.searchTagsCache, function(b) {
                    c.prevSearchTagsCache.push(a)
                }),
                c.tableSpinner.isSet = !1
            })
        }
        ;
        var h = function() {
            var a = this;
            if (a.gridApi.grid.options.enableTreeView) {
                var b = _.filter(a.gridApi.grid.rows, function(a) {
                    return angular.isUndefined(a.entity.$$treeLevel)
                }).length
                  , c = _.filter(a.gridApi.grid.getVisibleRows(), function(a) {
                    return angular.isUndefined(a.entity.$$treeLevel)
                }).length;
                angular.isDefined(a.tags) && _.isEmpty(a.tags) ? a.searchRowCountText.value = b : a.searchRowCountText.value = c + " of " + b
            } else
                angular.isDefined(a.tags) && _.isEmpty(a.tags) ? a.searchRowCountText.value = a.gridApi.grid.rows.length : a.searchRowCountText.value = a.gridApi.grid.getVisibleRows().length + " of " + a.gridApi.grid.rows.length
        }
          , i = function() {
            var a = this
              , b = _.filter(a.gridApi.grid.rows, function(a) {
                return angular.isDefined(a.entity.$$treeLevel) && 0 == a.entity.$$treeLevel
            });
            angular.forEach(b, function(b) {
                _.filter(a.gridApi.treeBase.getRowChildren(b), {
                    visible: !0
                }).length < 1 && (b.visible = !1,
                b.setRowInvisible(b))
            })
        };
        return d
    }
    angular.module("vManage").factory("TableTaggedSearchService", a),
    a.$inject = ["TaggedSearchService", "$timeout", "$filter"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        a.dropDownStatus = {
            isopen: !1
        },
        a.spaceEnable = !0,
        a.separatorKeys = [f.KEY_CODE.ENTER, f.KEY_CODE.SPACE],
        a.selectedColumnsCount = 0,
        a.columnDropDownStatus = {
            isopen: !1
        },
        a.allValue = !0,
        a.idSuffix = a.idSuffix.replace(/ /g, "_");
        var g = "_" + a.idSuffix;
        a.idSuffix = (angular.isDefined(a.idModalSuffix) ? a.idModalSuffix : "") + a.idSuffix,
        a.patternUpdate = function() {
            a.patternValue = a.selectedPattern.name,
            a.taggedSearchObject.setSearchWordPattern(a.selectedPattern),
            angular.equals(a.patternValue, "Match") ? (a.spaceEnable = !1,
            a.separatorKeys = [f.KEY_CODE.ENTER]) : (a.spaceEnable = !0,
            a.separatorKeys = [f.KEY_CODE.ENTER, f.KEY_CODE.SPACE]),
            k()
        }
        ,
        a.restoreCursor = function() {
            var a = this;
            b(function() {
                $(a.taggedSearchObject.element).find("#search_tag_input").length > 0 && $(a.taggedSearchObject.element).find("#search_tag_input").focus()
            }, 500)
        }
        ;
        var h = new Object;
        a.selectedColumns = "",
        a.$watchCollection("taggedSearchObject.searchProperties", function(b, c) {
            if (angular.isDefined(b) && b.length > 0) {
                a.columnSearchList = [];
                var d = {
                    displayName: "All",
                    name: "all",
                    isSearch: !0
                };
                a.columnSearchList.push(d);
                for (var e in b)
                    if (b[e].displayName.trim().length > 0) {
                        var f = b[e];
                        f.isSearch = !0,
                        a.selectedColumnsCount++,
                        a.columnSearchList.push(f),
                        h[b[e].name] = b[e]
                    }
                a.selectedColumns = "All"
            }
        }),
        a.radioOptions = e.getSearchWordsPatternList();
        var i = e.getDefaultSearchWordsPattern()
          , j = !1;
        a.loadComboxFn = function() {
            a.comboBoxFilterOptions = [],
            angular.forEach(a.radioOptions, function(b, c) {
                a.comboBoxFilterOptions.push({
                    id: c,
                    value: b.name,
                    key: b.name,
                    searchWordPattern: b
                })
            }),
            a.selectedFilterOption = {},
            a.patternComboBoxUpdate = function(b) {
                var c = b.searchWordPattern;
                a.patternUpdate(c)
            }
            ,
            j = !0,
            b(function() {
                $("#tag-search" + g).find("#search_columns_value").addClass("width-auto")
            })
        }
        ,
        a.patternValue = i.name,
        a.selectedPattern = i,
        angular.isDefined(a.taggedSearchObject) && a.taggedSearchObject.setSearchWordPattern(i),
        a.checkAllColumns = function(b) {
            var c = b.clientX
              , d = b.clientY
              , e = $("#tag-search" + g).find("#all_column_search")
              , f = $(e).offset().left
              , h = $(e).offset().top
              , i = $(e)[0].clientHeight
              , j = $(e)[0].clientWidth
              , k = f + i
              , l = h + j;
            if (f <= c && c <= k && h <= d && d <= l && (a.allValue = !a.allValue,
            angular.isDefined(a.columnSearchList) && a.columnSearchList.length > 0)) {
                var m = a.columnSearchList[0];
                m.isSearch = a.allValue,
                a.searchDataByCol(m)
            }
        }
        ,
        a.newSearchTag = function(a) {
            return {
                text: a
            }
        }
        ,
        a.isIndeterminate = function(b) {
            return !!(angular.equals(b.name, "all") && 0 !== a.selectedColumnsCount && a.selectedColumnsCount < a.columnSearchList.length - 1)
        }
        ,
        a.toggleCheckBox = function(b) {
            var c = a.columnSearchList.indexOf(b);
            c > -1 && (a.columnSearchList[c].isSearch = !a.columnSearchList[c].isSearch)
        }
        ,
        a.searchDataByCol = function(b) {
            var c = []
              , d = "";
            if (angular.equals(b.name, "all")) {
                b.isSearch ? a.selectedColumnsCount = a.columnSearchList.length - 1 : a.selectedColumnsCount = 0;
                for (var e in a.columnSearchList) {
                    var f = a.columnSearchList[e]
                      , i = h[f.name];
                    angular.equals(f.name, "all") || (f.isSearch = b.isSearch,
                    b.isSearch ? (c.push(f),
                    i.isSearch = !0) : i.isSearch = !1)
                }
                d = b.isSearch ? "All" : ""
            } else {
                b.isSearch ? a.selectedColumnsCount++ : a.selectedColumnsCount--;
                var l = a.columnSearchList[0];
                l.isSearch = !1;
                for (var e in a.columnSearchList) {
                    var f = a.columnSearchList[e]
                      , i = h[f.name];
                    angular.equals(f.name, "all") || (f.isSearch ? (c.push(f),
                    i.isSearch = !0,
                    d += i.displayName + ",") : i.isSearch = !1)
                }
                c.length == a.columnSearchList.length - 1 && (l.isSearch = !0,
                d = "All")
            }
            var l = a.columnSearchList[0];
            if (a.allValue = l.isSearch,
            a.selectedColumns = d,
            j)
                angular.equals(d, "All") ? $("#tag-search" + g).find("#search_columns_value").addClass("width-auto") : $("#tag-search" + g).find("#search_columns_value").removeClass("width-auto");
            else {
                var m = $("#tag-search" + g).find("#column_all_search_checkbox");
                !a.allValue && d.trim().length > 0 ? m.indeterminate = !0 : m.indeterminate && (m.indeterminate = !1)
            }
            k()
        }
        ,
        a.toggleColSearchDropDown = function(b) {
            b.stopPropagation(),
            a.columnDropDownStatus.isopen = !0
        }
        ;
        var k = function() {
            a.allValue && angular.equals(a.patternValue, "Contains") ? a.taggedSearchObject.setIsDefaultSearch(!0) : a.taggedSearchObject.setIsDefaultSearch(!1),
            a.taggedSearchObject.getSearchTagsCache().length > 0 && (a.taggedSearchObject instanceof d ? a.taggedSearchObject.searchData(a.tags, a.searchVisible) : a.taggedSearchObject instanceof c && angular.copy(a.taggedSearchObject.searchData(a.tags, a.searchVisible), a.searchData));
            var b = $("div.ui-grid-render-container.ui-grid-render-container-body");
            angular.isDefined(b) && b.length > 0 && b.find(".ui-grid-viewport").scrollTop(0).perfectScrollbar("update"),
            a.onSearchCallback({
                id: a.selectedDevices
            })
        }
    }
    angular.module("vManage").controller("TaggedSearchController", a),
    a.$inject = ["$scope", "$timeout", "TaggedSearchService", "TableTaggedSearchService", "searchWordsPattern", "$mdConstant"]
}(),
angular.module("vManage").directive("vipTaggedSearch", vipTaggedSearch),
vipTaggedSearch.$inject = ["appUtil", "TaggedSearchService", "TableTaggedSearchService", "searchWordsPattern"],
function() {
    function a(a, b, c) {
        var d = function(a, c, d, e) {
            this.stringifyKeyArray = [],
            this.dataSetCache = this.copySearchCache(a),
            this.visibleProperties = d || c,
            this.searchProperties = c || d,
            this.searchTagsCache = [],
            this.gridApi = e,
            this.prevSearchTagsCache = [],
            this.tags = [],
            this.searchWordPattern = b.getDefaultSearchWordsPattern(),
            this.isDefaultSearch = !0
        };
        d.prototype.getSearchTagAdded = function() {
            var a = this
              , b = void 0;
            if (0 == a.prevSearchTagsCache.length)
                b = a.searchTagsCache[0];
            else if (a.searchTagsCache.length > a.prevSearchTagsCache.length)
                for (var c in a.searchTagsCache) {
                    var d = a.searchTagsCache[c].text;
                    if (a.prevSearchTagsCache.indexOf(d) == -1) {
                        b = a.searchTagsCache[c];
                        break
                    }
                }
            else
                a.searchTagsCache.length == a.prevSearchTagsCache.length && (b = angular.copy(a.searchTagsCache));
            return b
        }
        ,
        d.prototype.setSearchWordPattern = function(a) {
            this.searchWordPattern = a
        }
        ,
        d.prototype.setIsDefaultSearch = function(a) {
            this.isDefaultSearch = a
        }
        ,
        d.prototype.setGridApi = function(a) {
            this.gridApi = a
        }
        ,
        d.prototype.clearSearchCache = function() {
            angular.isDefined(this.dataSetCache) && this.dataSetCache.reset(),
            this.searchTagsCache.reset(),
            this.stringifyKeyArray.reset()
        }
        ,
        d.prototype.clearTagsCache = function() {
            this.searchTagsCache.reset()
        }
        ,
        d.prototype.setSearchTagsCache = function(a) {
            a && (this.searchTagsCache = a)
        }
        ,
        d.prototype.getSearchTagsCache = function() {
            return this.searchTagsCache
        }
        ,
        d.prototype.getSearchCache = function() {
            return this.dataSetCache
        }
        ,
        d.prototype.getSearchProperties = function() {
            return this.searchProperties
        }
        ,
        d.prototype.checkObjectWordPattern = function(a, b) {
            for (var c = !1, d = a.split(","), e = 0; e < d.length; e++)
                if (angular.equals(d[e].split(":")[1], b)) {
                    c = !0;
                    break
                }
            return c
        }
        ,
        d.prototype.searchDataByTags = function(a, b, c) {
            var d = -1;
            if (!angular.isDefined(b[a]))
                return !1;
            if (angular.isArray(b[a])) {
                var e = b[a].toString().replace(/[\[\]&\\#,+()$~%*?<>{}]/g, "");
                d = e.toLowerCase().indexOf(c.text.toLowerCase())
            } else
                d = b[a].toString().toLowerCase().indexOf(c.text.toLowerCase());
            return d != -1
        }
        ,
        d.prototype.setSearchCache = function(a) {
            this.dataSetCache = this.copySearchCache(a)
        }
        ,
        d.prototype.searchData = function(b, c) {
            var d = this
              , f = [];
            c ? this.visibleProperties : this.searchProperties;
            if (d.setSearchTagsCache(b),
            0 === d.searchTagsCache.length)
                return d.prevSearchTagsCache.reset(),
                angular.forEach(this.stringifyKeyArray, function(a, b) {
                    a.visible = !0
                }),
                d.dataSetCache;
            var g = d.getSearchTagAdded();
            return angular.forEach(d.dataSetCache, function(b, c) {
                var h = d.stringifyKeyArray[c];
                if (angular.isDefined(g) && h.visible)
                    if (angular.isArray(g))
                        e(d, b, h) ? (h.visible = !0,
                        f.push(b)) : h.visible = !1;
                    else {
                        var i = !1
                          , j = g.text.toLowerCase();
                        if (d.isDefaultSearch) {
                            var k = h.data.toLowerCase();
                            k.indexOf(j) > -1 && (i = !0)
                        } else
                            for (var l in d.searchProperties) {
                                var m = d.searchProperties[l].name;
                                if (angular.isDefined(b[m]) && d.searchProperties[l].isSearch)
                                    if ("array" === d.searchProperties[l].type) {
                                        for (var n = [], o = 0; o < b[m].length; o++)
                                            if (n[o] = a("JSONArrayOfObjToString")(b[m][o]),
                                            d.checkObjectWordPattern(n[o], j)) {
                                                i = !0;
                                                break
                                            }
                                        if (i)
                                            break
                                    } else {
                                        var p = b[m].toString().toLowerCase();
                                        if ("rule_name_display" === d.searchProperties[l].name && (p = a("formatTableString")(p)),
                                        d.searchWordPattern.checkPattern(p, j)) {
                                            i = !0;
                                            break
                                        }
                                    }
                            }
                        i ? (h.visible = !0,
                        f.push(b)) : h.visible = !1
                    }
                else
                    h.visible ? f.push(b) : e(d, b, h) && (h.visible = !0,
                    f.push(b))
            }),
            d.prevSearchTagsCache = [],
            angular.forEach(d.searchTagsCache, function(a) {
                d.prevSearchTagsCache.push(a.text)
            }),
            f
        }
        ;
        var e = function(b, c, d) {
            for (var e = 0, f = 0; f < b.searchTagsCache.length; f++) {
                var g = b.searchTagsCache[f].text.toLowerCase()
                  , h = !1;
                if (b.isDefaultSearch) {
                    var i = d.data.toLowerCase();
                    i.indexOf(g) > -1 && (h = !0)
                } else
                    for (var j in b.searchProperties) {
                        var k = b.searchProperties[j].name;
                        if (angular.isDefined(c[k]) && b.searchProperties[j].isSearch)
                            if ("array" === b.searchProperties[j].type) {
                                for (var l = [], m = 0; m < c[k].length; m++)
                                    if (l[m] = a("JSONArrayOfObjToString")(c[k][m]),
                                    b.checkObjectWordPattern(l[m], g)) {
                                        h = !0;
                                        break
                                    }
                                if (h)
                                    break
                            } else {
                                var n = c[k].toString().toLowerCase();
                                if ("rule_name_display" === b.searchProperties[j].name && (n = a("formatTableString")(n)),
                                b.searchWordPattern.checkPattern(n, g)) {
                                    h = !0;
                                    break
                                }
                            }
                    }
                h && e++
            }
            return e == b.searchTagsCache.length
        };
        d.prototype.convertJSONtoString = function(b, c) {
            var d = ""
              , e = this;
            for (var g in b) {
                var h = g
                  , i = b[g];
                if (angular.forEach(this.searchProperties, function(a) {
                    angular.equals(a.name, h) && (e.fieldObj = a)
                }),
                angular.isDefined(this.searchProperties) && this.searchProperties.length > 0) {
                    if (c.indexOf(g) > -1)
                        if (angular.isArray(i)) {
                            for (var j = angular.copy(i), k = 0; k < j.length; k++)
                                j[k] = f(j[k]);
                            if ("object" == typeof j)
                                for (var k = 0; k < j.length; k++)
                                    j[k] = a("JSONArrayOfObjToString")(j[k]);
                            j = j.join("|");
                            var l = j.replace(/[\[\]&\\#+()$~%*?<>{}]/g, "");
                            d += l + ","
                        } else
                            angular.equals(h, "rule_name_display") && (i = a("formatTableString")(i)),
                            angular.equals(h, "eventname") && (i = a("formatTableStringWithDashesAndInitialCapsAllWords")(i)),
                            angular.equals(e.fieldObj.type, "date") && (i = a("momentDateFormat")(i, e.fieldObj.displayFormat)),
                            d += f(i) + ","
                } else if (angular.isArray(i)) {
                    for (var j = angular.copy(i), k = 0; k < j.length; k++)
                        j[k] = f(j[k]);
                    var l = j.toString().replace(/[\[\]&\\#,+()$~%*?<>{}]/g, "");
                    d += l + ","
                } else
                    d += f(i) + ",";
                delete this.fieldObj
            }
            return d
        }
        ;
        var f = function(a) {
            switch (a) {
            case "vedge-cloud":
                return "vEdge Cloud";
            case "vedge-1000":
                return "vEdge 1000";
            case "vedge-2000":
                return "vEdge 2000";
            case "vedge-100":
                return "vEdge 100";
            case "vedge-100-B":
                return "vEdge 100 B";
            case "vedge-100-WM":
                return "vEdge 100 WM";
            case "vedge-100-M":
                return "vEdge 100 M";
            case "vedge-5000":
                return "vEdge 5000";
            case "vmanage":
                return "vManage";
            case "vsmart":
                return "vSmart";
            default:
                return a
            }
        }
          , g = function(a) {
            var b = [];
            return angular.isDefined(a) && a.length > 0 && (b = _.pluck(a, "name")),
            b
        };
        return d.prototype.copySearchCache = function(a) {
            var b = this;
            if (!a)
                return a;
            this.stringifyKeyArray = [];
            var b = this
              , c = g(this.searchProperties);
            for (var d in a) {
                var e = a[d]
                  , f = {
                    visible: !0
                };
                if (angular.isDefined(this.searchProperties) && this.searchProperties.length > 0) {
                    var h = b.convertJSONtoString(e, c);
                    f.data = h,
                    this.stringifyKeyArray.push(f)
                } else
                    f.data = JSON.stringify(e),
                    this.stringifyKeyArray.push(f)
            }
            return JSON.parse(JSON.stringify(a))
        }
        ,
        d.prototype.updateSearchCacheObject = function(a, b) {
            var c = -1
              , d = this
              , e = _.find(this.dataSetCache, function(d) {
                return c++,
                d[b] === a[b]
            });
            if (e) {
                angular.extend(e, a);
                var f = g(this.searchProperties)
                  , h = d.convertJSONtoString(e, f);
                this.stringifyKeyArray[c].data = h
            }
        }
        ,
        d.prototype.updateSearchCacheStringifyObject = function(a, b) {
            var c = -1
              , d = this
              , e = _.find(this.stringifyKeyArray, function(d) {
                return c++,
                d.data.indexOf(a[b]) > -1
            });
            if (e) {
                var f = g(this.searchProperties)
                  , h = d.convertJSONtoString(a, f);
                this.stringifyKeyArray[c].data = h
            }
        }
        ,
        d.prototype.setStringifyKeyArray = function(a) {
            var b = this
              , c = g(this.searchProperties);
            angular.forEach(b.stringifyKeyArray, function(a, d) {
                var e = a.data
                  , f = JSON.parse(e)
                  , g = b.convertJSONtoString(f, c);
                a.data = g
            })
        }
        ,
        d.prototype.setSearchProperties = function(a) {
            var b = !0;
            angular.isDefined(this.searchProperties) && (b = !1),
            this.searchProperties = a,
            b && this.setStringifyKeyArray(this.searchProperties)
        }
        ,
        d
    }
    angular.module("vManage").factory("TaggedSearchService", a),
    a.$inject = ["$filter", "searchWordsPattern", "$timeout"]
}(),
function() {
    function a(a) {
        var b = this;
        b.navigateToView = function(c, d, e) {
            b.toggleButtonArray[e].active || (angular.forEach(b.toggleButtonArray, function(a, b) {
                a.active = b === e
            }),
            d = angular.isDefined(d) ? d : {},
            a.go(c, d))
        }
    }
    a.$inject = ["$state"],
    angular.module("vManage").component("toggleButton", {
        templateUrl: "app/common/components/toggleButton/toggleButton.html",
        bindings: {
            toggleButtonArray: "<"
        },
        controller: a,
        controllerAs: "toggleButtonCtrl"
    })
}(),
angular.module("vManage").factory("ToggleButton", ToggleButton),
ToggleButton.$inject = ["appUtil"],
angular.module("vManage").directive("vipSelect", vipSelect),
vipSelect.$inject = ["appUtil", "$state"],
function() {
    function a(a, b, c, d, e, f, g, h) {
        function i(b) {
            $http.get(b, {
                cache: f
            }).success(function(b) {
                var d = g(b)(a);
                c.children().find("md-content").eq(0).html(d)
            })
        }
        function j(b) {
            var d = g(b)(a);
            c.children().find("md-content").eq(0).html(d)
        }
        function k() {
            p.title = "",
            delete p.sliderNavObj;
            e(p.sliderElementID).isOpen();
            e(p.sliderElementID).close().then(function() {
                console.log("side nav closed")
            })
        }
        function l(a) {
            var b = e(p.sliderElementID).isOpen();
            b ? (a.templateURL ? i(a.templateURL) : a.templateStr && j(a.templateStr),
            p.sliderNavObj = a.classInstance,
            p.title = p.sliderNavObj.options.title) : e(p.sliderElementID).open().then(function() {
                console.log("side nav is open"),
                a.templateURL ? i(a.templateURL) : a.templateStr && j(a.templateStr),
                p.sliderNavObj = a.classInstance,
                n(a)
            })
        }
        function m(a) {
            a.templateURL ? i(a.templateURL) : a.templateStr && j(a.templateStr),
            p.sliderNavObj = a.classInstance,
            n(a)
        }
        function n(a) {
            h.checkNestedProperty(a, "options") && (p.title = a.options.title),
            angular.isUndefined(p.title) && h.checkNestedProperty(p.sliderNavObj, "options") && (p.title = p.sliderNavObj.options.title)
        }
        function o() {
            p.title = void 0,
            $("#slider-content").empty()
        }
        var p = this;
        p.previousStates = [];
        var q = b.$on("sliderNavUpdate", function(a, b) {
            var c = e(p.sliderElementID).isOpen();
            h.checkNestedProperty(b, "options") && b.options.enableStates && p.previousStates.push(b),
            c ? !angular.isDefined(p.sliderNavObj) || angular.isDefined(b.classInstance.options.name) && angular.isDefined(p.sliderNavObj) && angular.isDefined(p.sliderNavObj.options.name) && b.classInstance.options.name !== p.sliderNavObj.options.name ? (o(),
            m(b)) : k() : (l(b),
            e(p.sliderElementID).onClose(function() {
                p.previousStates.reset(),
                o()
            }))
        });
        p.$onInit = function() {
            p.sliderElementID = "sliderNav",
            p.sliderVisible = !1,
            p.sliderHeight = d.getAppContentHeight(),
            a.$on("windowResizeEvent", function() {
                p.sliderHeight = d.getAppContentHeight()
            })
        }
        ,
        p.backIconClickHandler = function() {
            m(p.previousStates[p.previousStates.length - 2]),
            p.previousStates.pop()
        }
        ,
        p.closeIconClickHandler = function() {
            k()
        }
        ,
        a.$on("$destroy", function() {
            q()
        })
    }
    a.$inject = ["$scope", "$rootScope", "$element", "responsiveContentHeight", "$mdSidenav", "$templateCache", "$compile", "appUtil"],
    angular.module("vManage").component("vSliderNav", {
        templateUrl: "app/common/components/vSliderNav/vSliderNav.html",
        controller: a,
        controllerAs: "vSliderNavCtrl"
    })
}(),
function() {
    function a(a) {
        var b = "sliderNav";
        return {
            isSliderOpen: function() {
                return a(b).isOpen()
            },
            closeSliderNav: function() {
                a(b).close()
            }
        }
    }
    angular.module("vManage").service("vSliderNavService", a),
    a.$inject = ["$mdSidenav"]
}(),
angular.module("vManage").directive("vipConfirmValidation", vipConfirmValidation),
angular.module("vManage").constant("apiConstants", {
    CLIENT_NAVIGATION_TREE: "/dataservice/client/navigation",
    PROVIDER_NAVIGATION_TREE: "/dataservice/client/navigation?type=provider",
    PROVIDER_TENANT_NAVIGATION_TREE: "/dataservice/client/navigation?type=provider-tenant",
    TENANT_NAVIGATION_TREE: "/dataservice/client/navigation?type=tenant",
    DEVICE_INFO: "/dataservice/device",
    GENERAL_TEMPLATE_PATH: "/app/configuration/template/feature/templates/",
    GENERAL_TEMPLATE: "/dataservice/template/feature/",
    GENERAL_TEMPLATE_OBJECT: "/dataservice/template/feature/object/",
    GENERAL_TEMPLATE_DEFINITION: "dataservice/template/feature/types/definition/",
    GENERAL_TEMPLATE_COPY: "/dataservice/template/feature/duplicate/",
    GENERAL_TEMPLATE_TYPES: "/dataservice/template/feature/types/",
    GENERAL_TEMPLATE_MODELS: "/dataservice/device/models/",
    DEVICE_TEMPLATE: "/dataservice/template/device/",
    DEVICE_TEMPLATE_OBJECT: "/dataservice/template/device/object/",
    DEVICE_CLI_TEMPLATE: "/dataservice/template/device/cli/",
    DEVICE_FEATURE_TEMPLATE: "/dataservice/template/device/feature/",
    DEVICE_TEMPLATE_DEFINITION: "dataservice/template/feature/master/",
    DEVICE_TEMPLATE_DEVICES: "/dataservice/template/device/config/",
    DEVICE_TEMPLATE_ATTACH_DEVICES: "/dataservice/template/device/config/attach",
    DEVICE_CLI_TEMPLATE_ATTACH_DEVICES: "/dataservice/template/device/config/attachcli",
    DEVICE_FEATURE_TEMPLATE_ATTACH_DEVICES: "/dataservice/template/device/config/attachfeature",
    DEVICE_TEMPLATE_DETACH_DEVICES: "/dataservice/template/device/config/detach",
    DEVICE_TEMPLATE_DEVICES_ATTACHED: "/dataservice/template/device/config/attached/",
    DEVICE_TEMPLATE_VALIDATE_INPUT: "/dataservice/template/device/config/input/",
    DEVICE_TEMPLATE_PREVIEW_CONFIG_DEVICES: "/dataservice/template/device/config/config/",
    DEVICE_TEMPLATE_ORIGINAL_CONFIG_DEVICES: "dataservice/template/device/config/attachedconfig?deviceId=",
    DEVICE_TEMPLATE_VALIDATE_CONFIG: "/dataservice/template/device/config/validate",
    DEVICE_TEMPLATE_VBOND_CONFIG: "/dataservice/template/device/config/vbond",
    DEVICE_TEMPLATE_CONFIG_FILE_UPLOAD: "dataservice/template/device/config/process/input/file",
    DEVICE_TEMPLATE_OUT_OF_SYNC: "/dataservice/template/device/syncstatus/",
    FEATURE_TEMPLATE_DEVICE_TEMPLATES_ATTACHED: "/dataservice/template/feature/devicetemplates/",
    TRAFFIC_POLICY_DEFINITION: "/dataservice/template/policy/definition/",
    TEMPLATE_STATUS: "/dataservice/device/action/status/template/",
    TEMPLATE_EXPORT_CSV: "/dataservice/template/device/config/exportcsv",
    VSMART_POLICY: "/dataservice/template/policy/vsmart/",
    VSMART_DEFINITION_POLICY: "/dataservice/template/policy/vsmart/definition/",
    VSMART_ACTIVATE_POLICY: "/dataservice/template/policy/vsmart/activate/",
    VSMART_DEACTIVATE_POLICY: "/dataservice/template/policy/vsmart/deactivate/",
    VSMART_POLICY_STATUS: "/dataservice/device/action/status/policy/vsmart/",
    VSMART_CONN_STATUS: "/dataservice/template/policy/vsmart/connectivity/status",
    VEDGE_POLICY: "/dataservice/template/policy/vedge/",
    VEDGE_DEFINITION_POLICY: "/dataservice/template/policy/vedge/definition/",
    VEDGE_ATTACH_POLICY: "/dataservice/template/policy/vedge/attach/",
    VEDGE_DETACH_POLICY: "/dataservice/template/policy/vedge/detach/",
    VEDGE_POLICY_STATUS: "/dataservice/device/action/status/policy/vedge/",
    VEDGE_POLICY_DEVICES: "/dataservice/template/policy/vedge/devices/",
    CLUSTER_CONNECTED_DEVICES: "/dataservice/clusterManagement/connectedDevices/",
    CLUSTER_MANANGEMENT: "/dataservice/clusterManagement/",
    CLUSTER_VMANAGE_DETAILS: "/dataservice/clusterManagement/vManage/details/",
    CLUSTER_TENANT_LIST: "dataservice/clusterManagement/tenantList",
    VIEW_PREFERENCE: "/dataservice/preference/view/",
    FEATURE_ACCESS: "/dataservice/client/server",
    RBAC: "/dataservice/client/user/roles",
    EVENT_POLL_REG: "/dataservice/client/event/register",
    EVENT_POLL_UNREG: "/dataservice/client/event/unregister",
    EVENT_POLL: "/dataservice/client/event/poll",
    ADMIN_TECH: "/dataservice/device/tools/admintech",
    ADMIN_TECH_LIST: "/dataservice/device/tools/admintechs",
    INTERFACE_RESET: "/dataservice/device/tools/reset/interface",
    PORT_HOP: "/dataservice/device/tools/porthopcolor",
    RESET_LOCK: "dataservice/device/tools/resetuser",
    INTERFACE_OPTIONS: "/dataservice/device/interface/vpn",
    PORT_HOP_OPTIONS: "/dataservice/device/control/waninterface/color",
    USER_OPTIONS: "/dataservice/device/users/list",
    HELP_BASE_URL: "https://docs.viptela.com/Product_Documentation/vManage_Help/17.2/",
    ANALYTICS_GET_SAML_TOKEN: "/dataservice/analytics/sso/token",
    SESSION_TIMEOUT_TEXT: '<form name="loginForm" id="loginForm" method="POST" action="j_security_check" onsubmit="return validateForm()">',
    OUT_OF_SYNC_CONTROLLERS: "/dataservice/system/device/controllers/vedge/status",
    TEMPLATE_LOCK: "/dataservice/template/lock/",
    DEVICE_TEMPLATE_VALIDATE_DUPLICATE_IP: "/dataservice/template/device/config/duplicateip",
    VEDGE_DEVICES: "dataservice/system/device/vedges",
    CONTROLLER_DEVICES: "dataservice/system/device/controllers"
}),
angular.module("vManage").constant("monitorApiConstants", {
    SIMULATE_TUNNEL_FLOWS: "/dataservice/device/tools/tunnelpath",
    SIMULATE_SERVICE_FLOWS: "/dataservice/device/tools/servicepath",
    VPN_LIST: "/dataservice/device/action/vpn",
    INTERFACE_LIST: "/dataservice/device/interface/synced",
    PING_DEVICE_URL: "/dataservice/device/tools/ping/",
    NPING_DEVICE_URL: "/dataservice/device/tools/nping/",
    TRACEROUTE_URL: "dataservice/device/tools/traceroute/",
    TRANSPORT_HEALTH: "/dataservice/statistics/approute/transport",
    APPLICATION_LIST: "/dataservice/device/dpi/qosmos/applications",
    TLOC_FIELDS_URL: "dataservice/statistics/approute/query/fields",
    TUNNEL_FIELDS_URL: "dataservice/statistics/approute/query/fields",
    TOP_APPLICATIONS_DEVICE_DPI_TEST: "/dataservice/statistics/dpi/doccount",
    TOP_APPLICATION_LOCAL_COLOR_URL: "dataservice/device/bfd/state/device",
    TOP_APPLICATION_RAW_URL: "/dataservice/statistics/dpi",
    TOP_APPLICATION_AGGREGATED_URL: "/dataservice/statistics/dpi/aggregation",
    TOP_APPLICATION_FIELDS_URL: "/dataservice/statistics/dpi/query/fields",
    TOP_APPLICATIONS_DEVICE_CFLOWD_TEST: "/dataservice/statistics/cflowd/doccount",
    TOP_APPLICATION_CFLOWD_RAW_URL: "/dataservice/statistics/cflowd",
    TOP_APPLICATION_CFLOWD_AGGREGATED_URL: "/dataservice/statistics/cflowd/aggregation",
    TOP_APPLICATION_CFLOWD_FIELDS_URL: "/dataservice/statistics/cflowd/query/fields",
    TCP_OPTIMIZED_CONNECTIONS: "dataservice/device/tcpopt/activeflows",
    INTERFACE_AGGREGATION: "/dataservice/statistics/interface/aggregation",
    DEVICE_BFD_LIVE_STATS: "dataservice/device/bfd/state/device?deviceId=",
    DEVICE_APP_ROUTE_LIVE_STATS: "/dataservice/device/app-route/statistics?deviceId=",
    BFD_SUMMARY: "/dataservice/device/bfd/summary?deviceId=",
    DEVICE_TUNNEL_LIVE_STATS: "dataservice/device/tunnel/statistics?deviceId=",
    APP_ROUTE_STATS_SUMMARY: "/dataservice/statistics/approute/device/tunnel/summary?query=",
    APP_ROUTE_STATS: "/dataservice/statistics/approute/aggregation",
    APP_ROUTE_DPI_FLOW_COUNT: "/dataservice/statistics/dpi/device/application/flowcount",
    INTERFACE_QUERY_FIELDS: "dataservice/statistics/interface/query/fields",
    DEVICE_INTERFACE_SYNCED_STATS: "dataservice/device/interface/synced?deviceId=",
    DEVICE_INTERFACE_LIVE_STATS: "/dataservice/device/interface?deviceId=",
    REALTIME_INTERVAL_SIZE: 12,
    MAX_APPLICATION_SERIES_ALLOWED: 30,
    MAX_INTERFACE_SERIES_ALLOWED: 30,
    MAX_WAN_SERIES_ALLOWED: 30,
    MAX_WLAN_SERIES_ALLOWED: 6,
    WLAN_RADIO_URL: "/dataservice/device/wlan/radios?deviceId=",
    WLAN_INTERFACE_URL: "/dataservice/device/wlan/interfaces?deviceId=",
    WLAN_BRIDGE_INTERFACE_AGGREGATION: "/dataservice/statistics/bridgeinterface/aggregation",
    WLAN_BRIDGE_INTERFACE_QUERY_FIELDS: "dataservice/statistics/bridgeinterface/query/fields",
    WLAN_CLIENTS_INFO_URL: "dataservice/statistics/wlanclientinfo",
    WLAN_CLIENTS_INFO_AGGREGATION: "dataservice/statistics/wlanclientinfo/aggregation",
    WLAN_CLIENTS_INFO_QUERY_FIELDS: "dataservice/statistics/wlanclientinfo/query/fields",
    WLAN_CLIENTS_USAGE_URL: "dataservice/statistics/bridgemac",
    WLAN_CLIENTS_USAGE_AGGREGATION: "dataservice/statistics/bridgemac/aggregation",
    WLAN_CLIENTS_USAGE_QUERY_FIELDS: "dataservice/statistics/bridgemac/query/fields",
    DEVICE_SUPPORTED_VERSION: "dataservice/device/featurelist/synced",
    DEVICE_BRING_UP: "dataservice/troubleshooting/devicebringup",
    LOG_FILE_LIST: "dataservice/stream/device/log/type",
    GET_LOG: "dataservice/stream/device/log",
    SEARCH_LOG: "dataservice/stream/device/log",
    DOWNLOAD_LOG: "dataservice/stream/device/log",
    UPDATE_STREAMING_STATUS: "dataservice/stream/device/log",
    URL_PACKET_CAPTURE_GET_SESSION: "dataservice/stream/device/capture",
    URL_PACKET_CAPTURE_START: "dataservice/stream/device/capture/start/",
    URL_PACKET_CAPTURE_STOP: "dataservice/stream/device/capture/stop/",
    URL_PACKET_CAPTURE_STATUS: "dataservice/stream/device/capture/status/",
    URL_PACKET_CAPTURE_DOWNLOAD: "dataservice/stream/device/capture/download/",
    URL_PACKET_CAPTURE_DISABLE_SESSION: "dataservice/stream/device/capture/disable/",
    URL_SPEED_TEST_GET_SESSION: "dataservice/stream/device/speed",
    URL_SPEED_TEST_START: "dataservice/stream/device/speed/start/",
    URL_SPEED_TEST_STATUS: "dataservice/stream/device/speed/status/",
    URL_SPEED_TEST_STOP: "dataservice/stream/device/speed/disable/",
    URL_SPEED_TEST_LOGS: "dataservice/stream/device/speed/",
    URL_SPEED_TEST_STATS: "dataservice/statistics/speedtest",
    URL_SPEED_TEST_BANDWIDTH: "dataservice/stream/device/speed/interface/bandwidth",
    DATA_STREAM: "dataservice/settings/configuration/vmanagedatastream"
}),
angular.module("vManage").constant("configurationConstants", {
    APPLICATION_DETAILS_GRID: "/dataservice/template/cloudx/status",
    APPLICATIONS_OVERVIEW_URL: "dataservice/template/cloudx",
    APPLICATIONS_AVAILABLE_URL: "dataservice/template/cloudx/availableapps",
    ADD_INTERFACES_URL: "dataservice/template/cloudx/interfaces",
    CLOUD_EXPRESS_CONFIG: "dataservice/settings/configuration/cloudx",
    CLOUDX_ATTACH_URL: "dataservice/template/device/config/attachcloudx",
    CLOUDX_DETACH_URL: "dataservice/template/device/config/detachcloudx",
    MANAGE_APPLICATIONS_VPN_URL: "dataservice/template/cloudx/manage/apps",
    AVAILABLE_GATEWAYS_URL: "/dataservice/template/cloudx/gatewaylist",
    AVAILABLE_SITES_URL: "/dataservice/template/cloudx/clientlist",
    AVAILABLE_DIAS_URL: "/dataservice/template/cloudx/dialist",
    ATTACHED_GATEWAYS_URL: "/dataservice/template/cloudx/attachedgateway",
    ATTACHED_SITES_URL: "/dataservice/template/cloudx/attachedclient",
    ATTACHED_DIAS_URL: "/dataservice/template/cloudx/attacheddia",
    INTERFACE_LIST: "/dataservice/device/interface/synced",
    VPN_LIST: "/dataservice/device/action/filter/vpn",
    VQE_SCORE_CHART: "/dataservice/statistics/cloudx/aggregation",
    VQE_SCORE_CHART_FIELDS: "/dataservice/statistics/cloudx/query/fields",
    CLOUDX_SUPPORTED_VERSION: 16.3,
    CLOUD_ON_RAMP_DASHBOARD: "/dataservice/template/cor",
    CLOUD_ON_RAMP_CLOUD_TYPES: "/dataservice/template/cor/cloud",
    CLOUD_ON_RAMP_AUTHENTICATION: "/dataservice/template/cor/cloud/authenticate",
    CLOUD_ON_RAMP_DISCOVER_HOST_VPC: "/dataservice/template/cor/hostvpc",
    CLOUD_ON_RAMP_DEVICES: "/dataservice/template/cor/device",
    CLOUD_ON_RAMP_MAP_HOST_VPC: "/dataservice/template/cor/map",
    CLOUD_ON_RAMP_TRANSIT_VPC: "/dataservice/template/cor/transitvpc",
    CLOUD_ON_RAMP_TRANSIT_VPC_SIZE: "/dataservice/template/cor/transitvpc/size",
    CLOUD_ON_RAMP_VPN_LIST: "/dataservice/template/config/vpn",
    CLOUD_ON_RAMP_AMI_LIST: "/dataservice/template/cor/ami"
}),
angular.module("vManage").constant("alarmsConstants", {
    ACTIVE_ALARMS_URL: "dataservice/alarms/notviewed?state=active",
    CLEARED_ALARMS_URL: "dataservice/alarms/notviewed?state=cleared",
    ALARM_DETAILS_URL: "dataservice/alarms/uuid/",
    ACTIVE_ALARM_ACK_URL: "dataservice/alarms/markviewed?type=active",
    CLEARED_ALARM_ACK_URL: "dataservice/alarms/markviewed?type=cleared",
    ALL_ACTIVE_ALARM_ACK_URL: "dataservice/alarms/markallasviewed?type=active",
    ALL_CLEARED_ALARM_ACK_URL: "dataservice/alarms/markallasviewed?type=cleared",
    DASHBOARD_ALARMS_COUNT: "/dataservice/alarms/count"
}),
angular.module("vManage").constant("tasksConstants", {
    TASKS_URL: "dataservice/client/activity/summary",
    DELETE_ALL_COMPLETED_TASKS: "dataservice/device/action/status/clear",
    DELETE_TASK: "dataservice/device/action/status/clear",
    DASHBOARD_TASKS_COUNT: "dataservice/device/action/status/tasks/activeCount"
}),
angular.module("vManage").constant("maintenanceApiConstants", {
    REDISCOVER: "/dataservice/device/action/rediscover",
    REDISCOVERALL: "/dataservice/device/action/rediscoverall",
    REBOOT: "dataservice/device/action/reboot",
    ADD_NEW_SW_REMOTE_SERVER: "dataservice/device/action/software",
    FILE_UPLOAD: "dataservice/device/action/software/package",
    CHANGE_PARTITION: "dataservice/device/action/changepartition",
    REPOSITORY: "dataservice/device/action/software/",
    SOFTWARE_UPGRADE: "dataservice/device/action/install",
    DEVICE_STATUS: "/dataservice/device/action/status/",
    VPN_LIST: "dataservice/device/action/uniquevpnlist",
    STATUS_SUMMARY: "dataservice/device/action/status/summary",
    DEVICE_GROUPS: "dataservice/group",
    DELETE_SOFTWARE: "dataservice/device/action/removepartition",
    ZTP_DETAILS: "dataservice/device/action/ztp/upgrade",
    SET_DEFAULT: "dataservice/device/action/defaultpartition",
    CONTROLLER_VERSION_LIST: "/dataservice/device/action/install/devices/controller",
    VMANAGE_VERSION_LIST: "/dataservice/device/action/install/devices/vmanage",
    IMAGE_COUNT: "/dataservice/device/action/software/package/imageCount"
}),
angular.module("vManage").constant("multiTenantConstants", {
    MANAGE_TENANT_URL: "dataservice/tenant",
    ADD_TENANT_URL: "dataservice/tenant/async"
}),
angular.module("vManage").constant("dashboardApiConstants", {
    CERTIFICATE_SUMMARY: "/dataservice/certificate/stats/summary",
    V_MANAGE_STATUS: "/dataservice/clusterManagement/health/summary",
    V_DEVICE_STATUS: "/dataservice/network/connectionssummary",
    CONTROL_STATUS: "/dataservice/device/control/count?isCached=true",
    TENANT_LIST: "/dataservice/tenantstatus",
    PROVIDER_STATUS: "/dataservice/tenantstatus",
    TENANT_SITE_HEALTH: "/dataservice/device/bfd/sites/summary",
    V_BOND_DIALOG_STATUS: "/dataservice/network/connectionssummary"
}),
angular.module("vManage").constant("deviceTypeConstants", {
    VMANAGE: "vmanage",
    VEDGE: "vedge",
    VSMART: "vsmart"
}),
angular.module("vManage").constant("restrictedStates", {
    PROVIDER: ["app.config.certificates.vedgelist", "app.config.devices.vedge", "app.monitor.acl_log", "app.config.policy", "app.config.cloudExpress"],
    MULTI_TENANT_TENANT: ["app.config.certificates.controller", "app.config.devices.controller", "app.admin.tenant_management"],
    MULTI_TENANT_PROVIDER: ["app.admin.tenant_management"]
}),
angular.module("vManage").constant("colors", {
    colorOptions: [{
        key: "default",
        value: "default"
    }, {
        key: "3g",
        value: "3g"
    }, {
        key: "biz-internet",
        value: "biz-internet"
    }, {
        key: "blue",
        value: "blue"
    }, {
        key: "bronze",
        value: "bronze"
    }, {
        key: "custom1",
        value: "custom1"
    }, {
        key: "custom2",
        value: "custom2"
    }, {
        key: "custom3",
        value: "custom3"
    }, {
        key: "gold",
        value: "gold"
    }, {
        key: "green",
        value: "green"
    }, {
        key: "lte",
        value: "lte"
    }, {
        key: "metro-ethernet",
        value: "metro-ethernet"
    }, {
        key: "mpls",
        value: "mpls"
    }, {
        key: "private1",
        value: "private1"
    }, {
        key: "private2",
        value: "private2"
    }, {
        key: "private3",
        value: "private3"
    }, {
        key: "private4",
        value: "private4"
    }, {
        key: "private5",
        value: "private5"
    }, {
        key: "private6",
        value: "private6"
    }, {
        key: "public-internet",
        value: "public-internet"
    }, {
        key: "red",
        value: "red"
    }, {
        key: "silver",
        value: "silver"
    }]
}),
angular.module("vManage").constant("setServiceTypes", {
    options: [{
        key: "FW",
        name: "Firewall"
    }, {
        key: "IDP",
        name: "Intrusion Detection Prevention"
    }, {
        key: "IDS",
        name: "Intrusion Detection System"
    }, {
        key: "netsvc1",
        name: "Net Service 1"
    }, {
        key: "netsvc2",
        name: "Net Service 2"
    }, {
        key: "netsvc3",
        name: "Net Service 3"
    }, {
        key: "netsvc4",
        name: "Net Service 4"
    }, {
        key: "netsvc5",
        name: "Net Service 5"
    }]
}),
angular.module("vManage").constant("policyRuleCarrier", {
    options: [{
        key: "default",
        name: "Default"
    }, {
        key: "carrier1",
        name: "Carrier 1"
    }, {
        key: "carrier2",
        name: "Carrier 2"
    }, {
        key: "carrier3",
        name: "Carrier 3"
    }, {
        key: "carrier4",
        name: "Carrier 4"
    }, {
        key: "carrier5",
        name: "Carrier 5"
    }, {
        key: "carrier6",
        name: "Carrier 6"
    }, {
        key: "carrier7",
        name: "Carrier 7"
    }, {
        key: "carrier8",
        name: "Carrier 8"
    }]
}),
angular.module("vManage").constant("policyRuleOrigin", {
    options: [{
        key: "aggregate",
        name: "Aggregate"
    }, {
        key: "bgp-external",
        name: "BGP External"
    }, {
        key: "bgp-internal",
        name: "BGP Internal"
    }, {
        key: "connected",
        name: "Connected"
    }, {
        key: "ospf-inter-area",
        name: "OSPF Inter-Area"
    }, {
        key: "ospf-intra-area",
        name: "OSPF Intra-Area"
    }, {
        key: "ospf-external1",
        name: "OSPF External 1"
    }, {
        key: "ospf-external2",
        name: "OSPF External 2"
    }, {
        key: "static",
        name: "Static"
    }]
}),
angular.module("vManage").constant("PLP", {
    options: [{
        key: "low",
        name: "Low"
    }, {
        key: "high",
        name: "High"
    }]
}),
angular.module("vManage").constant("DNS", {
    options: [{
        key: "request",
        name: "Request"
    }, {
        key: "response",
        name: "Response"
    }]
}),
angular.module("vManage").constant("tlocEncap", {
    options: [{
        key: "ipsec",
        name: "IPSEC"
    }, {
        key: "gre",
        name: "GRE"
    }]
}),
angular.module("vManage").constant("tlocActions", {
    options: [{
        key: "strict",
        name: "Strict"
    }, {
        key: "primary",
        name: "Primary"
    }, {
        key: "backup",
        name: "Backup"
    }, {
        key: "ecmp",
        name: "Equal Cost Multi-path"
    }]
}),
angular.module("vManage").constant("colorConstants", {
    GLOBAL_RED: "#ff6e56",
    GLOBAL_GREEN: "#90cc84",
    GLOBAL_YELLOW: "#ffd562",
    GLOBAL_BLUE: "#59a2cb"
}),
angular.module("vManage").constant("gatewayVersionList", {
    options: [{
        key: "16.2.0",
        value: "16.2.0"
    }, {
        key: "16.3.0",
        value: "16.3.0"
    }, {
        key: "16.3.1",
        value: "16.3.1"
    }, {
        key: "17.1.0",
        value: "17.1.0"
    }, {
        key: "17.1.1",
        value: "17.1.1"
    }, {
        key: "99.99.999",
        value: "99.99.999"
    }]
}),
angular.module("vManage").constant("gatewaySizes", {
    options: [{
        key: "c3.large",
        value: "Up to 500Mbps : c3.large (2 vCPU)"
    }, {
        key: "c4.large",
        value: "Up to 500Mbps : c4.large (2 vCPU)"
    }, {
        key: "c3.xlarge",
        value: "Up to 1Gbps: c3.xlarge (4 vCPU)"
    }, {
        key: "c4.xlarge",
        value: "Up to 1Gbps: c4.xlarge (4 vCPU)"
    }, {
        key: "c3.2xlarge",
        value: "Up to 2Gbps: c3.2xlarge (8 vCPU)"
    }, {
        key: "c4.2xlarge",
        value: "Up to 2Gbps: c4.2xlarge (8 vCPU)"
    }]
}),
angular.module("vManage").constant("templatesConstants", {
    NO_CANCEL_CONFIRM_TEMPLATE: '<md-dialog md-theme="{{ dialog.theme }}" aria-label="{{ dialog.ariaLabel }}" ng-class="dialog.css"><md-dialog-content class="md-dialog-content" role="document" tabIndex="-1"><h2 class="md-title">{{ dialog.title }}</h2><div ng-if="::dialog.mdHtmlContent" class="md-dialog-content-body"ng-bind-html="::dialog.mdHtmlContent"></div><div ng-if="::!dialog.mdHtmlContent" class="md-dialog-content-body"><p>{{::dialog.mdTextContent}}</p></div><md-input-container md-no-float ng-if="::dialog.$type == \'prompt\'" class="md-prompt-input-container"><input ng-keypress="dialog.keypress($event)" md-autofocus ng-model="dialog.result"placeholder="{{::dialog.placeholder}}"></md-input-container></md-dialog-content><md-dialog-actions><md-button id="ok" ng-click="dialog.hide()" class="md-primary md-confirm-button" md-autofocus="dialog.$type===\'alert\'">{{ dialog.ok }}</md-button></md-dialog-actions></md-dialog>'
}),
angular.module("vManage").controller("dataTestController", dataTestController),
dataTestController.$inject = ["$scope", "restService", "$compile", "Table"],
angular.module("vManage").factory("DeviceActionDropDownFactory", DeviceActionDropDownFactory),
DeviceActionDropDownFactory.$inject = ["$state", "rbac", "notification"],
angular.module("vManage").directive("vipDeviceList", vipDeviceList),
vipDeviceList.$inject = ["deviceListService", "$rootScope", "TaggedSearchService", "notification", "eventPoll", "eventListObject", "$filter", "$timeout", "appUtil", "$state", "toolsService", "$window", "rbac"],
angular.module("vManage").service("deviceListService", deviceListService),
deviceListService.$inject = ["restService"],
angular.module("vManage").service("deviceOptionsService", deviceOptionsService),
deviceOptionsService.$inject = ["restService"],
angular.module("vManage").directive("vipEmptyTemplate", vipEmptyTemplate),
vipEmptyTemplate.$inject = ["$state", "$rootScope", "devicesService", "appUtil"],
angular.module("vManage").controller("errorPopupController", errorPopupController),
errorPopupController.$inject = ["$scope", "$state", "$modalInstance", "errorObject"],
angular.module("vManage").factory("eventListObject", eventListObject),
angular.module("vManage").factory("eventPoll", eventPoll),
eventPoll.$inject = ["$rootScope", "$log", "eventPollService", "appUtil", "$q", "$interval"],
angular.module("vManage").factory("eventPollService", eventPollService),
eventPollService.$inject = ["$http", "$q", "restService", "apiConstants"],
angular.module("vManage").directive("onReadFile", onReadFile),
onReadFile.$inject = ["$parse"],
angular.module("vManage").directive("vipFileUploadButton", vipFileUploadButton),
angular.module("vManage").filter("propsFilter", propsFilter),
angular.module("vManage").filter("removeWhitespaces", removeWhitespaces),
angular.module("vManage").filter("commaSeparatedList", commaSeparatedList);
angular.module("vManage").filter("pluck", pluck);
angular.module("vManage").filter("nospace", nospace),
angular.module("vManage").filter("appendZero", appendZero),
angular.module("vManage").filter("orderObjectBy", function() {
    return function(a, b, c) {
        var d = [];
        return angular.forEach(a, function(a) {
            d.push(a)
        }),
        d.sort(function(a, c) {
            return a[b] > c[b] ? 1 : -1
        }),
        c && d.reverse(),
        d
    }
}),
angular.module("vManage").filter("filterByObjectProperty", [function(a) {
    return function(a, b, c) {
        if (!angular.isDefined(b) || "" == b)
            return a;
        var d = [];
        return angular.forEach(a, function(a) {
            _.has(a, c) && a[c].toLowerCase().indexOf(b.toLowerCase()) != -1 && d.push(a)
        }),
        d
    }
}
]),
angular.module("vManage").filter("filterByArrayObjectProperty", [function(a) {
    return function(a, b, c) {
        if (!angular.isDefined(b) || "" == b)
            return a;
        var d = [];
        return angular.forEach(a, function(a) {
            _.has(a, c) && a[c].indexOf(b) != -1 && d.push(a)
        }),
        d
    }
}
]),
angular.module("vManage").filter("filterByGreaterThan", [function(a) {
    return function(a, b, c) {
        if (!angular.isDefined(b) || !angular.isNumber(b))
            return a;
        var d = [];
        return angular.forEach(a, function(a) {
            _.has(a, c) && parseInt(a[c]) > b && d.push(a)
        }),
        d
    }
}
]),
angular.module("vManage").filter("formatTitle", formatTitle),
angular.module("vManage").filter("initialCap", initialCap),
angular.module("vManage").filter("JSONArrayOfObjToString", JSONArrayOfObjToString),
angular.module("vManage").filter("formatTableString", formatTableString),
formatTableString.$inject = ["appUtil"],
angular.module("vManage").filter("formatTableStringWithDashesAndInitialCapsAllWords", formatTableStringWithDashesAndInitialCapsAllWords),
formatTableStringWithDashesAndInitialCapsAllWords.$inject = ["appUtil"],
angular.module("vManage").filter("formatBytes", formatBytes),
formatBytes.$inject = ["appUtil"],
angular.module("vManage").filter("formatKbpsToMbps", formatKbpsToMbps),
formatKbpsToMbps.$inject = ["appUtil"],
angular.module("vManage").filter("formatEmptyTableString", formatEmptyTableString),
formatEmptyTableString.$inject = ["appUtil"],
angular.module("vManage").filter("arrayToString", arrayToString),
angular.module("vManage").filter("convertIpToHostname", convertIpToHostname),
convertIpToHostname.$inject = ["appUtil", "$window"],
angular.module("vManage").filter("convertTunnelIpToHostname", convertTunnelIpToHostname),
convertTunnelIpToHostname.$inject = ["appUtil", "$window"],
angular.module("vManage").filter("propertyIsDefined", propertyIsDefined),
angular.module("vManage").filter("propertyIsUndefined", propertyIsUndefined),
angular.module("vManage").filter("momentDateFormat", momentDateFormat),
angular.module("vManage").filter("bytes", bytes),
bytes.$inject = ["appUtil"],
angular.module("vManage").filter("chartLegendSort", chartLegendSort),
chartLegendSort.$inject = ["vipValidation"],
angular.module("vManage").filter("filterByMultipleProperties", filterByMultipleProperties),
filterByMultipleProperties.$inject = ["appUtil"],
angular.module("vManage").filter("newLines", newLines),
angular.module("vManage").directive("optionsDisabled", optionsDisabled),
optionsDisabled.$inject = ["$parse"],
angular.module("vManage").controller("GenericController", GenericController),
GenericController.$inject = ["$rootScope", "$scope", "$window"],
angular.module("vManage").factory("helpDetails", helpDetails),
helpDetails.$inject = ["$log", "$rootScope", "rbac", "apiConstants"],
angular.module("vManage").directive("vipMessages", vipMessages),
vipMessages.$inject = ["$compile", "$timeout"],
angular.module("vManage").directive("vipIpValidation", vipIpValidation),
angular.module("vManage").factory("maintenanceWindow", maintenanceWindow),
maintenanceWindow.$inject = ["$q", "$filter", "notification", "adminService"],
angular.module("vManage").directive("modalHeader", modalHeader),
angular.module("vManage").controller("ActivateVSmartPolicyModalInstanceCtrl", ActivateVSmartPolicyModalInstanceCtrl),
ActivateVSmartPolicyModalInstanceCtrl.$inject = ["$scope", "$mdDialog", "selectedRow", "appUtil", "vSmartPolicyService", "notification"],
angular.module("vManage").controller("AddUserGroupModalController", AddUserGroupModalController),
AddUserGroupModalController.$inject = ["$scope", "$mdDialog", "$state", "$log", "appUtil", "notification", "adminService", "userGroup", "uiGridConstants", "$timeout"],
angular.module("vManage").controller("addvManageClusterController", addvManageClusterController),
addvManageClusterController.$inject = ["$scope", "$state", "$mdDialog", "$log", "ClusterManagementService", "selectedRow", "ClusterManagement", "notification", "returnCallBack", "isEdit", "appUtil"],
angular.module("vManage").controller("AttachMasterTemplateModalInstanceCtrl", AttachMasterTemplateModalInstanceCtrl),
AttachMasterTemplateModalInstanceCtrl.$inject = ["$scope", "$mdDialog", "appUtil", "DeviceTemplateHttpService", "notification", "selectedRow", "MultiSelectService", "apiConstants", "Table"],
function() {
    function a(a, b, c, d, e, f, g) {
        a.stateString = c.getStateString(b),
        a.loadingData = !0,
        a.configDiff = {
            viewType: "inline"
        },
        a.diffUsingJS = function(b, c) {
            var d = !!angular.equals(a.configDiff.viewType, "inline")
              , e = difflib.stringAsLines(c)
              , f = difflib.stringAsLines(b)
              , g = new difflib.SequenceMatcher(e,f)
              , h = g.get_opcodes()
              , i = $("#diffoutput");
            angular.forEach(i.children(), function(a) {
                a.remove()
            });
            var j = $("#contextSize").value;
            j = j ? j : null,
            i.append(diffview.buildView({
                baseTextLines: e,
                newTextLines: f,
                opcodes: h,
                baseTextName: "Old Configuration",
                newTextName: "New Configuration",
                contextSize: j,
                viewType: d ? 1 : 0
            }))
        }
        ,
        f.getConfigDiff(g.auditextras.config_id_0, g.auditextras.config_id_1).then(function(b) {
            a.oldConfig = b[1].config_2,
            a.newConfig = b[0].config_1,
            a.loadingData = !1,
            a.diffUsingJS(a.newConfig, a.oldConfig)
        }, function(a) {
            notification.error("error occurred: " + a)
        }),
        a.cancel = function() {
            e.cancel()
        }
        ,
        a.$on("$destroy", function() {})
    }
    angular.module("vManage").controller("auditLogCLIDiffModalInstanceCtrl", a),
    a.$inject = ["$scope", "$state", "appUtil", "$q", "$mdDialog", "AuditLogService", "selectedRow"]
}(),
angular.module("vManage").controller("auditLogDetailsController", auditLogDetailsController),
auditLogDetailsController.$inject = ["$scope", "$rootScope", "$state", "$log", "appUtil", "$mdDialog", "selectedRow"],
angular.module("vManage").controller("changeOrgName", changeOrgName),
changeOrgName.$inject = ["$scope", "$state", "appUtil", "$mdDialog"],
angular.module("vManage").controller("ChangePasswordController", ChangePasswordController),
ChangePasswordController.$inject = ["$scope", "$state", "topNavService", "appUtil", "$mdDialog"],
angular.module("vManage").controller("CopyGeneralTemplateModalInstanceCtrl", CopyGeneralTemplateModalInstanceCtrl),
CopyGeneralTemplateModalInstanceCtrl.$inject = ["$scope", "$mdDialog", "selectedRow", "table", "appUtil", "FeatureTemplateService"],
angular.module("vManage").controller("CopyMasterTemplateModalInstanceCtrl", CopyMasterTemplateModalInstanceCtrl),
CopyMasterTemplateModalInstanceCtrl.$inject = ["$scope", "$mdDialog", "selectedRow", "table", "appUtil", "DeviceTemplateHttpService"],
angular.module("vManage").controller("CreateNewVariableModalInstanceCtrl", CreateNewVariableModalInstanceCtrl),
CreateNewVariableModalInstanceCtrl.$inject = ["$scope", "$mdDialog", "appUtil", "highlightedElement"],
angular.module("vManage").controller("CreateVariableModalInstanceCtrl", CreateVariableModalInstanceCtrl),
CreateVariableModalInstanceCtrl.$inject = ["$scope", "$mdDialog", "appUtil", "highlightedElement"],
angular.module("vManage").controller("DeactivateVSmartPolicyModalInstanceCtrl", DeactivateVSmartPolicyModalInstanceCtrl),
DeactivateVSmartPolicyModalInstanceCtrl.$inject = ["$scope", "$mdDialog", "selectedRow", "appUtil", "vSmartPolicyService", "notification"],
angular.module("vManage").controller("DeleteStaleDevice", DeleteStaleDevice),
DeleteStaleDevice.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "devicesService", "selectedRow"],
angular.module("vManage").controller("DeleteUserGroupModalController", DeleteUserGroupModalController),
DeleteUserGroupModalController.$inject = ["$scope", "$mdDialog", "$state", "$log", "appUtil", "notification", "adminService", "selectedRow"],
angular.module("vManage").controller("DetachMasterTemplateModalInstanceCtrl", DetachMasterTemplateModalInstanceCtrl),
DetachMasterTemplateModalInstanceCtrl.$inject = ["$scope", "$state", "$q", "$mdDialog", "appUtil", "DeviceTemplateHttpService", "MultiSelectService", "devicesService", "selectedRow", "StatusService"],
angular.module("vManage").controller("DetachVEdgePolicyModalInstanceCtrl", DetachVEdgePolicyModalInstanceCtrl),
DetachVEdgePolicyModalInstanceCtrl.$inject = ["$scope", "$q", "$modalInstance", "appUtil", "vEdgePolicyService", "notification", "selectedRow", "table", "MultiSelectService"],
angular.module("vManage").controller("DeviceEventDetailsController", DeviceEventDetailsController),
DeviceEventDetailsController.$inject = ["$scope", "$mdDialog", "selectedRow"],
angular.module("vManage").controller("EditDeviceConfigModalInstanceCtrl", EditDeviceConfigModalInstanceCtrl),
EditDeviceConfigModalInstanceCtrl.$inject = ["$scope", "$mdDialog", "TemplateDeviceInput", "appUtil", "notification", "selectedRow", "table"],
angular.module("vManage").controller("eventDetailsController", eventDetailsController),
eventDetailsController.$inject = ["$scope", "$rootScope", "$state", "$log", "appUtil", "$mdDialog", "selectedRow"],
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        a.countdown = {},
        a.templateAttachState = "app.config.template.device.configure" === h,
        a.templateAttachState ? a.countdown.count = 30 : a.countdown.count = 60,
        a.countdown.initialCount = a.countdown.count,
        a.remaininingTime = 100;
        var j = e(function() {
            a.countdown.count = a.countdown.count - 1,
            a.remaininingTime = 100 * a.countdown.count / a.countdown.initialCount
        }, 1e3, a.countdown.count);
        a.cancel = function() {
            c.cancel()
        }
        ,
        a.$on("$destroy", function() {
            j = d.stopPolling(j)
        })
    }
    angular.module("vManage").controller("IdleWarningModalController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "$interval", "notification", "$timeout", "CurrentStateIdle", "DeviceTemplateHttpService"]
}(),
angular.module("vManage").controller("listDevicesWithNoGeosController", listDevicesWithNoGeosController),
listDevicesWithNoGeosController.$inject = ["$scope", "$mdDialog", "$state", "$log", "Table", "appUtil"],
angular.module("vManage").controller("RediscoverNetworkConfirmationController", RediscoverNetworkConfirmationController),
RediscoverNetworkConfirmationController.$inject = ["$scope", "$mdDialog", "$state", "$log", "appUtil", "notification", "restService", "StatusService", "selectedRow", "maintenanceService"],
angular.module("vManage").controller("removevManageClusterController", removevManageClusterController),
removevManageClusterController.$inject = ["$scope", "$state", "$mdDialog", "$log", "ClusterManagementService", "selectedRow", "returnCallBack", "appUtil", "notification"],
angular.module("vManage").controller("showCommandsFilterMessage", showCommandsFilterMessage),
showCommandsFilterMessage.$inject = ["$scope", "$mdDialog"],
angular.module("vManage").controller("TableCsvUploadModalController", TableCsvUploadModalController),
TableCsvUploadModalController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "DeviceTemplateHttpService", "TemplateDeviceInput", "$modal", "tableObject", "notification"],
angular.module("vManage").controller("ViewAttachedDevicesModalInstanceCtrl", ViewAttachedDevicesModalInstanceCtrl),
ViewAttachedDevicesModalInstanceCtrl.$inject = ["$scope", "$q", "$mdDialog", "appUtil", "DeviceTemplateHttpService", "notification", "selectedRow", "apiConstants", "Table"],
angular.module("vManage").controller("ViewAttachedDeviceTemplatesModalInstanceCtrl", ViewAttachedDeviceTemplatesModalInstanceCtrl),
ViewAttachedDeviceTemplatesModalInstanceCtrl.$inject = ["$scope", "$q", "$mdDialog", "appUtil", "DeviceTemplateHttpService", "notification", "selectedRow", "apiConstants", "Table"],
angular.module("vManage").directive("vipModalError", vipModalError),
angular.module("vManage").service("restService", restService),
restService.$inject = ["$rootScope", "appConfig", "$state", "$http", "$q", "UploadBase", "appUtil", "$log"],
angular.module("vManage").directive("vipNotifications", vipNotifications),
vipNotifications.$inject = ["notification", "$compile", "$document", "appUtil"],
angular.module("vManage").factory("notification", notification),
notification.$inject = ["$mdDialog", "$interval", "appUtil"],
angular.module("vManage").controller("confirmController", confirmController),
confirmController.$inject = ["$scope", "$mdDialog", "errorObject", "showCancelButton"],
angular.module("vManage").directive("vipPopOver", vipPopOver),
angular.module("vManage").directive("vipRadioButton", vipRadioButton),
angular.module("vManage").directive("vipRbac", vipRbac),
vipRbac.$inject = ["rbac", "rbacService", "$compile", "appUtil"],
angular.module("vManage").factory("rbac", rbac),
rbac.$inject = ["$q", "appUtil", "rbacService", "sidebarMenuService", "StatusService", "eventPoll", "$filter", "notification", "$window", "restService", "$state", "restrictedStates", "maintenanceWindow"],
angular.module("vManage").factory("rbacService", rbacService),
rbacService.$inject = ["restService", "apiConstants", "multiTenantConstants", "$q"],
angular.module("vManage").directive("vipDataList", vipDataList),
vipDataList.$inject = ["dataListService"],
angular.module("vManage").service("dataListService", dataListService),
dataListService.$inject = ["restService"],
function() {
    function a(a, b, c) {
        return {
            restrict: "AE",
            template: '<div><svg class="spinner displayBlock" width="65px" height="65px" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg"><circle class="boundary" fill="none" stroke="#B3DEF9" stroke-width="2" stroke-linecap="round" cx="33" cy="33" r="20"></circle><circle class="path" fill="none" stroke-width="2" stroke-linecap="round" cx="33" cy="33" r="20"></circle></svg><p class="spinner-text">Loading...</p></div>',
            link: function(a, d, e) {
                var f, g = 0;
                e.$observe("ngShow", function(e) {
                    a.$watch(function() {
                        return c(e)(a)
                    }, function(a, c) {
                        a !== c && (d.find(".spinner-text").text("Loading..."),
                        b.cancel(f),
                        f = {}),
                        a && (f = b(function() {
                            0 == g ? d.find(".spinner-text").text("Still loading...") : d.find(".spinner-text").text("Please continue waiting..."),
                            g += 1
                        }, 15e3, 2))
                    })
                }),
                a.$on("$destroy", function() {
                    b.cancel(f),
                    f = {}
                })
            }
        }
    }
    angular.module("vManage").directive("vipSpinner", a),
    a.$inject = ["$compile", "$interval", "$parse"]
}(),
angular.module("vManage").factory("Tab", Tab),
Tab.$inject = ["appUtil"],
angular.module("vManage").directive("vipCrudTable", vipCrudTable),
vipCrudTable.$inject = ["$compile", "appUtil", "uiGridConstants", "$timeout"],
angular.module("vManage").directive("expandableStatusRow", expandableStatusRow),
expandableStatusRow.$inject = ["$timeout"],
angular.module("vManage").component("vTableFilter", {
    bindings: {
        filterInstance: "<",
        searchDisabled: "<"
    },
    controller: ["$scope", "appUtil", "$timeout", function(a, b, c) {
        var d = this;
        d.filterDropDown = {
            isopen: !1
        },
        d.$onInit = function() {
            b.checkNestedProperty(d.filterInstance, "options") && d.filterInstance.options.length > 0 || (b.checkNestedProperty(d.filterInstance, "customOptionsCallback") ? d.filterInstance.customOptionsCallback() : d.filterInstance.getOptionsList())
        }
        ,
        d.onSelectionChange = function(a) {
            d.filterInstance.selectedOption = a,
            d.filterInstance.onSelectionChange()
        }
        ,
        d.vsRepeatResize = function() {
            c(function() {
                a.$broadcast("vsRepeatResize")
            })
        }
        ,
        d.$onDestroy = function() {
            d.filterInstance.saveSelectedFilter()
        }
    }
    ],
    templateUrl: "app/common/table/filter/templates/tableFilter.html"
}),
function() {
    function a(a, b, c) {
        function d() {
            var d = this
              , e = a.defer();
            return d.options.reset(),
            d.url && b.get(d.url).then(function(a) {
                _.each(a.data, function(a, b) {
                    d.options.push({
                        id: b,
                        value: a[d.optionsKeys.value],
                        uri: a[d.optionsKeys.uri],
                        key: a[d.optionsKeys.key].toLowerCase().replace(/ /g, "_")
                    })
                }),
                d.sessionKey && c.sessionStorage.getItem(d.sessionKey) && (d.selectedOption = _.find(d.options, function(a) {
                    return angular.equals(a.value, c.sessionStorage.getItem(d.sessionKey)) || angular.equals(a.key, c.sessionStorage.getItem(d.sessionKey))
                })),
                d.selectedOption || (d.selectedOption = d.options[0]),
                d.onSelectionChange(),
                e.resolve()
            }, function(a) {
                e.reject(a)
            }),
            e.promise
        }
        var e = {}
          , f = function(a, b, c, d, f, g, h) {
            this.heading = a,
            this.url = b,
            this.options = c ? c : [],
            this.sessionKey = f ? f : "deviceGroupFilter",
            this.onSelectionChange = g,
            this.selectedOption = h,
            this.optionsKeys = d ? d : {
                value: "name",
                uri: "uri",
                key: "name"
            },
            e = this.selectedOption
        };
        return f.prototype.getOptionsList = function() {
            d.call(this)
        }
        ,
        f.prototype.setOptionsKeys = function(a) {
            this.optionsKeys = {
                value: a.value ? a.value : "name",
                uri: a.uri ? a.uri : "uri",
                key: a.key ? a.key : "name"
            }
        }
        ,
        f.prototype.setOnSelectionChangeFunc = function(a) {
            this.onSelectionChange = a
        }
        ,
        f.prototype.setCustomFilterCallback = function(a) {
            this.customFilterCallback = a
        }
        ,
        f.prototype.setCustomOptionsCallback = function(a) {
            this.customOptionsCallback = a
        }
        ,
        f.prototype.saveSelectedFilter = function() {
            this.selectedOption && c.sessionStorage.setItem(this.sessionKey, this.selectedOption.value)
        }
        ,
        f
    }
    angular.module("vManage").factory("TableFilter", a),
    a.$inject = ["$q", "restService", "$window"]
}(),
function() {
    angular.module("vManage").component("vTableGridMenu", {
        templateUrl: "app/common/table/gridMenu/templates/tableGridMenu.html",
        bindings: {
            uiGridInstance: "<"
        },
        controller: ["$scope", "appUtil", "uiGridGridMenuService", "$timeout", function(a, b, c, d) {
            var e = this;
            e.colDropDown = {
                isopen: !1
            },
            e.menuItems = [],
            e.$onInit = function() {
                c.initialize(a, e.uiGridInstance.grid),
                e.uiGridInstance.grid.options.columnDefs.length > 0 && 0 == e.menuItems.length ? f() : e.uiGridInstance.grid.registerDataChangeCallback(f, ["column"])
            }
            ,
            e.showHideColumn = function(a, b) {
                a.action(b),
                e.toggleColDropDown(b)
            }
            ,
            e.toggleColDropDown = function(a) {
                a.stopPropagation(),
                e.colDropDown.isopen = !0
            }
            ,
            a.$on("tableRestore", function(a, c) {
                var d;
                b.checkNestedProperty(c, "columns") && angular.forEach(e.menuItems, function(a) {
                    d = _.find(c.columns, {
                        name: a.context.gridCol.field
                    }),
                    b.checkNestedProperty(a, "context", "gridCol") && d && (a.checked = _.find(c.columns, {
                        name: a.context.gridCol.field
                    }).visible)
                })
            });
            var f = function() {
                e.uiGridInstance.grid.options.columnDefs.length > 0 && 0 == e.menuItems.length && (e.menuItems = _.filter(c.showHideColumns(a), {
                    icon: "ui-grid-icon-ok"
                }),
                angular.forEach(e.menuItems, function(a) {
                    b.checkNestedProperty(a, "context", "gridCol") && (a.checked = a.context.gridCol.visible)
                }),
                d(function() {
                    a.$broadcast("vsRepeatTrigger")
                }))
            }
        }
        ]
    })
}(),
function() {
    angular.module("vManage").component("vTableLocalActions", {
        bindings: {
            uiGridInstance: "<",
            actions: "<",
            actionHelperText: "<"
        },
        controller: ["$scope", function(a) {
            function b() {
                0 == c.uiGridInstance.selection.getSelectedRows() ? c.disableActions(!0) : c.disableActions(!1)
            }
            var c = this;
            c.disableActions = function(a) {
                angular.forEach(c.actions, function(b) {
                    b.disable = a
                })
            }
            ,
            c.$onInit = function() {
                angular.forEach(c.actions, function(a) {
                    a.initState && angular.isFunction(a.initState) ? a.initState() : _.isBoolean(a.initState) ? a.disable = a.initState : a.disable = !0
                }),
                c.uiGridInstance.selection.on.rowSelectionChanged(a, function(a) {
                    b()
                }),
                c.uiGridInstance.selection.on.rowSelectionChangedBatch(a, function(a) {
                    b()
                })
            }
        }
        ],
        templateUrl: "app/common/table/localActions/templates/tableLocalActions.html"
    })
}(),
function() {
    angular.module("vManage").component("vTableViewActions", {
        bindings: {
            uiGridInstance: "<",
            actions: "<",
            actionHelperText: "<"
        },
        controller: ["$scope", function(a) {
            var b = this;
            b.$onInit = function() {
                angular.forEach(b.actions, function(a) {
                    a.openAction = {
                        isOpen: !1,
                        open: function() {
                            this.isOpen = !this.isOpen
                        }
                    }
                })
            }
        }
        ],
        templateUrl: "app/common/table/localActions/templates/tableViewActions.html"
    })
}(),
function() {
    function a(a, b, c, d, e) {
        return {
            restrict: "AE",
            scope: {
                tableObject: "=",
                tableDataUrl: "@"
            },
            templateUrl: "app/common/table/tableTemplate.html",
            link: function(a, b, c) {
                a.stateString = a.$parent.stateString,
                a.tableObject.element.ngElem = b,
                a.tableObject.attributes = c;
                var f = [];
                if (a.searchProperties = [],
                a.searchRowCountText = {
                    value: a.tableObject.data.length
                },
                a.tableSpinner = {
                    isSet: !1
                },
                a.tableObject.taggedSearchObject.setSpinnerVisibleFn(a.tableSpinner),
                a.tableObject.taggedSearchObject.setSearchRowCountText(a.searchRowCountText),
                c.tableDataUrl && a.tableObject.setDataUrl(c.tableDataUrl),
                a.gridOptions = {
                    columnDefs: a.tableObject.columnDefs,
                    data: a.tableObject.data,
                    enableColumnMenus: a.tableObject.options.enableColumnMenus,
                    enableSorting: a.tableObject.options.enableSorting,
                    enableColumnResizing: a.tableObject.options.columnResizing,
                    enableColumnMoving: a.tableObject.options.columnMoving,
                    enableSelectAll: a.tableObject.options.showSelectAllOption,
                    enableExpandAll: a.tableObject.options.enableExpandAll,
                    enableRowHeaderSelection: a.tableObject.options.multiSelect || a.tableObject.options.singleSelectWithRadio,
                    multiSelect: a.tableObject.options.multiSelect,
                    enableRowSelection: a.tableObject.options.singleSelect || a.tableObject.options.singleSelectWithRadio || a.tableObject.options.enableRowSelection,
                    enableFullRowSelection: a.tableObject.options.singleSelect || a.tableObject.options.singleSelectWithRadio || a.tableObject.options.enableRowSelection,
                    singleSelect: a.tableObject.options.singleSelect || a.tableObject.options.singleSelectWithRadio,
                    rowTemplate: a.tableObject.options.rowTemplate,
                    noUnselect: a.tableObject.options.noUnselect,
                    rowHeight: a.tableObject.options.rowHeight,
                    headerRowHeight: a.tableObject.options.headerRowHeight,
                    enableExpandable: a.tableObject.options.enableExpandable,
                    enableExpandableRowHeader: !!a.tableObject.expandableRowOptions.enableExpandableRowHeader,
                    enableGridMenu: !1,
                    exporterMenuCsv: !1,
                    exporterMenuPdf: !1,
                    appScopeProvider: a.tableObject.appScope,
                    enableCellEditOnFocus: !0,
                    enableCellEdit: !1,
                    enableTreeView: !1,
                    showTreeRowHeader: !1,
                    enableTreeChildrenSelection: a.tableObject.options.enableTreeChildrenSelection,
                    saveSelection: !1,
                    vipTable: a.tableObject,
                    onRegisterApi: function(b) {
                        a.tableObject.uiGridApi = b,
                        a.tableObject.taggedSearchObject.setGridApi(b),
                        a.tableObject.options.registerAPICallbackFn && a.tableObject.options.registerAPICallbackFn.call(b),
                        b.core.on.rowsRendered(a, function(b) {
                            return !(a.tableObject.columnDefs.length < 1 && a.tableObject.data.length < 1) && void (a.tableObject.visibleScrollbarSet || a.tableObject.initializeTableScrollbar())
                        }),
                        b.selection.on.rowSelectionChanged(a, function(b) {
                            angular.isDefined(a.tableObject.onRowSelectionCallback) && a.tableObject.onRowSelectionCallback(b);
                            var c = a.tableObject.options.dataUid
                              , d = -1;
                            _.each(f, function(a, e) {
                                if (a[c] === b.entity[c])
                                    return void (d = e)
                            }),
                            d < 0 && b.isSelected ? f.push(b.entity) : d >= 0 && !b.isSelected && f.splice(d, 1),
                            a.selectedRowsCount = f.length,
                            a.tableObject.taggedSearchObject.updateSearchCacheObject(f, a.tableObject.options.dataUid)
                        }),
                        b.colResizable.on.columnSizeChanged(a, function(b, c) {
                            var d = this
                              , e = 0;
                            if (angular.forEach(d.grid.columns, function(a) {
                                e += a.drawnWidth
                            }),
                            e < d.grid.canvasWidth) {
                                var f = _.find(d.grid.columns, {
                                    name: b.name
                                });
                                f && (f.width += d.grid.canvasWidth - e)
                            }
                            a.tableObject.destroyContainerScrollbar(),
                            a.tableObject.element.bodyContainer = void 0,
                            a.tableObject.updateContainerScrollbar(!0)
                        }),
                        b.expandable.on.rowExpandedStateChanged(a, function(b) {
                            a.tableObject.updateContainerScrollbar(!0)
                        }),
                        angular.isDefined(b.treeBase) && b.treeBase.on.rowExpanded(a, function(b) {
                            angular.isDefined(a.tableObject.onTreeExpansion) && a.tableObject.onTreeExpansion(b)
                        })
                    }
                },
                a.tableObject.options.multiSelect && angular.isFunction(a.tableObject.options.isRowSelectable) && (a.gridOptions.isRowSelectable = a.tableObject.options.isRowSelectable),
                a.tableObject.options.enableExpandable && (a.gridOptions.enableExpandableRowHeader = a.tableObject.expandableRowOptions.enableExpandableRowHeader,
                a.gridOptions.expandableRowTemplate = a.tableObject.expandableRowOptions.expandableRowTemplate,
                a.gridOptions.expandableRowHeight = a.tableObject.expandableRowOptions.expandableRowHeight || 150,
                a.gridOptions.reduceExpandableWidth = a.tableObject.expandableRowOptions.reduceExpandableWidth,
                a.gridOptions.expandableRowScope = a.tableObject.expandableRowOptions.expandableRowScope),
                a.tableObject.treeSettings && (a.gridOptions.treeRowHeaderAlwaysVisible = !1,
                a.gridOptions.showTreeRowHeader = !0,
                a.gridOptions.enableTreeView = !0,
                a.gridOptions.multiSelect = !0,
                a.gridOptions.enableFullRowSelection = !1,
                a.searchRowCountText.value = _.filter(a.tableObject.data, function(a) {
                    return angular.isUndefined(a.$$treeLevel)
                }).length),
                (a.tableObject.options.csvExport || a.tableObject.toolbar.csvExport) && (a.gridOptions.exporterMenuCsv = a.tableObject.csvOptions.exporterMenuCsv,
                a.gridOptions.exporterMenuPdf = a.tableObject.csvOptions.exporterMenuPdf,
                a.gridOptions.exporterCsvFilename = a.tableObject.csvOptions.exporterCsvFilename,
                a.gridOptions.exporterCsvColumnSeparator = a.tableObject.csvOptions.exporterCsvColumnSeparator,
                a.gridOptions.exporterHeaderFilterUseName = a.tableObject.csvOptions.exporterHeaderFilterUseName,
                a.gridOptions.exporterHeaderFilter = a.tableObject.csvOptions.exporterHeaderFilter,
                a.gridOptions.exporterFieldCallback = a.tableObject.csvOptions.exporterFieldCallback,
                a.gridOptions.exporterSuppressColumns = a.tableObject.csvOptions.exporterSuppressColumns),
                a.tableObject.options.tableHeightOffset) {
                    a.heightOffset = a.tableObject.options.tableHeightOffset,
                    a.divisibleBy = a.gridOptions.rowHeight;
                    var g = a.$watchCollection("tableObject.options", function(b, c) {
                        b.tableHeightOffset !== c.tableHeightOffset && (a.heightOffset = b.tableHeightOffset)
                    })
                } else
                    a.gridOptions.minRowsToShow = a.tableObject.options.minRowsToShow;
                _.isEmpty(a.tableObject.data) && !a.tableObject.options.autoLoad && d(function() {
                    a.tableObject.loadDataFromUrl()
                }, 0);
                var h = a.$watchCollection("tableObject.data", function(b, c) {
                    return !!a.tableObject && (a.tableObject.visibleScrollbarSet && a.tableObject.updateContainerScrollbar(),
                    void (b !== c && (a.searchRowCountText.value = b.length,
                    _.isEmpty(a.tableObject.taggedSearchObject.getSearchCache()) || a.gridOptions.enableTreeView || !a.tableObject.taggedSearchObject.getSearchTagsCache().length ? a.gridOptions.enableTreeView && (a.searchRowCountText.value = _.filter(a.tableObject.data, function(a) {
                        return angular.isUndefined(a.$$treeLevel)
                    }).length) : d(function() {
                        a.searchRowCountText.value = a.tableObject.uiGridApi.grid.getVisibleRowCount() + " of " + a.tableObject.uiGridApi.grid.rows.length
                    }))))
                });
                a.export = function() {
                    a.tableObject.uiGridApi.exporter.csvExport("visible", "visible")
                }
                ,
                a.csv = {
                    content: null,
                    result: null
                };
                var i = a.$watchCollection("csv.result", function(b) {
                    if (b) {
                        var c = JSON.parse(b);
                        c = _.initial(c, c.length - a.tableObject.data.length),
                        a.tableObject.refreshTableData(c),
                        a.tableObject.options.postImportDataCallbackFn && a.tableObject.options.postImportDataCallbackFn()
                    }
                });
                a.openModal = function(b, c, d) {
                    e.show({
                        templateUrl: b,
                        controller: c,
                        targetEvent: d,
                        resolve: {
                            tableObject: function() {
                                return a.tableObject
                            }
                        }
                    }).then(function() {
                        a.tableObject.uiGridApi.grid.refresh()
                    })
                }
                ,
                a.$on("$destroy", function() {
                    a.tableObject && a.tableObject.savingState(),
                    h(),
                    i(),
                    g && g(),
                    a.tableObject = null
                })
            }
        }
    }
    angular.module("vManage").directive("vipTable", a),
    a.$inject = ["appUtil", "notification", "TableTaggedSearchService", "$timeout", "$mdDialog"]
}(),
angular.module("vManage").directive("vipTableDropdownPopover", vipTableDropdownPopover),
vipTableDropdownPopover.$inject = ["$rootScope", "$compile", "appUtil", "$timeout"],
angular.module("vManage").factory("Table", Table),
Table.$inject = ["$rootScope", "$filter", "$log", "$timeout", "restService", "notification", "appUtil", "apiConstants", "$templateCache", "eventPoll", "eventListObject", "rowSorter", "uiGridConstants", "$mdDialog", "DeviceListCache", "TableFilter", "TableTaggedSearchService"],
angular.module("vManage").directive("vipUiGridHoverRow", vipUiGridHoverRow),
vipUiGridHoverRow.$inject = ["$timeout"],
angular.module("vManage").directive("uiGridHoverActionRowButtons", uiGridHoverActionRowButtons),
uiGridHoverActionRowButtons.$inject = ["$templateCache", "$compile", "$document", "$mdDialog", "$timeout"],
angular.module("vManage").factory("TreeBasedTable", TreeBasedTable),
TreeBasedTable.$inject = ["Table", "restService", "notification", "appUtil", "DeviceListCache"],
angular.module("vManage").directive("vipTextArea", vipTextArea),
angular.module("vManage").directive("vipUrlValidation", vipUrlValidation),
angular.module("vManage").factory("appUtil", appUtil),
appUtil.$inject = ["$log", "$filter", "$interval", "vipValidation"],
angular.module("vManage").filter("isArray", isArray),
isArray.$inject = [],
angular.module("vManage").filter("removeSpaces", function() {
    return function(a) {
        if (a)
            return a.replace(/\s+/g, "_")
    }
}),
angular.module("vManage").directive("uiSelectRequired", uiSelectRequired),
uiSelectRequired.$inject = [],
angular.module("vManage").factory("$debounce", $debounce),
$debounce.$inject = ["$rootScope", "$browser", "$q", "$exceptionHandler"],
angular.module("vManage").directive("vipAppendStringValidation", vipAppendStringValidation),
vipAppendStringValidation.$inject = ["vipValidation", "appUtil"],
angular.module("vManage").directive("domainValidation", domainValidation),
angular.module("vManage").directive("endsWithValidation", endsWithValidation),
angular.module("vManage").directive("enumListRequiredValidation", enumListRequiredValidation),
enumListRequiredValidation.$inject = ["appUtil"],
angular.module("vManage").directive("vipHexaDecimalValidation", vipHexaDecimalValidation),
vipHexaDecimalValidation.$inject = ["vipValidation"],
angular.module("vManage").directive("vipIpListValidation", vipIpListValidation),
vipIpListValidation.$inject = ["vipValidation", "appUtil"],
angular.module("vManage").directive("vipIpv4ListValidation", vipIpv4ListValidation),
vipIpv4ListValidation.$inject = ["vipValidation", "appUtil"],
angular.module("vManage").directive("vipIpV4OptionalValidation", vipIpV4OptionalValidation),
vipIpV4OptionalValidation.$inject = ["vipValidation"],
angular.module("vManage").directive("vipIpV4PrefixListValidation", vipIpV4PrefixListValidation),
vipIpV4PrefixListValidation.$inject = ["vipValidation", "appUtil"],
angular.module("vManage").directive("vipIpV4PrefixValidation", vipIpV4PrefixValidation),
vipIpV4PrefixValidation.$inject = ["vipValidation"],
angular.module("vManage").directive("vipIpv4RangeListValidation", vipIpv4RangeListValidation),
vipIpv4RangeListValidation.$inject = ["vipValidation", "appUtil"],
angular.module("vManage").directive("vipIpV4V6Validation", vipIpV4V6Validation),
vipIpV4V6Validation.$inject = ["vipValidation"],
angular.module("vManage").directive("vipIpV4Validation", vipIpV4Validation),
vipIpV4Validation.$inject = ["vipValidation"],
angular.module("vManage").directive("vipIpv6ListValidation", vipIpv6ListValidation),
vipIpv6ListValidation.$inject = ["vipValidation", "appUtil"],
angular.module("vManage").directive("vipIpV6PrefixValidation", vipIpV6PrefixValidation),
vipIpV6PrefixValidation.$inject = ["vipValidation"],
angular.module("vManage").directive("vipIpV6Validation", vipIpV6Validation),
vipIpV6Validation.$inject = ["vipValidation"],
angular.module("vManage").directive("vipKeyValidation", vipKeyValidation),
vipKeyValidation.$inject = ["vipValidation"],
angular.module("vManage").directive("vipMacListValidation", vipMacListValidation),
vipMacListValidation.$inject = ["vipValidation", "appUtil"],
angular.module("vManage").directive("vipMacValidation", vipMacValidation),
vipMacValidation.$inject = ["vipValidation"],
angular.module("vManage").directive("vipNumberListRangeValidation", vipNumberListRangeValidation),
vipNumberListRangeValidation.$inject = ["vipValidation", "appUtil"],
angular.module("vManage").directive("vipNumberListValidation", vipNumberListValidation),
vipNumberListValidation.$inject = ["appUtil"],
angular.module("vManage").directive("vipNumberRangeValidation", vipNumberRangeValidation),
vipNumberRangeValidation.$inject = ["vipValidation", "appUtil"],
angular.module("vManage").directive("vipNumberValidation", vipNumberValidation),
vipNumberValidation.$inject = ["appUtil"],
angular.module("vManage").directive("vipPasswordValidation", vipPasswordValidation);
vipPasswordValidation.$inject = ["vipValidation"];
angular.module("vManage").directive("policyNameValidation", policyNameValidation),
policyNameValidation.$inject = ["vipValidation"],
angular.module("vManage").directive("vipRestrictedPasswordValidation", vipRestrictedPasswordValidation),
vipRestrictedPasswordValidation.$inject = ["vipValidation"],
angular.module("vManage").directive("vipSelectValidation", vipSelectValidation),
vipSelectValidation.$inject = ["$timeout"],
angular.module("vManage").directive("vipStepValidation", vipStepValidation),
vipStepValidation.$inject = [],
angular.module("vManage").directive("templateNameValidation", templateNameValidation),
templateNameValidation.$inject = ["vipValidation"],
angular.module("vManage").directive("vipOidValidation", vipOidValidation),
vipOidValidation.$inject = ["vipValidation"],
angular.module("vManage").directive("vipTrustedListValidation", vipTrustedListValidation),
vipTrustedListValidation.$inject = ["appUtil"],
angular.module("vManage").factory("vipValidation", vipValidation),
vipValidation.$inject = ["deviceTypeConstants", "$log"],
angular.module("vManage").directive("vipVersionValidation", vipVersionValidation),
vipVersionValidation.$inject = ["vipValidation"],
angular.module("vManage").directive("viewHeader", viewHeader),
viewHeader.$inject = ["$state", "rbac"],
angular.module("vManage").directive("viewTab", viewTab),
viewTab.$inject = ["$state", "rbac"],
angular.module("vManage").controller("ArchiveController", ArchiveController),
ArchiveController.$inject = ["$scope", "$state", "$modal", "$log", "appUtil", "certificateService", "$interval", "Table", "deviceOptionsService", "$compile", "deviceListService", "$stateParams"],
angular.module("vManage").controller("ArchiveDetailsController", ArchiveDetailsController),
ArchiveDetailsController.$inject = ["$scope", "$state", "$modal", "$log", "appUtil", "certificateService", "$interval", "Table", "configArchiveService", "$compile", "$stateParams", "deviceListService"],
angular.module("vManage").service("configArchiveService", configArchiveService),
configArchiveService.$inject = ["restService"],
angular.module("vManage").controller("certificateManagementController", certificateManagementController),
certificateManagementController.$inject = ["$scope", "$state", "$mdDialog", "$log", "appUtil", "certificateService", "$interval", "Table", "adminService", "notification", "sharedCertificateProperties", "certificateSigningService", "rbac", "eventPoll", "eventListObject", "StatusService"],
angular.module("vManage").service("sharedCertificateProperties", sharedCertificateProperties),
angular.module("vManage").service("certificateService", certificateService),
certificateService.$inject = ["restService", "apiConstants"],
angular.module("vManage").controller("certificatevEdgeListController", certificatevEdgeListController),
certificatevEdgeListController.$inject = ["$scope", "$state", "$log", "appUtil", "certificateService", "Table", "$interval", "notification", "sharedvEdgeProperties", "rbac", "StatusService", "$mdDialog", "adminService", "eventPoll", "eventListObject"],
angular.module("vManage").service("sharedvEdgeProperties", sharedvEdgeProperties),
angular.module("vManage").controller("certificateInstallModalController", certificateInstallModalController),
certificateInstallModalController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "certificateService", "selectedRow", "tableObject", "StatusService"],
angular.module("vManage").controller("generateCSRModalController", generateCSRModalController),
generateCSRModalController.$inject = ["$scope", "$state", "appUtil", "certificateService", "selectedRow", "table", "sharedCertificateProperties", "$mdDialog", "notification"],
angular.module("vManage").controller("regenRSAController", regenRSAController),
regenRSAController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "certificateService", "selectedRow", "tableObject", "notification"],
angular.module("vManage").controller("viewCertificateModalController", viewCertificateModalController),
viewCertificateModalController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "certificateService", "selectedRow"],
angular.module("vManage").controller("viewCloudCSRModalController", viewCloudCSRModalController),
viewCloudCSRModalController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "certificateService", "selectedRow"],
angular.module("vManage").controller("viewCSRModalController", viewCSRModalController),
viewCSRModalController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "certificateService", "selectedRow"],
function() {
    function a(a, b, c, d, e, f) {
        var g, h = [], i = [];
        a.siteDetailsList = [],
        a.serverCall = !1,
        a.showErrorSection = !1,
        a.setActive = function(b) {
            a.serverCall = !0,
            angular.forEach(b.vedgeList, function(b) {
                b.interfaceList.length ? a.serverCall = !1 : c.getInterfaceData(b["system-ip"]).then(function(c) {
                    a.serverCall = !1,
                    b.interfaceList = _.uniq(_.chain(c.data).filter(function(a) {
                        return "ge" === a.ifname.toLowerCase().substring(0, 2) || "10g" === a.ifname.toLowerCase().substring(0, 3) || "gre" === a.ifname.toLowerCase().substring(0, 3)
                    }).map(function(a) {
                        return _.pick(a, "ifname")
                    }).value(), "ifname")
                }, function(b) {
                    a.serverCall = !1,
                    a.showErrorSection = !0,
                    a.message = b
                })
            })
        }
        ;
        var j = function(a, b) {
            h.push(a),
            _.indexOf(i, parseInt(b["site-id"], 10)) === -1 && i.push(parseInt(b["site-id"], 10))
        };
        a.diffCheck = function(b) {
            var c, e, f = [], k = 0;
            a.originalData.length && (g || (g = d.convertArrayToHashSet(a.originalData, "site-id")),
            angular.isDefined(g[b["site-id"]]) && (f = angular.copy(g[b["site-id"]].vedgeList))),
            angular.forEach(b.vedgeList, function(a, g) {
                var l = {
                    deviceIP: a["system-ip"],
                    cloudxInterfaceList: _.pluck(a.selected, "ifname").join()
                };
                f.length && (c = _.find(f, function(b) {
                    return b["system-ip"] === a["system-ip"]
                })),
                h.length && (e = _.find(h, function(b) {
                    return a["system-ip"] === b.deviceIP
                })),
                angular.isDefined(c) ? d.listDiffChecker(c.cloudxInterfaceList, l.cloudxInterfaceList) ? angular.isDefined(e) ? e.cloudxInterfaceList = angular.copy(l.cloudxInterfaceList) : (h.push(l),
                _.indexOf(i, parseInt(b["site-id"], 10)) === -1 && i.push(parseInt(b["site-id"], 10))) : (k++,
                angular.isDefined(e) && (h = _.filter(h, function(a) {
                    return e.deviceIP !== a.deviceIP
                })),
                k === b.vedgeList.length && i.splice(i.indexOf(parseInt(b["site-id"], 10)), 1)) : angular.isDefined(e) ? e.cloudxInterfaceList = angular.copy(l.cloudxInterfaceList) : j(l, b)
            })
        }
        ,
        a.saveChanges = function() {
            if (a.serverCall = !0,
            a.editSelectedSites.length ? a.diffCheck(_.find(a.siteDetailsList, function(a) {
                if (angular.isDefined(a.active))
                    return a.active
            })) : angular.forEach(a.siteDetailsList, function(a) {
                angular.forEach(a.vedgeList, function(b) {
                    var c = {
                        deviceIP: b["system-ip"],
                        cloudxInterfaceList: _.pluck(b.selected, "ifname").join()
                    };
                    j(c, a)
                })
            }),
            h.length) {
                var d = {};
                d.siteList = angular.copy(h);
                var g = {
                    isEdited: !!a.editSelectedSites.length,
                    siteList: [],
                    siteType: a.viewType
                };
                g.siteList = angular.copy(i),
                c.addInterfaces(d).then(function(d) {
                    if (a.editSelectedSites.length)
                        var f = c.editAttachedGateways(g);
                    else
                        var f = c.attachGateways(g);
                    f.then(function(c) {
                        a.serverCall = !1,
                        a.cancel(),
                        c.push_feature_template_configuration > c.push_file_template_configuration ? b.go("app.device.status", {
                            activity: e.getStatusAction("PUSH_FEATURE_TEMPLATE_CONFIG").endpoint,
                            pid: c ? c.id : ""
                        }) : b.go("app.device.status", {
                            activity: e.getStatusAction("PUSH_FILE_TEMPLATE_CONFIG").endpoint,
                            pid: c ? c.id : ""
                        })
                    }, function(b) {
                        a.serverCall = !1,
                        a.showErrorSection = !0,
                        a.message = b
                    })
                }, function(b) {
                    a.serverCall = !1,
                    a.showErrorSection = !0,
                    a.message = b
                })
            } else
                a.cancel(),
                f.info("No changes are made to the interface list of any device", 5e3)
        }
        ;
        var k = function(a) {
            var b = [];
            return angular.forEach(a.replace(/\s+/g, "").split(","), function(a) {
                b.push({
                    ifname: a
                })
            }),
            b
        };
        a.editSelectedSites.length ? angular.forEach(a.editSelectedSites, function(b) {
            var c = {
                "site-id": b["site-id"],
                vedgeList: []
            };
            angular.forEach(b.vedgeList, function(a) {
                var b = {
                    "system-ip": a["system-ip"],
                    interfaceList: [],
                    selected: a.cloudxInterfaceList ? k(a.cloudxInterfaceList) : []
                };
                c.vedgeList.push(b)
            }),
            a.siteDetailsList.push(c)
        }) : a.sites.selected.length && angular.forEach(a.sites.selected, function(b) {
            var c = {
                "site-id": b["site-id"],
                vedgeList: []
            };
            angular.forEach(b["system-ip"].replace(/\s+/g, "").split(","), function(a) {
                var b = {
                    "system-ip": a,
                    interfaceList: []
                };
                c.vedgeList.push(b)
            }),
            a.siteDetailsList.push(c)
        })
    }
    angular.module("vManage").controller("AddInterfacesController", a),
    a.$inject = ["$scope", "$state", "CloudExpressService", "appUtil", "StatusService", "notification"]
}(),
function() {
    function a(a, b, c) {
        var d = _.find(a.applicationList, function(a) {
            return a.appType === b.params.applicationType
        });
        a.breadCrumb.states = [{
            name: "cloudExpress",
            title: "CloudExpress",
            state: "app.config.cloudExpress.dashboard"
        }, {
            name: "manageCloudExpress",
            title: "Manage CloudExpress",
            state: "app.config.cloudExpress.manageCloudExpress"
        }, {
            name: d.appType,
            title: d.longName
        }],
        a.$on("$destroy", function() {
            a.breadCrumb.states = []
        })
    }
    angular.module("vManage").controller("ApplicationOverviewController", a),
    a.$inject = ["$scope", "$state", "CloudExpressService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        function k() {
            a.searchDataByStatus(a.statusCheckBoxObj),
            a.table.serverCallInProgress = !1
        }
        var l;
        a.appType = b.params.applicationType,
        a.longName = angular.isDefined(b.params.applicationName) && "" !== b.params.applicationName && null != b.params.applicationName ? b.params.applicationName : b.params.applicationType,
        a.breadCrumb.states = [{
            name: "cloudExpress",
            title: "CloudExpress",
            state: "app.config.cloudExpress.dashboard"
        }, {
            name: a.longName,
            title: a.longName
        }],
        a.vpnListArray = [],
        a.statusCheckBoxObj = {
            bad: !0,
            good: !0,
            average: !0
        };
        var m = {
            showOtherGatewayDetails: function(b) {
                b.entity.optionalGateWays.length > 0 && (a.modalInstance = d.show({
                    templateUrl: "app/configuration/cloudExpress/modal/otherGatewayDetails.html",
                    controller: "CloudExpressOtherGatewayDetailsController",
                    resolve: {
                        optionalGateWayDetails: function() {
                            return {
                                optionalGateWays: b.entity.optionalGateWays,
                                longName: a.longName,
                                "host-name": b.entity["host-name"]
                            }
                        }
                    }
                }))
            },
            showChangeHistoryChart: function(b, c) {
                a.modalInstance = d.show({
                    templateUrl: "app/configuration/cloudExpress/modal/scoreHistoryChart.html",
                    controller: "CloudExpressScoreHistoryController",
                    targetEvent: c,
                    resolve: {
                        scoreHistoryDetails: function() {
                            return {
                                longName: a.longName,
                                "host-name": b.entity["host-name"],
                                application: a.appType
                            }
                        }
                    }
                })
            }
        };
        a.searchDataByStatus = function(b) {
            var c = [];
            a.table.taggedSearchObject.clearSearchCache();
            for (var d in b)
                b.hasOwnProperty(d) && b[d] && c.push(d + "Sites");
            var e = _.findByValues(a.masterCopyOfTableData, "vqe-status", c);
            a.table.setTableData(e)
        }
        ;
        var n = new c({
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !1,
            enableSorting: !0,
            tableHeightOffset: 141,
            tableName: "cloud-express-application-details"
        });
        n.setAppScope(m),
        n.setDataSourceFilter("VPN List", void 0, a.vpnListArray, void 0, "vpnListChangeHandler"),
        n.dataSourceFilter.setOnSelectionChangeFunc(function() {
            var b = this;
            a.preferredVPN = b.selectedOption,
            a.vpnListChangeHandler(b.selectedOption)
        }),
        n.setOnRefreshCallback(function(b) {
            a.masterCopyOfTableData = b,
            k()
        }),
        a.table = n;
        var o = function(b) {
            angular.isObject(b) && g.checkNestedProperty(b, "error", "details") || (h.info("API error response needs to be updated to conform to company guidelines"),
            b = {
                error: {
                    message: "",
                    details: "Error occurred while retrieving table data"
                }
            }),
            a.showErrorSection = !0,
            a.errorMessage = b
        }
          , p = function(b) {
            angular.isObject(b) && g.checkNestedProperty(b, "error", "details") || (h.info("API error response needs to be updated to conform to company guidelines"),
            b = {
                error: {
                    message: "",
                    details: "Error occurred while retrieving VPN data"
                }
            }),
            a.showVPNErrorSection = !0,
            a.errorMessage = b
        }
          , q = function(b) {
            f.updateTableColumns(b.header.columns),
            l = f.getApplicationDetailsURL(),
            a.table.setDataUrl(l),
            a.table.createColumns(b.header.columns),
            a.table.setTableData(b.data),
            a.masterCopyOfTableData = b.data
        }
          , r = function(b) {
            if (b.vedge.length > 0) {
                var c = "VPN";
                g.appendStringToDataObject(b.vedge, c, a.vpnListArray),
                _.each(a.vpnListArray, function(a, b) {
                    a.id = b,
                    a.uri = void 0
                }),
                a.preferredVPN = a.vpnListArray[0],
                n.dataSourceFilter.selectedOption = a.preferredVPN,
                angular.isDefined(a.preferredVPN) && (f.setApplicationDetailsURL(a.appType, a.preferredVPN.key),
                f.getApplicationDetailsData().then(q, o))
            }
        };
        e.getVPNListData().then(r, p),
        a.$on("$destroy", function() {
            a.table.resetCustomColumns(),
            a.breadCrumb.states = []
        }),
        a.vpnListChangeHandler = function(b) {
            angular.isDefined(b) && (f.setApplicationDetailsURL(a.appType, b.key),
            f.getApplicationDetailsData().then(q, o))
        }
    }
    angular.module("vManage").controller("CloudExpressApplicationDetailsController", a),
    a.$inject = ["$scope", "$state", "Table", "$mdDialog", "CloudExpressService", "CloudExpressApplicationDetailsService", "appUtil", "$log", "TaggedSearchService", "restService"]
}(),
function() {
    function a(a, b, c, d, e) {
        a.stateString = c.getStateString(b),
        a.breadCrumb = {},
        a.cloudExpressEnabled = d.getCloudExpressStatus(),
        a.manageCloudExpressOptions = ["Applications", "Sites", "Gateways", "DIA"],
        a.manageCloudExpressHandler = function() {
            b.go("app.config.cloudExpress.manage.application")
        }
        ,
        a.manageGatewaysHandler = function() {
            b.go("app.config.cloudExpress.manageGateways")
        }
        ,
        a.manageApplicationVPNHandler = function() {
            b.go("app.config.cloudExpress.manageApplicationsVPN")
        }
        ,
        a.navigateToView = function(a) {
            angular.isDefined(a.state) && (angular.isDefined(a.params) ? b.go(a.state, a.params) : b.go(a.state, b.params))
        }
        ,
        a.openSetupGuide = function() {
            e.openSetupGuideModal()
        }
        ,
        a.$on("$destroy", function() {
            a.breadCrumb.states = []
        })
    }
    angular.module("vManage").controller("CloudExpressController", a),
    a.$inject = ["$scope", "$state", "appUtil", "rbac", "CloudExpressService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        var j, k, l, m, n = h.returnEventsEnum(), o = h.returnViewsEnum(), p = new i(o.CLOUD_X_DASHBOARD,[n.CLOUDX]), q = [];
        a.applicationsList = [],
        a.loadingData = !0,
        a.applicationClickHandler = function(a, c) {
            b.go("app.config.cloudExpress.applicationDetails", {
                applicationType: a,
                applicationName: c
            })
        }
        ,
        a.taggedSearchObject = new f(a.applicationsList,q),
        a.$watchCollection("searchTags", function(b, c) {
            angular.equals(b, c) || angular.copy(a.taggedSearchObject.searchData(a.searchTags), a.applicationsList)
        }),
        a.goToSettings = function() {
            b.go("app.admin.settings")
        }
        ,
        m = function(b) {
            angular.isObject(b) && d.checkNestedProperty(b, "error", "details") ? (a.showErrorSection = !0,
            a.errorMessage = b) : (e.info("API error response needs to be updated to conform to company guidelines"),
            a.errorMessage = "Error occurred while retrieving data"),
            a.loadingData = !1,
            k("subscribe")
        }
        ,
        l = function(b, d) {
            if (b.data.length > 0) {
                if (a.applicationsList = b.data,
                _.each(a.applicationsList, function(a) {
                    a.totalVedges = a.averageSites + a.badSites + a.goodSites
                }),
                a.taggedSearchObject.searchProperties.length < 1) {
                    var e = Object.keys(a.applicationsList[0]);
                    _.each(e, function(a) {
                        var b;
                        if ("appType" !== a && "totalSites" !== a) {
                            "longName" === a && (b = "Application Type"),
                            "averageSites" === a && (b = "Average Sites"),
                            "goodSites" === a && (b = "Good Sites"),
                            "badSites" === a && (b = "Bad Sites");
                            var c = {
                                displayName: angular.isDefined(b) ? b : a,
                                name: a
                            };
                            q.push(c)
                        }
                    }),
                    a.taggedSearchObject.setSearchProperties(q)
                }
                a.taggedSearchObject.setSearchCache(a.applicationsList),
                a.taggedSearchObject.searchTagsCache.length > 0 && angular.copy(a.taggedSearchObject.searchData(a.taggedSearchObject.searchTagsCache), a.applicationsList)
            } else
                a.cloudExpressEnabled && c.openSetupGuideModal();
            a.loadingData = !1,
            k("subscribe")
        }
        ,
        k = function(b) {
            "subscribe" === b ? (j = a.$on("cloudx_event", function(b, d) {
                ["update"].indexOf(d.eventChangeType) >= 0 && (k("unsubscribe"),
                a.loadingData = !0,
                c.getApplicationOverviewData().then(l, m))
            }),
            h.subscribe(p)) : "unsubscribe" === b && (h.unsubscribe(p),
            j(),
            j = null)
        }
        ,
        c.getApplicationOverviewData().then(l, m)
    }
    angular.module("vManage").controller("CloudExpressDashboardController", a),
    a.$inject = ["$scope", "$state", "CloudExpressService", "appUtil", "$log", "TaggedSearchService", "$mdDialog", "eventPoll", "eventListObject"]
}(),
function() {
    function a(a, b, c, d, e) {
        a.breadCrumb.states = [{
            name: "cloudExpress",
            title: "CloudExpress",
            state: "app.config.cloudExpress.dashboard"
        }, {
            name: "cloudExpressOverview",
            title: "Overview"
        }],
        a.$on("$destroy", function() {
            a.breadCrumb.states = []
        }),
        a.appType = b.params.applicationType,
        a.vpnId = 1;
        a.table = new c({
            columnResizing: !0,
            enableSorting: !0,
            autoLoad: !0,
            enableExpandable: !0,
            tableHeightOffset: 200
        },{},{
            enableExpandableRowHeader: !1,
            reduceExpandableWidth: 0,
            expandableRowTemplate: "app/configuration/cloudExpress/templates/otherGatewaysTemplate.html"
        });
        var f = function(b) {
            angular.isObject(b) && appUtil.checkNestedProperty(b, "error", "details") ? (a.showErrorSection = !0,
            a.errorMessage = b) : ($log.info("API error response needs to be updated to conform to company guidelines"),
            a.errorMessage = "Error occurred while retrieving data")
        }
          , g = function(b) {
            d.attachTableColumns(b);
            var c = e.getApplicationDetailsURL();
            a.table.setDataUrl(c),
            a.table.createColumns(b.header.columns),
            a.table.setTableData(b.data)
        };
        e.setApplicationDetailsURL(a.appType, a.vpnId),
        e.getApplicationDetailsData().then(g, f)
    }
    angular.module("vManage").controller("CloudExpressOverviewController", a),
    a.$inject = ["$scope", "$state", "Table", "CloudExpressService", "CloudExpressApplicationDetailsService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        a.stateString = b.getStateString(c),
        a.scoreHistoryDetails = h,
        a.queryBuilderViewObj = {},
        a.showQueryBuilderTimeStampInbuilt = !1;
        var i = {
            name: a.scoreHistoryDetails["host-name"],
            display: a.scoreHistoryDetails["host-name"]
        }
          , j = {
            autoLoadFields: !1,
            searchCallBack: function(b) {
                var c, d, e;
                b.aggregation = angular.copy(g.getAggregationFilterForChart()),
                e = g.getRawQuery(),
                e[0].value.push(a.scoreHistoryDetails["host-name"]),
                e[1].value.push(a.scoreHistoryDetails.application),
                b.query.rules.push(e[0]),
                b.query.rules.push(e[1]);
                var f = a.queryBuilderObj.getQueryStringFromQueryObject(b);
                c = g.getCloudXChartAPIURL(),
                d = a.queryBuilderObj.appendQueryString(c, f),
                a.chartObject.emptySeriesData(i),
                a.chartObject.getChartDataFromURL(d, b)
            },
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !1
        };
        a.queryBuilderObj = new e(j),
        g.getQueryBuilderFieldsData().then(function(b) {
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }, function(a) {
            k(a)
        });
        var k = function(c) {
            angular.isObject(c) && b.checkNestedProperty(c, "error", "details") ? (a.showErrorSection = !0,
            a.errorMessage = c) : ($log.info("API error response needs to be updated to conform to company guidelines"),
            a.errorMessage = "Error occurred while retrieving data")
        }
          , l = g.getChartConfig();
        a.chartObject = new f(l[0],l[1]),
        a.chartObject.setXAxisProperty("entry_time"),
        a.chartObject.setYAxisProperty(["vqe_score"]),
        a.chartObject.setSeriesNames({
            property: "host_name",
            values: []
        }),
        a.chartObject.addSeriesNames(i),
        a.closeModal = function() {
            d.hide()
        }
    }
    angular.module("vManage").controller("CloudExpressScoreHistoryController", a),
    a.$inject = ["$scope", "appUtil", "$state", "$mdDialog", "QueryBuilderFactory", "HighStockLineChart", "CloudExpressApplicationDetailsService", "scoreHistoryDetails"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        a.currentState = b.current.url.replace("/", ""),
        a.configurationObj = {
            gatewayList: [],
            appVpnList: []
        },
        a.wizardStage = {
            addApplicationsVPN: "active",
            addGateway: "inactive"
        },
        a.selection = "addAppVpn",
        a.next = function() {
            a.wizardStage = {
                addGateway: "active",
                addApplicationsVPN: "done"
            },
            a.selection = "addGateways"
        }
        ,
        a.back = function() {
            a.configurationObj.gatewayList = d.getSelectedItems(),
            a.wizardStage = {
                addGateway: "inactive",
                addApplicationsVPN: "active"
            },
            a.selection = "addAppVpn"
        }
        ,
        a.completeSetup = function() {
            var d = {};
            d.appList = angular.copy(a.configurationObj.appVpnList);
            var g = {
                isEdit: !1,
                siteList: []
            };
            angular.forEach(a.configurationObj.gatewayList, function(a) {
                g.siteList.push(parseInt(a["site-id"], 10))
            });
            var h = e.saveAppsVPN(d)
              , i = e.markGateways(g);
            c.all([h, i]).then(function(a) {
                e.attachGateways(g).then(function(a) {
                    b.go("app.device.status", {
                        activity: f.getStatusAction("PUSH_FILE_TEMPLATE_CONFIG").endpoint,
                        pid: a ? a.id : ""
                    })
                }, function(a) {})
            }, function(a) {})
        }
    }
    angular.module("vManage").controller("CloudExpressWizardController", a),
    a.$inject = ["$scope", "$state", "$q", "MultiSelectService", "CloudExpressService", "StatusService"]
}(),
function() {
    function a(a, b, c) {
        a.editMode = b.current.url.indexOf("application") > -1,
        a.manageApplicationVpn = new c,
        a.breadCrumb.states = [{
            name: "cloudExpress",
            title: "CloudExpress",
            state: "app.config.cloudExpress.dashboard"
        }, {
            name: "manageCloudExpress",
            title: "Manage Applications"
        }],
        a.$on("$destroy", function() {
            a.breadCrumb.states = []
        }),
        a.vpnList = void 0,
        a.applicationVpnTable = a.manageApplicationVpn.createApplicationVpnTable(),
        a.applicationVpnTable.setViewActions({
            button: !0,
            title: "Add Applications and VPN",
            icon: "add_circle",
            cssId: a.stateString + "add_button",
            action: function(b) {
                a.manageApplicationVpn.addApplication(b)
            }
        }),
        a.manageApplicationVpn.setApplicationVpnTable(a.applicationVpnTable)
    }
    angular.module("vManage").controller("ManageApplicationVPNController", a),
    a.$inject = ["$scope", "$state", "ManageApplicationVPN"]
}(),
function() {
    function a(a, b) {
        a.breadCrumb.states = [{
            name: "cloudExpress",
            title: "CloudExpress",
            state: "app.config.cloudExpress.dashboard"
        }, {
            name: "cloudExpressOverview",
            title: "Overview"
        }],
        a.$on("$destroy", function() {
            a.breadCrumb.states = []
        })
    }
    angular.module("vManage").controller("ManageCloudExpressController", a),
    a.$inject = ["$scope", "CloudExpressService"]
}(),
function() {
    function a(a, b) {
        a.breadCrumb.states = [{
            name: "cloudExpress",
            title: "CloudExpress",
            state: "app.config.cloudExpress.dashboard"
        }, {
            name: "manageGateways",
            title: "Manage DIA"
        }],
        a.manageDia = new b,
        a.table = a.manageDia.createDiaTable(),
        a.table.setViewActions([{
            button: !0,
            title: "Attach DIA Sites",
            icon: "add_circle",
            cssId: a.stateString + "attach_button",
            action: function(b) {
                a.manageDia.attachEditSites(!0, b)
            }
        }, {
            button: !0,
            title: "Detach DIA Sites",
            icon: "remove_circle",
            cssId: a.stateString + "detach_button",
            action: function(b) {
                a.manageDia.detachSites(b)
            },
            disableButton: function() {
                return 0 === a.table.data.length
            }
        }, {
            button: !0,
            title: "Edit DIA Sites",
            icon: "mode_edit",
            cssId: a.stateString + "edit_button",
            action: function(b) {
                a.manageDia.attachEditSites(!1, b)
            },
            disableButton: function() {
                return 0 === a.table.data.length
            }
        }]),
        a.manageDia.setDiaTable(a.table),
        a.$on("$destroy", function() {
            a.breadCrumb.states = []
        })
    }
    angular.module("vManage").controller("ManageDiaController", a),
    a.$inject = ["$scope", "ManageDia"]
}(),
function() {
    function a(a, b) {
        a.breadCrumb.states = [{
            name: "cloudExpress",
            title: "CloudExpress",
            state: "app.config.cloudExpress.dashboard"
        }, {
            name: "manageGateways",
            title: "Manage Gateways"
        }],
        a.manageGateways = new b,
        a.table = a.manageGateways.createGatewaysTable(),
        a.table.setViewActions([{
            button: !0,
            title: "Attach Gateways",
            icon: "add_circle",
            cssId: a.stateString + "attach_button",
            action: function(b) {
                a.manageGateways.attachEditSites(!0, b)
            }
        }, {
            button: !0,
            title: "Detach Gateways",
            icon: "remove_circle",
            cssId: a.stateString + "detach_button",
            action: function(b) {
                a.manageGateways.detachSites(b)
            },
            disableButton: function() {
                return 0 === a.table.data.length
            }
        }, {
            button: !0,
            title: "Edit Gateways",
            icon: "mode_edit",
            cssId: a.stateString + "edit_button",
            action: function(b) {
                a.manageGateways.attachEditSites(!1, b)
            },
            disableButton: function() {
                return 0 === a.table.data.length
            }
        }]),
        a.manageGateways.setGatewaysTable(a.table),
        a.$on("$destroy", function() {
            a.breadCrumb.states = []
        })
    }
    angular.module("vManage").controller("ManageGatewaysController", a),
    a.$inject = ["$scope", "ManageGateways"]
}(),
function() {
    function a(a, b, c) {
        a.manageSites = new c(b.current.url),
        a.breadCrumb.states = [{
            name: "cloudExpress",
            title: "CloudExpress",
            state: "app.config.cloudExpress.dashboard"
        }, {
            name: "manageGateways",
            title: "Manage Sites"
        }],
        a.table = a.manageSites.createTable(),
        a.table.setViewActions([{
            button: !0,
            title: "Attach Sites",
            icon: "add_circle",
            cssId: a.stateString + "attach_button",
            action: function(b) {
                a.manageSites.attachSites()
            }
        }, {
            button: !0,
            title: "Detach Sites",
            icon: "remove_circle",
            cssId: a.stateString + "detach_button",
            action: function(b) {
                a.manageSites.detachSites()
            },
            disableButton: function() {
                return 0 === a.table.data.length
            }
        }]),
        a.manageSites.setTable(a.table),
        a.$on("$destroy", function() {
            a.breadCrumb.states = []
        })
    }
    angular.module("vManage").controller("ManageSitesController", a),
    a.$inject = ["$scope", "$state", "ManageSites"]
}(),
function() {
    function a(a, b, c, d, e) {
        function f(f) {
            c.attachGateways(f).then(function(b) {
                a.cancel(),
                a.serverCall = !1,
                b.push_feature_template_configuration > b.push_file_template_configuration ? d.go("app.device.status", {
                    activity: e.getStatusAction("PUSH_FEATURE_TEMPLATE_CONFIG").endpoint,
                    pid: b ? b.id : ""
                }) : d.go("app.device.status", {
                    activity: e.getStatusAction("PUSH_FILE_TEMPLATE_CONFIG").endpoint,
                    pid: b ? b.id : ""
                })
            }, function(c) {
                a.serverCall = !1,
                b.getOptions().showErrorSection = !0,
                b.getOptions().errorMessage = c
            })
        }
        if (a.serverCall = !0,
        b.setOptions({
            labels: {
                heading: "Attach sites from the list below (For devices in vManage mode running Release 16.3 or later.)",
                available: "Available Sites",
                selected: "Selected Sites"
            },
            columns: [{
                property: "site-id",
                display: "Site List"
            }, {
                property: "device",
                display: "Devices"
            }, {
                property: "system-ip",
                display: ""
            }, {
                property: "toolTipData",
                display: ""
            }, {
                property: "invalid",
                display: ""
            }],
            toolTip: {
                enabled: !0,
                templateCache: "'cloudxToolTipTemplate'"
            },
            orderBy: "site-id",
            uuid: "site-id",
            enableGroupFilter: !1,
            showErrorSection: !1,
            errorMessage: {}
        }),
        angular.isDefined(a.viewType))
            if ("dia" === a.viewType)
                var g = c.getDias();
            else if ("gateway" === a.viewType)
                var g = c.getGateways();
            else
                var g = c.getSites();
        g.then(function(d) {
            a.serverCall = !1;
            var e = [];
            angular.forEach(d.data, function(b) {
                _.find(a.sites.selected, function(a) {
                    return a["site-id"] === b["site-id"]
                }) || e.push({
                    "site-id": b["site-id"],
                    device: b.vedgeList.map(function(a) {
                        return angular.isDefined(a["host-name"]) ? a["host-name"] : a["system-ip"]
                    }).join(", "),
                    "system-ip": _.map(b.vedgeList, "system-ip").join(", "),
                    invalid: c.checkDeviceValidity(b),
                    toolTipData: b.vedgeList
                })
            }),
            b.setMultiSelectData(e, a.sites.selected),
            a.sitesSelected = b.getSelectedItems().length > 0
        }, function(c) {
            a.serverCall = !1,
            b.getOptions().showErrorSection = !0,
            b.getOptions().errorMessage = c
        }),
        a.multiSelectOpts = b.getOptions(),
        a.attachSelectedSites = function() {
            var d = void 0;
            if (!b.validateRequiredFields(a.deviceMode, "numSelected") && !a.deviceMode.$valid)
                return !1;
            a.serverCall = !0;
            var e = {
                siteList: []
            }
              , g = [];
            "dia" === a.viewType || "gateway" === a.viewType ? (angular.forEach(b.getSelectedItems(), function(a) {
                angular.forEach(a["system-ip"].replace(/\s+/g, "").split(","), function(a) {
                    e.siteList.push({
                        deviceIP: a,
                        cloudxInterfaceList: ""
                    })
                }),
                g.push(parseInt(a["site-id"], 10))
            }),
            d = c.addInterfaces(e)) : angular.forEach(b.getSelectedItems(), function(a) {
                e.siteList.push(parseInt(a["site-id"], 10))
            }),
            e.isEdited = !1,
            e.siteType = a.viewType,
            angular.isDefined(d) ? d.then(function() {
                "dia" !== a.viewType && "gateway" !== a.viewType || (e.siteList.reset(),
                e.siteList = angular.copy(g)),
                f(e)
            }, function(c) {
                a.serverCall = !1,
                b.getOptions().showErrorSection = !0,
                b.getOptions().errorMessage = c
            }) : f(e)
        }
        ,
        a.$on("vsRepeatTrigger", function() {
            a.sitesSelected = b.getSelectedItems().length > 0
        })
    }
    angular.module("vManage").controller("SelectSitesController", a),
    a.$inject = ["$scope", "MultiSelectService", "CloudExpressService", "$state", "StatusService"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        a.applicationOptions = [],
        a.applicationOptions.selected = [],
        a.apiCallInprogress = !1,
        a.showErrorSection = !1,
        a.manageApplicationVpnObj = g,
        angular.isDefined(d) ? (a.editMode = !0,
        a.modalTitle = "Edit VPN") : a.modalTitle = "Add Applications & VPN";
        var h = function() {
            a.vpnList = d.appVpnList,
            a.applicationName = d.longName
        };
        a.editMode ? h() : b.getApplicationsList().length ? a.applicationOptions = b.getApplicationsList() : (a.apiCallInprogress = !0,
        b.getAvailableApplications().then(function(c) {
            a.apiCallInprogress = !1,
            b.setApplicationsList(c.data),
            a.applicationOptions = c.data
        }, function(b) {
            a.apiCallInprogress = !1,
            a.showErrorSection = !0,
            a.errorMessage = b
        })),
        a.addApplication = function() {
            if (a.editMode)
                g.saveApplicationVPN(d, a.vpnList),
                a.cancel();
            else {
                var b = [];
                if (angular.forEach(a.applicationOptions.selected, function(a) {
                    _.find(c.data, function(b) {
                        return b.appType === a.appType
                    }) && b.push(a)
                }),
                b.length) {
                    a.showErrorSection = !0;
                    var e = "Following applications are already added to the list:\n";
                    angular.forEach(b, function(a) {
                        e += a.longName + "\n"
                    }),
                    e += "Please edit the respective applications",
                    a.errorMessage = f.createErrorObject("Duplicate applications", e)
                } else
                    g.addApplicationVPN(a.applicationOptions.selected, a.vpnList),
                    a.cancel()
            }
        }
        ,
        a.cancel = function() {
            e.cancel()
        }
    }
    angular.module("vManage").controller("AddApplicationVPNModalController", a),
    a.$inject = ["$scope", "CloudExpressService", "tableObject", "rowObject", "$mdDialog", "appUtil", "manageApplicationVPNObject"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        h ? (a.sites = {
            selected: []
        },
        a.editSelectedSites = [],
        a.selection = "addSites",
        a.modalTitle = g.current.url.indexOf("manage-dia") > -1 ? "Attach DIA Sites" : g.current.url.indexOf("manage-gateways") > -1 ? "Attach Gateways" : "Attach Sites") : (a.editSelectedSites = f,
        a.modalTitle = "Edit Interfaces of Selected Sites",
        a.selection = "addInterfaces"),
        a.viewType = b,
        a.originalData = d,
        a.cancel = function() {
            e.cancel()
        }
        ,
        a.back = function() {
            a.selection = "addSites",
            a.modalTitle = g.current.url.indexOf("manage-dia") > -1 ? "Attach DIA Sites" : g.current.url.indexOf("manage-gateways") > -1 ? "Attach Gateways" : "Attach Sites"
        }
        ,
        a.addInterface = function() {
            c.getSelectedItems().length && (a.sites = {
                selected: c.getSelectedItems()
            },
            a.modalTitle = "Add Interfaces to Selected Sites",
            a.selection = "addInterfaces")
        }
    }
    angular.module("vManage").controller("AttachSitesModalController", a),
    a.$inject = ["$scope", "viewType", "MultiSelectService", "originalData", "$mdDialog", "selectedRows", "$state", "attachFlag"]
}(),
function() {
    function a(a, b) {
        a.closeDialog = function() {
            b.hide()
        }
    }
    angular.module("vManage").controller("CloudExpressSetupGuideController", a),
    a.$inject = ["$scope", "$mdDialog"]
}(),
function() {
    function a(a, b, c) {
        a.stateString = a.goToDia = function() {
            c.cancel(),
            b.go("app.config.cloudExpress.manage-dia")
        }
        ,
        a.cancel = function() {
            c.cancel()
        }
    }
    angular.module("vManage").controller("setupConfirmationModalController", a),
    a.$inject = ["$scope", "$state", "$mdDialog"]
}(),
function() {
    function a(a, b, c) {
        var d, e = {
            field: [{
                property: "host_name",
                sequence: 1
            }],
            metrics: [{
                property: "vqe_score",
                type: "avg"
            }, {
                property: "latency",
                type: "avg"
            }, {
                property: "loss",
                type: "avg"
            }]
        }, f = [{
            value: [],
            field: "host_name",
            type: "long",
            operator: "in"
        }, {
            value: [],
            field: "application",
            type: "string",
            operator: "in"
        }];
        return {
            setApplicationDetailsURL: function(b, c) {
                var e = a.APPLICATION_DETAILS_GRID + "?appName=" + b;
                d = "All" !== c ? e + "&vpnId=" + c : e
            },
            getApplicationDetailsURL: function() {
                return d
            },
            getApplicationDetailsData: function() {
                return b.get(d)
            },
            getCloudXChartAPIURL: function() {
                return a.VQE_SCORE_CHART
            },
            getAggregationFilterForChart: function() {
                return e
            },
            getRawQuery: function() {
                return angular.copy(f)
            },
            getChartConfig: function() {
                var a, b;
                return a = {
                    name: "",
                    zoom: !0,
                    filtersSelected: {
                        xAxis: ["entry_time"],
                        yAxis: ["vqe-score"],
                        series: ["host-name"]
                    },
                    asyncLoad: !0,
                    fillZeros: !1,
                    formatDecimals: !0,
                    autoLoad: !0,
                    insertAPIDataToSeriesPoints: !0
                },
                b = {
                    options: {
                        tooltip: {
                            formatter: function() {
                                function a(a) {
                                    return a = a.toFixed(2) > 0 ? a.toFixed(2) : 0
                                }
                                var b, c, d = "", e = this.points[0].series, f = this.points[0].point.originalDataObj;
                                if (angular.isDefined(this.x)) {
                                    if (c = angular.isDefined(this.series) ? this.series : this.points[0].series,
                                    "datetime" === c.xAxis.userOptions.type) {
                                        var g = moment(this.x);
                                        b = g.format("MMM DD, HH:mm:ss")
                                    }
                                } else
                                    b = this.key;
                                return d += "<b>" + b + "<b><br/>",
                                d += '<span style="color:' + e.color + '">■    </span>',
                                d += angular.isDefined(e.userOptions.display) && e.userOptions.display !== e.userOptions.name ? "<span>" + e.userOptions.display + ":</span> " : "<span>" + e.name + ":</span> ",
                                d += "<span>" + a(this.y) + "</span>",
                                angular.isDefined(f) && (d += "<br/>",
                                angular.isDefined(f.loss) && (d += "<span>&nbsp; Average Loss: </span> <span> " + a(f.loss) + "% </span>",
                                d += "<br/>"),
                                angular.isDefined(f.latency) && (d += "<span>&nbsp; Average Latency: </span> <span> " + a(f.latency) + "ms </span>",
                                d += "<br/>")),
                                d += "<br/>"
                            },
                            useHTML: !0
                        }
                    },
                    title: {
                        text: ""
                    },
                    xAxis: {
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: ""
                        }
                    },
                    yAxis: {
                        showLastLabel: !0,
                        endOnTick: !1,
                        min: 0,
                        max: 10,
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: "vQoE Score"
                        }
                    }
                },
                [a, b]
            },
            getQueryBuilderFieldsData: function() {
                var d = c.defer();
                return b.get(a.VQE_SCORE_CHART_FIELDS).then(function(a) {
                    d.resolve(a.data)
                }),
                d.promise
            },
            updateTableColumns: function(a) {
                var b = _.findIndex(a, {
                    property: "latency"
                });
                b > -1 && a.splice(b, 1),
                b = _.findIndex(a, {
                    property: "vqe-status"
                }),
                b > -1 && (a[b] = {
                    name: "vqe-status",
                    displayName: "vQoE Status",
                    dataType: "string",
                    width: "100",
                    cellTemplate: "<div class='status' style='height: 100%;'><i ng-if='row.entity[\"vqe-status\"] === \"badSites\"' class='material-icons icon-red md-16'>error</i><i ng-if='row.entity[\"vqe-status\"] === \"averageSites\"' class='material-icons icon-yellow md-16'>warning</i><i ng-if='row.entity[\"vqe-status\"] === \"goodSites\"' class='material-icons viptela_green md-16'>check_circle</i></div>"
                }),
                b = _.findIndex(a, {
                    property: "vqe-score"
                }),
                b > -1 && (a[b] = {
                    name: "vqe-score",
                    displayName: "vQoE Score",
                    dataType: "string",
                    width: "100",
                    cellTemplate: "<div class='score' style='height: 100%;'>{{COL_FIELD}} <span id='view_change_history' ng-click='grid.appScope.showChangeHistoryChart(row, $event)'><md-icon class='material-icons blue'>trending_up</md-icon></span></div>"
                })
            }
        }
    }
    angular.module("vManage").factory("CloudExpressApplicationDetailsService", a),
    a.$inject = ["configurationConstants", "restService", "$q"]
}(),
function() {
    function a(a, b, c, d) {
        var e = []
          , f = [];
        return {
            setCachedGateways: function(a) {
                e = a
            },
            getCachedGateways: function() {
                return e
            },
            attachTableColumns: function(a) {
                return a.header.columns.push(applicationDetailsAdditionalTableColumns[0]),
                a
            },
            getGateways: function() {
                return b.get(a.AVAILABLE_GATEWAYS_URL)
            },
            getAttachedGateways: function() {
                return b.get(a.ATTACHED_GATEWAYS_URL)
            },
            getAttachedSites: function() {
                return b.get(a.ATTACHED_SITES_URL)
            },
            getSites: function() {
                return b.get(a.AVAILABLE_SITES_URL)
            },
            getDias: function() {
                return b.get(a.AVAILABLE_DIAS_URL)
            },
            getAttachedDias: function() {
                return b.get(a.ATTACHED_DIAS_URL)
            },
            addInterfaces: function(c) {
                return b.post(a.ADD_INTERFACES_URL, c)
            },
            attachGateways: function(c) {
                return b.post(a.CLOUDX_ATTACH_URL, c)
            },
            editAttachedGateways: function(c) {
                return b.put(a.CLOUDX_ATTACH_URL, c)
            },
            detachSites: function(c) {
                return b.post(a.CLOUDX_DETACH_URL, c)
            },
            getAppsVPN: function() {
                return b.get(a.MANAGE_APPLICATIONS_VPN_URL)
            },
            saveAppsVPN: function(c) {
                return b.post(a.MANAGE_APPLICATIONS_VPN_URL, c)
            },
            editAppsVPN: function(c) {
                return b.put(a.MANAGE_APPLICATIONS_VPN_URL, c)
            },
            getAvailableApplications: function() {
                return b.get(a.APPLICATIONS_AVAILABLE_URL)
            },
            getApplicationOverviewData: function() {
                return b.get(a.APPLICATIONS_OVERVIEW_URL)
            },
            getVPNListData: function() {
                return b.get(a.VPN_LIST)
            },
            setApplicationsList: function(a) {
                f = a
            },
            getApplicationsList: function() {
                return angular.copy(f)
            },
            getInterfaceData: function(c) {
                var d = a.INTERFACE_LIST + "?deviceId=" + c;
                return b.get(d)
            },
            checkVersionValidity: function(b) {
                return c.compareVersions(b, a.CLOUDX_SUPPORTED_VERSION)
            },
            checkDeviceValidity: function(b) {
                return !!angular.isDefined(_.find(b.vedgeList, function(b) {
                    return "cli" === b.configOperationMode || c.compareVersions(b.version, a.CLOUDX_SUPPORTED_VERSION)
                }))
            },
            openSetupGuideModal: function() {
                d.show({
                    templateUrl: "app/configuration/cloudExpress/modal/cloudExpressSetupGuide.html",
                    closeTo: angular.element(document.querySelector("#cloudExpress_quick_help")),
                    controller: "CloudExpressSetupGuideController",
                    fullscreen: !0
                })
            }
        }
    }
    angular.module("vManage").factory("CloudExpressService", a),
    a.$inject = ["configurationConstants", "restService", "appUtil", "$mdDialog"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        var j, k, l = function() {
            this.originalData = []
        }, m = function(a, b) {
            var c = []
              , g = {};
            if (g.appList = angular.copy(j.data),
            a.originalData.length)
                var k = d.editAppsVPN(g);
            else
                var k = d.saveAppsVPN(g);
            k.then(function(b) {
                if (b.pushRequired) {
                    var g = {
                        siteList: []
                    }
                      , k = d.getAttachedGateways()
                      , l = d.getAttachedDias();
                    i.all([k, l]).then(function(b) {
                        if (angular.forEach(b[0].data, function(a) {
                            c.push(parseInt(a["site-id"], 10))
                        }),
                        angular.forEach(b[1].data, function(a) {
                            c.push(parseInt(a["site-id"], 10))
                        }),
                        g.siteList = _.uniq(c),
                        g.siteList.length) {
                            if (a.originalData.length) {
                                g.isEdited = !0;
                                var i = d.editAttachedGateways(g)
                            } else {
                                g.isEdited = !1;
                                var i = d.attachGateways(g)
                            }
                            i.then(function(a) {
                                a.push_feature_template_configuration > a.push_file_template_configuration ? e.go("app.device.status", {
                                    activity: h.getStatusAction("PUSH_FEATURE_TEMPLATE_CONFIG").endpoint,
                                    pid: a ? a.id : ""
                                }) : e.go("app.device.status", {
                                    activity: h.getStatusAction("PUSH_FILE_TEMPLATE_CONFIG").endpoint,
                                    pid: a ? a.id : ""
                                })
                            }, function(a) {
                                f.error(a.error.message + ":" + a.error.details)
                            })
                        }
                        a.originalData = angular.copy(j.data)
                    }, function(a) {
                        f.error(a.error.message + ":" + a.error.details)
                    })
                } else
                    a.originalData = angular.copy(j.data),
                    f.success("Application list saved in vManage")
            }, function(a) {
                f.error(a.error.message + ":" + a.error.details)
            })
        }, n = function(a, c, d) {
            var e = this;
            b.show({
                templateUrl: "app/configuration/cloudExpress/modal/addApplicationVPNModal.html",
                controller: "AddApplicationVPNModalController",
                targetEvent: d,
                resolve: {
                    tableObject: function() {
                        return j
                    },
                    rowObject: function() {
                        return angular.isDefined(a) ? a.entity : void 0
                    },
                    manageApplicationVPNObject: function() {
                        return e
                    },
                    rowIndex: function() {
                        return c
                    }
                }
            })
        };
        return l.prototype.createApplicationVpnTable = function() {
            var b = this;
            j = new a({
                autoLoad: !0,
                columnResizing: !0,
                singleSelect: !1,
                enableSorting: !0,
                multiSelect: !0,
                dataUid: "appType",
                tableHeightOffset: 245,
                tableName: "application-vpn",
                isRowSelectable: function(a) {
                    return !0
                }
            },{
                delete: !0,
                refresh: !1
            });
            var c = {
                editVPNContent: function(a, c) {
                    k = a.entity,
                    n.call(b, a, c)
                }
            };
            return j.setAppScope(c),
            j
        }
        ,
        l.prototype.setApplicationVpnTable = function(a) {
            var b = this;
            d.getAppsVPN().then(function(c) {
                a.setDataUrl(g.MANAGE_APPLICATIONS_VPN_URL);
                var d = c.header.columns;
                d.push({
                    title: "",
                    displayName: "",
                    property: "edit-row",
                    editable: !1,
                    dataType: "string",
                    width: 50,
                    headerTemplate: "ui-grid/ui-grid-no-header",
                    cellTemplate: '<div class="ui-grid-cell-contents"><i ng-if="rowRenderIndex > 2 || row.entity.name.vipValue != \'netadmin\'" class="material-icons md-14 icon-bold pointerCursor" id="editGroupTasks_{{rowRenderIndex}}" ng-click="grid.appScope.editVPNContent(row, rowRenderIndex)">mode_edit</i></div>'
                }),
                a.createColumns(d),
                c.data.length ? (angular.copy(c.data, a.data),
                angular.copy(c.data, b.originalData),
                a.taggedSearchObject.setSearchCache(c.data)) : n.call(b)
            }, function(a) {
                f.error(a.error.message + ":" + a.error.details)
            })
        }
        ,
        l.prototype.addApplication = function(a) {
            n.call(this, {}, {}, a)
        }
        ,
        l.prototype.cancel = function() {
            angular.copy(this.originalData, j.data)
        }
        ,
        l.prototype.back = function() {
            e.go("app.config.cloudExpress.dashboard")
        }
        ,
        l.prototype.saveApplicationVPN = function(a, b) {
            var c = [];
            c.push(a);
            var d = _.find(j.data, function(a) {
                return a.appType === k.appType
            });
            d.appVpnList = b
        }
        ,
        l.prototype.addApplicationVPN = function(a, b) {
            angular.forEach(a, function(a) {
                var c = {};
                c.appType = a.appType,
                c.longName = a.longName,
                c.appVpnList = b,
                j.data.push(c)
            })
        }
        ,
        l.prototype.editApplicationVPN = function(a, b) {
            var e, g, h, k = this;
            c.compareObjects(k.originalData, j.data, "appType", "appVpnList") ? f.info("No changes are made to the applications and vpn list", 5e3) : j.data.length ? m(k, b) : (e = d.getAttachedDias(),
            g = d.getAttachedSites(),
            h = d.getAttachedGateways(),
            i.all([e, g, h]).then(function(a) {
                if (a[0].data.length || a[1].data.length || a[2].data.length) {
                    var c = {
                        error: {
                            message: "Sites Attached",
                            details: "CloudExpress is configured at some sites. Remove CloudExpress configuration before deleting all applications.",
                            type: "error"
                        }
                    };
                    f.confirm(c),
                    k.cancel()
                } else
                    m(k, b)
            }, function(a) {
                f.error(a.error.message + ":" + a.error.details)
            }))
        }
        ,
        l
    }
    angular.module("vManage").factory("ManageApplicationVPN", a),
    a.$inject = ["Table", "$mdDialog", "appUtil", "CloudExpressService", "$state", "notification", "configurationConstants", "StatusService", "$q"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h, i = function() {
            this.originalData = [],
            this.serverCall = !1
        }, j = function() {
            var a = this;
            a.serverCall = !0;
            var b = {
                siteList: [],
                siteType: "none"
            };
            angular.forEach(h.getSelectedRows(), function(a) {
                b.siteList.push(parseInt(a["site-id"], 10))
            }),
            d.detachSites(b).then(function(b) {
                a.serverCall = !1,
                b.push_feature_template_configuration > b.push_file_template_configuration ? e.go("app.device.status", {
                    activity: c.getStatusAction("PUSH_FEATURE_TEMPLATE_CONFIG").endpoint,
                    pid: b ? b.id : ""
                }) : e.go("app.device.status", {
                    activity: c.getStatusAction("PUSH_FILE_TEMPLATE_CONFIG").endpoint,
                    pid: b ? b.id : ""
                })
            }, function(b) {
                a.serverCall = !1,
                f.error(b.error.message + ":" + b.error.details)
            })
        }, k = function(a, c, d) {
            var e = b.show({
                templateUrl: "app/configuration/cloudExpress/modal/attachSitesModal.html",
                controller: "AttachSitesModalController",
                targetEvent: d,
                resolve: {
                    selectedRows: function() {
                        return h.getSelectedRows().length ? h.getSelectedRows() : void 0
                    },
                    viewType: function() {
                        return "dia"
                    },
                    attachFlag: function() {
                        return a
                    },
                    originalData: function() {
                        return c.originalData
                    }
                }
            });
            e.then(function(a) {}, function() {})
        };
        return i.prototype.createDiaTable = function() {
            h = new a({
                autoLoad: !0,
                columnResizing: !0,
                enableExpandable: !0,
                singleSelect: !1,
                enableSorting: !0,
                multiSelect: !0,
                dataUid: "site-id",
                tableHeightOffset: 200,
                tableName: "dia-overview",
                isRowSelectable: function(a) {
                    return !0
                }
            },{
                custom: !0,
                customTemplateUrl: "app/configuration/cloudExpress/templates/customManageGatewaysToolbar.html"
            });
            var b = {
                viewSiteDetails: function(a) {
                    a.grid.api.expandable.toggleRowExpansion(a.entity)
                },
                getDeviceList: function(a) {
                    return "Test"
                },
                getStatus: function(a) {
                    return _.find(a.entity.vedgeList, function(a) {
                        return a.configStatusMessage.toLowerCase().indexOf("out of sync") > -1
                    }) ? "<div class='dia-device-status table-icon vmanage-spritesheet-url status-out-of-sync'></div>" : _.find(a.entity.vedgeList, function(a) {
                        return "sync pending" === a.configStatusMessage.toLowerCase()
                    }) ? "<div class='dia-device-status table-icon vmanage-spritesheet-url status-sync-pending'></div>" : "<div class='dia-device-status table-icon vmanage-spritesheet-url status-in-sync'></div>"
                }
            };
            return h.setAppScope(b),
            h.setExpandableRowOptions(!1, "app/configuration/cloudExpress/templates/expand-diaSiteDetails.html", 180),
            h
        }
        ,
        i.prototype.setDiaTable = function(a) {
            var b = this;
            d.getAttachedDias().then(function(c) {
                a.setDataUrl(g.ATTACHED_DIAS_URL);
                var d = c.header.columns;
                d.push({
                    displayName: "Status",
                    property: "status",
                    editable: !1,
                    dataType: "string",
                    cellTemplate: '<div class="ui-grid-cell-contents"><div ng-bind-html="grid.appScope.getStatus(row)"></div></div>'
                }),
                d.push({
                    title: "",
                    displayName: "",
                    property: "edit-row",
                    editable: !1,
                    dataType: "string",
                    width: 50,
                    headerTemplate: "ui-grid/ui-grid-no-header",
                    cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-24 icon-bold pointerCursor expandable-row-icon" id="editGroupTasks_{{rowRenderIndex}}"  style="margin-top: -5px;" ng-click="grid.appScope.viewSiteDetails(row)">{{!row.isExpanded ? \'keyboard_arrow_right\':\'keyboard_arrow_down\'}}</i></div>'
                }),
                a.createColumns(d),
                a.setTableData(c.data),
                angular.copy(c.data, b.originalData),
                a.taggedSearchObject.setSearchCache(c.data)
            }, function(a) {
                f.error(a.error.message + ":" + a.error.details)
            })
        }
        ,
        i.prototype.attachEditSites = function(a, b) {
            if (h.getSelectedRows().length || a) {
                var c = this;
                a && !h.data.length ? d.getAppsVPN().then(function(d) {
                    if (d.data.length)
                        k(a, c, b);
                    else {
                        var e = {
                            error: {
                                message: "No applications",
                                details: "There are no applications added. Please add applications from Manage Applications view",
                                type: "info"
                            }
                        };
                        f.confirm(e)
                    }
                }, function(a) {
                    f.error(a.error.message + ":" + a.error.details)
                }) : k(a, c, b)
            } else
                f.info("Please select at least one site")
        }
        ,
        i.prototype.detachSites = function(a) {
            if (h.getSelectedRows().length) {
                var b = {
                    error: {
                        message: "Confirm detach",
                        details: h.getSelectedRows().length > 1 ? h.getSelectedRows().length + " sites will be affected. Are you sure you want to proceed?" : "1 site will be affected. Are you sure you want to proceed?",
                        type: "warning",
                        buttonText: "Proceed"
                    }
                };
                f.confirm(b, !0, j, null, this)
            } else
                f.info("Please select at least one site")
        }
        ,
        i
    }
    angular.module("vManage").factory("ManageDia", a),
    a.$inject = ["Table", "$mdDialog", "StatusService", "CloudExpressService", "$state", "notification", "configurationConstants"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h, i = function() {
            this.originalData = [],
            this.serverCall = !1
        }, j = function() {
            var a = this;
            a.serverCall = !0;
            var b = {
                siteList: [],
                siteType: "none"
            };
            angular.forEach(h.getSelectedRows(), function(a) {
                b.siteList.push(parseInt(a["site-id"], 10))
            }),
            d.detachSites(b).then(function(b) {
                a.serverCall = !1,
                b.push_feature_template_configuration > b.push_file_template_configuration ? e.go("app.device.status", {
                    activity: c.getStatusAction("PUSH_FEATURE_TEMPLATE_CONFIG").endpoint,
                    pid: b ? b.id : ""
                }) : e.go("app.device.status", {
                    activity: c.getStatusAction("PUSH_FILE_TEMPLATE_CONFIG").endpoint,
                    pid: b ? b.id : ""
                })
            }, function(b) {
                a.serverCall = !1,
                f.error(b.error.message + ":" + b.error.details)
            })
        }, k = function(a, c, d) {
            var e = b.show({
                templateUrl: "app/configuration/cloudExpress/modal/attachSitesModal.html",
                controller: "AttachSitesModalController",
                targetEvent: d,
                resolve: {
                    selectedRows: function() {
                        return h.getSelectedRows().length ? h.getSelectedRows() : void 0
                    },
                    viewType: function() {
                        return "gateway"
                    },
                    attachFlag: function() {
                        return a
                    },
                    originalData: function() {
                        return c.originalData
                    }
                }
            });
            e.then(function(a) {}, function() {})
        };
        return i.prototype.createGatewaysTable = function() {
            h = new a({
                autoLoad: !0,
                columnResizing: !0,
                enableExpandable: !0,
                singleSelect: !1,
                enableSorting: !0,
                multiSelect: !0,
                dataUid: "site-id",
                tableHeightOffset: 200,
                tableName: "gateways-overview",
                isRowSelectable: function(a) {
                    return !0
                }
            },{
                custom: !0,
                customTemplateUrl: "app/configuration/cloudExpress/templates/customManageGatewaysToolbar.html"
            });
            var b = {
                viewSiteDetails: function(a) {
                    a.grid.api.expandable.toggleRowExpansion(a.entity)
                },
                getStatus: function(a) {
                    return _.find(a.entity.vedgeList, function(a) {
                        return a.configStatusMessage.toLowerCase().indexOf("out of sync") > -1
                    }) ? "<div class='dia-device-status table-icon vmanage-spritesheet-url status-out-of-sync'></div>" : _.find(a.entity.vedgeList, function(a) {
                        return "sync pending" === a.configStatusMessage.toLowerCase()
                    }) ? "<div class='dia-device-status table-icon vmanage-spritesheet-url status-sync-pending'></div>" : "<div class='dia-device-status table-icon vmanage-spritesheet-url status-in-sync'></div>"
                }
            };
            return h.setAppScope(b),
            h.setExpandableRowOptions(!1, "app/configuration/cloudExpress/templates/expand-gatewaysDetails.html", 180),
            h
        }
        ,
        i.prototype.setGatewaysTable = function(a) {
            var b = this;
            d.getAttachedGateways().then(function(c) {
                a.setDataUrl(g.ATTACHED_GATEWAYS_URL);
                var d = c.header.columns;
                d.push({
                    displayName: "Status",
                    property: "status",
                    editable: !1,
                    dataType: "string",
                    cellTemplate: '<div class="ui-grid-cell-contents"><div ng-bind-html="grid.appScope.getStatus(row)"></div></div>'
                }),
                d.push({
                    title: "",
                    displayName: "",
                    property: "edit-row",
                    editable: !1,
                    dataType: "string",
                    width: 50,
                    headerTemplate: "ui-grid/ui-grid-no-header",
                    cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-24 icon-bold pointerCursor expandable-row-icon" id="editGroupTasks_{{rowRenderIndex}}" style="margin-top: -5px;" ng-click="grid.appScope.viewSiteDetails(row)">{{!row.isExpanded ? \'keyboard_arrow_right\':\'keyboard_arrow_down\'}}</i></div>'
                }),
                a.createColumns(d),
                a.setTableData(c.data),
                angular.copy(c.data, b.originalData),
                a.taggedSearchObject.setSearchCache(c.data)
            }, function(a) {
                f.error(a.error.message + ":" + a.error.details)
            })
        }
        ,
        i.prototype.attachEditSites = function(a, b) {
            if (h.getSelectedRows().length || a) {
                var c = this;
                a && !h.data.length ? d.getAppsVPN().then(function(d) {
                    if (d.data.length)
                        k(a, c, b);
                    else {
                        var e = {
                            error: {
                                message: "No applications",
                                details: "There are no applications added. Please add applications from Manage Applications view",
                                type: "info"
                            }
                        };
                        f.confirm(e)
                    }
                }, function(a) {
                    f.error(a.error.message + ":" + a.error.details)
                }) : k(a, c, b)
            } else
                f.info("Please select at least one site")
        }
        ,
        i.prototype.detachSites = function(a) {
            if (h.getSelectedRows().length) {
                var b = {
                    error: {
                        message: "Confirm detach",
                        details: h.getSelectedRows().length > 1 ? h.getSelectedRows().length + " sites will be affected. Are you sure you want to proceed?" : "1 site will be affected. Are you sure you want to proceed?",
                        type: "warning",
                        buttonText: "Proceed"
                    }
                };
                f.confirm(b, !0, j, null, this)
            } else
                f.info("Please select at least one site")
        }
        ,
        i
    }
    angular.module("vManage").factory("ManageGateways", a),
    a.$inject = ["Table", "$mdDialog", "StatusService", "CloudExpressService", "$state", "notification", "configurationConstants"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h, i = function(a) {
            this.viewMode = "client"
        }, j = function(a, c) {
            var d = b.show({
                templateUrl: "app/configuration/cloudExpress/modal/attachSitesModal.html",
                controller: "AttachSitesModalController",
                targetEvent: c,
                resolve: {
                    selectedRows: function() {},
                    originalData: function() {},
                    attachFlag: function() {
                        return !0
                    },
                    viewType: function() {
                        return a.viewMode
                    }
                }
            });
            d.then(function(a) {}, function() {})
        }, k = function() {
            var a = {
                siteList: [],
                siteType: "none"
            };
            angular.forEach(h.getSelectedRows(), function(b) {
                a.siteList.push(parseInt(b["site-id"], 10))
            }),
            d.detachSites(a).then(function(a) {
                a.push_feature_template_configuration > a.push_file_template_configuration ? e.go("app.device.status", {
                    activity: c.getStatusAction("PUSH_FEATURE_TEMPLATE_CONFIG").endpoint,
                    pid: a ? a.id : ""
                }) : e.go("app.device.status", {
                    activity: c.getStatusAction("PUSH_FILE_TEMPLATE_CONFIG").endpoint,
                    pid: a ? a.id : ""
                })
            }, function(a) {
                f.error(a.error.message + ":" + a.error.details)
            })
        };
        return i.prototype.createTable = function() {
            h = new a({
                autoLoad: !0,
                columnResizing: !0,
                singleSelect: !1,
                enableExpandable: !0,
                enableSorting: !0,
                multiSelect: !0,
                dataUid: "site-id",
                tableHeightOffset: 180,
                tableName: "gateway-overview",
                isRowSelectable: function(a) {
                    return !0
                }
            },{
                custom: !0,
                customTemplateUrl: "app/configuration/cloudExpress/templates/customManageGatewaysToolbar.html"
            });
            var b = {
                viewSiteDetails: function(a) {
                    a.entity.siteType = "client",
                    a.grid.api.expandable.toggleRowExpansion(a.entity)
                },
                getStatus: function(a) {
                    return _.find(a.entity.vedgeList, function(a) {
                        return a.configStatusMessage.toLowerCase().indexOf("out of sync") > -1
                    }) ? "<div class='dia-device-status table-icon vmanage-spritesheet-url status-out-of-sync'></div>" : _.find(a.entity.vedgeList, function(a) {
                        return "sync pending" === a.configStatusMessage.toLowerCase()
                    }) ? "<div class='dia-device-status table-icon vmanage-spritesheet-url status-sync-pending'></div>" : "<div class='dia-device-status table-icon vmanage-spritesheet-url status-in-sync'></div>"
                }
            };
            return h.setAppScope(b),
            h.setExpandableRowOptions(!1, "app/configuration/cloudExpress/templates/expand-gatewaysDetails.html", 180),
            h
        }
        ,
        i.prototype.setTable = function(a) {
            var b = d.getAttachedSites()
              , c = g.ATTACHED_SITES_URL;
            b.then(function(b) {
                a.setDataUrl(c);
                var d = b.header.columns;
                d.push({
                    displayName: "Status",
                    property: "status",
                    editable: !1,
                    dataType: "string",
                    cellTemplate: '<div class="ui-grid-cell-contents"><div ng-bind-html="grid.appScope.getStatus(row)"></div></div>'
                }),
                d.push({
                    title: "",
                    displayName: "",
                    property: "edit-row",
                    editable: !1,
                    dataType: "string",
                    width: 50,
                    headerTemplate: "ui-grid/ui-grid-no-header",
                    cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-24 icon-bold pointerCursor expandable-row-icon" id="editGroupTasks_{{rowRenderIndex}}" style="margin-top: -5px;" ng-click="grid.appScope.viewSiteDetails(row)">{{!row.isExpanded ? \'keyboard_arrow_right\':\'keyboard_arrow_down\'}}</i></div>'
                }),
                a.createColumns(b.header.columns),
                a.setTableData(b.data),
                a.taggedSearchObject.setSearchCache(b.data)
            }, function(a) {
                f.error(a.error.message + ":" + a.error.details)
            })
        }
        ,
        i.prototype.attachSites = function() {
            var a = this;
            h.data.length ? j(a) : d.getAppsVPN().then(function(b) {
                if (b.data.length)
                    j(a);
                else {
                    var c = {
                        error: {
                            message: "No applications",
                            details: "There are no applications added. Please add applications from Manage Applications view",
                            type: "info"
                        }
                    };
                    f.confirm(c)
                }
            }, function(a) {
                f.error(a.error.message + ":" + a.error.details)
            })
        }
        ,
        i.prototype.detachSites = function() {
            if (h.getSelectedRows().length) {
                var a = {
                    error: {
                        message: "Are you sure you want to detach?",
                        details: h.getSelectedRows().length > 1 ? h.getSelectedRows().length + "sites will be affected" : "1 site will be affected. Are you sure you want to proceed?",
                        type: "warning"
                    }
                };
                f.confirm(a, !0, k)
            } else
                f.info("Please select at least one site")
        }
        ,
        i
    }
    angular.module("vManage").factory("ManageSites", a),
    a.$inject = ["Table", "$mdDialog", "StatusService", "CloudExpressService", "$state", "notification", "configurationConstants"]
}(),
function() {
    function a(a, b, c) {
        a.stateString = c.getStateString(b),
        a.breadCrumb = {
            states: []
        },
        a.$on("$destroy", function() {})
    }
    angular.module("vManage").controller("CloudOnRampController", a),
    a.$inject = ["$scope", "$state", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        a.serverCallInProgress = !1,
        a.filterSelectedDevice = function(b, d) {
            if (!c.isUndefinedOrEmpty(b)) {
                var e = _.findIndex(a.deviceList, function(a) {
                    return angular.equals(a.uuid, b.uuid)
                });
                e > -1 && (a.deviceList[e].selected = !0,
                a.selectedDevices[d] = angular.copy(a.deviceList[e]))
            }
        }
        ,
        a.reAddDevices = function(b) {
            if (angular.equals(b, "device_1") && c.isUndefinedOrEmpty(a.cloudInstance.transitVPC.device_1)) {
                var d = _.findIndex(a.deviceList, function(b) {
                    return angular.equals(a.selectedDevices.device_1.uuid, b.uuid)
                });
                d > -1 && (a.deviceList[d].selected = !1),
                a.selectedDevices.device_1 = null
            }
            if (angular.equals(b, "device_2") && c.isUndefinedOrEmpty(a.cloudInstance.transitVPC.device_2)) {
                var e = _.findIndex(a.deviceList, function(b) {
                    return angular.equals(a.selectedDevices.device_2.uuid, b.uuid)
                });
                e > -1 && (a.deviceList[e].selected = !1),
                a.selectedDevices.device_2 = null
            }
        }
        ,
        a.selectedItemChange = function(b, c) {
            angular.isDefined(a.cloudInstance.accountId) && (angular.isDefined(b) ? (a.filterSelectedDevice(a.cloudInstance.transitVPC.device_1, "device_1"),
            a.filterSelectedDevice(a.cloudInstance.transitVPC.device_2, "device_2")) : a.reAddDevices(c))
        }
        ;
        var j = function(a) {
            var b = angular.lowercase(a);
            return function(a) {
                return 0 === a.toLowerCase().indexOf(b) && !a.selected
            }
        }
          , k = function() {
            return function(a) {
                return !a.selected
            }
        };
        a.querySearch = function(b) {
            var c = d.defer();
            return h(function() {
                var d = b ? a.deviceList.filter(j(b)) : a.deviceList.filter(k());
                c.resolve(d)
            }),
            c.promise
        }
        ,
        a.getDeviceAndVersionList = function() {
            var b = a.cloudInstance.getDeviceList()
              , c = a.cloudInstance.getAmiList()
              , e = a.cloudInstance.getTransitVpcSizes();
            a.serverCallInProgress = !0,
            d.all([b, c, e]).then(function(b) {
                a.serverCallInProgress = !1,
                a.deviceList = angular.copy(a.cloudInstance.deviceList),
                a.selectedDevices = {
                    device_1: null,
                    device_2: null
                },
                a.cloudInstance.deviceList.length < 2 ? (a.disableUuid = !0,
                f.error("No vEdge devices are available for Cloud onRamp. At least 2 vEdge devices should be available in vManage to proceed with this step.", 1e4),
                h(function() {}, 1e4)) : a.disableUuid = !1,
                a.versionList = angular.copy(a.cloudInstance.amiList),
                a.gatewaySizes = angular.copy(a.cloudInstance.gatewaySizes)
            }, function(b) {
                a.serverCallInProgress = !1
            })
        }
        ,
        a.validateState = function() {
            var b = !0;
            return c.isUndefinedOrEmpty(a.cloudInstance.transitVPC) ? b = !1 : angular.forEach(a.cloudInstance.transitVPC, function(a, d) {
                c.isUndefinedOrEmpty(a) && (b = !1)
            }),
            b
        }
        ,
        a.clearTransitVpc = function() {
            angular.isDefined(a.cloudInstance.transitVPC) && (a.cloudInstance.transitVPC = {})
        }
        ,
        a.init = function() {
            a.serverCallInProgress = !0,
            a.cloudInstance = g.getInstance(),
            a.cloudInstance.resetTransitVpc(),
            a.getDeviceAndVersionList()
        }
        ,
        a.init(),
        a.update = function() {
            angular.isDefined(a.addTransitVPCForm) && a.addTransitVPCForm.$invalid ? (f.error("Please complete all fields in order to proceed.", 1e4),
            a.addTransitVPCForm.$submitted = !1) : a.validateState() ? b.hide() : f.error("Please complete all fields in order to proceed.", 1e4)
        }
        ,
        a.cancel = function() {
            a.cloudInstance.resetTransitVpc(),
            b.cancel("cancel")
        }
        ,
        a.$on("$destroy", function() {})
    }
    angular.module("vManage").controller("AddTransitVpcModalController", a),
    a.$inject = ["$scope", "$mdDialog", "appUtil", "$q", "$log", "notification", "CloudManagerFactory", "$timeout", "gatewaySizes"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        angular.isDefined(h) && angular.isDefined(h.accountId) ? a.cloudCredentials = new f(h.accountId) : a.cloudCredentials = new f,
        a.disableButtons = !1,
        a.credentialsMode = angular.copy(h),
        a.headerText = "",
        angular.equals(a.credentialsMode.mode, "edit") ? (a.headerText = "Edit Credentials",
        a.cloudCredentials.cloudType = {
            key: a.credentialsMode.accountType
        }) : angular.equals(a.credentialsMode.mode, "new") && (a.headerText = "Add Cloud Instance - Log In to a cloud server"),
        a.togglePasswordVisibility = function(a) {
            angular.equals(a.inputType, "text") ? a.inputType = "password" : a.inputType = "text"
        }
        ,
        a.cloudCredentials.getCloudTypes().then(function(b) {
            angular.equals(a.cloudCredentials.cloudTypeList.length, 1) && (a.cloudCredentials.cloudType = a.cloudCredentials.cloudTypeList[0])
        }, function(a) {
            c.hide()
        }),
        a.cloudCredentials.iamRole = !1,
        a.cloudCredentials.credentialsType = a.cloudCredentials.credentialsRadioOptions[1],
        a.credentialsTypeUpdate = function(b) {
            angular.equals(a.cloudCredentials.credentialsType, a.cloudCredentials.credentialsRadioOptions[0]) ? a.cloudCredentials.iamRole = !0 : a.cloudCredentials.iamRole = !1
        }
        ,
        a.selectedItemChange = function(a) {}
        ;
        var i = function(a) {
            var b = angular.lowercase(a);
            return function(a) {
                return 0 === a.name.toLowerCase().indexOf(b)
            }
        };
        a.querySearch = function(b) {
            var c = b ? a.cloudCredentials.cloudTypeList.filter(i(b)) : a.cloudCredentials.cloudTypeList;
            return c
        }
        ,
        a.login = function() {
            a.disableButtons = !0,
            a.cloudCredentials.save().then(function(b) {
                a.disableButtons = !1,
                _.isEmpty(b) || (a.cloudInstance = e.getInstance(b.accountId, b.accountName),
                angular.isDefined(b.cloudRegion) ? b.cloudRegion.sort() : "",
                a.cloudInstance.cloudRegionList = angular.copy(b.cloudRegion)),
                angular.isDefined(g) && g(a.cloudCredentials),
                c.hide()
            }, function(b) {
                a.disableButtons = !1
            })
        }
        ,
        a.update = function() {
            a.disableButtons = !0,
            a.cloudCredentials.update().then(function(b) {
                a.disableButtons = !1,
                !_.isEmpty(b),
                c.hide()
            }, function(b) {
                a.disableButtons = !1
            })
        }
        ,
        a.cancel = function() {
            c.cancel("cancel")
        }
    }
    angular.module("vManage").controller("CloudCredentialsController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "CloudManagerFactory", "CloudCredentialsFactory", "returnCallBack", "mode"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        a.serverCallInProgress = !1,
        a.selectedTransitVpcChange = function(b) {
            angular.isDefined(b) && a.getVpnList(b).then(function(b) {
                a.vpnList = angular.copy(b),
                angular.equals(a.vpnList.length, 1) && (a.mappingObj.vpn = a.vpnList[0])
            }, function(b) {
                a.vpnList = [],
                a.mappingObj.vpn = null
            })
        }
        ,
        a.getVpnList = function(b) {
            var c = d.defer();
            if (angular.isDefined(b.deviceList) && angular.equals(b.deviceList.length, 2)) {
                var e = a.cloudInstance.getVpnList(b.deviceList[0].uuid)
                  , f = a.cloudInstance.getVpnList(b.deviceList[1].uuid);
                a.serverCallInProgress = !0,
                d.all([e, f]).then(function(b) {
                    a.serverCallInProgress = !1;
                    var d = _.intersection(b[0], b[1]);
                    c.resolve(d)
                }, function(b) {
                    a.serverCallInProgress = !1,
                    c.reject(b)
                })
            }
            return c.promise
        }
        ;
        var h = function(a) {
            var b = angular.lowercase(a);
            return function(a) {
                return 0 === a.transitVpcName.toLowerCase().indexOf(b)
            }
        };
        a.querySearchTransitVpc = function(b) {
            var c = b ? a.transitVpcList.filter(h(b)) : a.transitVpcList;
            return c
        }
        ,
        a.selectedVpnChange = function(a) {}
        ;
        var i = function(a) {
            var b = angular.lowercase(a);
            return function(a) {
                return 0 === a.toLowerCase().indexOf(b)
            }
        };
        a.querySearchVpn = function(b) {
            var c = b ? a.vpnList.filter(i(b)) : a.vpnList;
            return c
        }
        ,
        a.init = function() {
            a.cloudInstance = g.getInstance(),
            a.mappingObj = {
                transitVpc: null,
                vpn: null
            },
            c.isUndefinedOrEmpty(a.cloudInstance.transitVpcList) ? (f.error("Error: Transit VPC List is unavailable.", 1e4),
            a.cancel()) : (a.transitVpcList = _.chain(a.cloudInstance.transitVpcList).groupBy("transitVpcName").map(function(a) {
                var b = {
                    deviceList: []
                };
                return angular.forEach(a, function(a) {
                    angular.isUndefined(b.transitVpcId) ? b.transitVpcId = a.transitVpcId : "",
                    angular.isUndefined(b.transitVpcName) ? b.transitVpcName = a.transitVpcName : "",
                    b.deviceList.push({
                        uuid: a.uuid
                    })
                }),
                b
            }).value(),
            a.vpnList = [],
            angular.equals(a.transitVpcList.length, 1) && (a.mappingObj.transitVpc = a.transitVpcList[0],
            a.getVpnList(a.mappingObj.transitVpc).then(function(b) {
                a.vpnList = angular.copy(b),
                angular.equals(a.vpnList.length, 1) && (a.mappingObj.vpn = a.vpnList[0])
            }, function(b) {
                a.vpnList = [],
                a.mappingObj.vpn = null
            })))
        }
        ,
        a.init(),
        a.validateMapping = function() {
            var b = !0;
            return angular.forEach(a.mappingObj, function(a, d) {
                c.isUndefinedOrEmpty(a) && (b = !1,
                f.error("Please select Transit VPC and VPN in order to map.", 1e4))
            }),
            b
        }
        ,
        a.update = function() {
            angular.isDefined(a.mapVpcForm) && a.mapVpcForm.$invalid ? (f.error("Please complete all fields in order to proceed.", 1e4),
            a.mapVpcForm.$submitted = !1) : a.validateMapping() && b.hide(a.mappingObj)
        }
        ,
        a.cancel = function() {
            b.cancel("cancel")
        }
    }
    angular.module("vManage").controller("MapVpcModalController", a),
    a.$inject = ["$scope", "$mdDialog", "appUtil", "$q", "$log", "notification", "CloudManagerFactory"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        a.stateString = c.getStateString(b),
        a.breadCrumb.states.reset(),
        a.serverCallInProgress = !0,
        a.checkDevicesSupport = function() {
            var b = g.defer();
            return h.getDeviceList().then(function(c) {
                a.serverCallInProgress = !1,
                a.deviceList = angular.copy(c.data),
                a.deviceList.length < 2 ? (f.error("No vEdge devices are available for Cloud onRamp. At least 2 vEdge devices should be available in vManage to proceed with this step.", 1e4),
                b.reject(!1)) : b.resolve(!0)
            }, function(c) {
                a.deviceList = [],
                a.serverCallInProgress = !1,
                b.reject(!1)
            }),
            b.promise
        }
        ,
        a.launchCredentialsModal = function(b, c) {
            d.show({
                templateUrl: "app/configuration/cloudOnRamp/views/components/cloudCredentials.html",
                controller: "CloudCredentialsController",
                targetEvent: b,
                resolve: {
                    returnCallBack: function() {
                        return a.startWizard
                    },
                    mode: function() {
                        return c
                    }
                }
            })
        }
        ,
        a.getMode = function(a, b) {
            var c = {
                mode: angular.isDefined(a) ? a : "new",
                accountId: null,
                accountName: null,
                accountType: null
            };
            return angular.isDefined(b) && (c.accountId = angular.isDefined(b.accountId) ? b.accountId : null,
            c.accountName = angular.isDefined(b.accountName) ? b.accountName : null,
            c.accountType = angular.isDefined(b.cloudType) ? b.cloudType : null),
            c
        }
        ,
        a.addCloud = function(b) {
            a.checkDevicesSupport().then(function(c) {
                if (c) {
                    var d = a.getMode("new");
                    a.launchCredentialsModal(b, d)
                }
            }, function(a) {})
        }
        ,
        a.editCredentials = function(b, c) {
            var d = a.getMode("edit", c);
            a.launchCredentialsModal(b, d)
        }
        ,
        a.viewCloudOverview = function(c, d) {
            angular.isDefined(c.accountId) && angular.isDefined(c.accountName) && angular.isDefined(d.cloudRegion) ? (h.deleteInstance(),
            a.cloudInstance = h.getInstance(c.accountId, c.accountName),
            a.cloudInstance.cloudRegion = angular.copy(d.cloudRegion),
            _.assign(b.params, {
                accountId: c.accountId,
                cloudRegion: d.cloudRegion
            }),
            b.go("app.config.cloudOnRamp.overview.hostVPC.mapped", b.params)) : f.error("Required account details are unavailable. Please reload the page.", 1e4)
        }
        ,
        a.startWizard = function(a) {
            b.params.cloudId = a,
            b.go("app.config.cloudOnRamp.wizard.hostVPC", b.params)
        }
        ,
        a.getClouds = function() {
            a.serverCallInProgress = !0,
            h.getClouds().then(function(b) {
                a.serverCallInProgress = !1,
                a.dashboardAccounts = angular.copy(b.data)
            }, function(b) {
                a.serverCallInProgress = !1
            })
        }
        ,
        a.init = function() {
            a.corAdmin = i.allowAccess("Cloud OnRamp"),
            a.deviceList = [],
            a.getClouds()
        }
        ,
        a.init(),
        a.$on("$destroy", function() {})
    }
    angular.module("vManage").controller("CloudOnRampDashboardController", a),
    a.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "$log", "notification", "$q", "CloudManagerFactory", "rbac"]
}(),
function() {
    function a(a, b, c, d, e) {
        a.stateString = c.getStateString(b),
        a.breadCrumb.states.reset(),
        a.routes = {
            hostVPC: "app.config.cloudOnRamp.overview.hostVPC.mapped",
            transitVPC: "app.config.cloudOnRamp.overview.transitVPC"
        },
        a.navigateToView = function(c) {
            b.go(a.routes[c], b.params)
        }
        ,
        a.overviewToggleButtons = [new e("Host VPCs",_.includes(b.current.name, "app.config.cloudOnRamp.overview.hostVPC"),a.routes.hostVPC,b.params), new e("Gateway VPCs",_.includes(b.current.name, a.routes.transitVPC),a.routes.transitVPC,b.params)],
        a.$on("$destroy", function() {
            d.deleteInstance()
        })
    }
    angular.module("vManage").controller("CloudOnRampOverviewController", a),
    a.$inject = ["$scope", "$state", "appUtil", "CloudManagerFactory", "ToggleButton"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        a.stateString = c.getStateString(b),
        a.breadCrumb.states.reset(),
        a.breadCrumb.states = [{
            name: "cloudOnRampDashboard",
            title: "Dashboard",
            state: "app.config.cloudOnRamp.dashboard"
        }, {
            name: "cloudOnRampOverview",
            title: "Overview",
            state: "app.config.cloudOnRamp.overview.hostVPC"
        }],
        a.stateParams = b.params,
        a.$on("$stateChangeSuccess", function(b, c, d, e, f) {
            a.currentNavItem = c.data.selectedNavItem
        }),
        a.init = function() {
            return angular.isDefined(b.params.accountId) && angular.isDefined(b.params.cloudRegion) ? (a.cloudInstance = f.getInstance(b.params.accountId),
            c.isUndefinedOrEmpty(a.cloudInstance.cloudRegion) && (a.cloudInstance.cloudRegion = angular.copy(b.params.cloudRegion)),
            a.stateParams = b.params,
            void (a.currentNavItem = b.current.data.selectedNavItem)) : (b.go("app.config.cloudOnRamp.dashboard", b.params),
            !1)
        }
        ,
        a.init(),
        a.$on("$destroy", function() {})
    }
    angular.module("vManage").controller("OverviewHostVPCController", a),
    a.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "Table", "CloudManagerFactory"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        a.stateString = c.getStateString(b),
        a.breadCrumb.states.reset(),
        a.breadCrumb.states = [{
            name: "cloudOnRampDashboard",
            title: "Dashboard",
            state: "app.config.cloudOnRamp.dashboard"
        }, {
            name: "cloudOnRampOverview",
            title: angular.isDefined(b.params.cloudRegion) ? b.params.cloudRegion : "Mapped Host VPCs",
            state: "app.config.cloudOnRamp.overview.hostVPC.mapped"
        }];
        var i = [{
            title: "Host VPCs",
            property: "hostVpcName",
            dataType: "string"
        }, {
            title: "Host VPC ID",
            property: "hostVpcId",
            dataType: "string",
            visible: !1
        }, {
            title: "Host VPC State",
            property: "hostVpcReachability",
            dataType: "string",
            visible: !0,
            cellTemplate: '<div layout="row" layout-align="start center" class="ui-grid-cell-contents" id="host_vpc_state_{{rowRenderIndex}}"><i ng-if="row.entity[\'hostVpcReachability\'] === \'1\'" class="material-icons" style="color:#90cc84; font-size: 20px;">arrow_upward</i><i ng-if="row.entity[\'hostVpcReachability\'] === \'0\'" class="material-icons" style="color:#ff6e56; font-size: 20px;">arrow_downward</i></div>'
        }, {
            title: "Gateway VPC",
            property: "transitVpcName",
            dataType: "string"
        }, {
            title: "Gateway VPC ID",
            property: "transitVpcId",
            dataType: "string",
            visible: !1
        }, {
            title: "Gateway VPC State",
            property: "transitVpcReachability",
            dataType: "string",
            visible: !0,
            cellTemplate: '<div layout="row" layout-align="start center" class="ui-grid-cell-contents" id="transit_vpc_state_{{rowRenderIndex}}"><i ng-if="row.entity[\'transitVpcReachability\'] === \'2\'" class="material-icons" style="color:#90cc84; font-size: 20px;">arrow_upward</i><i ng-if="row.entity[\'transitVpcReachability\'] === \'1\'" class="material-icons" style="color:#ffd562; font-size: 20px;">error</i><i ng-if="row.entity[\'transitVpcReachability\'] === \'0\'" class="material-icons" style="color:#ff6e56; font-size: 20px;">arrow_downward</i></div>'
        }, {
            title: "VPN Segment",
            property: "transitVpcVpn",
            dataType: "string"
        }];
        a.unmapVPC = function(c) {
            var e = a.table.uiGridApi.selection.getSelectedRows()
              , f = d.confirm().title("Are you sure you want to unmap selected Host VPCs?").textContent("").ariaLabel("UnMap selected Host VPCs").targetEvent(c).ok("OK").cancel("Cancel");
            d.show(f).then(function() {
                var c = {
                    hostVpcList: []
                };
                angular.forEach(e, function(a) {
                    c.hostVpcList.push({
                        hostVpcId: a.hostVpcId
                    })
                }),
                a.cloudInstance.unmapHostVpc(c).then(function(c) {
                    a.refreshTableData(),
                    a.table.uiGridApi.selection.clearSelectedRows(),
                    angular.isDefined(c.id) && b.go("app.device.status", {
                        activity: h.getStatusAction("CREATE_TRANSIT_VPC").endpoint,
                        pid: c ? c.id : ""
                    })
                }, function(a) {})
            }, function() {})
        }
        ,
        a.refreshTableData = function() {
            a.cloudInstance.getMappedTable().then(function(b) {
                a.table.refreshTableData(b)
            }, function(a) {})
        }
        ,
        a.init = function() {
            a.cloudInstance = g.getInstance();
            var b = new f({
                autoLoad: !0,
                columnResizing: !0,
                multiSelect: !0,
                enableSorting: !0,
                dataUid: "hostVpcId",
                tableHeightOffset: 285,
                isRowSelectable: function(a) {
                    return !0
                }
            });
            b.setLocalActions([{
                title: "Un-Map VPCs",
                icon: "sync_disabled",
                rbac: "Cloud OnRamp",
                precheck: "",
                action: a.unmapVPC
            }]),
            a.table = b,
            a.table.createColumns(i),
            a.cloudInstance.getMappedTable().then(function(b) {
                a.table.setTableData(b)
            }, function(a) {}),
            a.table.setPostRefreshCallback(function() {
                a.refreshTableData()
            })
        }
        ,
        a.init(),
        a.$on("$destroy", function() {})
    }
    angular.module("vManage").controller("OverviewMappedHostVPCController", a),
    a.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "notification", "Table", "CloudManagerFactory", "StatusService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        a.stateString = c.getStateString(b),
        a.breadCrumb.states.reset(),
        a.breadCrumb.states = [{
            name: "cloudOnRampDashboard",
            title: "Dashboard",
            state: "app.config.cloudOnRamp.dashboard"
        }, {
            name: "cloudOnRampOverview",
            title: angular.isDefined(b.params.cloudRegion) ? b.params.cloudRegion : "Un-Mapped Host VPCs",
            state: "app.config.cloudOnRamp.overview.hostVPC.unmapped"
        }];
        var j = [{
            title: "Discovered Host VPCs",
            property: "hostVpcName",
            dataType: "string"
        }, {
            title: "Host VPC ID",
            property: "hostVpcId",
            dataType: "string",
            hideable: !0,
            visible: !0
        }, {
            title: "CIDR",
            property: "cidr",
            dataType: "string",
            hideable: !0,
            visible: !0
        }];
        a.discoverHostVPC = function() {
            a.cloudInstance.discoverHostVPC().then(function(b) {
                a.table.setTableData(a.cloudInstance.hostVPCList)
            }, function(b) {
                a.table.setTableData([])
            })
        }
        ,
        a.mapVPC = function(c) {
            var e = a.table.uiGridApi.selection.getSelectedRows();
            d.show({
                templateUrl: "app/configuration/cloudOnRamp/views/components/mapVpcModal.html",
                controller: "MapVpcModalController",
                targetEvent: c
            }).then(function(c) {
                var d = _.map(e, function(a) {
                    return {
                        hostVpcName: a.hostVpcName,
                        hostVpcId: a.hostVpcId
                    }
                })
                  , f = a.cloudInstance.createMapPayload(c, d);
                a.cloudInstance.mapHostVpc(f).then(function(a) {
                    angular.isDefined(a.id) && b.go("app.device.status", {
                        activity: i.getStatusAction("CREATE_TRANSIT_VPC").endpoint,
                        pid: a ? a.id : ""
                    })
                }, function(a) {}),
                a.table.uiGridApi.selection.clearSelectedRows(),
                b.go(app.config.cloudOnRamp.overview.hostVPC.mapped, b.params)
            }, function() {
                f.info("Modal dismissed at: " + new Date)
            })
        }
        ,
        a.refreshTableData = function() {
            a.cloudInstance.discoverHostVPC().then(function(b) {
                a.table.refreshTableData(a.cloudInstance.hostVPCList)
            }, function(b) {
                a.table.setTableData([])
            })
        }
        ,
        a.init = function() {
            a.cloudInstance = h.getInstance();
            var b = new g({
                autoLoad: !0,
                columnResizing: !0,
                multiSelect: !0,
                enableSorting: !0,
                dataUid: "hostVpcId",
                tableHeightOffset: 315,
                isRowSelectable: function(a) {
                    return !0
                }
            });
            b.setLocalActions([{
                title: "Map VPCs",
                icon: "sync",
                rbac: "Cloud OnRamp",
                precheck: "",
                action: a.mapVPC
            }]),
            a.table = b,
            a.table.createColumns(j),
            a.cloudInstance.getTransitVpcList().then(function(a) {}, function(a) {}),
            a.table.setPostRefreshCallback(function() {
                a.refreshTableData()
            })
        }
        ,
        a.init(),
        a.$on("$destroy", function() {})
    }
    angular.module("vManage").controller("OverviewUnmappedHostVPCController", a),
    a.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "$q", "$log", "Table", "CloudManagerFactory", "StatusService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        a.stateString = c.getStateString(b),
        a.breadCrumb.states.reset(),
        a.breadCrumb.states = [{
            name: "cloudOnRampDashboard",
            title: "Dashboard",
            state: "app.config.cloudOnRamp.dashboard"
        }, {
            name: "cloudOnRampOverview",
            title: angular.isDefined(b.params.cloudRegion) ? b.params.cloudRegion : "Gateway VPCs",
            state: "app.config.cloudOnRamp.overview.transitVPC"
        }];
        var l = '<div ng-if=\'row.treeLevel === 0\' class="ui-grid-cell-contents" title="TOOLTIP">{{COL_FIELD}}</div>'
          , m = '<div ng-if=\'row.treeLevel != 0\' class="ui-grid-cell-contents" title="TOOLTIP">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
          , n = {
            title: "Action",
            displayName: "",
            property: "modify-row",
            editable: !1,
            dataType: "string",
            width: 50,
            hideable: !1,
            isRightPinned: !0,
            enableColumnResizing: !1,
            headerTemplate: "ui-grid/ui-grid-no-header",
            cellTemplate: '<div layout="row" layout-align="start center" class="ui-grid-cell-contents"ng-show="grid.appScope.isParentRow(row)"><i class="material-icons md-20 pointerCursor blue" id="removeRow_{{row.entity.transitVpcId}}" ng-click="grid.appScope.removeRow($event, row, rowRenderIndex)">delete</div>'
        }
          , o = [{
            title: "Gateway VPC Name",
            property: "transitVpcName",
            hideable: !0,
            dataType: "string",
            minWidth: 150,
            enableColumnResizing: !0,
            cellTemplate: l
        }, {
            title: "Gateway VPC Id",
            property: "transitVpcId",
            hideable: !0,
            visible: !0,
            dataType: "string",
            enableColumnResizing: !0,
            cellTemplate: l
        }, {
            title: "Size of Gateway VPC",
            property: "transitVpcSize",
            hideable: !0,
            dataType: "string",
            minWidth: 220,
            enableColumnResizing: !0,
            cellTemplate: l
        }, {
            title: "vEdge Serial Number/ OTP",
            property: "uuid",
            hideable: !0,
            dataType: "string",
            minWidth: 270,
            enableColumnResizing: !0,
            cellTemplate: m
        }, {
            title: "Hostname",
            property: "host-name",
            hideable: !0,
            minWidth: 150,
            dataType: "string",
            enableColumnResizing: !0,
            cellTemplate: m
        }, {
            title: "System IP",
            property: "deviceIP",
            hideable: !0,
            minWidth: 150,
            dataType: "ipv4",
            enableColumnResizing: !0,
            cellTemplate: m
        }, {
            title: "Instance Id",
            property: "instanceId",
            hideable: !0,
            minWidth: 150,
            dataType: "string",
            enableColumnResizing: !0,
            cellTemplate: m
        }, {
            title: "vEdge State",
            property: "reachability",
            hideable: !0,
            dataType: "string",
            enableColumnResizing: !0,
            cellTemplate: '<div layout="row" layout-align="start center" class="ui-grid-cell-contents" id="transit_vpc_state_{{rowRenderIndex}}" ng-if="row.treeLevel != 0"><i ng-if="row.entity[\'reachability\'] === \'1\'" class="material-icons" style="color:#90cc84; font-size: 20px;">arrow_upward</i><i ng-if="row.entity[\'reachability\'] === \'0\'" class="material-icons" style="color:#ff6e56; font-size: 20px;">arrow_downward</i></div>'
        }, {
            title: "Interface Stats",
            property: "interface-stats",
            hideable: !0,
            minWidth: 80,
            dataType: "string",
            enableColumnResizing: !0,
            cellTemplate: '<div layout="row" layout-align="start center" class="ui-grid-cell-contents"ng-show="!grid.appScope.isParentRow(row)"><i class="material-icons md-20 pointerCursor blue" id="removeRow_{{row.entity.transitVpcId}}" ng-click="grid.appScope.showStats($event, row, rowRenderIndex)">trending_up</div>'
        }, {
            title: "Reference Count",
            property: "hostVpcCount",
            hideable: !0,
            dataType: "number",
            minWidth: 20,
            width: 100,
            enableColumnResizing: !0,
            cellTemplate: l
        }];
        a.refreshTableData = function() {
            a.cloudInstance.getTransitVpcList().then(function(b) {
                a.table.refreshTableData(b.data),
                f(function() {
                    a.table.uiGridApi.treeBase.expandAllRows()
                })
            }, function(a) {})
        }
        ,
        a.addTransitVpc = function(c) {
            g.show({
                templateUrl: "app/configuration/cloudOnRamp/views/components/addTransitVpcModal.html",
                controller: "AddTransitVpcModalController",
                targetEvent: c
            }).then(function(c) {
                a.cloudInstance.createTransitVpc().then(function(a) {
                    angular.isDefined(a.id) && b.go("app.device.status", {
                        activity: i.getStatusAction("CREATE_TRANSIT_VPC").endpoint,
                        pid: a ? a.id : ""
                    })
                }, function(a) {})
            }, function() {
                h.info("Add Gateway VPC Modal dismissed at: " + new Date)
            })
        }
        ,
        a.init = function() {
            if (!angular.isDefined(b.params.accountId) || !angular.isDefined(b.params.cloudRegion))
                return b.go("app.config.cloudOnRamp.dashboard", b.params),
                !1;
            a.cloudInstance = d.getInstance(b.params.accountId),
            c.isUndefinedOrEmpty(a.cloudInstance.cloudRegion) && (a.cloudInstance.cloudRegion = angular.copy(b.params.cloudRegion)),
            a.stateParams = b.params,
            a.corAdmin = k.allowAccess("Cloud OnRamp");
            var i = new e({
                toolbar: !0,
                autoLoad: !0,
                columnResizing: !0,
                singleSelect: !0,
                enableSorting: !0,
                tableHeightOffset: 235,
                dataUid: "transitVpcId",
                tableName: "transitVpcTable",
                selectAll: !1,
                isRowSelectable: !1
            });
            i.setAppScope({
                isParentRow: function(a) {
                    return !angular.isDefined(a.treeNode) || _.isEmpty(a.treeNode.parentRow)
                },
                removeRow: function(c, d, e) {
                    if (d.entity.hostVpcCount > 0)
                        j.warning("Please un-map Host VPCs before deleting this Gateway VPC.", 1e4);
                    else {
                        var f = g.confirm().title("Are you sure you want to delete this Gateway VPC?").textContent("This Gateway VPC will be deleted. You cannot undo this action.").ariaLabel("Delete Gateway VPC").targetEvent(c).ok("OK").cancel("Cancel");
                        g.show(f).then(function() {
                            a.cloudInstance.deleteTransitVpc(d.entity.transitVpcId).then(function(a) {
                                angular.isDefined(a.id) && b.go("app.device.status", {
                                    activity: "delete_transit_vpc",
                                    pid: a ? a.id : ""
                                })
                            }, function(a) {}),
                            a.refreshTableData()
                        }, function() {})
                    }
                },
                showStats: function(c, e, f) {
                    angular.isDefined(e.entity.uuid) && (a.serverCallInProgress = !0,
                    d.getDeviceDetails(e.entity.uuid).then(function(d) {
                        if (a.serverCallInProgress = !1,
                        angular.isDefined(d.data) && !_.isEmpty(d.data)) {
                            var f = angular.copy(d.data[0])
                              , i = {
                                deviceType: angular.isDefined(f["device-type"]) ? f["device-type"] : "",
                                deviceModel: angular.isDefined(f["device-model"]) ? f["device-model"] : "",
                                systemIp: angular.isDefined(f["system-ip"]) ? f["system-ip"] : "",
                                localSystemIp: angular.isDefined(f["local-system-ip"]) ? f["local-system-ip"] : "",
                                deviceVersion: angular.isDefined(f.version) ? f.version : "",
                                reachability: angular.isDefined(f.reachability) ? f.reachability : "",
                                uuid: angular.isDefined(f.uuid) ? f.uuid : e.entity.uuid,
                                ifname: "ipsec"
                            };
                            _.assign(b.params, i);
                            g.show({
                                templateUrl: "app/configuration/cloudOnRamp/views/components/interfaceStatsModal.html",
                                controller: "InterfaceController",
                                targetEvent: c,
                                resolve: {
                                    $state: function() {
                                        return b
                                    }
                                }
                            }).then(function(a) {}, function() {
                                h.info("Modal dismissed at: " + new Date)
                            })
                        } else
                            j.error("Data unavailable.", 1e4),
                            h.error("Device-Info data unavailable.")
                    }, function(b) {
                        a.serverCallInProgress = !1
                    }))
                }
            }),
            a.table = i,
            a.corAdmin && o.push(n),
            a.table.createColumns(o),
            a.table.setTreeLevelGroupings([{
                treeLevel: 0,
                groupByProperty: "transitVpcId",
                newRowProperty: "transitVpcId",
                copyToParent: ["transitVpcName", "transitVpcSize", "hostVpcCount"]
            }]),
            a.cloudInstance.getTransitVpcList().then(function(b) {
                a.table.setTableData(b.data),
                f(function() {
                    a.table.uiGridApi.treeBase.expandAllRows()
                })
            }, function(a) {}),
            a.table.setPostRefreshCallback(function() {
                a.refreshTableData()
            })
        }
        ,
        a.init(),
        a.$on("$destroy", function() {})
    }
    angular.module("vManage").controller("OverviewTransitVPCController", a),
    a.$inject = ["$scope", "$state", "appUtil", "CloudManagerFactory", "TreeBasedTable", "$timeout", "$mdDialog", "$log", "StatusService", "notification", "rbac"]
}(),
function() {
    function a(a, b, c, d) {
        a.stateString = c.getStateString(b),
        a.breadCrumb.states.reset(),
        a.cloudInstance = d.getInstance(),
        a.navigateToView = function(a) {
            angular.equals(a.state, "disabled") || b.go(a.route, b.params)
        }
        ,
        b.go("app.config.cloudOnRamp.wizard.hostVPC", b.params),
        a.$on("$destroy", function() {
            d.deleteInstance()
        })
    }
    angular.module("vManage").controller("CloudOnRampWizardController", a),
    a.$inject = ["$scope", "$state", "appUtil", "CloudManagerFactory"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        a.stateString = c.getStateString(b),
        a.breadCrumb.states.reset(),
        a.breadCrumb.states = [{
            name: "cloudOnRampDashboard",
            title: "Dashboard",
            state: "app.config.cloudOnRamp.dashboard"
        }, {
            name: "cloudOnRampWizard",
            title: "Add Transit VPC",
            state: "app.config.cloudOnRamp.wizard.transitVPC"
        }],
        a.updateGraphic = function(b) {
            a.imagePath = a.cloudInstance.wizardStages.step2.images[b].path
        }
        ,
        a.getDeviceAndVersionList = function() {
            var b = a.cloudInstance.getDeviceList()
              , c = a.cloudInstance.getAmiList()
              , d = a.cloudInstance.getTransitVpcSizes();
            a.serverCallInProgress = !0,
            i.all([b, c, d]).then(function(b) {
                a.serverCallInProgress = !1,
                a.deviceList = angular.copy(a.cloudInstance.deviceList),
                angular.forEach(a.deviceList, function(a) {
                    a.selected = !1
                }),
                a.selectedDevices = {
                    device_1: {
                        uuid: ""
                    },
                    device_2: {
                        uuid: ""
                    }
                },
                angular.isDefined(a.cloudInstance.transitVPC.device_1) && !_.isEmpty(a.cloudInstance.transitVPC.device_1.uuid) && a.filterSelectedDevice(a.cloudInstance.transitVPC.device_1, "device_1"),
                angular.isDefined(a.cloudInstance.transitVPC.device_2) && !_.isEmpty(a.cloudInstance.transitVPC.device_2.uuid) && a.filterSelectedDevice(a.cloudInstance.transitVPC.device_2, "device_2"),
                a.cloudInstance.deviceList.length < 2 ? (a.disableUuid = !0,
                f.error("No vEdge devices are available for Cloud onRamp. At least 2 vEdge devices should be available in vManage to proceed with this step.", 1e4),
                e(function() {}, 1e4)) : a.disableUuid = !1,
                a.versionList = angular.copy(a.cloudInstance.amiList),
                a.gatewaySizes = angular.copy(a.cloudInstance.gatewaySizes)
            }, function(b) {
                a.serverCallInProgress = !1
            })
        }
        ,
        a.filterSelectedDevice = function(b, d) {
            if (!c.isUndefinedOrEmpty(b)) {
                var e = _.findIndex(a.deviceList, function(a) {
                    return angular.equals(a.uuid, b.uuid)
                });
                e > -1 && (a.deviceList[e].selected = !0,
                a.selectedDevices[d] = angular.copy(a.deviceList[e]))
            }
        }
        ,
        a.reAddDevices = function(b) {
            if (angular.equals(b, "device_1") && c.isUndefinedOrEmpty(a.cloudInstance.transitVPC.device_1)) {
                var d = _.findIndex(a.deviceList, function(b) {
                    return angular.equals(a.selectedDevices.device_1.uuid, b.uuid)
                });
                d > -1 && (a.deviceList[d].selected = !1),
                a.selectedDevices.device_1 = {
                    uuid: ""
                }
            }
            if (angular.equals(b, "device_2") && c.isUndefinedOrEmpty(a.cloudInstance.transitVPC.device_2)) {
                var e = _.findIndex(a.deviceList, function(b) {
                    return angular.equals(a.selectedDevices.device_2.uuid, b.uuid)
                });
                e > -1 && (a.deviceList[e].selected = !1),
                a.selectedDevices.device_2 = {
                    uuid: ""
                }
            }
        }
        ,
        a.selectedItemChange = function(b, c) {
            angular.isDefined(a.cloudInstance.accountId) && (angular.isDefined(b) ? (a.filterSelectedDevice(a.cloudInstance.transitVPC.device_1, "device_1"),
            a.filterSelectedDevice(a.cloudInstance.transitVPC.device_2, "device_2")) : a.reAddDevices(c))
        }
        ;
        var j = function(a) {
            var b = angular.lowercase(a);
            return function(a) {
                return 0 === a.uuid.toLowerCase().indexOf(b) && !a.selected
            }
        }
          , k = function() {
            return function(a) {
                return !a.selected
            }
        };
        a.querySearch = function(b) {
            var c = i.defer();
            return e(function() {
                var d = b ? a.deviceList.filter(j(b)) : a.deviceList.filter(k());
                c.resolve(d)
            }),
            c.promise
        }
        ,
        a.warningToComplete = function() {
            f.warn("Please complete the form in order to proceed.")
        }
        ,
        a.validateState = function() {
            var b = !0;
            return c.isUndefinedOrEmpty(a.cloudInstance.transitVPC) ? b = !1 : angular.forEach(a.cloudInstance.transitVPC, function(a, d) {
                c.isUndefinedOrEmpty(a) && (b = !1)
            }),
            b
        }
        ,
        a.nextState = function() {
            angular.isDefined(a.addTransitVPCForm) && a.addTransitVPCForm.$invalid ? (f.error("Please complete all fields in order to proceed.", 1e4),
            a.addTransitVPCForm.$submitted = !1) : a.validateState() ? (a.cloudInstance.updateMappingTransitVpcName(),
            a.cloudInstance.transitVpcList = [{
                transitVpcId: null,
                transitVpcName: a.cloudInstance.transitVPC.transitVpcName,
                uuid: a.cloudInstance.transitVPC.device_1.uuid
            }, {
                transitVpcId: null,
                transitVpcName: a.cloudInstance.transitVPC.transitVpcName,
                uuid: a.cloudInstance.transitVPC.device_2.uuid
            }],
            a.cloudInstance.wizardStages.step2.completed = !0,
            a.cloudInstance.nextStep("step2", b.params)) : f.error("Please complete all fields in order to proceed.", 1e4)
        }
        ,
        a.previousState = function() {
            a.cloudInstance.previousStep("step2", b.params)
        }
        ,
        a.cancel = function() {
            b.go("app.config.cloudOnRamp.dashboard", b.params)
        }
        ,
        a.init = function() {
            return a.cloudInstance = d.getInstance(),
            a.corAdmin = g.allowAccess("Cloud OnRamp"),
            c.isUndefinedOrEmpty(a.cloudInstance.accountId) || !a.corAdmin ? (b.go("app.config.cloudOnRamp.dashboard", b.params),
            !1) : (a.updateGraphic(0),
            angular.isDefined(a.cloudInstance.transitVPC) || a.cloudInstance.resetTransitVpc(),
            void a.getDeviceAndVersionList())
        }
        ,
        a.init(),
        a.$on("$destroy", function() {})
    }
    angular.module("vManage").controller("WizardAddTransitVPCController", a),
    a.$inject = ["$scope", "$state", "appUtil", "CloudManagerFactory", "$timeout", "notification", "rbac", "gatewaySizes", "$q"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        a.stateString = c.getStateString(b),
        a.breadCrumb.states.reset(),
        a.breadCrumb.states = [{
            name: "cloudOnRampDashboard",
            title: "Dashboard",
            state: "app.config.cloudOnRamp.dashboard"
        }, {
            name: "cloudOnRampWizard",
            title: "Discover Host VPC",
            state: "app.config.cloudOnRamp.wizard.hostVPC"
        }];
        var i = [{
            title: "Discovered Host VPCs",
            property: "hostVpcName",
            dataType: "string"
        }, {
            title: "Host VPC ID",
            property: "hostVpcId",
            dataType: "string",
            hideable: !0,
            visible: !0
        }, {
            title: "CIDR",
            property: "cidr",
            dataType: "ipv4",
            hideable: !0,
            visible: !1
        }];
        a.hostVpcsDiscovered = !1,
        a.completedImage = !1,
        a.updateGraphic = function(b) {
            a.completedImage = angular.equals(b, 1)
        }
        ,
        a.discoverHostVPC = function() {
            c.isUndefinedOrEmpty(a.cloudInstance.cloudRegion) || a.cloudInstance.discoverHostVPC().then(function(b) {
                a.hostVpcsDiscovered = !0,
                a.cloudInstance.hostVPCList.length > 0 && a.updateGraphic(1),
                a.hostVPCTable.setTableData(a.cloudInstance.hostVPCList)
            }, function(b) {
                a.hostVPCTable.setTableData([])
            })
        }
        ,
        a.refreshTableData = function() {
            c.isUndefinedOrEmpty(a.cloudInstance.cloudRegion) || a.cloudInstance.discoverHostVPC().then(function(b) {
                a.hostVpcsDiscovered = !0,
                a.cloudInstance.hostVPCList.length > 0 && a.updateGraphic(1),
                a.hostVPCTable.refreshTableData(a.cloudInstance.hostVPCList)
            }, function(b) {
                a.hostVPCTable.setTableData([])
            })
        }
        ,
        a.validateState = function() {
            if (c.isUndefinedOrEmpty(a.cloudInstance.cloudRegion))
                return g.error("Please select a cloud region and discover Host VPCs to proceed.", 1e4),
                !1;
            if (c.isUndefinedOrEmpty(a.cloudInstance.hostVPCList))
                return g.error("Host VPCs are not available. Please Discover Host VPCs or select a region with Host VPCs to proceed.", 1e4),
                !1;
            var b = a.hostVPCTable.uiGridApi.selection.getSelectedRows();
            return _.isEmpty(b) ? (g.error("Please select Host VPCs to proceed.", 1e4),
            !1) : (a.cloudInstance.filteredHostVpcList = _.map(b, function(a) {
                return {
                    hostVpcId: a.hostVpcId,
                    hostVpcName: a.hostVpcName,
                    cidr: a.cidr
                }
            }),
            !0)
        }
        ,
        a.nextState = function() {
            a.validateState() && (a.cloudInstance.wizardStages.step1.completed = !0,
            a.cloudInstance.nextStep("step1", b.params))
        }
        ,
        a.previousState = function() {
            a.cloudInstance.previousStep("step1", b.params)
        }
        ,
        a.selectedItemChange = function(b) {
            a.cloudInstance.hostVPCList = [],
            a.hostVpcsDiscovered = !1,
            a.cloudInstance.disableSteps(["step2", "step3"]),
            a.updateGraphic(0)
        }
        ;
        var j = function(a) {
            var b = angular.lowercase(a);
            return function(a) {
                return 0 === a.toLowerCase().indexOf(b)
            }
        };
        a.querySearch = function(b) {
            var c = b ? a.cloudInstance.cloudRegionList.filter(j(b)) : a.cloudInstance.cloudRegionList;
            return c
        }
        ,
        a.cancel = function() {
            b.go("app.config.cloudOnRamp.dashboard", b.params)
        }
        ,
        a.init = function() {
            return a.cloudInstance = d.getInstance(),
            a.corAdmin = f.allowAccess("Cloud OnRamp"),
            c.isUndefinedOrEmpty(a.cloudInstance.accountId) || !a.corAdmin ? (b.go("app.config.cloudOnRamp.dashboard", b.params),
            !1) : (a.updateGraphic(0),
            a.hostVPCTable = new e({
                autoLoad: !0,
                columnResizing: !0,
                multiSelect: !0,
                enableSorting: !0,
                dataUid: "hostVpcId",
                tableHeightOffset: 500,
                isRowSelectable: function(a) {
                    return !0
                }
            }),
            a.hostVPCTable.createColumns(i),
            a.hostVPCTable.setPostRefreshCallback(function() {
                a.refreshTableData()
            }),
            void (!c.isUndefinedOrEmpty(a.cloudInstance.cloudRegion) && angular.isDefined(a.cloudInstance.hostVPCList) ? _.isEmpty(a.cloudInstance.hostVPCList) ? a.discoverHostVPC() : (a.hostVpcsDiscovered = !0,
            a.updateGraphic(1),
            a.hostVPCTable.setTableData(a.cloudInstance.hostVPCList)) : a.cloudInstance.hostVPCList = []))
        }
        ,
        a.init(),
        a.$on("$destroy", function() {})
    }
    angular.module("vManage").controller("WizardDiscoverHostVPCController", a),
    a.$inject = ["$scope", "$state", "appUtil", "CloudManagerFactory", "Table", "rbac", "notification", "$log"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        a.stateString = c.getStateString(b),
        a.breadCrumb.states.reset(),
        a.breadCrumb.states = [{
            name: "cloudOnRampDashboard",
            title: "Dashboard",
            state: "app.config.cloudOnRamp.dashboard"
        }, {
            name: "cloudOnRampWizard",
            title: "Mapping Configuration",
            state: "app.config.cloudOnRamp.wizard.mapVPC"
        }],
        a.disableButtons = !1;
        var k = [{
            title: "Host VPCs",
            property: "hostVpcName",
            dataType: "string"
        }, {
            title: "Host VPC ID",
            property: "hostVpcId",
            dataType: "string",
            visible: !1
        }, {
            title: "CIDR",
            property: "cidr",
            dataType: "ipv4",
            visible: !1
        }, {
            title: "Mapping Status",
            property: "mapping",
            dataType: "string",
            cellTemplate: '<div layout="row" layout-align="start center" class="ui-grid-cell-contents" id="mapping_status_{{rowRenderIndex}}"><i ng-if="row.entity[\'mapping\'] === true" class="material-icons" style="color:#90cc84; font-size: 20px;">check_circle</i><span ng-if="row.entity[\'mapping\'] != true" ">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</span></div>'
        }, {
            title: "Gateway VPC",
            property: "transitVpcName",
            dataType: "string"
        }, {
            title: "VPN Segment",
            property: "vpn",
            dataType: "string"
        }];
        a.mapVPC = function(b) {
            var c = a.table.uiGridApi.selection.getSelectedRows();
            f.show({
                templateUrl: "app/configuration/cloudOnRamp/views/components/mapVpcModal.html",
                controller: "MapVpcModalController",
                targetEvent: b
            }).then(function(b) {
                a.selected = b,
                angular.forEach(c, function(a) {
                    a.transitVpcName = b.transitVpc.transitVpcName,
                    a.vpn = b.vpn,
                    a.mapping = !0
                });
                var d = _.map(c, function(a) {
                    return {
                        hostVpcName: a.hostVpcName,
                        hostVpcId: a.hostVpcId,
                        mapping: !0,
                        vpn: b.vpn,
                        transitVpcName: b.transitVpc.transitVpcName
                    }
                });
                angular.forEach(d, function(b) {
                    var c = _.findIndex(a.cloudInstance.filteredHostVpcList, function(a) {
                        return angular.equals(b.hostVpcId, a.hostVpcId)
                    });
                    c > -1 && _.assign(a.cloudInstance.filteredHostVpcList[c], b)
                }),
                a.updateGraphic(),
                a.table.uiGridApi.selection.clearSelectedRows()
            }, function() {
                g.info("Modal dismissed at: " + new Date),
                a.updateGraphic()
            })
        }
        ,
        a.unmapVPC = function(b) {
            var c = a.table.uiGridApi.selection.getSelectedRows()
              , d = f.confirm().title("Are you sure you want to un-map?").textContent("").ariaLabel("UnMap Host VPC").targetEvent(b).ok("OK").cancel("Cancel");
            f.show(d).then(function() {
                angular.forEach(c, function(b) {
                    angular.isDefined(b.transitVpcName) && delete b.transitVpcName,
                    angular.isDefined(b.vpn) && delete b.vpn,
                    b.mapping = !1;
                    var c = _.findIndex(a.cloudInstance.filteredHostVpcList, function(a) {
                        return angular.equals(a.hostVpcId, b.hostVpcId)
                    });
                    c > -1 && (angular.isDefined(a.cloudInstance.filteredHostVpcList[c].transitVpcName) && delete a.cloudInstance.filteredHostVpcList[c].transitVpcName,
                    angular.isDefined(a.cloudInstance.filteredHostVpcList[c].vpn) && delete a.cloudInstance.filteredHostVpcList[c].vpn,
                    _.assign(a.cloudInstance.filteredHostVpcList[c], {
                        mapping: !1
                    }))
                }),
                a.updateGraphic(),
                a.table.uiGridApi.selection.clearSelectedRows()
            }, function() {
                a.updateGraphic()
            })
        }
        ,
        a.updateGraphic = function() {
            a.completedImage = a.cloudInstance.checkMappingExists()
        }
        ,
        a.init = function() {
            if (a.cloudInstance = d.getInstance(),
            a.corAdmin = j.allowAccess("Cloud OnRamp"),
            c.isUndefinedOrEmpty(a.cloudInstance.accountId) || !a.corAdmin)
                return b.go("app.config.cloudOnRamp.dashboard", b.params),
                !1;
            a.updateGraphic();
            var f = new e({
                autoLoad: !0,
                columnResizing: !0,
                multiSelect: !0,
                enableSorting: !0,
                dataUid: "hostVpcId",
                tableHeightOffset: 300,
                isRowSelectable: function(a) {
                    return !0
                }
            });
            f.setLocalActions([{
                title: "Map VPCs",
                icon: "sync",
                rbac: "Cloud OnRamp",
                precheck: "",
                action: a.mapVPC
            }, {
                title: "UnMap VPCs",
                icon: "sync_disabled",
                rbac: "Cloud OnRamp",
                precheck: "",
                action: a.unmapVPC
            }]),
            a.table = f,
            a.table.createColumns(k);
            var g = a.cloudInstance.getMappingTable();
            a.table.setTableData(g),
            a.table.setPostRefreshCallback(function() {
                a.refreshTableData()
            }),
            a.refreshTableData = function() {
                var b = a.cloudInstance.getMappingTable();
                a.table.refreshTableData(b)
            }
        }
        ,
        a.init(),
        a.nextState = function() {
            a.disableButtons = !0,
            a.cloudInstance.checkMappingExists() ? (a.cloudInstance.createMappingObject(),
            a.cloudInstance.save().then(function(c) {
                angular.isDefined(c.id) ? b.go("app.device.status", {
                    activity: i.getStatusAction("CREATE_TRANSIT_VPC").endpoint,
                    pid: c ? c.id : ""
                }) : (h.error(c),
                b.go("app.config.cloudOnRamp.dashboard", b.params)),
                a.disableButtons = !1
            }, function(b) {
                a.disableButtons = !1
            })) : (h.error("Please create mapping in order to proceed.", 1e4),
            a.disableButtons = !1)
        }
        ,
        a.previousState = function() {
            a.cloudInstance.previousStep("step3", b.params)
        }
        ,
        a.cancel = function() {
            b.go("app.config.cloudOnRamp.dashboard", b.params)
        }
        ,
        a.$on("$destroy", function() {})
    }
    angular.module("vManage").controller("WizardMapVPCController", a),
    a.$inject = ["$scope", "$state", "appUtil", "CloudManagerFactory", "Table", "$mdDialog", "$log", "notification", "StatusService", "rbac"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        var g = function(a) {
            this.accountId = a,
            this.cloudType = null,
            this.credentialsType = null,
            this.credentials = {
                accountNumber: "",
                username: "",
                password: "",
                apiKey: "",
                secretKey: ""
            },
            this.serverCallInProgress = !1,
            this.cloudTypeList = [],
            this.credentialsRadioOptions = [{
                key: "IAM",
                name: "IAM Role"
            }, {
                key: "KEY",
                name: "Key"
            }],
            this.createPayload = function(a) {
                var b = {
                    cloudType: this.cloudType.key
                };
                return angular.equals(this.credentialsType, this.credentialsRadioOptions[0]) ? (b.authType = this.credentialsType.key,
                b.accountNo = this.credentials.accountNumber,
                b.username = this.credentials.username,
                b.password = this.credentials.password) : angular.equals(this.credentialsType, this.credentialsRadioOptions[1]) && (b.authType = this.credentialsType.key,
                b.apiKey = this.credentials.apiKey,
                b.secretKey = this.credentials.secretKey),
                angular.equals(a, "update") && (b.accountId = this.accountId),
                b
            }
        };
        return g.prototype.showSpinner = function() {
            var a = this;
            a.serverCallInProgress = !0
        }
        ,
        g.prototype.hideSpinner = function() {
            var a = this;
            a.serverCallInProgress = !1
        }
        ,
        g.prototype.validate = function() {
            var a = this
              , c = {
                isValid: !0
            }
              , d = [];
            return b.isUndefinedOrEmpty(a.cloudType) ? void d.push("Cloud Type") : (b.isUndefinedOrEmpty(a.credentialsType) ? d.push("Authentication Type") : angular.equals(a.credentialsType.key, "KEY") ? (b.isUndefinedOrEmpty(a.credentials.apiKey) && d.push("API Key"),
            b.isUndefinedOrEmpty(a.credentials.secretKey) && d.push("Secret Key")) : angular.equals(a.credentialsType.key, "IAM") && (b.isUndefinedOrEmpty(a.credentials.accountNumber) && d.push("Account Number"),
            b.isUndefinedOrEmpty(a.credentials.username) && d.push("Username"),
            b.isUndefinedOrEmpty(a.credentials.password) && d.push("Password")),
            _.isEmpty(d) || (c.isValid = !1,
            c.error = angular.copy(d)),
            c)
        }
        ,
        g.prototype.getCloudTypes = function() {
            var g = this
              , h = e.defer();
            return _.isEmpty(g.cloudTypeList) ? (g.serverCallInProgress = !0,
            a.get(f.CLOUD_ON_RAMP_CLOUD_TYPES).then(function(a) {
                g.serverCallInProgress = !1,
                angular.isDefined(a.data) && !_.isEmpty(a.data) && angular.forEach(a.data, function(a) {
                    g.cloudTypeList.push({
                        key: a,
                        name: a
                    })
                }),
                h.resolve(a)
            }, function(a) {
                g.serverCallInProgress = !1,
                angular.isObject(a) && b.checkNestedProperty(a, "error", "details") ? (d.error("Error occurred while retrieving list of Cloud Types: " + a.error.message + ":" + a.error.details),
                c.error(a.error.message + ": " + a.error.details, 1e4)) : (d.info("API error response needs to be updated to conform to company guidelines"),
                c.error("Error occurred while retrieving list of Cloud Types.", 1e4)),
                h.reject(a)
            }),
            h.promise) : (h.resolve(g.cloudTypeList),
            h.promise)
        }
        ,
        g.prototype.save = function() {
            var b = this
              , g = e.defer();
            b.serverCallInProgress = !0;
            var h = b.validate();
            if (angular.isDefined(h.error) && !h.isValid)
                b.serverCallInProgress = !1,
                d.error("Error occurred in validation - " + h.error[0]),
                c.error("Error occurred in validation - " + h.error[0], 1e4),
                g.reject("Error occurred in validation - " + h.error[0]);
            else {
                var i = b.createPayload("create");
                a.create(f.CLOUD_ON_RAMP_AUTHENTICATION, i).then(function(a) {
                    b.serverCallInProgress = !1,
                    angular.isDefined(a.accountName) && (b.accountName = angular.copy(a.accountName)),
                    angular.isDefined(a.cloudRegion) && (b.cloudRegion = angular.copy(a.cloudRegion)),
                    angular.isDefined(a.accountName) && (b.accountId = angular.copy(a.accountId)),
                    g.resolve(a)
                }, function(a) {
                    b.serverCallInProgress = !1,
                    d.error("Error occurred while authenticating: " + a.error.message + ":" + a.error.details),
                    c.error(a.error.message + ": " + a.error.details, 1e4),
                    g.reject(a)
                })
            }
            return g.promise
        }
        ,
        g.prototype.update = function() {
            var b = this
              , g = e.defer();
            b.serverCallInProgress = !0;
            var h = b.validate();
            if (angular.isDefined(h.error) && !h.isValid)
                b.serverCallInProgress = !1,
                d.error("Error occurred in validation - " + h.error[0]),
                c.error("Error occurred in validation - " + h.error[0], 1e4),
                g.reject("Error occurred in validation - " + h.error[0]);
            else {
                var i = b.createPayload("update");
                a.update(f.CLOUD_ON_RAMP_AUTHENTICATION, i).then(function(a) {
                    b.serverCallInProgress = !1,
                    c.success("Credentials updated successfully.", 1e4),
                    angular.isDefined(a.accountName) && (b.accountName = angular.copy(a.accountName)),
                    angular.isDefined(a.cloudRegion) && (b.cloudRegion = angular.copy(a.cloudRegion)),
                    angular.isDefined(a.accountName) && (b.accountId = angular.copy(a.accountId)),
                    g.resolve(a)
                }, function(a) {
                    b.serverCallInProgress = !1,
                    d.error("Error occurred while authenticating: " + a.error.message + ":" + a.error.details),
                    c.error(a.error.message + ": " + a.error.details, 1e4),
                    g.reject(a)
                })
            }
            return g.promise
        }
        ,
        g
    }
    angular.module("vManage").factory("CloudCredentialsFactory", a),
    a.$inject = ["CloudOnRampService", "appUtil", "notification", "$log", "$q", "configurationConstants"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h = function(a, b, c, d) {
            this.accountName = b,
            this.accountId = a,
            this.name = c,
            this.cloudId = d,
            this.cloudRegion = null,
            this.cloudRegionList = [],
            this.hostVPCList = [],
            this.mapping = [],
            this.resourceUrl = "/dataservice/template/cor/" + this.type,
            this.serverCallInProgress = !1,
            this.createPayload = function(a) {
                return {
                    accountName: this.accountName,
                    accountId: this.accountId,
                    cloudRegion: this.cloudRegion,
                    transitVpcName: this.transitVPC.transitVpcName,
                    transitVpcSize: this.transitVPC.bandwidth,
                    amiId: this.transitVPC.version,
                    deviceList: [{
                        uuid: this.transitVPC.device_1.uuid,
                        preference: "active"
                    }, {
                        uuid: this.transitVPC.device_2.uuid,
                        preference: "backup"
                    }],
                    mapping: this.mapping
                }
            }
        };
        return h.prototype.showSpinner = function() {
            var a = this;
            a.serverCallInProgress = !0
        }
        ,
        h.prototype.hideSpinner = function() {
            var a = this;
            a.serverCallInProgress = !1
        }
        ,
        h.prototype.createMapPayload = function(a, b) {
            var c = this;
            return {
                accountId: c.accountId,
                cloudRegion: c.cloudRegion,
                transitVpcId: a.transitVpc.transitVpcId,
                mapping: [{
                    transitVpcVpn: a.vpn,
                    hostVpcList: b
                }]
            }
        }
        ,
        h.prototype.createTransitVpcPayload = function() {
            var a = this;
            return {
                accountId: a.accountId,
                cloudRegion: a.cloudRegion,
                transitVpcName: a.transitVPC.transitVpcName,
                transitVpcSize: a.transitVPC.bandwidth,
                amiId: a.transitVPC.version,
                deviceList: [{
                    uuid: a.transitVPC.device_1.uuid,
                    preference: "active"
                }, {
                    uuid: a.transitVPC.device_2.uuid,
                    preference: "backup"
                }]
            }
        }
        ,
        h.prototype.discoverHostVPC = function() {
            var g = this
              , h = e.defer();
            if (b.isUndefinedOrEmpty(g.accountId) || b.isUndefinedOrEmpty(g.cloudRegion))
                return h.reject({
                    error: {
                        message: "Undefined/Empty parameters",
                        details: "Incomplete data for the payload."
                    }
                }),
                d.error("Undefined/Empty parameters. Incomplete data for the payload."),
                c.error("Error: Undefined/Empty parameters. Incomplete data for the payload.", 1e4),
                h.promise;
            g.serverCallInProgress = !0;
            var i = f.CLOUD_ON_RAMP_DISCOVER_HOST_VPC + "?accountid=" + g.accountId + "&cloudregion=" + g.cloudRegion;
            return a.list(i).then(function(a) {
                g.serverCallInProgress = !1,
                angular.isDefined(a) && !b.isUndefinedOrEmpty(a.data) && (angular.isDefined(a.data[0].hostVpcName) && _.sortBy(a.data, "hostVpcName"),
                g.hostVPCList = angular.copy(a.data)),
                h.resolve(a)
            }, function(a) {
                g.serverCallInProgress = !1,
                angular.isObject(a) && b.checkNestedProperty(a, "error", "details") ? (d.error("Error occurred while retrieving Host VPCs: " + a.error.message + ":" + a.error.details),
                c.error(a.error.message + ": " + a.error.details, 1e4)) : (d.info("API error response needs to be updated to conform to company guidelines:" + i),
                c.error("Error occurred while retrieving Host VPCs.", 1e4)),
                h.reject(a)
            }),
            h.promise
        }
        ,
        h.prototype.getTransitVpcList = function() {
            var g = this
              , h = e.defer();
            if (b.isUndefinedOrEmpty(g.accountId) || b.isUndefinedOrEmpty(g.cloudRegion))
                return h.reject({
                    error: {
                        message: "Undefined/Empty parameters",
                        details: "Incomplete data for the payload."
                    }
                }),
                d.error("Undefined/Empty parameters. Incomplete data for the payload."),
                c.error("Error: Undefined/Empty parameters. Incomplete data for the payload.", 1e4),
                h.reject(),
                h.promise;
            g.serverCallInProgress = !0;
            var i = f.CLOUD_ON_RAMP_TRANSIT_VPC + "?accountid=" + g.accountId + "&cloudregion=" + g.cloudRegion;
            return a.list(i).then(function(a) {
                g.serverCallInProgress = !1,
                angular.isDefined(a) && !b.isUndefinedOrEmpty(a.data) && (angular.isDefined(a.data[0].transitVpcName) && _.sortBy(a.data, "transitVpcName"),
                g.transitVpcList = angular.copy(a.data)),
                h.resolve(a)
            }, function(a) {
                g.serverCallInProgress = !1,
                angular.isObject(a) && b.checkNestedProperty(a, "error", "details") ? (d.error("Error occurred while retrieving Transit VPCs: " + a.error.message + ":" + a.error.details),
                c.error(a.error.message + ": " + a.error.details, 1e4)) : (d.info("API error response needs to be updated to conform to company guidelines:" + i),
                c.error("Error occurred while retrieving Transit VPCs.", 1e4)),
                h.reject(a)
            }),
            h.promise
        }
        ,
        h.prototype.getAmiList = function() {
            var g = this
              , h = e.defer();
            g.serverCallInProgress = !0;
            var i = {
                accountid: g.accountId,
                cloudregion: g.cloudRegion
            };
            return a.get(f.CLOUD_ON_RAMP_AMI_LIST, i).then(function(a) {
                g.serverCallInProgress = !1,
                angular.isDefined(a) && !b.isUndefinedOrEmpty(a.data) ? g.amiList = angular.copy(a.data.amis) : g.amiList = [],
                h.resolve(a.data)
            }, function(a) {
                g.serverCallInProgress = !1,
                angular.isObject(a) && b.checkNestedProperty(a, "error", "details") ? (d.error("Error occurred while retrieving vEdge version list: " + a.error.message + ":" + a.error.details),
                c.error(a.error.message + ": " + a.error.details, 1e4)) : (d.info("API error response needs to be updated to conform to company guidelines" + f.CLOUD_ON_RAMP_DEVICES),
                c.error("Error occurred while retrieving vEdge version list.", 1e4)),
                h.reject(a)
            }),
            h.promise
        }
        ,
        h.prototype.getTransitVpcSizes = function() {
            var g = this
              , h = e.defer();
            return g.serverCallInProgress = !0,
            a.list(f.CLOUD_ON_RAMP_TRANSIT_VPC_SIZE).then(function(a) {
                g.serverCallInProgress = !1,
                angular.isDefined(a) && !b.isUndefinedOrEmpty(a.data) ? g.gatewaySizes = angular.copy(a.data) : g.gatewaySizes = [],
                h.resolve(a)
            }, function(a) {
                g.serverCallInProgress = !1,
                angular.isObject(a) && b.checkNestedProperty(a, "error", "details") ? (d.error("Error occurred while retrieving Gateways VPC Sizes: " + a.error.message + ":" + a.error.details),
                c.error(a.error.message + ": " + a.error.details, 1e4)) : (d.info("API error response needs to be updated to conform to company guidelines" + f.CLOUD_ON_RAMP_TRANSIT_VPC_SIZE),
                c.error("Error occurred while retrieving Gateways VPC Sizes.", 1e4)),
                h.reject(a)
            }),
            h.promise
        }
        ,
        h.prototype.getDeviceList = function() {
            var g = this
              , h = e.defer();
            return g.serverCallInProgress = !0,
            a.list(f.CLOUD_ON_RAMP_DEVICES).then(function(a) {
                g.serverCallInProgress = !1,
                angular.isDefined(a) && !b.isUndefinedOrEmpty(a.data) ? g.deviceList = angular.copy(a.data) : g.deviceList = [],
                h.resolve(a)
            }, function(a) {
                g.serverCallInProgress = !1,
                angular.isObject(a) && b.checkNestedProperty(a, "error", "details") ? (d.error("Error occurred while retrieving Device UUIDs: " + a.error.message + ":" + a.error.details),
                c.error(a.error.message + ": " + a.error.details, 1e4)) : (d.info("API error response needs to be updated to conform to company guidelines" + f.CLOUD_ON_RAMP_DEVICES),
                c.error("Error occurred while retrieving Device UUIDs.", 1e4)),
                h.reject(a)
            }),
            h.promise
        }
        ,
        h.prototype.getVpnList = function(g) {
            var h = e.defer()
              , i = f.CLOUD_ON_RAMP_VPN_LIST + "/" + g;
            return a.list(i).then(function(a) {
                h.resolve(a)
            }, function(a) {
                angular.isObject(a) && b.checkNestedProperty(a, "error", "details") ? (d.error("Error occurred while retrieving VPN: " + a.error.message + ":" + a.error.details),
                c.error(a.error.message + ": " + a.error.details, 1e4)) : (d.info("API error response needs to be updated to conform to company guidelines" + f.CLOUD_ON_RAMP_VPN_LIST),
                c.error("Error occurred while retrieving VPN.", 1e4)),
                h.reject(a)
            }),
            h.promise
        }
        ,
        h.prototype.createMappingObject = function() {
            var a = this
              , b = {};
            angular.forEach(a.filteredHostVpcList, function(a) {
                if (angular.isDefined(a.vpn) && !_.isEmpty(a.vpn)) {
                    var c = {
                        hostVpcId: a.hostVpcId,
                        hostVpcName: a.hostVpcName,
                        cidr: a.cidr
                    };
                    angular.isUndefined(b[a.vpn]) ? b[a.vpn] = {
                        hostVpcList: [c],
                        transitVpcVpn: a.vpn
                    } : b[a.vpn].hostVpcList.push(c)
                }
            }),
            a.mapping = [],
            angular.forEach(b, function(b, c) {
                a.mapping.push(b)
            })
        }
        ,
        h.prototype.mapHostVpc = function(b) {
            var g = e.defer();
            return c.info("Mapping Host VPCs...", 1e4),
            a.create(f.CLOUD_ON_RAMP_MAP_HOST_VPC, b).then(function(a) {
                g.resolve(a)
            }, function(a) {
                d.error("Error occurred while mapping Host VPC: " + a.error.message + ":" + a.error.details),
                c.error(a.error.message + ": " + a.error.details, 1e4),
                g.reject(a)
            }),
            g.promise
        }
        ,
        h.prototype.unmapHostVpc = function(g) {
            var h = this
              , i = e.defer();
            return g.accountId = h.accountId,
            g.cloudRegion = h.cloudRegion,
            b.isUndefinedOrEmpty(g.hostVpcList) ? (d.error("Error occurred while un-mapping Host VPC: Empty VPC list."),
            c.error("Empty Host VPC List", 1e4),
            i.reject()) : a.deletePostBody(f.CLOUD_ON_RAMP_MAP_HOST_VPC, g).then(function(a) {
                i.resolve(a)
            }, function(a) {
                d.error("Error occurred while un-mapping Host VPC: " + a.error.message + ":" + a.error.details),
                c.error(a.error.message + ": " + a.error.details, 1e4),
                i.reject(a)
            }),
            i.promise
        }
        ,
        h.prototype.createTransitVpc = function() {
            var b = this
              , g = e.defer();
            c.info("Creating transit VPC " + b.transitVPC.transitVpcName, 1e4);
            var h = b.createTransitVpcPayload();
            return a.create(f.CLOUD_ON_RAMP_TRANSIT_VPC, h).then(function(a) {
                g.resolve(a)
            }, function(a) {
                d.error("Error occurred while creating Transit VPC: " + a.error.message + ":" + a.error.details),
                c.error(a.error.message + ": " + a.error.details, 1e4),
                g.reject(a)
            }),
            g.promise
        }
        ,
        h.prototype.deleteTransitVpc = function(b) {
            var g = this
              , h = e.defer()
              , i = f.CLOUD_ON_RAMP_DASHBOARD + "/accountid/" + g.accountId
              , j = {
                cloudregion: g.cloudRegion,
                transitvpcid: b
            };
            return a.delete(i, j).then(function(a) {
                h.resolve(a)
            }, function(a) {
                d.error("Error occurred while deleting Transit VPC: " + a.error.message + ":" + a.error.details),
                c.error(a.error.message + ": " + a.error.details, 1e4),
                h.reject(a)
            }),
            h.promise
        }
        ,
        h.prototype.get = function(f, g) {
            var h = this
              , i = e.defer();
            return h.serverCallInProgress = !0,
            a.get(f, g).then(function(a) {
                h.serverCallInProgress = !1,
                i.resolve(a)
            }, function(a) {
                h.serverCallInProgress = !1,
                angular.isObject(a) && b.checkNestedProperty(a, "error", "details") ? (d.error("Error occurred while retrieving data: " + a.error.message + ":" + a.error.details),
                c.error(a.error.message + ": " + a.error.details, 1e4)) : (d.info("API error response needs to be updated to conform to company guidelines" + f),
                c.error("Error occurred while retrieving data.", 1e4)),
                i.reject(a)
            }),
            i.promise
        }
        ,
        h.prototype.save = function() {
            var b = this
              , g = e.defer();
            b.serverCallInProgress = !0;
            var h = b.createPayload();
            return angular.isDefined(h.error) ? (d.error("Error occured in validation - " + h.message),
            c.error(h.message, 1e4),
            g.reject(h.message)) : (d.info(h),
            a.create(f.CLOUD_ON_RAMP_DASHBOARD, h).then(function(a) {
                b.serverCallInProgress = !1,
                g.resolve(a)
            }, function(a) {
                b.serverCallInProgress = !1,
                d.error("Error occurred while saving Cloud Instance: " + a.error.message + ":" + a.error.details),
                c.error(a.error.message + ": " + a.error.details, 1e4),
                g.reject(a)
            })),
            g.promise
        }
        ,
        h
    }
    angular.module("vManage").factory("CloudFactory", a),
    a.$inject = ["CloudOnRampService", "appUtil", "notification", "$log", "$q", "configurationConstants", "StatusService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        var l, m = {
            step1: {
                name: "step1",
                title: "Select a Region and Discover Host VPCs",
                route: "app.config.cloudOnRamp.wizard.hostVPC",
                controller: "WizardDiscoverHostVPCController",
                images: [{
                    path: "images/cloudonramp/discover_state_1.svg"
                }, {
                    path: "images/cloudonramp/discover_state_2.svg"
                }],
                next: "step2",
                previous: null,
                state: "active",
                completed: !1
            },
            step2: {
                name: "step2",
                title: "Add Gateway VPC",
                route: "app.config.cloudOnRamp.wizard.transitVPC",
                controller: "WizardAddTransitVPCController",
                images: [{
                    path: "images/cloudonramp/transit_state_1.svg"
                }],
                next: "step3",
                previous: "step1",
                state: "disabled",
                completed: !1
            },
            step3: {
                name: "step3",
                title: "Map Host VPCs to Gateway VPCs",
                route: "app.config.cloudOnRamp.wizard.mapVPC",
                controller: "WizardMapVPCController",
                images: [{
                    path: "images/cloudonramp/map_state_1.svg"
                }, {
                    path: "images/cloudonramp/map_state_2.svg"
                }],
                next: null,
                previous: "step2",
                state: "disabled",
                completed: !1
            }
        }, n = function(b, c) {
            a.apply(this, [b, c, null, null]),
            this.wizardStages = angular.copy(m),
            this.wizardStagesList = ["step1", "step2", "step3"],
            this.filteredHostVpcList = [],
            this.cloudRegion = null
        };
        return n.prototype = new a,
        n.prototype.checkMappingExists = function() {
            var a = this
              , b = _.findIndex(a.filteredHostVpcList, function(b) {
                return angular.equals(b.transitVpcName, a.transitVPC.transitVpcName)
            });
            return b > -1
        }
        ,
        n.prototype.resetTransitVpc = function() {
            var a = this;
            a.transitVPC = {
                transitVpcName: "",
                version: "",
                bandwidth: "",
                device_1: "",
                device_2: ""
            }
        }
        ,
        n.prototype.updateMappingTransitVpcName = function() {
            var a = this;
            angular.forEach(a.hostVPCList, function(b) {
                c.isUndefinedOrEmpty(b.transitVpcName) || (b.transitVpcName = a.transitVPC.transitVpcName)
            })
        }
        ,
        n.prototype.getvEdgeVersions = function() {
            var a = c.normalizeVersion(_.pluck(j.options, "value"))
              , b = []
              , e = d.defer();
            return i.getvManageVersions().then(function(d) {
                var f = c.normalizeVersion(d);
                angular.forEach(a, function(a) {
                    if (angular.equals(a, "99.99.999.0"))
                        b.push(a);
                    else {
                        var d = c.isUpgradeVersionSupported(f, a);
                        d.isUpgradeSafe && b.push(a)
                    }
                }),
                e.resolve(_.uniq(b))
            }, function(a) {
                e.reject(a)
            }),
            e.promise
        }
        ,
        n.prototype.getMappedTable = function() {
            var a = this
              , b = d.defer()
              , c = {
                accountid: a.accountId,
                cloudregion: a.cloudRegion
            };
            return a.get(g.CLOUD_ON_RAMP_MAP_HOST_VPC, c).then(function(a) {
                b.resolve(a.data)
            }, function(a) {
                b.reject(a)
            }),
            b.promise
        }
        ,
        n.prototype.getMappingTable = function() {
            var a = this
              , b = [];
            return angular.forEach(a.filteredHostVpcList, function(a) {
                var c = {
                    hostVpcName: a.hostVpcName,
                    hostVpcId: a.hostVpcId,
                    mapping: !!angular.isDefined(a.mapping) && a.mapping,
                    vpn: angular.isDefined(a.vpn) ? a.vpn : "",
                    transitVpcName: angular.isDefined(a.transitVpcName) ? a.transitVpcName : ""
                };
                b.push(c)
            }),
            b
        }
        ,
        n.prototype.nextStep = function(a, c) {
            var d = this;
            if (!angular.isDefined(a) || !angular.isDefined(d.wizardStages[a]))
                return !1;
            var e = d.wizardStages[a]
              , f = d.wizardStages[e.next];
            e.completed ? (e.state = "complete",
            angular.equals(f, null) || (f.state = "active",
            b.go(f.route, c))) : (e.state = "pending",
            angular.equals(f, null) || (f.state = "active",
            b.go(f.route, c)))
        }
        ,
        n.prototype.previousStep = function(a, c) {
            var d = this;
            if (!angular.isDefined(a) || !angular.isDefined(d.wizardStages[a]))
                return !1;
            var e = d.wizardStages[a]
              , f = d.wizardStages[e.previous];
            e.completed ? (e.state = "complete",
            angular.equals(f, null) || (f.state = "active",
            b.go(f.route, c))) : (e.state = "pending",
            angular.equals(f, null) || (f.state = "active",
            b.go(f.route, c)))
        }
        ,
        n.prototype.disableSteps = function(a) {
            var b = this;
            return !(!angular.isDefined(a) || _.isEmpty(a)) && (angular.isArray(a) || (a = [a]),
            void angular.forEach(a, function(a) {
                b.wizardStages[a].state = "disabled",
                b.wizardStages[a].completed = !1
            }))
        }
        ,
        {
            createLocalInstance: function() {
                return new n
            },
            getInstance: function(a, b) {
                return l ? angular.isDefined(a) && angular.isDefined(b) && (l.accountId = a,
                l.accountName = b) : l = new n(a,b),
                l
            },
            deleteInstance: function() {
                l = null
            },
            getClouds: function() {
                var a = d.defer();
                return h.list(g.CLOUD_ON_RAMP_DASHBOARD).then(function(b) {
                    a.resolve(b)
                }, function(b) {
                    angular.isObject(b) && c.checkNestedProperty(b, "error", "details") ? (e.error("Error occurred while retrieving installed cloud instances: " + b.error.message + ":" + b.error.details),
                    f.error(b.error.message + ": " + b.error.details, 1e4)) : (e.info("API error response needs to be updated to conform to company guidelines" + g.CLOUD_ON_RAMP_DASHBOARD),
                    f.error("Error occurred while retrieving installed cloud instances.", 1e4)),
                    a.reject(b)
                }),
                a.promise
            },
            getDeviceList: function() {
                var a = d.defer();
                return h.list(g.CLOUD_ON_RAMP_DEVICES).then(function(b) {
                    a.resolve(b)
                }, function(b) {
                    angular.isObject(b) && c.checkNestedProperty(b, "error", "details") ? (e.error("Error occurred while retrieving Device UUIDs: " + b.error.message + ":" + b.error.details),
                    f.error(b.error.message + ": " + b.error.details, 1e4)) : (e.info("API error response needs to be updated to conform to company guidelines" + g.CLOUD_ON_RAMP_DEVICES),
                    f.error("Error occurred while retrieving Device UUIDs.", 1e4)),
                    a.reject(b)
                }),
                a.promise
            },
            getDeviceDetails: function(a) {
                var b = d.defer();
                if (angular.isDefined(a)) {
                    var g = {
                        uuid: a
                    };
                    h.get(k.DEVICE_INFO, g).then(function(a) {
                        b.resolve(a)
                    }, function(a) {
                        angular.isObject(a) && c.checkNestedProperty(a, "error", "details") ? (e.error("Error occurred while retrieving Device info: " + a.error.message + ":" + a.error.details),
                        f.error(a.error.message + ": " + a.error.details, 1e4)) : (e.info("API error response needs to be updated to conform to company guidelines" + k.DEVICE_INFO),
                        f.error("Error occurred while retrieving Device info.", 1e4)),
                        b.reject(a)
                    })
                } else
                    b.reject();
                return b.promise
            }
        }
    }
    angular.module("vManage").factory("CloudManagerFactory", a),
    a.$inject = ["CloudFactory", "$state", "appUtil", "$q", "$log", "notification", "configurationConstants", "CloudOnRampService", "maintenanceService", "gatewayVersionList", "apiConstants"]
}(),
angular.module("vManage").factory("CloudOnRampService", CloudOnRampService),
CloudOnRampService.$inject = ["restService", "apiConstants", "$q", "appUtil"],
angular.module("vManage").controller("devicesController", devicesController),
devicesController.$inject = ["$scope", "$state", "appUtil", "certificateService", "Table", "notification", "rbac", "DeviceTemplateHttpService", "TemplateDeviceInput", "$mdDialog", "StatusService", "eventPoll", "$timeout", "$log"],
angular.module("vManage").service("devicesService", devicesService),
devicesService.$inject = ["restService"],
angular.module("vManage").controller("devicesvEdgeListController", devicesvEdgeListController),
devicesvEdgeListController.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "Table", "rbac", "devicesService", "notification", "TemplateDeviceInput", "DeviceTemplateHttpService", "$log", "eventPoll", "$timeout", "eventListObject"],
angular.module("vManage").controller("addvBondModalCtrl", addvBondModalCtrl),
addvBondModalCtrl.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "devicesService", "tableObject", "adminService", "certificateSigningService", "certificateService", "notification"],
angular.module("vManage").controller("addvSmartModalCtrl", addvSmartModalCtrl),
addvSmartModalCtrl.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "devicesService", "tableObject", "adminService", "certificateSigningService", "certificateService", "notification", "TenantManagement", "rbac", "rbacService"],
angular.module("vManage").controller("changeModeCLICtrl", changeModeCLICtrl),
changeModeCLICtrl.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "devicesService", "MultiSelectService", "StatusService", "deviceType"],
angular.module("vManage").controller("changeModevManageCtrl", changeModevManageCtrl),
changeModevManageCtrl.$inject = ["$scope", "$rootScope", "$state", "appUtil", "$mdDialog", "devicesService", "tableObject", "adminService", "certificateSigningService", "certificateService", "notification", "MultiSelectService"],
angular.module("vManage").controller("CopyConfigurationController", CopyConfigurationController),
CopyConfigurationController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "selectedRow", "devicesService", "Table", "notification"],
angular.module("vManage").controller("diffConfigController", diffConfigController),
diffConfigController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "devicesService", "selectedRow"],
angular.module("vManage").controller("exportCloudConfigController", exportCloudConfigController),
exportCloudConfigController.$inject = ["$scope", "$state", "appUtil", "devicesService", "$mdDialog", "tableObject", "notification", "MultiSelectService", "$window", "restService"],
angular.module("vManage").controller("generateConfigModalController", generateConfigModalController),
generateConfigModalController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "selectedRow", "table", "notification", "devicesService"],
angular.module("vManage").controller("outOfSyncDiffModalCtrl", outOfSyncDiffModalCtrl),
outOfSyncDiffModalCtrl.$inject = ["$scope", "$state", "appUtil", "$q", "$mdDialog", "devicesService", "DeviceTemplateHttpService", "configUrl"],
angular.module("vManage").controller("templateLogController", templateLogController),
templateLogController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "selectedRow"],
angular.module("vManage").controller("updateDeviceController", updateDeviceController),
updateDeviceController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "devicesService", "selectedRow", "table"],
angular.module("vManage").controller("uploadConfigController", uploadConfigController),
uploadConfigController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "devicesService", "selectedRow", "table"],
angular.module("vManage").controller("uploadvEdgeListController", uploadvEdgeListController),
uploadvEdgeListController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "devicesService", "tableObject", "notification", "StatusService", "adminService"],
angular.module("vManage").controller("viewRunningConfigController", viewRunningConfigController),
viewRunningConfigController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "devicesService", "selectedRow", "notification"],
angular.module("vManage").controller("viewUploadedConfigController", viewUploadedConfigController),
viewUploadedConfigController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "devicesService", "selectedRow"],
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
        function q(a) {
            angular.isObject(a) && e.checkNestedProperty(a, "error", "details") ? (f.error("Error occurred while processing policy: " + a.error.message + ":" + a.error.details),
            n.error(a.error.message + ": " + a.error.details)) : (f.info("API error response needs to be updated to conform to company guidelines."),
            n.error("Error occurred while processing policy"))
        }
        var r = this;
        r.state = b.current.name,
        r.stateString = e.getStateString(b),
        r.policyObj = o.getInstance(),
        r.userAction = c.action,
        r.tableObjectsLoaded = !1,
        a.buttonFunctions.reset(),
        a.showErrorSection = !1,
        a.formInvalid = !1,
        a.readOnly = "view" === c.action,
        a.breadCrumb.states = [{
            name: "centralized-policy",
            title: "Centralized Policy",
            state: "app.config.policy.centralizedPolicy.vsmart"
        }, {
            name: "add" === c.action ? "addPolicy" : "edit" === c.action ? "editPolicy" : "viewPolicy",
            title: "add" === c.action ? "Add Policy" : "edit" === c.action ? "Edit Policy" : "View Policy"
        }],
        a.globalButtonState.disableTabs = !0,
        a.globalButtonState.customOptions = !1,
        a.policyTypeTabs = [new g("Topology",!0,{},["control", "vpnMembershipGroup", "mesh", "hubAndSpoke"]), new g("Application-Aware Routing",!1,{},["appRoute"]), new g("Traffic Data",!1,{},["data"]), new g("Cflowd",!1,{},["cflowd"])],
        a.activeTab = a.policyTypeTabs[0],
        a.activateTab = function(b) {
            r.policyAssembly.serverCallInProgress = !0,
            a.setActiveTab(b).then(function() {
                r.policyAssembly.serverCallInProgress = !1
            })
        }
        ,
        a.setActiveTab = function(b) {
            var c = d.defer();
            return b.active ? c.resolve() : (angular.forEach(a.policyTypeTabs, function(a) {
                a.active = !1
            }),
            b.active = !0,
            a.activeTab = b,
            k(function() {
                c.resolve()
            }, 20 * p("filterByMultipleProperties")(r.policyAssembly.policyDefinition.assembly, a.activeTab.value, "type").length)),
            c.promise
        }
        ,
        r.showComponent = [],
        r.policyAssembly = void 0,
        r.siteLists = [],
        r.vpnLists = [],
        r.searchQuery = "",
        r.policyAssembly = h.getInstance({}),
        d.all([i.getInstance().listAsync(), j.getInstance().listAsync()]).then(function(d) {
            r.vpnLists = d[0],
            r.siteLists = d[1],
            !c.policyId || b.previousState.name.contains("configureTopology") || b.previousState.name.contains("configureTrafficRules") || b.previousState.name.contains("preview") ? (r.policyAssembly.serverCallInProgress = !0,
            angular.forEach(r.policyAssembly.policyDefinition.assembly, function(a) {
                _.isNull(a.table) && ("mesh" === a.type.toLowerCase() || "hubandspoke" === a.type.toLowerCase() || "vpnmembershipgroup" === a.type.toLowerCase() ? (a.createTableInstance(),
                a.setTableData(a.entries, d[0].concat(d[1]))) : a.createTableInstance()),
                r.showComponent.push({
                    formCollapse: !0
                })
            }),
            k(function() {
                var a = $(".policy-rule-body");
                a.scrollTo($(".policy-rule-table.assembly").first(), {
                    duration: 500,
                    offset: {
                        top: 0,
                        left: 0
                    }
                })
            }),
            r.tableObjectsLoaded = !0,
            r.policyAssembly.serverCallInProgress = !1) : r.policyAssembly.listAsync().then(function() {
                r.policyAssembly.get(c.policyId).then(function(b) {
                    r.policyAssembly.serverCallInProgress = !0,
                    angular.forEach(r.policyAssembly.policyDefinition.assembly, function(b) {
                        b.createTableInstance(a.readOnly),
                        "mesh" === b.type.toLowerCase() || "hubandspoke" === b.type.toLowerCase() || "vpnmembershipgroup" === b.type.toLowerCase() ? r.setEntries(b).then(function() {
                            b.setTableData(b.entries, d[0].concat(d[1]))
                        }) : b.setTableData(b.entries, d[0].concat(d[1])),
                        r.showComponent.push({
                            formCollapse: !0
                        }),
                        _.find(r.policyObj.newPolicyDefinitions[b.type], function(a) {
                            return a.id === b.definitionId
                        }) || r.policyObj.newPolicyDefinitions[b.type].push({
                            type: "imported",
                            id: b.definitionId
                        })
                    }),
                    r.policyAssembly.serverCallInProgress = !1,
                    r.tableObjectsLoaded = !0
                }, function(a) {
                    r.policyAssembly.serverCallInProgress = !1,
                    q(a)
                })
            })
        }, function(a) {
            q(a)
        }),
        r.addPolicy = function(a) {
            if (r.policyAssembly.findPolicyIndex(a) < 0) {
                var b = r.policyAssembly.appendPolicy(a);
                b && (b.createTableInstance(),
                r.showComponent.push({
                    formCollapse: !0
                }),
                k(function() {
                    var a = $(".policy-rule-body");
                    a.scrollTo($(".policy-rule-table.assembly").first(), {
                        duration: 500,
                        offset: {
                            top: 0,
                            left: 0
                        }
                    })
                }))
            }
        }
        ,
        r.setEntries = function(a) {
            var b = d.defer();
            return a.getPolicyById(a.definitionId, a.type).then(function(c) {
                "mesh" === a.type.toLowerCase() || "hubandspoke" === a.type.toLowerCase() ? a.entries.push({
                    vpnLists: [c.definition.vpnList]
                }) : "vpnmembershipgroup" === a.type.toLowerCase() && angular.forEach(c.definition.sites, function(b) {
                    a.entries.push({
                        siteLists: [b.siteList],
                        vpnLists: b.vpnList
                    })
                }),
                b.resolve()
            }),
            b.promise
        }
        ,
        r.showForm = function(a, b) {
            r.showComponent[a].formCollapse = !r.showComponent[a].formCollapse,
            r.showComponent[a].formCollapse || k(function() {
                var a = $(b.target).closest(".policy-rule-body");
                a.scrollTo($(b.target).closest(".policy-rule-table.assembly").find("#tableContent"), {
                    duration: 500,
                    offset: {
                        top: 0,
                        left: 0
                    }
                })
            })
        }
        ,
        r.cancelForm = function(a, b) {
            r.policyAssembly.findPolicyDefinitionId(b) && b.clearLocalAssemblyObj(),
            r.showForm(a)
        }
        ,
        r.addEntry = function(b, c) {
            "control" === b.type ? b.localAssemblyObj.in.siteLists.length || b.localAssemblyObj.out.siteLists.length ? (a.showErrorSection = !1,
            b.addEntries(b.localAssemblyObj),
            r.cancelForm(c, b)) : (a.showErrorSection = !0,
            a.errorMessage = e.createErrorObject("No List added", "Please select at least one List of in or out")) : "cflowd" === b.type ? b.localAssemblyObj.siteLists.length ? (a.emptySiteList = !1,
            angular.isDefined(b.localAssemblyObj.siteLists) && _.isArray(b.localAssemblyObj.siteLists) && (b.localAssemblyObj.siteListsString = r.policyAssembly.stringifyEntries(b.localAssemblyObj.siteLists, "name")),
            b.addEntries(b.localAssemblyObj),
            r.cancelForm(c, b)) : b.localAssemblyObj.siteLists.length || (a.emptySiteList = !0) : b.localAssemblyObj.siteLists.length && b.localAssemblyObj.vpnLists.length ? (a.emptySiteList = !1,
            a.emptyVPNList = !1,
            angular.isDefined(b.localAssemblyObj.vpnLists) && _.isArray(b.localAssemblyObj.vpnLists) && (b.localAssemblyObj.vpnListsString = r.policyAssembly.stringifyEntries(b.localAssemblyObj.vpnLists, "name")),
            angular.isDefined(b.localAssemblyObj.siteLists) && _.isArray(b.localAssemblyObj.siteLists) && (b.localAssemblyObj.siteListsString = r.policyAssembly.stringifyEntries(b.localAssemblyObj.siteLists, "name")),
            b.addEntries(b.localAssemblyObj),
            r.cancelForm(c, b)) : (b.localAssemblyObj.siteLists.length || (a.emptySiteList = !0),
            b.localAssemblyObj.vpnLists.length || (a.emptyVPNList = !0))
        }
        ,
        r.savePolicy = function(a) {
            return n.clear(),
            r.policyAssemblyForm.$submitted = !0,
            r.policyAssemblyForm.$invalid ? void n.error("Please fill all required fields.") : void (r.policyAssembly.isPolicyActivated ? l.show({
                templateUrl: "app/configuration/policy/modal/activateCentralizedPolicy.html",
                controller: "ActivateCentralizedPolicyModalCtrl",
                targetEvent: a,
                resolve: {
                    policy: function() {
                        return angular.extend(r.policyAssembly, {
                            activated: r.policyAssembly.isPolicyActivated
                        })
                    }
                }
            }).then(function(a) {
                b.go("app.device.status", {
                    activity: m.getStatusAction("VSMART_POLICY_CONFIG").endpoint,
                    pid: a ? a.id : ""
                })
            }) : r.policyAssembly.save().then(function(a) {
                b.go("app.config.policy.centralizedPolicy.vsmart", {
                    reload: !0
                })
            }, function(a) {
                q(a)
            }))
        }
        ,
        r.previewPolicy = function(a) {
            function c() {
                var a = r.policyAssembly.preparePayload();
                angular.isUndefined(a.error) ? (r.policyObj.showWizardSteps = !1,
                b.go("app.config.policy.wizard.preview")) : n.error(a.error.message + ": " + a.error.details)
            }
            return n.clear(),
            r.policyAssemblyForm.$submitted = !0,
            r.policyAssemblyForm.$invalid ? void n.error("Please fill all required fields.") : void (r.policyAssembly.policyId ? r.policyAssembly.previewById().then(function(a) {
                r.policyAssembly.runningConfig = a.preview,
                c()
            }, function(a) {
                q(a)
            }) : c())
        }
        ,
        a.$on("$destroy", function() {
            a.buttonFunctions.reset()
        })
    }
    angular.module("vManage").controller("PolicyAssemblyController", a),
    a.$inject = ["$scope", "$state", "$stateParams", "$q", "appUtil", "$log", "Tab", "PolicyAssembly", "VPNListManager", "SiteListManager", "$timeout", "$mdDialog", "StatusService", "notification", "PolicyWizardManager", "$filter"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        var i = this;
        i.formInvalid = !1,
        i.policy = new e({}),
        i.vpnLists = f.getInstance().listItems,
        i.siteLists = g.getInstance().listItems,
        i.policyName = c,
        i.policyType = h,
        i.assembly = b;
        var j = angular.copy(b);
        i.assembly.siteLists.length,
        i.assembly.vpnLists && i.assembly.vpnLists.length,
        i.update = function() {
            !angular.isDefined(i.assembly.siteLists) || !i.assembly.siteLists.length || angular.isDefined(i.assembly.vpnLists) && !i.assembly.vpnLists.length ? i.formInvalid = !0 : (angular.isDefined(d) && (angular.isDefined(i.assembly.vpnLists) && (i.assembly.vpnListsString = d(i.assembly.vpnLists, "name")),
            angular.isDefined(i.assembly.siteLists) && (i.assembly.siteListsString = d(i.assembly.siteLists, "name"))),
            a.hide())
        }
        ,
        i.cancel = function() {
            angular.isDefined(b.siteLists) && angular.isDefined(j.siteLists) && (b.siteLists = j.siteLists),
            angular.isDefined(b.vpnLists) && angular.isDefined(j.vpnLists) && (b.vpnLists = j.vpnLists),
            a.cancel()
        }
    }
    angular.module("vManage").controller("UpdateDataPolicyController", a),
    a.$inject = ["$mdDialog", "selectedRow", "policyName", "stringifyEntries", "DataPolicy", "VPNListManager", "SiteListManager", "policyType"]
}(),
function() {
    function a(a, b, c, d, e) {
        a.stateString = d.getStateString(b),
        a.globalButtonState.disableTabs = !1,
        a.globalButtonState.customOptions = !0,
        a.breadCrumb.states = [{
            name: "policy",
            title: "Centralized Policy",
            state: function(a) {
                b.go("app.config.policy.centralizedPolicy.vsmart", {
                    reload: !0
                })
            }
        }, {
            name: "advanced-policy",
            title: "Custom Options"
        }]
    }
    angular.module("vManage").controller("advancedPolicyController", a),
    a.$inject = ["$scope", "$state", "$log", "appUtil", "Tab"]
}(),
function() {
    function a(a, b, c, d, e) {
        a.stateString = c.getStateString(b),
        a.breadCrumb.states && !_.isNull(a.breadCrumb.states) && a.breadCrumb.states.reset(),
        a.globalButtonState.disableTabs = !1,
        a.globalButtonState.customOptions = !0;
        var f = 108
          , g = !1
          , h = !1
          , i = !1;
        e.checkSidebarState() && (e.allowAccess("Policy Configuration") && (g = !0,
        f = 148),
        e.allowReadAccess("Policy Configuration") && (i = !0,
        f = 148),
        e.allowAccess("Policy Deploy") && (h = !0,
        f = 148)),
        a.breadCrumb.states = d.getBreadCrumbs(),
        a.table = d.getTableInstance("cli", f, g, h, i),
        d.setTableDataAndColumns(a.table, "cli"),
        a.table.setPostRefreshCallback(function() {
            d.setTableDataAndColumns(a.table, "cli")
        }),
        a.$on("$destroy", function() {
            a.buttonFunctions.reset()
        })
    }
    angular.module("vManage").controller("CLIPolicyController", a),
    a.$inject = ["$scope", "$state", "appUtil", "vSmartPolicyService", "rbac"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        a.stateString = f.getStateString(b),
        a.breadCrumb.states = [{
            name: "policy",
            title: "Policy",
            state: function(a) {
                b.go("app.config.policy.centralizedPolicy.vsmart", {
                    reload: !0
                })
            }
        }, {
            name: "custom applications",
            title: "Custom Application"
        }];
        var i = new e({
            menuColumnFilter: !0,
            columnResizing: !0,
            singleSelect: !0,
            enableSorting: !0,
            tableHeightOffset: 148,
            toggleFirstRowOnLoad: !0,
            dataUid: "definitionId"
        });
        i.setViewActions([{
            button: !0,
            cssId: "add_custom_applciation",
            title: "Add Custom Application",
            icon: "add_circle",
            rbac: "Policy Configuration",
            action: function() {
                alert("button clicked")
            }
        }]),
        i.setHoverAction([{
            type: "Copy",
            open: "modal",
            templateUrl: "app/configuration/policy/modal/copyPolicyTemplate.html",
            controller: "CopyPolicyModalCtrl"
        }, {
            type: "Edit",
            open: "callback",
            okButtonActionFn: function(a) {
                b.go("app.config.policy.centralizedPolicy.control_policy.edit.custom", {
                    id: a.entity.definitionId
                })
            }
        }, {
            type: "Delete",
            open: "confirm",
            title: "Are you sure you want to delete the policy?",
            content: "This policy will be deleted immediately. You cannot undo the action.",
            okButtonActionFn: function(a) {
                var b = new g(a.entity);
                b.delete().then(function(a) {
                    policyCtrl.table.refresh()
                }, function(a) {
                    angular.isObject(a) && f.checkNestedProperty(a, "error", "details") ? (c.error("Error occurred while saving table state: " + a.error.message + ":" + a.error.details),
                    h.error(a.error.message + ": " + a.error.details)) : (c.info("API error response needs to be updated to conform to company guidelines."),
                    h.error("Error occurred while removing Policy."))
                })
            }
        }]),
        a.table = i,
        a.$on("$destroy", function() {
            a.buttonFunctions.reset(),
            policyCtrl.table = null
        })
    }
    angular.module("vManage").controller("customApplicationController", a),
    a.$inject = ["$scope", "$state", "$log", "$mdDialog", "Table", "appUtil", "Policy", "notification"]
}(),
function() {
    function a(a, b, c, d) {
        a.stateString = c.getStateString(b),
        a.centralizedPolicyTabs = [new d("Centralized Policy",_.includes(b.current.name, "centralizedPolicy.vsmart"),"app.config.policy.centralizedPolicy.vsmart"), new d("Localized Policy",_.includes(b.current.name, "localizedPolicy.vedge"),"app.config.policy.localizedPolicy.vedge")]
    }
    angular.module("vManage").controller("CentralizedPolicyController", a),
    a.$inject = ["$scope", "$state", "appUtil", "Tab"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h = this
          , i = g;
        h.stateString = d.getStateString(b),
        h.policyObj = e.getInstance(),
        h.isWizardFlow = _.includes(b.current.name, "app.config.policy.wizard.configureTopology"),
        i.setWizardFlow(h.isWizardFlow),
        a.breadCrumb.states = i.getBreadCrumbs(b.params.action),
        h.table = i.getTableInstance(),
        h.isWizardFlow && h.table.viewActions[0].dropdownOptions.push({
            title: "Import Existing Topology",
            cssId: "import",
            action: function(a) {
                c.show({
                    templateUrl: "app/configuration/policy/modal/importPolicy.html",
                    controller: "ImportPolicyModalCtrl",
                    targetEvent: a,
                    resolve: {
                        policyList: function() {
                            return h.allTopologyPolicies
                        },
                        policyType: function() {
                            return {
                                key: "topology",
                                display: "Topology"
                            }
                        }
                    }
                }).then(function() {
                    h.table.refresh()
                })
            }
        }),
        h.isWizardFlow && (h.assemblyObj = f.getInstance({})),
        h.allTopologyPolicies = i.setTableDataAndColumns(h.table),
        h.table.setPostRefreshCallback(function() {
            h.allTopologyPolicies = i.setTableDataAndColumns(h.table)
        }),
        a.$on("$destroy", function() {
            a.buttonFunctions.reset(),
            h.table = null
        })
    }
    angular.module("vManage").controller("ControlPolicyController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "PolicyWizardManager", "PolicyAssembly", "ControlPolicyService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        function k(b) {
            return o ? [{
                name: "policy",
                title: "Centralized Policy",
                state: function(b) {
                    a.go("app.config.policy.centralizedPolicy.vsmart", {
                        reload: !0
                    })
                }
            }, {
                name: "add" === b ? "addPolicy" : "edit" === b ? "editPolicy" : "viewPolicy",
                title: "add" === b ? "Add Policy" : "edit" === b ? "Edit Policy" : "View Policy"
            }] : [{
                name: "policy",
                title: "Centralized Policy",
                state: function(b) {
                    a.go("app.config.policy.centralizedPolicy.vsmart", {
                        reload: !0
                    })
                }
            }, {
                name: "topology",
                title: "Topology"
            }]
        }
        function l() {
            var b = [{
                title: "Hub-and-Spoke",
                cssId: "new_hub_and_spoke_policy",
                action: function() {
                    if (o) {
                        var b = d.getInstance();
                        b.showWizardSteps = !1,
                        a.go("app.config.policy.wizard.configureTopology.topology.hubSpoke.add")
                    } else
                        a.go("app.config.policy.centralizedPolicy.control_policy.create.hub_spoke")
                }
            }, {
                title: "Mesh",
                cssId: "add_mesh_policy",
                action: function() {
                    if (o) {
                        var b = d.getInstance();
                        b.showWizardSteps = !1,
                        a.go("app.config.policy.wizard.configureTopology.topology.mesh.add")
                    } else
                        a.go("app.config.policy.centralizedPolicy.control_policy.create.mesh")
                }
            }, {
                title: "Custom Control (Route & TLOC)",
                cssId: "custom_control",
                action: function(b) {
                    if (o) {
                        var c = d.getInstance();
                        c.showWizardSteps = !1,
                        a.go("app.config.policy.wizard.configureTopology.topology.control.add")
                    } else
                        a.go("app.config.policy.centralizedPolicy.control_policy.create.custom")
                }
            }];
            return b
        }
        function m() {
            return o ? [{
                type: "View",
                open: "callback",
                okButtonActionFn: function(b) {
                    var c = d.getInstance();
                    c.showWizardSteps = !1;
                    var e = h.getInstance({});
                    e.removePolicy(_.find(e.policyDefinition.assembly, function(a) {
                        return a.definitionId === b.entity.definitionId
                    })),
                    "control" === b.entity.type ? a.go("app.config.policy.wizard.configureTopology.topology.control.view", {
                        id: b.entity.definitionId
                    }) : "hubAndSpoke" === b.entity.type ? a.go("app.config.policy.wizard.configureTopology.topology.hubSpoke.view", {
                        id: b.entity.definitionId
                    }) : a.go("app.config.policy.wizard.configureTopology.topology.mesh.view", {
                        id: b.entity.definitionId
                    })
                }
            }, {
                type: "Edit",
                open: "callback",
                hideCallback: function(a) {
                    return "imported" === a.entity.mode
                },
                okButtonActionFn: function(b) {
                    var c = d.getInstance();
                    c.showWizardSteps = !1;
                    var e = h.getInstance({});
                    e.removePolicy(_.find(e.policyDefinition.assembly, function(a) {
                        return a.definitionId === b.entity.definitionId
                    })),
                    "control" === b.entity.type ? a.go("app.config.policy.wizard.configureTopology.topology.control.edit", {
                        id: b.entity.definitionId
                    }) : "hubAndSpoke" === b.entity.type ? a.go("app.config.policy.wizard.configureTopology.topology.hubSpoke.edit", {
                        id: b.entity.definitionId
                    }) : a.go("app.config.policy.wizard.configureTopology.topology.mesh.edit", {
                        id: b.entity.definitionId
                    })
                }
            }, {
                type: "Copy",
                open: "modal",
                templateUrl: "app/configuration/policy/modal/copyPolicyTemplate.html",
                controller: "CopyPolicyModalCtrl",
                hideCallback: function(a) {
                    return "created" === a.entity.mode
                },
                modalReturnCallback: function(a, b, c) {
                    o && (b.mode = "created",
                    d.getInstance().newPolicyDefinitions[b.type].push({
                        id: a.definitionId,
                        type: "created"
                    }),
                    c.refresh())
                }
            }, {
                type: "Delete",
                open: "confirm",
                title: "Are you sure you want to delete the policy?",
                content: "This policy will be deleted immediately. You cannot undo the action.",
                hideCallback: function(a) {
                    return "imported" === a.entity.mode
                },
                okButtonActionFn: function(a, c) {
                    var e = new f(a.entity)
                      , j = h.getInstance({});
                    e.delete().then(function(b) {
                        for (var e = d.getInstance(), f = 0; f < e.newPolicyDefinitions[a.entity.type].length; f++)
                            e.newPolicyDefinitions[a.entity.type][f].id === a.entity.definitionId && (e.newPolicyDefinitions[a.entity.type].splice(f, 1),
                            c.refresh());
                        j.removePolicy(_.find(j.policyDefinition.assembly, function(b) {
                            return b.definitionId === a.entity.definitionId
                        }))
                    }, function(a) {
                        angular.isObject(a) && g.checkNestedProperty(a, "error", "details") ? (b.error("Error occurred while saving table state: " + a.error.message + ":" + a.error.details),
                        i.error(a.error.message + ": " + a.error.details)) : (b.info("API error response needs to be updated to conform to company guidelines."),
                        i.error("Error occurred while removing Policy."))
                    })
                }
            }, {
                type: "Detach",
                open: "callback",
                hideCallback: function(a, b, c) {
                    return "created" === a.entity.mode
                },
                okButtonActionFn: function(a, b, c) {
                    for (var e = d.getInstance(), f = h.getInstance({}), g = 0; g < e.newPolicyDefinitions[a.entity.type].length; g++)
                        e.newPolicyDefinitions[a.entity.type][g].id === a.entity.definitionId && (e.newPolicyDefinitions[a.entity.type].splice(g, 1),
                        c.refresh());
                    f.removePolicy(_.find(f.policyDefinition.assembly, function(b) {
                        return b.definitionId === a.entity.definitionId
                    }))
                }
            }] : [{
                type: "View",
                open: "callback",
                okButtonActionFn: function(b) {
                    "control" === b.entity.type ? a.go("app.config.policy.centralizedPolicy.control_policy.view.custom", {
                        id: b.entity.definitionId
                    }) : "hubAndSpoke" === b.entity.type ? a.go("app.config.policy.centralizedPolicy.control_policy.view.hub_spoke", {
                        id: b.entity.definitionId
                    }) : a.go("app.config.policy.centralizedPolicy.control_policy.view.mesh", {
                        id: b.entity.definitionId
                    })
                }
            }, {
                type: "Copy",
                open: "modal",
                templateUrl: "app/configuration/policy/modal/copyPolicyTemplate.html",
                controller: "CopyPolicyModalCtrl"
            }, {
                type: "Edit",
                open: "callback",
                okButtonActionFn: function(b) {
                    "control" === b.entity.type ? a.go("app.config.policy.centralizedPolicy.control_policy.edit.custom", {
                        id: b.entity.definitionId
                    }) : "hubAndSpoke" === b.entity.type ? a.go("app.config.policy.centralizedPolicy.control_policy.edit.hub_spoke", {
                        id: b.entity.definitionId
                    }) : a.go("app.config.policy.centralizedPolicy.control_policy.edit.mesh", {
                        id: b.entity.definitionId
                    })
                }
            }, {
                type: "Delete",
                open: "confirm",
                title: "Are you sure you want to delete the policy?",
                content: "This policy will be deleted immediately. You cannot undo the action.",
                hideCallback: function(a) {
                    return a.entity.referenceCount > 0
                },
                okButtonActionFn: function(a, c) {
                    var d = new f(a.entity);
                    h.getInstance({});
                    d.delete().then(function(a) {
                        c.refresh()
                    }, function(a) {
                        angular.isObject(a) && g.checkNestedProperty(a, "error", "details") ? (b.error("Error occurred while saving table state: " + a.error.message + ":" + a.error.details),
                        i.error(a.error.message + ": " + a.error.details)) : (b.info("API error response needs to be updated to conform to company guidelines."),
                        i.error("Error occurred while removing Policy."))
                    })
                }
            }]
        }
        function n(a, b) {
            a.getPolicyById(a.definitionId, a.type).then(function(c) {
                a.entries.push({
                    vpnLists: [c.definition.vpnList]
                }),
                b.serverCallInProgress = !1
            })
        }
        var o = !1;
        return {
            setWizardFlow: function(a) {
                o = a
            },
            getBreadCrumbs: function(a) {
                return k(a)
            },
            getTableInstance: function() {
                var a = new e({
                    menuColumnFilter: !0,
                    columnResizing: !0,
                    singleSelect: !0,
                    enableSorting: !0,
                    tableHeightOffset: o ? 328 : 228,
                    autoLoad: !0,
                    toggleFirstRowOnLoad: !0,
                    dataUid: "definitionId"
                });
                return a.setViewActions([{
                    dropdown: !0,
                    title: "Add Topology",
                    icon: "add_circle",
                    rbac: "Policy Configuration",
                    cssId: "add_topology",
                    dropdownOptions: l()
                }]),
                a.setHoverAction(m()),
                a
            },
            setTableDataAndColumns: function(a) {
                var e = c.defer()
                  , f = d.getInstance();
                return j.getControlPolicyDefinitionsAsync().then(function(b) {
                    a.taggedSearchObject.setSearchCache(b.data),
                    o ? (b.header.columns.splice(1, 1, {
                        dataType: "string",
                        hideable: "true",
                        property: "type",
                        title: "Type",
                        cellTemplate: '<div class="ui-grid-cell-contents flexDisplay" title="TOOLTIP"> <i style="margin: 3px 10px 0px 0px" class="material-icons md-16 icon-primary-color" ng-if="row.entity.mode === \'created\'"><md-tooltip>Created policy</md-tooltip> queue</i><i style="margin: 3px 10px 0px 0px" class="material-icons md-18 icon-primary-color"  ng-if="row.entity.mode === \'imported\'"><md-tooltip>Imported policy</md-tooltip>attachment</i><span ng-if="row.entity.type ===\'mesh\'">Mesh</span><span ng-if="row.entity.type ===\'hubAndSpoke\'">Hub and Spoke</span><span ng-if="row.entity.type ===\'control\'">Custom Control</span></div>'
                    }),
                    a.createColumns(b.header.columns),
                    a.setTableData(g.filterData(b.data, f.newPolicyDefinitions.control, "definitionId").concat(g.filterData(b.data, f.newPolicyDefinitions.mesh, "definitionId")).concat(g.filterData(b.data, f.newPolicyDefinitions.hubAndSpoke, "definitionId"))),
                    angular.forEach(a.data, function(b) {
                        var c, d = h.getInstance({});
                        d.findPolicyIndex(b) < 0 && (c = d.appendPolicy(b),
                        "hubandspoke" !== b.type.toLowerCase() && "mesh" !== b.type.toLowerCase() || n(c, a))
                    })) : (a.createColumns(b.header.columns),
                    a.setTableData(b.data),
                    a.serverCallInProgress = !1),
                    a.taggedSearchObject.searchData(),
                    e.resolve(b.data)
                }, function(c) {
                    angular.isObject(c) && g.checkNestedProperty(c, "error", "details") ? b.error("Error occurred while saving table state: " + c.error.message + ":" + c.error.details) : b.info("API error response needs to be updated to conform to company guidelines."),
                    a.serverCallInProgress = !1,
                    e.reject()
                }),
                e.promise
            }
        }
    }
    angular.module("vManage").service("ControlPolicyService", a),
    a.$inject = ["$state", "$log", "$q", "PolicyWizardManager", "Table", "Policy", "appUtil", "PolicyAssembly", "notification", "policyService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w) {
        function x(a) {
            angular.isObject(a) && h.checkNestedProperty(a, "error", "details") ? (e.error("Error occurred while processing policy: " + a.error.message + ":" + a.error.details),
            l.error(a.error.message + ": " + a.error.details)) : (e.info("API error response needs to be updated to conform to company guidelines."),
            l.error("Error occurred while processing policy"))
        }
        var y = this
          , z = "Default Action";
        y.stateString = h.getStateString(b),
        a.isWizardFlow = b.previousState && _.includes(b.previousState.name, "app.config.policy.wizard.configureTopology"),
        y.policyObj = w.getInstance(),
        y.serverCallInProgress = !1,
        y.readOnly = _.includes(b.current.name, "view"),
        a.isWizardFlow ? a.breadCrumb.states = [{
            name: "control-policy",
            title: "Add Custom Control Policy"
        }] : a.breadCrumb.states = [{
            name: "policy",
            title: "Policy",
            state: function(a) {
                b.go("app.config.policy.centralizedPolicy.vsmart", {
                    reload: !0
                })
            }
        }, {
            name: "advanced-policy",
            title: "Topology",
            state: function(a) {
                b.go("app.config.policy.custom.topology.control", {
                    reload: !0
                })
            }
        }, {
            name: "traffic-policy",
            title: "Add Custom Control Policy"
        }],
        a.buttonFunctions.reset(),
        a.buttonFunctions.push({
            title: "Save Control Policy",
            layoutClass: "globalButtonIcon",
            stateString: a.stateString + "save",
            hideButton: function() {
                return y.readOnly
            },
            ButtonActionFn: function(a) {
                if (l.clear(),
                y.controlPolicyForm.$submitted = !0,
                y.controlPolicyForm.$invalid)
                    return void l.error("Please fill all required fields.");
                for (var b in y.controlPolicy.sequences)
                    if (!y.controlPolicy.sequences[b].isValid())
                        return void l.error("Invalid or missing fields in sequence rule.");
                y.savePolicy(a)
            }
        }, {
            title: "Cancel",
            layoutClass: "flatButton",
            stateString: a.stateString + "cancel",
            ButtonActionFn: function(c) {
                y.policyObj.showWizardSteps = !0,
                a.isWizardFlow ? b.go("app.config.policy.wizard.configureTopology.topology") : b.go("app.config.policy.custom.topology.control")
            }
        }),
        a.isWizardFlow || a.buttonFunctions.push({
            title: "PREVIEW",
            leftAlign: !0,
            width: "100px",
            layoutClass: "flatButton",
            stateString: a.stateString + "preview",
            hideButton: function() {
                return y.readOnly
            },
            ButtonActionFn: function(a) {
                function c() {
                    b.go("app.config.policy.preview", {
                        policy: y.controlPolicy
                    })
                }
                if (l.clear(),
                y.controlPolicyForm.$submitted = !0,
                y.controlPolicyForm.$invalid)
                    return void l.error("Please fill all required fields.");
                for (var d in y.controlPolicy.sequences)
                    if (!y.controlPolicy.sequences[d].isValid())
                        return void l.error("Invalid or missing fields in sequence rule.");
                y.controlPolicy.definitionId ? y.controlPolicy.previewById() && y.controlPolicy.previewById().then(function(a) {
                    y.controlPolicy.runningConfig = a.preview,
                    c()
                }, function(a) {
                    x(a)
                }) : c()
            }
        }),
        a.globalButtonState.disableTabs = !0,
        a.globalButtonState.customOptions = !1,
        y.controlPolicy = null,
        y.selectedSeq = null,
        y.localPolicyRule = {
            hideNewRule: !0
        },
        y.seqActions = [{
            label: "Copy",
            callback: function(a) {
                y.controlPolicy.copySequence(a)
            }
        }, {
            label: "Delete",
            callback: function(a) {
                var b = y.controlPolicy.removeSequence(a);
                y.controlPolicy.sequences.length > 0 ? (y.selectedSeq = b > 0 ? y.controlPolicy.sequences[b - 1] : y.controlPolicy.sequences[0],
                y.cancelCreateRule()) : (y.selectedSeq = {
                    name: z,
                    rules: [y.controlPolicy.defaultAction]
                },
                y.cancelCreateRule(),
                y.localPolicyRule = {
                    hideNewRule: !0
                })
            }
        }, {
            label: "Rename",
            callback: function(a) {
                d(function() {
                    a.readOnly = !1
                })
            }
        }],
        _.isNull(c.policy) ? y.controlPolicy = new i({}) : (y.controlPolicy = new i(c.policy),
        y.selectedSeq = {
            name: z,
            rules: [y.controlPolicy.defaultAction]
        }),
        c.id || (y.selectedSeq = {
            name: z,
            rules: [y.controlPolicy.defaultAction]
        }),
        y.policyRefList = null,
        f.all([m.getInstance().listAsync(), n.getInstance().listAsync(), o.getInstance().listAsync(), p.getInstance().listAsync(), q.getInstance().listAsync(), r.getInstance().listAsync(), s.getInstance().listAsync(), t.getInstance().listAsync(), u.getInstance().listAsync()]).then(function(a) {
            !c.id || b.previousState && "app.config.policy.preview" === b.previousState.name || (y.policyRefList = _.flatten(a.map(function(a) {
                return [].concat.apply([], a)
            })),
            y.controlPolicy.get(c.id, y.policyRefList).then(function(a) {
                a.sequences.length > 0 ? (y.selectedSeq = a.sequences[0],
                y.selectedSeq && y.selectedSeq.markRulesEditable(),
                y.localPolicyRule.hideNewRule = !1) : y.selectedSeq = {
                    name: z,
                    rules: [y.controlPolicy.defaultAction]
                }
            }, function(a) {
                x(a)
            }))
        }, function(a) {
            !c.id || b.previousState && "app.config.policy.preview" === b.previousState.name ? x(a) : y.controlPolicy.get(c.id).then(function(a) {
                a.sequences.length > 0 ? (y.selectedSeq = a.sequences[0],
                y.selectedSeq && y.selectedSeq.markRulesEditable(),
                y.localPolicyRule.hideNewRule = !1) : y.selectedSeq = {
                    name: z,
                    rules: [y.controlPolicy.defaultAction]
                }
            }, function(a) {
                x(a)
            })
        }),
        y.addSequenceType = function(a) {
            g.show({
                templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/customControl/modal/views/sequenceOptionsModal.html",
                controller: "ControlPolicySequenceOptionsController",
                controllerAs: "policyCtrl",
                targetEvent: a
            }).then(function(a) {
                y.selectedSeq = y.controlPolicy.appendSequence({
                    name: a.title,
                    description: a.description,
                    type: a.type
                }),
                y.cancelCreateRule()
            })
        }
        ,
        y.createRule = function() {
            return !(y.localPolicyRule instanceof j) && (y.localPolicyRule = y.selectedSeq.getDefaultRule(),
            $("#policy-rule-create").append(k('<policy-rule rule="policySeqCtrl.localPolicyRule" save-fn="policySeqCtrl.addRuleToPolicy()" cancel-fn="policySeqCtrl.cancelCreateRule()"></policy-rule>')(a)),
            void y.selectedSeq.markRulesUneditable())
        }
        ,
        y.addRuleToPolicy = function() {
            y.localPolicyRule.hideNewRule = !1,
            y.localPolicyRule.readOnly = !0;
            var a = y.selectedSeq.appendRule(y.localPolicyRule);
            a.orderNo = y.selectedSeq.rules.length - 1,
            y.cancelCreateRule()
        }
        ,
        y.selectSequence = function(a, b) {
            if (a !== y.selectedSeq) {
                if (y.selectedSeq.name !== z && !y.selectedSeq.isValid())
                    return l.warning("Please save or close open rule before proceeding."),
                    !1;
                if (y.selectedSeq.name === z && !y.selectedSeq.rules[0].valid)
                    return l.warning("Please save or close open rule before proceeding."),
                    !1;
                if (y.selectedSeq = a,
                y.cancelCreateRule(),
                b)
                    return y.selectedSeq.rules = [y.controlPolicy.defaultAction],
                    void (y.localPolicyRule = {
                        hideNewRule: !0
                    });
                y.selectedSeq.markRulesEditable()
            }
        }
        ,
        y.cancelCreateRule = function() {
            y.localPolicyRule = null,
            $("#policy-rule-create").empty()
        }
        ,
        y.savePolicy = function(c) {
            y.controlPolicy.activatedId ? g.show({
                templateUrl: "app/configuration/policy/modal/activateCentralizedPolicy.html",
                controller: "ActivateCentralizedPolicyModalCtrl",
                targetEvent: c,
                resolve: {
                    policy: function() {
                        return y.controlPolicy
                    }
                }
            }).then(function(a) {
                b.go("app.device.status", {
                    activity: v.getStatusAction("VSMART_POLICY_CONFIG").endpoint,
                    pid: a ? a.id : ""
                })
            }) : (y.serverCallInProgress = !0,
            y.controlPolicy.save().then(function(c) {
                y.serverCallInProgress = !1,
                y.policyObj.showWizardSteps = !0,
                a.isWizardFlow ? (y.policyObj.newPolicyDefinitions.control.push({
                    id: c.definitionId,
                    type: "created"
                }),
                b.go("app.config.policy.wizard.configureTopology.topology")) : b.go("app.config.policy.custom.topology.control")
            }, function(a) {
                y.serverCallInProgress = !1,
                x(a)
            }))
        }
        ,
        a.evalDragDrop = function() {
            y.selectedSeq.renumberRules(),
            angular.forEach($("policy-rule"), function(a) {
                $(a).parent().css("height", "auto")
            })
        }
        ,
        a.onDragStop = function() {
            angular.forEach($("policy-rule"), function(a) {
                $(a).parent().css("height", "auto")
            })
        }
        ,
        a.$on("evaluate-rule", function(a, b) {
            return angular.isDefined(b.event) ? void (b.event.editable ? y.selectedSeq.markRulesEditable() : y.selectedSeq.markRulesUneditable()) : void y.selectedSeq.refreshRule(b.rule)
        }),
        a.$on("$destroy", function() {
            a.buttonFunctions.reset()
        })
    }
    angular.module("vManage").controller("CreateControlPolicyController", a),
    a.$inject = ["$scope", "$state", "$stateParams", "$timeout", "$log", "$q", "$mdDialog", "appUtil", "ControlPolicy", "PolicyRule", "$compile", "notification", "AppAppFamilyListManager", "ColorListManager", "DataPrefixListManager", "PolicerListManager", "TLOCListManager", "VPNListManager", "SLAClassListManager", "SiteListManager", "PrefixListManager", "StatusService", "PolicyWizardManager"]
}(),
function() {
    function a(a, b, c) {
        var d = this;
        d.modalErr = {
            occurred: !1,
            error: {
                message: "",
                details: ""
            }
        },
        d.policy = {
            name: "",
            description: "",
            type: ""
        },
        d.ok = function() {
            d.modalErr.occurred = !1;
            var e = _.find(c.data, {
                name: d.policy.name
            });
            return e ? (d.modalErr.occurred = !0,
            d.modalErr.error.message = "Duplicate Policy name.",
            d.modalErr.error.details = "Please provide a unique Policy name.",
            !1) : (b.go("app.config.policy.centralizedPolicy.control_policy.create", {
                policy: {
                    name: d.policy.name,
                    description: d.policy.description,
                    type: "control"
                }
            }),
            void a.hide())
        }
        ,
        d.cancel = function() {
            a.cancel()
        }
    }
    angular.module("vManage").controller("CreateControlPolicyTypeController", a),
    a.$inject = ["$mdDialog", "$state", "table"]
}(),
function() {
    function a(a, b) {
        var c = this;
        c.sequences = [{
            type: "route",
            title: "Route",
            description: "Create a policy to apply on a OMP",
            style: {
                iconPath: "images/policy/route.svg",
                color: "#bc80bd"
            }
        }, {
            type: "tloc",
            title: "TLOC",
            description: "Create a policy to apply to TLOCs",
            style: {
                iconPath: "images/policy/tloc.svg",
                color: "#2576ad"
            }
        }],
        c.ok = function(b) {
            a.hide(b)
        }
        ,
        c.cancel = function() {
            a.cancel()
        }
    }
    angular.module("vManage").controller("ControlPolicySequenceOptionsController", a),
    a.$inject = ["$mdDialog", "Policy"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l) {
        function m(a) {
            angular.isObject(a) && g.checkNestedProperty(a, "error", "details") ? (e.error("Error occurred while processing policy: " + a.error.message + ":" + a.error.details),
            i.error(a.error.message + ": " + a.error.details)) : (e.info("API error response needs to be updated to conform to company guidelines."),
            i.error("Error occurred while processing policy"))
        }
        var n = this;
        n.stateString = g.getStateString(b),
        n.readOnly = _.includes(b.current.name, "view"),
        a.isWizardFlow = b.previousState && _.includes(b.previousState.name, "app.config.policy.wizard.configureTopology");
        var o = k.getInstance();
        n.showComponent = {
            spokeListFormCollapse: !0,
            hubListFormCollapse: !0
        },
        a.isWizardFlow ? a.breadCrumb.states = [{
            name: "traffic-policy",
            title: "Add Hub-and-Spoke Policy"
        }] : a.breadCrumb.states = [{
            name: "policy",
            title: "Policy",
            state: function(a) {
                b.go("app.config.policy.centralizedPolicy.vsmart", {
                    reload: !0
                })
            }
        }, {
            name: "advanced-policy",
            title: "Topology",
            state: function(a) {
                b.go("app.config.policy.custom.topology.control", {
                    reload: !0
                })
            }
        }, {
            name: "hub-and-spoke-policy",
            title: "Add Hub-and-Spoke Policy"
        }],
        a.buttonFunctions.reset(),
        a.buttonFunctions.push({
            title: "Save Hub-and-Spoke Policy",
            layoutClass: "globalButtonIcon",
            stateString: a.stateString + "save",
            hideButton: function() {
                return n.readOnly
            },
            ButtonActionFn: function(a) {
                return n.emptyVpnList = !1,
                i.clear(),
                n.controlPolicyForm.$submitted = !0,
                n.controlPolicyForm.$invalid ? (i.error("Please fill all required fields."),
                void (n.hubAndSpokePolicy.vpnList || (n.emptyVpnList = !0))) : n.hubAndSpokePolicy.definition.vpnList.listId ? void n.savePolicy(a) : (i.error("Please fill all required fields."),
                void (n.emptyVpnList = !0))
            }
        }, {
            title: "CANCEL",
            layoutClass: "flatButton",
            stateString: a.stateString + "cancel",
            ButtonActionFn: function(c) {
                o.showWizardSteps = !0,
                a.isWizardFlow ? b.go("app.config.policy.wizard.configureTopology.topology") : b.go("app.config.policy.custom.topology.control", {
                    reload: !0
                })
            }
        }),
        a.isWizardFlow || a.buttonFunctions.push({
            title: "PREVIEW",
            layoutClass: "flatButton",
            leftAlign: !0,
            width: "100px",
            stateString: a.stateString + "preview",
            hideButton: function() {
                return n.readOnly
            },
            ButtonActionFn: function(a) {
                function c() {
                    n.hubAndSpokePolicy.hubSitesTable = null,
                    n.hubAndSpokePolicy.spokeSitesTable = null,
                    b.go("app.config.policy.preview", {
                        policy: n.hubAndSpokePolicy
                    })
                }
                return i.clear(),
                n.controlPolicyForm.$submitted = !0,
                n.controlPolicyForm.$invalid ? (i.error("Please fill all required fields."),
                void (n.hubAndSpokePolicy.definition.vpnList.listId || (n.emptyVpnList = !0))) : n.hubAndSpokePolicy.definition.vpnList.listId ? void (n.hubAndSpokePolicy.definitionId ? n.hubAndSpokePolicy.previewById().then(function(a) {
                    n.hubAndSpokePolicy.runningConfig = a.preview,
                    c()
                }, function(a) {
                    m(a)
                }) : c()) : (i.error("Please fill all required fields."),
                void (n.emptyVpnList = !0))
            }
        }),
        n.hubAndSpokeActions = [{
            label: "Copy",
            callback: function(a) {
                n.hubAndSpokePolicy.copySequence(a, n.hubAndSpokePolicy.definition.subDefinitions)
            }
        }, {
            label: "Delete",
            callback: function(a) {
                var b = n.hubAndSpokePolicy.removeSequence(a, n.hubAndSpokePolicy.definition.subDefinitions);
                n.hubAndSpokePolicy.hubSitesTable.data.reset(),
                n.hubAndSpokePolicy.spokeSitesTable.data.reset(),
                n.hubAndSpokePolicy.selectedHubAndSpoke = b > 0 ? n.hubAndSpokePolicy.definition.subDefinitions[b - 1] : n.hubAndSpokePolicy.definition.subDefinitions[0],
                n.selectedIndex = b > 0 ? b - 1 : b,
                n.hubAndSpokePolicy.setSiteTableData(n.hubAndSpokePolicy.selectedHubAndSpoke)
            }
        }, {
            label: "Rename",
            callback: function(a) {
                d(function() {
                    a.readOnly = !1
                })
            }
        }],
        a.globalButtonState.disableTabs = !0,
        a.globalButtonState.customOptions = !1,
        n.hubAndSpokePolicy = null,
        _.isNull(c.policy) ? (n.hubAndSpokePolicy = new h({}),
        n.hubAndSpokePolicy.serverCallInProgress = !0) : (n.hubAndSpokePolicy = new h(c.policy),
        n.selectedIndex = 0,
        n.hubAndSpokePolicy.serverCallInProgress = !1),
        n.hubAndSpokePolicy.createSiteTableInstance("hubSitesTable", n.readOnly),
        n.hubAndSpokePolicy.createSiteTableInstance("spokeSitesTable", n.readOnly),
        _.isNull(c.policy) && n.hubAndSpokePolicy.getLists().then(function(a) {
            n.hubAndSpokePolicy.vpnLists = a[0],
            n.hubAndSpokePolicy.siteLists = a[1],
            n.hubAndSpokePolicy.prefixLists = a[2],
            n.hubAndSpokePolicy.tlocLists = a[3],
            !c.id || b.previousState && "app.config.policy.preview" === b.previousState.name ? (n.addHubAndSpoke(),
            n.hubAndSpokePolicy.serverCallInProgress = !1) : n.hubAndSpokePolicy.get(c.id).then(function(a) {
                n.hubAndSpokePolicy.definition.subDefinitions.length > 0 ? (n.hubAndSpokePolicy.selectedHubAndSpoke = n.hubAndSpokePolicy.definition.subDefinitions[0],
                n.selectedIndex = 0,
                n.hubAndSpokePolicy.setSiteTableData(n.hubAndSpokePolicy.selectedHubAndSpoke),
                n.hubAndSpokePolicy.serverCallInProgress = !1) : n.hubAndSpokePolicy.serverCallInProgress = !1
            }, function(a) {
                m(a)
            })
        }, function(a) {
            m(a)
        }),
        n.addHubAndSpoke = function() {
            n.hubAndSpokePolicy.addHubAndSpokes(),
            n.selectedIndex = n.hubAndSpokePolicy.definition.subDefinitions.length - 1,
            n.hubAndSpokePolicy.selectedHubAndSpoke = n.hubAndSpokePolicy.definition.subDefinitions[n.hubAndSpokePolicy.definition.subDefinitions.length - 1],
            n.hubAndSpokePolicy.hubSitesTable.data.reset(),
            n.hubAndSpokePolicy.spokeSitesTable.data.reset();
        }
        ,
        n.selectHubAndSpoke = function(a, b) {
            a !== n.hubAndSpokePolicy.selectedHubAndSpoke && (n.hubAndSpokePolicy.selectedHubAndSpoke = a,
            n.selectedIndex = b,
            n.hubAndSpokePolicy.hubSitesTable.data.reset(),
            n.hubAndSpokePolicy.spokeSitesTable.data.reset(),
            n.hubAndSpokePolicy.setSiteTableData(n.hubAndSpokePolicy.selectedHubAndSpoke))
        }
        ,
        _.isNull(c.policy) || n.hubAndSpokePolicy.definition.subDefinitions.length > 0 && (n.hubAndSpokePolicy.selectedHubAndSpoke = n.hubAndSpokePolicy.definition.subDefinitions[0],
        n.hubAndSpokePolicy.setSiteTableData(n.hubAndSpokePolicy.selectedHubAndSpoke)),
        n.savePolicy = function(c) {
            n.hubAndSpokePolicy.activatedId ? f.show({
                templateUrl: "app/configuration/policy/modal/activateCentralizedPolicy.html",
                controller: "ActivateCentralizedPolicyModalCtrl",
                targetEvent: c,
                resolve: {
                    policy: function() {
                        return n.hubAndSpokePolicy
                    }
                }
            }).then(function(a) {
                b.go("app.device.status", {
                    activity: l.getStatusAction("VSMART_POLICY_CONFIG").endpoint,
                    pid: a ? a.id : ""
                })
            }) : (n.serverCallInProgress = !0,
            n.hubAndSpokePolicy.save().then(function(c) {
                n.serverCallInProgress = !1,
                o.showWizardSteps = !0,
                a.isWizardFlow ? (o.newPolicyDefinitions.hubAndSpoke.push({
                    id: c.definitionId,
                    type: "created"
                }),
                b.go("app.config.policy.wizard.configureTopology.topology")) : b.go("app.config.policy.custom.topology.control")
            }, function(a) {
                n.serverCallInProgress = !1,
                m(a)
            }))
        }
        ,
        n.showForm = function(a) {
            n.showComponent[a] && ("hubListFormCollapse" === a ? (n.hubAndSpokePolicy.selectedHubAndSpoke.hubSiteList = {},
            n.emptyHubList = !1) : (n.hubAndSpokePolicy.selectedHubAndSpoke.spokeSiteList = {},
            n.emptySpokeList = !1)),
            n.showComponent[a] = !n.showComponent[a]
        }
        ,
        n.cancelForm = function(a) {
            n.showComponent[a] = !n.showComponent[a]
        }
        ,
        n.saveList = function(a) {
            "hubListFormCollapse" === a ? n.hubAndSpokePolicy.selectedHubAndSpoke.hubSiteList.listId ? (n.hubAndSpokePolicy.hubSitesTable.data.push(angular.copy(n.hubAndSpokePolicy.selectedHubAndSpoke.hubSiteList)),
            n.hubAndSpokePolicy.selectedHubAndSpoke.hubSites.push(n.hubAndSpokePolicy.selectedHubAndSpoke.hubSiteList),
            angular.forEach(n.hubAndSpokePolicy.selectedHubAndSpoke.spokeSites, function(a) {
                a.hubSites.push(n.hubAndSpokePolicy.selectedHubAndSpoke.hubSiteList)
            }),
            delete n.hubAndSpokePolicy.selectedHubAndSpoke.hubSiteList,
            n.showComponent[a] = !n.showComponent[a],
            n.emptyHubList = !1) : n.emptyHubList = !0 : n.hubAndSpokePolicy.selectedHubAndSpoke.spokeSiteList.listId ? (n.hubAndSpokePolicy.spokeSitesTable.data.push(n.hubAndSpokePolicy.selectedHubAndSpoke.spokeSiteList),
            n.hubAndSpokePolicy.selectedHubAndSpoke.spokeSiteList.hubSites = angular.copy(n.hubAndSpokePolicy.selectedHubAndSpoke.hubSites),
            n.hubAndSpokePolicy.selectedHubAndSpoke.spokeSites.push(n.hubAndSpokePolicy.selectedHubAndSpoke.spokeSiteList),
            delete n.hubAndSpokePolicy.selectedHubAndSpoke.spokeSiteList,
            n.showComponent[a] = !n.showComponent[a],
            n.emptySpokeList = !1) : n.emptySpokeList = !0
        }
        ,
        n.openCustomPreferenceModal = function(a) {
            var b = n.selectedIndex;
            f.show({
                templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/hubAndSpoke/modal/views/managePreferences.html",
                controller: "managePreferenceController",
                conrollerAs: "PolicyCtrl",
                targetEvent: a,
                resolve: {
                    hubAndSpokePolicy: function() {
                        return n.hubAndSpokePolicy
                    }
                }
            }).then(function(a) {
                n.hubAndSpokePolicy.selectedHubAndSpoke = a,
                n.hubAndSpokePolicy.definition.subDefinitions[b] = n.hubAndSpokePolicy.selectedHubAndSpoke
            })
        }
        ,
        a.$on("$destroy", function() {
            a.buttonFunctions.reset()
        })
    }
    angular.module("vManage").controller("createHubAndSpokeController", a),
    a.$inject = ["$scope", "$state", "$stateParams", "$timeout", "$log", "$mdDialog", "appUtil", "HubAndSpokePolicy", "notification", "PolicyAssembly", "PolicyWizardManager", "StatusService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        var k = a;
        k.stateString = e.getStateString(b),
        k.readOnly = _.includes(b.current.name, "view"),
        k.selectedHubAndSpoke = angular.copy(f.selectedHubAndSpoke),
        f.getLists().then(function(a) {
            var b = a[2]
              , c = a[3];
            angular.forEach(k.selectedHubAndSpoke.spokeSites, function(a) {
                angular.forEach(a.hubSites, function(a, d) {
                    a.prefixList = a.prefixList || [],
                    a.prefixLists = angular.copy(b),
                    a.tlocList = a.tlocList || [],
                    a.tlocLists = angular.copy(c),
                    a.orderNo = a.orderNo || d
                })
            })
        }, function(a) {
            h.info("API error response needs to be updated to confirm to company guidelines.")
        }),
        k.evalDragDrop = function(a, b, c) {
            angular.forEach(k.selectedHubAndSpoke.spokeSites[c].hubSites, function(a, b) {
                a.orderNo = b
            })
        }
        ,
        k.save = function() {
            a.configureError = !1,
            !k.selectedHubAndSpoke.advertiseTloc || k.selectedHubAndSpoke.advertiseTloc && e.checkNestedProperty(k, "selectedHubAndSpoke", "tlocList", "listId") ? j.hide(k.selectedHubAndSpoke) : (a.configureError = !0,
            a.configureMessage = {
                error: {
                    message: "Please select all the required fields.",
                    details: "All the required fields needs to be filled to save the form."
                }
            })
        }
        ,
        k.cancel = function() {
            j.cancel()
        }
    }
    angular.module("vManage").controller("managePreferenceController", a),
    a.$inject = ["$scope", "$state", "$stateParams", "$timeout", "appUtil", "hubAndSpokePolicy", "notification", "$log", "HubAndSpokePolicy", "$mdDialog"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        function k(a) {
            angular.isObject(a) && e.checkNestedProperty(a, "error", "details") ? (d.error("Error occurred while processing policy: " + a.error.message + ":" + a.error.details),
            g.error(a.error.message + ": " + a.error.details)) : (d.info("API error response needs to be updated to conform to company guidelines."),
            g.error("Error occurred while processing policy"))
        }
        var l = this;
        l.stateString = e.getStateString(b),
        l.readOnly = _.includes(b.current.name, "view"),
        a.isWizardFlow = b.previousState && _.includes(b.previousState.name, "app.config.policy.wizard.configureTopology");
        var m = h.getInstance();
        l.showComponent = {
            formCollapse: !0
        },
        l.serverCallInProgress = !1,
        a.isWizardFlow ? a.breadCrumb.states = [{
            name: "mesh-region",
            title: "Add Mesh Region"
        }] : a.breadCrumb.states = [{
            name: "policy",
            title: "Policy",
            state: function(a) {
                b.go("app.config.policy.centralizedPolicy.vsmart", {
                    reload: !0
                })
            }
        }, {
            name: "advanced-policy",
            title: "Topology Options",
            state: function(a) {
                b.go("app.config.policy.custom.topology.control", {
                    reload: !0
                })
            }
        }, {
            name: "mesh-region",
            title: "Add Mesh Region"
        }],
        a.buttonFunctions.reset(),
        a.buttonFunctions.push({
            title: "Save Mesh Topology",
            layoutClass: "globalButtonIcon",
            stateString: a.stateString + "save",
            hideButton: function() {
                return l.readOnly
            },
            ButtonActionFn: function(a) {
                return g.clear(),
                l.controlPolicyForm.$submitted = !0,
                l.emptyVpnList = !1,
                l.controlPolicyForm.$invalid ? (g.error("Please fill all required fields."),
                void (l.meshPolicy.definition.vpnList.listId || (l.emptyVpnList = !0))) : l.meshPolicy.definition.vpnList.listId ? void l.savePolicy(a) : (g.error("Please fill all required fields."),
                void (l.emptyVpnList = !0))
            }
        }, {
            title: "CANCEL",
            layoutClass: "flatButton",
            stateString: a.stateString + "cancel",
            ButtonActionFn: function(c) {
                m.showWizardSteps = !0,
                a.isWizardFlow ? b.go("app.config.policy.wizard.configureTopology.topology") : b.go("app.config.policy.custom.topology.control")
            }
        }),
        a.isWizardFlow || a.buttonFunctions.push({
            title: "PREVIEW",
            layoutClass: "flatButton",
            leftAlign: !0,
            width: "100px",
            stateString: a.stateString + "preview",
            hideButton: function() {
                return l.readOnly
            },
            ButtonActionFn: function(a) {
                function c() {
                    l.meshPolicy.table = null,
                    b.go("app.config.policy.preview", {
                        policy: l.meshPolicy
                    })
                }
                return g.clear(),
                l.controlPolicyForm.$submitted = !0,
                l.emptyVpnList = !1,
                l.controlPolicyForm.$invalid ? (g.error("Please fill all required fields."),
                void (l.meshPolicy.definition.vpnList.listId || (l.emptyVpnList = !0))) : l.meshPolicy.definition.vpnList.listId ? void (l.meshPolicy.definitionId ? l.meshPolicy.previewById().then(function(a) {
                    l.meshPolicy.runningConfig = a.preview,
                    c()
                }, function(a) {
                    k(a)
                }) : c()) : (g.error("Please fill all required fields."),
                void (l.emptyVpnList = !0))
            }
        }),
        a.globalButtonState.disableTabs = !0,
        a.globalButtonState.customOptions = !1,
        l.meshPolicy = null,
        _.isNull(c.policy) ? l.meshPolicy = new f({}) : l.meshPolicy = new f(c.policy),
        l.meshPolicy.serverCallInProgress = !0,
        l.meshPolicy.createSiteTableInstance(l.readOnly),
        l.meshPolicy.setSiteTableData(),
        l.meshPolicy.getLists().then(function(a) {
            !c.id || b.previousState && "app.config.policy.preview" === b.previousState.name ? (l.showForm(),
            l.meshPolicy.serverCallInProgress = !1) : l.meshPolicy.get(c.id).then(function(a) {
                l.meshPolicy.serverCallInProgress = !1
            }, function(a) {
                k(a)
            })
        }, function(a) {
            k(a)
        }),
        l.savePolicy = function(c) {
            l.meshPolicy.activatedId ? j.show({
                templateUrl: "app/configuration/policy/modal/activateCentralizedPolicy.html",
                controller: "ActivateCentralizedPolicyModalCtrl",
                targetEvent: c,
                resolve: {
                    policy: function() {
                        return l.meshPolicy
                    }
                }
            }).then(function(a) {
                b.go("app.device.status", {
                    activity: i.getStatusAction("VSMART_POLICY_CONFIG").endpoint,
                    pid: a ? a.id : ""
                })
            }) : (l.serverCallInProgress = !0,
            l.meshPolicy.save().then(function(c) {
                l.serverCallInProgress = !1,
                m.showWizardSteps = !0,
                a.isWizardFlow ? (m.newPolicyDefinitions.mesh.push({
                    id: c.definitionId,
                    type: "created"
                }),
                b.go("app.config.policy.wizard.configureTopology.topology")) : b.go("app.config.policy.custom.topology.control")
            }, function(a) {
                l.serverCallInProgress = !1,
                k(a)
            }))
        }
        ,
        l.showForm = function() {
            l.showComponent.formCollapse = !l.showComponent.formCollapse,
            l.meshObj = l.meshPolicy.createMeshObj(),
            l.emptySiteList = !1,
            l.meshRegionForm.$submitted = !1
        }
        ,
        l.cancelForm = function() {
            l.showComponent.formCollapse = !l.showComponent.formCollapse
        }
        ,
        l.saveList = function() {
            return l.meshRegionForm.$submitted = !0,
            l.meshRegionForm.$invalid ? (g.clear(),
            g.error("Please fill all the required fields."),
            void (0 === l.meshObj.siteLists.length && (l.emptySiteList = !0))) : 0 === l.meshObj.siteLists.length ? (g.clear(),
            g.error("Please fill all the required fields."),
            void (l.emptySiteList = !0)) : (l.meshPolicy.saveMeshRegionList(l.meshObj),
            void (l.showComponent.formCollapse = !l.showComponent.formCollapse))
        }
        ,
        a.$on("$destroy", function() {
            a.buttonFunctions.reset()
        })
    }
    angular.module("vManage").controller("meshController", a),
    a.$inject = ["$scope", "$state", "$stateParams", "$log", "appUtil", "MeshPolicy", "notification", "PolicyWizardManager", "StatusService", "$mdDialog"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        a.stateString = e.getStateString(b);
        var j = this;
        j.meshObj = angular.copy(g.entity),
        j.isServerCallDone = !1,
        i.getInstance().listAsync().then(function(a) {
            j.isServerCallDone = !0,
            j.siteLists = a;
            var b = []
              , c = j.meshObj.siteLists.split(",").map(function(a) {
                return a.trim()
            });
            angular.forEach(c, function(a) {
                angular.forEach(j.siteLists, function(c) {
                    c.name === a && (c.selected = !0,
                    b.push(c))
                })
            }),
            j.meshObj.siteLists = b
        }, function(a) {
            c.info("API error response needs to be updated to confirm to company guidelines."),
            f.error("Error occurred while retrieving vpn list or site list")
        }),
        j.cancel = function() {
            d.cancel("cancel")
        }
        ,
        j.update = function() {
            "" !== j.meshObj.name && 0 !== j.meshObj.siteLists.length && (g.entity.name = j.meshObj.name,
            j.meshObj.sites.reset(),
            g.entity.siteLists = "",
            angular.forEach(j.meshObj.siteLists, function(a) {
                j.meshObj.sites.push(a),
                g.entity.siteLists += a.name,
                g.entity.siteLists += ","
            }),
            g.entity.siteLists = g.entity.siteLists.trim().slice(0, -1),
            j.meshObj.index = h,
            d.hide(j.meshObj))
        }
    }
    angular.module("vManage").controller("UpdateMeshPolicyController", a),
    a.$inject = ["$scope", "$state", "$log", "$mdDialog", "appUtil", "notification", "selectedRow", "rowIndex", "SiteListManager"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h = this
          , i = g;
        h.stateString = d.getStateString(b);
        e.getInstance();
        h.isWizardFlow = _.includes(b.current.name, "app.config.policy.wizard.configureTopology"),
        i.setWizardFlow(h.isWizardFlow),
        a.breadCrumb.states = i.getBreadCrumbs(b.params.action),
        h.table = i.getTableInstance(),
        h.isWizardFlow && (h.assemblyObj = f.getInstance({})),
        h.table.setViewActions([{
            button: !0,
            title: "Add VPN Membership Policy",
            icon: "add_circle",
            rbac: "Policy Configuration",
            cssId: a.stateString + "add_vpn_member",
            disableButton: function() {
                return h.isWizardFlow && h.table.data.length > 0
            },
            action: function(a) {
                h.openAddListModal(a)
            }
        }]),
        i.setTableDataAndColumns(h.table),
        h.table.setPostRefreshCallback(function() {
            i.setTableDataAndColumns(h.table)
        }),
        h.openAddListModal = function(a) {
            var b = c.show({
                templateUrl: "app/configuration/policy/centralizedPolicy/topology/vpn_membership/modal/views/updateVpnMembership.html",
                controller: "UpdateVpnMembershipController",
                targetEvent: a,
                resolve: {
                    selectedRow: function() {
                        return null
                    },
                    table: function() {
                        return h.table
                    },
                    viewMode: function() {
                        return "edit"
                    }
                }
            });
            b.then(function(a) {
                h.table.refresh()
            }, function(a) {})
        }
        ,
        a.$on("$destroy", function() {
            a.buttonFunctions.reset(),
            h.table = null
        })
    }
    angular.module("vManage").controller("vpnMembershipController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "PolicyWizardManager", "PolicyAssembly", "VPNMembershipPolicyService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        function l(a) {
            angular.isObject(a) && e.checkNestedProperty(a, "error", "details") ? (c.error("Error occurred while processing policy: " + a.error.message + ":" + a.error.details),
            f.error(a.error.message + ": " + a.error.details)) : (c.info("API error response needs to be updated to conform to company guidelines."),
            f.error("Error occurred while processing policy"))
        }
        var m = a;
        m.stateString = e.getStateString(b),
        m.serverCallInProgress = !1,
        m.readOnly = "view" === j,
        m.isWizardFlow = _.includes(b.current.name, "app.config.policy.wizard.configureTopology"),
        m.title = g && g.definitionId ? "Update VPN Membership Policy" : "Add VPN Membership Policy",
        m.emptySiteList = [],
        m.emptyVpnList = [],
        m.vpnMembershipPolicy = new h({});
        var n = i.getInstance();
        m.serverCallInProgress = !0,
        m.vpnMembershipPolicy.getLists().then(function(a) {
            m.vpnMembershipPolicy.vpnLists = a[0],
            m.vpnMembershipPolicy.siteLists = a[1],
            m.vpnLists = a[0],
            m.siteLists = a[1],
            g && g.definitionId ? m.vpnMembershipPolicy.get(g.definitionId).then(function(a) {
                m.serverCallInProgress = !1
            }, function(a) {
                m.serverCallInProgress = !1,
                l(a)
            }) : (m.serverCallInProgress = !1,
            m.addList())
        }, function(a) {
            m.serverCallInProgress = !1,
            l(a)
        }),
        m.addList = function() {
            var a = {
                siteList: {},
                vpnList: [],
                vpnLists: angular.copy(m.vpnLists),
                siteLists: angular.copy(m.siteLists)
            };
            m.emptySiteList.push(!1),
            m.emptyVpnList.push(!1),
            m.vpnMembershipPolicy.definition.sites.push(a)
        }
        ,
        m.removeList = function(a) {
            m.emptySiteList.splice(a, 1),
            m.emptyVpnList.splice(a, 1),
            _.isEmpty(m.vpnMembershipPolicy.definition.sites) || m.vpnMembershipPolicy.definition.sites.splice(a, 1)
        }
        ,
        m.cancelForm = function() {
            d.cancel("cancel")
        }
        ,
        m.savePolicy = function() {
            if (m.emptyValues = !1,
            m.vpn_membership_update_form.$submitted = !0,
            m.vpn_membership_update_form.$invalid)
                for (var c in m.vpnMembershipPolicy.definition.sites)
                    m.vpnMembershipPolicy.definition.sites[c].siteList.listId || (m.emptySiteList[c] = !0),
                    m.vpnMembershipPolicy.definition.sites[c].vpnList.length || (m.emptyVpnList[c] = !0);
            else {
                for (var c in m.vpnMembershipPolicy.definition.sites)
                    m.vpnMembershipPolicy.definition.sites[c].siteList.listId || (m.emptySiteList[c] = !0,
                    m.emptyValues = !0),
                    m.vpnMembershipPolicy.definition.sites[c].vpnList.length || (m.emptyVpnList[c] = !0,
                    m.emptyValues = !0);
                m.emptyValues || (m.vpnMembershipPolicy.activatedId ? d.show({
                    templateUrl: "app/configuration/policy/modal/activateCentralizedPolicy.html",
                    controller: "ActivateCentralizedPolicyModalCtrl",
                    targetEvent: event,
                    resolve: {
                        policy: function() {
                            return m.vpnMembershipPolicy
                        }
                    }
                }).then(function(a) {
                    b.go("app.device.status", {
                        activity: k.getStatusAction("VSMART_POLICY_CONFIG").endpoint,
                        pid: a ? a.id : ""
                    })
                }) : (m.serverCallInProgress = !0,
                m.vpnMembershipPolicy.save().then(function(b) {
                    m.serverCallInProgress = !1,
                    a.isWizardFlow && n.newPolicyDefinitions.vpnMembershipGroup.push({
                        id: b.definitionId,
                        type: "created"
                    }),
                    d.hide()
                }, function(a) {
                    m.serverCallInProgress = !1,
                    l(a)
                })))
            }
        }
        ,
        m.$on("$destroy", function() {})
    }
    angular.module("vManage").controller("UpdateVpnMembershipController", a),
    a.$inject = ["$scope", "$state", "$log", "$mdDialog", "appUtil", "notification", "selectedRow", "VpnMembershipPolicy", "PolicyWizardManager", "viewMode", "StatusService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l) {
        function m(b) {
            return q ? [{
                name: "policy",
                title: "Centralized Policy",
                state: function(b) {
                    a.go("app.config.policy.centralizedPolicy.vsmart", {
                        reload: !0
                    })
                }
            }, {
                name: "add" === b ? "addPolicy" : "edit" === b ? "editPolicy" : "viewPolicy",
                title: "add" === b ? "Add Policy" : "edit" === b ? "Edit Policy" : "View Policy"
            }] : [{
                name: "policy",
                title: "Centralized Policy",
                state: function(b) {
                    a.go("app.config.policy.centralizedPolicy.vsmart", {
                        reload: !0
                    })
                }
            }, {
                name: "vpn-membership",
                title: "VPN Membership"
            }]
        }
        function n() {
            var a = [{
                type: "View",
                open: "modal",
                templateUrl: "app/configuration/policy/centralizedPolicy/topology/vpn_membership/modal/views/updateVpnMembership.html",
                controller: "UpdateVpnMembershipController",
                resolve: {
                    viewMode: function() {
                        return "view"
                    }
                },
                modalReturnCallback: function(a, b, c) {
                    if (q) {
                        var d = h.getInstance({});
                        d.removePolicy(_.find(d.policyDefinition.assembly, function(a) {
                            return a.definitionId === b.definitionId
                        }))
                    }
                    p(c)
                }
            }, {
                type: "Edit",
                open: "modal",
                templateUrl: "app/configuration/policy/centralizedPolicy/topology/vpn_membership/modal/views/updateVpnMembership.html",
                controller: "UpdateVpnMembershipController",
                resolve: {
                    viewMode: function() {
                        return "edit"
                    }
                },
                hideCallback: function(a) {
                    return "imported" === a.entity.mode
                },
                modalReturnCallback: function(a, b, c) {
                    if (q) {
                        var d = h.getInstance({});
                        d.removePolicy(_.find(d.policyDefinition.assembly, function(a) {
                            return a.definitionId === b.definitionId
                        }))
                    }
                    p(c)
                }
            }, {
                type: "Delete",
                open: "confirm",
                title: "Are you sure you want to delete the policy?",
                content: "This policy will be deleted immediately. You cannot undo the action.",
                hideCallback: function(a) {
                    return a.entity.referenceCount > 0
                },
                okButtonActionFn: function(a, c) {
                    var e = new f(a.entity)
                      , j = d.getInstance()
                      , k = h.getInstance({});
                    e.delete().then(function(b) {
                        if (q) {
                            for (var d = 0; d < j.newPolicyDefinitions[a.entity.type].length; d++)
                                j.newPolicyDefinitions[a.entity.type][d].id === a.entity.definitionId && j.newPolicyDefinitions[a.entity.type].splice(d, 1);
                            k.removePolicy(_.find(k.policyDefinition.assembly, function(b) {
                                return b.definitionId === a.entity.definitionId
                            }))
                        }
                        c.refresh()
                    }, function(a) {
                        angular.isObject(a) && g.checkNestedProperty(a, "error", "details") ? (b.error("Error occurred while saving table state: " + a.error.message + ":" + a.error.details),
                        i.error(a.error.message + ": " + a.error.details)) : (b.info("API error response needs to be updated to conform to company guidelines."),
                        i.error("Error occurred while removing Policy."))
                    })
                }
            }];
            return q ? a.push({
                type: "Detach",
                open: "callback",
                hideCallback: function(a, b, c) {
                    return "created" === a.entity.mode
                },
                okButtonActionFn: function(a, b, c) {
                    for (var e = d.getInstance(), f = h.getInstance({}), g = 0; g < e.newPolicyDefinitions[a.entity.type].length; g++)
                        e.newPolicyDefinitions[a.entity.type][g].id === a.entity.definitionId && (e.newPolicyDefinitions[a.entity.type].splice(g, 1),
                        c.refresh());
                    f.removePolicy(_.find(f.policyDefinition.assembly, function(b) {
                        return b.definitionId === a.entity.definitionId
                    }))
                }
            }) : a.push({
                type: "Copy",
                open: "modal",
                templateUrl: "app/configuration/policy/modal/copyPolicyTemplate.html",
                controller: "CopyPolicyModalCtrl",
                hideCallback: function(a) {
                    return "created" === a.entity.mode
                }
            }),
            a
        }
        function o(a, b) {
            a.getPolicyById(a.definitionId, a.type).then(function(c) {
                angular.forEach(c.definition.sites, function(b) {
                    a.entries.push({
                        siteLists: [b.siteList],
                        vpnLists: b.vpnList
                    })
                }),
                b.serverCallInProgress = !1
            })
        }
        function p(a) {
            a.serverCallInProgress = !0;
            var c = d.getInstance()
              , e = h.getInstance({});
            k.get(l.TRAFFIC_POLICY_DEFINITION + "vpnmembershipgroup").then(function(b) {
                a.taggedSearchObject.setSearchCache(b.data),
                q ? (b.header.columns.splice(1, 1, {
                    dataType: "string",
                    hideable: "true",
                    property: "type",
                    title: "Type",
                    cellTemplate: '<div class="ui-grid-cell-contents flexDisplay" title="TOOLTIP"> <i style="margin: 3px 6px 0px -5px" class="material-icons md-16 icon-primary-color" ng-if="row.entity.mode === \'created\'"> <md-tooltip>Created policy</md-tooltip>queue</i><i style="margin: 1px 10px 0px -5px" class="material-icons md-18 icon-primary-color" ng-if="row.entity.mode === \'imported\'"><md-tooltip>Imported policy</md-tooltip>attachment</i><span ng-if="row.entity.type ===\'vpnMembershipGroup\'">VPN Membership</span></div>'
                }),
                a.createColumns(b.header.columns),
                a.setTableData(g.filterData(b.data, c.newPolicyDefinitions.vpnMembershipGroup, "definitionId")),
                angular.forEach(a.data, function(b) {
                    var c;
                    e.findPolicyIndex(b) < 0 && (c = e.appendPolicy(b),
                    o(c, a))
                })) : (a.createColumns(b.header.columns),
                a.setTableData(b.data),
                a.serverCallInProgress = !1),
                a.taggedSearchObject.searchData()
            }, function(c) {
                angular.isObject(c) && g.checkNestedProperty(c, "error", "details") ? b.error("Error occurred while saving table state: " + c.error.message + ":" + c.error.details) : b.info("API error response needs to be updated to conform to company guidelines."),
                a.serverCallInProgress = !1
            })
        }
        var q = !1;
        return {
            setWizardFlow: function(a) {
                q = a
            },
            getBreadCrumbs: function(a) {
                return m(a)
            },
            getTableInstance: function() {
                var a = new e({
                    menuColumnFilter: !0,
                    columnResizing: !0,
                    singleSelect: !0,
                    enableSorting: !0,
                    tableHeightOffset: q ? 328 : 228,
                    autoLoad: !0,
                    toggleFirstRowOnLoad: !0,
                    dataUid: "definitionId"
                });
                return a.setNoDataMessage(""),
                a.setActionHelperText("(Choose and add VPNs to specific site lists)"),
                a.setHoverAction(n()),
                a
            },
            setTableDataAndColumns: function(a) {
                p(a)
            }
        }
    }
    angular.module("vManage").service("VPNMembershipPolicyService", a),
    a.$inject = ["$state", "$log", "$q", "PolicyWizardManager", "Table", "Policy", "appUtil", "PolicyAssembly", "notification", "policyService", "restService", "apiConstants"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h = this
          , i = g;
        h.stateString = d.getStateString(b),
        h.policyObj = e.getInstance(),
        h.isWizardFlow = _.includes(b.current.name, "app.config.policy.wizard.configureTrafficRules"),
        i.setWizardFlow(h.isWizardFlow);
        var j = {
            name: "app-aware-routing-policy",
            title: "Appliciation Aware Routing Policy"
        };
        a.breadCrumb.states = i.getBreadCrumbs(j, b.params.action),
        h.table = i.getTableInstance("appRoute"),
        h.isWizardFlow && h.table.viewActions[0].dropdownOptions.push({
            title: "Import Existing",
            cssId: "appRoute",
            action: function(a) {
                c.show({
                    templateUrl: "app/configuration/policy/modal/importPolicy.html",
                    controller: "ImportPolicyModalCtrl",
                    targetEvent: a,
                    resolve: {
                        policyList: function() {
                            return h.allAppRoutePolicies
                        },
                        policyType: function() {
                            return {
                                key: "appRoute",
                                display: "Application Aware Routing Policy"
                            }
                        }
                    }
                }).then(function() {
                    h.table.refresh()
                })
            }
        }),
        h.isWizardFlow && (h.assemblyObj = f.getInstance({})),
        h.allAppRoutePolicies = i.setTableDataAndColumns(h.table, "appRoute"),
        h.table.setPostRefreshCallback(function() {
            h.allAppRoutePolicies = i.setTableDataAndColumns(h.table, "appRoute")
        }),
        a.$on("$destroy", function() {
            a.buttonFunctions.reset(),
            h.table = null
        })
    }
    angular.module("vManage").controller("appAwareRoutingController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "PolicyWizardManager", "PolicyAssembly", "trafficPolicyService"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h = this
          , i = g;
        h.stateString = d.getStateString(b),
        h.policyObj = e.getInstance(),
        h.isWizardFlow = _.includes(b.current.name, "app.config.policy.wizard.configureTrafficRules"),
        i.setWizardFlow(h.isWizardFlow);
        var j = {
            name: "cflowd-policy",
            title: "Cflowd Policy"
        };
        a.breadCrumb.states = i.getBreadCrumbs(j, b.params.action),
        h.table = i.getTableInstance("cflowd"),
        h.isWizardFlow && h.table.viewActions[0].dropdownOptions.push({
            title: "Import Existing",
            cssId: "mesh",
            action: function(a) {
                c.show({
                    templateUrl: "app/configuration/policy/modal/importPolicy.html",
                    controller: "ImportPolicyModalCtrl",
                    targetEvent: a,
                    resolve: {
                        policyList: function() {
                            return h.allCflowdPolicies
                        },
                        policyType: function() {
                            return {
                                key: "cflowd",
                                display: "Cflowd Policy"
                            }
                        }
                    }
                }).then(function() {
                    h.table.refresh()
                })
            }
        }),
        h.isWizardFlow && (h.assemblyObj = f.getInstance({})),
        h.allCflowdPolicies = i.setTableDataAndColumns(h.table, "cflowd"),
        h.table.setPostRefreshCallback(function() {
            h.allCflowdPolicies = i.setTableDataAndColumns(h.table, "cflowd")
        }),
        a.$on("$destroy", function() {
            a.buttonFunctions.reset(),
            h.table = null
        })
    }
    angular.module("vManage").controller("trafficCflowdController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "PolicyWizardManager", "PolicyAssembly", "trafficPolicyService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        function k(a) {
            angular.isObject(a) && e.checkNestedProperty(a, "error", "details") ? (d.error("Error occurred while processing policy: " + a.error.message + ":" + a.error.details),
            g.error(a.error.message + ": " + a.error.details)) : (d.info("API error response needs to be updated to conform to company guidelines."),
            g.error("Error occurred while processing policy"))
        }
        var l = this;
        l.stateString = e.getStateString(b),
        a.isWizardFlow = b.previousState && _.includes(b.previousState.name, "app.config.policy.wizard.configureTrafficRules");
        var m = h.getInstance();
        l.serverCallInProgress = !1,
        l.readOnly = _.includes(b.current.name, "view"),
        l.showComponent = {
            formCollapse: !0
        },
        a.breadCrumb.states && !_.isNull(a.breadCrumb.states) && a.breadCrumb.states.reset(),
        a.isWizardFlow ? a.breadCrumb.states = [{
            name: "traffic-policy",
            title: "Add Cflowd Policy"
        }] : a.breadCrumb.states = [{
            name: "policy",
            title: "Policy",
            state: function(a) {
                b.go("app.config.policy.centralizedPolicy.vsmart", {
                    reload: !0
                })
            }
        }, {
            name: "advanced-policy",
            title: "Cflowd Policy",
            state: function(a) {
                b.go("app.config.policy.custom.traffic.cflowd", {
                    reload: !0
                })
            }
        }, {
            name: "cflowd-policy",
            title: "Add Cflowd Policy"
        }],
        a.buttonFunctions.reset(),
        a.buttonFunctions.push({
            title: "Save Cflowd Policy",
            layoutClass: "globalButtonIcon",
            stateString: a.stateString + "save",
            hideButton: function() {
                return l.readOnly
            },
            ButtonActionFn: function(a) {
                return g.clear(),
                l.trafficPolicyForm.$submitted = !0,
                l.trafficPolicyForm.$invalid ? void g.error("Please fill all required fields.") : (l.cflowdPolicy.definition.collectors = l.cflowdPolicy.table.data,
                void l.savePolicy(a))
            }
        }, {
            title: "Cancel",
            layoutClass: "flatButton",
            stateString: a.stateString + "cancel",
            ButtonActionFn: function(c) {
                m.showWizardSteps = !0,
                a.isWizardFlow ? b.go("app.config.policy.wizard.configureTrafficRules.trafficCflowd") : b.go("app.config.policy.custom.traffic.cflowd", {
                    reload: !0
                })
            }
        }),
        a.isWizardFlow || a.buttonFunctions.push({
            title: "PREVIEW",
            layoutClass: "flatButton",
            leftAlign: !0,
            width: "100px",
            stateString: a.stateString + "preview",
            hideButton: function() {
                return l.readOnly
            },
            ButtonActionFn: function(a) {
                function c() {
                    l.cflowdPolicy.definition.collectors = l.cflowdPolicy.table.data,
                    l.cflowdPolicy.table = null,
                    b.go("app.config.policy.preview", {
                        policy: l.cflowdPolicy
                    })
                }
                return g.clear(),
                l.trafficPolicyForm.$submitted = !0,
                l.trafficPolicyForm.$invalid ? void g.error("Please fill all required fields.") : void (l.cflowdPolicy.definitionId ? l.cflowdPolicy.previewById().then(function(a) {
                    l.cflowdPolicy.runningConfig = a.preview,
                    l.cflowdPolicy.definition.collectors = l.cflowdPolicy.table.data,
                    c()
                }, function(a) {
                    k(a)
                }) : c())
            }
        }),
        a.globalButtonState.disableTabs = !0,
        a.globalButtonState.customOptions = !1,
        l.cflowdPolicy = null,
        _.isNull(c.policy) ? l.cflowdPolicy = new f({}) : l.cflowdPolicy = new f(c.policy),
        l.cflowdPolicy.createCollectorTableInstance(l.readOnly),
        l.cflowdPolicy.setCollectorTableData(),
        !c.id || b.previousState && "app.config.policy.preview" === b.previousState.name || l.cflowdPolicy.get(c.id).then(function(a) {}, function(a) {
            k(a)
        }),
        l.savePolicy = function(c) {
            l.cflowdPolicy.activatedId ? i.show({
                templateUrl: "app/configuration/policy/modal/activateCentralizedPolicy.html",
                controller: "ActivateCentralizedPolicyModalCtrl",
                targetEvent: c,
                resolve: {
                    policy: function() {
                        return l.cflowdPolicy
                    }
                }
            }).then(function(a) {
                b.go("app.device.status", {
                    activity: j.getStatusAction("VSMART_POLICY_CONFIG").endpoint,
                    pid: a ? a.id : ""
                })
            }) : (l.serverCallInProgress = !0,
            l.cflowdPolicy.save().then(function(c) {
                l.serverCallInProgress = !1,
                m.showWizardSteps = !0,
                a.isWizardFlow ? (m.newPolicyDefinitions.cflowd.push({
                    id: c.definitionId,
                    type: "created"
                }),
                b.go("app.config.policy.wizard.configureTrafficRules.trafficCflowd")) : b.go("app.config.policy.custom.traffic.cflowd", {
                    reload: !0
                })
            }, function(a) {
                l.serverCallInProgress = !1,
                k(a)
            }))
        }
        ,
        l.showForm = function() {
            l.showComponent.formCollapse = !l.showComponent.formCollapse,
            l.collectorObj = l.cflowdPolicy.createCollectorObj(),
            l.collectorListForm.$submitted = !1
        }
        ,
        l.cancelForm = function() {
            l.showComponent.formCollapse = !l.showComponent.formCollapse,
            l.collectorListForm.$submitted = !1
        }
        ,
        l.saveList = function() {
            l.collectorListForm.$submitted = !0,
            l.collectorListForm.$invalid || (l.cflowdPolicy.definition.collectors.push(l.collectorObj),
            l.cflowdPolicy.table.data.push(l.collectorObj),
            l.showComponent.formCollapse = !l.showComponent.formCollapse)
        }
        ,
        a.$on("$destroy", function() {
            a.buttonFunctions.reset()
        })
    }
    angular.module("vManage").controller("CflowdPolicyController", a),
    a.$inject = ["$scope", "$state", "$stateParams", "$log", "appUtil", "CflowdPolicy", "notification", "PolicyWizardManager", "$mdDialog", "StatusService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z) {
        function A(a) {
            angular.isObject(a) && e.checkNestedProperty(a, "error", "details") ? (l.error("Error occurred while processing policy: " + a.error.message + ":" + a.error.details),
            n.error(a.error.message + ": " + a.error.details)) : (l.info("API error response needs to be updated to conform to company guidelines."),
            n.error("Error occurred while processing policy"))
        }
        var B = this
          , C = "Default Action";
        B.stateString = e.getStateString(c),
        a.isWizardFlow = c.previousState && _.includes(c.previousState.name, "app.config.policy.wizard.configureTrafficRules");
        var D = z.getInstance();
        B.serverCallInProgress = !1,
        B.readOnly = _.includes(c.current.name, "view");
        var E = c.current.name.contains("appAwareRouting") || c.current.name.contains("appRoute");
        a.buttonFunctions.reset(),
        a.buttonFunctions.push({
            title: "Save " + (E ? "Application Aware Routing" : "Data") + " Policy",
            layoutClass: "globalButtonIcon",
            stateString: a.stateString + "save",
            hideButton: function() {
                return B.readOnly
            },
            ButtonActionFn: function(a) {
                if (n.clear(),
                B.trafficPolicyForm.$submitted = !0,
                B.trafficPolicyForm.$invalid)
                    return void n.error("Please fill all required fields.");
                for (var b in B.trafficPolicy.sequences)
                    if (!B.trafficPolicy.sequences[b].isValid())
                        return void n.error("Invalid or missing fields in sequence rule.");
                B.save(a)
            }
        }, {
            title: "CANCEL",
            layoutClass: "flatButton",
            stateString: a.stateString + "cancel",
            ButtonActionFn: function(b) {
                D.showWizardSteps = !0,
                a.isWizardFlow ? c.go("app.config.policy.wizard.configureTrafficRules." + (E ? "appAwareRouting" : "trafficData")) : c.go("app.config.policy.custom.traffic." + (E ? "appAwareRouting" : "data"), {
                    reload: !0
                })
            }
        }),
        a.isWizardFlow ? a.breadCrumb.states = [{
            name: "traffic-policy",
            title: E ? "Add Application Aware Route Policy" : "Add Data Policy"
        }] : (a.buttonFunctions.push({
            title: "PREVIEW",
            layoutClass: "flatButton",
            leftAlign: !0,
            width: "100px",
            stateString: a.stateString + "preview",
            hideButton: function() {
                return B.readOnly
            },
            ButtonActionFn: function(a) {
                function b() {
                    c.go("app.config.policy.preview", {
                        policy: B.trafficPolicy
                    })
                }
                if (n.clear(),
                B.trafficPolicyForm.$submitted = !0,
                B.trafficPolicyForm.$invalid)
                    return void n.error("Please fill all required fields.");
                for (var d in B.trafficPolicy.sequences)
                    if (!B.trafficPolicy.sequences[d].isValid())
                        return void n.error("Invalid or missing fields in sequence rule.");
                B.trafficPolicy.definitionId ? B.trafficPolicy.previewById() && B.trafficPolicy.previewById().then(function(a) {
                    B.trafficPolicy.runningConfig = a.preview,
                    b()
                }, function(a) {
                    A(a)
                }) : b()
            }
        }),
        a.breadCrumb.states = [{
            name: "policy",
            title: "Policy",
            state: function(a) {
                c.go("app.config.policy.centralizedPolicy.vsmart", {
                    reload: !0
                })
            }
        }, {
            name: "advanced-policy",
            title: E ? "Application Aware Routing Policy" : "Data Policy",
            state: function(a) {
                c.go("app.config.policy.custom.traffic." + (E ? "appAwareRouting" : "data"), {
                    reload: !0
                })
            }
        }, {
            name: "traffic-policy",
            title: E ? "Add Application Aware Routing Policy" : "Add Data Policy"
        }]),
        a.globalButtonState.disableTabs = !0,
        a.globalButtonState.customOptions = !1,
        B.policyAssembly = void 0,
        B.trafficPolicy = null,
        B.selectedSeq = null,
        B.localPolicyRule = {
            hideNewRule: !0
        },
        B.seqActions = [{
            label: "Copy",
            callback: function(a) {
                B.trafficPolicy.copySequence(a)
            }
        }, {
            label: "Delete",
            callback: function(a) {
                var b = B.trafficPolicy.removeSequence(a);
                B.trafficPolicy.sequences.length > 0 ? (B.selectedSeq = b > 0 ? B.trafficPolicy.sequences[b - 1] : B.trafficPolicy.sequences[0],
                B.cancelCreateRule()) : (B.selectedSeq = {
                    name: C,
                    rules: [B.trafficPolicy.defaultAction]
                },
                B.cancelCreateRule(),
                B.localPolicyRule = {
                    hideNewRule: !0
                })
            }
        }, {
            label: "Rename",
            callback: function(a) {
                f(function() {
                    a.readOnly = !1
                })
            }
        }],
        E ? _.isNull(d.policy) ? B.trafficPolicy = new h({}) : (B.trafficPolicy = new h(d.policy),
        B.selectedSeq = {
            name: C,
            rules: [B.trafficPolicy.defaultAction]
        }) : _.isNull(d.policy) ? B.trafficPolicy = new g({}) : (B.trafficPolicy = new g(d.policy),
        B.selectedSeq = {
            name: C,
            rules: [B.trafficPolicy.defaultAction]
        }),
        d.id || (B.selectedSeq = {
            name: C,
            rules: [B.trafficPolicy.defaultAction]
        }),
        B.policyRefList = null,
        m.all([o.getInstance().listAsync(), p.getInstance().listAsync(), q.getInstance().listAsync(), r.getInstance().listAsync(), s.getInstance().listAsync(), t.getInstance().listAsync(), u.getInstance().listAsync(), v.getInstance().listAsync(), w.getInstance().listAsync()]).then(function(a) {
            !d.id || c.previousState && "app.config.policy.preview" === c.previousState.name || (B.policyRefList = _.flatten(a.map(function(a) {
                return [].concat.apply([], a)
            })),
            B.trafficPolicy.get(d.id, B.policyRefList).then(function(a) {
                a.sequences.length > 0 ? (B.selectedSeq = a.sequences[0],
                B.selectedSeq && B.selectedSeq.markRulesEditable(),
                B.localPolicyRule.hideNewRule = !1) : B.selectedSeq = {
                    name: C,
                    rules: [B.trafficPolicy.defaultAction]
                }
            }, function(a) {
                A(a)
            }))
        }, function(a) {
            !d.id || c.previousState && "app.config.policy.preview" === c.previousState.name ? A(a) : B.trafficPolicy.get(d.id).then(function(a) {
                a.sequences.length > 0 ? (B.selectedSeq = a.sequences[0],
                B.selectedSeq && B.selectedSeq.markRulesEditable(),
                B.localPolicyRule.hideNewRule = !1) : B.selectedSeq = {
                    name: C,
                    rules: [B.trafficPolicy.defaultAction]
                }
            }, function(a) {
                A(a)
            })
        }),
        B.addSequenceType = function(a) {
            B.trafficPolicy instanceof h ? (B.selectedSeq = B.trafficPolicy.appendSequence({
                name: "App Route",
                description: "",
                type: "appRoute"
            }),
            B.cancelCreateRule()) : k.show({
                templateUrl: "app/configuration/policy/centralizedPolicy/traffic/modal/views/sequenceOptionsModal.html",
                controller: "PolicySequenceOptionsController",
                controllerAs: "policyCtrl",
                targetEvent: a,
                resolve: {
                    type: function() {
                        return B.trafficPolicy.type
                    }
                }
            }).then(function(a) {
                B.selectedSeq = B.trafficPolicy.appendSequence({
                    name: a.title,
                    description: a.description,
                    type: a.type
                }),
                B.cancelCreateRule()
            })
        }
        ,
        B.createRule = function() {
            return !(B.localPolicyRule instanceof i) && (B.localPolicyRule = B.selectedSeq.getDefaultRule(),
            $("#policy-rule-create").append(j('<policy-rule rule="policySeqCtrl.localPolicyRule" save-fn="policySeqCtrl.addRuleToPolicy()" cancel-fn="policySeqCtrl.cancelCreateRule()"></policy-rule>')(a)),
            void B.selectedSeq.markRulesUneditable())
        }
        ,
        B.addRuleToPolicy = function() {
            B.localPolicyRule.hideNewRule = !1,
            B.localPolicyRule.readOnly = !0;
            var a = B.selectedSeq.appendRule(B.localPolicyRule);
            a.orderNo = B.selectedSeq.rules.length - 1,
            B.cancelCreateRule()
        }
        ,
        B.selectSequence = function(a, b) {
            if (a !== B.selectedSeq) {
                if (B.selectedSeq.name !== C && !B.selectedSeq.isValid())
                    return n.warning("Please save or close open rule before proceeding."),
                    !1;
                if (B.selectedSeq.name === C && !B.selectedSeq.rules[0].valid)
                    return n.warning("Please save or close open rule before proceeding."),
                    !1;
                if (B.selectedSeq = a,
                B.cancelCreateRule(),
                b)
                    return B.selectedSeq.rules = [B.trafficPolicy.defaultAction],
                    void (B.localPolicyRule = {
                        hideNewRule: !0
                    });
                B.selectedSeq.markRulesEditable()
            }
        }
        ,
        B.cancelCreateRule = function() {
            B.localPolicyRule = null,
            $("#policy-rule-create").empty()
        }
        ,
        B.save = function(b) {
            B.trafficPolicy.activatedId ? k.show({
                templateUrl: "app/configuration/policy/modal/activateCentralizedPolicy.html",
                controller: "ActivateCentralizedPolicyModalCtrl",
                targetEvent: b,
                resolve: {
                    policy: function() {
                        return B.trafficPolicy
                    }
                }
            }).then(function(a) {
                c.go("app.device.status", {
                    activity: x.getStatusAction("VSMART_POLICY_CONFIG").endpoint,
                    pid: a ? a.id : ""
                })
            }) : (B.serverCallInProgress = !0,
            B.trafficPolicy.save().then(function(b) {
                B.serverCallInProgress = !1,
                D.showWizardSteps = !0,
                a.isWizardFlow ? (E ? D.newPolicyDefinitions.appRoute.push({
                    id: b.definitionId,
                    type: "created"
                }) : D.newPolicyDefinitions.data.push({
                    id: b.definitionId,
                    type: "created"
                }),
                c.go("app.config.policy.wizard.configureTrafficRules." + (E ? "appAwareRouting" : "trafficData"))) : c.go("app.config.policy.custom.traffic." + (c.current.name.contains("appRoute") ? "appAwareRouting" : "data"), {
                    reload: !0
                })
            }, function(a) {
                B.serverCallInProgress = !1,
                A(a)
            }))
        }
        ,
        a.evalDragDrop = function() {
            B.selectedSeq.renumberRules(),
            angular.forEach($("policy-rule"), function(a) {
                $(a).parent().css("height", "auto")
            })
        }
        ,
        a.onDragStop = function() {
            angular.forEach($("policy-rule"), function(a) {
                $(a).parent().css("height", "auto")
            })
        }
        ,
        a.$on("evaluate-rule", function(a, b) {
            return angular.isDefined(b.event) ? void (b.event.editable ? B.selectedSeq.markRulesEditable() : B.selectedSeq.markRulesUneditable()) : void B.selectedSeq.refreshRule(b.rule)
        }),
        a.$on("$destroy", function() {
            a.buttonFunctions.reset()
        })
    }
    angular.module("vManage").controller("CreateTrafficPolicyController", a),
    a.$inject = ["$scope", "$location", "$state", "$stateParams", "appUtil", "$timeout", "DataPolicy", "AppRoutePolicy", "PolicyRule", "$compile", "$mdDialog", "$log", "$q", "notification", "AppAppFamilyListManager", "ColorListManager", "DataPrefixListManager", "PolicerListManager", "TLOCListManager", "VPNListManager", "SLAClassListManager", "SiteListManager", "PrefixListManager", "StatusService", "PolicyAssembly", "PolicyWizardManager"]
}(),
angular.module("vManage").directive("typeDataPolicy", typeDataPolicy),
function() {
    function a(a, b, c) {
        var d = this;
        d.modalErr = {
            occurred: !1,
            error: {
                message: "",
                details: ""
            }
        },
        d.policy = {
            name: "",
            description: "",
            type: ""
        },
        d.dataPolicyTypes = [{
            display: "App Route Policy",
            value: "appRoute"
        }, {
            display: "Data Policy",
            value: "data"
        }],
        d.ok = function() {
            d.modalErr.occurred = !1;
            var e = _.find(c.data, {
                name: d.policy.name
            });
            return e ? (d.modalErr.occurred = !0,
            d.modalErr.error.message = "Duplicate Policy name.",
            d.modalErr.error.details = "Please provide a unique Policy name.",
            !1) : (b.go("app.config.policy.centralizedPolicy.traffic_policy.create", {
                type: d.policy.type,
                policy: {
                    name: d.policy.name,
                    description: d.policy.description,
                    type: d.policy.type
                }
            }),
            void a.hide())
        }
        ,
        d.cancel = function() {
            a.cancel()
        }
    }
    angular.module("vManage").controller("CreatePolicyTypeController", a),
    a.$inject = ["$mdDialog", "$state", "table"]
}(),
function() {
    function a(a, b, c) {
        var d = this;
        "approute" == c.toLowerCase() ? d.sequences = [{
            type: "appRoute",
            title: "App Route",
            description: "App Route short description goes here",
            style: {
                iconPath: "images/policy/app_route.svg",
                color: "#bc80bd"
            }
        }] : d.sequences = [{
            type: "applicationFirewall",
            title: "Application Firewall",
            description: "Direct application traffic to a firewall.",
            style: {
                iconPath: "images/policy/application_firewall.svg",
                color: "#bc80bd"
            }
        }, {
            type: "qos",
            title: "QoS",
            description: "Class/QoS maps for packet forwarding.",
            style: {
                iconPath: "images/policy/qos.svg",
                color: "#fdb462"
            }
        }, {
            type: "serviceChaining",
            title: "Service Chaining",
            description: "Rerouting data traffic through firewalls, load balancers and IDP's.",
            style: {
                iconPath: "images/policy/service_chaining.svg",
                color: "#d9cc3c"
            }
        }, {
            type: "trafficEngineering",
            title: "Traffic Engineering",
            description: "Direct control traffic along a desired path.",
            style: {
                iconPath: "images/policy/traffic_engineering.svg",
                color: "#47b2dd"
            }
        }, {
            type: "data",
            title: "Custom",
            description: "Create a custom policy.",
            style: {
                iconPath: "images/policy/custom_policy.svg",
                color: "#2576ad"
            }
        }],
        d.ok = function(b) {
            a.hide(b)
        }
        ,
        d.cancel = function() {
            a.cancel()
        }
    }
    angular.module("vManage").controller("PolicySequenceOptionsController", a),
    a.$inject = ["$mdDialog", "Policy", "type"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        a.stateString = e.getStateString(b);
        var h = this;
        h.collectorObj = angular.copy(g.entity),
        h.cancel = function() {
            d.cancel("cancel")
        }
        ,
        h.update = function() {
            for (var a in h.collectorObj)
                h.collectorObj.hasOwnProperty(a) && !angular.equals(a, "$$hashKey") && (g.entity[a] = h.collectorObj[a]);
            d.hide()
        }
        ,
        a.$on("$destroy", function() {})
    }
    angular.module("vManage").controller("UpdateCflowdPolicyController", a),
    a.$inject = ["$scope", "$state", "$log", "$mdDialog", "appUtil", "notification", "selectedRow"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        function k(b, c) {
            if (n)
                return [{
                    name: "policy",
                    title: "Centralized Policy",
                    state: function(b) {
                        a.go("app.config.policy.centralizedPolicy.vsmart", {
                            reload: !0
                        })
                    }
                }, {
                    name: "add" === c ? "addPolicy" : "edit" === c ? "editPolicy" : "viewPolicy",
                    title: "add" === c ? "Add Policy" : "edit" === c ? "Edit Policy" : "View Policy"
                }];
            var d = [{
                name: "policy",
                title: "Centralized Policy",
                state: function(b) {
                    a.go("app.config.policy.centralizedPolicy.vsmart", {
                        reload: !0
                    })
                }
            }];
            return d.push(b),
            d
        }
        function l(b) {
            var c = [{
                title: "Create New",
                cssId: "hub_spoke",
                action: function(c) {
                    if ("appRoute" === b)
                        if (n) {
                            var e = d.getInstance();
                            e.showWizardSteps = !1,
                            a.go("app.config.policy.wizard.configureTrafficRules.appAwareRouting.add")
                        } else
                            a.go("app.config.policy.centralizedPolicy.traffic_policy.create.appRoute");
                    else if ("data" === b)
                        if (n) {
                            var e = d.getInstance();
                            e.showWizardSteps = !1,
                            a.go("app.config.policy.wizard.configureTrafficRules.trafficData.add")
                        } else
                            a.go("app.config.policy.centralizedPolicy.traffic_policy.create.data");
                    else if (n) {
                        var e = d.getInstance();
                        e.showWizardSteps = !1,
                        a.go("app.config.policy.wizard.configureTrafficRules.trafficCflowd.add")
                    } else
                        a.go("app.config.policy.centralizedPolicy.traffic_policy.create.cflowd")
                }
            }];
            return c
        }
        function m() {
            return n ? [{
                type: "View",
                open: "callback",
                okButtonActionFn: function(b) {
                    var c = d.getInstance();
                    c.showWizardSteps = !1,
                    "appRoute" === b.entity.type ? a.go("app.config.policy.wizard.configureTrafficRules.appAwareRouting.view", {
                        id: b.entity.definitionId
                    }) : "data" === b.entity.type ? a.go("app.config.policy.wizard.configureTrafficRules.trafficData.view", {
                        id: b.entity.definitionId
                    }) : a.go("app.config.policy.wizard.configureTrafficRules.trafficCflowd.view", {
                        id: b.entity.definitionId
                    })
                }
            }, {
                type: "Copy",
                open: "modal",
                templateUrl: "app/configuration/policy/modal/copyPolicyTemplate.html",
                controller: "CopyPolicyModalCtrl",
                hideCallback: function(a) {
                    return "created" === a.entity.mode
                },
                modalReturnCallback: function(a, b, c) {
                    n && (b.mode = "created",
                    d.getInstance().newPolicyDefinitions[b.type].push({
                        id: a.definitionId,
                        type: "created"
                    }),
                    c.refresh())
                }
            }, {
                type: "Edit",
                open: "callback",
                hideCallback: function(a) {
                    return "imported" === a.entity.mode
                },
                okButtonActionFn: function(b) {
                    var c = d.getInstance();
                    c.showWizardSteps = !1,
                    "appRoute" === b.entity.type ? a.go("app.config.policy.wizard.configureTrafficRules.appAwareRouting.edit", {
                        id: b.entity.definitionId
                    }) : "data" === b.entity.type ? a.go("app.config.policy.wizard.configureTrafficRules.trafficData.edit", {
                        id: b.entity.definitionId
                    }) : a.go("app.config.policy.wizard.configureTrafficRules.trafficCflowd.edit", {
                        id: b.entity.definitionId
                    })
                }
            }, {
                type: "Delete",
                open: "confirm",
                title: "Are you sure you want to delete the policy?",
                content: "This policy will be deleted immediately. You cannot undo the action.",
                hideCallback: function(a) {
                    return "imported" === a.entity.mode
                },
                okButtonActionFn: function(a, c) {
                    var e = new f(a.entity)
                      , j = h.getInstance({});
                    e.delete().then(function(b) {
                        for (var e = d.getInstance(), f = 0; f < e.newPolicyDefinitions[a.entity.type].length; f++)
                            e.newPolicyDefinitions[a.entity.type][f].id === a.entity.definitionId && (e.newPolicyDefinitions[a.entity.type].splice(f, 1),
                            c.refresh());
                        j.removePolicy(_.find(j.policyDefinition.assembly, function(b) {
                            return b.definitionId === a.entity.definitionId
                        }))
                    }, function(a) {
                        angular.isObject(a) && g.checkNestedProperty(a, "error", "details") ? (b.error("Error occurred while saving table state: " + a.error.message + ":" + a.error.details),
                        i.error(a.error.message + ": " + a.error.details)) : (b.info("API error response needs to be updated to conform to company guidelines."),
                        i.error("Error occurred while removing Policy."))
                    })
                }
            }, {
                type: "Detach",
                open: "callback",
                hideCallback: function(a, b, c) {
                    return "created" === a.entity.mode
                },
                okButtonActionFn: function(a, b, c) {
                    for (var e = d.getInstance(), f = h.getInstance({}), g = 0; g < e.newPolicyDefinitions[a.entity.type].length; g++)
                        e.newPolicyDefinitions[a.entity.type][g].id === a.entity.definitionId && (e.newPolicyDefinitions[a.entity.type].splice(g, 1),
                        c.refresh());
                    f.removePolicy(_.find(f.policyDefinition.assembly, function(b) {
                        return b.definitionId === a.entity.definitionId
                    }))
                }
            }] : [{
                type: "View",
                open: "callback",
                okButtonActionFn: function(b) {
                    "appRoute" === b.entity.type ? a.go("app.config.policy.centralizedPolicy.traffic_policy.view.appRoute", {
                        id: b.entity.definitionId
                    }) : "data" === b.entity.type ? a.go("app.config.policy.centralizedPolicy.traffic_policy.view.data", {
                        id: b.entity.definitionId
                    }) : a.go("app.config.policy.centralizedPolicy.traffic_policy.view.cflowd", {
                        id: b.entity.definitionId
                    })
                }
            }, {
                type: "Edit",
                open: "callback",
                okButtonActionFn: function(b) {
                    "appRoute" === b.entity.type ? a.go("app.config.policy.centralizedPolicy.traffic_policy.edit.appRoute", {
                        id: b.entity.definitionId
                    }) : "data" === b.entity.type ? a.go("app.config.policy.centralizedPolicy.traffic_policy.edit.data", {
                        id: b.entity.definitionId
                    }) : a.go("app.config.policy.centralizedPolicy.traffic_policy.edit.cflowd", {
                        id: b.entity.definitionId
                    })
                }
            }, {
                type: "Copy",
                open: "modal",
                templateUrl: "app/configuration/policy/modal/copyPolicyTemplate.html",
                controller: "CopyPolicyModalCtrl"
            }, {
                type: "Delete",
                open: "confirm",
                title: "Are you sure you want to delete the policy?",
                content: "This policy will be deleted immediately. You cannot undo the action.",
                hideCallback: function(a) {
                    return a.entity.referenceCount > 0
                },
                okButtonActionFn: function(a, c) {
                    var d = new f(a.entity);
                    h.getInstance({});
                    d.delete().then(function(a) {
                        c.refresh()
                    }, function(a) {
                        angular.isObject(a) && g.checkNestedProperty(a, "error", "details") ? (b.error("Error occurred while saving table state: " + a.error.message + ":" + a.error.details),
                        i.error(a.error.message + ": " + a.error.details)) : (b.info("API error response needs to be updated to conform to company guidelines."),
                        i.error("Error occurred while removing Policy."))
                    })
                }
            }]
        }
        var n = !1;
        return {
            setWizardFlow: function(a) {
                n = a
            },
            getBreadCrumbs: function(a, b) {
                return k(a, b)
            },
            getTableInstance: function(a) {
                var b = new e({
                    menuColumnFilter: !0,
                    columnResizing: !0,
                    singleSelect: !0,
                    enableSorting: !0,
                    tableHeightOffset: n ? 328 : 228,
                    autoLoad: !0,
                    toggleFirstRowOnLoad: !0,
                    dataUid: "definitionId"
                });
                return b.setViewActions([{
                    dropdown: !0,
                    title: "Add Policy",
                    icon: "add_circle",
                    rbac: "Policy Configuration",
                    cssId: "add_traffic" + a,
                    dropdownOptions: l(a)
                }]),
                b.setHoverAction(m()),
                "appRoute" === a ? b.setActionHelperText("(Create an application-aware routing policy)") : "data" === a ? b.setActionHelperText("(Create a data policy)") : b.setActionHelperText("(Create a cflowd policy)"),
                b
            },
            setTableDataAndColumns: function(a, e) {
                var f = c.defer()
                  , i = d.getInstance();
                return j.getTrafficPolicyDefinitions(e.toLowerCase()).then(function(b) {
                    a.taggedSearchObject.setSearchCache(b.data),
                    n ? (b.header.columns.splice(1, 1, {
                        dataType: "string",
                        hideable: "true",
                        property: "type",
                        title: "Type",
                        cellTemplate: '<div class="ui-grid-cell-contents flexDisplay" title="TOOLTIP"> <i style="margin: 3px 10px 0px 0px" class="material-icons md-16 icon-primary-color" ng-if="row.entity.mode === \'created\'"> <md-tooltip>Created policy</md-tooltip>queue</i><i style="margin: 3px 10px 0px 0px" class="material-icons md-18 icon-primary-color" ng-if="row.entity.mode === \'imported\'"><md-tooltip>Imported policy</md-tooltip>attachment</i><span ng-if="row.entity.type ===\'appRoute\'">App Route</span><span ng-if="row.entity.type ===\'data\'">Data</span><span ng-if="row.entity.type ===\'cflowd\'">Cflowd</span></div>'
                    }),
                    a.createColumns(b.header.columns),
                    a.setTableData(g.filterData(b.data, i.newPolicyDefinitions[e], "definitionId")),
                    angular.forEach(a.data, function(a) {
                        var b = h.getInstance({});
                        b.findPolicyIndex(a) < 0 && b.appendPolicy(a)
                    })) : (a.createColumns(b.header.columns),
                    a.setTableData(b.data),
                    a.serverCallInProgress = !1),
                    a.taggedSearchObject.searchData(),
                    f.resolve(b.data)
                }, function(c) {
                    angular.isObject(c) && g.checkNestedProperty(c, "error", "details") ? b.error("Error occurred while saving table state: " + c.error.message + ":" + c.error.details) : b.info("API error response needs to be updated to conform to company guidelines."),
                    a.serverCallInProgress = !1,
                    f.reject()
                }),
                f.promise
            }
        }
    }
    angular.module("vManage").service("trafficPolicyService", a),
    a.$inject = ["$state", "$log", "$q", "PolicyWizardManager", "Table", "Policy", "appUtil", "PolicyAssembly", "notification", "policyService"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h = this
          , i = g;
        h.stateString = d.getStateString(b),
        h.policyObj = e.getInstance(),
        h.isWizardFlow = _.includes(b.current.name, "app.config.policy.wizard.configureTrafficRules"),
        i.setWizardFlow(h.isWizardFlow);
        var j = {
            name: "data-policy",
            title: "Data Policy"
        };
        a.breadCrumb.states = i.getBreadCrumbs(j, b.params.action),
        h.table = i.getTableInstance("data"),
        h.isWizardFlow && h.table.viewActions[0].dropdownOptions.push({
            title: "Import Existing",
            cssId: "data",
            action: function(a) {
                c.show({
                    templateUrl: "app/configuration/policy/modal/importPolicy.html",
                    controller: "ImportPolicyModalCtrl",
                    targetEvent: a,
                    resolve: {
                        policyList: function() {
                            return h.allDataPolicies
                        },
                        policyType: function() {
                            return {
                                key: "data",
                                display: "Data Policy"
                            }
                        }
                    }
                }).then(function() {
                    h.table.refresh()
                })
            }
        }),
        h.isWizardFlow && (h.assemblyObj = f.getInstance({})),
        h.allDataPolicies = i.setTableDataAndColumns(h.table, "data"),
        h.table.setPostRefreshCallback(function() {
            h.allDataPolicies = i.setTableDataAndColumns(h.table, "data")
        }),
        a.$on("$destroy", function() {
            a.buttonFunctions.reset(),
            h.table = null
        })
    }
    angular.module("vManage").controller("trafficDataController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "PolicyWizardManager", "PolicyAssembly", "trafficPolicyService"]
}(),
angular.module("vManage").controller("CrudVSmartPolicyCtrl", CrudVSmartPolicyCtrl),
CrudVSmartPolicyCtrl.$inject = ["$scope", "appUtil", "vSmartPolicyService", "$mdDialog", "$state", "StatusService", "notification"],
angular.module("vManage").controller("VSmartPolicyController", VSmartPolicyController),
VSmartPolicyController.$inject = ["$scope", "$state", "appUtil", "vSmartPolicyService", "rbac"],
angular.module("vManage").factory("vSmartPolicyService", vSmartPolicyService),
vSmartPolicyService.$inject = ["restService", "apiConstants", "notification", "$timeout", "Table", "$state", "StatusService", "templatesConstants", "$q"],
function() {
    function a(a, b, c) {
        var d = this;
        d.openAction = {
            isOpen: !1,
            open: function() {
                d.openAction.isOpen = !d.openAction.isOpen
            }
        };
        var e = "";
        d.$onInit = function() {
            d.elem = a,
            e = d.setName(),
            b.bind("click", function(a) {
                if (a.stopPropagation(),
                0 == $(a.target).closest(d.elem).length)
                    return d.setName(a),
                    a && a.preventDefault(),
                    !1
            })
        }
        ,
        d.setReadOnly = function(a) {
            c(function() {
                d.modelObj.readOnly = a
            })
        }
        ,
        d.setName = function(a) {
            return a && a.stopPropagation(),
            _.isEmpty(d.modelObj.name) ? (d.modelObj.name = e,
            d.setReadOnly(!0),
            !1) : (e = d.modelObj.name,
            void d.setReadOnly(!0))
        }
        ,
        d.rename = function() {
            d.setReadOnly(!1),
            c(function() {
                $(d.elem).find("input").focus()
            }, 500),
            $(d.elem).find("input").keypress(function(a) {
                13 == a.which && d.setName(a)
            })
        }
    }
    angular.module("vManage").controller("DropDownLabelController", a),
    a.$inject = ["$element", "$document", "$timeout"],
    angular.module("vManage").component("vDropDownLabel", {
        templateUrl: "app/configuration/policy/components/templates/dropdownLabel.html",
        bindings: {
            modelObj: "<",
            actions: "<",
            disabled: "=?",
            order: "<"
        },
        controller: a,
        controllerAs: "labelCtrl"
    })
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        function h(c, d, e, f, g) {
            var h = j[c];
            e.find(".policy-rule-action").not(".readonly").append(a(b.get("policyAction" + h))(f)),
            e.find(".policy-rule-action.readonly").append(a(b.get("policyAction" + h + "Readonly"))(f))
        }
        function i(a, b, c, d, e) {
            angular.forEach(a, function(a, f) {
                h(a, b, c, d, angular.isDefined(e) ? e : f)
            })
        }
        var j = {
            accept: "AcceptAction",
            drop: "Drop",
            none: "None",
            reject: "Reject",
            slaClass: "SLAClass"
        };
        return b.put("policyActionSLAClass", '<div id="select-rule_sla_class" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>SLA Class</label></div><div class="entry-input long-name"><select-create-chips-drop-down place-holder="\'Select one or more sla class lists\'" model-Obj="ruleAction.action.slaClass" list-items="slaClassList.listItems" list-instance="slaClassList" copy-list="true"></select-create-chips-drop-down></div></div></div></div>'),
        b.put("policyActionAcceptAction", '<div id="select-rule_accept" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Accept</label></div><div class="entry-input"><span>Enabled</span></div></div></div>'),
        b.put("policyActionSLAClassReadonly", '<div id="select-rule_sla_class" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>SLA Class</label></div><div class="entry-input"><span><label>{{ruleAction.action.slaClass.name}}</label></span></div></div></div>'),
        b.put("policyActionAcceptActionReadonly", '<div id="select-rule_accept" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Accept</label></div><div class="entry-input"><label>Enabled</label></div></div></div>'),
        {
            priority: 10,
            restrict: "EA",
            templateUrl: "app/configuration/policy/components/templates/policyRuleAction.html",
            scope: {
                ruleAction: "=",
                saveFn: "&?",
                cancelFn: "&?"
            },
            compile: function() {
                return {
                    pre: function(a, b, c) {
                        a.ruleAction && (a.ruleAction.readOnly = !0,
                        a.ruleAction.valid = !0,
                        i(a.ruleAction.action.actionOrder, "action", b, a))
                    },
                    post: function(a, b, c) {
                        function h(a) {
                            var b = [];
                            return angular.forEach(a, function(c, d) {
                                1 == a.length ? b.push(e.RULES_TITLE[c]) : d === a.length - 1 ? b.push("and " + e.RULES_TITLE[c]) : b.push(e.RULES_TITLE[c] + " ")
                            }),
                            String(b)
                        }
                        var j = {
                            action: {}
                        };
                        a.slaClassList = d.getInstance(),
                        a.openParameters = {
                            open: function(a) {
                                $(a.target).closest(".dropdown-toggle").toggleClass("open")
                            },
                            isOpen: !1
                        },
                        a.addSLAClassList = function() {
                            b.find(".policy-rule-action").not(".readonly").has("#select-rule_sla_class").length || (a.ruleAction.action.slaClass = null,
                            a.ruleAction.action.none = !1,
                            a.ruleAction.action.actionOrder.push("slaClass"),
                            i(["slaClass"], "action", b, a, a.ruleAction.action.actionOrder.length),
                            a.removeElement("none", "select-rule_none"))
                        }
                        ,
                        a.addAccept = function() {
                            b.find(".policy-rule-action").not(".readonly").has("#select-rule_accept").length || (a.ruleAction.action.accept = !0,
                            a.ruleAction.action.actionOrder.push("accept"),
                            angular.isDefined(a.ruleAction.type) && (a.ruleAction.type = "accept"),
                            i(["accept"], "action", b, a, a.ruleAction.action.actionOrder.length),
                            a.ruleAction.action.hasOwnProperty("drop") && (a.ruleAction.action.drop = !1,
                            a.removeElement("drop", "select-rule_drop")),
                            a.ruleAction.action.hasOwnProperty("reject") && (a.ruleAction.action.reject = !1,
                            a.removeElement("reject", "select-rule_reject")))
                        }
                        ,
                        a.addDrop = function() {
                            b.find(".policy-rule-action").not(".readonly").has("#select-rule_drop").length || (a.ruleAction.action.accept = !1,
                            a.ruleAction.action.drop = !0,
                            a.ruleAction.action.actionOrder.push("drop"),
                            angular.isDefined(a.ruleAction.type) && (a.ruleAction.type = "drop"),
                            i(["drop"], "action", b, a, a.ruleAction.action.actionOrder.length),
                            a.removeElement("accept", "select-rule_accept"))
                        }
                        ,
                        a.addReject = function() {
                            b.find(".policy-rule-action").not(".readonly").has("#select-rule_reject").length || (a.ruleAction.action.accept = !1,
                            a.ruleAction.action.reject = !0,
                            a.ruleAction.action.actionOrder.push("reject"),
                            angular.isDefined(a.ruleAction.type) && (a.ruleAction.type = "reject"),
                            i(["reject"], "action", b, a, a.ruleAction.action.actionOrder.length),
                            a.removeElement("accept", "select-rule_accept"))
                        }
                        ,
                        a.addNone = function() {
                            b.find(".policy-rule-action").not(".readonly").has("#select-rule_none").length || (a.ruleAction.action.slaClass = null,
                            a.ruleAction.action.none = !0,
                            a.ruleAction.action.actionOrder.push("none"),
                            i(["none"], "action", b, a, a.ruleAction.action.actionOrder.length),
                            a.removeElement("slaClass", "select-rule_sla_class"))
                        }
                        ,
                        a.allowEdit = function() {
                            a.ruleAction.readOnly = !1,
                            a.ruleAction.valid = !1,
                            j = angular.copy(a.ruleAction)
                        }
                        ,
                        a.removeElement = function(c, d) {
                            var e = a.ruleAction.action.actionOrder.indexOf(c);
                            e > -1 && a.ruleAction.action.actionOrder.splice(e, 1),
                            b.find(".policy-rule-action").not(".readonly").children("#" + d).length && b.find(".policy-rule-action").not(".readonly").children("#" + d).remove(),
                            b.find(".policy-rule-action.readonly").children("#" + d).length && b.find(".policy-rule-action.readonly").children("#" + d).remove()
                        }
                        ,
                        a.saveRule = function() {
                            if (a.saveFn)
                                a.saveFn();
                            else {
                                f.clear();
                                var b = [];
                                if (a.ruleAction.valid = !0,
                                a.ruleAction.action.actionOrder.includes("slaClass") && ((g.isUndefinedOrEmpty(a.ruleAction.action.slaClass) || g.isUndefinedOrEmpty(a.ruleAction.action.slaClass.listId)) && b.push("slaClass"),
                                b.length > 0 && (f.error("Please fill in the required fields: " + h(b) + "."),
                                a.ruleAction.valid = !1),
                                !a.ruleAction.valid))
                                    return !1;
                                a.ruleAction.readOnly = !0
                            }
                        }
                        ,
                        a.cancelEdit = function() {
                            a.cancelFn ? a.cancelFn() : (a.ruleAction.readOnly = !0,
                            a.ruleAction.valid = !0,
                            a.removeElement("none", "select-rule_none"),
                            a.removeElement("reject", "select-rule_reject"),
                            a.removeElement("drop", "select-rule_drop"),
                            a.removeElement("accept", "select-rule_accept"),
                            a.removeElement("slaClass", "select-rule_sla_class"),
                            a.ruleAction.action = angular.copy(j.action),
                            angular.isDefined(j.type) && angular.isDefined(a.ruleAction.type) && angular.equals(a.ruleAction.name, "Default Action") && (a.ruleAction.type = angular.copy(j.type)),
                            i(a.ruleAction.action.actionOrder, "action", b, a, a.ruleAction.action.actionOrder.length))
                        }
                    }
                }
            }
        }
    }
    angular.module("vManage").directive("policyRuleAction", a),
    a.$inject = ["$compile", "$templateCache", "$timeout", "SLAClassListManager", "policyConstants", "notification", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w) {
        function x(a, b) {
            d(function() {
                var c = Math.max(a.find(".policy-rule-match").not(".readonly").height(), a.find(".policy-rule-action").not(".readonly").height());
                a.find(".policy-rule-main").height(c + 25),
                b.rule.size = c + 115,
                b.$emit("vsRepeatTrigger")
            })
        }
        function y(a, b, c) {
            d(function() {
                if (!c.rule)
                    return !1;
                if (a.find(".policy-rule-row.readonly").height() + 10 > G && (c.collapseDiv.show = !0),
                b)
                    a.find(".policy-rule-row.readonly").height(G),
                    c.rule.size = G + 5;
                else {
                    a.find(".policy-rule-row.readonly").height("auto");
                    var d = Math.max(a.find(".policy-rule-match.readonly").height(), a.find(".policy-rule-action.readonly").height());
                    a.find(".policy-rule-row.readonly").height(d + 28),
                    c.rule.size = d + 35
                }
                c.$emit("vsRepeatTrigger")
            })
        }
        function z(a, b, c) {
            if (angular.isDefined(c) && !e.isUndefinedOrEmpty(b.policyRuleForm)) {
                var d = void 0;
                angular.forEach($(c.lastChild).find("input"), function(a) {
                    d = $(a).controller("ngModel"),
                    angular.isUndefined(b.policyRuleForm[d.$name]) && b.policyRuleForm.$addControl($(a).controller("ngModel"))
                })
            }
        }
        function A(a, b, c) {
            var d, e = Object.keys(b.policyRuleForm).filter(function(a) {
                return 0 !== a.indexOf("$")
            });
            angular.isDefined(c) && angular.forEach($(c).find("input"), function(a) {
                d = a.name,
                b.policyRuleForm.$removeControl($(a).controller("ngModel")),
                angular.isDefined($(a).controller("ngModel")) && e.indexOf(d) > -1 && delete b.policyRuleForm[d]
            })
        }
        function B(a, d, e, f) {
            var g = o.POLICY_RULES_TEMPLATE_LABEL[a];
            angular.equals(d.toLowerCase(), "match") ? (e.find(".policy-rule-match").not(".readonly").append(b(c.get("policyMatch" + g))(f)),
            z(e, f, e.find(".policy-rule-match").not(".readonly")[0])) : (e.find(".policy-rule-action").not(".readonly").append(b(c.get("policyAction" + g))(f)),
            z(e, f, e.find(".policy-rule-action").not(".readonly")[0])),
            $(e).find(".policy-tag." + a).hasClass("active") || $(e).find(".policy-tag." + a).addClass("active")
        }
        function C(a, d, e, f, g) {
            var h = o.POLICY_RULES_TEMPLATE_LABEL[a];
            F = void 0,
            angular.equals(d.toLowerCase(), "match") ? e.find(".policy-rule-match.readonly").children("[collapsible]").before(b(c.get("policyMatch" + h + "Readonly"))(f)) : e.find(".policy-rule-action.readonly").children("[collapsible]").before(b(c.get("policyAction" + h + "Readonly"))(f))
        }
        function D(a, b, c, d, e) {
            angular.forEach(a, function(a, e) {
                B(a, b, c, d)
            })
        }
        function E(a, b, c, d, e) {
            angular.forEach(a, function(a, f) {
                C(a, b, c, d, angular.isDefined(e) ? e : f)
            })
        }
        var F, G = 105;
        return c.put("policyMatchApp", '<div id="select-rule_application" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Application/Application Family List</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'appList\', \'appList\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><select-create-chips-drop-down place-holder="\'Select one or more application lists\'" model-Obj="rule.match.appList" list-items="applicationList.listItems" list-instance = "applicationList" copy-list="true" heading="App List" chip-removable="true" required></select-create-chips-drop-down></div></div></div>'),
        c.put("policyMatchDnsAppList", '<div id="select-rule_dns_app_list" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>DNS Application/Application Family List</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'dnsAppList\', \'dnsAppList\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><select-create-chips-drop-down place-holder="\'Select one or more application lists\'" model-Obj="rule.match.dnsAppList" list-items="dnsApplicationList.listItems" list-instance = "dnsApplicationList" copy-list="true" heading="DNS App List" chip-removable="true" required></select-create-chips-drop-down></div></div></div>'),
        c.put("policyMatchDNS", '<div id="select-rule_dns" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>DNS</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'dns\', \'dns\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><single-select-chips-drop-down place-holder="\'Select a DNS\'" model-Obj="rule.match.dns" list-items="dnsList" chip-removable="true" copy-list="true"></single-select-chips-drop-down></div></div></div>'),
        c.put("policyMatchDSCP", '<div id="select-rule_dscp" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>DSCP</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'dscp\', \'dscp\')"><span class="inlineBlock  material-icons md-16 icon-grey">close</span></a><input type="text" placeholder="0-63" class="form-control inlineBlock" id="dscp_input" ng-model="rule.match.dscp" name="dscp" vip-number-list-range-validation data-range="0-63" is-Required="true"><vip-messages element-name="dscp"></vip-messages></div></div></div>'),
        c.put("policyMatchSource", '<div id="select-rule_source" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Source: &nbsp;&nbsp;&nbsp;&nbsp; Port</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'source\', \'source\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input type="text" placeholder="0-65535" class="form-control inlineBlock" id="source_port_input" ng-model="rule.match.sourcePort" name="source_port" vip-number-list-range-validation data-range="0-65535" is-Required="true"><vip-messages element-name="source_port"></vip-messages></div></div></div>'),
        c.put("policyMatchDestination", '<div id="select-rule_destination" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Destination: &nbsp;&nbsp;&nbsp;&nbsp; Port</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'destination\', \'destination\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input placeholder="0-65535" type="text" class="form-control inlineBlock" id="destination_port_input" ng-model="rule.match.destinationPort" name="destination_port" vip-number-list-range-validation data-range="0-65535" is-Required="true"><vip-messages element-name="destination_port"></vip-messages></div></div></div>'),
        c.put("policyMatchProtocol", '<div id="select-rule_protocol" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Protocol</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'protocol\', \'protocol\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input placeholder="0-255" type="text" class="form-control inlineBlock" id="protocol_input" ng-model="rule.match.protocol" name="protocol" vip-number-list-range-validation data-range="0-255" is-Required="true"><vip-messages element-name="protocol"></vip-messages></div></div></div>'),
        c.put("policyMatchSourceDataPrefixList", '<div id="select-rule_source_data_prefix" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Source Data Prefix List</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'sourceDataPrefixList\', \'sourceDataPrefixList\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><select-create-chips-drop-down  place-holder="\'Select one or more data prefix lists\'" model-Obj="rule.match.sourceDataPrefixList" list-items="dataPrefixList.listItems" list-instance = "dataPrefixList" copy-list="true" chip-removable="true" heading="Prefix List" disabled="rule.match.sourceIp.length > 0"></select-create-chips-drop-down></div></div><div class="rule-entry"><div class="entry-label"><label>Source: &nbsp;&nbsp;&nbsp;&nbsp; IP Prefix</label></div><div class="entry-input"><input placeholder="Example: 10.0.0.1/11" type="text" class="form-control inlineBlock" id="source_ip_input" ng-model="rule.match.sourceIp" name="source_ip" vip-ip-v4-prefix-list-validation ng-disabled="rule.match.sourceDataPrefixList.listId"><vip-messages element-name="source_ip"></vip-messages></div></div></div>'),
        c.put("policyMatchDestinationDataPrefixList", '<div id="select-rule_destination_data_prefix" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Destination Data Prefix List</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'destinationDataPrefixList\', \'destinationDataPrefixList\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><select-create-chips-drop-down place-holder="\'Select one or more data prefix lists\'" model-Obj="rule.match.destinationDataPrefixList" list-items="dataPrefixList.listItems" list-instance = "dataPrefixList" copy-list="true" chip-removable="true" heading="Prefix List" disabled="rule.match.destinationIp.length > 0"></select-create-chips-drop-down></div></div><div class="rule-entry"><div class="entry-label"><label>Destination: &nbsp;&nbsp;&nbsp;&nbsp; IP Prefix</label></div><div class="entry-input"><input placeholder="Example: 10.0.0.1/11" type="text" class="form-control inlineBlock" id="destination_ip_input" ng-model="rule.match.destinationIp" name="destination_ip" vip-ip-v4-prefix-list-validation ng-disabled="rule.match.destinationDataPrefixList.listId"><vip-messages element-name="destination_ip"></vip-messages></div></div></div>'),
        c.put("policyMatchPacketLength", '<div id="select-rule_packet_length" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Packet Length</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'packetLength\', \'packetLength\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input placeholder="0-65535" type="text" class="form-control inlineBlock" id="packet_length_input" ng-model="rule.match.packetLength" name="packet_length" vip-number-list-range-validation data-range="0-65535" is-required="true"><vip-messages element-name="packet_length"></vip-messages></div></div></div>'),
        c.put("policyMatchPLP", '<div id="select-rule_plp" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>PLP</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'plp\', \'plp\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><single-select-chips-drop-down place-holder="\'Select a PLP\'" model-Obj="rule.match.plp" list-items="plpList" chip-removable="true" copy-list="true"></single-select-chips-drop-down></div></div></div>'),
        c.put("policyMatchTCP", '<div id="select-rule_tcp" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>TCP</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'tcp\', \'tcp\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input type="text" class="form-control inlineBlock" id="tcp_input" ng-model="rule.match.tcp" ng-init="rule.match.tcp = \'syn\'" name="tcp" required disabled><vip-messages element-name="tcp"></vip-messages></div></div></div>'),
        c.put("policyMatchOrigin", '<div id="select-rule_origin" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Origin</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'origin\', \'origin\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><single-select-chips-drop-down place-holder="\'Select a origin\'" model-Obj="rule.match.origin" list-items="originList" chip-removable="true" copy-list="true" heading="type" create-option="false"></single-select-chips-drop-down></div></div></div>'),
        c.put("policyMatchOriginator", '<div id="select-rule_originator" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Originator</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'originator\', \'originator\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input placeholder="Example: 10.0.0.1" type="text" class="form-control inlineBlock" id="originator_input" ng-model="rule.match.originator" name="originator" vip-ip-v4-validation required><vip-messages element-name="originator"></vip-messages></div></div></div>'),
        c.put("policyMatchOMPTag", '<div id="select-rule_omp_tag" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>OMP Tag</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'ompTag\', \'ompTag\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input placeholder="0-4294967295" type="number" class="form-control inlineBlock" id="omp_tag_input" ng-model="rule.match.ompTag" name="omp_tag" ng-min="0" ng-max="4294967295" required><vip-messages element-name="omp_tag"></vip-messages></div></div></div>'),
        c.put("policyMatchPreference", '<div id="select-rule_preference" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Preference</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'preference\', \'preference\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input placeholder="0-4294967295" type="number" class="form-control inlineBlock" id="preference_input" ng-model="rule.match.preference" name="preference" ng-min="0" ng-max="4294967295" required><vip-messages element-name="preference"></vip-messages></div></div></div>'),
        c.put("policyMatchColorList", '<div id="select-rule_color_list" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Color List</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'colorList\', \'colorList\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><select-create-chips-drop-down place-holder="\'Select one or more color lists\'" model-Obj="rule.match.colorList" list-items="colorList.listItems" list-instance="colorList" copy-list="true" chip-removable="true" heading="Color List"></select-create-chips-drop-down></div></div></div>'),
        c.put("policyMatchSiteList", '<div id="select-rule_site_list" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Site List</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'siteList\', \'siteList\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><select-create-chips-drop-down place-holder="\'Select one or more site lists\'" model-Obj="rule.match.siteList" list-items="siteList.listItems" list-instance="siteList" copy-list="true" chip-removable="true" heading="Site List" disabled="rule.match.siteId"></select-create-chips-drop-down></div></div><div class="rule-entry"><div class="entry-label"><label>Site ID</label></div><div class="entry-input"><input placeholder="0-4294967295" type="number" class="form-control inlineBlock" id="site_id_input" ng-model="rule.match.siteId" name="site_id" ng-min="0" ng-max="4294967295" ng-disabled="rule.match.siteList.listId"><vip-messages element-name="site_id"></vip-messages></div></div></div>'),
        c.put("policyMatchVPNList", '<div id="select-rule_vpn_list" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>VPN List</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'vpnList\', \'vpnList\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><select-create-chips-drop-down place-holder="\'Select one or more vpn lists\'" model-Obj="rule.match.vpnList" list-items="vpnList.listItems" list-instance="vpnList" copy-list="true" chip-removable="true" heading="VPN List" disabled="rule.match.vpn"></select-create-chips-drop-down></div></div><div class="rule-entry"><div class="entry-label"><label>VPN ID</label></div><div class="entry-input"><input placeholder="0-65536" type="number" class="form-control inlineBlock" id="vpn_id_input" ng-model="rule.match.vpn" name="vpn_id" ng-min="0" ng-max="65530" ng-disabled="rule.match.vpnList.listId"><vip-messages element-name="vpn_id"></vip-messages></div></div></div>'),
        c.put("policyMatchCarrier", '<div id="select-rule_carrier" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Carrier</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'carrier\', \'carrier\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><single-select-chips-drop-down place-holder="\'Select a carrier\'" model-Obj="rule.match.carrier" list-items="carriers" chip-removable="true" copy-list="true" heading="type" create-option="false"></single-select-chips-drop-down></div></div></div>'),
        c.put("policyMatchDomainId", '<div id="select-rule_domain_id" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Domain Id</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'domainId\', \'domainId\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input placeholder="1-4294967295" type="number" class="form-control inlineBlock" id="domain_id_input" ng-model="rule.match.domainId" name="domain_id" ng-min="0" ng-max="4294967295" required><vip-messages element-name="domain_id"></vip-messages></div></div></div>'),
        c.put("policyMatchGroupId", '<div id="select-rule_group_id" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Group Id</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'groupId\', \'groupId\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input placeholder="0-4294967295" type="number" class="form-control inlineBlock" id="group_id_input" ng-model="rule.match.groupId" name="group_id" ng-min="0" ng-max="4294967295" required><vip-messages element-name="group_id"></vip-messages></div></div></div>'),
        c.put("policyMatchTLOCList", '<div id="select-rule_tloc_list" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>TLOC List</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'tlocList\', \'tlocList\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><select-create-chips-drop-down place-holder="\'Select one or more TLOC lists\'" model-Obj="rule.match.tlocList" list-items="tlocList.listItems" list-instance="tlocList" copy-list="true" chip-removable="true" heading="TLOC List" disabled="(rule.match.tloc.ip.length > 0 || rule.match.tloc.color.name || rule.match.tloc.encap.name)"></select-create-chips-drop-down></div></div><div class="rule-entry"><div class="entry-label"><label>TLOC IP</label></div><div class="entry-input"><input placeholder="Example: 10.0.0.1" type="text" class="form-control inlineBlock" id="match_tloc_input" ng-model="rule.match.tloc.ip" name="match_tloc_ip" vip-ip-v4-optional-validation is-required="rule.match.tloc.ip.length > 0" ng-disabled="rule.match.tlocList.listId"><vip-messages element-name="match_tloc_ip"></vip-messages></div></div><div class="rule-entry"><div class="entry-label"><label>Color</label></div><div class="entry-input" style="padding-right: 10px;"><single-select-chips-drop-down place-holder="\'Select a color list\'"  model-Obj="rule.match.tloc.color" list-items="colors" chip-removable="true" copy-list="true" disabled="rule.match.tlocList.listId"></single-select-chips-drop-down></div></div><div class="rule-entry"><div class="entry-label"><label>Encapsulation</label></div><div class="entry-input" style="padding-right: 10px;"><single-select-chips-drop-down place-holder="\'Select an encap\'"  model-Obj="rule.match.tloc.encap" list-items="tlocEncapList" chip-removable="true" copy-list="true" disabled="rule.match.tlocList.listId"></single-select-chips-drop-down></div></div></div>'),
        c.put("policyMatchPrefixList", '<div id="select-rule_prefix_list" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Prefix List</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'prefixList\', \'prefixList\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><select-create-chips-drop-down place-holder="\'Select one or more prefix lists\'" model-Obj="rule.match.prefixList" list-items="prefixList.listItems" list-instance="prefixList" copy-list="true" chip-removable="true" heading="Prefix List"></select-create-chips-drop-down></div></div></div>'),
        c.put("policyMatchAppReadonly", '<div id="select-rule_application" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Application/Application Family List:</label></div><div class="entry-input long-name"><span><label>{{rule.match.appList.name}}</label></span></div></div><div class="divider"></div></div>'),
        c.put("policyMatchDnsAppListReadonly", '<div id="select-rule_dns_application" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>DNS Application/Application Family List:</label></div><div class="entry-input long-name"><span><label>{{rule.match.dnsAppList.name}}</label></span></div></div><div class="divider"></div></div>'),
        c.put("policyMatchDNSReadonly", '<div id="select-rule_plp" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>DNS: </label></div><div class="entry-input"><label>{{rule.match.dns.name}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchDSCPReadonly", '<div id="select-rule_dscp" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>DSCP: </label></div><div class="entry-input"><label>{{rule.match.dscp}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchSourceReadonly", '<div id="select-rule_source" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Source:</label><label> &nbsp;&nbsp;&nbsp;&nbsp;Port</label></div><div class="entry-input"><label>{{rule.match.sourcePort}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchDestinationReadonly", '<div id="select-rule_destination" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Destination:</label><label> &nbsp;&nbsp;&nbsp;&nbsp;Port</label></div><div class="entry-input"><label>{{rule.match.destinationPort}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchProtocolReadonly", '<div id="select-rule_protocol" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Protocol: </label></div><div class="entry-input"><label>{{rule.match.protocol}}</label></div><div class="divider"></div></div>'),
        c.put("policyMatchSourceDataPrefixListReadonly", '<div id="select-rule_source_data_prefix" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Source Data Prefix List:</label></div><div class="entry-input long-name"><span><label>{{rule.match.sourceDataPrefixList.name}}</label></span></div></div><div class="rule-entry"><div class="entry-label"><label>Source:</label><label>&nbsp;&nbsp;&nbsp;&nbsp; IP </label></div><div class="entry-input"><label>{{rule.match.sourceIp}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchDestinationDataPrefixListReadonly", '<div id="select-rule_destination_data_prefix" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Destination Data Prefix List:</label></div><div class="entry-input long-name"><span><label>{{rule.match.destinationDataPrefixList.name}}</label></span></div></div><div class="rule-entry"><div class="entry-label"><label>Destination: </label><label>&nbsp;&nbsp;&nbsp;&nbsp; IP </label></div><div class="entry-input"><label>{{rule.match.destinationIp}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchPacketLengthReadonly", '<div id="select-rule_packet_length" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Packet Length: </label></div><div class="entry-input"><label>{{rule.match.packetLength}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchPLPReadonly", '<div id="select-rule_plp" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>PLP: </label></div><div class="entry-input"><label>{{rule.match.plp.name}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchTCPReadonly", '<div id="select-rule_tcp" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>TCP: </label></div><div class="entry-input"><label>{{rule.match.tcp}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchOriginReadonly", '<div id="select-rule_origin" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Origin: </label></div><div class="entry-input"><label>{{rule.match.origin.name}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchOMPTagReadonly", '<div id="select-rule_omp_tag" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>OMP Tag: </label></div><div class="entry-input"><label>{{rule.match.ompTag}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchOriginatorReadonly", '<div id="select-rule_originator" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Originator: </label></div><div class="entry-input"><label>{{rule.match.originator}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchPreferenceReadonly", '<div id="select-rule_preference" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Preference: </label></div><div class="entry-input"><label>{{rule.match.preference}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchColorListReadonly", '<div id="select-rule_color_list" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Color List:</label></div><div class="entry-input long-name"><span><label>{{rule.match.colorList.name}}</label></span></div></div><div class="divider"></div></div>'),
        c.put("policyMatchSiteListReadonly", '<div id="select-rule_site_list" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Site List:</label></div><div class="entry-input long-name"><span><label>{{rule.match.siteList.name}}</label></span></div></div><div class="rule-entry"><div class="entry-label"><label>Site ID: </label></div><div class="entry-input"><label>{{rule.match.siteId}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchVPNListReadonly", '<div id="select-rule_vpn_list" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>VPN List:</label></div><div class="entry-input long-name"><span><label>{{rule.match.vpnList.name}}</label></span></div></div><div class="rule-entry"><div class="entry-label"><label>VPN Id </label></div><div class="entry-input"><label>{{rule.match.vpn}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchCarrierReadonly", '<div id="select-rule_carrier" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Carrier: </label></div><div class="entry-input"><label>{{rule.match.carrier.name}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchDomainIdReadonly", '<div id="select-rule_domain_id" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Domain Id: </label></div><div class="entry-input"><label>{{rule.match.domainId}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchGroupIdReadonly", '<div id="select-rule_group_id" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Group Id: </label></div><div class="entry-input"><label>{{rule.match.groupId}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchTLOCListReadonly", '<div id="select-rule_tloc_list" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>TLOC List:</label></div><div class="entry-input long-name"><span><label>{{rule.match.tlocList.name}}</label></span></div></div><div class="rule-entry"><div class="entry-label"><label>TLOC IP: </label></div><div class="entry-input"><label>{{rule.match.tloc.ip}}</label></div></div><div class="rule-entry"><div class="entry-label"><label>Color: </label></div><div class="entry-input"><label>{{rule.match.tloc.color.name}}</label></div></div><div class="rule-entry"><div class="entry-label"><label>Encapsulation: </label></div><div class="entry-input"><label>{{rule.match.tloc.encap.name}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyMatchPrefixListReadonly", '<div id="select-rule_prefix_list" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Prefix List:</label></div><div class="entry-input long-name"><span><label>{{rule.match.prefixList.name}}</label></span></div></div><div class="divider"></div></div>'),
        c.put("policyActionSLA", '<div id="select-rule_sla_class" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>SLA Class</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'slaClass\',  \'slaClass\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><select-create-chips-drop-down place-holder="\'Select one or more SLA class lists\'" model-Obj="rule.action.slaClass.name" list-items="slaClassList.listItems" list-instance="slaClassList" copy-list="true" chip-removable="true" heading="SLA Class List"></select-create-chips-drop-down></div></div><div class="rule-entry"><div class="entry-label long-name"><label>Preferred Color </label></div><div class="entry-input long-name"><chips-drop-down  place-holder="\'Select one or more color lists\'" model-Obj="rule.action.slaClass.preferredColor" list-items="colors" copy-list="true" heading="colors" match-property="name"></chips-drop-down></div></div><div class="rule-entry"><div class="entry-input"><vip-check-box check-box-name="sla_class_strict_name" id="sla_class_strict_checkbox" value="rule.action.slaClass.strict" is-checked-initially="rule.action.slaClass.strict" ng-click="rule.action.slaClass.strict = !rule.action.slaClass.strict" check-box-label="Strict"></vip-check-box></div></div></div>'),
        c.put("policyActionLog", '<div id="select-rule_log" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Log</label></div><div class="entry-input entry-flag">Enabled<a id="log_close_button" href="" class="inlineBlock pull-right" data-ng-click="removeElement($event, \'log\', \'log\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div></div></div>'),
        c.put("policyActionCounter", '<div id="select-rule_counter" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Counter Name</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'count\', \'count\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input placeholder="maximum of 20 characters" policy-name-validation type="text" class="form-control inlineBlock" id="counter_input" ng-model="rule.action.count" name="counter" ng-minlength="1" ng-maxlength="20" required><vip-messages element-name="counter"></vip-messages></div></div></div>'),
        c.put("policyActionCFlowd", '<div id="select-rule_cflowd" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>CFlowd</label></div><div class="entry-input entry-flag">Enabled<a id="cflowd_close_button" href="" class="inlineBlock pull-right" data-ng-click="removeElement($event, \'cflowd\', \'cflowd\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div></div></div>'),
        c.put("policyActionAccept", '<div id="select-rule_accept" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Accept</label></div><div class="entry-input entry-flag">Enabled</div></div></div>'),
        c.put("policyActionNATPool", '<div id="select-rule_nat_pool" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>NAT Pool</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'natPool\', \'pool\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input placeholder="1-32" type="number" class="form-control inlineBlock" id="nat_pool_input" ng-model="rule.action.nat.pool" name="nat_pool" ng-min="1" ng-max="32" required><vip-messages element-name="nat_pool"></vip-messages></div></div></div>'),
        c.put("policyActionNATVPN", '<div id="select-rule_nat_vpn" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>NAT VPN: &nbsp;&nbsp;&nbsp;&nbsp; VPN ID: </label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'natVPN\', \'useVpn\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input type="number" class="form-control inlineBlock" id="nat_vpn_input" ng-model="rule.action.nat.useVpn" name="nat_vpn" ng-init="rule.action.nat.useVpn = 0" disabled><vip-messages element-name="nat_vpn"></vip-messages></div></div><div><vip-check-box-ext check-box-name="set_nat_vpn_fallback" id="set_nat_fallback_checkbox" value="rule.action.nat.fallback" is-checked-initially="rule.action.nat.fallback" ng-click="!rule.action.nat.fallback? rule.action.nat.fallback = true : rule.action.nat.fallback = \'\'" check-box-label="Fallback"></vip-check-box-ext></div></div>'),
        c.put("policyActionRedirectDNS", '<div id="select-rule_redirectDns" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Redirect DNS</label></div><div class="entry-input inlineDisplay"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'redirectDns\', \'redirectDns\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a> <md-radio-group ng-model="rule.action.redirectDns.redirectDNSOption"> <md-radio-button value="dnsType" class="md-primary inlineDisplay">Host</md-radio-button> <md-radio-button class="inlineDisplay" style="margin-left: 10%;" value="ipAddress"> IP Addresss </md-radio-button></md-radio-group></div></div><div class="rule-entry"><div class="entry-label" ng-if="rule.action.redirectDns.redirectDNSOption === \'ipAddress\'"><label>Ip Address</label></div><div class="entry-input" ng-if="rule.action.redirectDns.redirectDNSOption === \'ipAddress\'"><input placeholder="Example: 10.0.0.1" type="text" class="form-control inlineBlock" id="set_redirect_dns_ipaddress_input" ng-model="rule.action.redirectDns.ipAddress" name="set_redirect_dns_ipaddress" vip-ip-v4-validation required><vip-messages element-name="set_redirect_dns_ipaddress"></vip-messages></div></div></div>'),
        c.put("policyActionSetDSCP", '<div id="select-rule_set_dscp" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>DSCP</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'setDSCP\', \'dscp\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input placeholder="0-63" type="text" class="form-control inlineBlock" id="set_dscp_input" ng-model="rule.action.set.dscp" name="set_dscp" vip-number-list-range-validation data-range="0-63" is-required="true"><vip-messages element-name="set_dscp"></vip-messages></div></div></div>'),
        c.put("policyActionSetForwardingClass", '<div id="select-rule_set_fwd_class" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Forwarding Class</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'setFwdClass\', \'forwardingClass\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input placeholder="maximum of 32 characters" type="text" class="form-control inlineBlock" id="set_fwd_class_input" ng-model="rule.action.set.forwardingClass" name="set_fwd_class" ng-minlength="1" ng-maxlength="32" required><vip-messages element-name="set_fwd_class"></vip-messages></div></div></div>'),
        c.put("policyActionSetLocalTLOC", '<div id="select-rule_set_local_tloc" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Local TLOC: &nbsp;&nbsp;&nbsp;&nbsp; Color </label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'setLocalTLOC\', \'localTloc\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><single-select-chips-drop-down place-holder="\'Select a color list\'" model-Obj="rule.action.set.localTloc.color" list-items="colors" chip-removable="true" copy-list="true"></single-select-chips-drop-down></div></div><div class="rule-entry"><div class="entry-label"><label>Local TLOC: &nbsp;&nbsp;&nbsp;&nbsp; Encapsulation</label></div><div class="entry-input long-name"><single-select-chips-drop-down place-holder="\'Select an encap\'" model-Obj="rule.action.set.localTloc.encap" list-items="tlocEncapList" chip-removable="true" copy-list="true"></single-select-chips-drop-down></div></div></div>'),
        c.put("policyActionSetLocalTLOCList", '<div id="select-rule_set_local_tloc_list" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Local TLOC List: &nbsp;&nbsp;&nbsp;&nbsp; Color</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'setLocalTLOCList\', \'localTlocList\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><chips-drop-down place-holder="\'Select one or more color lists\'" model-Obj="rule.action.set.localTlocList.color" list-items="colors" copy-list="true" heading="Colors" match-property="name"></chips-drop-down></div></div><div class="rule-entry"><div class="entry-label"><label>Local TLOC List: &nbsp;&nbsp;&nbsp;&nbsp; Encapsulation</label></div><div class="entry-input long-name"><chips-drop-down place-holder="\'Select one or more TLOC lists\'" model-Obj="rule.action.set.localTlocList.encap" list-items="tlocEncapList" copy-list="true" match-property="name"></chips-drop-down></div></div><div class="rule-entry"><div class="entry-input"><vip-check-box check-box-name="set_local_tloc_list_restrict" id="set_localtloclist_checkbox" value="rule.action.set.localTlocList.restrict" is-checked-initially="rule.action.set.localTlocList.restrict" ng-click="rule.action.set.localTlocList.restrict = !rule.action.set.localTlocList.restrict" check-box-label="Restrict"></vip-check-box></div></div></div>'),
        c.put("policyActionSetNexthop", '<div id="select-rule_set_next_hop" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Next Hop</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'setNexthop\',\'nexthop\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input placeholder="Example: 10.0.0.1" type="text" class="form-control inlineBlock" id="set_nexthop_input" ng-model="rule.action.set.nextHop" name="set_nexthop" vip-ip-v4-validation required><vip-messages element-name="set_nexthop"></vip-messages></div></div></div>'),
        c.put("policyActionSetPolicer", '<div id="select-rule_set_policer" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Policer List</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'setPolicer\', \'policer\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><select-create-chips-drop-down place-holder="\'Select one or more policer lists\'" model-Obj="rule.action.set.policer" list-instance="policerList" list-items="policerList.listItems" copy-list="true" chip-removable="true" heading="Policer List"></select-create-chips-drop-down></div></div></div>'),
        c.put("policyActionSetService", '<div id="select-rule_set_service" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Service: &nbsp;&nbsp;&nbsp;&nbsp; Type </label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'setService\', \'service\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><single-select-chips-drop-down place-holder="\'Select a service type\'" model-Obj="rule.action.set.service.type" list-items="serviceTypes" copy-list="true" chip-removable="true" heading="type" create-option="false"></single-select-chips-drop-down></div></div><div class="rule-entry"><div class="entry-label"><label>Service: &nbsp;&nbsp;&nbsp;&nbsp; VPN</label></div><div class="entry-input"><input placeholder="0-65530" type="number" class="form-control inlineBlock" id="set_service_vpn_input" ng-model="rule.action.set.service.vpn" name="set_service_vpn" ng-min="0" ng-max="65530" ng-disabled="rule.action.set.service.local" ng-required="!rule.action.set.service.local && (rule.action.set.service.tloc || (rule.action.set.service.tlocList && rule.action.set.service.tlocList.listId))"><vip-messages element-name="set_service_vpn"></vip-messages></div></div><div class="rule-entry ng-if="rule.action.set.service.hasOwnProperty(\'tloc\')""><div class="rule-entry"><div class="entry-label"><label>Service: TLOC IP</label></div><div class="entry-input"><input placeholder="Example: 10.0.0.1" type="text" class="form-control inlineBlock" id="action_set_service_tloc_ip_input" ng-model="rule.action.set.service.tloc.ip" name="set_service_tloc_ip" vip-ip-v4-optional-validation is-required="rule.action.set.service.tloc.ip.length > 0" ng-disabled="rule.action.set.service.tlocList.listId"><vip-messages element-name="set_service_tloc_ip"></vip-messages></div></div><div class="rule-entry"><div class="entry-label"><label>Color</label></div><div class="entry-input" style="padding-right: 10px;"><single-select-chips-drop-down place-holder="\'Select a color list\'" model-Obj="rule.action.set.service.tloc.color" list-items="colors" chip-removable="true" copy-list="true" disabled="rule.action.set.service.tlocList.listId"></single-select-chips-drop-down></div></div><div class="rule-entry"><div class="entry-label"><label>Encapsulation</label></div><div class="entry-input" style="padding-right: 10px;"><single-select-chips-drop-down place-holder="\'Select an encap\'" model-Obj="rule.action.set.service.tloc.encap" list-items="tlocEncapList" chip-removable="true" copy-list="true" disabled="rule.action.set.service.tlocList.listId"></single-select-chips-drop-down></div></div><div class="rule-entry"><div class="entry-label"><label>Service: &nbsp;&nbsp;&nbsp;&nbsp; TLOC List</label></div><div class="entry-input long-name"><select-create-chips-drop-down place-holder="\'Select one or more TLOC lists\'" model-Obj="rule.action.set.service.tlocList" list-items="tlocList.listItems" chip-removable="true" list-instance="tlocList" copy-list="true" disabled="(rule.action.set.service.tloc.ip.length > 0 || rule.action.set.service.tloc.color.name || rule.action.set.service.tloc.encap.name)"></select-create-chips-drop-down></div></div><div class="rule-entry" ng-if="rule.action.set.service.hasOwnProperty(\'local\')"><div class="entry-input halfWidth"><vip-check-box-ext check-box-name="set_service_local" id="set_service_local_checkbox" value="rule.action.set.service.local" is-checked-initially="rule.action.set.service.local" ng-click="(rule.action.set.service.vpn == null || rule.action.set.service.vpn < 0) && (rule.action.set.service.local = !rule.action.set.service.local)" check-box-label="Local" check-box-disabled="rule.action.set.service.vpn !== null && rule.action.set.service.vpn > -1"></vip-check-box-ext></div><div class="entry-input halfWidth" ng-if="rule.action.set.service.hasOwnProperty(\'restrict\')" ><vip-check-box-ext check-box-name="set_service_restrict" id="set_service_restrict_checkbox" value="rule.action.set.service.restrict" is-checked-initially="rule.action.set.service.restrict" ng-click="rule.action.set.service.local && (rule.action.set.service.restrict = !rule.action.set.service.restrict)" check-box-label="Restrict" check-box-disabled="!rule.action.set.service.local"></vip-check-box-ext></div></div></div>'),
        c.put("policyActionSetTLOCAction", '<div id="select-rule_set_tloc_action" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>TLOC Action</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'setTLOCAction\', \'tlocAction\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><single-select-chips-drop-down place-holder="\'Select a TLOC action\'" model-Obj="rule.action.set.tlocAction" list-items="tlocActionList" chip-removable="true" copy-list="true"></single-select-chips-drop-down></div></div></div>'),
        c.put("policyActionSetTLOC", '<div id="select-rule_set_tloc" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>TLOC</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'setTLOC\', \'tloc\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input type="text" class="form-control inlineBlock" id="set_tloc_input" ng-model="rule.action.set.tloc" name="set_tloc" required><vip-messages element-name="set_tloc"></vip-messages></div></div></div>'),
        c.put("policyActionSetTLOCList", '<div id="select-rule_set_tloc_list" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>TLOC List</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'setTLOCList\', \'tlocList\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><select-create-chips-drop-down place-holder="\'Select one or more TLOC lists\'" model-Obj="rule.action.set.tlocList" list-items="tlocList.listItems" list-instance="tlocList" copy-list="true" chip-removable="true" heading="TLOC List" disabled="(rule.action.set.tloc.ip.length > 0 || rule.action.set.tloc.color.name || rule.action.set.tloc.encap.name)"></select-create-chips-drop-down></div></div><div class="rule-entry"><div class="entry-label"><label>TLOC IP</label></div><div class="entry-input"><input placeholder="Example: 10.0.0.1" type="text" class="form-control inlineBlock" id="action_set_tloc_ip_input" ng-model="rule.action.set.tloc.ip" name="set_tloc_ip" vip-ip-v4-optional-validation is-required="rule.action.set.tloc.ip.length > 0" ng-disabled="rule.action.set.tlocList.listId"><vip-messages element-name="set_tloc_ip"></vip-messages></div></div><div class="rule-entry"><div class="entry-label"><label>Color</label></div><div class="entry-input" style="padding-right: 10px;"><single-select-chips-drop-down place-holder="\'Select a color list\'" model-Obj="rule.action.set.tloc.color" list-items="colors" chip-removable="true" copy-list="true" disabled="rule.action.set.tlocList.listId"></single-select-chips-drop-down></div></div><div class="rule-entry"><div class="entry-label"><label>Encapsulation</label></div><div class="entry-input" style="padding-right: 10px;"><single-select-chips-drop-down place-holder="\'Select an encap\'" model-Obj="rule.action.set.tloc.encap" list-items="tlocEncapList" chip-removable="true" copy-list="true" disabled="rule.action.set.tlocList.listId"></single-select-chips-drop-down></div></div></div>'),
        c.put("policyActionSetVPN", '<div id="select-rule_set_vpn" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>VPN</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'setVPN\', \'vpn\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input placeholder="0-65530" type="number" class="form-control inlineBlock" id="set_vpn_input" ng-model="rule.action.set.vpn" name="set_vpn" ng-min="0" ng-max="65530" required><vip-messages element-name="set_vpn"></vip-messages></div></div></div>'),
        c.put("policyActionSetPreference", '<div id="select-rule_set_preference" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Preference</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'setPreference\', \'preference\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input placeholder="0-4294967295" type="number" class="form-control inlineBlock" id="set_preference_input" ng-model="rule.action.set.preference" name="set_preference" ng-min="0" ng-max="4294967295" required><vip-messages element-name="set_preference"></vip-messages></div></div></div>'),
        c.put("policyActionSetOMPTag", '<div id="select-rule_set_omp_tag" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>OMP Tag</label></div><div class="entry-input"><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'setOMPTag\', \'ompTag\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a><input placeholder="0-4294967295" type="number" class="form-control inlineBlock" id="set_omp_tag_input" ng-model="rule.action.set.ompTag" name="set_omp_tag" ng-min="0" ng-max="4294967295" required><vip-messages element-name="set_omp_tag"></vip-messages></div></div></div>'),
        c.put("policyActionDrop", '<div id="select-rule_drop" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Drop</label></div><div class="entry-input entry-flag">Enabled</div></div></div>'),
        c.put("policyActionNone", '<div id="select-rule_none" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>None</label></div><div class="entry-input entry-flag">Enabled</div></div></div>'),
        c.put("policyActionReject", '<div id="select-rule_reject" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Reject</label></div><div class="entry-input entry-flag">Enabled</div></div></div>'),
        c.put("policyActionBackupSLAPreferredColor", '<div id="select-rule_backup_sla_preferred_color" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Backup SLA Preferred Color</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'backupSlaPreferredColor\', \'backupSlaPreferredColor\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><chips-drop-down place-holder="\'Select one or more color lists\'" model-Obj="rule.action.backupSlaPreferredColor" list-items="colors" copy-list="true" heading="Colors" match-property="name"></chips-drop-down></div></div></div>'),
        c.put("policyActionTCPOptimization", '<div id="select-rule_tcp_optimization" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>TCP Optimization</label></div><div class="entry-input entry-flag">Enabled<a id="log_close_button" href="" class="inlineBlock pull-right" data-ng-click="removeElement($event, \'tcpOptimization\', \'tcpOptimization\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div></div></div>'),
        c.put("policyActionExportTo", '<div id="select-rule_export_to" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Export To</label><a href="" class="close_button inlineBlock pull-right" data-ng-click="removeElement($event, \'exportTo\', \'exportTo\')"><span class="inlineBlock material-icons md-16 icon-grey">close</span></a></div><div class="entry-input long-name"><select-create-chips-drop-down place-holder="\'Select one or more VPN lists\'" model-Obj="rule.action.exportTo" list-items="vpnList.listItems" list-instance="vpnList" copy-list="true" chip-removable="true"></select-create-chips-drop-down></div></div></div>'),
        c.put("policyActionSLAReadonly", '<div id="select-rule_sla_class" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>SLA Class:</label><label>&nbsp;&nbsp;&nbsp;&nbsp; List </label></div><div class="entry-input"><span><label>{{rule.action.slaClass.name.name}}</label></span></div></div><div class="rule-entry"><div class="entry-label"><label class="visibilityHidden">SLA Class:</label><label>&nbsp;&nbsp;&nbsp;&nbsp; Preferred Color </label></div><div class="entry-input"><label ng-repeat="(property, value) in rule.action.slaClass.preferredColor">{{value.name}}&nbsp;</label></div></div><div class="rule-entry"><div class="entry-label"><label class="visibilityHidden">SLA Class:</label><label> &nbsp;&nbsp;&nbsp;&nbsp;Strict</label></div><div class="entry-input"><label>{{rule.action.slaClass.strict}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionLogReadonly", '<div id="select-rule_log" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Log</label></div><div class="entry-input entry-flag"><label>Enabled</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionCounterReadonly", '<div id="select-rule_counter" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Counter</label></div><div class="entry-input"><label>{{rule.action.count}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionCFlowdReadonly", '<div id="select-rule_cflowd" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>CFlowd</label></div><div class="entry-input entry-flag"><label>Enabled</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionAcceptReadonly", '<div id="select-rule_accept" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Accept</label></div><div class="entry-input"></div></div><div class="divider"></div></div>'),
        c.put("policyActionNATPoolReadonly", '<div id="select-rule_nat_pool" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>NAT Pool: </label></div><div class="entry-input"><label>{{rule.action.nat.pool}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionNATVPNReadonly", '<div id="select-rule_nat_vpn" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>NAT VPN: </label></div><div class="entry-input"><label>{{rule.action.nat.useVpn}}</label></div></div><div class="rule-entry"><div class="entry-label"><label class="visibilityHidden">NAT VPN:</label><label> &nbsp;&nbsp;&nbsp;&nbsp;Fallback</label></div><div class="entry-input"><label>{{rule.action.nat.fallback}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionRedirectDNSReadonly", '<div id="select-rule_redirectDNS" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Redirect DNS: </label></div><div class="entry-input"><label>{{rule.action.redirectDns.redirectDNSOption === \'ipAddress\' ? \'Ip Address\' : \'Host\'}}</label></div></div><div class="rule-entry"><div class="entry-label"><label  class="visibilityHidden">Redirect DNS: </label><label ng-if="rule.action.redirectDns.redirectDNSOption === \'ipAddress\'"> &nbsp;&nbsp;&nbsp;&nbsp;Ip Address</label></div><div class="entry-input" ng-if="rule.action.redirectDns.redirectDNSOption === \'ipAddress\'"><label>{{rule.action.redirectDns.ipAddress}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionSetDSCPReadonly", '<div id="select-rule_set_dscp" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>DSCP: </label></div><div class="entry-input"><label>{{rule.action.set.dscp}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionSetForwardingClassReadonly", '<div id="select-rule_set_fwd_class" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Forwarding Class: </label></div><div class="entry-input"><label>{{rule.action.set.forwardingClass}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionSetLocalTLOCReadonly", '<div id="select-rule_set_local_tloc" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Local TLOC:</label><label>&nbsp;&nbsp;&nbsp;&nbsp; color </label></div><div class="entry-input"><label>{{rule.action.set.localTloc.color.name}}</label></div></div><div class="rule-entry"><div class="entry-label"><label class="visibilityHidden">Local TLOC:</label><label> &nbsp;&nbsp;&nbsp;&nbsp;Encapsulation</label></div><div class="entry-input"><label>{{rule.action.set.localTloc.encap.name}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionSetLocalTLOCListReadonly", '<div id="select-rule_set_local_tloc_list" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Local TLOC List: </label></div><div class="entry-input"><label ng-repeat="(property, value) in rule.action.set.localTlocList.color">{{value.name}}&nbsp;</label></div></div><div class="rule-entry"><div class="entry-label"><label class="visibilityHidden">Local TLOC List:</label><label> &nbsp;&nbsp;&nbsp;&nbsp;Encapsulation</label></div><div class="entry-input"><label ng-repeat="(property, value) in rule.action.set.localTlocList.encap">{{value.name}}&nbsp;</label></div></div><div class="rule-entry"><div class="entry-label"><label class="visibilityHidden">Local TLOC List:</label><label> &nbsp;&nbsp;&nbsp;&nbsp;Restrict</label></div><div class="entry-input"><label>{{rule.action.set.localTlocList.restrict}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionSetNexthopReadonly", '<div id="select-rule_set_nexthop" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Next Hop: </label></div><div class="entry-input"><label>{{rule.action.set.nextHop}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionSetPolicerReadonly", '<div id="select-rule_set_policer" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Policer List:</label></div><div class="entry-input long-name"><span><label>{{rule.action.set.policer.name}}</label></span></div></div><div class="divider"></div></div>'),
        c.put("policyActionSetServiceReadonly", '<div id="select-rule_set_service" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Service:</label><label>&nbsp;&nbsp;&nbsp;&nbsp; Type </label></div><div class="entry-input"><label>{{rule.action.set.service.type.name}}</label></div></div><div class="rule-entry"><div class="entry-label"><label class="visibilityHidden">Service:</label><label> &nbsp;&nbsp;&nbsp;&nbsp;VPN</label></div><div class="entry-input"><label>{{rule.action.set.service.vpn}}</label></div></div><div class="rule-entry"><div class="entry-label"><label class="visibilityHidden">Service:</label><label>&nbsp;&nbsp;&nbsp;&nbsp;TLOC IP: </label></div><div class="entry-input"><label>{{rule.action.set.service.tloc.ip}}</label></div></div><div class="rule-entry"><label class="visibilityHidden">Service:</label><div class="entry-label"><label>&nbsp;&nbsp;&nbsp;&nbsp;Color: </label></div><div class="entry-input"><label>{{rule.action.set.service.tloc.color.name}}</label></div></div><div class="rule-entry"><label class="visibilityHidden">Service:</label><div class="entry-label"><label>&nbsp;&nbsp;&nbsp;&nbsp;Encapsulation: </label></div><div class="entry-input"><label>{{rule.action.set.service.tloc.encap.name}}</label></div></div><div class="rule-entry"><div class="entry-label"><label class="visibilityHidden">Service:</label><label> &nbsp;&nbsp;&nbsp;&nbsp;TLOC List</label></div><div class="entry-input"><label>{{rule.action.set.service.tlocList.name}}</label></div></div><div class="rule-entry"><div class="entry-label"><label class="visibilityHidden">Service:</label><label> &nbsp;&nbsp;&nbsp;&nbsp;Local</label></div><div class="entry-input"><label>{{rule.action.set.service.local}}</label></div></div><div class="rule-entry"><div class="entry-label"><label class="visibilityHidden">Service:</label><label> &nbsp;&nbsp;&nbsp;&nbsp;Restrict</label></div><div class="entry-input"><label>{{rule.action.set.service.restrict}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionSetTLOCActionReadonly", '<div id="select-rule_set_tloc_action" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>TLOC Action: </label></div><div class="entry-input"><label>{{rule.action.set.tlocAction.name}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionSetTLOCReadonly", '<div id="select-rule_set_tloc" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>TLOC: </label></div><div class="entry-input"><label>{{rule.action.set.tloc}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionSetTLOCListReadonly", '<div id="select-rule_set_tloc_list" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>TLOC List:</label></div><div class="entry-input long-name"><span><label>{{rule.action.set.tlocList.name}}</label></span></div></div><div class="rule-entry"><div class="entry-label"><label>TLOC IP: </label></div><div class="entry-input"><label>{{rule.action.set.tloc.ip}}</label></div></div><div class="rule-entry"><div class="entry-label"><label>Color: </label></div><div class="entry-input"><label>{{rule.action.set.tloc.color.name}}</label></div></div><div class="rule-entry"><div class="entry-label"><label>Encapsulation: </label></div><div class="entry-input"><label>{{rule.action.set.tloc.encap.name}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionSetVPNReadonly", '<div id="select-rule_set_vpn" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>VPN: </label></div><div class="entry-input"><label>{{rule.action.set.vpn}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionSetPreferenceReadonly", '<div id="select-rule_set_preference" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Preference: </label></div><div class="entry-input"><label>{{rule.action.set.preference}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionSetOMPTagReadonly", '<div id="select-rule_set_omp_tag" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>OMP Tag: </label></div><div class="entry-input"><label>{{rule.action.set.ompTag}}</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionDropReadonly", '<div id="select-rule_drop" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Drop</label></div><div class="entry-input entry-flag"><label>Enabled</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionNoneReadonly", '<div id="select-rule_none" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>None</label></div><div class="entry-input entry-flag"><label>Enabled</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionRejectReadonly", '<div id="select-rule_reject" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Reject</label></div><div class="entry-input entry-flag"><label>Enabled</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionBackupSLAPreferredColorReadonly", '<div id="select-rule_backup_sla_preferred_color" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>Backup SLA Preferred Color: </label></div><div class="entry-input"><label ng-repeat="(property, value) in rule.action.backupSlaPreferredColor">{{value.name}}&nbsp;</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionTCPOptimizationReadonly", '<div id="select-rule_tcp_optimization" class="select-rule"><div class="rule-entry"><div class="entry-label"><label>TCP Optimization</label></div><div class="entry-input entry-flag"><label>Enabled</label></div></div><div class="divider"></div></div>'),
        c.put("policyActionExportToReadonly", '<div id="select-rule_export_to" class="select-rule"><div class="rule-entry"><div class="entry-label long-name"><label>Export To:</label></div><div class="entry-input long-name"><span><label>{{rule.action.exportTo.name}}</label></span></div></div><div class="divider"></div></div>'),
        {
            priority: 10,
            restrict: "EA",
            templateUrl: "app/configuration/policy/components/templates/policyRule.html",
            scope: {
                rule: "=",
                order: "@",
                saveFn: "&?",
                cancelFn: "&?",
                viewMode: "=?"
            },
            compile: function() {
                return {
                    pre: function(a, b, c) {
                        a.collapseDiv = {
                            show: !1
                        },
                        a.actionTagMenu = {
                            isOpen: !1,
                            open: function() {
                                a.actionTagMenu.isOpen = !a.actionTagMenu.isOpen
                            }
                        },
                        a.policyRuleForm = {},
                        a.applicationList = f.getInstance(),
                        a.dnsApplicationList = f.getInstance(),
                        a.dnsList = u.options,
                        a.colorList = g.getInstance(),
                        a.dataPrefixList = h.getInstance(),
                        a.policerList = i.getInstance(),
                        a.tlocList = j.getInstance(),
                        a.vpnList = k.getInstance(),
                        a.slaClassList = l.getInstance(),
                        a.siteList = m.getInstance(),
                        a.prefixList = n.getInstance(),
                        a.colors = j.getInstance().colors,
                        a.serviceTypes = q.options,
                        a.carriers = r.options,
                        a.originList = s.options,
                        a.plpList = t.options,
                        a.tlocEncapList = v.options,
                        a.tlocActionList = w.options,
                        a.rule && (a.rule.readOnly ? (E(a.rule.match.matchOrder, "match", b, a),
                        E(a.rule.action.actionOrder, "action", b, a),
                        y(b, !0, a)) : (D(a.rule.match.matchOrder, "match", b, a),
                        D(a.rule.action.actionOrder, "action", b, a),
                        x(b, a))),
                        $(b).find(".policy-rule-match").bind("click", function() {
                            a.rule.match.enabled = !0,
                            a.rule.action.enabled = !1
                        }),
                        $(b).find(".policy-rule-action").bind("click", function() {
                            a.rule.match.enabled = !1,
                            a.rule.action.enabled = !0
                        })
                    },
                    post: function(b, c, d) {
                        function f(a) {
                            var b = [];
                            return angular.forEach(a, function(c, d) {
                                1 == a.length ? b.push(o.RULES_TITLE[c]) : d === a.length - 1 ? b.push("and " + o.RULES_TITLE[c]) : b.push(o.RULES_TITLE[c] + " ")
                            }),
                            String(b)
                        }
                        var g = ["select-rule_set_dscp", "select-rule_set_fwd_class", "select-rule_set_local_tloc", "select-rule_set_local_tloc_list", "select-rule_set_nexthop", "select-rule_set_policer", "select-rule_set_service", "select-rule_set_tloc_action", "select-rule_set_tloc", "select-rule_set_tloc_list", "select-rule_set_vpn", "select-rule_set_preference", "select-rule_set_omp_tag", "select-rule_nat_pool", "select-rule_nat_vpn", "select-rule_redirectDns"];
                        b.calcForwardToggle = function(a) {
                            return $(c).find(a).prop("scrollWidth") - 5 > $(c).find(a).width()
                        }
                        ,
                        b.tagScrollRight = function(a) {
                            var b = $(c).find(a).scrollLeft();
                            0 == b ? $(c).find(a).scrollLeft(200) : $(c).find(a).scrollLeft(b + 200)
                        }
                        ,
                        b.tagScrollLeft = function(a) {
                            var b = $(c).find(a).scrollLeft();
                            0 != b && $(c).find(a).scrollLeft(b - 200)
                        }
                        ,
                        b.addMatchField = function(a, d, e, f) {
                            if (!c.find(".policy-rule-match").not(".readonly").has("#select-rule_" + d).length) {
                                if (angular.isArray(b.rule.match[f]))
                                    b.rule.match[f].reset();
                                else if (angular.isObject(b.rule.match[f]))
                                    for (var g in b.rule.match[f])
                                        b.rule.match[f][g] = null;
                                else
                                    "source" === f ? b.rule.match.sourcePort = null : "destination" === f ? b.rule.match.destinationPort = null : b.rule.match[f] = null;
                                b.rule.match.matchOrder.push(e),
                                D([e], "match", c, b, b.rule.match.matchOrder.length),
                                x(c, b)
                            }
                        }
                        ,
                        b.addActionField = function(a, d, e, f) {
                            if (!c.find(".policy-rule-action").not(".readonly").has("#select-rule_" + d).length) {
                                if (e.startsWith("set") || e.startsWith("nat")) {
                                    var g = "set";
                                    e.startsWith("nat") ? g = "nat" : 0;
                                    var h = o.SET_ACTION_KEYS[e];
                                    if (angular.isObject(b.rule.action[g][h]))
                                        for (var i in b.rule.action[g][h])
                                            angular.isArray(b.rule.action[g][h][i]) ? b.rule.action[g][h][i].reset() : b.rule.action[g][h][i] = null;
                                    else
                                        b.rule.action[g][h] = null
                                } else if (angular.isArray(b.rule.action[f]))
                                    b.rule.action[f].reset();
                                else if (angular.isObject(b.rule.action[f]))
                                    for (var j in b.rule.action[f])
                                        angular.isArray(b.rule.action[f][j]) ? b.rule.action[f][j].reset() : b.rule.action[f][j] = null;
                                else
                                    b.rule.action[f] = null;
                                b.rule.action.actionOrder.push(e),
                                D([e], "action", c, b, b.rule.action.actionOrder.length),
                                x(c, b)
                            }
                        }
                        ,
                        b.addAccept = function() {
                            c.find(".policy-rule-action").not(".readonly").has("#select-rule_accept").length || (b.rule.action.accept = !0,
                            b.rule.action.actionOrder.splice(0, 0, "accept"),
                            D(["accept"], "action", c, b, b.rule.action.actionOrder.length),
                            b.rule.action.hasOwnProperty("drop") && (b.rule.action.drop = !1,
                            b.removeActionElementById("drop", "select-rule_drop")),
                            b.rule.action.hasOwnProperty("reject") && (b.rule.action.reject = !1,
                            b.removeActionElementById("reject", "select-rule_reject")),
                            x(c, b))
                        }
                        ,
                        b.addDrop = function() {
                            c.find(".policy-rule-action").not(".readonly").has("#select-rule_drop").length || (b.rule.action.accept = !1,
                            b.rule.action.drop = !0,
                            b.rule.action.actionOrder.splice(0, 0, "drop"),
                            D(["drop"], "action", c, b, b.rule.action.actionOrder.length),
                            i())
                        }
                        ,
                        b.addReject = function() {
                            c.find(".policy-rule-action").not(".readonly").has("#select-rule_reject").length || (b.rule.action.accept = !1,
                            b.rule.action.reject = !0,
                            b.rule.action.actionOrder.splice(0, 0, "reject"),
                            D(["reject"], "action", c, b, b.rule.action.actionOrder.length),
                            i())
                        }
                        ,
                        b.collapse = function() {
                            c.find(".policy-rule-match.readonly").children("[collapsible]").hasClass("ng-hide") || c.find(".policy-rule-action.readonly").children("[collapsible]").hasClass("ng-hide") ? (c.find(".policy-rule-match.readonly").children("[collapsible]").removeClass("ng-hide"),
                            c.find(".policy-rule-action.readonly").children("[collapsible]").removeClass("ng-hide"),
                            c.find(".fa-chevron-down").addClass("fa-chevron-up"),
                            c.find(".fa-chevron-down").removeClass("fa-chevron-down"),
                            y(c, !1, b)) : (c.find(".policy-rule-match.readonly").children("[collapsible]").addClass("ng-hide"),
                            c.find(".policy-rule-action.readonly").children("[collapsible]").addClass("ng-hide"),
                            c.find(".fa-chevron-up").addClass("fa-chevron-down"),
                            c.find(".fa-chevron-up").removeClass("fa-chevron-up"),
                            y(c, !0, b))
                        }
                        ;
                        var h = function() {
                            c.find(".policy-rule-match.readonly").children("[collapsible]").addClass("ng-hide"),
                            c.find(".policy-rule-action.readonly").children("[collapsible]").addClass("ng-hide"),
                            c.find(".fa-chevron-up").addClass("fa-chevron-down"),
                            c.find(".fa-chevron-up").removeClass("fa-chevron-up"),
                            y(c, !0, b)
                        };
                        b.removeActionElementById = function(a, d) {
                            var e = b.rule.action.actionOrder.indexOf(a);
                            e > -1 && b.rule.action.actionOrder.splice(e, 1),
                            A(c, b, "#" + d),
                            c.find(".policy-rule-action").not(".readonly").find("#" + d).length && c.find(".policy-rule-action").not(".readonly").find("#" + d).remove(),
                            c.find(".policy-rule-action.readonly").find("#" + d).length && c.find(".policy-rule-action.readonly").find("#" + d).remove()
                        }
                        ,
                        b.removeElement = function(a, d, e) {
                            $(".policy-tag." + d).toggleClass("active");
                            var f = $(a.target).closest(".select-rule").attr("id");
                            if (A(c, b, $(a.target).closest(".select-rule")),
                            $(a.target).closest(".select-rule").remove(),
                            "accept" === e)
                                return void i();
                            var g = b.rule.match.matchOrder.indexOf(d);
                            if (g > -1) {
                                if (angular.isObject(b.rule.match[e]))
                                    for (var h in b.rule.match[e])
                                        b.rule.match[e][h] = null;
                                else
                                    "source" === d ? b.rule.match.sourcePort = null : "destination" === d ? b.rule.match.destinationPort = null : "tlocList" === d ? (b.rule.match[e] = null,
                                    b.rule.match.tloc.ip = null,
                                    b.rule.match.tloc.color = null,
                                    b.rule.match.tloc.encap = null) : b.rule.match[e] = null;
                                b.rule.match.matchOrder.splice(g, 1),
                                c.find(".policy-rule-match.readonly").find("#" + f).length ? c.find(".policy-rule-match.readonly").find("#" + f).remove() : c.find(".policy-rule-match.readonly").children("[collapsible]").find("#" + f).length && c.find(".policy-rule-match.readonly").children("[collapsible]").find("#" + f).remove()
                            }
                            if (g = b.rule.action.actionOrder.indexOf(d),
                            g > -1) {
                                if (d.startsWith("set") || d.startsWith("nat")) {
                                    var j = "set";
                                    d.startsWith("nat") ? j = "nat" : 0;
                                    var k = o.SET_ACTION_KEYS[d];
                                    if (angular.isObject(b.rule.action[j][k]))
                                        for (var h in b.rule.action[j][e])
                                            b.rule.action[j][e][h] = null;
                                    else
                                        b.rule.action[j][e] = null,
                                        "tlocList" === k && (b.rule.action[j].tloc.ip = null,
                                        b.rule.action[j].tloc.color = null,
                                        b.rule.action[j].tloc.encap = null)
                                } else if (angular.isObject(b.rule.action[e]))
                                    for (var h in b.rule.action[e])
                                        b.rule.action[e][h] = null;
                                else
                                    b.rule.action[e] = null;
                                b.rule.action.actionOrder.splice(g, 1),
                                c.find(".policy-rule-action.readonly").find("#" + f).length ? c.find(".policy-rule-action.readonly").find("#" + f).remove() : c.find(".policy-rule-action.readonly").children("[collapsible]").find("#" + f).length && c.find(".policy-rule-action.readonly").children("[collapsible]").find("#" + f).remove()
                            }
                            x(c, b)
                        }
                        ;
                        var i = function() {
                            b.removeActionElementById("accept", "select-rule_accept"),
                            angular.forEach(b.rule.action.actionOrder, function(a, c) {
                                if (a.startsWith("set") || a.startsWith("nat")) {
                                    var d = "set";
                                    a.startsWith("nat") ? d = "nat" : 0;
                                    var e = o.SET_ACTION_KEYS[a];
                                    if (angular.isObject(b.rule.action[d][e]))
                                        for (var f in b.rule.action[d][e])
                                            b.rule.action[d][e][f] = null;
                                    else
                                        b.rule.action[d][e] = null;
                                    b.rule.action.actionOrder[c] = null
                                }
                            }),
                            b.rule.action.actionOrder = _.values(_.chain(b.rule.action.actionOrder).uniq().omit(_.isUndefined).omit(_.isNull).value()),
                            j(),
                            x(c, b)
                        }
                          , j = function() {
                            angular.forEach(g, function(a) {
                                b.removeActionElementById(void 0, a)
                            })
                        }
                          , k = function() {
                            c.find(".policy-rule-match").not(".readonly").find(".select-rule").length && angular.forEach(c.find(".policy-rule-match").not(".readonly").find(".select-rule"), function(a) {
                                a.remove()
                            }),
                            c.find(".policy-rule-action").not(".readonly").find(".select-rule").length && angular.forEach(c.find(".policy-rule-action").not(".readonly").find(".select-rule"), function(a) {
                                a.remove()
                            })
                        }
                          , l = function() {
                            c.find(".policy-rule-match.readonly").find(".select-rule").length && angular.forEach(c.find(".policy-rule-match.readonly").find(".select-rule"), function(a) {
                                a.remove()
                            }),
                            c.find(".policy-rule-action.readonly").find(".select-rule").length && angular.forEach(c.find(".policy-rule-action.readonly").find(".select-rule"), function(a) {
                                a.remove()
                            })
                        }
                          , m = function() {
                            b.rule.match = angular.copy(b.rule.tempCopy.match),
                            b.rule.action = angular.copy(b.rule.tempCopy.action),
                            l(),
                            b.collapseDiv.show = !1,
                            E(b.rule.match.matchOrder, "match", c, b),
                            E(b.rule.action.actionOrder, "action", c, b),
                            h()
                        };
                        b.allowEdit = function() {
                            b.rule.tempCopy = {
                                match: angular.copy(b.rule.match),
                                action: angular.copy(b.rule.action)
                            },
                            b.rule.setReadOnly(!1),
                            b.rule.valid = !1,
                            k(),
                            D(b.rule.match.matchOrder, "match", c, b),
                            D(b.rule.action.actionOrder, "action", c, b),
                            x(c, b),
                            b.$emit("evaluate-rule", {
                                index: b.rule.orderNo,
                                event: {
                                    editable: !1
                                },
                                rule: b.rule
                            })
                        }
                        ,
                        b.saveRule = function() {
                            a.clear(),
                            b.policyRuleForm.$submitted = !0,
                            b.rule.valid = !0;
                            var d = [];
                            if (angular.forEach(b.policyRuleForm.$error.required, function(a, c) {
                                angular.isUndefined(b.policyRuleForm[a]) && d.push(c)
                            }),
                            e.removeFromArray(b.policyRuleForm.$error.required, d),
                            e.checkNestedProperty(b.policyRuleForm, "$error", "required") && 0 === b.policyRuleForm.$error.required.length && delete b.policyRuleForm.$error.required,
                            b.policyRuleForm.$invalid || _.intersection(["appList", "colorList", "dns", "dnsAppList", "plp", "origin", "carrier", "prefixList", "destinationDataPrefixList", "sourceDataPrefixList", "siteList", "tlocList", "vpnList"], b.rule.match.matchOrder).length > 0 || _.intersection(["backupSlaPreferredColor", "exportTo", "setLocalTLOCList", "setPolicer", "setService", "slaClass", "setTLOCAction", "setTLOCList"], b.rule.action.actionOrder).length > 0) {
                                var g = [];
                                for (var i in b.policyRuleForm.$error)
                                    "required" !== i && (g = g.concat(_.uniq(_.pluck(b.policyRuleForm.$error[i], "$name"))));
                                if (g.length > 0 && (a.error("The following fields are invalid: " + f(g) + "."),
                                b.rule.valid = !1),
                                g.reset(),
                                g = _.uniq(_.pluck(b.policyRuleForm.$error.required, "$name")),
                                g = g.concat(b.rule.validateSingleEntryOrListFields()),
                                g.length > 0 && (a.error("Please fill in the required fields: " + f(g) + "."),
                                b.rule.valid = !1),
                                !b.rule.valid)
                                    return !1
                            }
                            return b.rule.action.actionOrder.includes("setVPN") && !b.rule.action.actionOrder.includes("setTLOCList") ? (a.error("TLOC is mandatory when configuring VPN. Please populate Action > TLOC."),
                            b.rule.valid = !1,
                            !1) : b.rule.action.actionOrder.includes("setTLOCList") && b.rule.action.set.hasOwnProperty("vpn") && !b.rule.action.actionOrder.includes("setVPN") ? (a.error("VPN is mandatory when configuring TLOC. Please populate Action > VPN."),
                            b.rule.valid = !1,
                            !1) : (b.saveFn ? b.saveFn() : b.rule.readOnly = !0,
                            l(),
                            b.collapseDiv.show = !1,
                            E(b.rule.match.matchOrder, "match", c, b),
                            E(b.rule.action.actionOrder, "action", c, b),
                            h(),
                            b.rule.valid = !0,
                            void b.$emit("evaluate-rule", {
                                index: b.rule.orderNo,
                                event: {
                                    editable: !0
                                },
                                rule: b.rule
                            }))
                        }
                        ,
                        b.removeRule = function(a) {
                            c.parent().remove(),
                            b.removeFn({
                                index: a
                            })
                        }
                        ,
                        b.cancelEdit = function() {
                            b.cancelFn ? b.cancelFn() : (b.rule.readOnly = !0,
                            b.rule.valid = !0,
                            m()),
                            b.$emit("evaluate-rule", {
                                index: b.rule.orderNo,
                                event: {
                                    editable: !0
                                },
                                rule: b.rule
                            })
                        }
                    }
                }
            }
        }
    }
    angular.module("vManage").directive("policyRule", a),
    a.$inject = ["notification", "$compile", "$templateCache", "$timeout", "appUtil", "AppAppFamilyListManager", "ColorListManager", "DataPrefixListManager", "PolicerListManager", "TLOCListManager", "VPNListManager", "SLAClassListManager", "SiteListManager", "PrefixListManager", "policyConstants", "colors", "setServiceTypes", "policyRuleCarrier", "policyRuleOrigin", "PLP", "DNS", "tlocEncap", "tlocActions"]
}(),
function() {
    function a(a, b, c, d, e) {
        var f = this;
        a.searchQuery = "",
        f.$onInit = function() {
            var a = this;
            a.elem = b,
            angular.isUndefined(a.chipRemovable) ? a.isChipRemovable = !0 : angular.equals(a.chipRemovable, "false") ? a.isChipRemovable = !1 : a.isChipRemovable = !0,
            e.bind("click", function(d) {
                d.stopPropagation(),
                0 == $(d.target).closest(b).length || angular.isDefined(a.disabled) && a.disabled ? $(a.elem).find(".dropdown").removeClass("open") : $(a.elem).find(".dropdown").hasClass("open") ? a.elem.find(".dropdown").hasClass("open-remove") && c(function() {
                    $(a.elem).find(".dropdown").addClass("open")
                }) : $(a.elem).find(".dropdown").addClass("open")
            }),
            a.listItems = angular.copy(a.listItems),
            _.isEmpty(a.modelObj) ? a.listItems = _.map(a.listItems, function(a) {
                return a.selected = !1,
                a
            }) : angular.isDefined(a.matchProperty) && angular.forEach(a.modelObj, function(b) {
                var c = _.find(a.listItems, {
                    name: b[a.matchProperty]
                });
                c && (c.selected = !0)
            })
        }
        ,
        f.clickHandler = function(a) {
            var b = this;
            !b.isChipRemovable && a.selected || (a.selected = !a.selected,
            b.editChips(a))
        }
        ,
        f.newSearchTag = function(a) {
            return {
                name: a
            }
        }
        ,
        f.editChips = function(a) {
            var b = this;
            if (a.selected)
                b.modelObj.push(a);
            else {
                var c = _.findIndex(b.modelObj, {
                    name: a.name
                });
                c > -1 && b.modelObj.splice(c, 1),
                b.removeChips(a)
            }
            b.isInvalid = !b.modelObj.length
        }
        ,
        f.removeChips = function(a) {
            var b = this
              , c = _.find(b.listItems, {
                name: a.name
            });
            c && (c.selected = !1),
            b.modelObj.length || (b.isInvalid = !0),
            b.isInvalid = !b.modelObj.length
        }
        ,
        f.vsRepeatResize = function() {
            var b = this;
            a.searchQuery = "",
            b.disable || ($(b.elem).find(".dropdown").toggleClass("open"),
            c(function() {
                a.$broadcast("vsRepeatResize")
            }))
        }
        ,
        f.updateVsRepeaterSize = function() {
            function a() {
                $(b.elem).find(".col-dropdown-menu").scrollTop(0)
            }
            var b = this;
            d(a, 1e3, !1)
        }
    }
    angular.module("vManage").controller("ChipsDropDownController", a),
    a.$inject = ["$scope", "$element", "$timeout", "$debounce", "$document"],
    angular.module("vManage").component("chipsDropDown", {
        templateUrl: "app/configuration/policy/lists/components/templates/chipsDropDown.html",
        bindings: {
            listItems: "<",
            modelObj: "<",
            copyList: "@",
            matchProperty: "@",
            isInvalid: "<",
            placeHolder: "<",
            optional: "<",
            disabled: "=?",
            name: "<",
            chipRemovable: "@"
        },
        controller: a,
        controllerAs: "chipsDropDownCtrl"
    })
}(),
function() {
    angular.module("vManage").component("multiSelectCreateChipsDropDown", {
        templateUrl: "app/configuration/policy/lists/components/templates/multiSelectCreateChipsDropDown.html",
        bindings: {
            listItems: "<",
            modelObj: "<"
        },
        controller: "SelectCreateChipsDropDownController",
        controllerAs: "chipsDropDownCtrl"
    })
}(),
function() {
    function a(a, b, c, d, e, f) {
        var g = this;
        g.listToExpand = null,
        g.isSideNavOpen = !1,
        g.formatListEntries = function(a) {
            return a.entries = _.map(a.entries, function(b) {
                if (angular.isDefined(a.entryType))
                    b.name = b[a.entryType];
                else
                    for (var c in b)
                        angular.equals(c, "$$hashKey") || (b.name = b[c]);
                return b
            }),
            a
        }
        ,
        g.$onInit = function() {
            var d = e("ChipsDropDownController", {
                $scope: a,
                $element: b,
                $timeout: c
            });
            angular.extend(g, d),
            g.elem = b,
            g.modelObj && _.isEmpty(g.modelObj.name) && _.isEmpty(g.modelObj.listId) && (g.modelObj = {}),
            angular.forEach(g.listItems, function(a) {
                a = g.formatListEntries(a)
            }),
            g.listToExpand = _.isEmpty(g.listItems) ? null : g.listItems[0],
            angular.isUndefined(g.createOption) ? g.createOption = !0 : "false" === g.createOption && (g.createOption = !1),
            angular.isUndefined(g.chipRemovable) ? g.isChipRemovable = !0 : "false" === g.chipRemovable ? g.isChipRemovable = !1 : g.isChipRemovable = !0,
            g.chipsArray = [],
            angular.isDefined(g.modelObj) && !_.isEmpty(g.modelObj) && g.chipsArray.push(g.modelObj),
            g.editChips = function(a) {
                var b = this;
                b.modelObj = angular.copy(a),
                _.isEmpty(b.chipsArray) || (b.chipsArray = []),
                b.chipsArray.push(b.modelObj),
                c(function() {
                    b.closeListEntries(),
                    $(b.elem).click()
                })
            }
            ,
            g.removeChips = function(a) {
                var b = this;
                b.modelObj = {},
                b.chipsArray = []
            }
            ,
            f.bind("click", function(a) {
                a.stopPropagation(),
                0 == $(a.target).closest(b).length || angular.isDefined(g.disabled) && g.disabled ? ($(g.elem).find(".dropdown").removeClass("open"),
                g.closeListEntries()) : $(g.elem).find(".dropdown").hasClass("open") ? g.elem.find(".dropdown").hasClass("open-remove") && c(function() {
                    $(g.elem).find(".dropdown").addClass("open")
                }) : $(g.elem).find(".dropdown").addClass("open")
            })
        }
        ,
        g.createNewList = function(a) {
            d.show({
                templateUrl: g.listInstance.updateTemplateUrl,
                controller: g.listInstance.createController,
                controllerAs: g.listInstance.createController,
                targetEvent: a,
                resolve: {
                    PolicyListManager: g.listInstance.policyListManager
                }
            }).then(function(a) {
                a = g.formatListEntries(a),
                g.listItems.push(a)
            }, function() {})
        }
        ,
        g.showListEntries = function(a) {
            g.listToExpand = a,
            g.isSideNavOpen = !0
        }
        ,
        g.closeListEntries = function() {
            g.isSideNavOpen = !1,
            g.listToExpand = null
        }
    }
    angular.module("vManage").controller("SelectCreateChipsDropDownController", a),
    a.$inject = ["$scope", "$element", "$timeout", "$mdDialog", "$controller", "$document"],
    angular.module("vManage").component("selectCreateChipsDropDown", {
        templateUrl: "app/configuration/policy/lists/components/templates/selectCreateChipsDropDown.html",
        bindings: {
            listItems: "=",
            listInstance: "<",
            modelObj: "=",
            copyList: "@",
            chipRemovable: "@",
            heading: "@",
            createOption: "@?",
            disabled: "=?",
            placeHolder: "<"
        },
        controller: "SelectCreateChipsDropDownController",
        controllerAs: "chipsDropDownCtrl"
    })
}(),
function() {
    function a(a, b, c, d, e) {
        var f = this;
        f.$onInit = function() {
            var g = d("ChipsDropDownController", {
                $scope: a,
                $element: b,
                $timeout: c
            });
            angular.extend(f, g),
            f.elem = b,
            angular.isUndefined(f.chipRemovable) ? f.isChipRemovable = !0 : angular.equals(f.chipRemovable, "false") ? f.isChipRemovable = !1 : f.isChipRemovable = !0,
            f.chipsArray = [],
            angular.isDefined(f.modelObj) && !_.isEmpty(f.modelObj) && (angular.isDefined(f.modelObj.name) && _.isEmpty(f.modelObj.name) ? f.modelObj = null : f.chipsArray.push(f.modelObj)),
            f.editChips = function(a) {
                var b = this;
                b.modelObj = angular.copy(a),
                _.isEmpty(b.chipsArray) || (b.chipsArray = []),
                b.chipsArray.push(b.modelObj),
                b.isInvalid = !b.chipsArray.length,
                c(function() {
                    $(b.elem).click()
                })
            }
            ,
            f.removeChips = function(a) {
                var b = this;
                b.modelObj = {},
                b.chipsArray = [],
                b.isInvalid = !0
            }
            ,
            e.bind("click", function(a) {
                a.stopPropagation(),
                0 == $(a.target).closest(b).length || angular.isDefined(f.disabled) && f.disabled ? $(f.elem).find(".dropdown").removeClass("open") : $(f.elem).find(".dropdown").hasClass("open") ? f.elem.find(".dropdown").hasClass("open-remove") && c(function() {
                    $(f.elem).find(".dropdown").addClass("open")
                }) : $(f.elem).find(".dropdown").addClass("open")
            })
        }
    }
    angular.module("vManage").controller("SingleSelectChipsDropDownController", a),
    a.$inject = ["$scope", "$element", "$timeout", "$controller", "$document"],
    angular.module("vManage").component("singleSelectChipsDropDown", {
        templateUrl: "app/configuration/policy/lists/components/templates/singleSelectChipsDropDown.html",
        bindings: {
            listItems: "<",
            modelObj: "=",
            chipRemovable: "@",
            copyList: "@",
            disabled: "=?",
            placeHolder: "<",
            isInvalid: "<",
            name: "<",
            optional: "<"
        },
        controller: a,
        controllerAs: "chipsDropDownCtrl"
    })
}(),
function() {
    function a(a, b, c, d, e, f) {
        var g = this;
        angular.extend(g, a("PolicyListController", {
            $scope: b,
            PolicyListManager: c
        })),
        g.showErrorSection = !1,
        g.policyListManagerObj.getApplications(),
        g.policyListTable.setAppScope({
            allowWrite: function(a) {
                return a.entity.readOnly
            },
            editRow: function(a, b, f) {
                if (b.entity.readOnly) {
                    var h = {
                        error: {
                            message: "Default application list cannot be edited",
                            details: "Default application lists are created by the system. You cannot edit them. ",
                            type: "info"
                        }
                    };
                    e.confirm(h, !1, null, a)
                } else
                    d.show({
                        templateUrl: "app/configuration/policy/lists/modal/views/updateAppList.html",
                        controller: "UpdateAppListController",
                        controllerAs: "UpdatePolicyListController",
                        targetEvent: a,
                        resolve: {
                            PolicyListManager: function() {
                                return c
                            },
                            selectedRow: function() {
                                return b.entity
                            },
                            table: function() {
                                return g.policyListTable
                            },
                            returnCallBack: function() {
                                return g.refreshTable
                            }
                        }
                    })
            },
            copyRow: function(a, b, e) {
                d.show({
                    templateUrl: "app/configuration/policy/lists/modal/views/copyDefineList.html",
                    controller: "CopyDefineListController",
                    resolve: {
                        selectedRow: function() {
                            return b.entity
                        },
                        table: function() {
                            return g.policyListTable
                        },
                        PolicyListManager: function() {
                            return c
                        },
                        returnCallBack: function() {
                            return g.refreshTable
                        }
                    }
                })
            },
            removeRow: function(a, b, c) {
                if (b.entity.readOnly) {
                    var f = {
                        error: {
                            message: "Default application list cannot be deleted",
                            details: "Default application lists are created by the system. You cannot delete them. ",
                            type: "info"
                        }
                    };
                    e.confirm(f, !1, null, a)
                } else {
                    var h = d.confirm().title("Are you sure you want to delete?").textContent("This policy list will be deleted. You cannot undo this action.").ariaLabel("Delete List").targetEvent(a).ok("OK").cancel("Cancel");
                    d.show(h).then(function() {
                        var a = g.policyListManagerObj.createPolicyListInst(b.entity);
                        a.remove().then(function(b) {
                            g.refreshTable(),
                            a = null
                        }, function(a) {})
                    }, function() {})
                }
            }
        }),
        g.showForm = function() {
            g.showComponent.formCollapse = !g.showComponent.formCollapse,
            g.policyListManagerObj.getLocalPolicyListInst(),
            g.resizeTableHeight(),
            g.showComponent.formCollapse || h()
        }
        ,
        g.changeEntryType = function(a) {
            g.policyListManagerObj.localPolicyListInst.entries.reset(),
            angular.equals(a, "applications") ? g.policyListManagerObj.clearApplicationSelection("applicationFamily") : g.policyListManagerObj.clearApplicationSelection("applications")
        }
        ,
        g.save = function() {
            b.list_form.$submitted = !0,
            _.isEmpty(g.policyListManagerObj.localPolicyListInst.name) || _.isEmpty(g.policyListManagerObj.localPolicyListInst.entries) ? (g.showErrorSection = !0,
            g.errorMessage = f.createErrorObject("Please fill the required fields", "All the required fields are needed to save the list")) : (g.policyListManagerObj.localPolicyListInst.save(),
            g.showComponent.formCollapse = !g.showComponent.formCollapse,
            g.policyListManagerObj.localPolicyListInst = void 0,
            g.refreshTable(),
            g.resizeTableHeight())
        }
        ;
        var h = function() {
            g.policyListManagerObj.clearApplicationSelection("applications"),
            g.policyListManagerObj.clearApplicationSelection("applicationFamily")
        };
        g.$onDestroy = function() {
            g.policyListManagerObj = null,
            h()
        }
    }
    angular.module("vManage").controller("ApplicationListController", a),
    a.$inject = ["$controller", "$scope", "PolicyListManager", "$mdDialog", "notification", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        var i = this;
        i.showComponent = {
            formCollapse: !0
        },
        i.policyListManagerObj = d.getInstance(),
        i.showErrorSection = !1,
        i.policyListTable = new b({
            toolbar: !1,
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !0,
            enableSorting: !0,
            tableHeightOffset: 275,
            dataUid: "listId",
            toggleFirstRowOnLoad: !0
        }),
        i.policyListTable.setAppScope({
            editRow: function(a, b, c) {
                e.show({
                    templateUrl: i.policyListManagerObj.updateTemplateUrl,
                    controller: "UpdatePolicyListController",
                    controllerAs: "UpdatePolicyListController",
                    targetEvent: a,
                    resolve: {
                        PolicyListManager: function() {
                            return d
                        },
                        selectedRow: function() {
                            return b.entity
                        },
                        table: function() {
                            return i.policyListTable
                        },
                        returnCallBack: function() {
                            return i.refreshTable
                        }
                    }
                })
            },
            copyRow: function(a, b, c) {
                e.show({
                    templateUrl: "app/configuration/policy/lists/modal/views/copyDefineList.html",
                    controller: "CopyDefineListController",
                    resolve: {
                        selectedRow: function() {
                            return b.entity
                        },
                        table: function() {
                            return i.policyListTable
                        },
                        PolicyListManager: function() {
                            return d
                        },
                        returnCallBack: function() {
                            return i.refreshTable
                        }
                    }
                })
            },
            removeRow: function(a, b, c) {
                var d = e.confirm().title("Are you sure you want to delete?").textContent("This policy list will be deleted. You cannot undo this action.").ariaLabel("Delete List").targetEvent(a).ok("OK").cancel("Cancel");
                e.show(d).then(function() {
                    var a = i.policyListManagerObj.createPolicyListInst(b.entity);
                    a.remove().then(function(b) {
                        i.refreshTable(),
                        a = null
                    }, function(a) {})
                }, function() {})
            },
            viewList: function(a, b) {
                var c = e.show({
                    templateUrl: "app/configuration/policy/lists/modal/views/viewListModal.html",
                    controller: "ViewListModalController",
                    targetEvent: b,
                    resolve: {
                        title: function() {
                            return a.entity.name
                        },
                        list: function() {
                            return a.entity.entriesString
                        }
                    }
                });
                c.then(function(a) {}, function() {
                    f.info("Modal dismissed at: " + new Date)
                })
            }
        }),
        i.showForm = function() {
            i.showComponent.formCollapse = !i.showComponent.formCollapse,
            i.policyListManagerObj.getLocalPolicyListInst(),
            i.resizeTableHeight()
        }
        ,
        i.refreshTable = function() {
            c(function() {
                i.policyListManagerObj.list().then(function(a) {
                    i.policyListTable.refreshTableData(a)
                }, function(a) {})
            }, 500)
        }
        ,
        i.vsRepeatResize = function() {
            c(function() {
                a.$broadcast("vsRepeatResize")
            })
        }
        ,
        i.cancel = function() {
            i.showComponent.formCollapse = !i.showComponent.formCollapse,
            i.policyListManagerObj.localPolicyListInst = void 0,
            i.resizeTableHeight()
        }
        ,
        i.save = function() {
            i.validateForm(i.policyListManagerObj.type) ? i.policyListManagerObj.localPolicyListInst.save().then(function(a) {
                i.showComponent.formCollapse = !i.showComponent.formCollapse,
                i.policyListManagerObj.localPolicyListInst = void 0,
                i.refreshTable(),
                i.resizeTableHeight()
            }, function(a) {}) : (i.showErrorSection = !0,
            i.errorMessage = g.createErrorObject("Please fill the required fields", i.getErrorMsg(i.policyListManagerObj.type)))
        }
        ,
        i.validateForm = function(a) {
            return "sla" == a ? i.slaClassListForm.$valid && (!_.isEmpty(i.policyListManagerObj.localPolicyListInst.entries[0].loss) || !_.isEmpty(i.policyListManagerObj.localPolicyListInst.entries[0].latency) || !_.isEmpty(i.policyListManagerObj.localPolicyListInst.entries[0].jitter)) : !_.isEmpty(i.policyListManagerObj.localPolicyListInst.entries) && !_.isEmpty(i.policyListManagerObj.localPolicyListInst.name)
        }
        ,
        i.getErrorMsg = function(a) {
            return "sla" == a ? "At least one entry(Loss or Latency or Jitter) is needed to save the list" : "All the required fields are needed to save the list"
        }
        ,
        i.resizeTableHeight = function() {
            i.showComponent.formCollapse ? i.policyListTable.options.tableHeightOffset = 125 : i.policyListTable.options.tableHeightOffset = 327
        }
        ,
        i.readPrefixes = function(a) {
            i.policyListManagerObj.localPolicyListInst.entries = a
        }
        ,
        i.getTableData = function() {
            i.policyListManagerObj.list().then(function(a) {
                var b = angular.copy(i.policyListManagerObj.getColumnDefs());
                h.allowAccess("Policy Configuration") || b.splice(-1, 1),
                i.policyListTable.createColumns(b),
                i.policyListTable.setTableData(a)
            }, function(a) {})
        }
        ,
        i.getTableData(),
        i.$onDestroy = function() {
            i.policyListManagerObj = null,
            i.policyListTable.resetCustomColumns()
        }
    }
    angular.module("vManage").controller("PolicyListController", a),
    a.$inject = ["$scope", "Table", "$timeout", "PolicyListManager", "$mdDialog", "$log", "appUtil", "rbac"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        var g = this;
        g.showComponent = {
            formCollapse: !0
        },
        g.policyListManagerObj = d.getInstance(),
        g.policyListTable = new b({
            toolbar: !1,
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !0,
            enableSorting: !0,
            tableHeightOffset: 125,
            tableName: "tloc-list",
            selectAll: !1,
            isRowSelectable: !1
        }),
        g.policyListTable.setAppScope({
            isParentRow: function(a) {
                return !angular.isDefined(a.treeNode) || _.isEmpty(a.treeNode.parentRow)
            },
            editRow: function(a, b, c) {
                e.show({
                    templateUrl: "app/configuration/policy/lists/modal/views/updateTlocList.html",
                    controller: "UpdateTlocListController",
                    controllerAs: "UpdatePolicyListController",
                    targetEvent: a,
                    resolve: {
                        PolicyListManager: function() {
                            return d
                        },
                        selectedRow: function() {
                            return b.entity
                        },
                        table: function() {
                            return g.policyListTable
                        },
                        returnCallBack: function() {
                            return g.refreshTableData
                        }
                    }
                })
            },
            copyRow: function(a, b, c) {
                e.show({
                    templateUrl: "app/configuration/policy/lists/modal/views/copyDefineList.html",
                    controller: "CopyDefineListController",
                    resolve: {
                        selectedRow: function() {
                            return b.entity
                        },
                        table: function() {
                            return g.policyListTable
                        },
                        PolicyListManager: function() {
                            return d
                        },
                        returnCallBack: function() {
                            return g.refreshTableData
                        }
                    }
                })
            },
            removeRow: function(a, b, c) {
                var d = e.confirm().title("Are you sure you want to delete?").textContent("This policy list will be deleted. You cannot undo this action.").ariaLabel("Delete List").targetEvent(a).ok("OK").cancel("Cancel");
                e.show(d).then(function() {
                    var a = g.policyListManagerObj.createPolicyListInst(b.entity);
                    a.remove().then(function(b) {
                        g.refreshTableData(),
                        a = null
                    }, function(a) {})
                }, function() {})
            }
        }),
        g.vsRepeatResize = function() {
            c(function() {
                a.$broadcast("vsRepeatResize")
            })
        }
        ,
        g.cancel = function() {
            g.showComponent.formCollapse = !g.showComponent.formCollapse,
            g.policyListManagerObj.localPolicyListInst = void 0,
            g.resizeTableHeight()
        }
        ,
        g.save = function() {
            g.policyListManagerObj.localPolicyListInst.save().then(function(a) {
                g.showComponent.formCollapse = !g.showComponent.formCollapse,
                g.policyListManagerObj.localPolicyListInst = void 0,
                g.refreshTableData(),
                g.resizeTableHeight()
            }, function(a) {})
        }
        ,
        g.resizeTableHeight = function() {
            g.showComponent.formCollapse ? g.policyListTable.options.tableHeightOffset = 125 : g.policyListTable.options.tableHeightOffset = 327
        }
        ,
        g.refreshTableData = function() {
            g.policyListManagerObj.list().then(function(a) {
                g.policyListTable.refreshTableData(g.policyListManagerObj.listItems),
                c(function() {
                    g.policyListTable.uiGridApi.treeBase.expandAllRows()
                })
            }, function(a) {})
        }
        ,
        g.getTableData = function() {
            g.policyListManagerObj.list().then(function(a) {
                var b = g.policyListManagerObj.getColumnDefs();
                f.allowAccess("Policy Configuration") || b.splice(-1, 1),
                g.policyListTable.createColumns(b),
                g.policyListTable.setTreeLevelGroupings([{
                    treeLevel: 0,
                    groupByProperty: "name",
                    newRowProperty: "tloc",
                    copyToParent: ["listId", "description", "owner", "referenceCount", "type", "lastUpdated"]
                }]),
                g.policyListTable.setTableData(g.policyListManagerObj.listItems),
                c(function() {
                    g.policyListTable.uiGridApi.treeBase.expandAllRows()
                })
            }, function(a) {})
        }
        ,
        g.getTableData(),
        g.openAddListModal = function(a) {
            e.show({
                templateUrl: "app/configuration/policy/lists/modal/views/updateTlocList.html",
                controller: "CreateTlocListController",
                targetEvent: a,
                resolve: {
                    PolicyListManager: function() {
                        return d
                    }
                }
            }).then(function(a) {
                g.policyListManagerObj.localPolicyListInst = void 0,
                g.refreshTableData(),
                g.resizeTableHeight()
            }, function(a) {})
        }
        ,
        g.$onDestroy = function() {
            g.policyListManagerObj = null
        }
    }
    angular.module("vManage").controller("TlocListController", a),
    a.$inject = ["$scope", "TreeBasedTable", "$timeout", "PolicyListManager", "$mdDialog", "rbac"]
}(),
angular.module("vManage").controller("CopyDefineListController", CopyDefineListController),
CopyDefineListController.$inject = ["$scope", "$mdDialog", "selectedRow", "table", "PolicyListManager", "appUtil", "$timeout", "returnCallBack"],
function() {
    function a(a, b, c, d) {
        var e = a;
        e.getApplications = {
            inProgress: !0
        },
        e.policyListManagerObj = c.getInstance(),
        e.policyListManagerObj.getApplications().then(function(a) {
            e.policyListManagerObj.serverCallInProgress || (e.getApplications.inProgress = !1,
            e.applicationFamily = angular.copy(e.policyListManagerObj.applicationFamily),
            e.applications = angular.copy(e.policyListManagerObj.applications))
        }, function(a) {}),
        e.appListObj = e.policyListManagerObj.createPolicyListInst({}),
        e.changeEntryType = function(a) {
            e.appListObj.entries.reset(),
            angular.equals(a, "applications") ? e.policyListManagerObj.clearApplicationSelection("applicationFamily") : e.policyListManagerObj.clearApplicationSelection("applications")
        }
        ,
        e.update = function() {
            _.isEmpty(e.appListObj.name) || _.isEmpty(e.appListObj.entries) || e.appListObj.save().then(function(a) {
                b.hide(a)
            }, function(a) {})
        }
        ,
        e.cancel = function() {
            b.cancel("cancel")
        }
    }
    angular.module("vManage").controller("CreateAppListController", a),
    a.$inject = ["$scope", "$mdDialog", "AppAppFamilyListManager", "$timeout"]
}(),
function() {
    function a(a, b, c, d) {
        var e = a;
        e.policylistManagerObj = c.getInstance(),
        e.appListObj = e.policylistManagerObj.createPolicyListInst({}),
        angular.equals(e.appListObj.entryType, "color") && (e.colors = angular.copy(e.policylistManagerObj.colors)),
        e.readPrefixes = function(a) {
            e.appListObj.entries = a
        }
        ,
        e.update = function() {
            _.isEmpty(e.appListObj.entries) || _.isEmpty(e.appListObj.name) || e.appListObj.save().then(function(a) {
                b.hide(a)
            }, function(a) {})
        }
        ,
        e.cancel = function() {
            b.cancel("cancel")
        }
    }
    angular.module("vManage").controller("CreatePolicyListController", a),
    a.$inject = ["$scope", "$mdDialog", "PolicyListManager", "$timeout"]
}(),
function() {
    function a(a, b, c, d) {
        var e = a;
        if (e.policyListManagerObj = c.getInstance(),
        e.title = e.policyListManagerObj.title,
        e.configureError = !1,
        e.appListObj = e.policyListManagerObj.createPolicyListInst({}),
        _.isEmpty(e.appListObj.entries)) {
            var f = {
                tloc: null,
                color: null
            };
            e.appListObj.entries.push(f)
        }
        e.addTloc = function() {
            var a = {
                tloc: null,
                color: null
            };
            e.appListObj.entries.push(a)
        }
        ,
        e.removeTloc = function(a) {
            _.isEmpty(e.appListObj.entries) || e.appListObj.entries.splice(a, 1)
        }
        ,
        e.save = function() {
            if (e.configureError = !1,
            e.create_tloc_list_form.$submitted = !0,
            _.isEmpty(e.appListObj.entries) || _.isEmpty(e.appListObj.name))
                e.configureError = !0,
                e.configureMessage = {
                    error: {
                        message: "Please fill all the required fields.",
                        details: "All required fields are needed to save/update the tloc list"
                    }
                };
            else {
                var a = !0;
                angular.forEach(e.appListObj.entries, function(b) {
                    _.isEmpty(b.tloc) || _.isEmpty(b.color) ? a = !1 : ""
                }),
                a ? e.appListObj.save().then(function(a) {
                    b.hide(a)
                }, function(a) {}) : (e.configureError = !0,
                e.configureMessage = {
                    error: {
                        message: "Please fill all the required fields.",
                        details: "All required fields are needed to save/update the tloc list"
                    }
                })
            }
        }
        ,
        e.cancel = function() {
            b.cancel("cancel")
        }
    }
    angular.module("vManage").controller("CreateTlocListController", a),
    a.$inject = ["$scope", "$mdDialog", "TLOCListManager", "$timeout"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        function k(a) {
            l.appListObj.hideSpinner(),
            angular.isObject(a) && h.checkNestedProperty(a, "error", "details") ? g.error(a.error.message + ": " + a.error.details) : g.error("Error occurred while retrieving policy list.")
        }
        var l = a;
        l.getApplications = {
            inProgress: !1
        },
        l.policyListManagerObj = e.getInstance(),
        l.policyListManagerObj.getApplications(),
        l.configureError = !1,
        l.appListObj = l.policyListManagerObj.createPolicyListInst(c),
        l.appListObj.get().then(function() {
            l.applicationFamily = angular.copy(l.policyListManagerObj.applicationFamily),
            l.applications = angular.copy(l.policyListManagerObj.applications),
            angular.equals(l.appListObj.entryType, "appFamily") ? l.appListObj.entries = _.map(l.appListObj.entries, function(a) {
                var b = _.find(this.applicationFamily, {
                    value: a.appFamily
                });
                if (b)
                    return b.selected = !0,
                    b
            }, l) : l.appListObj.entries = _.map(l.appListObj.entries, function(a) {
                var b = _.find(this.applications, {
                    value: a.app
                });
                if (b)
                    return b.selected = !0,
                    b
            }, l)
        }, function(a) {
            k(a)
        }),
        l.changeEntryType = function(a) {
            l.appListObj.entries.reset(),
            angular.equals(a, "applications") ? l.policyListManagerObj.clearApplicationSelection("applicationFamily") : l.policyListManagerObj.clearApplicationSelection("applications")
        }
        ,
        l.update = function() {
            _.isEmpty(l.appListObj.name) || _.isEmpty(l.appListObj.entries) ? (l.configureError = !0,
            l.configureMessage = {
                error: {
                    message: "Please fill all the required fields.",
                    details: "All required fields are needed to save/update the tloc list"
                }
            }) : l.appListObj.activatedId ? b.show({
                templateUrl: "app/configuration/policy/modal/activateCentralizedPolicy.html",
                controller: "ActivateCentralizedPolicyModalCtrl",
                targetEvent: event,
                resolve: {
                    policy: function() {
                        return l.appListObj
                    }
                }
            }).then(function(a) {
                i.go("app.device.status", {
                    activity: j.getStatusAction("VSMART_POLICY_CONFIG").endpoint,
                    pid: a ? a.id : ""
                })
            }) : l.appListObj.update().then(function(a) {
                f(function() {
                    angular.isDefined(d) && d(),
                    b.hide()
                })
            }, function(a) {
                k(a)
            })
        }
        ,
        l.cancel = function() {
            b.cancel("cancel")
        }
    }
    angular.module("vManage").controller("UpdateAppListController", a),
    a.$inject = ["$scope", "$mdDialog", "selectedRow", "returnCallBack", "AppAppFamilyListManager", "$timeout", "notification", "appUtil", "$state", "StatusService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        function k(a) {
            l.appListObj.hideSpinner(),
            angular.isObject(a) && j.checkNestedProperty(a, "error", "details") && i.error(a.error.message + ": " + a.error.details)
        }
        var l = a;
        l.policylistManagerObj = e.getInstance(),
        l.configureError = !1,
        l.appListObj = l.policylistManagerObj.createPolicyListInst(c),
        l.appListObj.get().then(function(a) {
            angular.equals(l.appListObj.entryType, "color") && (l.colors = angular.copy(l.policylistManagerObj.colors),
            l.appListObj.entries = _.map(l.appListObj.entries, function(a) {
                var b = _.find(l.colors, {
                    name: a.color
                });
                if (b)
                    return b.selected = !0,
                    b
            }, l))
        }, function(a) {}),
        l.readPrefixes = function(a) {
            l.appListObj.entries = a
        }
        ,
        l.update = function() {
            !l.validateForm(l.policylistManagerObj.type) || _.isEmpty(l.appListObj.name) || _.isEmpty(l.appListObj.entries) ? (l.configureError = !0,
            l.configureMessage = {
                error: {
                    message: "Please fill all the required fields.",
                    details: l.getErrorMsg(l.policylistManagerObj.type)
                }
            }) : l.appListObj.activatedId ? b.show({
                templateUrl: "app/configuration/policy/modal/activateCentralizedPolicy.html",
                controller: "ActivateCentralizedPolicyModalCtrl",
                targetEvent: event,
                resolve: {
                    policy: function() {
                        return l.appListObj
                    }
                }
            }).then(function(a) {
                g.go("app.device.status", {
                    activity: h.getStatusAction("VSMART_POLICY_CONFIG").endpoint,
                    pid: a ? a.id : ""
                })
            }) : l.appListObj.update().then(function(a) {
                f(function() {
                    angular.isDefined(d) && d(),
                    b.hide()
                })
            }, function(a) {
                k(a)
            })
        }
        ,
        l.cancel = function() {
            b.cancel("cancel")
        }
        ,
        l.validateForm = function(a) {
            return "sla" == a ? l.list_update_form.$valid && (!_.isEmpty(l.appListObj.entries[0].loss) || !_.isEmpty(l.appListObj.entries[0].latency) || !_.isEmpty(l.appListObj.entries[0].jitter)) : l.list_update_form.$valid
        }
        ,
        l.getErrorMsg = function(a) {
            return "sla" == a ? "At least one entry(Loss or Latency or Jitter) is needed to save the list" : "All the required fields are needed to save the list"
        }
    }
    angular.module("vManage").controller("UpdatePolicyListController", a),
    a.$inject = ["$scope", "$mdDialog", "selectedRow", "returnCallBack", "PolicyListManager", "$timeout", "$state", "StatusService", "notification", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        function k(a) {
            l.appListObj.hideSpinner(),
            angular.isObject(a) && g.checkNestedProperty(a, "error", "details") ? f.error(a.error.message + ": " + a.error.details) : f.error("Error occurred while retrieving policy list.")
        }
        var l = a;
        l.policyListManagerObj = d.getInstance(),
        l.title = l.policyListManagerObj.title,
        l.appListObj = l.policyListManagerObj.createPolicyListInst(c),
        l.configureError = !1,
        l.appListObj.get().then(function(a) {}, function(a) {
            l.appListObj.hideSpinner(),
            angular.isObject(a) && g.checkNestedProperty(a, "error", "details") ? f.error(a.error.message + ": " + a.error.details) : f.error("Error occurred while retrieving policy list.")
        }),
        l.addTloc = function() {
            var a = {
                tloc: null,
                color: null
            };
            l.appListObj.entries.push(a)
        }
        ,
        l.removeTloc = function(a) {
            _.isEmpty(l.appListObj.entries) || l.appListObj.entries.splice(a, 1)
        }
        ,
        l.save = function() {
            if (l.configureError = !1,
            l.create_tloc_list_form.$submitted = !0,
            _.isEmpty(l.appListObj.entries) || _.isEmpty(l.appListObj.name))
                l.configureError = !0,
                l.configureMessage = {
                    error: {
                        message: "Please fill all the required fields.",
                        details: "All required fields are needed to save/update the tloc list"
                    }
                };
            else {
                var a = !0;
                angular.forEach(l.appListObj.entries, function(b) {
                    _.isEmpty(b.tloc) || _.isEmpty(b.color) ? a = !1 : ""
                }),
                a ? l.appListObj.activatedId ? b.show({
                    templateUrl: "app/configuration/policy/modal/activateCentralizedPolicy.html",
                    controller: "ActivateCentralizedPolicyModalCtrl",
                    targetEvent: event,
                    resolve: {
                        policy: function() {
                            return l.appListObj
                        }
                    }
                }).then(function(a) {
                    i.go("app.device.status", {
                        activity: j.getStatusAction("VSMART_POLICY_CONFIG").endpoint,
                        pid: a ? a.id : ""
                    })
                }) : l.appListObj.update().then(function(a) {
                    e(function() {
                        angular.isDefined(h) && h(),
                        b.hide()
                    })
                }, function(a) {
                    k(a)
                }) : (l.configureError = !0,
                l.configureMessage = {
                    error: {
                        message: "Please fill all the required fields.",
                        details: "All required fields are needed to save/update the tloc list"
                    }
                })
            }
        }
        ,
        l.cancel = function() {
            b.cancel("cancel")
        }
    }
    angular.module("vManage").controller("UpdateTlocListController", a),
    a.$inject = ["$scope", "$mdDialog", "selectedRow", "PolicyListManager", "$timeout", "notification", "appUtil", "returnCallBack", "$state", "StatusService"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        a.stateString = c.getStateString(d),
        a.listName = e,
        a.listEntries = f.split(", "),
        a.cancel = function() {
            b.cancel("cancel")
        }
    }
    angular.module("vManage").controller("ViewListModalController", a),
    a.$inject = ["$scope", "$mdDialog", "appUtil", "$state", "title", "list"]
}(),
function() {
    function a(a, b, c, d) {
        var e = function(b, c, d, e, f) {
            a.apply(this, [b, c ? c : "app", d, e, f]),
            this.createPayload = function() {
                return {
                    name: this.name,
                    description: this.description,
                    type: this.type,
                    entries: _.values(_.chain(this.entries).map(function(a) {
                        if (a.selected) {
                            var b = {};
                            return b[this.entryType] = a.value,
                            b
                        }
                    }, this).omit(_.isUndefined).omit(_.isNull).value())
                }
            }
        };
        return e.prototype = new a,
        e.prototype.get = function(a) {
            var e = this
              , f = d.defer();
            return a && (e.listId = a),
            e.serverCallInProgress = !0,
            b.get(e.resourceUrl, e.listId).then(function(a) {
                e.serverCallInProgress = !1,
                angular.extend(e, a),
                c.checkNestedProperty(a, "entries", "0") && (angular.isDefined(a.entries[0].appFamily) ? e.entryType = "appFamily" : e.entryType = "app"),
                f.resolve(e.entries)
            }, function(a) {
                e.serverCallInProgress = !1,
                f.reject(a)
            }),
            f.promise
        }
        ,
        e
    }
    angular.module("vManage").factory("ApplicationList", a),
    a.$inject = ["PolicyList", "policyService", "appUtil", "$q"]
}(),
function() {
    function a(a) {
        var b = function(b, c, d, e) {
            a.apply(this, [b, c ? c : "color", d, e]),
            this.createPayload = function() {
                return {
                    name: this.name,
                    description: this.description,
                    type: this.type,
                    entries: _.map(this.entries, function(a) {
                        var b = {};
                        return b[this.entryType] = a.value,
                        b
                    }, this)
                }
            }
        };
        return b.prototype = new a,
        b
    }
    angular.module("vManage").factory("ColorList", a),
    a.$inject = ["PolicyList"]
}(),
function() {
    function a(a) {
        var b = function(b, c, d, e) {
            a.apply(this, [b, c ? c : "policer", d, e]),
            angular.isObject(this.entries[0]) || (this.entries[0] = {
                burst: null,
                exceed: null,
                rate: null
            }),
            this.createPayload = function() {
                return {
                    name: this.name,
                    description: this.description,
                    type: this.type,
                    entries: this.entries
                }
            }
        };
        return b.prototype = new a,
        b
    }
    angular.module("vManage").factory("PolicerList", a),
    a.$inject = ["PolicyList"]
}(),
function() {
    function a(a, b, c, d, e) {
        var f = function(a, b, c, d, e) {
            this.name = a,
            this.type = b,
            this.entryType = e || this.type,
            this.description = "Desc Not Required",
            this.listId = c,
            this.entries = d || [],
            this.resourceUrl = "/dataservice/template/policy/list/" + this.type,
            this.serverCallInProgress = !1,
            this.createPayload = function(a) {
                return {
                    name: this.name,
                    description: this.description,
                    type: this.type,
                    listId: this.listId,
                    entries: _.map(this.entries.split(","), function(a) {
                        var b = {};
                        return b[this.entryType] = a,
                        b
                    }, this)
                }
            }
        };
        return f.prototype.showSpinner = function() {
            var a = this;
            a.serverCallInProgress = !0
        }
        ,
        f.prototype.hideSpinner = function() {
            var a = this;
            a.serverCallInProgress = !1
        }
        ,
        f.prototype.get = function(f) {
            var g = this
              , h = e.defer();
            return f && (g.listId = f),
            g.serverCallInProgress = !0,
            a.get(g.resourceUrl, g.listId).then(function(c) {
                g.serverCallInProgress = !1,
                angular.extend(g, c),
                "prefix" === g.entryType ? g.entries = a.formatPrefixEntries(g.entries) : "color" !== g.entryType && "policer" !== g.entryType && "sla" !== g.entryType && (g.entries = b.convertArrayToString(_.pluck(g.entries, g.entryType))),
                h.resolve(c)
            }, function(a) {
                g.serverCallInProgress = !1,
                angular.isObject(a) && b.checkNestedProperty(a, "error", "details") ? (d.error("Error occurred while retrieving policy list: " + a.error.message + ":" + a.error.details),
                c.error(a.error.message + ": " + a.error.details)) : (d.info("API error response needs to be updated to conform to company guidelines" + g.dataUrl),
                c.error("Error occurred while retrieving policy list.")),
                h.reject(a)
            }),
            h.promise
        }
        ,
        f.prototype.save = function() {
            var b = this
              , f = e.defer();
            if (b.serverCallInProgress = !0,
            b.listId)
                return b.update();
            var g = b.createPayload();
            return angular.isDefined(g.error) ? (d.error("Error occured in validation - " + g.message),
            c.error(g.message),
            f.reject(g.message)) : a.create(b.resourceUrl, g).then(function(a) {
                b.serverCallInProgress = !1,
                angular.extend(b, g),
                b.listId = a.listId,
                g.listId = a.listId,
                g.entryType = b.entryType,
                f.resolve(g)
            }, function(a) {
                b.serverCallInProgress = !1,
                d.error("Error occurred while saving policy list: " + a.error.message + ":" + a.error.details),
                c.error(a.error.message + ": " + a.error.details),
                f.reject(a)
            }),
            f.promise
        }
        ,
        f.prototype.update = function() {
            var b = this
              , f = e.defer();
            b.serverCallInProgress = !0;
            var g = b.createPayload();
            return angular.isDefined(g.error) ? (d.error("Error occured in validation - " + g.message),
            c.error(g.message),
            f.reject(g.message)) : a.update(b.resourceUrl, b.listId, g).then(function(a) {
                b.serverCallInProgress = !1,
                angular.extend(b, g),
                f.resolve(a)
            }, function(a) {
                b.serverCallInProgress = !1,
                d.error("Error occurred while updating policy list: " + a.error.message + ":" + a.error.details),
                c.error(a.error.message + ": " + a.error.details),
                f.reject(a)
            }),
            f.promise
        }
        ,
        f.prototype.remove = function() {
            var b = this
              , f = e.defer();
            return b.serverCallInProgress = !0,
            a.delete(b.resourceUrl, b.listId).then(function(a) {
                b.serverCallInProgress = !1,
                f.resolve(a)
            }, function(a) {
                b.serverCallInProgress = !1,
                d.error("Error occurred while deleting policy list: " + a.error.message + ":" + a.error.details),
                c.error(a.error.message + ": " + a.error.details),
                f.reject(a)
            }),
            f.promise
        }
        ,
        f
    }
    angular.module("vManage").factory("PolicyList", a),
    a.$inject = ["policyService", "appUtil", "notification", "$log", "$q"]
}(),
function() {
    function a(a, b) {
        var c = function(c, d, e, f) {
            a.apply(this, [c, d ? d : "prefix", e, f]),
            this.createPayload = function() {
                var a = !1
                  , c = {
                    error: !0,
                    message: ""
                };
                if (angular.isDefined(this.entries) && "" !== this.entries) {
                    var d = angular.copy(this.entries)
                      , e = d.trim().split(",");
                    if (_.isArray(e) && e.length > 0) {
                        var f = [];
                        angular.forEach(e, function(d) {
                            if (d = d.trim(),
                            !_.isEmpty(d)) {
                                var e = d.split(" ");
                                if (_.isArray(e) && e.length > 0 && e.length < 6) {
                                    var g = {};
                                    if (!b.validateIpv4Prefix(e[0]))
                                        return c.message = "Incorrect prefix: " + e[0],
                                        a = !0,
                                        c;
                                    if (g.ipPrefix = e[0],
                                    angular.isDefined(e[1]) && angular.isDefined(e[2])) {
                                        if (!angular.equals(e[1].toLowerCase(), "le") && !angular.equals(e[1].toLowerCase(), "ge"))
                                            return c.message = "Incorrect entry: " + d,
                                            a = !0,
                                            c;
                                        g[e[1]] = e[2]
                                    }
                                    if (e.length > 3 && e.length < 6 && angular.isDefined(e[3]) && angular.isDefined(e[4])) {
                                        if (!angular.equals(e[3].toLowerCase(), "le") && !angular.equals(e[3].toLowerCase(), "ge"))
                                            return c.message = "Incorrect entry: " + d,
                                            a = !0,
                                            c;
                                        g[e[3]] = e[4]
                                    }
                                    f.push(g)
                                }
                            }
                        }),
                        d = angular.copy(f)
                    }
                }
                return a ? c : {
                    name: this.name,
                    description: this.description,
                    type: this.type,
                    entries: d
                }
            }
        };
        return c.prototype = new a,
        c
    }
    angular.module("vManage").factory("PrefixList", a),
    a.$inject = ["PolicyList", "vipValidation"]
}(),
function() {
    function a(a, b) {
        var c = function(c, d, e, f) {
            a.apply(this, [c, d ? d : "sla", e, f]),
            angular.isObject(this.entries[0]) || (this.entries[0] = {
                latency: null,
                loss: null,
                jitter: null
            }),
            this.createPayload = function() {
                return this.entries = this.checkForEmptyString(this.entries),
                {
                    name: this.name,
                    description: this.description,
                    type: this.type,
                    entries: this.entries
                }
            }
            ,
            this.checkForEmptyString = function(a) {
                return [{
                    latency: b.convertEmptyStringToNull(a[0].latency),
                    loss: b.convertEmptyStringToNull(a[0].loss),
                    jitter: b.convertEmptyStringToNull(a[0].jitter)
                }]
            }
        };
        return c.prototype = new a,
        c
    }
    angular.module("vManage").factory("SLAClassList", a),
    a.$inject = ["PolicyList", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        var g = function(b, c, d, e) {
            a.apply(this, [b, c ? c : "tloc", d, e]),
            this.createPayload = function() {
                return angular.forEach(this.entries, function(a) {
                    angular.isDefined(a.preference) && _.isEmpty(a.preference) && delete a.preference
                }),
                {
                    name: this.name,
                    description: this.description,
                    type: this.type,
                    entries: this.entries
                }
            }
        };
        return g.prototype = new a,
        g.prototype.get = function(a) {
            var g = this
              , h = f.defer();
            return a && (g.listId = a),
            g.serverCallInProgress = !0,
            b.get(g.resourceUrl, g.listId).then(function(a) {
                g.serverCallInProgress = !1,
                angular.extend(g, a),
                h.resolve(a)
            }, function(a) {
                g.serverCallInProgress = !1,
                angular.isObject(a) && c.checkNestedProperty(a, "error", "details") ? (e.error("Error occurred while retrieving policy list: " + a.error.message + ":" + a.error.details),
                d.error(a.error.message + ": " + a.error.details)) : (e.info("API error response needs to be updated to conform to company guidelines" + g.dataUrl),
                d.error("Error occurred while retrieving policy list."))
            }),
            h.promise
        }
        ,
        g
    }
    angular.module("vManage").factory("TLOCList", a),
    a.$inject = ["PolicyList", "policyService", "appUtil", "notification", "$log", "$q"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h, i = function() {
            a.apply(this, ["app", "Application"]),
            this.applicationsResourceUrl = "/dataservice/device/dpi/qosmos/applications",
            this.entryTypes = [{
                display: "Application",
                type: "app"
            }, {
                display: "Application Family",
                type: "appFamily"
            }],
            this.updateTemplateUrl = "app/configuration/policy/lists/modal/views/updateAppList.html",
            this.createController = "CreateAppListController",
            this.updateController = "UpdateAppListController",
            this.policyListManager = "AppAppFamilyListManager"
        };
        return i.prototype = new a,
        i.prototype.getApplications = function() {
            var a = e.defer()
              , c = this;
            return c.serverCallInProgress = !0,
            angular.isDefined(c.applications) && c.applications.length > 0 ? (c.serverCallInProgress = !1,
            a.resolve(!0),
            a.promise) : (b.list(c.applicationsResourceUrl).then(function(b) {
                c.serverCallInProgress = !1,
                c.applications = _.map(b.data, function(a) {
                    return angular.extend(a, {
                        name: a.longname,
                        value: a.name,
                        selected: !1
                    })
                }),
                c.applicationFamily = _.chain(b.data).pluck("family").uniq().map(function(a) {
                    return {
                        name: a,
                        value: a.toLowerCase().replace(/ /g, "_").replace(/\//g, "_"),
                        selected: !1
                    }
                }).value(),
                a.resolve(!0)
            }, function(b) {
                c.serverCallInProgress = !1,
                angular.isObject(b) && d.checkNestedProperty(b, "error", "details") ? (f.error("Error occurred while retrieving policy list: " + b.error.message + ":" + b.error.details),
                g.error(b.error.message + ": " + b.error.details)) : (f.info("API error response needs to be updated to conform to company guidelines" + c.dataUrl),
                g.error("Error occurred while retrieving policy list.")),
                a.reject(b)
            }),
            a.promise)
        }
        ,
        i.prototype.getLocalPolicyListInst = function() {
            var a = this;
            return angular.isDefined(a.localPolicyListInst) ? a.localPolicyListInst : (a.localPolicyListInst = new c,
            a.localPolicyListInst)
        }
        ,
        i.prototype.createPolicyListInst = function(a) {
            var b = this;
            return d.checkNestedProperty(a, "entries", "0") && angular.isDefined(a.entries[0].appFamily) && (b.entryType = "appFamily"),
            new c(a.name,"app",a.listId,a.entries,b.entryType)
        }
        ,
        i.prototype.clearApplicationSelection = function(a) {
            var b = this;
            _.indexOf(["applications", "applicationFamily"], a) > -1 && angular.forEach(b[a], function(a) {
                a.selected && (a.selected = !1)
            })
        }
        ,
        i.prototype.list = function() {
            var a = this;
            a.serverCallInProgress = !0;
            var c = e.defer();
            return b.list(a.resourceUrl).then(function(b) {
                a.serverCallInProgress = !1,
                angular.forEach(b.data, function(a) {
                    if (angular.isDefined(a.entries)) {
                        var b = "";
                        angular.forEach(a.entries, function(a) {
                            angular.isDefined(a.appFamily) ? b += a.appFamily : "",
                            angular.isDefined(a.app) ? b += a.app : "",
                            b += ", "
                        }),
                        a.entriesString = b.trim().slice(0, -1)
                    }
                }),
                a.listItems = b.data,
                c.resolve(b.data)
            }, function(b) {
                a.serverCallInProgress = !1,
                angular.isObject(b) && d.checkNestedProperty(b, "error", "details") ? (f.error("Error occurred while retrieving policy list: " + b.error.message + ":" + b.error.details),
                g.error(b.error.message + ": " + b.error.details)) : (f.info("API error response needs to be updated to conform to company guidelines" + a.dataUrl),
                g.error("Error occurred while retrieving policy list.")),
                c.reject(b)
            }),
            c.promise
        }
        ,
        {
            getInstance: function() {
                return h || (h = new i),
                h
            }
        }
    }
    angular.module("vManage").factory("AppAppFamilyListManager", a),
    a.$inject = ["PolicyListManager", "policyService", "ApplicationList", "appUtil", "$q", "$log", "notification"]
}(),
function() {
    function a(a, b, c) {
        var d, e = function() {
            a.apply(this, ["color", "Color"]),
            this.colors = _.map(c.colorOptions, function(a) {
                return angular.extend(a, {
                    name: a.value
                })
            }),
            this.updateTemplateUrl = "app/configuration/policy/lists/modal/views/updateColorList.html",
            this.policyListManager = "ColorListManager"
        };
        return e.prototype = new a,
        e.prototype.getLocalPolicyListInst = function() {
            var a = this;
            return angular.isDefined(a.localPolicyListInst) ? a.localPolicyListInst : (a.localPolicyListInst = new b,
            a.localPolicyListInst)
        }
        ,
        e.prototype.createPolicyListInst = function(a) {
            var c = this;
            return new b(a.name,c.type,a.listId,a.entries)
        }
        ,
        {
            getInstance: function() {
                return d || (d = new e),
                d
            }
        }
    }
    angular.module("vManage").factory("ColorListManager", a),
    a.$inject = ["PolicyListManager", "ColorList", "colors"]
}(),
function() {
    function a(a) {
        var b, c = function() {
            a.apply(this, ["dataprefix", "Data Prefix", null, null, "ipPrefix"]),
            this.policyListManager = "DataPrefixListManager"
        };
        return c.prototype = new a,
        {
            getInstance: function() {
                return b || (b = new c),
                b
            }
        }
    }
    angular.module("vManage").factory("DataPrefixListManager", a),
    a.$inject = ["PolicyListManager"]
}(),
function() {
    function a(a, b) {
        var c, d = [{
            title: "Name",
            property: "name",
            hideable: !1,
            dataType: "string"
        }, {
            title: "Burst",
            property: "entries[0].burst",
            hideable: !1,
            dataType: "string"
        }, {
            title: "Exceed",
            property: "entries[0].exceed",
            hideable: !1,
            dataType: "string"
        }, {
            title: "Rate",
            property: "entries[0].rate",
            hideable: !1,
            dataType: "string"
        }, {
            title: "Reference Count",
            property: "referenceCount",
            hideable: !0,
            dataType: "number"
        }, {
            title: "Updated By",
            property: "owner",
            hideable: !0,
            dataType: "string"
        }, {
            title: "Last Updated",
            property: "lastUpdated",
            displayFormat: "DD MMM YYYY h:mm:ss A z",
            inputFormat: "unix-time",
            hideable: !0,
            dataType: "date"
        }, {
            title: "Action",
            displayName: "",
            property: "modify-row",
            editable: !1,
            dataType: "string",
            width: 50,
            hideable: !1,
            enableColumnResizing: !1,
            headerTemplate: "ui-grid/ui-grid-no-header",
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editGroupTasks_{{row.entity.name}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 pointerCursor blue" id="copy_list_{{row.entity.name}}" ng-click="grid.appScope.copyRow($event, row, rowRenderIndex)">content_copy</i> <i class="material-icons md-14 pointerCursor blue" id="removeRow_{{row.entity.name}}" ng-click="grid.appScope.removeRow($event, row, rowRenderIndex)">delete</div>'
        }], e = function() {
            a.apply(this, ["policer", "Policer"]),
            this.updateTemplateUrl = "app/configuration/policy/lists/modal/views/updatePolicerList.html",
            this.policyListManager = "PolicerListManager"
        };
        return e.prototype = new a,
        e.prototype.getLocalPolicyListInst = function() {
            var a = this;
            return angular.isDefined(a.localPolicyListInst) ? a.localPolicyListInst : (a.localPolicyListInst = new b,
            a.localPolicyListInst)
        }
        ,
        e.prototype.createPolicyListInst = function(a) {
            var c = this;
            return new b(a.name,c.type,a.listId,a.entries)
        }
        ,
        e.prototype.getColumnDefs = function() {
            return d
        }
        ,
        {
            getInstance: function() {
                return c || (c = new e),
                c
            }
        }
    }
    angular.module("vManage").factory("PolicerListManager", a),
    a.$inject = ["PolicyListManager", "PolicerList"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        var g = [{
            title: "Name",
            property: "name",
            hideable: !1,
            dataType: "string",
            cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP"id="name_{{row.entity.name}}">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
        }, {
            title: "Entries",
            property: "entriesString",
            hideable: !1,
            dataType: "string",
            cellTemplate: '<div class="ui-grid-cell-contents pointerCursor" style="color: #52a1fc; " title="TOOLTIP"data-ng-click="grid.appScope.viewList(row, $event)" id="entries_{{row.entity.name}}">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
        }, {
            title: "Reference Count",
            property: "referenceCount",
            hideable: !0,
            dataType: "number",
            cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP"id="ref_count_{{row.entity.name}}">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
        }, {
            title: "Updated By",
            property: "owner",
            hideable: !0,
            dataType: "string",
            cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP"id="updated_by_{{row.entity.name}}">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
        }, {
            title: "Last Updated",
            property: "lastUpdated",
            displayFormat: "DD MMM YYYY h:mm:ss A z",
            inputFormat: "unix-time",
            hideable: !0,
            dataType: "date",
            cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP"id="last_updated_{{row.entity.name}}">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
        }, {
            title: "Action",
            displayName: "",
            property: "modify-row",
            editable: !1,
            dataType: "string",
            width: 50,
            hideable: !1,
            enableColumnResizing: !1,
            headerTemplate: "ui-grid/ui-grid-no-header",
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor" id="editGroupTasks_{{row.entity.name}}" ng-class="!grid.appScope.allowWrite(row) ? \'blue\' : \'icon-disabled-grey\'" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 pointerCursor blue" id="copy_list_{{row.entity.name}}" ng-click="grid.appScope.copyRow($event, row, rowRenderIndex)">content_copy</i><i class="material-icons md-14 pointerCursor" id="removeRow_{{row.entity.name}}" ng-click="grid.appScope.removeRow($event, row, rowRenderIndex)" ng-class="!grid.appScope.allowWrite(row) ? \'blue\' : \'icon-disabled-grey\'">delete</div>'
        }]
          , h = function(a, b, c, d, e) {
            this.type = a,
            this.title = b,
            this.entryType = e || this.type,
            this.resourceUrl = c || "/dataservice/template/policy/list/" + this.type,
            this.updateTemplateUrl = "app/configuration/policy/lists/modal/views/updatePolicyList.html",
            this.updateController = "UpdatePolicyListController",
            this.createController = "CreatePolicyListController",
            this.listItems = d || [],
            this.localPolicyListInst = void 0,
            this.serverCallInProgress = !1
        };
        return h.prototype.showSpinner = function() {
            var a = this;
            a.serverCallInProgress = !0
        }
        ,
        h.prototype.hideSpinner = function() {
            var a = this;
            a.serverCallInProgress = !1
        }
        ,
        h.prototype.getLocalPolicyListInst = function() {
            var a = this;
            return angular.isDefined(a.localPolicyListInst) ? a.localPolicyListInst : (a.localPolicyListInst = new b(null,a.type,null,null,a.entryType),
            a.localPolicyListInst)
        }
        ,
        h.prototype.createPolicyListInst = function(a) {
            var c = this;
            return new b(a.name,c.type,a.listId,a.entries,c.entryType)
        }
        ,
        h.prototype.getColumnDefs = function() {
            return g
        }
        ,
        h.prototype.list = function() {
            var b = this;
            b.serverCallInProgress = !0;
            var g = f.defer();
            return a.list(b.resourceUrl).then(function(c) {
                b.serverCallInProgress = !1,
                angular.forEach(c.data, function(c) {
                    angular.isDefined(c.entries) && (c.entriesString = a.stringifyEntries(c.entries, b.entryType))
                }),
                b.listItems = c.data,
                g.resolve(c.data)
            }, function(a) {
                b.serverCallInProgress = !1,
                angular.isObject(a) && c.checkNestedProperty(a, "error", "details") ? (e.error("Error occurred while retrieving policy list: " + a.error.message + ":" + a.error.details),
                d.error(a.error.message + ": " + a.error.details)) : (e.info("API error response needs to be updated to conform to company guidelines" + b.dataUrl),
                d.error("Error occurred while retrieving policy list.")),
                g.reject(a)
            }),
            g.promise
        }
        ,
        h.prototype.listAsync = function() {
            var b = this
              , c = f.defer();
            return b.serverCallInProgress = !0,
            a.list(b.resourceUrl).then(function(a) {
                b.serverCallInProgress = !1,
                b.listItems = a.data,
                c.resolve(b.listItems)
            }, function(a) {
                b.serverCallInProgress = !1,
                c.reject(a)
            }),
            c.promise
        }
        ,
        h
    }
    angular.module("vManage").factory("PolicyListManager", a),
    a.$inject = ["policyService", "PolicyList", "appUtil", "notification", "$log", "$q"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        var g, h = function() {
            a.apply(this, ["prefix", "Prefix", null, null, "ipPrefix"]),
            this.updateTemplateUrl = "app/configuration/policy/lists/modal/views/updatePrefixList.html",
            this.policyListManager = "PrefixListManager"
        };
        return h.prototype = new a,
        h.prototype.getLocalPolicyListInst = function() {
            var a = this;
            return angular.isDefined(a.localPolicyListInst) ? a.localPolicyListInst : (a.localPolicyListInst = new b,
            a.localPolicyListInst)
        }
        ,
        h.prototype.createPolicyListInst = function(a) {
            var d = this;
            return _.isArray(a.entries) && a.entries.length > 0 && (a.entries = c.formatPrefixEntries(a.entries)),
            new b(a.name,d.type,a.listId,a.entries)
        }
        ,
        h.prototype.list = function() {
            var a = this;
            a.serverCallInProgress = !0;
            var b = f.defer();
            return c.list(a.resourceUrl).then(function(d) {
                a.serverCallInProgress = !1,
                angular.forEach(d.data, function(a) {
                    angular.isDefined(a.entries) && (a.entriesString = c.formatPrefixEntries(a.entries))
                }),
                a.listItems = d.data,
                b.resolve(d.data)
            }, function(c) {
                a.serverCallInProgress = !1,
                angular.isObject(c) && appUtil.checkNestedProperty(c, "error", "details") ? (e.error("Error occurred while retrieving policy list: " + c.error.message + ":" + c.error.details),
                d.error(c.error.message + ": " + c.error.details)) : (e.info("API error response needs to be updated to conform to company guidelines" + a.dataUrl),
                d.error("Error occurred while retrieving policy list.")),
                b.reject(c)
            }),
            b.promise
        }
        ,
        {
            getInstance: function() {
                return g || (g = new h),
                g
            }
        }
    }
    angular.module("vManage").factory("PrefixListManager", a),
    a.$inject = ["PolicyListManager", "PrefixList", "policyService", "notification", "$log", "$q"]
}(),
function() {
    function a(a) {
        var b, c = function() {
            a.apply(this, ["site", "Site", null, null, "siteId"]),
            this.policyListManager = "SiteListManager"
        };
        return c.prototype = new a,
        {
            getInstance: function() {
                return b || (b = new c),
                b
            }
        }
    }
    angular.module("vManage").factory("SiteListManager", a),
    a.$inject = ["PolicyListManager"]
}(),
function() {
    function a(a, b) {
        var c, d = [{
            title: "Name",
            property: "name",
            hideable: !1,
            dataType: "string"
        }, {
            title: "Loss (%)",
            property: "entries[0].loss",
            hideable: !1,
            dataType: "string"
        }, {
            title: "Latency (ms)",
            property: "entries[0].latency",
            hideable: !1,
            dataType: "string"
        }, {
            title: "Jitter (ms)",
            property: "entries[0].jitter",
            hideable: !1,
            dataType: "string"
        }, {
            title: "Reference Count",
            property: "referenceCount",
            hideable: !0,
            dataType: "number"
        }, {
            title: "Updated By",
            property: "owner",
            hideable: !0,
            dataType: "string"
        }, {
            title: "Last Updated",
            property: "lastUpdated",
            displayFormat: "DD MMM YYYY h:mm:ss A z",
            inputFormat: "unix-time",
            hideable: !0,
            dataType: "date"
        }, {
            title: "Action",
            displayName: "",
            property: "modify-row",
            editable: !1,
            dataType: "string",
            width: 50,
            hideable: !1,
            enableColumnResizing: !1,
            headerTemplate: "ui-grid/ui-grid-no-header",
            cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editGroupTasks_{{row.entity.name}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 pointerCursor blue" id="copy_list_{{row.entity.name}}" ng-click="grid.appScope.copyRow($event, row, rowRenderIndex)">content_copy</i><i class="material-icons md-14 pointerCursor blue" id="removeRow_{{row.entity.name}}" ng-click="grid.appScope.removeRow($event, row, rowRenderIndex)">delete</div>'
        }], e = function() {
            a.apply(this, ["sla", "SLA Class"]),
            this.updateTemplateUrl = "app/configuration/policy/lists/modal/views/updateSLAList.html",
            this.policyListManager = "SLAClassListManager"
        };
        return e.prototype = new a,
        e.prototype.getLocalPolicyListInst = function() {
            var a = this;
            return angular.isDefined(a.localPolicyListInst) ? a.localPolicyListInst : (a.localPolicyListInst = new b,
            a.localPolicyListInst)
        }
        ,
        e.prototype.createPolicyListInst = function(a) {
            var c = this;
            return new b(a.name,c.type,a.listId,a.entries)
        }
        ,
        e.prototype.getColumnDefs = function() {
            return d
        }
        ,
        {
            getInstance: function() {
                return c || (c = new e),
                c
            }
        }
    }
    angular.module("vManage").factory("SLAClassListManager", a),
    a.$inject = ["PolicyListManager", "SLAClassList"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        var i, j = [{
            title: "Name",
            property: "tloc",
            hideable: !1,
            dataType: "string",
            minWidth: 150,
            enableColumnResizing: !0,
            cellTemplate: '<div ng-if=\'row.treeLevel === 0\' class="ui-grid-cell-contents inlineDisplay" title="TOOLTIP">{{COL_FIELD}}</div>'
        }, {
            title: "TLOC",
            property: "tlocIp",
            hideable: !1,
            dataType: "string",
            cellTemplate: '<div ng-if=\'row.treeLevel != 0\' class="ui-grid-cell-contents inlineDisplay" title="TOOLTIP">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
        }, {
            title: "Color",
            property: "color",
            hideable: !1,
            dataType: "string",
            cellTemplate: '<div ng-if=\'row.treeLevel != 0\' class="ui-grid-cell-contents inlineDisplay" title="TOOLTIP">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
        }, {
            title: "Encap",
            property: "encap",
            hideable: !1,
            dataType: "string",
            cellTemplate: '<div ng-if=\'row.treeLevel != 0\' class="ui-grid-cell-contents inlineDisplay" title="TOOLTIP">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
        }, {
            title: "Preference",
            property: "preference",
            hideable: !1,
            dataType: "number",
            cellTemplate: '<div ng-if=\'row.treeLevel != 0\' class="ui-grid-cell-contents inlineDisplay" title="TOOLTIP">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
        }, {
            title: "Reference Count",
            property: "referenceCount",
            hideable: !0,
            dataType: "number",
            minWidth: 20,
            width: 100,
            cellTemplate: '<div ng-if=\'row.treeLevel === 0\' class="ui-grid-cell-contents inlineDisplay" title="TOOLTIP">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
        }, {
            title: "Updated By",
            property: "owner",
            hideable: !0,
            dataType: "string",
            cellTemplate: '<div ng-if=\'row.treeLevel === 0\' class="ui-grid-cell-contents inlineDisplay" title="TOOLTIP">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
        }, {
            title: "Last Updated",
            property: "lastUpdated",
            displayFormat: "DD MMM YYYY h:mm:ss A z",
            inputFormat: "unix-time",
            hideable: !0,
            width: 180,
            dataType: "date",
            cellTemplate: '<div ng-if=\'row.treeLevel === 0\' class="ui-grid-cell-contents inlineDisplay" title="TOOLTIP">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
        }, {
            title: "Action",
            displayName: "",
            property: "modify-row",
            editable: !1,
            dataType: "string",
            width: 50,
            hideable: !1,
            enableColumnResizing: !1,
            headerTemplate: "ui-grid/ui-grid-no-header",
            cellTemplate: '<div class="ui-grid-cell-contents" ng-show="grid.appScope.isParentRow(row)"><i class="material-icons md-14 pointerCursor blue" id="editGroupTasks_{{row.entity.tloc}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 pointerCursor blue" id="copy_list_{{row.entity.tloc}}" ng-click="grid.appScope.copyRow($event, row, rowRenderIndex)">content_copy</i><i class="material-icons md-14 pointerCursor blue" id="removeRow_{{row.entity.tloc}}" ng-click="grid.appScope.removeRow($event, row, rowRenderIndex)">delete</div>'
        }], k = function() {
            a.apply(this, ["tloc", "TLOC", null, null, "tloc"]),
            this.encapOptions = [{
                name: "ipsec"
            }, {
                name: "gre"
            }],
            this.colors = _.map(c.colorOptions, function(a) {
                return angular.extend(a, {
                    name: a.value
                })
            }),
            this.updateTemplateUrl = "app/configuration/policy/lists/modal/views/updateTlocList.html",
            this.updateController = "UpdateTlocListController",
            this.createController = "CreateTlocListController",
            this.policyListManager = "TLOCListManager"
        };
        return k.prototype = new a,
        k.prototype.getLocalPolicyListInst = function() {
            var a = this;
            return angular.isDefined(a.localPolicyListInst) ? a.localPolicyListInst : (a.localPolicyListInst = new b,
            a.localPolicyListInst)
        }
        ,
        k.prototype.createPolicyListInst = function(a) {
            var c = this;
            return new b(a.name,c.type,a.listId,a.entries)
        }
        ,
        k.prototype.getColumnDefs = function() {
            return j
        }
        ,
        k.prototype.list = function() {
            var a = this;
            a.serverCallInProgress = !0;
            var b = e.defer();
            return d.list(a.resourceUrl).then(function(c) {
                if (a.serverCallInProgress = !1,
                angular.isDefined(c.data)) {
                    var d = [];
                    angular.forEach(c.data, function(a) {
                        var b = _.map(a.entries, function(b) {
                            var c = _.extend({}, a);
                            return delete c.entries,
                            c.tloc = b.tloc,
                            c.tlocIp = b.tloc,
                            c.color = b.color,
                            c.encap = angular.isDefined(b.encap) ? b.encap : null,
                            c.preference = angular.isDefined(b.preference) ? b.preference : null,
                            c
                        });
                        angular.forEach(b, function(a) {
                            d.push(a)
                        })
                    }),
                    a.listItems = d,
                    b.resolve(a.listItems)
                }
            }, function(c) {
                a.serverCallInProgress = !1,
                angular.isObject(c) && g.checkNestedProperty(c, "error", "details") ? (f.error("Error occurred while retrieving policy list: " + c.error.message + ":" + c.error.details),
                h.error(c.error.message + ": " + c.error.details)) : (f.info("API error response needs to be updated to conform to company guidelines" + a.dataUrl),
                h.error("Error occurred while retrieving policy list.")),
                b.reject(c)
            }),
            b.promise
        }
        ,
        {
            getInstance: function() {
                return i || (i = new k),
                i
            }
        }
    }
    angular.module("vManage").factory("TLOCListManager", a),
    a.$inject = ["PolicyListManager", "TLOCList", "colors", "policyService", "$q", "$log", "appUtil", "notification"]
}(),
function() {
    function a(a) {
        var b, c = function() {
            a.apply(this, ["vpn", "VPN"]),
            this.policyListManager = "VPNListManager"
        };
        return c.prototype = new a,
        {
            getInstance: function() {
                return b || (b = new c),
                b
            }
        }
    }
    angular.module("vManage").factory("VPNListManager", a),
    a.$inject = ["PolicyListManager"]
}(),
function() {
    function a(a, b, c, d) {
        a.stateString = c.getStateString(b),
        a.globalButtonState.disableTabs = !0,
        a.globalButtonState.customOptions = !1,
        a.localizedPolicyTabs = [new d("Centralized Policy",_.includes(b.current.name, "centralizedPolicy.vsmart"),"app.config.policy.centralizedPolicy.vsmart"), new d("Localized Policy",_.includes(b.current.name, "localizedPolicy.vedge"),"app.config.policy.localizedPolicy.vedge")]
    }
    angular.module("vManage").controller("LocalizedPolicyController", a),
    a.$inject = ["$scope", "$state", "appUtil", "Tab"]
}(),
angular.module("vManage").controller("CrudVEdgePolicyCtrl", CrudVEdgePolicyCtrl),
CrudVEdgePolicyCtrl.$inject = ["$scope", "$mdDialog", "appUtil", "vEdgePolicyService", "DeviceTemplateHttpService", "rbac", "$filter", "TemplateDeviceInput", "$state", "notification"];
angular.module("vManage").controller("VEdgePolicyController", VEdgePolicyController);
VEdgePolicyController.$inject = ["$scope", "$window", "$state", "$mdDialog", "$log", "appUtil", "vEdgePolicyService", "Tab", "Table", "notification", "$timeout", "apiConstants", "rbac"],
angular.module("vManage").factory("vEdgePolicyService", vEdgePolicyService),
vEdgePolicyService.$inject = ["restService", "apiConstants", "notification", "$timeout", "Table", "$state", "templatesConstants"],
angular.module("vManage").controller("ActivateCentralizedPolicyModalCtrl", ActivateCentralizedPolicyModalCtrl),
ActivateCentralizedPolicyModalCtrl.$inject = ["$scope", "$mdDialog", "policy", "vSmartPolicyService", "notification", "PolicyAssembly", "$state"],
angular.module("vManage").controller("CopyPolicyModalCtrl", CopyPolicyModalCtrl),
CopyPolicyModalCtrl.$inject = ["$scope", "$mdDialog", "selectedRow", "table", "appUtil", "PolicyAssembly", "Policy", "CflowdPolicy", "MeshPolicy", "HubAndSpokePolicy", "VpnMembershipPolicy"],
angular.module("vManage").controller("ImportPolicyModalCtrl", ImportPolicyModalCtrl),
ImportPolicyModalCtrl.$inject = ["$scope", "$mdDialog", "policyType", "appUtil", "policyList", "PolicyWizardManager"],
function() {
    angular.module("vManage").constant("policyConstants", {
        POLICY: "/dataservice/template/policy/vsmart/",
        RULES_TITLE: {
            destinationDataPrefixList: "Destination IP/Destination Data Prefix",
            sourceDataPrefixList: "Source IP/Source Data Prefix",
            siteList: "Site ID/List",
            vpnList: "VPN ID/List",
            appList: "Application/Application Family List",
            dnsAppList: "DNS Application/Application Family List",
            dns: "DNS",
            colorList: "Color List",
            plp: "Packet Layer Protocol(PLP)",
            origin: "Origin",
            carrier: "Carrier",
            prefixList: "Prefix List",
            backupSlaPreferredColor: "Backup Preferred Color",
            slaClass: "SLA Class Name",
            exportTo: "Export To",
            dscp: "DSCP",
            source_ip: "Source IP",
            source_port: "Source Port",
            destination_ip: "Destination IP",
            destination_port: "Destination Port",
            protocol: "Protocol",
            packet_length: "Packet Length",
            tcp: "TCP",
            originator: "Originator",
            omp_tag: "OMP Tag",
            preference: "Preference",
            domain_id: "Domain ID",
            group_id: "Group ID",
            counter: "Counter Name",
            nat_pool: "NAT Pool",
            nat_vpn: "NAT VPN",
            redirectDns: "Redirect DNS",
            set_dscp: "Set DSCP",
            set_fwd_class: "Set Forwarding Class",
            set_local_tloc_color: "Set Local TLOC Color",
            set_local_tloc_encap: "Set Local TLOC Encap",
            set_local_tloc_list: "Set Local TLOC List",
            set_nexthop: "Set NextHop",
            set_service_vpn: "Set Service VPN",
            set_tloc_action: "Set TLOC Action",
            set_tloc: "Set TLOC",
            set_vpn: "Set VPN",
            set_preference: "Set Preference",
            set_omp_tag: "Set OMP Tag",
            setLocalTLOCList: "Set Local TLOC Color",
            setPolicer: "Set Policer",
            setService: "Set Service Type",
            setTLOCAction: "Set TLOC Action",
            setTLOCList: "Set TLOC List"
        },
        SET_ACTION_KEYS: {
            redirectDns: "setRedirectDNS",
            setDSCP: "dscp",
            setFwdClass: "forwardingClass",
            setLocalTLOC: "localTloc",
            setLocalTLOCList: "localTlocList",
            setNexthop: "nextHop",
            setPolicer: "policer",
            setService: "service",
            setTLOCList: "tlocList",
            setVPN: "vpn",
            setPreference: "preference",
            setOMPTag: "ompTag",
            setTLOCAction: "tlocAction",
            natPool: "pool",
            natVPN: "useVpn",
            setCflowd: "cflowd"
        },
        POLICY_RULES_TEMPLATE_LABEL: {
            appList: "App",
            dnsAppList: "DnsAppList",
            dns: "DNS",
            source: "Source",
            sourceDataPrefixList: "SourceDataPrefixList",
            dscp: "DSCP",
            destination: "Destination",
            destinationDataPrefixList: "DestinationDataPrefixList",
            protocol: "Protocol",
            packetLength: "PacketLength",
            plp: "PLP",
            tcp: "TCP",
            ompTag: "OMPTag",
            origin: "Origin",
            originator: "Originator",
            preference: "Preference",
            slaClass: "SLA",
            log: "Log",
            count: "Counter",
            cflowd: "CFlowd",
            accept: "Accept",
            drop: "Drop",
            none: "None",
            reject: "Reject",
            natPool: "NATPool",
            natVPN: "NATVPN",
            setDSCP: "SetDSCP",
            setFwdClass: "SetForwardingClass",
            setLocalTLOC: "SetLocalTLOC",
            setLocalTLOCList: "SetLocalTLOCList",
            setNexthop: "SetNexthop",
            setPolicer: "SetPolicer",
            redirectDns: "RedirectDNS",
            setService: "SetService",
            setTLOC: "SetTLOC",
            setTLOCList: "SetTLOCList",
            setVPN: "SetVPN",
            setPreference: "SetPreference",
            setOMPTag: "SetOMPTag",
            setTLOCAction: "SetTLOCAction",
            backupSlaPreferredColor: "BackupSLAPreferredColor",
            tcpOptimization: "TCPOptimization",
            exportTo: "ExportTo",
            color: "Color",
            colorList: "ColorList",
            siteId: "Site",
            siteList: "SiteList",
            vpnId: "VPN",
            vpnList: "VPNList",
            prefixList: "PrefixList",
            carrier: "Carrier",
            domainId: "DomainId",
            groupId: "GroupId",
            tlocList: "TLOCList"
        }
    })
}(),
function() {
    function a(a, b, c, d) {
        a.stateString = c.getStateString(b),
        a.showCustomOptions = !1,
        a.breadCrumb = {
            states: []
        },
        a.globalButtonState = {
            disableTabs: !1,
            customOptions: !0
        },
        _.includes(b.current.name, "localizedPolicy") ? a.selectedPolicyType = "localizedPolicy" : a.selectedPolicyType = "centralizedPolicy",
        a.buttonFunctions = [],
        a.customOptionsList = [{
            type: "centralized-policy",
            title: "Centralized Policy",
            imgUrl: "images/group-29.svg",
            visibility: !0,
            options: [{
                title: "CLI Policy",
                visibility: !0,
                stateName: "app.config.policy.custom.cli"
            }, {
                title: "Lists",
                visibility: !0,
                stateName: "app.config.policy.custom.define_lists.application"
            }, {
                title: "Topology",
                visibility: !0,
                stateName: "app.config.policy.custom.topology.control"
            }, {
                title: "Traffic Policy",
                visibility: !0,
                stateName: "app.config.policy.custom.traffic.appAwareRouting"
            }]
        }],
        a.goToChildView = function(c) {
            a.showCustomOptions = !1,
            b.go(c)
        }
        ,
        a.toggleDropdown = function() {
            a.showCustomOptions = !a.showCustomOptions,
            a.showCustomOptions && $(".custom-options-menu").removeClass("ng-hide")
        }
        ,
        d.bind("click", function(b) {
            if (b.stopPropagation(),
            a.showCustomOptions) {
                if ($(b.target).closest("#custom-options_nav_drop_down_list").length > 0 || $(b.target).closest(".custom-options-wrapper").length > 0 || $(b.target).closest("#custom_options_nav_drop_down").length > 0)
                    return !1;
                $(".custom-options-menu").addClass("ng-hide"),
                a.showCustomOptions = !1
            }
        })
    }
    angular.module("vManage").controller("PolicyController", a),
    a.$inject = ["$scope", "$state", "appUtil", "$document"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
        function q(a) {
            angular.isObject(a) && d.checkNestedProperty(a, "error", "details") ? (l.error("Error occurred while processing policy: " + a.error.message + ":" + a.error.details),
            m.error(a.error.message + ": " + a.error.details)) : (l.info("API error response needs to be updated to conform to company guidelines."),
            m.error("Error occurred while processing policy"))
        }
        var r = this;
        r.stateString = "config_template_device_",
        r.serverCallInProgress = !1,
        a.isWizardFlow = b.previousState && _.includes(b.previousState.name, "app.config.policy.wizard");
        var s = p.getInstance();
        a.buttonFunctions.reset();
        var t = c.policy
          , u = "Save ";
        u += t && "appRoute" === t.type ? "App-Route Policy" : t && "data" === t.type ? "Data Policy" : t && "cflowd" === t.type ? "Cflowd Policy" : t && "hubAndSpoke" === t.type ? "Hub And Spoke Policy" : t && "mesh" === t.type ? "Mesh Region" : t && "control" === t.type ? "Control Policy" : "Policy",
        a.buttonFunctions.push({
            title: u,
            layoutClass: "globalButtonIcon",
            stateString: a.stateString + "save",
            ButtonActionFn: function(a) {
                r.policy.activatedId || r.policy.isPolicyActivated ? n.show({
                    templateUrl: "app/configuration/policy/modal/activateCentralizedPolicy.html",
                    controller: "ActivateCentralizedPolicyModalCtrl",
                    targetEvent: a,
                    resolve: {
                        policy: function() {
                            return r.policy
                        }
                    }
                }).then(function(a) {
                    b.go("app.device.status", {
                        activity: o.getStatusAction("VSMART_POLICY_CONFIG").endpoint,
                        pid: a ? a.id : ""
                    })
                }) : r.policy.save().then(function(a) {
                    r.returnToParentView()
                }, function(a) {
                    q(a)
                })
            }
        }, {
            title: "BACK",
            layoutClass: "flatButton",
            width: "100px",
            stateString: a.stateString + "back",
            ButtonActionFn: function(d) {
                var e = {
                    id: void 0,
                    type: void 0,
                    policy: void 0,
                    assembly: void 0
                };
                s.showWizardSteps = !0,
                _.isNull(c.policy) ? a.isWizardFlow && (e.policyId = c.policyId,
                e.policyId ? e.action = "edit" : e.action = "add") : (e.id = c.policy.id || c.policy.policyId || c.policy.definitionId || c.id,
                e.type = c.policy.type || c.type,
                e.policy = c.policy),
                b.go(b.previousState.name, e)
            }
        }),
        r.previewView = "showPreview",
        a.isWizardFlow ? (r.policy = k.getInstance({}),
        r.policy.policyId ? a.buttonFunctions[0].title = "Save Policy Changes" : a.buttonFunctions[0].title = "Save Policy") : c.policy instanceof f ? r.policy = new f(c.policy) : c.policy instanceof g ? r.policy = new g(c.policy) : c.policy instanceof e ? r.policy = new e(c.policy) : c.policy instanceof h ? r.policy = new h(c.policy) : c.policy instanceof i ? r.policy = new i(c.policy) : c.policy instanceof j && (r.policy = new j(c.policy)),
        r.policy.preview() && (r.serverCallInProgress = !0,
        r.policy.preview().then(function(a) {
            r.serverCallInProgress = !1,
            r.policy.previewConfig = a.preview
        }, function(a) {
            r.serverCallInProgress = !1,
            q(a)
        })),
        r.returnToParentView = function() {
            b.previousState.name.contains("appRoute") ? b.go("app.config.policy.custom.traffic.appAwareRouting") : b.previousState.name.contains("data") ? b.go("app.config.policy.custom.traffic.data") : b.previousState.name.contains("cflowd") ? b.go("app.config.policy.custom.traffic.data") : b.previousState.name.contains("control") ? b.go("app.config.policy.custom.topology.control") : b.go("app.config.policy.centralizedPolicy.vsmart")
        }
        ,
        r.diffUsingJS = function(a, b) {
            var c = !1
              , d = difflib.stringAsLines(r.policy.runningConfig)
              , e = difflib.stringAsLines(r.policy.previewConfig)
              , f = new difflib.SequenceMatcher(d,e)
              , g = f.get_opcodes()
              , h = $("#diffoutput");
            angular.forEach(h.children(), function(a) {
                a.remove()
            });
            var i = $("#contextSize").value;
            i = i ? i : null,
            h.append(diffview.buildView({
                baseTextLines: d,
                newTextLines: e,
                opcodes: g,
                baseTextName: "Local Config",
                newTextName: "New Config",
                contextSize: i,
                viewType: c ? 1 : 0
            }))
        }
        ,
        a.$on("$destroy", function() {
            a.buttonFunctions.reset()
        })
    }
    angular.module("vManage").controller("PolicyPreviewController", a),
    a.$inject = ["$scope", "$state", "$stateParams", "appUtil", "DataPolicy", "AppRoutePolicy", "ControlPolicy", "CflowdPolicy", "MeshPolicy", "HubAndSpokePolicy", "PolicyAssembly", "$log", "notification", "$mdDialog", "StatusService", "PolicyWizardManager"]
}(),
function() {
    function a(a, b, c, d) {
        var e = a;
        e.modalErr = {},
        e.modalErr.occurred = !1,
        e.stateString = "policy_preview",
        e.serverCallInProgress = !0,
        e.policy = d.getInstance(c),
        e.policy.previewById() && e.policy.previewById().then(function(a) {
            e.serverCallInProgress = !1,
            e.policy.previewConfig = a.preview
        }, function(a) {
            e.serverCallInProgress = !1,
            e.modalErr = a,
            e.modalErr.occurred = !0
        }),
        e.ok = function() {
            b.hide()
        }
        ,
        a.$on("$destroy", function() {
            e.policy = d.deleteInstance()
        })
    }
    angular.module("vManage").controller("PolicyModalPreviewController", a),
    a.$inject = ["$scope", "$mdDialog", "selectedRow", "PolicyAssembly"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
        var q, r = function(a) {
            var b = this;
            b.policyId = a.policyId,
            b.policyName = a.policyName,
            b.policyDescription = a.policyDescription,
            b.policyType = a.policyType,
            b.policyDefinition = a.policyDefinition || {
                assembly: []
            },
            b.isPolicyActivated = a.isPolicyActivated || !1,
            b.activated = a.isPolicyActivated || a.activated,
            b.resourceUrl = "/dataservice/template/policy/vsmart/",
            b.getUrl = "/dataservice/template/policy/vsmart/definition/",
            b.previewUrl = "/dataservice/template/policy/assembly/",
            b.listItems = [],
            b.payload = a.payload,
            b.runningConfig = a.runningConfig || void 0
        };
        return r.prototype.appendPolicy = function(a) {
            var j = this;
            if (a instanceof b)
                j.policyDefinition.assembly.unshift(a);
            else
                switch (a.type.toLowerCase()) {
                case "data":
                    j.policyDefinition.assembly.unshift(new c(a));
                    break;
                case "approute":
                    j.policyDefinition.assembly.unshift(new d(a));
                    break;
                case "control":
                    j.policyDefinition.assembly.unshift(new e(a));
                    break;
                case "cflowd":
                    j.policyDefinition.assembly.unshift(new f(a));
                    break;
                case "hubandspoke":
                    j.policyDefinition.assembly.unshift(new g(a));
                    break;
                case "mesh":
                    j.policyDefinition.assembly.unshift(new h(a));
                    break;
                case "vpnmembershipgroup":
                    j.policyDefinition.assembly.unshift(new i(a))
                }
            return j.policyDefinition.assembly[0]
        }
        ,
        r.prototype.findPolicyIndex = function(a) {
            var b = this;
            return _.findIndex(b.policyDefinition.assembly, {
                name: a.name
            })
        }
        ,
        r.prototype.findPolicyDefinitionId = function(a) {
            var b = this;
            return _.find(b.policyDefinition.assembly, {
                definitionId: a.definitionId
            })
        }
        ,
        r.prototype.removePolicy = function(a) {
            var b = this
              , c = b.findPolicyIndex(a);
            return c > -1 ? (b.removePolicyByIndex(c),
            c) : void j.warning("Error occurred while removing policy.")
        }
        ,
        r.prototype.removePolicyByIndex = function(a) {
            var b = this;
            b.policyDefinition.assembly.splice(a, 1)
        }
        ,
        r.prototype.refreshPolicy = function(a) {
            var b = this;
            a.delete && b.removePolicy(a)
        }
        ,
        r.prototype.refreshPolicies = function() {
            var a = this;
            angular.forEach(a.policyDefinition.assembly, function(b) {
                b.delete && a.removePolicy(b)
            })
        }
        ,
        r.prototype.destroyTables = function(a) {
            var b = this;
            angular.forEach(b.policyDefinition.assembly, function(a) {
                a.table = null
            })
        }
        ,
        r.prototype.preparePayload = function() {
            var a = this;
            if (a.payload = {
                policyDescription: a.policyDescription,
                policyType: "feature",
                policyName: a.policyName,
                policyDefinition: {
                    assembly: []
                },
                isPolicyActivated: a.isPolicyActivated
            },
            a.policyDefinition.assembly.length) {
                var b, c = _.some(a.policyDefinition.assembly, function(c) {
                    if ("control" === c.type || "data" === c.type || "appRoute" === c.type || "cflowd" === c.type,
                    !c.table.data.length)
                        return b = c.name,
                        !0;
                    var d = {
                        definitionId: c.definitionId,
                        type: c.type
                    };
                    "control" !== c.type && "data" !== c.type && "appRoute" !== c.type && "cflowd" !== c.type || (d.entries = _.map(c.table.data, function(a) {
                        return {
                            direction: a.direction ? a.direction : void 0,
                            siteLists: _.pluck(a.siteLists, "listId"),
                            vpnLists: a.vpnLists ? _.pluck(a.vpnLists, "listId") : void 0
                        }
                    })),
                    a.payload.policyDefinition.assembly.push(d)
                });
                return c ? {
                    error: {
                        type: "error",
                        message: "Invalid policy",
                        details: "Cannot save policy. Add VPN List or Site List to component " + b
                    }
                } : a.payload
            }
            return {
                error: {
                    type: "error",
                    message: "Invalid policy",
                    details: "Policy is empty"
                }
            }
        }
        ,
        r.prototype.stringifyEntries = function(b, c) {
            return a.stringifyEntries(b, c)
        }
        ,
        r.prototype.list = function() {
            var b = this;
            b.serverCallInProgress = !0,
            a.getPolicyDefinitionsAsync().then(function(a) {
                b.serverCallInProgress = !1,
                b.listItems = a.data
            }, function(a) {
                b.serverCallInProgress = !1,
                angular.isObject(a) && k.checkNestedProperty(a, "error", "details") ? $log.error("Error occurred while saving table state: " + a.error.message + ":" + a.error.details) : $log.info("API error response needs to be updated to conform to company guidelines.")
            })
        }
        ,
        r.prototype.listAsync = function() {
            var b = this
              , c = n.defer();
            return b.serverCallInProgress = !0,
            a.getPolicyDefinitionsAsync().then(function(a) {
                b.serverCallInProgress = !1,
                b.listItems = a.data,
                c.resolve(b.listItems)
            }, function(a) {
                b.serverCallInProgress = !1,
                c.reject(a)
            }),
            c.promise
        }
        ,
        r.prototype.get = function(b) {
            var c = this;
            if (!l.allowReadAccess("Policy Configuration"))
                return j.error("Permission Denied."),
                !1;
            b ? c.policyId = b : 0;
            var d = n.defer();
            return c.serverCallInProgress = !0,
            a.get(c.getUrl, b || c.policyId).then(function(a) {
                c.serverCallInProgress = !1;
                var b;
                angular.extend(c, {
                    policyName: a.policyName,
                    policyType: a.policyType,
                    policyDescription: a.policyDescription,
                    isPolicyActivated: a.isPolicyActivated,
                    activated: a.isPolicyActivated
                }),
                c.policyDefinition.assembly.reset(),
                k.checkNestedProperty(a.policyDefinition, "assembly") && angular.forEach(a.policyDefinition.assembly, function(a) {
                    b = _.find(c.listItems, {
                        definitionId: a.definitionId
                    }),
                    b && (b.selected = !0,
                    c.appendPolicy(angular.extend(a, b)))
                }),
                d.resolve(a)
            }, function(a) {
                c.serverCallInProgress = !1,
                d.reject(a)
            }),
            d.promise
        }
        ,
        r.prototype.save = function(b) {
            var c = this;
            return b && angular.forEach(c.policyDefinition.assembly, function(a) {
                a.createTableInstance();
                var b = _.find(c.payload.policyDefinition.assembly, {
                    definitionId: a.definitionId
                });
                a.setTableData(b.entries || [], o.getInstance().listItems.concat(p.getInstance().listItems))
            }),
            l.allowAccess("Policy Configuration") ? c.policyId ? c.update() : a.create(c.resourceUrl, c.preparePayload(), {}) : (j.error("Permission Denied."),
            !1)
        }
        ,
        r.prototype.copy = function() {
            var b = this;
            return l.allowAccess("Policy Configuration") ? a.create(b.resourceUrl, {
                policyName: b.policyName,
                policyDescription: b.policyDescription,
                policyType: "feature",
                policyDefinition: b.policyDefinition,
                isPolicyActivated: b.isPolicyActivated
            }, {}) : (j.error("Permission Denied."),
            !1)
        }
        ,
        r.prototype.update = function() {
            var b = this;
            return l.allowAccess("Policy Configuration") ? a.update(b.resourceUrl, b.policyId, b.preparePayload(), {}) : (j.error("Permission Denied."),
            !1)
        }
        ,
        r.prototype.delete = function() {
            var b = this;
            return l.allowAccess("Policy Configuration") ? a.delete(b.resourceUrl, b.policyId) : (j.error("Permission Denied."),
            !1)
        }
        ,
        r.prototype.preview = function() {
            var b = this;
            return l.allowReadAccess("Policy Configuration") ? a.create(b.previewUrl, b.payload ? b.payload.policyDefinition : b.preparePayload().policyDefinition) : (j.error("Permission Denied."),
            !1)
        }
        ,
        r.prototype.previewById = function() {
            var b = this;
            return l.allowReadAccess("Policy Configuration") ? a.get(b.previewUrl, b.policyId) : (j.error("Permission Denied."),
            !1)
        }
        ,
        {
            getInstance: function(a) {
                return q || (q = new r(a)),
                q
            },
            deleteInstance: function() {
                q = null
            }
        }
    }
    angular.module("vManage").factory("PolicyAssembly", a),
    a.$inject = ["policyService", "Policy", "DataPolicy", "AppRoutePolicy", "ControlPolicy", "CflowdPolicy", "HubAndSpokePolicy", "MeshPolicy", "VpnMembershipPolicy", "notification", "appUtil", "rbac", "Table", "$q", "VPNListManager", "SiteListManager"]
}(),
function() {
    function a(a, b, c, d) {
        var e = function(b) {
            var c = this;
            b.type = "appRoute",
            a.apply(c, arguments),
            !b.defaultAction || angular.isDefined(b.defaultAction.action) && !b.defaultAction.action.slaClass ? c.defaultAction = {
                name: "Default Action",
                action: {
                    slaClass: null,
                    none: !0,
                    actionOrder: ["none"],
                    readOnly: !0,
                    enabled: !0
                }
            } : c.defaultAction = {
                name: "Default Action",
                action: {
                    slaClass: b.defaultAction.slaClass || b.defaultAction.action.slaClass,
                    none: null,
                    actionOrder: ["slaClass"],
                    readOnly: !0,
                    enabled: !0
                }
            },
            c.table = null,
            c.localAssemblyObj = {
                siteLists: [],
                vpnLists: []
            }
        };
        return e.prototype = new a({}),
        e.prototype.getDefaultAction = function() {
            var a = this;
            if ("none" != a.defaultAction.action.actionOrder[0])
                return {
                    type: "slaClass",
                    ref: a.defaultAction.action.slaClass.listId
                }
        }
        ,
        e.prototype.createTableInstance = function(a) {
            var e = this;
            e.table = new b({
                autoLoad: !0,
                toolbar: !1,
                columnResizing: !0,
                singleSelect: !0,
                enableSorting: !0,
                dataUid: "definitionId",
                toggleFirstRowOnLoad: !0,
                minRowsToShow: 3
            }),
            e.table.setNoDataMessage(""),
            e.table.createColumns([{
                dataType: "string",
                hideable: !1,
                property: "siteListsString",
                title: "Site List",
                cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP"data-ng-click="grid.appScope.viewList(row, $event, \'Site List\', \'siteListsString\')" id="view_site_list_{{rowRenderIndex}}">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
            }, {
                dataType: "string",
                hideable: !1,
                property: "vpnListsString",
                title: "VPN List",
                cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP"data-ng-click="grid.appScope.viewList(row, $event, \'VPN List\',\'vpnListsString\')" id="view_vpn_list_{{rowRenderIndex}}">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
            }]),
            (angular.isUndefined(a) || angular.isDefined(a) && !a) && e.table.createColumns([{
                title: "Action",
                displayName: "",
                property: "modify-row",
                editable: !1,
                dataType: "string",
                width: 50,
                hideable: !1,
                headerTemplate: "ui-grid/ui-grid-no-header",
                cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editGroupTasks_{{row.entity.name}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i><i class="material-icons md-14 pointerCursor blue" id="removeRow_{{row.entity.name}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</div>'
            }]),
            e.table.setAppScope({
                editRow: function(a, b, d) {
                    c.show({
                        templateUrl: "app/configuration/policy/assembly/modal/templates/updateAppRoutePolicy.html",
                        controller: "UpdateDataPolicyController",
                        controllerAs: "updatePolicyCtrl",
                        targetEvent: a,
                        resolve: {
                            selectedRow: function() {
                                return b.entity
                            },
                            policyName: function() {
                                return e.name || e.policyName
                            },
                            policyType: function() {
                                return e.type
                            },
                            stringifyEntries: function() {
                                return e.stringifyEntries
                            }
                        }
                    })
                },
                removeRow: function(a, b) {
                    a.grid.options.data.splice(b, 1)
                },
                viewList: function(a, b, e, f) {
                    var g = c.show({
                        templateUrl: "app/configuration/policy/lists/modal/views/viewListModal.html",
                        controller: "ViewListModalController",
                        targetEvent: b,
                        resolve: {
                            title: function() {
                                return e
                            },
                            list: function() {
                                return a.entity[f]
                            }
                        }
                    });
                    g.then(function(a) {}, function() {
                        d.info("Modal dismissed at: " + new Date)
                    })
                }
            })
        }
        ,
        e.prototype.setTableData = function(a, b) {
            var c = this;
            angular.forEach(a, function(a) {
                var d = []
                  , e = [];
                angular.forEach(a.siteLists, function(a) {
                    var c = _.find(b, {
                        listId: a
                    });
                    c && d.push(c)
                }),
                angular.forEach(a.vpnLists, function(a) {
                    var c = _.find(b, {
                        listId: a
                    });
                    c && e.push(c)
                }),
                c.table.data.push({
                    siteLists: d,
                    vpnLists: e,
                    siteListsString: c.stringifyEntries(d, "name"),
                    vpnListsString: c.stringifyEntries(e, "name")
                })
            })
        }
        ,
        e.prototype.clearLocalAssemblyObj = function() {
            var a = this;
            return a.localAssemblyObj = {
                siteLists: [],
                vpnLists: []
            },
            a.localAssemblyObj
        }
        ,
        e.prototype.setDefaultAction = function(a, b) {
            var c = this;
            "slaClass" === a.type && (c.defaultAction.slaClass = _.find(b, {
                listId: a.ref
            }) || a.ref,
            c.defaultAction.none = null,
            c.defaultAction.action.slaClass = _.find(b, {
                listId: a.ref
            }) || a.ref,
            c.defaultAction.action.actionOrder.reset(),
            c.defaultAction.action.actionOrder.push("slaClass"))
        }
        ,
        e
    }
    angular.module("vManage").factory("AppRoutePolicy", a),
    a.$inject = ["Policy", "Table", "$mdDialog", "$log"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        var i = function(b) {
            var c = this;
            b.type = "cflowd",
            a.apply(c, arguments),
            c.definition = {
                flowActiveTimeout: g.checkNestedProperty(b, "definition") ? b.definition.flowActiveTimeout : null,
                flowInactiveTimeout: g.checkNestedProperty(b, "definition") ? b.definition.flowInactiveTimeout : null,
                templateRefresh: g.checkNestedProperty(b, "definition") ? b.definition.templateRefresh : null,
                flowSamplingInterval: g.checkNestedProperty(b, "definition") ? b.definition.flowSamplingInterval : null,
                collectors: g.checkNestedProperty(b, "definition") ? b.definition.collectors : []
            },
            c.table = null,
            c.localAssemblyObj = {
                siteLists: []
            }
        };
        return i.prototype = new a({}),
        i.prototype.createCollectorTableInstance = function(a) {
            var d = this;
            d.table = new b({
                autoLoad: !0,
                toolbar: !1,
                columnResizing: !0,
                singleSelect: !0,
                enableSorting: !0,
                dataUid: "definitionId",
                toggleFirstRowOnLoad: !0,
                minRowsToShow: 3
            }),
            d.table.setNoDataMessage("");
            var e = [{
                dataType: "string",
                hideable: !1,
                property: "vpn",
                title: "VPN ID"
            }, {
                dataType: "string",
                hideable: !1,
                property: "address",
                title: "IP Address"
            }, {
                dataType: "number",
                hideable: !1,
                property: "port",
                title: "Port"
            }, {
                dataType: "string",
                hideable: !1,
                property: "transport",
                title: "Transport Protocol"
            }, {
                dataType: "string",
                hideable: !1,
                property: "sourceInterface",
                title: "Source Interface"
            }];
            a || e.push({
                title: "Action",
                displayName: "",
                property: "modify-row",
                editable: !1,
                dataType: "string",
                width: 50,
                hideable: !1,
                headerTemplate: "ui-grid/ui-grid-no-header",
                cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 pointerCursor blue" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</div>'
            }),
            d.table.createColumns(e),
            d.table.setAppScope({
                editRow: function(a, b, d) {
                    c.show({
                        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/modal/views/updateCflowdPolicy.html",
                        controller: "UpdateCflowdPolicyController",
                        controllerAs: "updatePolicyCtrl",
                        targetEvent: a,
                        resolve: {
                            selectedRow: function() {
                                return b
                            },
                            rowIndex: function() {
                                return d
                            }
                        }
                    }).then(function() {}, function() {})
                },
                removeRow: function(a, b) {
                    a.grid.options.data.splice(b, 1),
                    d.definition.collectors.splice(b, 1)
                }
            })
        }
        ,
        i.prototype.setCollectorTableData = function() {
            var a = this;
            angular.forEach(a.definition.collectors, function(b) {
                a.table.data.push({
                    vpn: b.vpn,
                    address: b.address,
                    port: b.port,
                    sourceInterface: b.sourceInterface,
                    transport: b.transport
                })
            })
        }
        ,
        i.prototype.createTableInstance = function(a) {
            var e = this;
            e.table = new b({
                autoLoad: !0,
                toolbar: !1,
                columnResizing: !0,
                singleSelect: !0,
                enableSorting: !0,
                dataUid: "definitionId",
                toggleFirstRowOnLoad: !0,
                minRowsToShow: 3
            }),
            e.table.setNoDataMessage(""),
            e.table.createColumns([{
                dataType: "string",
                hideable: !1,
                property: "siteListsString",
                title: "Site List",
                cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP"data-ng-click="grid.appScope.viewList(row, $event, \'Site List\', \'siteListsString\')" id="view_site_list_{{rowRenderIndex}}">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
            }]),
            (angular.isUndefined(a) || angular.isDefined(a) && !a) && e.table.createColumns([{
                title: "Action",
                displayName: "",
                property: "modify-row",
                editable: !1,
                dataType: "string",
                width: 50,
                hideable: !1,
                headerTemplate: "ui-grid/ui-grid-no-header",
                cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editGroupTasks_{{row.entity.name}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i><i class="material-icons md-14 pointerCursor blue" id="removeRow_{{row.entity.name}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</div>'
            }]),
            e.table.setAppScope({
                editRow: function(a, b, d) {
                    c.show({
                        templateUrl: "app/configuration/policy/assembly/modal/templates/updateAppRoutePolicy.html",
                        controller: "UpdateDataPolicyController",
                        controllerAs: "updatePolicyCtrl",
                        targetEvent: a,
                        resolve: {
                            selectedRow: function() {
                                return b.entity
                            },
                            policyName: function() {
                                return e.name || e.policyName
                            },
                            policyType: function() {
                                return e.type
                            },
                            stringifyEntries: function() {
                                return e.stringifyEntries
                            }
                        }
                    })
                },
                removeRow: function(a, b) {
                    a.grid.options.data.splice(b, 1)
                },
                viewList: function(a, b, e, f) {
                    var g = c.show({
                        templateUrl: "app/configuration/policy/lists/modal/views/viewListModal.html",
                        controller: "ViewListModalController",
                        targetEvent: b,
                        resolve: {
                            title: function() {
                                return e
                            },
                            list: function() {
                                return a.entity[f]
                            }
                        }
                    });
                    g.then(function(a) {}, function() {
                        d.info("Modal dismissed at: " + new Date)
                    })
                }
            })
        }
        ,
        i.prototype.setTableData = function(a, b) {
            var c = this;
            angular.forEach(a, function(a) {
                var d = [];
                angular.forEach(a.siteLists, function(a) {
                    var c = _.find(b, {
                        listId: a
                    });
                    c && d.push(c)
                }),
                c.table.data.push({
                    siteLists: d,
                    siteListsString: c.stringifyEntries(d, "name")
                })
            })
        }
        ,
        i.prototype.createCollectorObj = function() {
            return {
                vpn: "",
                address: "",
                port: "",
                transport: "",
                sourceInterface: ""
            }
        }
        ,
        i.prototype.clearLocalAssemblyObj = function() {
            var a = this;
            return a.localAssemblyObj = {
                siteLists: []
            },
            a.localAssemblyObj
        }
        ,
        i.prototype.preparePayload = function() {
            var a = this;
            a.payload = {
                name: a.name,
                type: "cflowd",
                description: a.description,
                definitionId: a.definitionId,
                definition: {
                    flowActiveTimeout: a.definition.flowActiveTimeout,
                    flowInactiveTimeout: a.definition.flowInactiveTimeout,
                    flowSamplingInterval: a.definition.flowSamplingInterval,
                    templateRefresh: a.definition.templateRefresh,
                    collectors: a.definition.collectors
                }
            };
            for (var b in a.payload.definition)
                "collectors" !== b && _.isNull(a.payload.definition[b]) && delete a.payload.definition[b];
            return a.payload
        }
        ,
        i.prototype.get = function(a) {
            var b = this
              , c = h.defer();
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            e.get(b.resourceUrl, a || b.definitionId).then(function(a) {
                angular.merge(b, a),
                b.setCollectorTableData(),
                c.resolve(b)
            }, function(a) {
                c.reject(a)
            }),
            c.promise
        }
        ,
        i.prototype.save = function() {
            var a = this;
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            a.definitionId ? a.update() : e.create(a.resourceUrl, a.preparePayload(), {})
        }
        ,
        i.prototype.copy = function(a) {
            var b = this;
            f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            a || notification.error("Policy DefinitionId missing.");
            var c = h.defer();
            return e.get(b.resourceUrl, a).then(function(a) {
                e.create(b.resourceUrl, {
                    name: b.name,
                    type: "cflowd",
                    description: b.description,
                    definition: {
                        flowActiveTimeout: a.definition.flowActiveTimeout,
                        flowInactiveTimeout: a.definition.flowInactiveTimeout,
                        flowSamplingInterval: a.definition.flowSamplingInterval,
                        templateRefresh: a.definition.templateRefresh,
                        collectors: a.definition.collectors
                    }
                }, {}).then(function(a) {
                    b.definitionId = a.definitionId,
                    c.resolve(b)
                }, function(a) {
                    c.reject(a)
                })
            }, function(a) {
                c.reject(a)
            }),
            c.promise
        }
        ,
        i.prototype.update = function() {
            var a = this;
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            e.update(a.resourceUrl, a.definitionId, a.preparePayload(), {})
        }
        ,
        i.prototype.delete = function() {
            var a = this;
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            e.delete(a.resourceUrl, a.definitionId)
        }
        ,
        i.prototype.preview = function() {
            var a = this;
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            e.getDataDefinitionPreview(a.type, a.preparePayload())
        }
        ,
        i.prototype.previewById = function() {
            var a = this;
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            e.getDataDefinitionPreviewById(a.type, a.definitionId)
        }
        ,
        i
    }
    angular.module("vManage").factory("CflowdPolicy", a),
    a.$inject = ["Policy", "Table", "$mdDialog", "$log", "policyService", "rbac", "appUtil", "$q"]
}(),
function() {
    function a(a, b, c, d) {
        var e = function(b) {
            var c = this;
            if (b.type = "control",
            a.apply(c, arguments),
            b.defaultAction) {
                var d = b.defaultAction.type;
                d && (c.defaultAction.action.actionOrder.reset(),
                c.defaultAction.action.actionOrder.push(b.defaultAction.type),
                c.defaultAction.action.accept = !!angular.equals(b.defaultAction.type, "accept") || null,
                c.defaultAction.action.reject = !!angular.equals(b.defaultAction.type, "reject") || null)
            } else
                c.defaultAction = {
                    name: "Default Action",
                    action: {
                        reject: !0,
                        accept: !1,
                        actionOrder: ["reject"],
                        readOnly: !1,
                        enabled: !0
                    }
                };
            c.table = null,
            c.localAssemblyObj = {
                in: {
                    siteLists: []
                },
                out: {
                    siteLists: []
                }
            }
        };
        return e.prototype = new a({}),
        e.prototype.createTableInstance = function(a) {
            var e = this;
            e.table = new b({
                autoLoad: !0,
                toolbar: !1,
                columnResizing: !0,
                singleSelect: !0,
                enableSorting: !0,
                dataUid: "definitionId",
                toggleFirstRowOnLoad: !0,
                minRowsToShow: 3
            }),
            e.table.setNoDataMessage(""),
            e.table.createColumns([{
                dataType: "string",
                hideable: !1,
                property: "direction",
                title: "Direction"
            }, {
                dataType: "string",
                hideable: !1,
                property: "siteListsString",
                title: "Site List",
                cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP"data-ng-click="grid.appScope.viewList(row, $event, \'Site List\', \'siteListsString\')" id="view_site_list_{{rowRenderIndex}}">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
            }]),
            (angular.isUndefined(a) || angular.isDefined(a) && !a) && e.table.createColumns([{
                title: "Action",
                displayName: "",
                property: "modify-row",
                editable: !1,
                dataType: "string",
                width: 50,
                hideable: !1,
                headerTemplate: "ui-grid/ui-grid-no-header",
                cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editGroupTasks_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 pointerCursor blue" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</div>'
            }]),
            e.table.setAppScope({
                editRow: function(a, b, d) {
                    c.show({
                        templateUrl: "app/configuration/policy/assembly/modal/templates/updateControlPolicy.html",
                        controller: "UpdateDataPolicyController",
                        controllerAs: "updatePolicyCtrl",
                        targetEvent: a,
                        resolve: {
                            selectedRow: function() {
                                return b.entity
                            },
                            policyName: function() {
                                return e.name || e.policyName
                            },
                            policyType: function() {
                                return e.type
                            },
                            stringifyEntries: function() {
                                return e.stringifyEntries
                            }
                        }
                    })
                },
                removeRow: function(a, b) {
                    a.grid.options.data.splice(b, 1)
                },
                viewList: function(a, b, e, f) {
                    var g = c.show({
                        templateUrl: "app/configuration/policy/lists/modal/views/viewListModal.html",
                        controller: "ViewListModalController",
                        targetEvent: b,
                        resolve: {
                            title: function() {
                                return a.entity.direction + " - " + e
                            },
                            list: function() {
                                return a.entity[f]
                            }
                        }
                    });
                    g.then(function(a) {}, function() {
                        d.info("Modal dismissed at: " + new Date)
                    })
                }
            })
        }
        ,
        e.prototype.setTableData = function(a, b) {
            var c = this;
            angular.forEach(a, function(a) {
                var d = []
                  , e = [];
                angular.forEach(a.siteLists, function(a) {
                    var c = _.find(b, {
                        listId: a
                    });
                    c && d.push(c)
                }),
                c.table.data.push({
                    direction: a.direction,
                    siteLists: d,
                    siteListsString: c.stringifyEntries(d, "name"),
                    vpnListsString: c.stringifyEntries(e, "name")
                })
            })
        }
        ,
        e.prototype.addEntries = function(a) {
            var c = this;
            return angular.isDefined(c.table) && c.table instanceof b && (c.localAssemblyObj.in.siteLists.length > 0 && c.table.data.push({
                direction: "in",
                siteLists: c.localAssemblyObj.in.siteLists,
                siteListsString: c.stringifyEntries(c.localAssemblyObj.in.siteLists, "name")
            }),
            c.localAssemblyObj.out.siteLists.length > 0 && c.table.data.push({
                direction: "out",
                siteLists: c.localAssemblyObj.out.siteLists,
                siteListsString: c.stringifyEntries(c.localAssemblyObj.out.siteLists, "name")
            })),
            c.clearLocalAssemblyObj(),
            !1
        }
        ,
        e.prototype.clearLocalAssemblyObj = function() {
            var a = this;
            return a.localAssemblyObj.in.siteLists = [],
            a.localAssemblyObj.out.siteLists = [],
            a.localAssemblyObj
        }
        ,
        e.prototype.setDefaultAction = function(a) {
            var b = this
              , a = a.type;
            b.defaultAction.accept = !1,
            b.defaultAction.reject = !1,
            b.defaultAction.action[a] = !0,
            b.defaultAction.action.actionOrder.reset(),
            b.defaultAction.action.actionOrder.push(a)
        }
        ,
        e
    }
    angular.module("vManage").factory("ControlPolicy", a),
    a.$inject = ["Policy", "Table", "$mdDialog", "$log"]
}(),
function() {
    function a(a, b, c, d) {
        var e = function(b) {
            var c = this;
            if (a.apply(c, arguments),
            b.defaultAction) {
                var d = b.defaultAction.type;
                d && (c.defaultAction.action.actionOrder.reset(),
                c.defaultAction.action.actionOrder.push(b.defaultAction.type),
                c.defaultAction.action.accept = !!angular.equals(b.defaultAction.type, "accept") || null,
                c.defaultAction.action.drop = !!angular.equals(b.defaultAction.type, "drop") || null)
            } else
                c.defaultAction = {
                    name: "Default Action",
                    action: {
                        accept: !1,
                        drop: !0,
                        actionOrder: ["drop"],
                        readOnly: !0,
                        enabled: !0
                    }
                };
            c.table = null,
            c.localAssemblyObj = {
                directionOptions: [{
                    label: "From Tunnel",
                    value: "tunnel"
                }, {
                    label: "From Service",
                    value: "service"
                }, {
                    label: "All",
                    value: "all"
                }],
                direction: "tunnel",
                siteLists: [],
                vpnLists: []
            }
        };
        return e.prototype = new a({}),
        e.prototype.createTableInstance = function(a) {
            var e = this;
            e.table = new b({
                autoLoad: !0,
                toolbar: !1,
                columnResizing: !0,
                singleSelect: !0,
                enableSorting: !0,
                dataUid: "definitionId",
                toggleFirstRowOnLoad: !0,
                minRowsToShow: 3
            }),
            e.table.setNoDataMessage(""),
            e.table.createColumns([{
                dataType: "string",
                hideable: !1,
                property: "siteListsString",
                title: "Site List",
                cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP"data-ng-click="grid.appScope.viewList(row, $event, \'Site List\', \'siteListsString\')" id="view_site_list_{{rowRenderIndex}}">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
            }, {
                dataType: "string",
                hideable: !1,
                property: "vpnListsString",
                title: "VPN List",
                cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP"data-ng-click="grid.appScope.viewList(row, $event, \'VPN List\', \'vpnListsString\')" id="view_vpn_list_{{rowRenderIndex}}">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
            }, {
                dataType: "string",
                hideable: !1,
                property: "direction",
                title: "Direction"
            }]),
            (angular.isUndefined(a) || angular.isDefined(a) && !a) && e.table.createColumns([{
                title: "Action",
                displayName: "",
                property: "modify-row",
                editable: !1,
                dataType: "string",
                width: 50,
                hideable: !1,
                headerTemplate: "ui-grid/ui-grid-no-header",
                cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editGroupTasks_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 pointerCursor blue" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</div>'
            }]),
            e.table.setAppScope({
                editRow: function(a, b, d) {
                    c.show({
                        templateUrl: "app/configuration/policy/assembly/modal/templates/updateDataPolicy.html",
                        controller: "UpdateDataPolicyController",
                        controllerAs: "updatePolicyCtrl",
                        targetEvent: a,
                        resolve: {
                            selectedRow: function() {
                                return b.entity
                            },
                            policyName: function() {
                                return e.name || e.policyName
                            },
                            policyType: function() {
                                return e.type
                            },
                            stringifyEntries: function() {
                                return e.stringifyEntries
                            }
                        }
                    })
                },
                removeRow: function(a, b) {
                    a.grid.options.data.splice(b, 1)
                },
                viewList: function(a, b, e, f) {
                    var g = c.show({
                        templateUrl: "app/configuration/policy/lists/modal/views/viewListModal.html",
                        controller: "ViewListModalController",
                        targetEvent: b,
                        resolve: {
                            title: function() {
                                return e
                            },
                            list: function() {
                                return a.entity[f]
                            }
                        }
                    });
                    g.then(function(a) {}, function() {
                        d.info("Modal dismissed at: " + new Date);
                    })
                }
            })
        }
        ,
        e.prototype.setTableData = function(a, b) {
            var c = this;
            angular.forEach(a, function(a) {
                var d = []
                  , e = [];
                angular.forEach(a.siteLists, function(a) {
                    var c = _.find(b, {
                        listId: a
                    });
                    c && d.push(c)
                }),
                angular.forEach(a.vpnLists, function(a) {
                    var c = _.find(b, {
                        listId: a
                    });
                    c && e.push(c)
                }),
                c.table.data.push({
                    direction: a.direction,
                    siteLists: d,
                    vpnLists: e,
                    siteListsString: c.stringifyEntries(d, "name"),
                    vpnListsString: c.stringifyEntries(e, "name")
                })
            })
        }
        ,
        e.prototype.clearLocalAssemblyObj = function() {
            var a = this;
            return a.localAssemblyObj = {
                directionOptions: [{
                    label: "From Tunnel",
                    value: "tunnel"
                }, {
                    label: "From Service",
                    value: "service"
                }, {
                    label: "All",
                    value: "all"
                }],
                direction: "tunnel",
                siteLists: [],
                vpnLists: []
            },
            a.localAssemblyObj
        }
        ,
        e
    }
    angular.module("vManage").factory("DataPolicy", a),
    a.$inject = ["Policy", "Table", "$mdDialog", "$log"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l) {
        var m = function(b) {
            var c = this;
            b.type = "hubAndSpoke",
            a.apply(c, arguments),
            c.definition = {
                vpnList: angular.isDefined(b.definition) ? b.definition.vpnList : {},
                subDefinitions: angular.isDefined(b.definition) ? b.definition.subDefinitions : []
            },
            c.siteLists = b.siteLists || [],
            c.vpnLists = b.vpnLists || [],
            c.hubSitesTable = null,
            c.spokeSitesTable = null,
            c.table = null
        };
        return m.prototype = new a({}),
        m.prototype.createSiteTableInstance = function(a, c) {
            var d = this;
            d[a] = new b({
                autoLoad: !0,
                toolbar: !1,
                columnResizing: !0,
                singleSelect: !0,
                enableSorting: !0,
                dataUid: "definitionId",
                toggleFirstRowOnLoad: !0,
                minRowsToShow: 2
            }),
            d[a].setNoDataMessage("");
            var e = [{
                dataType: "string",
                hideable: !1,
                property: "name",
                title: "Site Lists"
            }];
            c || e.push({
                title: "Action",
                displayName: "",
                property: "modify-row",
                editable: !1,
                dataType: "string",
                width: 50,
                hideable: !1,
                headerTemplate: "ui-grid/ui-grid-no-header",
                cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex,\'' + a + "')\">delete</div>"
            }),
            d[a].createColumns(e),
            d[a].setAppScope({
                removeRow: function(a, b, c) {
                    a.grid.options.data.splice(b, 1),
                    "hubSitesTable" === c ? (d.selectedHubAndSpoke.hubSites.splice(b, 1),
                    angular.forEach(d.selectedHubAndSpoke.spokeSites, function(a) {
                        a.hubSites.splice(b, 1)
                    })) : d.selectedHubAndSpoke.spokeSites.splice(b, 1)
                }
            })
        }
        ,
        m.prototype.setSiteTableData = function(a) {
            var b = this;
            b.hubSitesTable.setTableData(_.union(b.hubSitesTable.data, a.hubSites)),
            b.spokeSitesTable.setTableData(_.union(b.spokeSitesTable.data, a.spokeSites))
        }
        ,
        m.prototype.createTableInstance = function(a) {
            var c = this;
            c.table = new b({
                autoLoad: !0,
                toolbar: !1,
                columnResizing: !0,
                singleSelect: !0,
                enableSorting: !0,
                dataUid: "definitionId",
                toggleFirstRowOnLoad: !0,
                minRowsToShow: 3
            }),
            c.table.setNoDataMessage(""),
            c.table.createColumns([{
                dataType: "string",
                hideable: !1,
                property: "vpnListsString",
                title: "VPN List",
                cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP"data-ng-click="grid.appScope.viewList(row, $event, \'VPN List\',\'vpnListsString\')" id="view_vpn_list_{{rowRenderIndex}}">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
            }])
        }
        ,
        m.prototype.setTableData = function(a, b) {
            var c = this;
            angular.forEach(a, function(a) {
                var d = [];
                angular.forEach(a.vpnLists, function(a) {
                    var c = _.find(b, {
                        listId: a
                    });
                    c && d.push(c)
                }),
                c.table.data.push({
                    vpnLists: d,
                    vpnListsString: c.stringifyEntries(d, "name")
                })
            })
        }
        ,
        m.prototype.addHubAndSpokes = function() {
            var a = this;
            a.definition.subDefinitions.push({
                name: "My Hub-and-Spoke",
                hubSites: [],
                spokeSites: [],
                equalPreference: !0,
                advertiseTloc: !1,
                siteLists: angular.copy(a.siteLists),
                tlocLists: angular.copy(a.tlocLists),
                hubSiteList: {},
                spokeSiteList: {}
            })
        }
        ,
        m.prototype.preparePayload = function() {
            var a = this;
            return a.payload = {
                name: a.name,
                type: "hubAndSpoke",
                description: a.description,
                definitionId: a.definitionId,
                definition: {
                    vpnList: a.definition.vpnList.listId,
                    subDefinitions: a.parseSubDefinitions()
                }
            },
            a.payload
        }
        ,
        m.prototype.parseSubDefinitions = function() {
            var a = this
              , b = [];
            return angular.forEach(a.definition.subDefinitions, function(a) {
                var c = {};
                c.name = a.name,
                c.equalPreference = a.equalPreference,
                c.advertiseTloc = a.advertiseTloc,
                c.spokes = [],
                a.advertiseTloc && angular.isDefined(a.tlocList) && (c.tlocList = a.tlocList.listId),
                angular.forEach(a.spokeSites, function(a) {
                    var b = {};
                    b.siteList = a.listId,
                    b.equalPreference = c.equalPreference,
                    b.hubSiteSize = a.hubSites.length,
                    b.hubs = [],
                    angular.forEach(a.hubSites, function(a, c) {
                        var d = {};
                        d.siteList = a.listId,
                        b.equalPreference || (d.preference = "" + (20 * b.hubSiteSize - 10 * c)),
                        d.prefixLists = [],
                        angular.forEach(a.prefixList, function(a) {
                            d.prefixLists.push(a.listId)
                        }),
                        b.hubs.push(d)
                    }),
                    delete b.equalPreference,
                    delete b.hubSiteSize,
                    c.spokes.push(b)
                }),
                b.push(c)
            }),
            b
        }
        ,
        m.prototype.getListObj = function(a, b) {
            for (var c in a)
                if (b === a[c].listId)
                    return a[c]
        }
        ,
        m.prototype.get = function(a) {
            var b = this
              , c = h.defer();
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            e.get(b.resourceUrl, a || b.definitionId).then(function(a) {
                angular.merge(b, a),
                b.definition.vpnList = b.getListObj(b.vpnLists, b.definition.vpnList);
                var d = [];
                angular.forEach(b.definition.subDefinitions, function(a) {
                    var c = {};
                    c.name = a.name,
                    c.equalPreference = a.equalPreference,
                    c.advertiseTloc = a.advertiseTloc,
                    c.spokeSites = [],
                    c.hubSites = [],
                    c.tlocLists = angular.copy(b.tlocLists),
                    c.tlocList = b.getListObj(b.tlocLists, a.tlocList),
                    a.spokes.length > 0 && angular.forEach(a.spokes[0].hubs, function(a) {
                        c.hubSites.push(b.getListObj(b.siteLists, a.siteList))
                    }),
                    angular.forEach(a.spokes, function(a, d) {
                        c.spokeSites.push(b.getListObj(b.siteLists, a.siteList)),
                        c.spokeSites[d].hubSites = [],
                        angular.forEach(a.hubs, function(a) {
                            var e = angular.copy(b.siteLists)
                              , f = {};
                            f = b.getListObj(e, a.siteList),
                            f.prefixLists = angular.copy(b.prefixLists),
                            f.prefixList = [],
                            angular.forEach(a.prefixLists, function(a) {
                                f.prefixList.push(b.getListObj(b.prefixLists, a))
                            }),
                            c.spokeSites[d].hubSites.push(f)
                        })
                    }),
                    c.siteLists = b.siteLists,
                    c.vpnLists = b.vpnLists,
                    d.push(c)
                }),
                b.definition.subDefinitions = d,
                c.resolve(b)
            }, function(a) {
                c.reject(a)
            }),
            c.promise
        }
        ,
        m.prototype.save = function() {
            var a = this;
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            a.definitionId ? a.update() : e.create(a.resourceUrl, a.preparePayload(), {})
        }
        ,
        m.prototype.copy = function(a) {
            var b = this;
            f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            a || notification.error("Policy DefinitionId missing.");
            var c = h.defer();
            return e.get(b.resourceUrl, a).then(function(a) {
                e.create(b.resourceUrl, {
                    name: b.name,
                    type: "hubAndSpoke",
                    description: b.description,
                    definition: a.definition
                }, {}).then(function(a) {
                    b.definitionId = a.definitionId,
                    c.resolve(b)
                }, function(a) {
                    c.reject(a)
                })
            }, function(a) {
                c.reject(a)
            }),
            c.promise
        }
        ,
        m.prototype.update = function() {
            var a = this;
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            e.update(a.resourceUrl, a.definitionId, a.preparePayload(), {})
        }
        ,
        m.prototype.delete = function() {
            var a = this;
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            e.delete(a.resourceUrl, a.definitionId)
        }
        ,
        m.prototype.preview = function() {
            var a = this;
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            e.getDataDefinitionPreview(a.type, a.preparePayload())
        }
        ,
        m.prototype.previewById = function() {
            var a = this;
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            e.getDataDefinitionPreviewById(a.type, a.definitionId)
        }
        ,
        m.prototype.getLists = function() {
            var a = h.defer();
            return h.all([i.getInstance().listAsync(), j.getInstance().listAsync(), k.getInstance().listAsync(), l.getInstance().listAsync()]).then(function(b) {
                a.resolve(b)
            }, function(b) {
                a.reject(err),
                d.info("API error response needs to be updated to confirm to company guidelines."),
                notification.error("Error occurred while retrieving vpn list or site list")
            }),
            a.promise
        }
        ,
        m
    }
    angular.module("vManage").factory("HubAndSpokePolicy", a),
    a.$inject = ["Policy", "Table", "$mdDialog", "$log", "policyService", "rbac", "appUtil", "$q", "VPNListManager", "SiteListManager", "PrefixListManager", "TLOCListManager"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        var k = function(b) {
            var c = this;
            b.type = "mesh",
            a.apply(c, arguments),
            c.definition = {
                vpnList: g.checkNestedProperty(b, "definition", "vpnList") ? b.definition.vpnList : {},
                regions: g.checkNestedProperty(b, "definition", "regions") ? b.definition.regions : []
            },
            c.vpnLists = b.vpnLists || [],
            c.siteLists = b.siteLists || [],
            c.table = null
        };
        return k.prototype = new a({}),
        k.prototype.createSiteTableInstance = function(a) {
            var d = this;
            d.table = new b({
                autoLoad: !0,
                toolbar: !1,
                columnResizing: !0,
                singleSelect: !0,
                enableSorting: !0,
                dataUid: "definitionId",
                toggleFirstRowOnLoad: !0,
                minRowsToShow: 3
            }),
            d.table.setNoDataMessage("");
            var e = [{
                dataType: "string",
                hideable: !1,
                property: "name",
                title: "Mesh Region Name"
            }, {
                dataType: "string",
                hideable: !1,
                property: "siteLists",
                title: "Site List"
            }];
            a || e.push({
                title: "Action",
                displayName: "",
                property: "modify-row",
                editable: !1,
                dataType: "string",
                width: 50,
                hideable: !1,
                headerTemplate: "ui-grid/ui-grid-no-header",
                cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 pointerCursor blue" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</div>'
            }),
            d.table.createColumns(e),
            d.table.setAppScope({
                editRow: function(a, b, e) {
                    c.show({
                        templateUrl: " app/configuration/policy/centralizedPolicy/topology/control/mesh/modal/views/updateMeshPolicy.html",
                        controller: "UpdateMeshPolicyController",
                        controllerAs: "updatePolicyCtrl",
                        targetEvent: a,
                        resolve: {
                            selectedRow: function() {
                                return b
                            },
                            rowIndex: function() {
                                return e
                            }
                        }
                    }).then(function(a) {
                        d.definition.regions[a.index].sites = a.sites
                    }, function() {})
                },
                removeRow: function(a, b) {
                    a.grid.options.data.splice(b, 1),
                    d.definition.regions.splice(b, 1)
                }
            })
        }
        ,
        k.prototype.setSiteTableData = function() {
            var a = this;
            a.table.setTableData(a.definition.regions)
        }
        ,
        k.prototype.createTableInstance = function() {
            var a = this;
            a.table = new b({
                autoLoad: !0,
                toolbar: !1,
                columnResizing: !0,
                singleSelect: !0,
                enableSorting: !0,
                dataUid: "definitionId",
                toggleFirstRowOnLoad: !0,
                minRowsToShow: 3
            }),
            a.table.setNoDataMessage(""),
            a.table.createColumns([{
                dataType: "string",
                hideable: !1,
                property: "vpnListsString",
                title: "VPN List",
                cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP"data-ng-click="grid.appScope.viewList(row, $event, \'VPN List\',\'vpnListsString\')" id="view_vpn_list_{{rowRenderIndex}}">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
            }])
        }
        ,
        k.prototype.setTableData = function(a, b) {
            var c = this;
            angular.forEach(a, function(a) {
                var d = [];
                angular.forEach(a.vpnLists, function(a) {
                    var c = _.find(b, {
                        listId: a
                    });
                    c && d.push(c)
                }),
                c.table.data.push({
                    vpnLists: d,
                    vpnListsString: c.stringifyEntries(d, "name")
                })
            })
        }
        ,
        k.prototype.createMeshObj = function() {
            return {
                name: "",
                siteLists: []
            }
        }
        ,
        k.prototype.preparePayload = function() {
            var a = this;
            a.payload = {
                name: a.name,
                type: "mesh",
                description: a.description,
                definition: {
                    vpnList: a.definition.vpnList.listId,
                    regions: []
                }
            };
            var b = angular.copy(a.definition.regions);
            return angular.forEach(b, function(a) {
                a.siteLists = [],
                angular.forEach(a.sites, function(b) {
                    a.siteLists.push(b.listId)
                }),
                delete a.sites
            }),
            a.payload.definition.regions = b,
            a.payload
        }
        ,
        k.prototype.getListObj = function(a, b) {
            for (var c in a)
                if (b === a[c].listId)
                    return a[c]
        }
        ,
        k.prototype.get = function(a) {
            var b = this
              , c = h.defer();
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            e.get(b.resourceUrl, a || b.definitionId).then(function(a) {
                angular.merge(b, a),
                b.definition.vpnList = b.getListObj(b.vpnLists, b.definition.vpnList),
                angular.forEach(b.definition.regions, function(a) {
                    a.sites = [],
                    angular.forEach(a.siteLists, function(c) {
                        a.sites.push(b.getListObj(b.siteLists, c))
                    }),
                    a.siteLists = e.stringifyEntries(a.sites, "name")
                }),
                b.setSiteTableData(),
                c.resolve(b)
            }, function(a) {
                c.reject(a)
            }),
            c.promise
        }
        ,
        k.prototype.save = function() {
            var a = this;
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            a.definitionId ? a.update() : e.create(a.resourceUrl, a.preparePayload(), {})
        }
        ,
        k.prototype.copy = function(a) {
            var b = this;
            f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            a || notification.error("Policy DefinitionId missing.");
            var c = h.defer();
            return e.get(b.resourceUrl, a).then(function(a) {
                e.create(b.resourceUrl, {
                    name: b.name,
                    type: "mesh",
                    description: b.description,
                    definition: a.definition
                }, {}).then(function(a) {
                    b.definitionId = a.definitionId,
                    c.resolve(b)
                }, function(a) {
                    c.reject(a)
                })
            }, function(a) {
                c.reject(a)
            }),
            c.promise
        }
        ,
        k.prototype.update = function() {
            var a = this;
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            e.update(a.resourceUrl, a.definitionId, a.preparePayload(), {})
        }
        ,
        k.prototype.saveMeshRegionList = function(a) {
            var b = this
              , c = [];
            angular.forEach(a.siteLists, function(a) {
                c.push(a.name)
            }),
            a.sites = a.siteLists,
            a.siteLists = c,
            a.siteLists = e.stringifyEntries(a.sites, "name"),
            b.definition.regions.push(a),
            b.table.data.push(a),
            g.clearSelectedList(b.siteLists)
        }
        ,
        k.prototype.delete = function() {
            var a = this;
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            e.delete(a.resourceUrl, a.definitionId)
        }
        ,
        k.prototype.preview = function() {
            var a = this;
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            e.getDataDefinitionPreview(a.type, a.preparePayload())
        }
        ,
        k.prototype.previewById = function() {
            var a = this;
            return f.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            e.getDataDefinitionPreviewById(a.type, a.definitionId)
        }
        ,
        k.prototype.getLists = function() {
            var a = h.defer()
              , b = this;
            return h.all([i.getInstance().listAsync(), j.getInstance().listAsync()]).then(function(c) {
                b.vpnLists = c[0],
                b.siteLists = c[1],
                a.resolve(b)
            }, function(b) {
                d.info("API error response needs to be updated to confirm to company guidelines."),
                notification.error("Error occurred while retrieving vpn list or site list"),
                a.reject()
            }),
            a.promise
        }
        ,
        k
    }
    angular.module("vManage").factory("MeshPolicy", a),
    a.$inject = ["Policy", "Table", "$mdDialog", "$log", "policyService", "rbac", "appUtil", "$q", "VPNListManager", "SiteListManager"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
        var p = function(a) {
            var b = this;
            b.definitionId = a.id || a.definitionId,
            b.name = a.name || a.policyName,
            b.description = a.description || a.policyDescription,
            b.activatedId = a.activatedId || void 0,
            b.type = a.type || a.policyType || "data",
            b.sequenceTypeOptions = a.sequenceTypeOptions || [],
            b.sequences = a.sequences || [],
            b.defaultAction = a.defaultAction || {
                type: "drop"
            },
            b.resourceUrl = a.url || "/dataservice/template/policy/definition/" + b.type.toLowerCase(),
            b.entries = a.entries || [],
            b.runningConfig = a.runningConfig || void 0
        };
        return p.prototype.appendSequence = function(a) {
            var b = this;
            if (a instanceof c)
                b.sequences.push(a);
            else
                switch (a.type || a.sequenceType) {
                case "applicationFirewall":
                    b.sequences.push(new d(a));
                    break;
                case "appRoute":
                    b.sequences.push(new e(a));
                    break;
                case "qos":
                    b.sequences.push(new f(a));
                    break;
                case "route":
                    b.sequences.push(new g(a));
                    break;
                case "serviceChaining":
                    b.sequences.push(new h(a));
                    break;
                case "tloc":
                    b.sequences.push(new i(a));
                    break;
                case "trafficEngineering":
                    b.sequences.push(new j(a));
                    break;
                default:
                    b.sequences.push(new c(a))
                }
            return b.sequences[b.sequences.length - 1]
        }
        ,
        p.prototype.addEntries = function(a) {
            var b = this;
            return angular.isDefined(b.table) && b.table instanceof o && b.table.data.push(b.localAssemblyObj),
            b.clearLocalAssemblyObj(),
            !1
        }
        ,
        p.prototype.getCopyNumber = function(a, b) {
            var c = angular.copy(b);
            if (_.includes(c, " Copy")) {
                var d = b.lastIndexOf(" Copy");
                c = b.substring(0, d)
            }
            a = _.sortBy(a, "name"),
            angular.forEach(a, function(a) {
                angular.isUndefined(a.copyNumber) && (a.copyNumber = 0)
            });
            var e = _.pluck(_.map(a, function(a) {
                if (_.includes(a.name, c))
                    return a
            }), "copyNumber")
              , f = 0
              , g = -1
              , h = !0;
            e.length > 2 ? angular.forEach(e, function(a) {
                h && (angular.equals(a, f) || (g = f,
                h = !1),
                f++)
            }) : e.length > 1 ? (e = e.sort(),
            g = e[1] + 1) : angular.equals(e.length, 1) && (g = e[0] + 1),
            angular.equals(g, -1) && e.length > 0 && (g = e.length);
            var i = {
                name: c + " Copy",
                copyNumber: g
            };
            return g > 1 && (i.name += " " + g),
            i
        }
        ,
        p.prototype.copySequence = function(a, b) {
            var c = this;
            if (b)
                var d = b;
            else
                var d = c.sequences;
            a.copy = !1;
            var e;
            return e = _.findIndex(d, function(b) {
                return angular.equals(b, a)
            }),
            e > -1 ? (c.copySequenceByIndex(e, b),
            !0) : void k.warning("Error occurred while copying sequence.")
        }
        ,
        p.prototype.copySequenceByIndex = function(a, b) {
            var c = this;
            if (b)
                var d = b;
            else
                var d = c.sequences;
            var e = angular.copy(d[a])
              , f = c.getCopyNumber(angular.copy(d), e.name);
            e.name = f.name,
            e.copyNumber = f.copyNumber,
            d.splice(a + 1, 0, e)
        }
        ,
        p.prototype.removeSequence = function(a, b) {
            var c = this;
            if (b)
                var d = b;
            else
                var d = c.sequences;
            var e;
            return e = _.findIndex(d, function(b) {
                return angular.equals(b, a)
            }),
            e > -1 ? (c.removeSequenceByIndex(e, b),
            e) : void k.warning("Error occurred while removing sequence.")
        }
        ,
        p.prototype.removeSequenceByIndex = function(a, b) {
            var c = this;
            if (b)
                var d = b;
            else
                var d = c.sequences;
            d.splice(a, 1)
        }
        ,
        p.prototype.refreshSequence = function(a) {
            var b = this;
            a.delete ? b.removeSequence(a) : a.copy && b.copySequence(a)
        }
        ,
        p.prototype.refreshSequences = function() {
            var a = this;
            angular.forEach(a.sequences, function(b) {
                b.delete ? a.removeSequence(b) : b.copy && a.copySequence(b)
            })
        }
        ,
        p.prototype.getDefaultAction = function() {
            var a = this;
            return {
                type: a.defaultAction.action.actionOrder[0]
            }
        }
        ,
        p.prototype.setDefaultAction = function(a) {
            var b = this
              , a = a.type;
            b.defaultAction.accept = !1,
            b.defaultAction.drop = !1,
            b.defaultAction.action[a] = !0,
            b.defaultAction.action.actionOrder.reset(),
            b.defaultAction.action.actionOrder.push(a)
        }
        ,
        p.prototype.preparePayload = function() {
            var a = this
              , b = 1;
            return a.payload = {
                name: a.name,
                type: a.type,
                description: a.description || "Testing",
                defaultAction: a.getDefaultAction(),
                sequences: []
            },
            angular.forEach(a.sequences, function(c) {
                c.preparePayload(),
                angular.forEach(c.rules, function(d) {
                    a.payload.sequences.push(angular.extend({
                        sequenceId: b,
                        sequenceName: c.name,
                        baseAction: d.baseAction,
                        sequenceType: c.type
                    }, d.payload)),
                    b += 10
                })
            }),
            a.payload
        }
        ,
        p.prototype.get = function(b, c) {
            var d = this
              , e = n.defer();
            return c && c.length || (c = []),
            m.allowReadAccess("Policy Configuration") ? (a.get(d.resourceUrl, b || d.definitionId).then(function(a) {
                var b, f, g = {
                    name: void 0,
                    type: void 0
                };
                angular.merge(d, a),
                a.defaultAction ? d.setDefaultAction(a.defaultAction, c) : 0,
                d.sequences.reset(),
                a.sequences && (angular.forEach(a.sequences, function(a) {
                    (a.sequenceName !== g.name || a.sequenceName === g.name && a.sequenceType !== g.type) && (g = {
                        name: a.sequenceName,
                        type: a.sequenceType
                    },
                    b = d.appendSequence(a)),
                    f = b.appendRule(a),
                    f.readOnly = !0,
                    f.valid = !0,
                    f.baseAction = a.baseAction,
                    f.match.matchOrder.reset(),
                    f.action.actionOrder.reset(),
                    f.transformBaseAction(a.baseAction),
                    f.transformMatch(a.match, c),
                    f.transformAction(a.actions, c)
                }),
                angular.forEach(d.sequences, function(a) {
                    a.renumberRules()
                })),
                e.resolve(d)
            }, function(a) {
                e.reject(a)
            }),
            e.promise) : (k.error("Permission Denied."),
            !1)
        }
        ,
        p.prototype.save = function() {
            var b = this;
            return m.allowAccess("Policy Configuration") ? b.definitionId ? b.update() : a.create(b.resourceUrl, b.preparePayload(), {}) : (k.error("Permission Denied."),
            !1)
        }
        ,
        p.prototype.copy = function(b) {
            var c = this;
            if (!m.allowAccess("Policy Configuration"))
                return k.error("Permission Denied."),
                !1;
            b || k.error("Policy DefinitionId missing.");
            var d = n.defer();
            return a.get(c.resourceUrl, b).then(function(b) {
                a.create(c.resourceUrl, {
                    name: c.name,
                    type: c.type,
                    description: c.description,
                    defaultAction: b.defaultAction,
                    sequences: b.sequences
                }, {}).then(function(a) {
                    c.definitionId = a.definitionId,
                    d.resolve(c)
                }, function(a) {
                    d.reject(a)
                })
            }, function(a) {
                d.reject(a)
            }),
            d.promise
        }
        ,
        p.prototype.update = function() {
            var b = this;
            return m.allowAccess("Policy Configuration") ? a.update(b.resourceUrl, b.definitionId, b.preparePayload(), {}) : (k.error("Permission Denied."),
            !1)
        }
        ,
        p.prototype.delete = function() {
            var b = this;
            return m.allowAccess("Policy Configuration") ? a.delete(b.resourceUrl, b.definitionId) : (k.error("Permission Denied."),
            !1)
        }
        ,
        p.prototype.preview = function() {
            var b = this;
            return m.allowReadAccess("Policy Configuration") ? a.getDataDefinitionPreview(b.type, b.preparePayload()) : (k.error("Permission Denied."),
            !1)
        }
        ,
        p.prototype.previewById = function() {
            var b = this;
            return m.allowReadAccess("Policy Configuration") ? a.getDataDefinitionPreviewById(b.type, b.definitionId) : (k.error("Permission Denied."),
            !1)
        }
        ,
        p.prototype.stringifyEntries = function(b, c) {
            return a.stringifyEntries(b, c)
        }
        ,
        p.prototype.getPolicyById = function(b, c) {
            return a.getPolicyDefinitionById(b, c)
        }
        ,
        p
    }
    angular.module("vManage").factory("Policy", a),
    a.$inject = ["policyService", "policyConstants", "PolicySequence", "ApplicationFirewallPolicySequence", "AppRoutePolicySequence", "QoSPolicySequence", "RoutePolicySequence", "ServiceChainingPolicySequence", "TLOCPolicySequence", "TrafficEngineeringPolicySequence", "notification", "appUtil", "rbac", "$q", "Table"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        var k = function(a) {
            var b = this;
            a.type = "vpnMembershipGroup",
            j.apply(b, arguments),
            b.definition = {
                sites: angular.isDefined(a.definition) ? a.definition.sites : []
            },
            b.table = null
        };
        return k.prototype = new j({}),
        k.prototype.createTableInstance = function() {
            var b = this;
            b.table = new a({
                autoLoad: !0,
                toolbar: !1,
                columnResizing: !0,
                singleSelect: !0,
                enableSorting: !0,
                dataUid: "definitionId",
                toggleFirstRowOnLoad: !0,
                minRowsToShow: 3
            }),
            b.table.setNoDataMessage(""),
            b.table.createColumns([{
                dataType: "string",
                hideable: !1,
                property: "siteListsString",
                title: "Site List",
                cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP"data-ng-click="grid.appScope.viewList(row, $event, \'Site List\', \'siteListsString\')" id="view_site_list_{{rowRenderIndex}}">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
            }, {
                dataType: "string",
                hideable: !1,
                property: "vpnListsString",
                title: "VPN List",
                cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP"data-ng-click="grid.appScope.viewList(row, $event, \'VPN List\',\'vpnListsString\')" id="view_vpn_list_{{rowRenderIndex}}">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
            }])
        }
        ,
        k.prototype.setTableData = function(a, b) {
            var c = this;
            angular.forEach(a, function(a) {
                var d = []
                  , e = [];
                angular.forEach(a.siteLists, function(a) {
                    var c = _.find(b, {
                        listId: a
                    });
                    c && d.push(c)
                }),
                angular.forEach(a.vpnLists, function(a) {
                    var c = _.find(b, {
                        listId: a
                    });
                    c && e.push(c)
                }),
                c.table.data.push({
                    siteLists: d,
                    vpnLists: e,
                    siteListsString: c.stringifyEntries(d, "name"),
                    vpnListsString: c.stringifyEntries(e, "name")
                })
            })
        }
        ,
        k.prototype.preparePayload = function() {
            var a = this;
            return a.payload = {
                name: a.name,
                type: "vpnMembershipGroup",
                definitionId: a.definitionId,
                description: a.description,
                definition: {
                    sites: []
                }
            },
            angular.forEach(a.definition.sites, function(b) {
                a.payload.definition.sites.push({
                    siteList: b.siteList.listId,
                    vpnList: _.pluck(b.vpnList, "listId")
                })
            }),
            a.payload
        }
        ,
        k.prototype.getListObj = function(a, b) {
            for (var c in a)
                if (b === a[c].listId)
                    return a[c]
        }
        ,
        k.prototype.get = function(a) {
            var b = this
              , c = g.defer();
            return e.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            d.get("dataservice/template/policy/definition/vpnmembershipgroup", a).then(function(a) {
                angular.merge(b, a);
                var d = [];
                angular.forEach(a.definition.sites, function(a) {
                    var c = []
                      , e = {};
                    angular.forEach(a.vpnList, function(a) {
                        c.push(b.getListObj(b.vpnLists, a))
                    });
                    var f = angular.copy(b.vpnLists);
                    angular.forEach(f, function(b) {
                        angular.forEach(a.vpnList, function(a) {
                            b.listId === a && (b.selected = !0)
                        })
                    }),
                    e.vpnList = c,
                    e.vpnLists = f,
                    e.siteList = b.getListObj(b.siteLists, a.siteList),
                    e.siteLists = angular.copy(b.siteLists),
                    d.push(e)
                }),
                b.definition.sites = d,
                c.resolve(a)
            }, function(a) {
                c.reject(a)
            }),
            c.promise
        }
        ,
        k.prototype.save = function() {
            var a = this;
            return e.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            a.definitionId ? a.update() : d.create(a.resourceUrl, a.preparePayload(), {})
        }
        ,
        k.prototype.copy = function(a) {
            var b = this;
            e.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            a || notification.error("Policy DefinitionId missing.");
            var c = g.defer();
            return d.get(b.resourceUrl, a).then(function(a) {
                d.create(b.resourceUrl, {
                    name: b.name,
                    type: "vpnMembershipGroup",
                    description: b.description,
                    definition: a.definition
                }, {}).then(function(a) {
                    c.resolve(b)
                }, function(a) {
                    c.reject(a)
                })
            }, function(a) {
                c.reject(a)
            }),
            c.promise
        }
        ,
        k.prototype.update = function() {
            var a = this;
            return e.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            d.update(a.resourceUrl, a.definitionId, a.preparePayload(), {})
        }
        ,
        k.prototype.delete = function() {
            var a = this;
            return e.allowAccess("Policy Configuration") || notification.error("Permission Denied."),
            d.delete(a.resourceUrl, a.definitionId)
        }
        ,
        k.prototype.selectListItem = function(a, b) {
            angular.forEach(a, function(a) {
                a.listId === b && (a.selected = !0)
            })
        }
        ,
        k.prototype.getLists = function() {
            var a = g.defer();
            return g.all([h.getInstance().listAsync(), i.getInstance().listAsync()]).then(function(b) {
                a.resolve(b)
            }, function(b) {
                c.info("API error response needs to be updated to confirm to company guidelines."),
                notification.error("Error occurred while retrieving vpn list or site list"),
                a.reject()
            }),
            a.promise
        }
        ,
        k
    }
    angular.module("vManage").factory("VpnMembershipPolicy", a),
    a.$inject = ["Table", "$mdDialog", "$log", "policyService", "rbac", "appUtil", "$q", "VPNListManager", "SiteListManager", "Policy"]
}(),
angular.module("vManage").factory("policyService", policyService),
policyService.$inject = ["restService", "apiConstants", "$q"],
function() {
    function a(a) {
        var b = function(b) {
            a.apply(this, arguments),
            this.match = {
                appList: null,
                destinationIp: null,
                destinationPort: null,
                destinationDataPrefixList: null,
                dscp: null,
                packetLength: null,
                plp: null,
                protocol: null,
                sourceIp: null,
                sourcePort: null,
                sourceDataPrefixList: null,
                tcp: null,
                matchOrder: [],
                readOnly: !1,
                enabled: !0
            },
            this.action = {
                accept: null,
                drop: !0,
                count: null,
                log: !1,
                actionOrder: ["drop"],
                readOnly: !1,
                enabled: !1
            },
            this.payload = {
                match: {
                    entries: []
                },
                actions: []
            }
        };
        return b.prototype = new a({}),
        b.prototype.transformAction = function(a) {
            var b, c = this;
            angular.forEach(a, function(a) {
                b = a.type,
                _.indexOf(["log"], b) > -1 ? c.action[b] = !0 : c.action[b] = a.parameter,
                c.action.actionOrder.push(b)
            }),
            c.action.actionOrder = _.unique(c.action.actionOrder)
        }
        ,
        b.prototype.prepareActionPayload = function(a) {
            var b = this;
            return b.payload = a,
            angular.forEach(b.action.actionOrder, function(a) {
                _.indexOf(["accept", "drop"], a) > -1 ? b.baseAction = a : _.indexOf(["log"], a) > -1 ? b.payload.actions.push({
                    type: a,
                    parameter: ""
                }) : b.payload.actions.push({
                    type: a,
                    parameter: String(b.action[a])
                })
            }),
            b.payload
        }
        ,
        b
    }
    angular.module("vManage").factory("ApplicationFirewallPolicyRule", a),
    a.$inject = ["PolicyRule"]
}(),
function() {
    function a(a, b) {
        var c = function(b) {
            a.apply(this, arguments),
            this.match = {
                appList: null,
                dnsAppList: null,
                dns: null,
                destinationIp: null,
                destinationPort: null,
                destinationDataPrefixList: null,
                dscp: null,
                plp: null,
                protocol: null,
                sourceIp: null,
                sourcePort: null,
                sourceDataPrefixList: null,
                matchOrder: [],
                readOnly: !1,
                enabled: !0
            },
            this.action = {
                count: null,
                log: !1,
                slaClass: {
                    name: null,
                    preferredColor: [],
                    strict: !1
                },
                backupSlaPreferredColor: [],
                actionOrder: [],
                readOnly: !1,
                enabled: !1
            },
            this.baseAction = void 0
        };
        return c.prototype = new a({}),
        c.prototype.transformAction = function(a, c) {
            var d, e = this;
            angular.forEach(a, function(a) {
                return d = a.type,
                "slaClass" === d ? (angular.forEach(a.parameter, function(a) {
                    d = a.field,
                    "name" === d ? e.action.slaClass[d] = _.find(c, {
                        listId: a.ref
                    }) || a.ref : "preferredColor" === d ? e.action.slaClass[d] = _.map(a.value.split(" "), function(a) {
                        return _.find(b.colorOptions, {
                            key: a
                        })
                    }) : "strict" === d && (e.action.slaClass[d] = !0)
                }),
                void e.action.actionOrder.push("slaClass")) : (_.indexOf(["backupSlaPreferredColor"], d) > -1 ? e.action[d] = _.map(a.parameter.split(" "), function(a) {
                    return _.find(b.colorOptions, {
                        key: a
                    })
                }) : _.indexOf(["log"], d) > -1 ? e.action[d] = !0 : e.action[d] = a.parameter,
                void e.action.actionOrder.push(d))
            }),
            e.action.actionOrder = _.unique(e.action.actionOrder)
        }
        ,
        c.prototype.transformBaseAction = function(a) {}
        ,
        c.prototype.prepareActionPayload = function(a) {
            var b = this;
            return b.payload = a,
            angular.forEach(b.action.actionOrder, function(a) {
                var c;
                _.indexOf(["log"], a) > -1 ? b.payload.actions.push({
                    type: a,
                    parameter: ""
                }) : _.indexOf(["backupSlaPreferredColor"], a) > -1 ? b.payload.actions.push({
                    type: a,
                    parameter: _.pluck(b.action[a], "name").join(" ")
                }) : _.indexOf(["slaClass"], a) > -1 ? (c = [{
                    field: "name",
                    ref: b.action[a].name.listId
                }],
                b.action[a].preferredColor.length && c.push({
                    field: "preferredColor",
                    value: _.pluck(b.action[a].preferredColor, "name").join(" ")
                }),
                b.action[a].strict && "false" !== b.action[a].strict && c.push({
                    field: "strict"
                }),
                b.payload.actions.push({
                    type: a,
                    parameter: c
                })) : b.payload.actions.push({
                    type: a,
                    parameter: String(b.action[a])
                })
            }),
            b.payload
        }
        ,
        c
    }
    angular.module("vManage").factory("AppRoutePolicyRule", a),
    a.$inject = ["PolicyRule", "colors"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        var k = {
            appList: null,
            dnsAppList: null,
            dns: null,
            destinationIp: null,
            destinationPort: null,
            destinationDataPrefixList: null,
            dscp: null,
            packetLength: null,
            plp: {},
            protocol: null,
            sourceIp: null,
            sourcePort: null,
            sourceDataPrefixList: null,
            tcp: null,
            matchOrder: [],
            readOnly: !1,
            enabled: !0
        }
          , l = {
            accept: null,
            drop: !0,
            set: {
                dscp: null,
                forwardingClass: null,
                localTloc: {
                    color: null,
                    encap: null
                },
                localTlocList: {
                    color: [],
                    encap: [],
                    restrict: !1
                },
                nextHop: null,
                policer: null,
                service: {
                    type: null,
                    vpn: null,
                    tloc: {
                        ip: null,
                        color: null,
                        encap: null
                    },
                    tlocList: null,
                    local: !1,
                    restrict: !1
                },
                tloc: {
                    ip: null,
                    color: null,
                    encap: null
                },
                tlocList: null,
                vpn: null
            },
            nat: {
                pool: null,
                useVpn: null,
                fallback: null
            },
            count: null,
            log: !1,
            cflowd: null,
            tcpOptimization: !1,
            redirectDns: {
                redirectDNSOption: "dnsType",
                ipAddress: null,
                dnsType: null
            },
            actionOrder: ["drop"],
            readOnly: !1,
            enabled: !1
        }
          , m = function(a) {
            this.order = a.order,
            this.match = angular.extend({}, angular.copy(k), a.match),
            this.action = angular.extend({}, angular.copy(l), a.action),
            this.baseAction = a.baseAction || "drop",
            this.readOnly = a.readOnly,
            this.dragdropDirection = {},
            this.payload = {
                match: {
                    entries: []
                },
                actions: []
            },
            self.valid = a.valid || !1,
            self.editable = a.editable || !0
        };
        return m.prototype.addMatchField = function(a) {
            var b = this;
            angular.extend(b.match, a)
        }
        ,
        m.prototype.removeMatchField = function(a) {
            var b = this;
            angular.forEach(a, function(a) {
                delete b.match[a]
            })
        }
        ,
        m.prototype.addActionField = function(a) {
            var b = this;
            angular.extend(b.action, a)
        }
        ,
        m.prototype.removeActionField = function(a) {
            var b = this;
            angular.forEach(a, function(a) {
                delete b.action[a]
            })
        }
        ,
        m.prototype.setReadOnly = function(a) {
            var b = this;
            b.readOnly = a
        }
        ,
        m.prototype.markForCopy = function() {
            var b = this;
            b.copy = !0,
            a.$broadcast("evaluate-rule", {
                index: b.order,
                rule: b
            })
        }
        ,
        m.prototype.markForDeletion = function() {
            var b = this;
            b.delete = !0,
            a.$broadcast("evaluate-rule", {
                index: b.order,
                rule: b
            })
        }
        ,
        m.prototype.transformMatch = function(a, b) {
            var c, d = this;
            angular.forEach(a.entries, function(a) {
                if (c = a.field,
                _.indexOf(["appList", "dnsAppList", "siteList", "colorList", "vpnList", "tlocList", "prefixList", "destinationDataPrefixList", "sourceDataPrefixList"], c) > -1)
                    d.match[c] = _.find(b, {
                        listId: a.ref
                    }) || a.ref;
                else if (_.indexOf(["dns"], c) > -1)
                    d.match[c] = _.find(h.options, {
                        key: a.value
                    });
                else if (_.indexOf(["plp"], c) > -1)
                    d.match[c] = _.find(g.options, {
                        key: a.value
                    });
                else if (_.indexOf(["origin"], c) > -1)
                    d.match[c] = _.find(f.options, {
                        key: a.value
                    });
                else if (_.indexOf(["carrier"], c) > -1)
                    d.match[c] = _.find(e.options, {
                        key: a.value
                    });
                else if (_.indexOf(["ompTag", "preference", "domainId", "groupId", "siteId", "vpn"], c) > -1) {
                    if (d.match[c] = parseInt(a.value),
                    _.indexOf(["siteId"], c) > -1)
                        return void d.match.matchOrder.push("siteList");
                    if (_.indexOf(["vpn"], c) > -1)
                        return void d.match.matchOrder.push("vpnList")
                } else {
                    if (d.match[c] = a.value,
                    _.indexOf(["sourceIp"], c) > -1)
                        return void d.match.matchOrder.push("sourceDataPrefixList");
                    if (_.indexOf(["sourcePort"], c) > -1)
                        return void d.match.matchOrder.push("source");
                    if (_.indexOf(["destinationIp"], c) > -1)
                        return void d.match.matchOrder.push("destinationDataPrefixList");
                    if (_.indexOf(["destinationPort"], c) > -1)
                        return void d.match.matchOrder.push("destination");
                    if (_.indexOf(["tloc"], c) > -1)
                        return d.match[c].color = _.find(i.colorOptions, {
                            key: a.value.color
                        }),
                        d.match[c].encap = _.find(j.options, {
                            key: a.value.encap
                        }),
                        void d.match.matchOrder.push("tlocList")
                }
                d.match.matchOrder.push(c)
            }),
            d.match.matchOrder = _.unique(d.match.matchOrder)
        }
        ,
        m.prototype.transformAction = function(a, c) {
            var e, f, g = this;
            angular.forEach(a, function(a) {
                if (e = a.type,
                "set" === e)
                    return void angular.forEach(a.parameter, function(a) {
                        e = a.field,
                        angular.equals(e, "service") ? (g.action.set.service.type = _.find(d.options, {
                            key: a.value.type
                        }),
                        g.action.set.service.vpn = a.value.vpn ? parseInt(a.value.vpn) : null,
                        g.action.set.service.local = !!angular.isDefined(a.value.local),
                        g.action.set.service.restrict = !(!angular.isDefined(a.value.local) || !angular.isDefined(a.value.restrict)),
                        a.value.tloc && (g.action.set.service.tloc.ip = a.value.tloc.ip,
                        g.action.set.service.tloc.color = _.find(i.colorOptions, {
                            key: a.value.tloc.color
                        }),
                        g.action.set.service.tloc.encap = _.find(j.options, {
                            key: a.value.tloc.encap
                        })),
                        a.value.tlocList && (g.action.set.service.tlocList = _.find(c, {
                            listId: a.value.tlocList.ref
                        }) || a.value.tlocList.ref)) : angular.equals(e, "localTloc") ? (g.action.set[e].color = _.find(i.colorOptions, {
                            key: a.value.color
                        }),
                        g.action.set[e].encap = _.find(j.options, {
                            key: a.value.encap
                        })) : angular.equals(e, "localTlocList") ? (angular.isDefined(a.value.color) && (g.action.set[e].color = _.map(a.value.color.split(" "), function(a) {
                            return _.find(i.colorOptions, {
                                key: a
                            })
                        })),
                        angular.isDefined(a.value.encap) && (g.action.set[e].encap = _.map(a.value.encap.split(" "), function(a) {
                            return _.find(j.options, {
                                key: a
                            })
                        })),
                        g.action.set[e].restrict = !!angular.isDefined(a.value.restrict)) : angular.equals(e, "tloc") ? (g.action.set[e].ip = a.value.ip,
                        g.action.set[e].color = _.find(i.colorOptions, {
                            key: a.value.color
                        }),
                        g.action.set[e].encap = _.find(j.options, {
                            key: a.value.encap
                        })) : _.indexOf(["policer", "tlocList"], e) > -1 ? g.action.set[e] = _.find(c, {
                            listId: a.ref
                        }) || a.ref : _.indexOf(["ompTag", "preference", "vpn"], e) > -1 ? g.action.set[e] = parseInt(a.value) : g.action.set[e] = a.value,
                        angular.equals(e, "tloc") ? g.action.actionOrder.push("setTLOCList") : (f = _.findKey(b.SET_ACTION_KEYS, function(a) {
                            return a === e
                        }),
                        g.action.actionOrder.push(f))
                    });
                if ("nat" !== e) {
                    if ("slaClass" === e)
                        return angular.forEach(a.parameter, function(a) {
                            e = a.field,
                            "name" === a.field ? g.action.slaClass[e] = _.find(c, {
                                listId: a.ref
                            }) || a.ref : g.action.slaClass[e] = a.value
                        }),
                        void g.action.actionOrder.push("slaClass");
                    _.indexOf(["log", "tcpOptimization"], e) > -1 ? g.action[e] = !0 : "exportTo" === e ? g.action[e] = _.find(c, {
                        listId: a.parameter.ref
                    }) || a.parameter.ref : "redirectDns" === e ? (g.action[e].redirectDNSOption = a.parameter.field,
                    "ipAddress" === g.action[e].redirectDNSOption && (g.action[e].ipAddress = a.parameter.value)) : g.action[e] = a.parameter,
                    g.action.actionOrder.push(e)
                } else if (Array.isArray(a.parameter))
                    for (var h in a.parameter)
                        e = a.parameter[h].field,
                        f = _.findKey(b.SET_ACTION_KEYS, function(a) {
                            return a === e
                        }),
                        angular.isDefined(f) ? (g.action.nat[e] = parseInt(a.parameter[h].value),
                        g.action.actionOrder.push(f)) : g.action.nat.fallback = a.parameter[h].value;
                else
                    e = a.parameter.field,
                    f = _.findKey(b.SET_ACTION_KEYS, function(a) {
                        return a === e
                    }),
                    g.action.nat[e] = parseInt(a.parameter.value),
                    g.action.actionOrder.push(f)
            }),
            g.action.actionOrder = _.unique(g.action.actionOrder)
        }
        ,
        m.prototype.transformBaseAction = function(a) {
            var b = this;
            a && "accept" === a.toLowerCase() ? b.action.drop = null : (b.action.accept = null,
            angular.isUndefined(a) && (a = "drop")),
            b.action[a] = !0,
            b.action.actionOrder.push(a)
        }
        ,
        m.prototype.prepareMatchPayload = function(a) {
            var b = this;
            return b.payload = a,
            angular.forEach(b.match.matchOrder, function(a) {
                _.indexOf(["appList", "dnsAppList", "siteList", "colorList", "vpnList", "tlocList", "prefixList", "destinationDataPrefixList", "sourceDataPrefixList"], a) > -1 ? (b.match[a] && b.match[a].listId && b.payload.match.entries.push({
                    field: a,
                    ref: b.match[a].listId
                }),
                angular.equals("sourceDataPrefixList", a) ? _.isNull(b.match.sourceIp) || c.isUndefinedOrEmpty(b.match.sourceIp) || b.payload.match.entries.push({
                    field: "sourceIp",
                    value: b.match.sourceIp
                }) : angular.equals("destinationDataPrefixList", a) ? _.isNull(b.match.destinationIp) || c.isUndefinedOrEmpty(b.match.destinationIp) || b.payload.match.entries.push({
                    field: "destinationIp",
                    value: b.match.destinationIp
                }) : angular.equals("siteList", a) ? _.isNaN(parseInt(b.match.siteId)) || b.payload.match.entries.push({
                    field: "siteId",
                    value: String(b.match.siteId)
                }) : angular.equals("vpnList", a) ? _.isNaN(parseInt(b.match.vpn)) || b.payload.match.entries.push({
                    field: "vpn",
                    value: String(b.match.vpn)
                }) : angular.equals("tlocList", a) && (_.isNull(b.match.tloc) || c.isUndefinedOrEmpty(b.match.tloc) || _.isNull(b.match.tloc.color) || _.isNull(b.match.tloc.ip) || b.payload.match.entries.push({
                    field: "tloc",
                    value: {
                        ip: b.match.tloc ? b.match.tloc.ip : void 0,
                        color: b.match.tloc.color ? b.match.tloc.color.key : void 0,
                        encap: b.match.tloc.encap ? b.match.tloc.encap.key : void 0
                    }
                }))) : _.indexOf(["plp", "dns", "origin", "carrier"], a) > -1 ? b.payload.match.entries.push({
                    field: a,
                    value: String(b.match[a].key)
                }) : angular.equals(a, "source") ? _.isNull(b.match.sourcePort) || b.payload.match.entries.push({
                    field: "sourcePort",
                    value: b.match.sourcePort
                }) : angular.equals(a, "destination") ? _.isNull(b.match.destinationPort) || b.payload.match.entries.push({
                    field: "destinationPort",
                    value: b.match.destinationPort
                }) : b.payload.match.entries.push({
                    field: a,
                    value: String(b.match[a])
                })
            }),
            b.payload
        }
        ,
        m.prototype.prepareActionPayload = function(a) {
            var c = this;
            return c.payload = a,
            angular.forEach(c.action.actionOrder, function(a) {
                var d;
                if (_.indexOf(["accept", "drop"], a) > -1)
                    c.baseAction = a;
                else if (angular.equals("natVPN", a)) {
                    var e = b.SET_ACTION_KEYS[a]
                      , f = [];
                    _.isNumber(parseInt(c.action.nat[e])) && f.push({
                        field: e,
                        value: String(c.action.nat[e])
                    }),
                    f.push({
                        field: "fallback",
                        value: c.action.nat.fallback ? "true" : ""
                    }),
                    c.payload.actions.push({
                        type: "nat",
                        parameter: f
                    })
                } else if (angular.equals("natPool", a)) {
                    var e = b.SET_ACTION_KEYS[a];
                    _.isNumber(parseInt(c.action.nat[e])) && c.payload.actions.push({
                        type: "nat",
                        parameter: {
                            field: e,
                            value: String(c.action.nat[e])
                        }
                    })
                } else if (angular.equals(a, "cflowd"))
                    c.payload.actions.push({
                        type: a
                    });
                else if (_.indexOf(["slaClass"], a) > -1)
                    d = [],
                    angular.isDefined(c.action[a].name.listId) && d.push({
                        field: "name",
                        ref: c.action[a].name.listId
                    }),
                    c.action[a].preferredColor && d.push({
                        field: "preferredColor",
                        value: c.action[a].preferredColor
                    }),
                    c.action[a].strict && "false" !== c.action[a].strict && d.push({
                        field: "strict"
                    }),
                    c.payload.actions.push({
                        type: a,
                        parameter: d
                    });
                else if (_.indexOf(["exportTo"], a) > -1)
                    c.payload.actions.push({
                        type: a,
                        parameter: {
                            field: "vpnList",
                            ref: c.action[a].listId
                        }
                    });
                else if (_.indexOf(["redirectDns"], a) > -1) {
                    var g = {
                        type: "redirectDns",
                        parameter: {
                            field: c.action[a].redirectDNSOption
                        }
                    };
                    angular.equals(g.parameter.field, "dnsType") ? g.parameter.value = "host" : g.parameter.value = c.action[a].ipAddress,
                    c.payload.actions.push(g)
                } else if (a.startsWith("set")) {
                    var h = _.find(c.payload.actions, {
                        type: "set"
                    });
                    angular.isUndefined(h) && (c.payload.actions.push({
                        type: "set",
                        parameter: []
                    }),
                    h = c.payload.actions[c.payload.actions.length - 1]);
                    var e = b.SET_ACTION_KEYS[a];
                    if (angular.equals(e, "service")) {
                        var i = {
                            field: e,
                            value: {
                                type: String(c.action.set[e].type.key),
                                vpn: _.isNaN(parseInt(c.action.set[e].vpn)) ? void 0 : String(c.action.set[e].vpn),
                                tlocList: _.isEmpty(c.action.set[e].tlocList) ? void 0 : {
                                    ref: c.action.set[e].tlocList.listId
                                },
                                local: c.action.set[e].local ? "" : void 0,
                                restrict: c.action.set[e].local && c.action.set[e].restrict ? "" : void 0
                            }
                        };
                        _.isEmpty(c.action.set[e].tloc) || c.action.set[e].tloc.ip && !_.isEmpty(c.action.set[e].tloc.color) && (i.value.tloc = {
                            ip: c.action.set[e].tloc.ip ? c.action.set[e].tloc.ip : void 0,
                            color: c.action.set[e].tloc.color ? c.action.set[e].tloc.color.key : void 0,
                            encap: c.action.set[e].tloc.encap ? c.action.set[e].tloc.encap.key : void 0
                        }),
                        h.parameter.push(i)
                    } else if (angular.equals(e, "localTloc"))
                        h.parameter.push({
                            field: e,
                            value: {
                                color: c.action.set[e].color.key,
                                encap: c.action.set[e].encap.key
                            }
                        });
                    else if (angular.equals(e, "localTlocList")) {
                        var j = {
                            field: e,
                            value: {
                                color: _.isEmpty(c.action.set[e].color) ? void 0 : _.pluck(c.action.set[e].color, "key").join(" "),
                                restrict: c.action.set[e].restrict ? "" : void 0
                            }
                        };
                        _.isEmpty(c.action.set[e].encap) || (j.value.encap = _.pluck(c.action.set[e].encap, "key").join(" ")),
                        h.parameter.push(j)
                    } else
                        _.indexOf(["policer"], e) > -1 ? h.parameter.push({
                            field: e,
                            ref: c.action.set[e].listId
                        }) : _.indexOf(["tlocList"], e) > -1 ? !_.isNull(c.action.set[e]) && c.action.set[e].listId ? h.parameter.push({
                            field: e,
                            ref: c.action.set[e].listId
                        }) : h.parameter.push({
                            field: "tloc",
                            value: {
                                ip: c.action.set.tloc ? c.action.set.tloc.ip : void 0,
                                color: c.action.set.tloc.color ? c.action.set.tloc.color.key : void 0,
                                encap: c.action.set.tloc.encap ? c.action.set.tloc.encap.key : void 0
                            }
                        }) : h.parameter.push({
                            field: e,
                            value: String(c.action.set[e])
                        })
                } else
                    c.payload.actions.push({
                        type: a,
                        parameter: String(c.action[a])
                    })
            }),
            c.payload
        }
        ,
        m.prototype.preparePayload = function() {
            var a = this;
            a.payload = {
                match: {
                    entries: []
                },
                actions: []
            },
            a.prepareMatchPayload(a.payload),
            a.prepareActionPayload(a.payload)
        }
        ,
        m.prototype.validateSingleEntryOrListFields = function() {
            var a = this
              , b = [];
            return a.match.matchOrder.includes("destinationDataPrefixList") && c.isUndefinedOrEmpty(a.match.destinationIp) && (c.isUndefinedOrEmpty(a.match.destinationDataPrefixList) || c.isUndefinedOrEmpty(a.match.destinationDataPrefixList.listId)) && b.push("destinationDataPrefixList"),
            a.match.matchOrder.includes("sourceDataPrefixList") && c.isUndefinedOrEmpty(a.match.sourceIp) && (c.isUndefinedOrEmpty(a.match.sourceDataPrefixList) || c.isUndefinedOrEmpty(a.match.sourceDataPrefixList.listId)) && b.push("sourceDataPrefixList"),
            a.match.matchOrder.includes("siteList") && _.isNaN(parseInt(a.match.siteId)) && (c.isUndefinedOrEmpty(a.match.siteList) || c.isUndefinedOrEmpty(a.match.siteList.listId)) && b.push("siteList"),
            a.match.matchOrder.includes("vpnList") && _.isNaN(parseInt(a.match.vpn)) && (c.isUndefinedOrEmpty(a.match.vpnList) || c.isUndefinedOrEmpty(a.match.vpnList.listId)) && b.push("vpnList"),
            a.match.matchOrder.includes("tlocList") && c.isUndefinedOrEmpty(a.match.tloc) && (c.isUndefinedOrEmpty(a.match.tlocList) || c.isUndefinedOrEmpty(a.match.tlocList.listId)) && b.push("tlocList"),
            a.match.matchOrder.includes("appList") && (c.isUndefinedOrEmpty(a.match.appList) || c.isUndefinedOrEmpty(a.match.appList.listId)) && b.push("appList"),
            a.match.matchOrder.includes("dnsAppList") && (c.isUndefinedOrEmpty(a.match.dnsAppList) || c.isUndefinedOrEmpty(a.match.dnsAppList.listId)) && b.push("dnsAppList"),
            a.match.matchOrder.includes("colorList") && (c.isUndefinedOrEmpty(a.match.colorList) || c.isUndefinedOrEmpty(a.match.colorList.listId)) && b.push("colorList"),
            a.match.matchOrder.includes("dns") && (c.isUndefinedOrEmpty(a.match.dns) || c.isUndefinedOrEmpty(a.match.dns.name)) && b.push("dns"),
            a.match.matchOrder.includes("plp") && (c.isUndefinedOrEmpty(a.match.plp) || c.isUndefinedOrEmpty(a.match.plp.name)) && b.push("plp"),
            a.match.matchOrder.includes("origin") && (c.isUndefinedOrEmpty(a.match.origin) || c.isUndefinedOrEmpty(a.match.origin.name)) && b.push("origin"),
            a.match.matchOrder.includes("carrier") && (c.isUndefinedOrEmpty(a.match.carrier) || c.isUndefinedOrEmpty(a.match.carrier.name)) && b.push("carrier"),
            a.match.matchOrder.includes("prefixList") && (c.isUndefinedOrEmpty(a.match.prefixList) || c.isUndefinedOrEmpty(a.match.prefixList.listId)) && b.push("prefixList"),
            a.action.actionOrder.includes("slaClass") && (c.isUndefinedOrEmpty(a.action.slaClass.name) || c.isUndefinedOrEmpty(a.action.slaClass.name.listId)) && b.push("slaClass"),
            a.action.actionOrder.includes("backupSlaPreferredColor") && !a.action.backupSlaPreferredColor.length && b.push("backupSlaPreferredColor"),
            a.action.actionOrder.includes("exportTo") && (c.isUndefinedOrEmpty(a.action.exportTo) || c.isUndefinedOrEmpty(a.action.exportTo.listId)) && b.push("exportTo"),
            a.action.actionOrder.includes("setPolicer") && (c.isUndefinedOrEmpty(a.action.set.policer) || c.isUndefinedOrEmpty(a.action.set.policer.listId)) && b.push("setPolicer"),
            a.action.actionOrder.includes("setService") && (c.isUndefinedOrEmpty(a.action.set.service.type) || c.isUndefinedOrEmpty(a.action.set.service.type.name)) && b.push("setService"),
            a.action.actionOrder.includes("setTLOCAction") && (c.isUndefinedOrEmpty(a.action.set.tlocAction) || c.isUndefinedOrEmpty(a.action.set.tlocAction.name)) && b.push("setTLOCAction"),
            a.action.actionOrder.includes("setTLOCList") && c.isUndefinedOrEmpty(a.action.set.tloc) && (c.isUndefinedOrEmpty(a.action.set.tlocList) || c.isUndefinedOrEmpty(a.action.set.tlocList.listId)) && b.push("setTLOCList"),
            b
        }
        ,
        m
    }
    angular.module("vManage").factory("PolicyRule", a),
    a.$inject = ["$rootScope", "policyConstants", "appUtil", "setServiceTypes", "policyRuleCarrier", "policyRuleOrigin", "PLP", "DNS", "colors", "tlocEncap"]
}(),
function() {
    function a(a, b) {
        var c = function(b) {
            a.apply(this, arguments),
            this.match = {
                appList: null,
                destinationIp: null,
                destinationPort: null,
                destinationDataPrefixList: null,
                dscp: null,
                packetLength: null,
                plp: null,
                protocol: null,
                sourceIp: null,
                sourcePort: null,
                sourceDataPrefixList: null,
                tcp: null,
                matchOrder: [],
                readOnly: !1,
                enabled: !0
            },
            this.action = {
                accept: !0,
                drop: null,
                set: {
                    dscp: null,
                    forwardingClass: null,
                    policer: null
                },
                count: null,
                log: !1,
                actionOrder: ["accept"],
                readOnly: !1,
                enabled: !1
            },
            this.baseAction = "accept",
            this.payload = {
                match: {
                    entries: []
                },
                actions: []
            }
        };
        return c.prototype = new a({}),
        c.prototype.transformAction = function(a, c) {
            var d, e, f = this;
            angular.forEach(a, function(a) {
                return d = a.type,
                "set" === d ? void angular.forEach(a.parameter, function(a) {
                    d = a.field,
                    _.indexOf(["policer"], d) > -1 ? f.action.set[d] = _.find(c, {
                        listId: a.ref
                    }) || a.ref : f.action.set[d] = a.value,
                    e = _.findKey(b.SET_ACTION_KEYS, function(a) {
                        return a === d
                    }),
                    f.action.actionOrder.push(e)
                }) : (_.indexOf(["log"], d) > -1 ? f.action[d] = !0 : f.action[d] = a.parameter,
                void f.action.actionOrder.push(d))
            }),
            f.action.actionOrder = _.unique(f.action.actionOrder)
        }
        ,
        c.prototype.prepareActionPayload = function(a) {
            var c = this;
            return c.payload = a,
            angular.forEach(c.action.actionOrder, function(a) {
                if (_.indexOf(["accept", "drop"], a) > -1)
                    c.baseAction = a;
                else if (a.startsWith("set")) {
                    var d = _.find(c.payload.actions, {
                        type: "set"
                    });
                    angular.isUndefined(d) && (c.payload.actions.push({
                        type: "set",
                        parameter: []
                    }),
                    d = c.payload.actions[c.payload.actions.length - 1]);
                    var e = b.SET_ACTION_KEYS[a];
                    _.indexOf(["policer"], e) > -1 ? d.parameter.push({
                        field: e,
                        ref: c.action.set[e].listId
                    }) : d.parameter.push({
                        field: e,
                        value: String(c.action.set[e])
                    })
                } else
                    c.payload.actions.push({
                        type: a,
                        parameter: String(c.action[a])
                    })
            }),
            c.payload
        }
        ,
        c
    }
    angular.module("vManage").factory("QoSPolicyRule", a),
    a.$inject = ["PolicyRule", "policyConstants"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        var g = function(b) {
            a.apply(this, arguments),
            this.baseAction = "reject",
            this.match = {
                colorList: null,
                ompTag: null,
                origin: null,
                originator: null,
                preference: null,
                prefixList: null,
                siteId: null,
                siteList: null,
                tloc: {
                    ip: null,
                    color: null,
                    encap: null
                },
                tlocList: null,
                vpn: null,
                vpnList: null,
                matchOrder: [],
                readOnly: !1,
                enabled: !0
            },
            this.action = {
                accept: null,
                reject: !0,
                exportTo: null,
                set: {
                    ompTag: null,
                    preference: null,
                    service: {
                        type: null,
                        vpn: null,
                        tloc: {
                            ip: null,
                            color: null,
                            encap: null
                        },
                        tlocList: null
                    },
                    tlocAction: null,
                    tloc: {
                        ip: null,
                        color: null,
                        encap: null
                    },
                    tlocList: null
                },
                actionOrder: ["reject"],
                readOnly: !1,
                enabled: !1
            }
        };
        return g.prototype = new a({}),
        g.prototype.transformAction = function(a, g) {
            var h, i, j = this;
            angular.forEach(a, function(a) {
                return h = a.type,
                "set" === h ? void angular.forEach(a.parameter, function(a) {
                    h = a.field,
                    angular.equals(h, "service") ? (j.action.set.service.type = _.find(f.options, {
                        key: a.value.type
                    }),
                    j.action.set.service.vpn = a.value.vpn ? parseInt(a.value.vpn) : null,
                    a.value.tloc && (j.action.set.service.tloc.ip = a.value.tloc.ip,
                    j.action.set.service.tloc.color = _.find(e.colorOptions, {
                        key: a.value.tloc.color
                    }),
                    j.action.set.service.tloc.encap = _.find(d.options, {
                        key: a.value.tloc.encap
                    })),
                    a.value.tlocList && (j.action.set.service.tlocList = _.find(g, {
                        listId: a.value.tlocList.ref
                    }) || a.value.tlocList.ref)) : angular.equals(h, "tloc") ? (j.action.set[h].ip = a.value.ip,
                    j.action.set[h].color = _.find(e.colorOptions, {
                        key: a.value.color
                    }),
                    j.action.set[h].encap = _.find(d.options, {
                        key: a.value.encap
                    }),
                    j.action.actionOrder.push("setTLOCList")) : _.indexOf(["tlocList"], h) > -1 ? j.action.set[h] = _.find(g, {
                        listId: a.ref
                    }) || a.ref : _.indexOf(["ompTag", "preference", "vpn"], h) > -1 ? j.action.set[h] = parseInt(a.value) : _.indexOf(["tlocAction"], h) > -1 ? j.action.set[h] = _.find(c.options, {
                        key: a.value
                    }) : j.action.set[h] = a.value,
                    "tloc" !== h && (i = _.findKey(b.SET_ACTION_KEYS, function(a) {
                        return a === h
                    }),
                    j.action.actionOrder.push(i))
                }) : ("exportTo" === h ? j.action[h] = _.find(g, {
                    listId: a.parameter.ref
                }) || a.parameter.ref : j.action[h] = a.parameter,
                void ("tloc" !== h && j.action.actionOrder.push(h)))
            }),
            j.action.actionOrder = _.unique(j.action.actionOrder)
        }
        ,
        g.prototype.transformBaseAction = function(a) {
            var b = this;
            a && "accept" === a.toLowerCase() ? b.action.reject = null : (b.action.accept = null,
            angular.isUndefined(a) && (a = "reject")),
            b.action[a] = !0,
            b.action.actionOrder.push(a)
        }
        ,
        g.prototype.prepareActionPayload = function(a) {
            var c = this;
            return c.payload = a,
            angular.forEach(c.action.actionOrder, function(a) {
                if (_.indexOf(["accept", "reject"], a) > -1)
                    c.baseAction = a;
                else if (_.indexOf(["exportTo"], a) > -1)
                    c.payload.actions.push({
                        type: a,
                        parameter: {
                            field: "vpnList",
                            ref: c.action[a].listId
                        }
                    });
                else if (a.startsWith("set")) {
                    var d = _.find(c.payload.actions, {
                        type: "set"
                    });
                    angular.isUndefined(d) && (c.payload.actions.push({
                        type: "set",
                        parameter: []
                    }),
                    d = c.payload.actions[c.payload.actions.length - 1]);
                    var e = b.SET_ACTION_KEYS[a];
                    if (angular.equals(e, "service")) {
                        var f = {
                            field: e,
                            value: {
                                type: String(c.action.set[e].type.key),
                                vpn: _.isNaN(parseInt(c.action.set[e].vpn)) ? void 0 : String(c.action.set[e].vpn),
                                tlocList: _.isEmpty(c.action.set[e].tlocList) ? void 0 : {
                                    ref: c.action.set[e].tlocList.listId
                                }
                            }
                        };
                        _.isEmpty(c.action.set[e].tloc) || c.action.set[e].tloc.ip && !_.isEmpty(c.action.set[e].tloc.color) && (f.value.tloc = {
                            ip: c.action.set[e].tloc.ip ? c.action.set[e].tloc.ip : void 0,
                            color: c.action.set[e].tloc.color ? c.action.set[e].tloc.color.key : void 0,
                            encap: c.action.set[e].tloc.encap ? c.action.set[e].tloc.encap.key : void 0
                        }),
                        d.parameter.push(f)
                    } else
                        _.indexOf(["tlocList"], e) > -1 ? !_.isNull(c.action.set[e]) && c.action.set[e].listId ? d.parameter.push({
                            field: e,
                            ref: c.action.set[e].listId
                        }) : d.parameter.push({
                            field: "tloc",
                            value: {
                                ip: c.action.set.tloc ? c.action.set.tloc.ip : void 0,
                                color: c.action.set.tloc.color ? c.action.set.tloc.color.key : void 0,
                                encap: c.action.set.tloc.encap ? c.action.set.tloc.encap.key : void 0
                            }
                        }) : _.indexOf(["tlocAction"], e) > -1 ? d.parameter.push({
                            field: e,
                            value: c.action.set[e].key
                        }) : d.parameter.push({
                            field: e,
                            value: String(c.action.set[e])
                        })
                } else
                    c.payload.actions.push({
                        type: a,
                        parameter: String(c.action[a])
                    })
            }),
            c.payload
        }
        ,
        g
    }
    angular.module("vManage").factory("RoutePolicyRule", a),
    a.$inject = ["PolicyRule", "policyConstants", "tlocActions", "tlocEncap", "colors", "setServiceTypes"]
}(),
function() {
    function a(a, b, c) {
        var d = function(b) {
            a.apply(this, arguments),
            this.match = {
                appList: null,
                destinationIp: null,
                destinationPort: null,
                destinationDataPrefixList: null,
                dscp: null,
                packetLength: null,
                plp: null,
                protocol: null,
                sourceIp: null,
                sourcePort: null,
                sourceDataPrefixList: null,
                tcp: null,
                matchOrder: [],
                readOnly: !1,
                enabled: !0
            },
            this.action = {
                accept: !0,
                drop: null,
                set: {
                    service: {
                        type: null,
                        vpn: null,
                        tloc: {
                            ip: null,
                            color: null,
                            encap: null
                        },
                        tlocList: null,
                        local: !1,
                        restrict: !1
                    },
                    tloc: {
                        ip: null,
                        color: null,
                        encap: null
                    },
                    tlocList: null,
                    vpn: null
                },
                count: null,
                log: !1,
                actionOrder: ["accept"],
                readOnly: !1,
                enabled: !1
            },
            this.baseAction = "accept",
            this.payload = {
                match: {
                    entries: []
                },
                actions: []
            }
        };
        return d.prototype = new a({}),
        d.prototype.transformAction = function(a, d) {
            var e, f, g = this;
            angular.forEach(a, function(a) {
                return e = a.type,
                "set" === e ? void angular.forEach(a.parameter, function(a) {
                    e = a.field,
                    angular.equals(e, "service") ? (g.action.set.service.type = _.find(c.options, {
                        key: a.value.type
                    }),
                    g.action.set.service.vpn = a.value.vpn ? parseInt(a.value.vpn) : null,
                    g.action.set.service.local = !!angular.isDefined(a.value.local),
                    g.action.set.service.restrict = !(!angular.isDefined(a.value.local) || !angular.isDefined(a.value.restrict)),
                    a.value.tloc && (g.action.set.service.tloc.ip = a.value.tloc.ip,
                    g.action.set.service.tloc.color = _.find(colors.colorOptions, {
                        key: a.value.tloc.color
                    }),
                    g.action.set.service.tloc.encap = _.find(tlocEncap.options, {
                        key: a.value.tloc.encap
                    })),
                    a.value.tlocList && (g.action.set.service.tlocList = _.find(d, {
                        listId: a.value.tlocList.ref
                    }) || a.value.tlocList.ref)) : angular.equals(e, "tloc") ? (g.action.set[e].ip = a.value.ip,
                    g.action.set[e].color = _.find(colors.colorOptions, {
                        key: a.value.color
                    }),
                    g.action.set[e].encap = _.find(tlocEncap.options, {
                        key: a.value.encap
                    }),
                    g.action.actionOrder.push("setTLOCList")) : _.indexOf(["tlocList"], e) > -1 ? g.action.set[e] = _.find(d, {
                        listId: a.ref
                    }) || a.ref : _.indexOf(["vpn"], e) > -1 ? g.action.set[e] = parseInt(a.value) : g.action.set[e] = a.value,
                    f = _.findKey(b.SET_ACTION_KEYS, function(a) {
                        return a === e
                    }),
                    g.action.actionOrder.push(f)
                }) : (_.indexOf(["log"], e) > -1 ? g.action[e] = !0 : g.action[e] = a.parameter,
                void g.action.actionOrder.push(e))
            }),
            g.action.actionOrder = _.unique(g.action.actionOrder)
        }
        ,
        d.prototype.prepareActionPayload = function(a) {
            var c = this;
            return c.payload = a,
            angular.forEach(c.action.actionOrder, function(a) {
                if (_.indexOf(["accept", "drop"], a) > -1)
                    c.baseAction = a;
                else if (_.indexOf(["log"], a) > -1)
                    c.payload.actions.push({
                        type: a,
                        parameter: ""
                    });
                else if (a.startsWith("set")) {
                    var d = _.find(c.payload.actions, {
                        type: "set"
                    });
                    angular.isUndefined(d) && (c.payload.actions.push({
                        type: "set",
                        parameter: []
                    }),
                    d = c.payload.actions[c.payload.actions.length - 1]);
                    var e = b.SET_ACTION_KEYS[a];
                    angular.equals(e, "service") ? d.parameter.push({
                        field: e,
                        value: {
                            type: String(c.action.set[e].type.key),
                            vpn: _.isNaN(parseInt(c.action.set[e].vpn)) ? void 0 : String(c.action.set[e].vpn),
                            tloc: !_.isEmpty(c.action.set[e].tloc) && (c.action.set[e].tloc.ip || c.action.set[e].tloc.color || c.action.set[e].tloc.encap) ? {
                                ip: c.action.set[e].tloc.ip ? c.action.set[e].tloc.ip : void 0,
                                color: c.action.set[e].tloc.color ? c.action.set[e].tloc.color.key : void 0,
                                encap: c.action.set[e].tloc.encap ? c.action.set[e].tloc.encap.key : void 0
                            } : void 0,
                            tlocList: _.isEmpty(c.action.set[e].tlocList) ? void 0 : {
                                ref: c.action.set[e].tlocList.listId
                            },
                            local: c.action.set[e].local ? "" : void 0,
                            restrict: c.action.set[e].local && c.action.set[e].restrict ? "" : void 0
                        }
                    }) : _.indexOf(["tlocList"], e) > -1 ? !_.isNull(c.action.set[e]) && c.action.set[e].listId ? d.parameter.push({
                        field: e,
                        ref: c.action.set[e].listId
                    }) : d.parameter.push({
                        field: "tloc",
                        value: {
                            ip: c.action.set.tloc ? c.action.set.tloc.ip : void 0,
                            color: c.action.set.tloc.color ? c.action.set.tloc.color.key : void 0,
                            encap: c.action.set.tloc.encap ? c.action.set.tloc.encap.key : void 0
                        }
                    }) : d.parameter.push({
                        field: e,
                        value: String(c.action.set[e])
                    })
                } else
                    c.payload.actions.push({
                        type: a,
                        parameter: String(c.action[a])
                    })
            }),
            c.payload
        }
        ,
        d
    }
    angular.module("vManage").factory("ServiceChainingPolicyRule", a),
    a.$inject = ["PolicyRule", "policyConstants", "setServiceTypes"]
}(),
function() {
    function a(a, b) {
        var c = function(b) {
            a.apply(this, arguments),
            this.baseAction = "reject",
            this.match = {
                carrier: null,
                colorList: null,
                domainId: null,
                groupId: null,
                ompTag: null,
                originator: null,
                preference: null,
                siteList: null,
                tlocList: null,
                matchOrder: [],
                readOnly: !1,
                enabled: !0
            },
            this.action = {
                accept: null,
                reject: !0,
                set: {
                    ompTag: null,
                    preference: null
                },
                actionOrder: ["reject"],
                readOnly: !1,
                enabled: !1
            }
        };
        return c.prototype = new a({}),
        c.prototype.transformAction = function(a, c) {
            var d, e, f = this;
            angular.forEach(a, function(a) {
                return d = a.type,
                "set" === d ? void angular.forEach(a.parameter, function(a) {
                    d = a.field,
                    _.indexOf(["ompTag", "preference"], d) > -1 ? f.action.set[d] = parseInt(a.value) : f.action.set[d] = a.value,
                    e = _.findKey(b.SET_ACTION_KEYS, function(a) {
                        return a === d
                    }),
                    f.action.actionOrder.push(e)
                }) : "nat" === d ? (d = a.parameter.field,
                e = _.findKey(b.SET_ACTION_KEYS, function(a) {
                    return a === d
                }),
                f.action.nat[d] = a.parameter.value,
                void f.action.actionOrder.push(e)) : "slaClass" === d ? (angular.forEach(a.parameter, function(a) {
                    d = a.field,
                    "name" === a.field ? f.action.slaClass[d] = _.find(c, {
                        listId: a.ref
                    }) || a.ref : f.action.slaClass[d] = a.value
                }),
                void f.action.actionOrder.push("slaClass")) : (_.indexOf(["log", "tcpOptimization"], d) > -1 ? f.action[d] = !0 : "exportTo" === d ? f.action[d] = _.find(c, {
                    listId: a.parameter.ref
                }) || a.parameter.ref : f.action[d] = a.parameter,
                void f.action.actionOrder.push(d))
            }),
            f.action.actionOrder = _.unique(f.action.actionOrder)
        }
        ,
        c.prototype.transformBaseAction = function(a) {
            var b = this;
            a && "accept" === a.toLowerCase() ? b.action.reject = null : (b.action.accept = null,
            angular.isUndefined(a) && (a = "reject")),
            b.action[a] = !0,
            b.action.actionOrder.push(a)
        }
        ,
        c.prototype.prepareActionPayload = function(a) {
            var c = this;
            return c.payload = a,
            angular.forEach(c.action.actionOrder, function(a) {
                if (_.indexOf(["accept", "reject"], a) > -1)
                    c.baseAction = a;
                else if (a.startsWith("set")) {
                    var d = _.find(c.payload.actions, {
                        type: "set"
                    });
                    angular.isUndefined(d) && (c.payload.actions.push({
                        type: "set",
                        parameter: []
                    }),
                    d = c.payload.actions[c.payload.actions.length - 1]);
                    var e = b.SET_ACTION_KEYS[a];
                    d.parameter.push({
                        field: e,
                        value: String(c.action.set[e])
                    })
                } else
                    c.payload.actions.push({
                        type: a,
                        parameter: String(c.action[a])
                    })
            }),
            c.payload
        }
        ,
        c
    }
    angular.module("vManage").factory("TLOCPolicyRule", a),
    a.$inject = ["PolicyRule", "policyConstants"]
}(),
function() {
    function a(a, b, c, d) {
        var e = function(b) {
            a.apply(this, arguments),
            this.match = {
                appList: null,
                destinationIp: null,
                destinationPort: null,
                destinationDataPrefixList: null,
                dscp: null,
                packetLength: null,
                plp: null,
                protocol: null,
                sourceIp: null,
                sourcePort: null,
                sourceDataPrefixList: null,
                tcp: null,
                matchOrder: [],
                readOnly: !1,
                enabled: !0
            },
            this.action = {
                accept: !0,
                drop: null,
                set: {
                    localTloc: {
                        color: null,
                        encap: null
                    },
                    localTlocList: {
                        color: [],
                        encap: [],
                        restrict: !1
                    },
                    nextHop: null,
                    tloc: {
                        ip: null,
                        color: null,
                        encap: null
                    },
                    tlocList: null,
                    vpn: null
                },
                count: null,
                log: !1,
                actionOrder: ["accept"],
                readOnly: !1,
                enabled: !1
            },
            this.baseAction = "accept",
            this.payload = {
                match: {
                    entries: []
                },
                actions: []
            }
        };
        return e.prototype = new a({}),
        e.prototype.transformAction = function(a, e) {
            var f, g, h = this;
            angular.forEach(a, function(a) {
                return f = a.type,
                "set" === f ? void angular.forEach(a.parameter, function(a) {
                    f = a.field,
                    _.indexOf(["tlocList"], f) > -1 ? h.action.set[f] = _.find(e, {
                        listId: a.ref
                    }) || a.ref : angular.equals(f, "tloc") ? (h.action.set[f].ip = a.value.ip,
                    h.action.set[f].color = _.find(c.colorOptions, {
                        key: a.value.color
                    }),
                    h.action.set[f].encap = _.find(d.options, {
                        key: a.value.encap
                    }),
                    h.action.actionOrder.push("setTLOCList")) : angular.equals(f, "localTloc") ? (h.action.set[f].color = _.find(c.colorOptions, {
                        key: a.value.color
                    }),
                    h.action.set[f].encap = _.find(d.options, {
                        key: a.value.encap
                    })) : angular.equals(f, "localTlocList") ? (angular.isDefined(a.value.color) && (h.action.set[f].color = _.map(a.value.color.split(" "), function(a) {
                        return _.find(c.colorOptions, {
                            key: a
                        })
                    })),
                    angular.isDefined(a.value.encap) && (h.action.set[f].encap = _.map(a.value.encap.split(" "), function(a) {
                        return _.find(d.options, {
                            key: a
                        })
                    })),
                    h.action.set[f].restrict = !!angular.isDefined(a.value.restrict)) : _.indexOf(["vpn"], f) > -1 ? h.action.set[f] = parseInt(a.value) : h.action.set[f] = a.value,
                    g = _.findKey(b.SET_ACTION_KEYS, function(a) {
                        return a === f
                    }),
                    h.action.actionOrder.push(g)
                }) : (_.indexOf(["log"], f) > -1 ? h.action[f] = !0 : h.action[f] = a.parameter,
                void h.action.actionOrder.push(f))
            }),
            h.action.actionOrder = _.unique(h.action.actionOrder)
        }
        ,
        e.prototype.prepareActionPayload = function(a) {
            var c = this;
            return c.payload = a,
            angular.forEach(c.action.actionOrder, function(a) {
                if (_.indexOf(["accept", "drop"], a) > -1)
                    c.baseAction = a;
                else if (_.indexOf(["log"], a) > -1)
                    c.payload.actions.push({
                        type: a,
                        parameter: ""
                    });
                else if (a.startsWith("set")) {
                    var d = _.find(c.payload.actions, {
                        type: "set"
                    });
                    angular.isUndefined(d) && (c.payload.actions.push({
                        type: "set",
                        parameter: []
                    }),
                    d = c.payload.actions[c.payload.actions.length - 1]);
                    var e = b.SET_ACTION_KEYS[a];
                    _.indexOf(["tlocList"], e) > -1 ? !_.isNull(c.action.set[e]) && c.action.set[e].listId ? d.parameter.push({
                        field: e,
                        ref: c.action.set[e].listId
                    }) : d.parameter.push({
                        field: "tloc",
                        value: {
                            ip: c.action.set.tloc ? c.action.set.tloc.ip : void 0,
                            color: c.action.set.tloc ? c.action.set.tloc.color.key : void 0,
                            encap: c.action.set.tloc.encap ? c.action.set.tloc.encap.key : void 0
                        }
                    }) : angular.equals(e, "localTloc") ? d.parameter.push({
                        field: e,
                        value: {
                            color: c.action.set[e].color.key,
                            encap: c.action.set[e].encap.key
                        }
                    }) : angular.equals(e, "localTlocList") ? d.parameter.push({
                        field: e,
                        value: {
                            color: _.isEmpty(c.action.set[e].color) ? void 0 : _.pluck(c.action.set[e].color, "key").join(" "),
                            encap: _.isEmpty(c.action.set[e].encap) ? void 0 : _.pluck(c.action.set[e].encap, "key").join(" "),
                            restrict: c.action.set[e].restrict ? "" : void 0
                        }
                    }) : d.parameter.push({
                        field: e,
                        value: String(c.action.set[e])
                    })
                } else
                    c.payload.actions.push({
                        type: a,
                        parameter: String(c.action[a])
                    })
            }),
            c.payload
        }
        ,
        e
    }
    angular.module("vManage").factory("TrafficEngineeringPolicyRule", a),
    a.$inject = ["PolicyRule", "policyConstants", "colors", "tlocEncap"]
}(),
function() {
    function a(a, b) {
        var c = function(b) {
            b.type = "applicationFirewall",
            b.title = "Application Firewall",
            b.style = {
                iconPath: "images/policy/application_firewall.svg",
                color: "#bc80bd"
            },
            a.apply(this, arguments)
        };
        return c.prototype = new a({}),
        c.prototype.getDefaultRule = function() {
            return new b({})
        }
        ,
        c
    }
    angular.module("vManage").factory("ApplicationFirewallPolicySequence", a),
    a.$inject = ["PolicySequence", "ApplicationFirewallPolicyRule"]
}(),
function() {
    function a(a, b) {
        var c = function(b) {
            b.type = "appRoute",
            b.title = "Application Route",
            b.style = {
                iconPath: "images/policy/app_route.svg",
                color: "#bc80bd"
            },
            a.apply(this, arguments)
        };
        return c.prototype = new a({}),
        c.prototype.getDefaultRule = function() {
            return new b({})
        }
        ,
        c
    }
    angular.module("vManage").factory("AppRoutePolicySequence", a),
    a.$inject = ["PolicySequence", "AppRoutePolicyRule"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        var l = function(a) {
            var b = this;
            b.title = a.title || "Data",
            b.style = a.style || {
                iconPath: "images/policy/custom_policy.svg",
                color: "#2576ad"
            },
            b.sequenceId = a.id || a.sequenceId,
            b.type = a.type || a.sequenceType || "data",
            b.name = a.name || a.sequenceName || b.title,
            b.description = a.description,
            b.rules = a.rules || [],
            b.payload = {}
        };
        return l.prototype.appendRule = function(a) {
            var c = this;
            if (a instanceof b)
                c.rules.push(a);
            else
                switch (a.type || a.sequenceType) {
                case "applicationFirewall":
                    c.rules.push(new e(a));
                    break;
                case "appRoute":
                    c.rules.push(new f(a));
                    break;
                case "qos":
                    c.rules.push(new g(a));
                    break;
                case "route":
                    c.rules.push(new h(a));
                    break;
                case "serviceChaining":
                    c.rules.push(new i(a));
                    break;
                case "tloc":
                    c.rules.push(new j(a));
                    break;
                case "trafficEngineering":
                    c.rules.push(new k(a));
                    break;
                default:
                    c.rules.push(new b(a))
                }
            return c.rules[c.rules.length - 1]
        }
        ,
        l.prototype.getDefaultRule = function() {
            return new b({})
        }
        ,
        l.prototype.copyRule = function(a) {
            var b = this;
            a.copy = !1;
            var c = _.findIndex(b.rules, function(b) {
                return angular.equals(b, a)
            });
            if (c > -1) {
                var e = angular.copy(b.rules[c]);
                return void b.rules.splice(c, 0, e)
            }
            d.warning("Error occurred while copying rule.")
        }
        ,
        l.prototype.copyRuleByIndex = function(a) {
            var b = this
              , c = angular.copy(b.rules[a]);
            b.rules.splice(a, 0, c)
        }
        ,
        l.prototype.removeRule = function(a) {
            var b = this
              , c = _.findIndex(b.rules, function(b) {
                return angular.equals(b, a)
            });
            return c > -1 ? (b.removeRuleByIndex(c),
            c) : void d.warning("Error occurred while removing rule.")
        }
        ,
        l.prototype.removeRuleByIndex = function(a) {
            var b = this;
            b.rules.splice(a, 1)
        }
        ,
        l.prototype.renumberRules = function(a) {
            var b = this;
            angular.forEach(b.rules, function(a, b) {
                a.orderNo = b
            })
        }
        ,
        l.prototype.refreshRule = function(a) {
            var b = this;
            a.delete ? b.removeRule(a) : a.copy && b.copyRule(a),
            b.renumberRules()
        }
        ,
        l.prototype.refreshRules = function() {
            var a = this;
            angular.forEach(a.rules, function(b) {
                b.delete ? a.removeRule(b) : b.copy && a.copyRule(b)
            }),
            this.renumberRules()
        }
        ,
        l.prototype.markRulesUneditable = function(a) {
            var b = this;
            angular.forEach(b.rules, function(b, c) {
                c !== a && (b.editable = !1)
            })
        }
        ,
        l.prototype.markRulesEditable = function() {
            var a = this;
            angular.forEach(a.rules, function(a, b) {
                a.editable = !0
            })
        }
        ,
        l.prototype.isValid = function() {
            var a = this
              , b = !0;
            for (var c in a.rules)
                if (a.rules[c] && !a.rules[c].valid) {
                    b = !1;
                    break
                }
            return b
        }
        ,
        l.prototype.preparePayload = function() {
            var a = this;
            angular.forEach(a.rules, function(a) {
                a.preparePayload()
            })
        }
        ,
        l
    }
    angular.module("vManage").factory("PolicySequence", a),
    a.$inject = ["restService", "PolicyRule", "policyConstants", "notification", "ApplicationFirewallPolicyRule", "AppRoutePolicyRule", "QoSPolicyRule", "RoutePolicyRule", "ServiceChainingPolicyRule", "TLOCPolicyRule", "TrafficEngineeringPolicyRule"]
}(),
function() {
    function a(a, b) {
        var c = function(b) {
            b.type = "qos",
            b.title = "Quality of Service",
            b.style = {
                iconPath: "images/policy/qos.svg",
                color: "#fdb462"
            },
            a.apply(this, arguments)
        };
        return c.prototype = new a({}),
        c.prototype.getDefaultRule = function() {
            return new b({})
        }
        ,
        c
    }
    angular.module("vManage").factory("QoSPolicySequence", a),
    a.$inject = ["PolicySequence", "QoSPolicyRule"]
}(),
function() {
    function a(a, b) {
        var c = function(b) {
            b.type = "route",
            b.title = "Route",
            b.style = {
                iconPath: "images/policy/route.svg",
                color: "#bc80bd"
            },
            a.apply(this, arguments)
        };
        return c.prototype = new a({}),
        c.prototype.getDefaultRule = function(a) {
            return new b({})
        }
        ,
        c
    }
    angular.module("vManage").factory("RoutePolicySequence", a),
    a.$inject = ["PolicySequence", "RoutePolicyRule"]
}(),
function() {
    function a(a, b) {
        var c = function(b) {
            b.type = "serviceChaining",
            b.title = "Service Chaining",
            b.style = {
                iconPath: "images/policy/service_chaining.svg",
                color: "#d9cc3c"
            },
            a.apply(this, arguments)
        };
        return c.prototype = new a({}),
        c.prototype.getDefaultRule = function(a) {
            return new b({})
        }
        ,
        c
    }
    angular.module("vManage").factory("ServiceChainingPolicySequence", a),
    a.$inject = ["PolicySequence", "ServiceChainingPolicyRule"]
}(),
function() {
    function a(a, b) {
        var c = function(b) {
            b.type = "tloc",
            b.title = "TLOC",
            b.style = {
                iconPath: "images/policy/tloc.svg",
                color: "#2576ad"
            },
            a.apply(this, arguments)
        };
        return c.prototype = new a({}),
        c.prototype.getDefaultRule = function(a) {
            return new b({})
        }
        ,
        c
    }
    angular.module("vManage").factory("TLOCPolicySequence", a),
    a.$inject = ["PolicySequence", "TLOCPolicyRule"]
}(),
function() {
    function a(a, b) {
        var c = function(b) {
            b.type = "trafficEngineering",
            b.title = "Traffic Engineering",
            b.style = {
                iconPath: "images/policy/traffic_engineering.svg",
                color: "#47b2dd"
            },
            a.apply(this, arguments)
        };
        return c.prototype = new a({}),
        c.prototype.getDefaultRule = function(a) {
            return new b({})
        }
        ,
        c
    }
    angular.module("vManage").factory("TrafficEngineeringPolicySequence", a),
    a.$inject = ["PolicySequence", "TrafficEngineeringPolicyRule"]
}(),
function() {
    function a(a) {}
    a.$inject = ["$state"],
    angular.module("vManage").component("wizardSteps", {
        templateUrl: "app/configuration/policy/wizard/components/wizardSteps.html",
        bindings: {
            stepsList: "<"
        },
        controller: a,
        controllerAs: "wizardStepsCtrl"
    })
}(),
function() {
    function a(a, b, c, d, e, f) {
        a.stateString = b.getStateString(c),
        a.breadCrumb.states && !_.isNull(a.breadCrumb.states) && a.breadCrumb.states.reset(),
        a.isWizardFlow = _.includes(c.current.name, "app.config.policy.wizard.configureTopology"),
        a.userAction = d.action,
        a.isWizardFlow ? (a.wizardObject = e.getInstance(),
        a.globalButtonState.customOptions = !1) : (a.globalButtonState.disableTabs = !1,
        a.globalButtonState.customOptions = !0),
        a.configureTopologyTabs = [new f("Topology",_.includes(c.current.name, "app.config.policy.wizard.configureTopology.topology") || _.includes(c.current.name, "app.config.policy.custom.topology.control"),a.isWizardFlow ? "app.config.policy.wizard.configureTopology.topology" : "app.config.policy.custom.topology.control"), new f("VPN Membership",_.includes(c.current.name, "app.config.policy.wizard.configureTopology.vpn") || _.includes(c.current.name, "app.config.policy.custom.topology.vpn"),a.isWizardFlow ? "app.config.policy.wizard.configureTopology.vpn" : "app.config.policy.custom.topology.vpn")]
    }
    angular.module("vManage").controller("ConfigureTopologyController", a),
    a.$inject = ["$scope", "appUtil", "$state", "$stateParams", "PolicyWizardManager", "Tab"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        a.stateString = c.getStateString(d),
        a.breadCrumb.states && !_.isNull(a.breadCrumb.states) && a.breadCrumb.states.reset(),
        a.isWizardFlow = _.includes(d.current.name, "app.config.policy.wizard.configureTrafficRules"),
        a.userAction = b.action,
        a.isWizardFlow ? (a.wizardObject = e.getInstance(),
        a.globalButtonState.customOptions = !1) : (a.globalButtonState.disableTabs = !1,
        a.globalButtonState.customOptions = !0),
        a.configureTrafficRulesTabs = [new f("Application Aware Routing",_.includes(d.current.name, "app.config.policy.wizard.configureTrafficRules.appAwareRouting") || _.includes(d.current.name, "app.config.policy.custom.traffic.appAwareRouting"),a.isWizardFlow ? "app.config.policy.wizard.configureTrafficRules.appAwareRouting" : "app.config.policy.custom.traffic.appAwareRouting"), new f("Traffic Data",_.includes(d.current.name, "app.config.policy.wizard.configureTrafficRules.trafficData") || _.includes(d.current.name, "app.config.policy.custom.traffic.data"),a.isWizardFlow ? "app.config.policy.wizard.configureTrafficRules.trafficData" : "app.config.policy.custom.traffic.data"), new f("Cflowd",_.includes(d.current.name, "app.config.policy.wizard.configureTrafficRules.trafficCflowd") || _.includes(d.current.name, "app.config.policy.custom.traffic.cflowd"),a.isWizardFlow ? "app.config.policy.wizard.configureTrafficRules.trafficCflowd" : "app.config.policy.custom.traffic.cflowd")]
    }
    angular.module("vManage").controller("ConfigureTrafficRulesController", a),
    a.$inject = ["$scope", "$stateParams", "appUtil", "$state", "PolicyWizardManager", "Tab"]
}(),
function() {
    function a(a, b, c, d) {
        a.stateString = c.getStateString(b),
        a.wizardObject = d.getInstance(),
        a.globalButtonState.customOptions = !1
    }
    angular.module("vManage").controller("CreateApplicationsController", a),
    a.$inject = ["$scope", "$state", "appUtil", "PolicyWizardManager"]
}(),
angular.module("vManage").controller("cancelWizard", cancelWizard),
cancelWizard.$inject = ["$scope", "$state", "appUtil", "$mdDialog"],
function() {
    function a(a, b, c, d, e, f) {
        a.wizardObject = d.getInstance(),
        a.userAction = c.action,
        a.breadCrumb.states = [{
            name: "centralized-policy",
            title: "Centralized Policy",
            state: "app.config.policy.centralizedPolicy.vsmart"
        }, {
            name: "addPolicy",
            title: "Add Policy"
        }],
        "edit" === a.userAction || "view" === a.userAction ? ("view" === a.userAction && (a.wizardObject.showWizardSteps = !1),
        b.go("app.config.policy.wizard.applyPolicies.edit"),
        a.editPolicyToggleButtons = [new e("Policy Application","app.config.policy.wizard.applyPolicies.edit" === b.current.name || "app.config.policy.wizard" === b.current.name,"app.config.policy.wizard.applyPolicies.edit"), new e("Topology","app.config.policy.wizard.configureTopology.topology" === b.current.name,"app.config.policy.wizard.configureTopology.topology"), new e("Traffic Rules","app.config.policy.wizard.configureTrafficRules.appAwareRouting" === b.current.name,"app.config.policy.wizard.configureTrafficRules.appAwareRouting")]) : b.go("app.config.policy.wizard.createApplications.define_lists.application"),
        a.$on("$destroy", function() {
            d.deleteInstance(),
            f.deleteInstance()
        })
    }
    angular.module("vManage").controller("PolicyWizardController", a),
    a.$inject = ["$scope", "$state", "$stateParams", "PolicyWizardManager", "ToggleButton", "PolicyAssembly"]
}(),
function() {
    function a() {
        var a = function() {
            var a = this;
            a.newPolicyDefinitions = {
                control: [],
                mesh: [],
                hubAndSpoke: [],
                vpnMembershipGroup: [],
                appRoute: [],
                data: [],
                cflowd: []
            }
        };
        return a
    }
    angular.module("vManage").factory("PolicyWizard", a),
    a.$inject = []
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        function j(a) {
            angular.isObject(a) && appUtil.checkNestedProperty(a, "error", "details") ? (h.error("Error occurred while processing policy: " + a.error.message + ":" + a.error.details),
            d.error(a.error.message + ": " + a.error.details)) : (h.info("API error response needs to be updated to conform to company guidelines."),
            d.error("Error occurred while processing policy"))
        }
        var k, l = {
            step1: {
                name: "step1",
                title: "Create Groups of Interest",
                route: "app.config.policy.wizard.createApplications.define_lists.application",
                state: "active",
                next: "step2",
                previous: null
            },
            step2: {
                name: "step2",
                title: "Configure Topology and VPN Membership",
                route: "app.config.policy.wizard.configureTopology.topology",
                state: "pending",
                next: "step3",
                previous: "step1"
            },
            step3: {
                name: "step3",
                title: "Configure Traffic Rules",
                route: "app.config.policy.wizard.configureTrafficRules.appAwareRouting",
                state: "pending",
                next: "step4",
                previous: "step2"
            },
            step4: {
                name: "step4",
                title: "Apply Policies to Sites and VPNs",
                route: "app.config.policy.wizard.applyPolicies",
                state: "pending",
                next: null,
                previous: "step3"
            }
        }, m = function() {
            a.apply(this),
            this.wizardSteps = angular.copy(l),
            this.showWizardSteps = !0
        };
        return m.prototype = new a,
        m.prototype.nextStep = function(a) {
            a.state = "complete",
            k.wizardSteps[a.next].state = "active",
            b.go(k.wizardSteps[a.next].route)
        }
        ,
        m.prototype.previousStep = function(a) {
            a.state = "pending",
            k.wizardSteps[a.previous].state = "active",
            b.go(k.wizardSteps[a.previous].route)
        }
        ,
        m.prototype.cancelWizard = function(a) {
            var c = []
              , d = [];
            angular.forEach(k.newPolicyDefinitions, function(a, b) {
                a.length && angular.forEach(a, function(a) {
                    "created" === a.type && d.push({
                        id: a.id,
                        key: b.toLowerCase()
                    })
                })
            }),
            d.length ? i.show({
                templateUrl: "app/configuration/policy/wizard/modals/cancelWizard.html",
                controller: "cancelWizard",
                targetEvent: a
            }).then(function() {
                angular.forEach(d, function(a) {
                    c.push(e.delete(f.TRAFFIC_POLICY_DEFINITION + a.key, a.id))
                }),
                g.all(c).then(function() {
                    b.go("app.config.policy.centralizedPolicy.vsmart")
                }, function() {
                    b.go("app.config.policy.centralizedPolicy.vsmart")
                })
            }, function() {}) : b.go("app.config.policy.centralizedPolicy.vsmart")
        }
        ,
        m.prototype.savePolicy = function(a) {
            d.clear();
            var e = c.getInstance({});
            e.isPolicyActivated ? i.show({
                templateUrl: "app/configuration/policy/modal/activateCentralizedPolicy.html",
                controller: "ActivateCentralizedPolicyModalCtrl",
                targetEvent: a,
                resolve: {
                    policy: function() {
                        return angular.extend(e, {
                            activated: e.isPolicyActivated
                        })
                    }
                }
            }).then(function(a) {
                b.go("app.device.status", {
                    activity: StatusService.getStatusAction("VSMART_POLICY_CONFIG").endpoint,
                    pid: a ? a.id : ""
                })
            }) : e.save().then(function(a) {
                b.go("app.config.policy.centralizedPolicy.vsmart", {
                    reload: !0
                })
            }, function(a) {
                j(a)
            })
        }
        ,
        {
            getInstance: function() {
                return k || (k = new m),
                k
            },
            deleteInstance: function() {
                k = null
            }
        }
    }
    angular.module("vManage").factory("PolicyWizardManager", a),
    a.$inject = ["PolicyWizard", "$state", "PolicyAssembly", "notification", "policyService", "apiConstants", "$q", "$log", "$mdDialog"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        a.stateString = "config_template_device_",
        a.cliTemplateEditor = ace.edit("cliTemplateConfigEditor"),
        a.cliTemplateEditor.setValue(""),
        a.cliTemplateEditor.$blockScrolling = 1 / 0,
        a.cliTemplateEditor.setShowPrintMargin(!1),
        a.templateAttached = "true" === b.params.attached,
        angular.forEach(a.$parent.tabs, function(a) {
            a.setActive(a.states.indexOf("template.device") > -1)
        }),
        a.searchBox = function() {
            a.cliTemplateEditor.execCommand("find")
        }
        ,
        a.deviceModels = [],
        a.templateSvc = g,
        a.template = {
            postInProgress: !0
        },
        f.getDeviceModelsPromise(a.deviceModels),
        f.getDeviceModelsPromise().then(function(c) {
            a.deviceModels = c,
            d.checkNestedProperty(b, "params", "templateId") ? (g.getCliDeviceTemplateObject(a, b.params.templateId),
            angular.equals(b.current.name, "app.config.template.device.cli.view") ? a.template.templateState = "readOnly" : angular.equals(b.current.name, "app.config.template.device.cli.edit") && (a.template.templateState = "edit")) : (a.template = g.getDeviceTemplate(),
            a.template.postInProgress = !1)
        }, function(b) {
            h.error(b.error.message + ": " + b.error.details),
            a.template.postInProgress = !1
        }),
        a.changeDeviceModels = function(b, c) {
            if (!g.verifyDeviceModelSelect(b))
                return a.template.deviceType = _.find(a.deviceModels, {
                    name: c
                }),
                !1
        }
        ,
        a.showContent = function(b) {
            a.template.templateConfiguration = b,
            a.cliTemplateEditor.setValue(a.template.templateConfiguration, -1)
        }
        ,
        a.add = function(b) {
            b.templateConfiguration = a.cliTemplateEditor.getValue(),
            g.addCLIDeviceTemplate(b)
        }
        ,
        a.update = function(b) {
            b.templateConfiguration = a.cliTemplateEditor.getValue(),
            g.editCLIDeviceTemplate(b)
        }
        ,
        a.replaceHtmlWithVariablesModal = function(b, d, e) {
            var f = a.cliTemplateEditor.session.getTextRange(a.cliTemplateEditor.getSelectionRange())
              , g = c.show({
                templateUrl: b,
                controller: d,
                targetEvent: e,
                resolve: {
                    highlightedElement: function() {
                        return f
                    }
                }
            });
            g.then(function(b) {
                a.cliTemplateEditor.session.replace(a.cliTemplateEditor.selection.getRange(), b)
            })
        }
        ,
        a.$watch("template.templateConfiguration", function(b, c) {
            b && b !== c && a.cliTemplateEditor.setValue(a.template.templateConfiguration, -1)
        }),
        a.$on("$destroy", function() {
            a.cliTemplateEditor.destroy()
        })
    }
    angular.module("vManage").controller("CLIDeviceTemplateCtrl", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "DeviceTemplateHttpService", "DeviceModel", "DeviceTemplateService", "notification", "$timeout"]
}(),
angular.module("vManage").controller("ConfigDeviceTemplateController", ConfigDeviceTemplateController),
ConfigDeviceTemplateController.$inject = ["$rootScope", "$scope", "$state", "appUtil", "$mdDialog", "DeviceTemplateHttpService", "notification", "Table", "TemplateDeviceInput", "Template", "$interval", "StatusService", "Idle", "adminService", "$timeout", "$q", "rbac"],
angular.module("vManage").controller("DeviceTemplateController", DeviceTemplateController),
DeviceTemplateController.$inject = ["$scope", "$state", "$timeout", "appUtil", "Template", "Table", "rbac", "DeviceTemplateService", "templatesConstants", "$log", "notification"],
angular.module("vManage").controller("FeatureDeviceTemplateController", FeatureDeviceTemplateController),
FeatureDeviceTemplateController.$inject = ["$timeout", "$scope", "$state", "DeviceModel", "notification", "appUtil", "DeviceTemplateService", "$filter"],
function() {
    function a() {
        return {
            restrict: "E",
            require: "^form",
            replace: !0,
            scope: !1,
            templateUrl: "app/configuration/template/device/directives/templateTableSection.html",
            link: function(a, b, c) {
                a.sectionName = c.sectionName
            }
        }
    }
    angular.module("vManage").directive("featureTemplateSection", a),
    a.$inject = []
}(),
function() {
    function a(a, b) {
        function c(a, d) {
            if (0 == d.length)
                return !0;
            var e = angular.copy(d)
              , f = e[0];
            if (e.splice(0, 1),
            !angular.equals(f.property, "type") && _.has(a, f.property)) {
                if (!angular.isArray(f.value))
                    return angular.equals(String(a[f.property]).toLowerCase(), String(f.value).toLowerCase()) && c(a, e);
                for (var g = 0; g < a[f.property].length; g++)
                    if (_.indexOf(f.value, a[f.property][g]) > -1)
                        return c(a, e)
            } else {
                if ((angular.equals(a.templateType, "vpn-vedge") || angular.equals(a.templateType, "vpn-vsmart")) && angular.equals(f.property, "type") && !b.isUndefinedOrEmpty(f.value)) {
                    var h = JSON.parse(a.templateDefinition);
                    return parseInt(h["vpn-id"].vipValue) == parseInt(f.value) && c(a, e)
                }
                if ((angular.equals(a.templateType, "vpn-vedge") || angular.equals(a.templateType, "vpn-vsmart")) && angular.equals(f.property, "type") && b.isUndefinedOrEmpty(f.value)) {
                    var h = JSON.parse(a.templateDefinition);
                    return 0 !== parseInt(h["vpn-id"].vipValue) && 512 !== parseInt(h["vpn-id"].vipValue) && c(a, e)
                }
                if (angular.equals(f.property, "type") && b.isUndefinedOrEmpty(f.value))
                    return c(a, e);
                if (angular.equals(f.property, "parentName"))
                    return c(a, e)
            }
        }
        function d(a, b) {
            var c = ""
              , d = "";
            for (var e in b) {
                var f = b[e];
                angular.equals(f.property, "parentName") ? c = f.value : angular.equals(f.property, "templateType") && (d = f.value)
            }
            if (d.indexOf("vpn-vedge") == -1 || angular.equals(c, "VPN 0"))
                return !0;
            var g = JSON.parse(a.templateDefinition)
              , h = g["tloc-extension"];
            return !(angular.isDefined(h) && !angular.equals(h.vipType, "ignore"))
        }
        return function(a, b) {
            if (!angular.isDefined(b) || !angular.isArray(b))
                return a;
            var e = [];
            return angular.forEach(a, function(a) {
                c(a, b) && d(a, b) && e.push(a)
            }),
            e
        }
    }
    angular.module("vManage").filter("filterByTemplateType", a),
    a.$inject = ["$filter", "appUtil"]
}(),
function() {
    function a(a, b, c) {
        a.ok = function() {
            _.includes(b.previousState.name, "app.config.template.device") ? b.go("app.config.template.device") : b.go("app.config.template.feature"),
            c.hide()
        }
        ,
        a.cancel = function() {
            c.cancel()
        }
    }
    angular.module("vManage").controller("CancelConfigModalController", a),
    a.$inject = ["$scope", "$state", "$mdDialog"]
}(),
function() {
    function a(a, b, c) {
        a.acknowledge = {
            deviceCount: c,
            checked: !1
        },
        a.ok = function() {
            b.hide()
        }
        ,
        a.cancel = function() {
            b.cancel()
        }
    }
    angular.module("vManage").controller("ConfigDeviceTemplateWarningController", a),
    a.$inject = ["$scope", "$mdDialog", "deviceCount"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        function l() {
            return new e({
                autoLoad: !0,
                toolbar: !1,
                columnResizing: !0,
                singleSelect: !0,
                enableSorting: !0,
                dataUid: "definitionId",
                toggleFirstRowOnLoad: !0,
                minRowsToShow: 3
            })
        }
        function m(a) {
            a.createColumns([{
                dataType: "string",
                hideable: !1,
                property: "devices",
                title: "Selected Device(s)"
            }, {
                dataType: "string",
                hideable: !1,
                property: "time",
                title: "Device Rollback Time (minutes)"
            }, {
                title: "",
                displayName: "",
                property: "modify-row",
                editable: !1,
                dataType: "string",
                width: 50,
                hideable: !1,
                headerTemplate: "ui-grid/ui-grid-no-header",
                cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</div>'
            }])
        }
        function n() {
            a.repeatedDevice = !1;
            var b = new Set;
            angular.forEach(a.selectedList, function(c) {
                !a.repeatedDevice && a.devicesSet.has(c.key) && (a.repeatedDevice = !0),
                b.add(c.key)
            }),
            a.repeatedDevice || (b.forEach(function(b) {
                b && a.devicesSet.add(b)
            }),
            angular.forEach(a.selectedList, function(b) {
                a.deviceAndRollBackTimers[b.key] = a.time.timer
            }),
            a.table.data.push({
                devices: o(a.selectedList, "name"),
                time: a.time.timer > 0 ? a.time.timer : "No Roll Back"
            }),
            a.selectedList = [],
            a.time.timer = 10,
            a.rollback = !0,
            a.devicesListItem.reset(),
            a.devicesListItem = angular.copy(a.deviceList))
        }
        function o(a, b) {
            var c = "";
            return _.isArray(a) && angular.forEach(a, function(a) {
                c += angular.isDefined(a[b]) ? a[b] : "",
                c += ", "
            }),
            c.trim().slice(0, -1)
        }
        a.time = {
            timer: 10
        },
        a.rollbackMessage = "Disable Rollback",
        a.deviceList = [],
        a.devicesSet = new Set,
        a.selectedList = [],
        a.emptyList = !1,
        a.repeatedDevice = !1,
        a.configureError = !1,
        a.deviceAndRollBackTimers = {},
        a.serverCallInProgress = !1,
        a.rollback = !0,
        a.password = {
            text: "",
            emptyPassword: !1,
            wrongPassword: !1
        },
        a.toggleRollbackMessage = function() {
            a.rollbackMessage = a.rollback ? "Disable Rollback" : "Enable Rollback"
        }
        ,
        j.getAttachedDevices(i.templateId).then(function(b) {
            if (k.length > 1) {
                var d = {};
                angular.forEach(b.data, function(a) {
                    d[a["local-system-ip"]] = a.personality
                }),
                angular.forEach(c, function(b) {
                    "vedge" === d[b["csv-deviceIP"]] && a.deviceList.push({
                        key: "-" === b["csv-host-name"] ? b["csv-deviceId"] : b["csv-host-name"],
                        name: "-" === b["csv-host-name"] ? b["csv-deviceId"] : b["csv-host-name"]
                    })
                })
            } else
                "vsmart" !== i.deviceType && "vmanage" !== i.deviceType && angular.forEach(c, function(b) {
                    a.deviceList.push({
                        key: "-" === b["csv-host-name"] ? b["csv-deviceId"] : b["csv-host-name"],
                        name: "-" === b["csv-host-name"] ? b["csv-deviceId"] : b["csv-host-name"]
                    })
                });
            a.devicesListItem = angular.copy(a.deviceList)
        }, function(b) {
            a.devicesListItem = []
        });
        var p = l();
        p.setAppScope({
            removeRow: function(b, c, d) {
                b.grid.options.data.splice(c, 1);
                var e = new Set(a.devicesSet);
                e.forEach(function(a) {
                    _.includes(b.entity.devices, a) && e.delete(a)
                }),
                a.devicesSet = e,
                delete a.deviceAndRollBackTimers[b.entity.devices]
            }
        }),
        m(p),
        a.table = p,
        a.addException = function(b) {
            return a.serverCallInProgress = !0,
            a.password.emptyPassword = !1,
            a.password.wrongPassword = !1,
            0 == a.selectedList.length ? (a.configureError = !0,
            a.configureMessage = {
                error: {
                    message: "Please fill in the required fields",
                    details: "All the required fields needs to be filled out to add an exception"
                }
            },
            a.repeatedDevice = !1,
            void (a.serverCallInProgress = !1)) : (a.emptyList = !1,
            a.configureError = !1,
            a.rollback || !angular.isUndefined(a.password.text) && 0 !== a.password.text.length ? void (a.rollback ? (n(),
            a.serverCallInProgress = !1) : h.validatePassword({
                password: a.password.text
            }).then(function(b) {
                a.serverCallInProgress = !1,
                a.time.timer = 0,
                n(),
                a.password.text = ""
            }, function(b) {
                a.serverCallInProgress = !1,
                a.password.wrongPassword = !0,
                a.configureMessage = b,
                a.configureError = !0
            })) : (a.password.emptyPassword = !0,
            void (a.serverCallInProgress = !1)))
        }
        ,
        a.saveChanges = function() {
            0 == a.table.data.length && (a.configureError = !0),
            a.configureMessage = {
                error: {
                    message: "Need one entry",
                    details: "Need one entry atleast."
                }
            },
            f.appendToTemplateDeviceRollBackTimer(a.deviceAndRollBackTimers),
            g.success("Roll back timer(s) successfully configured."),
            d.hide()
        }
        ,
        a.cancel = function() {
            d.cancel()
        }
    }
    angular.module("vManage").controller("configRollBackTimerModalController", a),
    a.$inject = ["$scope", "$state", "devices", "$mdDialog", "Table", "TemplateDeviceInput", "notification", "adminService", "template", "DeviceTemplateHttpService", "affectedDeviceTemplates"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        function h() {
            var b = {
                deviceInfo: [],
                deviceIpMap: {}
            }
              , c = new Set;
            return angular.forEach(a.list, function(a) {
                b.deviceInfo.push({
                    "csv-deviceIP": a.deviceIP,
                    "csv-deviceId": a.uuid,
                    "csv-host-name": a["host-name"]
                }),
                c.add(a["//system/system-ip"]),
                angular.isUndefined(b.deviceIpMap[a.deviceIP]) && (b.deviceIpMap[a.deviceIP] = []),
                b.deviceIpMap[a.deviceIP].push(a["host-name"])
            }),
            b
        }
        a.list = e.data,
        a.configureError = !1,
        a.save = function() {
            if (a.deviceInfoMap = h(),
            !f.checkForUniqueIps(a.deviceInfoMap.deviceIpMap)) {
                var b = "";
                for (var e in a.deviceInfoMap.deviceIpMap)
                    a.deviceInfoMap.deviceIpMap.hasOwnProperty(e) && a.deviceInfoMap.deviceIpMap[e].length > 1 && (b = b + g.convertArrayToString(a.deviceInfoMap.deviceIpMap[e]) + " | ");
                return a.configureMessage = {
                    error: {
                        message: "Duplicate IP addresses found",
                        details: "Duplicate IP addresses found on " + b.substring(0, b.length - 3)
                    }
                },
                void (a.configureError = !0)
            }
            var i = {};
            angular.forEach(a.list, function(a) {
                i[a["host-name"]] = a.deviceIP
            });
            var j = angular.copy(f.getTemplateDeviceInputs());
            angular.forEach(j, function(a) {
                angular.forEach(a.data, function(a) {
                    angular.isDefined(i[a["csv-host-name"]]) && (a["//system/system-ip"] = i[a["csv-host-name"]])
                })
            }),
            a.deviceInfoMap = f.getDeviceInfoMap(j);
            var k = [];
            k = {
                device: a.deviceInfoMap.deviceInfo
            },
            d.validateDuplicateIp(k).then(function(b) {
                if (0 === b.data.length)
                    f.setTemplateDeviceInput(j),
                    c.hide();
                else {
                    var d = "";
                    angular.forEach(b.data, function(a) {
                        d = d + a["host-name"] + ","
                    }),
                    a.configureMessage = {
                        error: {
                            message: "Duplicate Ips still found",
                            details: "Following Ips needs to be corrected on " + d.substring(0, d.length - 1)
                        }
                    },
                    a.configureError = !0
                }
            }, function(b) {
                a.configureMessage = b,
                a.configureError = !0
            })
        }
        ,
        a.cancel = function() {
            c.cancel()
        }
    }
    angular.module("vManage").controller("duplicateIpController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "DeviceTemplateHttpService", "resolveObj", "TemplateDeviceInput", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        a.stateString = c.getStateString(a.$parent.$state),
        a.showErrorSection = !1,
        a.errorMessage = {},
        a.table = new f({
            tableName: "outOfSyncTable",
            columnResizing: !0,
            enableSorting: !0,
            minRowsToShow: 10,
            dataUid: "deviceIp"
        }),
        a.table.createColumns([{
            property: "deviceIP",
            title: "System IP",
            dataType: "string",
            isDisplay: !0,
            minWidth: 200
        }, {
            property: "host-name",
            title: "Hostname",
            dataType: "string",
            isDisplay: !0,
            minWidth: 200
        }, {
            property: "site-id",
            title: "Site ID",
            dataType: "string",
            isDisplay: !0,
            minWidth: 200
        }, {
            property: "configStatusMessageDetails",
            dataType: "string",
            title: "Reason",
            isDisplay: !0,
            minWidth: 200,
            cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP"><md-tooltip md-direction="left" md-delay="1000">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</md-tooltip>{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
        }]),
        a.table.setDataUrl(e.DEVICE_TEMPLATE_OUT_OF_SYNC + d.entity.templateId),
        a.close = function() {
            b.cancel("cancel")
        }
    }
    angular.module("vManage").controller("ViewOutOfSyncDevicesModalInstanceCtrl", a),
    a.$inject = ["$scope", "$mdDialog", "appUtil", "selectedRow", "apiConstants", "Table"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
        var p = {
            basic: [],
            transportAndManagementVPN: [],
            serviceVPNOption: [],
            serviceVPN: [],
            wlan: [],
            optional: [],
            optionalBridge: [],
            bridgeOption: [],
            deviceModels: [],
            cellularProfile: [],
            cellularProfileOption: [],
            vEdgePolicies: [],
            featureTemplates: [],
            navSections: [],
            newlyCreatedTemplate: {
                tier1: {
                    template: void 0,
                    index: void 0
                },
                tier2: {
                    template: void 0,
                    index: void 0
                },
                tier3: {
                    template: void 0,
                    index: void 0
                },
                createdFeatureTemplate: {}
            },
            postInProgress: !1
        }
          , q = {
            basic: [{
                name: "aaa"
            }, {
                name: "omp-vedge"
            }, {
                name: "bfd-vedge"
            }, {
                name: "security-vedge"
            }, {
                name: "system-vedge"
            }, {
                name: "omp-vsmart"
            }, {
                name: "security-vsmart"
            }, {
                name: "system-vsmart"
            }],
            transportAndManagementVPN: [{
                name: "vpn-vedge",
                type: 0
            }, {
                name: "vpn-vedge",
                type: 512
            }, {
                name: "vpn-vsmart",
                type: 0
            }, {
                name: "vpn-vsmart",
                type: 512
            }],
            serviceVPN: [{
                name: "vpn-vedge"
            }],
            wlan: [{
                name: "wlan"
            }],
            optional: [{
                name: "banner"
            }, {
                name: "bridge"
            }, {
                name: "policy"
            }, {
                name: "snmp"
            }, {
                name: "cellular-profile"
            }]
        }
          , r = {
            property: "deviceStatus",
            title: "Device Status",
            dataType: "string",
            minWidth: 200,
            isDisplay: !0,
            cellTemplate: '<div class="ui-grid-cell-contents toggleContent"><span id="view_flow_details" ng-if="row.entity[\'outOfSyncCount\'] == 0">{{COL_FIELD CUSTOM_FILTERS}}</span><span class="link-cell red" ng-if="row.entity[\'outOfSyncCount\'] > 0" data-ng-click="grid.appScope.viewOutOfSyncReason(row, $event)">{{COL_FIELD}} - {{row.entity.outOfSyncCount}}</span></div>'
        }
          , s = function(a) {
            var b = a.template;
            if (!h.getSidebarMenu().disableFullConfigPush && a.createDeviceTemplate.$invalid)
                return b.postInProgress = !1,
                g.warning("All required templates must be configured.", 2e3),
                !1;
            var c = {};
            c.templateId = b.templateId,
            c.templateName = b.templateName,
            c.templateDescription = b.templateDescription,
            c.deviceType = b.deviceType.name,
            c.configType = "template",
            c.factoryDefault = !1,
            c.policyId = "",
            c.featureTemplateUidRange = [];
            var d = _.union(angular.copy(a.template.basic), angular.copy(a.template.transportAndManagementVPN), angular.copy(a.template.serviceVPN), angular.copy(a.template.wlan), angular.copy(a.template.optional), angular.copy(a.template.optionalBridge), angular.copy(a.template.cellularProfile));
            if (c.generalTemplates = j("filter")(t(c, d, a), function(a) {
                return angular.isDefined(a.templateId) && !_.isEmpty(a.templateId) && !angular.equals(a.templateType, "policy")
            }),
            !c.generalTemplates.length)
                return b.postInProgress = !1,
                !1;
            if (c.featureTemplateUidRange.length > 1) {
                var e, f, i = [], k = _.pluck(c.featureTemplateUidRange, "templateIdRange");
                e = k[0].split(",");
                for (var l = 0; l < e.length; l++)
                    if (f = e[l].split("-"),
                    1 == f.length && angular.isNumber(parseInt(f[0])))
                        i.push(parseInt(f[0]));
                    else if (2 == f.length)
                        for (var m = parseInt(f[0]); m <= parseInt(f[1]); m++)
                            i.push(m);
                i = _.uniq(i);
                for (var l = 1; l < k.length; l++) {
                    e = k[l].split(",");
                    for (var m = 0; m < e.length; m++)
                        if (f = e[m].split("-"),
                        1 == f.length && angular.isNumber(parseInt(f[0]))) {
                            if (_.indexOf(i, parseInt(f[0])) > -1)
                                return b.postInProgress = !1,
                                g.warning("IDs in ID Range field must be unique.", 2e3),
                                !1;
                            i.push(parseInt(f[0]))
                        } else if (2 == f.length)
                            for (var n = parseInt(f[0]); n <= parseInt(f[1]); n++) {
                                if (_.indexOf(i, n) > -1)
                                    return b.postInProgress = !1,
                                    g.warning("IDs in ID Range field must be unique.", 2e3),
                                    !1;
                                i.push(n)
                            }
                }
            }
            var o = _.find(a.template.optional, function(a) {
                return angular.equals(a.name, "policy")
            });
            return o && o.templateId && (c.policyId = o.templateId),
            c
        }
          , t = function(a, b, c) {
            for (var d = 0; d < b.length; d++)
                if (b[d].subTemplates && (b[d].subTemplates = t(a, b[d].subTemplates)),
                b[d].templateId) {
                    if (b[d].policyRequired && (a.policyRequired = !0),
                    b[d].connectionPreferenceRequired && (a.connectionPreferenceRequired = !0,
                    b[d].connectionPreference && (a.connectionPreference = !0)),
                    b[d].templateIdRange)
                        a.featureTemplateUidRange.push({
                            templateId: b[d].templateId,
                            templateType: b[d].name,
                            templateIdRange: b[d].templateIdRange,
                            uniqueKey: b[d].uniqueKey
                        });
                    else if (b[d].uniqueKey && k.isUndefinedOrEmpty(b[d].templateIdRange)) {
                        for (var e in c.createDeviceTemplate)
                            e.contains("templateIdRange") && c.createDeviceTemplate[e].$validate();
                        return g.warning("All required fields must be populated.", 2e3),
                        []
                    }
                    b[d] = {
                        templateId: b[d].templateId,
                        templateType: b[d].name,
                        subTemplates: b[d].subTemplates && b[d].subTemplates.length > 0 ? b[d].subTemplates : void 0
                    }
                } else
                    b.splice(d, 1),
                    d--;
            return b
        }
          , u = function() {
            var a;
            angular.forEach(p.basic, function(b) {
                v(a, b)
            }),
            angular.forEach(p.transportAndManagementVPN, function(b) {
                a = _.find(p.featureTemplates, function(a) {
                    var c = JSON.parse(a.templateDefinition);
                    return _.indexOf(a.deviceType, p.deviceType.name) > -1 && angular.equals(a.templateType, b.name) && parseInt(c["vpn-id"].vipValue) == parseInt(b.type) && a.factoryDefault
                }),
                a && (a.disabled = !0,
                b.templateId = a.templateId,
                b.templateName = a.templateName,
                b.templateDescription = a.templateDescription,
                b.policyRequired = a.policyRequired);
                var c = "0" === b.type ? "Factory_Default_vEdge_DHCP_Tunnel_Interface" : _.indexOf(["vedge-1000", "vedge-2000", "vedge-5000"], p.deviceType.name) > -1 ? "Factory_Default_vEdge_Management_Interface" : "Factory_Default_vEdge_100B_M_WM_Management_Interface"
                  , d = _.find(b.featureTemplates, function(a, b) {
                    JSON.parse(a.templateDefinition);
                    return _.indexOf(a.deviceType, p.deviceType.name) > -1 && angular.equals(a.templateName, c) && a.factoryDefault
                });
                if (d) {
                    d.disabled = !0;
                    var e = w(d, b);
                    b.subTemplates.push(e)
                }
                var f;
                "0" === b.type && (f = _.find(b.featureTemplates, function(a, b) {
                    return _.indexOf(a.deviceType, p.deviceType.name) > -1 && angular.equals(a.templateType, "vpn-vedge-interface-cellular") && a.factoryDefault
                })),
                f && (f.disabled = !0,
                e = w(f, b),
                b.subTemplates.push(e))
            }),
            angular.forEach(p.optional, function(b) {
                v(a, b)
            })
        }
          , v = function(a, b) {
            a = _.find(p.featureTemplates, function(a) {
                return _.indexOf(a.deviceType, p.deviceType.name) > -1 && angular.equals(a.templateType, b.name) && a.factoryDefault
            }),
            a && (a.disabled = !0,
            b.templateId = a.templateId,
            b.templateName = a.templateName,
            b.templateDescription = a.templateDescription,
            b.policyRequired = a.policyRequired,
            b.connectionPreferenceRequired = a.connectionPreferenceRequired,
            b.connectionPreference = a.connectionPreference)
        }
          , w = function(a, b) {
            var c = _.findIndex(b.subtree, function(b, c) {
                return angular.equals(b.name, a.templateType)
            });
            return {
                deviceModels: b.subtree[c].deviceModels,
                displayName: b.subtree[c].displayName,
                max: b.subtree[c].max,
                min: b.subtree[c].min,
                name: b.subtree[c].name,
                policyRequired: a.policyRequired,
                templateId: a.templateId,
                templateName: a.templateName,
                templateDescription: a.templateDescription,
                templateType: a.templateType,
                connectionPreferenceRequired: a.connectionPreferenceRequired,
                connectionPreference: a.connectionPreference
            }
        }
          , x = function(a, b, c) {
            if (angular.forEach(b, function(b) {
                if (angular.equals(b.templateType, "vpn-vedge") || angular.equals(b.templateType, "vpn-vsmart"))
                    if (C(a.template.featureTemplates, b.templateId, 0)) {
                        var c = _.findIndex(a.template.transportAndManagementVPN, function(a) {
                            return angular.equals(a.name, b.templateType) && angular.equals(a.type, "0")
                        });
                        z(a.template.transportAndManagementVPN, c, b, a.template.featureTemplates)
                    } else if (C(a.template.featureTemplates, b.templateId, 512)) {
                        var c = _.findIndex(a.template.transportAndManagementVPN, function(a) {
                            return angular.equals(a.name, b.templateType) && angular.equals(a.type, "512")
                        });
                        z(a.template.transportAndManagementVPN, c, b, a.template.featureTemplates)
                    } else {
                        var d = _.find(a.template.serviceVPNOption, function(a) {
                            return angular.equals(a.name, b.templateType)
                        });
                        d.featureTemplates = angular.copy(a.template.featureTemplates),
                        a.template.serviceVPN || (a.template.serviceVPN = []),
                        a.template.serviceVPN.push(angular.copy(d)),
                        z(a.template.serviceVPN, a.template.serviceVPN.length - 1, b, a.template.featureTemplates),
                        j("filter")(a.template.serviceVPN, {
                            name: d.name
                        }).length == d.max && (_.find(a.template.serviceVPNOption, function(a) {
                            return angular.equals(a.name, d.name)
                        }).disabled = !0)
                    }
                else if (_.indexOf(_.pluck(q.basic, "name"), b.templateType) > -1) {
                    if (y(a.template.basic, b, a.template.featureTemplates),
                    angular.equals(b.templateType, "system-vedge") && _.find(a.template.featureTemplates, function(a) {
                        return angular.equals(a.templateId, b.templateId)
                    }).asVBond) {
                        var e = _.find(p.basic, function(a) {
                            return angular.equals(a.name, "bfd-vedge")
                        });
                        e.min = 0;
                        var f = _.find(p.basic, function(a) {
                            return angular.equals(a.name, "omp-vedge")
                        });
                        f.min = 0
                    }
                } else if (_.indexOf(_.pluck(q.wlan, "name"), b.templateType) > -1)
                    y(a.template.wlan, b, a.template.featureTemplates);
                else if (_.indexOf(_.pluck(q.optional, "name"), b.templateType) > -1)
                    if (angular.equals(b.templateType, "bridge")) {
                        var d = _.find(a.template.bridgeOption, function(a) {
                            return angular.equals(a.name, b.templateType)
                        });
                        d.featureTemplates = angular.copy(a.template.featureTemplates),
                        a.template.optionalBridge.push(angular.copy(d)),
                        z(a.template.optionalBridge, a.template.optionalBridge.length - 1, b, a.template.featureTemplates),
                        j("filter")(a.template.optionalBridge, {
                            name: d.name
                        }).length == d.max && (_.find(a.template.bridgeOption, function(a) {
                            return angular.equals(a.name, d.name)
                        }).disabled = !0)
                    } else if (angular.equals(b.templateType, "cellular-profile")) {
                        var d = _.find(a.template.cellularProfileOption, function(a) {
                            return angular.equals(a.name, b.templateType)
                        });
                        d.featureTemplates = angular.copy(a.template.featureTemplates),
                        a.template.cellularProfile.push(angular.copy(d)),
                        z(a.template.cellularProfile, a.template.cellularProfile.length - 1, b, a.template.featureTemplates),
                        j("filter")(a.template.cellularProfile, {
                            name: d.name
                        }).length == d.max && (_.find(a.template.cellularProfileOption, function(a) {
                            return angular.equals(a.name, d.name)
                        }).disabled = !0)
                    } else
                        y(a.template.optional, b, a.template.featureTemplates)
            }),
            !k.isUndefinedOrEmpty(c)) {
                var d = _.find(a.template.optional, function(a) {
                    return angular.equals(a.name, "policy")
                })
                  , e = _.find(a.template.vEdgePolicies, function(a) {
                    return angular.equals(a.policyId, c)
                });
                e && angular.extend(d, {
                    templateId: c,
                    templateType: d.name,
                    templateName: e.policyName
                })
            }
        }
          , y = function(a, b, c) {
            var d = _.findIndex(a, function(a) {
                return angular.equals(a.name, b.templateType)
            });
            d > -1 && z(a, d, b, c)
        }
          , z = function(a, b, c, d) {
            if (b > -1) {
                angular.extend(a[b], c);
                var e = _.find(a[b].featureTemplates, function(a) {
                    return angular.equals(a.templateId, c.templateId)
                });
                e && (a[b].templateName = e.templateName),
                a[b].idRange && D(a[b]),
                a[b].subTemplates && A(a, b, c);
                var f = _.find(d, function(c) {
                    return angular.equals(c.templateId, a[b].templateId)
                });
                f && (f.disabled = !0,
                a[b].asVBond = f.asVBond,
                a[b].policyRequired = f.policyRequired,
                a[b].connectionPreferenceRequired = f.connectionPreferenceRequired,
                a[b].connectionPreference = f.connectionPreference)
            }
        }
          , A = function(a, b, c) {
            for (var d = 0; d < a[b].subTemplates.length; d++) {
                var e = a[b].subTemplates[d]
                  , f = _.find(a[b].subtree, function(a) {
                    return angular.equals(a.name, e.templateType)
                });
                angular.extend(e, f);
                var g = _.find(a[b].featureTemplates, function(a) {
                    return angular.equals(a.templateId, e.templateId)
                });
                g && (e.templateName = g.templateName,
                g.disabled = !0,
                e.policyRequired = g.policyRequired,
                e.connectionPreferenceRequired = g.connectionPreferenceRequired,
                e.connectionPreference = g.connectionPreference),
                e.idRange && D(e),
                k.checkNestedProperty(e, "subtree", 0) && !e.subTemplates && (e.subTemplates = []),
                e.subTemplates && angular.forEach(e.subTemplates, function(c) {
                    var d = _.find(e.subtree, function(a) {
                        return angular.equals(a.name, c.templateType)
                    });
                    angular.extend(c, d),
                    g = _.find(a[b].featureTemplates, function(a) {
                        return angular.equals(a.templateId, c.templateId)
                    }),
                    g && (c.templateName = g.templateName,
                    c.policyRequired = g.policyRequired,
                    c.connectionPreferenceRequired = g.connectionPreferenceRequired,
                    c.connectionPreference = g.connectionPreference),
                    c.idRange && D(c)
                }),
                B(a, e, b)
            }
        }
          , B = function(a, b, c) {
            j("filter")(a[c].subTemplates, {
                name: b.name
            }).length == b.max && (_.find(a[c].subtree, function(a) {
                return angular.equals(a.name, b.name)
            }).disabled = !0)
        }
          , C = function(a, b, c) {
            var d = _.find(a, function(a) {
                return angular.equals(a.templateId, b)
            })
              , e = JSON.parse(d.templateDefinition);
            return parseInt(e["vpn-id"].vipValue) == c
        }
          , D = function(a) {
            var b = _.find(p.featureTemplateUidRange, function(b) {
                return angular.equals(b.templateId, a.templateId)
            });
            b && (a.templateIdRange = b.templateIdRange)
        }
          , E = function(a, b) {
            _.find(a, function(a) {
                return angular.equals(a.name, b.name)
            }).disabled = !0
        }
          , F = function(a, b) {
            _.find(a, function(a) {
                return angular.equals(a.name, b.name)
            }).disabled = !1
        }
          , G = function(a, b, c, d) {
            var e = ""
              , f = "";
            b && !_.isEmpty(b) || (b = _.find(c, function(b) {
                return angular.equals(a.templateId, b.templateId)
            }));
            var g = JSON.parse(b.templateDefinition)
              , h = g["tunnel-source"]
              , i = g["tunnel-destination"];
            angular.isDefined(h) && angular.equals(h.vipType, "constant") && angular.isDefined(h.vipValue) && (e = h.vipValue),
            angular.isDefined(i) && angular.equals(i.vipType, "constant") && angular.isDefined(i.vipValue) && (f = i.vipValue);
            for (var j in c) {
                var k = c[j];
                if (!angular.equals(k.templateId, a.templateId)) {
                    var g = JSON.parse(k.templateDefinition)
                      , h = g["tunnel-source"]
                      , i = g["tunnel-destination"];
                    angular.isDefined(h) && angular.equals(h.vipType, "constant") && angular.isDefined(h.vipValue) && angular.equals(h.vipValue, e) && angular.isDefined(i) && angular.equals(i.vipType, "constant") && angular.isDefined(i.vipValue) && angular.equals(i.vipValue, f) && (c[j].disabled = d)
                }
            }
        };
        return {
            setDeviceTemplate: function(a) {
                p = angular.extend(a)
            },
            getDeviceTemplate: function() {
                return p
            },
            clearDeviceTemplate: function() {
                p = {
                    basic: [],
                    transportAndManagementVPN: [],
                    serviceVPNOption: [],
                    wlan: [],
                    bridgeOption: [],
                    serviceVPN: [],
                    optional: [],
                    optionalBridge: [],
                    cellularProfile: [],
                    cellularProfileOption: [],
                    deviceModels: [],
                    vEdgePolicies: [],
                    featureTemplates: [],
                    navSections: [],
                    newlyCreatedTemplate: {
                        tier1: {
                            template: void 0,
                            index: void 0
                        },
                        tier2: {
                            template: void 0,
                            index: void 0
                        },
                        tier3: {
                            template: void 0,
                            index: void 0
                        },
                        createdFeatureTemplate: {}
                    },
                    postInProgress: !1
                }
            },
            isvBondConfigured: function() {
                var a = i.defer();
                return d.isvBondConfigured().then(function(c) {
                    if (c.isVbondConfigured)
                        a.resolve();
                    else {
                        var d = h.getUserMode();
                        "multiTenant-tenant" === d.mode || "multiTenant-provider" === d.mode ? g.error("vBond needs to be configured. Please contact provider to update vBond settings.") : g.error("Please configure vBond. Redirecting ..."),
                        l(function() {
                            "multiTenant-provider" === d.mode ? b.go("app.config.template.device") : "multiTenant-tenant" !== d.mode && b.go("app.admin.settings")
                        }, 3e3)
                    }
                }, function(b) {
                    a.reject(b)
                }),
                a.promise
            },
            exportTemplateToCSV: function(a) {
                var b = a.entity.templateName
                  , c = a.entity;
                if ($("#table-dropdown-menu").remove(),
                0 == c.devicesAttached) {
                    var e = {};
                    e.templateId = c.templateId,
                    e.isEdited = !1,
                    e.isMasterEdited = !1,
                    d.exportTemplateToCSV(e).then(function(a) {
                        var c = a.header.columns
                          , d = "";
                        for (var e in c)
                            angular.equals(c[e].property, "csv-status") || (d += c[e].property,
                            e != c.length - 1 && (d += ","));
                        var f = document.createElement("a");
                        f.download = b + ".csv",
                        f.href = "data:attachment/csv;charset=utf-8," + encodeURI(d),
                        document.body.appendChild(f),
                        f.click(),
                        document.body.removeChild(f)
                    }, function(a) {
                        g.error(a.error.message + ": " + a.error.details)
                    })
                } else
                    d.getAttachedDevices(c.templateId).then(function(a) {
                        var e = {};
                        e.templateId = c.templateId,
                        e.deviceIds = _.pluck(a.data, "uuid"),
                        e.isEdited = !1,
                        e.isMasterEdited = !1,
                        d.generateInput(e).then(function(a) {
                            var c = a.data
                              , d = "";
                            for (var e in c) {
                                var f = c[e];
                                angular.forEach(f, function(a, b) {
                                    angular.equals(b, "csv-status") || (d += '"' + b + '",')
                                }),
                                d = d.slice(0, -1);
                                break
                            }
                            for (var e in c) {
                                var f = c[e];
                                d += "\n",
                                angular.forEach(f, function(a, b) {
                                    angular.equals(b, "csv-status") || (a = a.replace(/"/gi, '""'),
                                    d += '"' + a + '",')
                                }),
                                d = d.slice(0, -1)
                            }
                            var g = document.createElement("a");
                            g.download = b + ".csv",
                            g.href = "data:attachment/csv;charset=utf-8," + encodeURI(d),
                            document.body.appendChild(g),
                            g.click(),
                            document.body.removeChild(g)
                        }, function(a) {
                            g.error(a.error.message + ": " + a.error.details)
                        })
                    }, function(a) {
                        g.error(a.error.message + ": " + a.error.details)
                    })
            },
            getvEdgePolicies: function(a) {
                e.listVEdgePolicy().then(function(b) {
                    a.template.vEdgePolicies = j("orderBy")(b.data, "policyName")
                }, function(b) {
                    g.error(b.error.message + ": " + b.error.details),
                    a.template.postInProgress = !1
                })
            },
            getFeatureDeviceTemplateObject: function(a, b) {
                var c = this;
                d.getDeviceTemplate(b).then(function(b) {
                    angular.extend(a.template, b),
                    c.getGeneralTemplates(a, a.template.deviceModels)
                }, function(b) {
                    g.error(b.error.message + ": " + b.error.details),
                    a.template.postInProgress = !1
                })
            },
            getDeviceTemplates: function(a, b) {
                var c = i.defer();
                return i.all([d.listDeviceTemplates(), d.getDeviceOutOfSync()]).then(function(d) {
                    var e, f = d[0], h = d[1];
                    return f.header.columns.push(r),
                    angular.forEach(f.data, function(a) {
                        e = _.find(h.data, {
                            templateId: a.templateId
                        }),
                        e ? angular.extend(a, {
                            deviceStatus: "Out of Sync",
                            outOfSyncCount: e.count
                        }) : angular.extend(a, {
                            deviceStatus: "In Sync",
                            outOfSyncCount: 0
                        })
                    }),
                    c.resolve(f),
                    !!b || (k.checkNestedProperty(f.header, "viewKeys", "preferenceKey") ? (a.options.savedStateKey = f.header.viewKeys.preferenceKey,
                    n.get(m.VIEW_PREFERENCE + a.options.savedStateKey).then(function(b) {
                        if (angular.isDefined(b.state)) {
                            if (a.savedState = b.state,
                            k.checkNestedProperty(a.savedState, "columns")) {
                                var c = _.find(a.savedState.columns, function(a) {
                                    return angular.equals(a.name, "hoverActions")
                                });
                                c && (c.pinned = "right")
                            }
                            delete a.savedState.selection,
                            a.uiGridApi.saveState.restore(a, a.savedState),
                            a.options.toggleFirstRowOnLoad && l(function() {
                                a.uiGridApi.selection.selectRow && a.data.length > 0 && a.uiGridApi.selection.selectRow(a.uiGridApi.grid.renderContainers.body.visibleRowCache[0].entity)
                            })
                        }
                    }, function(b) {
                        angular.isObject(b) && k.checkNestedProperty(b, "error", "details") ? (o.error("Error occurred while retrieving table data: " + b.error.message + ":" + b.error.details),
                        g.error(b.error.message + ": " + b.error.details)) : (o.info("API error response needs to be updated to conform to company guidelines" + a.dataUrl),
                        g.error("Error occurred while retrieving table data.")),
                        a.error = !0
                    })) : void (a.options.toggleFirstRowOnLoad && l(function() {
                        a.uiGridApi.selection.selectRow && a.data.length > 0 && a.uiGridApi.selection.selectRow(a.uiGridApi.grid.renderContainers.body.visibleRowCache[0].entity)
                    })))
                }, function(a) {
                    c.reject(a)
                }),
                c.promise
            },
            getGeneralTemplates: function(a, b) {
                var c = this;
                d.getGeneralTemplates().then(function(d) {
                    a.template.featureTemplates = d,
                    a.template.templateState ? (a.template.deviceType = _.findWhere(b, {
                        name: a.template.deviceType
                    }),
                    c.getDeviceTemplateDefinition(a)) : k.checkNestedProperty(a.template, "deviceType", "deviceType") ? (a.template.deviceType = _.findWhere(b, {
                        name: a.template.deviceType.name
                    }),
                    c.getDeviceTemplateDefinition(a)) : a.template.postInProgress = !1
                }, function(b) {
                    g.error(b.error.message + ": " + b.error.details),
                    a.template.postInProgress = !1
                })
            },
            pushToFeatureTemplateList: function(a) {
                function b(a, b, d, e) {
                    return !!p.newlyCreatedTemplate.tier1.template && (p.newlyCreatedTemplate.tier2.template ? p.newlyCreatedTemplate.tier3.template ? c.setTemplateProperty(a[b].subTemplates[p.newlyCreatedTemplate.tier2.index].subTemplates[p.newlyCreatedTemplate.tier3.index], p.newlyCreatedTemplate.createdFeatureTemplate, e) : c.setTemplateProperty(a[b].subTemplates[p.newlyCreatedTemplate.tier2.index], p.newlyCreatedTemplate.createdFeatureTemplate, e) : c.setTemplateProperty(a[b], p.newlyCreatedTemplate.createdFeatureTemplate, p.featureTemplates),
                    void (p.newlyCreatedTemplate = {
                        tier1: {
                            template: void 0,
                            index: void 0
                        },
                        tier2: {
                            template: void 0,
                            index: void 0
                        },
                        tier3: {
                            template: void 0,
                            index: void 0
                        },
                        createdFeatureTemplate: {}
                    }))
                }
                var c = this;
                if ("string" != typeof a.templateDefinition) {
                    var d = JSON.stringify(a.templateDefinition);
                    a.templateDefinition = d
                }
                if (a = {
                    templateName: a.templateName,
                    templateType: a.templateType,
                    templateId: a.templateId,
                    templateMinVersion: a.templateMinVersion,
                    templateDescription: a.templateDescription,
                    templateDefinition: a.templateDefinition,
                    deviceType: a.deviceType,
                    deviceModels: a.deviceModels,
                    asVBond: a.asVBond,
                    tunnelInterfaceEnabled: a.tunnelInterfaceEnabled,
                    connectionPreference: a.connectionPreference,
                    connectionPreferenceRequired: a.connectionPreferenceRequired,
                    policyRequired: a.policyRequired
                },
                p.featureTemplates.push(a),
                p.newlyCreatedTemplate.createdFeatureTemplate = angular.copy(a),
                angular.forEach(p.basic, function(c, d) {
                    c.featureTemplates.push(a),
                    p.newlyCreatedTemplate.tier1.template && angular.equals(c.name, p.newlyCreatedTemplate.tier1.template.name) && b(p.basic, d, c.featureTemplates, c.featureTemplates)
                }),
                angular.equals(a.templateType, "system-vedge") && a.asVBond) {
                    var e = _.find(p.basic, function(a) {
                        return angular.equals(a.name, "bfd-vedge")
                    });
                    e.min = 0,
                    this.resetTemplateProperty(e, e.featureTemplates);
                    var f = _.find(p.basic, function(a) {
                        return angular.equals(a.name, "omp-vedge")
                    });
                    f.min = 0,
                    this.resetTemplateProperty(f, f.featureTemplates)
                }
                angular.forEach(p.transportAndManagementVPN, function(c, d) {
                    c.featureTemplates.push(a);
                    var e = angular.copy(c.featureTemplates);
                    p.newlyCreatedTemplate.tier1.template && angular.equals(c.name, p.newlyCreatedTemplate.tier1.template.name) && angular.equals(c.type, p.newlyCreatedTemplate.tier1.template.type) && b(p.transportAndManagementVPN, d, c.featureTemplates, e),
                    c.featureTemplates = e
                }),
                angular.forEach(p.serviceVPN, function(c, d) {
                    c.featureTemplates.push(a);
                    var e = angular.copy(c.featureTemplates);
                    p.newlyCreatedTemplate.tier1.template && angular.equals(c.name, p.newlyCreatedTemplate.tier1.template.name) && angular.equals(c.type, p.newlyCreatedTemplate.tier1.template.type) && angular.equals(d, p.newlyCreatedTemplate.tier1.index) && b(p.serviceVPN, d, c.featureTemplates, e),
                    c.featureTemplates = e
                }),
                angular.forEach(p.serviceVPNOption, function(b) {
                    b.featureTemplates.push(a)
                }),
                angular.forEach(p.wlan, function(c, d) {
                    c.featureTemplates.push(a),
                    p.newlyCreatedTemplate.tier1.template && angular.equals(c.name, p.newlyCreatedTemplate.tier1.template.name) && angular.equals(c.type, p.newlyCreatedTemplate.tier1.template.type) && angular.equals(d, p.newlyCreatedTemplate.tier1.index) && b(p.wlan, d, c.featureTemplates)
                }),
                angular.forEach(p.optional, function(c, d) {
                    c.featureTemplates.push(a),
                    p.newlyCreatedTemplate.tier1.template && angular.equals(c.name, p.newlyCreatedTemplate.tier1.template.name) && b(p.optional, d, c.featureTemplates)
                }),
                angular.forEach(p.optionalBridge, function(c, d) {
                    c.featureTemplates.push(a),
                    p.newlyCreatedTemplate.tier1.template && angular.equals(c.name, p.newlyCreatedTemplate.tier1.template.name) && angular.equals(d, p.newlyCreatedTemplate.tier1.index) && b(p.optionalBridge, d, c.featureTemplates)
                }),
                angular.forEach(p.bridgeOption, function(b) {
                    b.featureTemplates.push(a)
                }),
                angular.forEach(p.cellularProfile, function(c, d) {
                    c.featureTemplates.push(a),
                    p.newlyCreatedTemplate.tier1.template && angular.equals(c.name, p.newlyCreatedTemplate.tier1.template.name) && angular.equals(d, p.newlyCreatedTemplate.tier1.index) && b(p.cellularProfile, d, c.featureTemplates)
                }),
                angular.forEach(p.cellularProfileOption, function(b) {
                    b.featureTemplates.push(a)
                })
            },
            getDeviceTemplateDefinition: function(a) {
                d.getDeviceTemplatesDefinition(a.template.deviceType.deviceType).then(function(b) {
                    b.fields = j("orderBy")(b.fields, "name");
                    var c;
                    angular.forEach(b.fields, function(b) {
                        if (b.featureTemplates = angular.copy(a.template.featureTemplates),
                        k.checkNestedProperty(b, "subtree", "0")) {
                            angular.isDefined(b.subTemplates) || (b.subTemplates = []);
                            var d = [];
                            angular.forEach(b.subtree, function(e, f) {
                                return _.indexOf(e.deviceModels, a.template.deviceType.name) < 0 ? (d.push(f),
                                !1) : void (e.min > 0 && (c = angular.copy(e),
                                v({}, c),
                                b.subTemplates.push(c),
                                j("filter")(b.subTemplates, {
                                    name: e.name
                                }).length == e.max && E(b.subtree, e)))
                            }),
                            k.removeFromArray(b.subtree, d)
                        }
                    }),
                    a.template.basic = _.filter(b.fields, function(b) {
                        return _.indexOf(b.deviceModels, a.template.deviceType.name) > -1 && _.indexOf(_.pluck(q.basic, "name"), b.name) > -1
                    }),
                    a.template.basic.length > 0 && a.template.navSections.push({
                        title: "Basic Information",
                        sectionId: "section-basic"
                    }),
                    a.template.transportAndManagementVPN = _.filter(b.fields, function(b) {
                        return _.indexOf(b.deviceModels, a.template.deviceType.name) > -1 && _.indexOf(_.pluck(q.transportAndManagementVPN, "name"), b.name) > -1 && ("0" === b.type || "512" == b.type)
                    }),
                    a.template.transportAndManagementVPN.length > 0 && a.template.navSections.push({
                        title: "Transport & Management VPN",
                        sectionId: "section-transport-management-vpn"
                    }),
                    a.template.serviceVPNOption = _.filter(b.fields, function(b) {
                        return _.indexOf(b.deviceModels, a.template.deviceType.name) > -1 && _.indexOf(_.pluck(q.serviceVPN, "name"), b.name) > -1 && "" === b.type
                    }),
                    a.template.serviceVPNOption.length > 0 && (a.template.serviceVPNOption[0].addCount = 1,
                    a.template.navSections.push({
                        title: "Service VPN",
                        sectionId: "section-service-vpn"
                    })),
                    a.template.wlan = _.filter(b.fields, function(b) {
                        return _.indexOf(b.deviceModels, a.template.deviceType.name) > -1 && _.indexOf(_.pluck(q.wlan, "name"), b.name) > -1
                    }),
                    a.template.wlan.length > 0 && a.template.navSections.push({
                        title: "WLAN",
                        sectionId: "section-wlan"
                    }),
                    a.template.optional = _.filter(b.fields, function(b) {
                        return _.indexOf(b.deviceModels, a.template.deviceType.name) > -1 && _.indexOf(_.pluck(q.optional, "name"), b.name) > -1 && "bridge" !== b.name && "cellular-profile" !== b.name
                    }),
                    a.template.bridgeOption = angular.copy(_.filter(b.fields, function(a) {
                        return angular.equals(a.name, "bridge")
                    })),
                    a.template.bridgeOption.length && (a.template.bridgeOption[0].addCount = 1),
                    a.template.cellularProfileOption = angular.copy(_.filter(b.fields, function(a) {
                        return angular.equals(a.name, "cellular-profile")
                    })),
                    a.template.cellularProfileOption.length && (a.template.cellularProfileOption[0].addCount = 1),
                    a.template.optional.length > 0 && a.template.navSections.push({
                        title: "Additional Templates",
                        sectionId: "section-other"
                    }),
                    angular.isDefined(a.template.templateId) ? x(a, a.template.generalTemplates, angular.isDefined(a.template.policyId) ? a.template.policyId : void 0) : u(),
                    a.template.postInProgress = !1
                }, function(b) {
                    g.error(b.error.message + ": " + b.error.details),
                    a.template.postInProgress = !1
                })
            },
            viewFeatureTemplate: function(a) {
                return !!a && void b.go("app.config.template.feature", {
                    display: "view",
                    templateId: a
                })
            },
            createFeatureTemplate: function(a, c, d) {
                angular.extend(p.newlyCreatedTemplate, d),
                b.go("app.config.template.feature", {
                    display: "add",
                    deviceType: c,
                    templateType: a.name
                })
            },
            getCliDeviceTemplateObject: function(a, b) {
                d.getDeviceTemplate(b).then(function(b) {
                    angular.extend(a.template, b),
                    a.template.deviceType = _.findWhere(a.deviceModels, {
                        name: a.template.deviceType
                    }),
                    a.template.postInProgress = !1
                }, function(b) {
                    g.error(b.error.message + ": " + b.error.details),
                    a.template.postInProgress = !1
                })
            },
            transitionToEditDeviceTemplate: function(a) {
                angular.equals(a.configType, "template") ? (this.clearDeviceTemplate(),
                b.go("app.config.template.device.feature.edit", {
                    templateId: a.templateId,
                    attached: a.devicesAttached > 0
                })) : angular.equals(a.configType, "file") && b.go("app.config.template.device.cli.edit", {
                    templateId: a.templateId,
                    attached: a.devicesAttached > 0
                })
            },
            transitionToViewDeviceTemplate: function(a) {
                angular.equals(a.configType, "template") ? (this.clearDeviceTemplate(),
                b.go("app.config.template.device.feature.view", {
                    templateId: a.templateId
                })) : angular.equals(a.configType, "file") && b.go("app.config.template.device.cli.view", {
                    templateId: a.templateId
                })
            },
            transitionToCreateDeviceTemplate: function(a) {
                angular.equals(a, "template") ? (this.clearDeviceTemplate(),
                b.go("app.config.template.device.feature.create")) : angular.equals(a, "file") && (this.clearDeviceTemplate(),
                b.go("app.config.template.device.cli.create"))
            },
            attachDeviceModalReturnCallback: function(a) {
                f.setTemplateDeviceInput(a),
                b.go("app.config.template.device.configure", {
                    templateId: a.selectedTemplate.templateId
                })
            },
            addCLIDeviceTemplate: function(a, c) {
                var e = {
                    templateName: a.templateName,
                    templateDescription: a.templateDescription,
                    deviceType: a.deviceType.name,
                    templateConfiguration: a.templateConfiguration,
                    factoryDefault: !1,
                    configType: "file"
                };
                a.postInProgress = !0,
                d.createDeviceCLITemplate(e).then(function(c) {
                    a.postInProgress = !1,
                    g.success("Device template successfully created.", 2e3),
                    b.go("app.config.template.device")
                }, function(b) {
                    a.postInProgress = !1,
                    g.error(b.error.message + ": " + b.error.details)
                })
            },
            editCLIDeviceTemplate: function(a, c) {
                var e, i = this, j = {
                    templateId: a.templateId,
                    templateName: a.templateName,
                    templateDescription: a.templateDescription,
                    deviceType: a.deviceType.name,
                    templateConfiguration: a.templateConfiguration,
                    factoryDefault: !1,
                    configType: "file"
                }, k = {};
                a.postInProgress = !0,
                d.updateDeviceTemplate(a.templateId, j).then(function(b) {
                    return b.data.attachedDevices && b.data.attachedDevices.length > 0 ? (k.templateId = a.templateId,
                    k.deviceIds = _.pluck(b.data.attachedDevices, "uuid"),
                    k.isEdited = !0,
                    k.isMasterEdited = !0,
                    e = b.data.processId,
                    d.generateInput(k)) : (a.postInProgress = !1,
                    g.success("Device template successfully updated.", 2e3),
                    i.cancel(),
                    void 0)
                }).then(function(c) {
                    a.postInProgress = !1,
                    c && h.allowAccess("Template Deploy") && (c.selectedTemplate = j,
                    c.attachedDevices = k.deviceIds,
                    c.selectedDevices = a.deviceIds,
                    c.isEdited = !0,
                    c.isMasterEdited = !0,
                    c.processId = e,
                    f.setTemplateDeviceInput(c),
                    b.go("app.config.template.device.configure", {
                        templateId: c.selectedTemplate.templateId
                    }))
                }, function(b) {
                    a.postInProgress = !1,
                    g.error(b.error.message + ": " + b.error.details)
                })
            },
            addFeatureDeviceTemplate: function(a) {
                var b = this;
                a.template.postInProgress = !0;
                var c = s(a);
                return !!c && (c.policyRequired && !c.policyId ? (g.error("This Device Template includes a Feature Template that requires Policy Template. Please configure a policy."),
                a.template.postInProgress = !1,
                a.createDeviceTemplate.$valid = !1,
                !1) : c.connectionPreferenceRequired && !c.connectionPreference ? (g.error("At least one tunnel in this Device Template must have a non-0 preference value."),
                a.template.postInProgress = !1,
                a.createDeviceTemplate.$valid = !1,
                !1) : void d.createDeviceFeatureTemplate(c).then(function(c) {
                    a.template.postInProgress = !1,
                    g.success("Device template successfully created.", 2e3),
                    b.cancel()
                }, function(b) {
                    a.template.postInProgress = !1,
                    g.error(b.error.message + ": " + b.error.details)
                }))
            },
            updateFeatureDeviceTemplate: function(a) {
                var c = this;
                a.template.postInProgress = !0;
                var e, h = s(a);
                if (!h)
                    return !1;
                if (h.policyRequired && !h.policyId)
                    return g.error("This Device Template includes a Feature Template that requires Policy Template. Please configure a policy."),
                    a.createDeviceTemplate.$valid = !1,
                    a.template.postInProgress = !1,
                    !1;
                if (h.connectionPreferenceRequired && !h.connectionPreference)
                    return g.error("At least one tunnel in this Device Template must have a non-0 preference value."),
                    a.template.postInProgress = !1,
                    a.createDeviceTemplate.$valid = !1,
                    !1;
                var i = {};
                d.updateDeviceTemplate(h.templateId, h).then(function(b) {
                    return b.data.attachedDevices && b.data.attachedDevices.length > 0 ? (i.templateId = h.templateId,
                    i.deviceIds = _.pluck(b.data.attachedDevices, "uuid"),
                    i.isEdited = !0,
                    i.isMasterEdited = !0,
                    e = b.data.processId,
                    d.generateInput(i)) : (a.template.postInProgress = !1,
                    g.success("Device template successfully updated.", 2e3),
                    c.cancel(),
                    void 0)
                }).then(function(a) {
                    if (a) {
                        var c = [{
                            selectedTemplate: h,
                            header: a.header,
                            data: a.data,
                            attachedDevices: i.deviceIds,
                            selectedDevices: _.pluck(a.data, "csv-deviceId"),
                            isEdited: !0,
                            isMasterEdited: !0,
                            processId: e
                        }];
                        f.setTemplateDeviceInput(c),
                        b.go("app.config.template.device.configure", {
                            templateId: c[0].selectedTemplate.templateId
                        })
                    }
                }, function(b) {
                    a.template.postInProgress = !1,
                    g.error(b.error.message + ": " + b.error.details)
                })
            },
            changeDeviceTemplateDeviceSpecificValue: function(a, c) {
                var e = {};
                d.getAttachedDevices(a.templateId).then(function(b) {
                    return c = !1,
                    e.templateId = a.templateId,
                    e.deviceIds = _.pluck(b.data, "uuid"),
                    e.isEdited = !1,
                    e.isMasterEdited = !1,
                    d.generateInput(e)
                }).then(function(c) {
                    if (c) {
                        var d = [{
                            selectedTemplate: a,
                            header: c.header,
                            data: c.data,
                            attachedDevices: e.deviceIds,
                            selectedDevices: _.pluck(c.data, "csv-deviceId"),
                            isEdited: !1,
                            isMasterEdited: !1
                        }];
                        f.setTemplateDeviceInput(d),
                        b.go("app.config.template.device.configure", {
                            templateId: d[0].selectedTemplate.templateId
                        })
                    }
                }, function(a) {
                    c = !1,
                    g.error(a.error.message + ": " + a.error.details)
                })
            },
            toggleDropdownTemplateCount: function(b) {
                $(b.target).dropdown("toggle"),
                a.bind("click", function(a) {
                    return a.stopPropagation(),
                    !($(a.target).closest(".btnDropDownIcon-group.template-addcount-dropdown").length > 0) && void $(".btnDropDownIcon-group.template-addcount-dropdown").removeClass("open")
                })
            },
            showTemplateforDeviceModel: function(a, b) {
                var c = !1;
                return angular.forEach(b, function(b, d) {
                    angular.equals(b, a.name) && (c = !0)
                }),
                c
            },
            addServiceVPN: function(a, b, c, d) {
                if (a.length == b.max)
                    return g.warning("Maximum " + b.displayName + " reached [" + b.max + "]."),
                    !1;
                for (var e = 0; e < b.addCount && a.length != b.max; e++)
                    a.push(angular.copy(b));
                a.length == b.max && (b.disabled = !0),
                $(d.target).closest(".btnDropDownIcon-group.template-addcount-dropdown").removeClass("open"),
                l(function() {
                    var a = $("#" + c).children(".template-table-with-options").find(".template-feature").last();
                    $(".createDeviceTemplate").scrollTo(a, {
                        duration: 500,
                        offset: {
                            top: -125,
                            left: 0
                        }
                    })
                })
            },
            addSubTemplate: function(a, b) {
                var c = angular.copy(b);
                k.checkNestedProperty(c, "subtree", "0") && (angular.isDefined(c.subTemplates) || (c.subTemplates = []),
                angular.forEach(c.subtree, function(a) {
                    a.min > 0 && (c.subTemplates.push(a),
                    j("filter")(c.subTemplates, {
                        name: a.name
                    }).length == a.max && E(c.subtree, a))
                })),
                angular.isDefined(a.subTemplates) || (a.subTemplates = []),
                a.subTemplates.push(c),
                j("filter")(a.subTemplates, {
                    name: b.name
                }).length == b.max && E(a.subtree, b),
                a.subTemplates = j("orderBy")(a.subTemplates, "name")
            },
            removeSubTemplate: function(a, b) {
                j("filter")(a.subTemplates, {
                    name: a.subTemplates[b].name
                }).length == a.subTemplates[b].max && F(a.subtree, a.subTemplates[b]),
                angular.equals(a.subTemplates[b].name, "vpn-vedge-interface-gre") && a.subTemplates[b].templateId && G(a.subTemplates[b], {}, a.featureTemplates, !1),
                this.resetTemplateProperty(a.subTemplates[b], a.featureTemplates),
                a.subTemplates.splice(b, 1)
            },
            setTemplateProperty: function(a, b, c) {
                if (a.templateId && (_.find(c, function(b) {
                    return angular.equals(b.templateId, a.templateId)
                }).disabled = !1),
                angular.equals(a.name, "vpn-vedge-interface-gre") && G(a, b, c, !0),
                angular.equals(a.name, "system-vedge") && b.asVBond) {
                    var d = _.find(p.basic, function(a) {
                        return angular.equals(a.name, "bfd-vedge")
                    });
                    angular.isDefined(d) && (d.min = 0,
                    this.resetTemplateProperty(d, p.featureTemplates));
                    var e = _.find(p.basic, function(a) {
                        return angular.equals(a.name, "omp-vedge")
                    });
                    angular.isDefined(e) && (e.min = 0,
                    this.resetTemplateProperty(e, p.featureTemplates))
                } else if (angular.equals(a.name, "system-vedge") && a.asVBond && !b.asVBond) {
                    var d = _.find(p.basic, function(a) {
                        return angular.equals(a.name, "bfd-vedge")
                    });
                    angular.isDefined(d) && (d.min = 1,
                    v({}, d));
                    var e = _.find(p.basic, function(a) {
                        return angular.equals(a.name, "omp-vedge")
                    });
                    angular.isDefined(e) && (e.min = 1,
                    v({}, e))
                }
                a.templateId = b.templateId,
                a.templateName = b.templateName,
                a.templateDescription = b.templateDescription,
                a.policyRequired = b.policyRequired,
                a.asVBond = b.asVBond,
                a.connectionPreferenceRequired = b.connectionPreferenceRequired,
                a.connectionPreference = b.connectionPreference,
                _.find(c, function(a) {
                    return angular.equals(a.templateId, b.templateId)
                }).disabled = !0
            },
            resetTemplateProperty: function(a, b) {
                if (a.templateId) {
                    var c = _.find(b, function(b) {
                        return angular.equals(b.templateId, a.templateId)
                    });
                    c && (c.disabled = !1)
                }
                a.templateId = void 0,
                a.templateName = void 0,
                a.templateDescription = void 0,
                a.policyRequired = !1,
                a.connectionPreferenceRequired = void 0,
                a.connectionPreference = void 0
            },
            onClickEnableFeatureTemplate: function(a, b) {
                if (angular.equals(a.subTemplates[b].name, "vpn-vedge-interface-gre")) {
                    a.subTemplates[b].templateId && G(a.subTemplates[b], {}, a.featureTemplates, !1);
                    for (var c = _.where(a.subTemplates, function(a) {
                        return angular.equals(a.name, "vpn-vedge-interface-gre")
                    }), d = 0; d < c.length; d++)
                        d != b && c[d].templateId && (_.find(a.featureTemplates, function(a) {
                            return angular.equals(a.templateId, c[d].templateId)
                        }).disabled = !0,
                        G(c[d], {}, a.featureTemplates, !0))
                }
            },
            verifyDeviceModelSelect: function(a) {
                return "vbond" !== a.deviceType || "vBond Software" !== a.displayName || (g.warning("vBond Software has been deprecated. Please use vEdge Cloud instead."),
                !1)
            },
            confirmDelete: function(a, b) {
                d.deleteDeviceTemplate(a.templateId).then(function(a) {
                    g.success("Device template successfully deleted.", 2e3),
                    b.delayRefresh(100)
                }, function(a) {
                    g.error(a.error.message + ": " + a.error.details)
                })
            },
            cancel: function() {
                $(".createDeviceTemplate").off("scroll"),
                this.clearDeviceTemplate(),
                b.go("app.config.template.device")
            }
        }
    }
    angular.module("vManage").factory("DeviceTemplateService", a),
    a.$inject = ["$document", "$state", "$mdDialog", "DeviceTemplateHttpService", "vEdgePolicyService", "TemplateDeviceInput", "notification", "rbac", "$q", "$filter", "appUtil", "$timeout", "apiConstants", "restService", "$log"]
}(),
angular.module("vManage").factory("DeviceTemplateHttpService", DeviceTemplateHttpService),
DeviceTemplateHttpService.$inject = ["$http", "$q", "restService", "apiConstants", "notification", "appUtil"],
function() {
    function a(a, b, c, d) {
        var e = function(a, b, c) {
            this.name = a,
            this.displayName = b,
            this.deviceType = c
        };
        return {
            getDeviceModels: function(a) {
                var d;
                b.listDeviceModels().then(function(b) {
                    return angular.forEach(b.data, function(b) {
                        d = new e(b.name,b.displayName,b.deviceType),
                        a.push(d)
                    }),
                    a
                }, function(a) {
                    c.error("error occurred: " + a)
                })
            },
            filterDeviceModels: function(a, d) {
                var f;
                b.listDeviceModels().then(function(b) {
                    var c, g = b.data;
                    angular.forEach(d, function(b) {
                        c = _.findIndex(g, {
                            name: b
                        }),
                        c > -1 && (f = new e(g[c].name,g[c].displayName,g[c].deviceType),
                        a.push(f))
                    })
                }, function(a) {
                    c.error("error occurred: " + a)
                })
            },
            getDeviceModelsPromise: function() {
                var a, c = d.defer();
                return b.listDeviceModels().then(function(b) {
                    var d = [];
                    angular.forEach(b.data, function(b) {
                        a = new e(b.name,b.displayName,b.deviceType),
                        d.push(a)
                    }),
                    c.resolve(d)
                }, function(a) {
                    c.reject(a)
                }),
                c.promise
            },
            getNewInstance: function(a, b, c) {
                return new e(a,b,c)
            }
        }
    }
    angular.module("vManage").factory("DeviceModel", a),
    a.$inject = ["appUtil", "FeatureTemplateService", "notification", "$q"]
}(),
angular.module("vManage").controller("AddTemplateController", AddTemplateController),
AddTemplateController.$inject = ["$log", "$scope", "$state", "appUtil", "Template", "DeviceModel", "FeatureTemplateType", "FeatureTemplateService", "apiConstants", "notification", "$filter", "$timeout", "SelectionKeyboardAssist"],
angular.module("vManage").controller("FeatureTemplateController", FeatureTemplateController),
FeatureTemplateController.$inject = ["$scope", "$state", "$mdDialog", "$log", "appUtil", "FeatureTemplateService", "templatesConstants", "$window", "Table", "notification", "$timeout", "rbac", "Template", "restService"],
angular.module("vManage").controller("AaaTemplateCtrl", AaaTemplateCtrl),
AaaTemplateCtrl.$inject = ["$scope", "AaaTemplate", "FeatureTemplateService", "notification", "appUtil", "$timeout", "$mdDialog", "TemplateFormField"],
angular.module("vManage").controller("ArchiveTemplateCtrl", ArchiveTemplateCtrl),
ArchiveTemplateCtrl.$inject = ["$scope", "ArchiveTemplate", "FeatureTemplateService", "notification", "$timeout"],
angular.module("vManage").controller("BannerTemplateCtrl", BannerTemplateCtrl),
BannerTemplateCtrl.$inject = ["$scope", "Template", "templateConstants", "FeatureTemplateService", "notification", "$timeout"],
angular.module("vManage").controller("bridgeController", bridgeController),
bridgeController.$inject = ["$scope", "bridgeTemplate", "FeatureTemplateService", "appUtil", "notification", "$mdDialog", "TemplateFormField", "$timeout"],
angular.module("vManage").controller("CellularProfileController", CellularProfileController),
CellularProfileController.$inject = ["$scope", "Template", "FeatureTemplateService", "notification", "templateConstants", "$timeout"],
angular.module("vManage").controller("IgmpTemplateCtrl", IgmpTemplateCtrl),
IgmpTemplateCtrl.$inject = ["$scope", "appUtil", "IgmpTemplate", "FeatureTemplateService", "notification", "$mdDialog", "$timeout", "TemplateFormField"],
angular.module("vManage").controller("LoggingTemplateCtrl", LoggingTemplateCtrl),
LoggingTemplateCtrl.$inject = ["$scope", "LoggingTemplate", "FeatureTemplateService", "notification", "TemplateFormField", "$timeout"],
angular.module("vManage").controller("MulticastTemplateCtrl", MulticastTemplateCtrl),
MulticastTemplateCtrl.$inject = ["$scope", "Template", "FeatureTemplateService", "notification", "$timeout"],
angular.module("vManage").controller("NtpTemplateCtrl", NtpTemplateCtrl),
NtpTemplateCtrl.$inject = ["$scope", "NTPTemplate", "FeatureTemplateService", "notification", "$timeout", "TemplateFormField", "templateConstants", "$mdDialog"],
angular.module("vManage").controller("OspfTemplateCtrl", OspfTemplateCtrl),
OspfTemplateCtrl.$inject = ["$scope", "appUtil", "OspfTemplate", "FeatureTemplateService", "notification", "TemplateField", "$timeout", "TemplateFormField", "$mdDialog"],
angular.module("vManage").controller("PimTemplateCtrl", PimTemplateCtrl),
PimTemplateCtrl.$inject = ["$scope", "PimTemplate", "FeatureTemplateService", "notification", "TemplateFormField", "$timeout"],
angular.module("vManage").controller("SnmpTemplateCtrl", SnmpTemplateCtrl),
SnmpTemplateCtrl.$inject = ["$scope", "$mdDialog", "TemplateFormField", "SnmpTemplate", "FeatureTemplateService", "notification", "appUtil", "$timeout", "templateConstants"],
angular.module("vManage").controller("VedgeBfdTemplateCtrl", VedgeBfdTemplateCtrl),
VedgeBfdTemplateCtrl.$inject = ["$scope", "VedgeBfdTemplate", "FeatureTemplateService", "notification", "TemplateFormField", "$timeout"],
angular.module("vManage").controller("VedgeBgpTemplateCtrl", VedgeBgpTemplateCtrl),
VedgeBgpTemplateCtrl.$inject = ["$scope", "VedgeBgpTemplate", "FeatureTemplateService", "notification", "appUtil", "templateConstants", "$timeout", "TemplateFormField"],
angular.module("vManage").controller("VedgeDhcpServerTemplateCtrl", VedgeDhcpServerTemplateCtrl),
VedgeDhcpServerTemplateCtrl.$inject = ["$scope", "VedgeDhcpServerTemplate", "FeatureTemplateService", "notification", "TemplateFormField", "$timeout"],
angular.module("vManage").controller("VedgeOmpTemplateCtrl", VedgeOmpTemplateCtrl),
VedgeOmpTemplateCtrl.$inject = ["$scope", "VedgeOmpTemplate", "FeatureTemplateService", "notification", "appUtil", "templateConstants", "$timeout"],
angular.module("vManage").controller("VedgeSecurityTemplateCtrl", VedgeSecurityTemplateCtrl),
VedgeSecurityTemplateCtrl.$inject = ["$scope", "VedgeSecurityTemplate", "FeatureTemplateService", "notification", "MultiSelectService", "$timeout"],
angular.module("vManage").controller("VedgeSystemTemplateCtrl", VedgeSystemTemplateCtrl),
VedgeSystemTemplateCtrl.$inject = ["$scope", "$mdDialog", "VedgeSystemTemplate", "FeatureTemplateService", "notification", "$state", "TemplateFormField", "$timeout"],
angular.module("vManage").controller("VedgeVPNController", VedgeVPNController),
VedgeVPNController.$inject = ["$scope", "VedgeVpnTemplate", "FeatureTemplateService", "$timeout", "notification", "appUtil", "TemplateField", "TemplateFormField", "$mdDialog"],
angular.module("vManage").controller("VedgeVPNInterfaceBridgeController", VedgeVPNInterfaceBridgeController),
VedgeVPNInterfaceBridgeController.$inject = ["$scope", "VedgeVpnInterfaceBridgeTemplate", "FeatureTemplateService", "appUtil", "notification", "TemplateFormField", "$timeout"],
angular.module("vManage").controller("VedgeVPNInterfaceCellularController", VedgeVPNInterfaceCellularController),
VedgeVPNInterfaceCellularController.$inject = ["$scope", "VedgeVpnInterfaceCellularTemplate", "FeatureTemplateService", "appUtil", "notification", "TemplateFormField", "$timeout"],
angular.module("vManage").controller("VedgeVPNInterfaceController", VedgeVPNInterfaceController),
VedgeVPNInterfaceController.$inject = ["$scope", "VedgeVpnInterfaceTemplate", "FeatureTemplateService", "appUtil", "notification", "TemplateFormField", "$timeout"],
angular.module("vManage").controller("VedgeVPNInterfaceGreController", VedgeVPNInterfaceGreController),
VedgeVPNInterfaceGreController.$inject = ["$scope", "VedgeVpnInterfaceGreTemplate", "FeatureTemplateService", "notification", "$timeout", "appUtil"],
angular.module("vManage").controller("VedgeVPNInterfaceIpsecController", VedgeVPNInterfaceIpsecController),
VedgeVPNInterfaceIpsecController.$inject = ["$scope", "VedgeVpnInterfaceIpsecTemplate", "FeatureTemplateService", "appUtil", "notification", "$timeout"],
angular.module("vManage").controller("VedgeVPNInterfaceNatpoolController", VedgeVPNInterfaceNatpoolController),
VedgeVPNInterfaceNatpoolController.$inject = ["$scope", "VedgeVpnInterfaceNatpoolTemplate", "FeatureTemplateService", "appUtil", "notification", "TemplateFormField", "$timeout"],
angular.module("vManage").controller("VedgeVPNInterfacePppoeController", VedgeVPNInterfacePppoeController),
VedgeVPNInterfacePppoeController.$inject = ["$scope", "VedgeVpnInterfacePppoeTemplate", "FeatureTemplateService", "appUtil", "notification", "templateConstants", "TemplateFormField", "$timeout"],
angular.module("vManage").controller("VedgeVPNInterfacePppoeEnabledController", VedgeVPNInterfacePppoeEnabledController),
VedgeVPNInterfacePppoeEnabledController.$inject = ["$scope", "VedgeVpnInterfacePppoeEnabledTemplate", "FeatureTemplateService", "appUtil", "notification", "$timeout"],
angular.module("vManage").controller("VedgeVPNInterfaceVapController", VedgeVPNInterfaceVapController),
VedgeVPNInterfaceVapController.$inject = ["$scope", "VedgeVpnInterfaceVapTemplate", "FeatureTemplateService", "appUtil", "notification", "$timeout"],
angular.module("vManage").controller("VmanageVPNInterfaceController", VmanageVPNInterfaceController),
VmanageVPNInterfaceController.$inject = ["$scope", "VmanageVpnInterfaceTemplate", "FeatureTemplateService", "notification", "appUtil", "TemplateFormField", "$timeout"],
angular.module("vManage").controller("VsmartOmpTemplateCtrl", VsmartOmpTemplateCtrl),
VsmartOmpTemplateCtrl.$inject = ["$scope", "Template", "FeatureTemplateService", "notification", "$timeout"],
angular.module("vManage").controller("VsmartSecurityTemplateCtrl", VsmartSecurityTemplateCtrl),
VsmartSecurityTemplateCtrl.$inject = ["$scope", "VsmartSecurityTemplate", "FeatureTemplateService", "notification", "$timeout"],
angular.module("vManage").controller("VsmartSystemTemplateCtrl", VsmartSystemTemplateCtrl),
VsmartSystemTemplateCtrl.$inject = ["$scope", "$state", "Template", "FeatureTemplateService", "notification", "$timeout"],
angular.module("vManage").controller("VSmartVpnTemplateCtrl", VSmartVpnTemplateCtrl),
VSmartVpnTemplateCtrl.$inject = ["$scope", "VsmartVpnTemplate", "FeatureTemplateService", "templateConstants", "notification", "appUtil", "TemplateField", "TemplateFormField", "$timeout", "$mdDialog"],
angular.module("vManage").controller("VsmartVPNInterfaceController", VsmartVPNInterfaceController),
VsmartVPNInterfaceController.$inject = ["$scope", "VsmartVpnInterfaceTemplate", "FeatureTemplateService", "notification", "appUtil", "TemplateFormField", "$timeout"],
angular.module("vManage").controller("WLANController", WLANController),
WLANController.$inject = ["$scope", "Template", "WLANTemplate", "$timeout", "$filter", "FeatureTemplateService", "appUtil", "notification"],
angular.module("vManage").directive("vipOspfAreaInterfaceList", vipOspfAreaInterfaceList),
vipOspfAreaInterfaceList.$inject = ["$compile", "$state", "$filter", "$log", "$mdDialog", "appUtil"],
angular.module("vManage").directive("vipSnmpCreateList", vipSnmpCreateList),
vipSnmpCreateList.$inject = ["$compile", "$state", "$filter", "$log", "appUtil"],
function() {
    function a(a, b, c, d, e, f, g) {
        a.stateString = d.getStateString(c),
        a.userGroupColDef = e.getColumns(),
        a.tableScroll = {
            isSet: !1
        },
        a.selectAll = {
            read: !1,
            write: !1
        },
        a.aUserGroup = {
            name: e.getGroupNameFromControlView(),
            taskPermission: e.getTaskListFromViewControl()
        },
        a.checkFeatureEnabled = function(a) {
            a.enabled = !1,
            a.write ? (a.read = !0,
            a.enabled = !0) : a.read && (a.enabled = !0)
        }
        ,
        a.selectAllColumnEntries = function(b, c) {
            a.selectAll[b] ? angular.forEach(a.gridOptions.data, function(c) {
                c[b] = !0,
                angular.equals(b, "write") && (c.read = !0,
                a.selectAll.read = !0)
            }) : angular.equals(b, "read") && !a.selectAll.write || angular.equals(b, "write") ? angular.forEach(a.gridOptions.data, function(a) {
                (angular.equals(b, "read") && !a.write || angular.equals(b, "write")) && (a[b] = !1)
            }) : a.selectAll.read = !0,
            c.stopPropagation()
        }
        ;
        var h;
        a.gridOptions = {
            enableSorting: !0,
            rowHeight: 40,
            minRowsToShow: 10,
            columnDefs: [],
            data: a.aUserGroup.taskPermission,
            onRegisterApi: function(b) {
                a.gridApi = b,
                b.core.on.rowsRendered(a, function(b) {
                    h = $("div.ui-grid-render-container.ui-grid-render-container-body");
                    var c;
                    return !(b.grid.options.columnDefs.length < 1 && b.grid.options.data.length < 1) && (h.width() && h.height() && !a.tableScroll.isSet && (c = h.find(".ui-grid-viewport").perfectScrollbar({
                        minScrollbarLength: "20"
                    })),
                    void (c && (a.tableScroll.isSet = !0)))
                })
            }
        },
        a.$watch("gridOptions.data", function(b, c) {
            if (!angular.equals(b, c)) {
                var d = !0
                  , e = !0;
                angular.forEach(b, function(b) {
                    b.read || (a.selectAll.read = !1,
                    d = !1),
                    b.write || (a.selectAll.write = !1,
                    e = !1),
                    b.enabled = b.read || b.write
                }),
                d && (a.selectAll.read = !0),
                e && (a.selectAll.write = !0)
            }
        }, !0),
        a.$watch("tableScroll.isSet", function(a, b) {
            a && g(function() {
                h.find(".ui-grid-viewport").perfectScrollbar("update")
            }, 500)
        }),
        function() {
            angular.forEach(a.userGroupColDef, function(b) {
                return "feature" !== b.property ? (a.gridOptions.columnDefs.push({
                    type: b.dataType,
                    field: b.property,
                    name: b.property,
                    displayName: b.displayName,
                    enableColumnMenu: !1,
                    enableCellEdit: !0,
                    allowCellFocus: !0,
                    width: "*",
                    cellTemplate: '<div class="ui-grid-cell-contents"><input ng-change="grid.appScope.checkFeatureEnabled(row.entity)" id="modal_{{row.entity[\'feature\'] | nospace}}_' + b.property + '" type="checkbox" ng-input="row.entity[\'' + b.property + "']\" ng-model=\"row.entity['" + b.property + "']\"/><label id=\"modal_{{row.entity['feature'] | nospace}}_" + b.property + "_label\" for=\"modal_{{row.entity['feature'] | nospace}}_" + b.property + '"></label></div>',
                    editableCellTemplate: '<div class="ui-grid-cell-contents"><input ng-change="grid.appScope.checkFeatureEnabled(row.entity)" id="modal_{{row.entity[\'feature\'] | nospace}}_' + b.property + '" type="checkbox" ng-input="row.entity[\'' + b.property + "']\" ng-model=\"row.entity['" + b.property + "']\"/><label id=\"modal_{{row.entity['feature'] | nospace}}_" + b.property + "_label\" for=\"modal_{{row.entity['feature'] | nospace}}_" + b.property + '"></label></div>',
                    headerCellTemplate: ' <input type="checkbox" name="select_all_' + b.property + '" data-ng-model="grid.appScope.selectAll[\'' + b.property + '\']" data-ng-click="$event.stopPropagation();grid.appScope.selectAllColumnEntries(col.displayName.toLowerCase(), $event)" id="select_all_' + b.property + '"/> <label id="select_all_' + b.property + '_label" for="select_all_' + b.property + "\" class=\"pull-left user-group-model-header\"></label> <div class=\"ui-grid-cell-contents\" col-index=\"renderIndex\"> <span>{{ col.displayName CUSTOM_FILTERS }}</span> <span ui-grid-visible=\"col.sort.direction\" style='vertical-align: middle;'><i class='material-icons md-12 icon-bold' style='color: white;' ng-if='col.sort.direction == asc'>arrow_upward</i><i class=\"material-icons md-12 icon-bold\" style='color: white;' ng-if='col.sort.direction == desc'>arrow_downward</i>     &nbsp; </span></div>"
                }),
                !0) : void a.gridOptions.columnDefs.push({
                    type: b.dataType,
                    field: b.property,
                    name: b.property,
                    displayName: b.displayName,
                    enableCellEdit: !1,
                    enableColumnMenu: !1,
                    width: "*",
                    sort: {
                        direction: f.ASC,
                        priority: 1
                    }
                })
            })
        }(),
        a.errorSection = {
            show: !1,
            errorMessage: {
                error: {
                    message: void 0,
                    details: void 0
                }
            }
        },
        a.add = function() {
            var c = {};
            return c.name = a.aUserGroup.name,
            c.taskPermission = a.gridOptions.data,
            angular.isUndefined(c.name.vipValue) || angular.isDefined(c.name.vipValue) && c.name.vipValue.length < 0 ? (a.errorSection.show = !0,
            a.errorSection.errorMessage.error.message = "Incorrect or missing value",
            a.errorSection.errorMessage.error.details = "Enter valid values in the field.",
            !1) : _.findIndex(c.taskPermission, function(a) {
                return a.read === !0
            }) < 0 ? (a.errorSection.show = !0,
            a.errorSection.errorMessage.error.message = "Incorrect or missing value",
            a.errorSection.errorMessage.error.details = "Minimum one feature should be configured.",
            !1) : void b.hide({
                action: "add",
                userGroup: c
            })
        }
        ,
        a.cancel = function() {
            b.cancel()
        }
    }
    angular.module("vManage").controller("AAAUserGroupModalController", a),
    a.$inject = ["$scope", "$mdDialog", "$state", "appUtil", "userGroup", "uiGridConstants", "$timeout"]
}(),
angular.module("vManage").controller("MoreBgpNeighborInfoModalInstanceCtrl", MoreBgpNeighborInfoModalInstanceCtrl),
MoreBgpNeighborInfoModalInstanceCtrl.$inject = ["$scope", "appUtil", "$mdDialog", "selectedRow"],
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        a.stateString = d.getStateString(c),
        a.selectedRow = f,
        a.errorSection = {
            show: !1,
            errorMessage: {
                error: {
                    message: void 0,
                    details: void 0
                }
            }
        },
        a.operation = g,
        a.bridgeInterfaceFormInfo = {
            macAddressFormFieldDefinition: {},
            localMACAddressFormFields: {},
            copyInterfaceFormFields: function(a) {
                var b = this;
                b.macAddressFormFieldDefinition = angular.copy(a),
                b.localMACAddressFormFields = angular.copy(a)
            },
            addRow: function() {
                var b = this;
                a.staticMACAddressTable.data.push(b.localMACAddressFormFields.children),
                b.localMACAddressFormFields = angular.copy(b.macAddressFormFieldDefinition)
            },
            removeRow: function(b) {
                a.errorSection.show = !1,
                a.errorSection.errorMessage.error.message = "",
                a.staticMACAddressTable.data.splice(b, 1)
            }
        };
        var j;
        j = d.checkNestedProperty(a.selectedRow, "entity") ? "entity" : "children",
        angular.isDefined(a.selectedRow[j]["static-mac-address"]) && a.bridgeInterfaceFormInfo.copyInterfaceFormFields(a.selectedRow[j]["static-mac-address"]),
        a.staticMACAddressTable = a.selectedRow[j].staticMacAddressList;
        var k = angular.copy(a.selectedRow[j].staticMacAddressList.data);
        a.save = function(c) {
            if (a.errorSection.show = !1,
            a.errorSection.errorMessage.error.message = "",
            a.interfaceForm.$setSubmitted(),
            !a.interfaceForm.$valid)
                return a.errorSection.show = !0,
                a.errorSection.errorMessage.error.message = "Incorrect or missing value",
                a.errorSection.errorMessage.error.details = "Enter valid values in the field",
                !1;
            if ("edit" === g) {
                b.show({
                    templateUrl: "app/configuration/template/feature/modal/views/Bridge/updateBridgeInterfaceTable.html",
                    controller: "updateBridgeInterfaceTableController",
                    targetEvent: c,
                    escapeToClose: !1,
                    resolve: {
                        selectedRow: function() {
                            return a.selectedRow
                        },
                        formObject: function() {
                            return i
                        },
                        interfaceRowIndex: function() {
                            return h
                        }
                    }
                })
            } else
                b.hide()
        }
        ,
        a.close = function() {
            b.cancel()
        }
        ,
        a.cancel = function() {
            if (a.selectedRow[j].staticMacAddressList.data = k,
            "edit" === g) {
                b.show({
                    templateUrl: "app/configuration/template/feature/modal/views/Bridge/updateBridgeInterfaceTable.html",
                    controller: "updateBridgeInterfaceTableController",
                    targetEvent: event,
                    escapeToClose: !1,
                    resolve: {
                        selectedRow: function() {
                            return a.selectedRow
                        },
                        formObject: function() {
                            return i
                        },
                        interfaceRowIndex: function() {
                            return h
                        }
                    }
                })
            } else
                b.cancel()
        }
    }
    angular.module("vManage").controller("BridgeStaticMACAddressController", a),
    a.$inject = ["$scope", "$mdDialog", "$state", "appUtil", "$timeout", "selectedRow", "operation", "interfaceRowIndex", "formObject"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        a.stateString = d.getStateString(b),
        a.bridgeInterfaceFormInfo = new f,
        d.checkNestedProperty(e, "children") ? a.bridgeInterfaceFormInfo.copyFormFields(e) : a.bridgeInterfaceFormInfo.copyFormFields({
            children: e
        }),
        a.isUpdateFlow = !0,
        a.bridgeInterfaceFormInfo.showErrorSection = !1,
        a.openModal = function(b) {
            c.show({
                templateUrl: "app/configuration/template/feature/modal/views/Bridge/bridgeStaticMacAddress.html",
                controller: "BridgeStaticMACAddressController",
                targetEvent: b,
                escapeToClose: !1,
                resolve: {
                    selectedRow: function() {
                        return a.bridgeInterfaceFormInfo.localFormFields
                    },
                    operation: function() {
                        return "edit"
                    },
                    interfaceRowIndex: function() {
                        return g
                    },
                    formObject: function() {
                        return h
                    }
                }
            }).then(function(a) {})
        }
        ,
        a.cancel = function() {
            a.bridgeInterfaceFormInfo.cancel(),
            c.cancel()
        }
        ,
        a.addRow = function(b) {
            if (b.$setSubmitted(),
            b.$valid) {
                for (var d in a.bridgeInterfaceFormInfo.localFormFields.children)
                    a.bridgeInterfaceFormInfo.localFormFields.children[d]instanceof i && (a.bridgeInterfaceFormInfo.localFormFields.children[d].defaultOption = a.bridgeInterfaceFormInfo.localFormFields.children[d].vipType);
                h.table.data.splice(g, 1),
                h.table.data.splice(g, 0, a.bridgeInterfaceFormInfo.localFormFields.children),
                c.hide()
            } else
                a.bridgeInterfaceFormInfo.showErrorSection = !0
        }
    }
    angular.module("vManage").controller("updateBridgeInterfaceTableController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "selectedRow", "TemplateFormField", "interfaceRowIndex", "formObject", "TemplateField", "templateConstants"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        a.stateString = d.getStateString(b),
        a.showNoDeviceModelError = !1;
        a.selectedRow = e,
        a.availableDeviceModels = [],
        a.selectedDeviceModels = [],
        a.template = _.clone(e),
        a.templateAttached = a.selectedRow.devicesAttached > 0 || a.selectedRow.attachedMastersCount > 0,
        a.serverCallInProgress = !1,
        g.getDeviceModelsPromise().then(function(b) {
            var c = b
              , d = new Set;
            h.listTemplateTypes().then(function(b) {
                for (var e in b.data)
                    b.data[e].name === a.selectedRow.templateType && angular.forEach(b.data[e].deviceModels, function(a) {
                        d.add(a.name)
                    });
                var f = i("filter")(c, function(a) {
                    return d.has(a.name)
                });
                d.clear(),
                a.availableDeviceModels = _.map(f, function(b) {
                    return b.key = b.name,
                    b.name = b.displayName,
                    a.selectedRow.deviceType.indexOf(b.key) > -1 && !d.has(b.key) && (b.selected = a.selectedRow.deviceType.indexOf(b.key) > -1,
                    a.selectedDeviceModels.push(b),
                    d.add(b.key)),
                    b
                })
            }, function(a) {})
        }, function(a) {}),
        a.ok = function() {
            return 0 == a.selectedDeviceModels.length ? (a.showNoDeviceModelError = !0,
            void (a.noDeviceModelError = d.createErrorObject("Select one or more device models", ""))) : (a.serverCallInProgress = !0,
            a.template.deviceType = _.map(a.selectedDeviceModels, function(a) {
                return a.key
            }),
            a.template.templateDefinition = JSON.parse(a.template.templateDefinition),
            void h.updateGeneralTemplate(a.selectedRow.templateId, a.template).then(function(b) {
                f.refresh(),
                c.hide(),
                a.serverCallInProgress = !1
            }, function(b) {
                a.serverCallInProgress = !1,
                a.showNoDeviceModelError = !0,
                a.noDeviceModelError = b
            }))
        }
        ,
        a.cancel = function() {
            c.cancel()
        }
    }
    angular.module("vManage").controller("changeDeviceModelsController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "selectedRow", "table", "DeviceModel", "FeatureTemplateService", "$filter"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        a.stateString = d.getStateString(c),
        a.selectedRow = f,
        a.delete = function() {
            b.hide({
                action: "delete",
                userGroup: a.selectedRow.entry
            })
        }
        ,
        a.cancel = function() {
            b.cancel()
        }
    }
    angular.module("vManage").controller("ConfirmDeleteController", a),
    a.$inject = ["$scope", "$mdDialog", "$state", "appUtil", "notification", "selectedRow"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        a.stateString = d.getStateString(c),
        a.selectedRow = f,
        a.errorSection = {
            show: !1,
            errorMessage: {
                error: {
                    message: void 0,
                    details: void 0
                }
            }
        },
        a.operation = g,
        a.igmpGroupAddressFormInfo = {
            groupAddressFormFieldDefinition: {},
            localGroupAddressFormFields: {},
            copyGroupAddressFormFields: function(a) {
                var b = this;
                b.groupAddressFormFieldDefinition = angular.copy(a),
                b.localGroupAddressFormFields = angular.copy(a)
            },
            addRow: function() {
                var b = this;
                a.groupAddressTable.data.push(b.localGroupAddressFormFields.children),
                b.localGroupAddressFormFields = angular.copy(b.groupAddressFormFieldDefinition)
            },
            removeRow: function(b) {
                a.errorSection.show = !1,
                a.errorSection.errorMessage.error.message = "",
                a.groupAddressTable.data.splice(b, 1)
            }
        };
        var j;
        j = d.checkNestedProperty(a.selectedRow, "entity") ? "entity" : "children",
        angular.isDefined(a.selectedRow[j]["join-group"]) && a.igmpGroupAddressFormInfo.copyGroupAddressFormFields(a.selectedRow[j]["join-group"]),
        a.groupAddressTable = a.selectedRow[j].joinGroupList;
        var k = angular.copy(a.selectedRow[j].joinGroupList.data);
        a.save = function(c) {
            if (a.errorSection.show = !1,
            a.errorSection.errorMessage.error.message = "",
            a.groupAddrForm.$setSubmitted(),
            !a.groupAddrForm.$valid)
                return a.errorSection.show = !0,
                a.errorSection.errorMessage.error.message = "Incorrect or missing value",
                a.errorSection.errorMessage.error.details = "Enter valid values in the field",
                !1;
            if ("edit" === g) {
                b.show({
                    templateUrl: "app/configuration/template/feature/modal/views/IGMP/updateIgmpInterfaceTable.html",
                    controller: "updateIgmpInterfaceTableController",
                    targetEvent: c,
                    escapeToClose: !1,
                    resolve: {
                        selectedRow: function() {
                            return a.selectedRow
                        },
                        formObject: function() {
                            return i
                        },
                        interfaceRowIndex: function() {
                            return h
                        }
                    }
                })
            } else
                b.hide()
        }
        ,
        a.close = function() {
            b.cancel()
        }
        ,
        a.cancel = function() {
            if (a.selectedRow[j].joinGroupList.data = k,
            "edit" === g) {
                b.show({
                    templateUrl: "app/configuration/template/feature/modal/views/IGMP/updateIgmpInterfaceTable.html",
                    controller: "updateIgmpInterfaceTableController",
                    targetEvent: event,
                    escapeToClose: !1,
                    resolve: {
                        selectedRow: function() {
                            return a.selectedRow
                        },
                        formObject: function() {
                            return i
                        },
                        interfaceRowIndex: function() {
                            return h
                        }
                    }
                })
            } else
                b.cancel()
        }
    }
    angular.module("vManage").controller("IGMPGroupAddressController", a),
    a.$inject = ["$scope", "$mdDialog", "$state", "appUtil", "$timeout", "selectedRow", "operation", "interfaceRowIndex", "formObject"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        a.stateString = d.getStateString(b),
        a.igmpInterfaceFormInfo = new h,
        d.checkNestedProperty(e, "children") ? a.igmpInterfaceFormInfo.copyFormFields(e) : a.igmpInterfaceFormInfo.copyFormFields({
            children: e
        }),
        a.isUpdateFlow = !0,
        a.igmpInterfaceFormInfo.showErrorSection = !1,
        a.openModal = function() {
            c.show({
                templateUrl: "app/configuration/template/feature/modal/views/IGMP/igmpGroupAddress.html",
                controller: "IGMPGroupAddressController",
                targetEvent: event,
                escapeToClose: !1,
                resolve: {
                    selectedRow: function() {
                        return a.igmpInterfaceFormInfo.localFormFields
                    },
                    operation: function() {
                        return "edit"
                    },
                    interfaceRowIndex: function() {
                        return g
                    },
                    formObject: function() {
                        return f
                    }
                }
            }).then(function(a) {})
        }
        ,
        a.cancel = function() {
            a.igmpInterfaceFormInfo.cancel(),
            c.cancel()
        }
        ,
        a.addRow = function(b) {
            if (b.$setSubmitted(),
            b.$valid) {
                for (var d in a.igmpInterfaceFormInfo.localFormFields.children)
                    a.igmpInterfaceFormInfo.localFormFields.children[d]instanceof i && (a.igmpInterfaceFormInfo.localFormFields.children[d].defaultOption = a.igmpInterfaceFormInfo.localFormFields.children[d].vipType);
                f.table.data.splice(g, 1),
                f.table.data.splice(g, 0, a.igmpInterfaceFormInfo.localFormFields.children),
                c.hide()
            } else
                a.igmpInterfaceFormInfo.showErrorSection = !0
        }
    }
    angular.module("vManage").controller("updateIgmpInterfaceTableController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "selectedRow", "formObject", "interfaceRowIndex", "TemplateFormField", "TemplateField", "templateConstants"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l) {
        a.stateString = d.getStateString(b),
        a[i] = new g,
        a[i].copyFormFields({
            children: e
        }),
        a.isUpdateFlow = !0,
        a[i].showErrorSection = !1,
        a.isCollapsed = !0,
        a.authenticationTable = {
            data: l
        },
        a.toggleCollapse = function() {
            a.isCollapsed = !a.isCollapsed
        }
        ,
        a.setCollpaseTrue = function() {
            a.isCollapsed = !0
        }
        ,
        a.cancel = function() {
            a[i].cancel(),
            c.cancel()
        }
        ,
        a.addRow = function(b) {
            if (b.$setSubmitted(),
            b.$valid) {
                angular.extend(e, a[i].localFormFields.children);
                for (var d in e)
                    e[d]instanceof j && (e[d].defaultOption = e[d].vipType);
                c.hide(e)
            } else
                a[i].showErrorSection = !0
        }
    }
    angular.module("vManage").controller("UpdateNTPServerTableController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "selectedRow", "rowIndex", "TemplateFormField", "formObject", "formName", "TemplateField", "templateConstants", "authenticationTableData"]
}(),
angular.module("vManage").controller("OSPFAreaInterfaceModalInstanceCtrl", OSPFAreaInterfaceModalInstanceCtrl),
OSPFAreaInterfaceModalInstanceCtrl.$inject = ["$scope", "$mdDialog", "selectedRow", "appUtil", "operation", "ospfAreaFormInfo", "areaRowIndex", "formObject", "$timeout"],
angular.module("vManage").controller("OSPFAreaRangeModalInstanceCtrl", OSPFAreaRangeModalInstanceCtrl),
OSPFAreaRangeModalInstanceCtrl.$inject = ["$scope", "$mdDialog", "$state", "appUtil", "$timeout", "selectedRow", "operation", "ospfAreaFormInfo", "areaRowIndex", "formObject"],
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        a.stateString = d.getStateString(b),
        a.ospfAreaFormInfo = new h,
        d.checkNestedProperty(e, "children") ? a.ospfAreaFormInfo.copyFormFields(e) : a.ospfAreaFormInfo.copyFormFields({
            children: e
        }),
        a.isUpdateFlow = !0,
        a.openModal = function(b, d, e) {
            c.show({
                templateUrl: d,
                controller: e,
                targetEvent: b,
                escapeToClose: !1,
                resolve: {
                    selectedRow: function() {
                        return a.ospfAreaFormInfo.localFormFields
                    },
                    operation: function() {
                        return "edit"
                    },
                    ospfAreaFormInfo: function() {
                        return a.ospfAreaFormInfo
                    },
                    areaRowIndex: function() {
                        return g
                    },
                    formObject: function() {
                        return f
                    }
                }
            }).then(function(a) {})
        }
        ,
        a.cancel = function() {
            a.ospfAreaFormInfo.cancel(),
            c.cancel()
        }
        ,
        a.addRow = function(b) {
            if (b.$setSubmitted(),
            b.$valid) {
                for (var d in a.ospfAreaFormInfo.localFormFields.children)
                    a.ospfAreaFormInfo.localFormFields.children[d]instanceof i && (a.ospfAreaFormInfo.localFormFields.children[d].defaultOption = a.ospfAreaFormInfo.localFormFields.children[d].vipType);
                f.table.data.splice(g, 1),
                f.table.data.splice(g, 0, a.ospfAreaFormInfo.localFormFields.children),
                c.hide()
            } else
                a.ospfAreaFormInfo.showErrorSection = !0
        }
    }
    angular.module("vManage").controller("updateOspfAreaTableController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "selectedRow", "formObject", "areaRowIndex", "TemplateFormField", "TemplateField", "templateConstants"]
}(),
angular.module("vManage").controller("SNMPTrapTypeModalInstanceCtrl", SNMPTrapTypeModalInstanceCtrl),
SNMPTrapTypeModalInstanceCtrl.$inject = ["$scope", "$mdDialog", "$state", "appUtil", "$timeout", "selectedRow", "operation", "trapGroupRowIndex", "formObject"],
angular.module("vManage").controller("SNMPViewOIDModalInstanceCtrl", SNMPViewOIDModalInstanceCtrl),
SNMPViewOIDModalInstanceCtrl.$inject = ["$scope", "$mdDialog", "$state", "appUtil", "$timeout", "selectedRow", "operation", "viewRowIndex", "formObject"],
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        a.stateString = d.getStateString(b),
        a.snmpTrapGroupFormInfo = new h,
        d.checkNestedProperty(e, "children") ? a.snmpTrapGroupFormInfo.copyFormFields(e.children) : a.snmpTrapGroupFormInfo.copyFormFields({
            children: e
        }),
        a.isUpdateFlow = !0,
        a.openModal = function() {
            c.show({
                templateUrl: "app/configuration/template/feature/modal/views/SNMP/snmpTrapType.html",
                controller: "SNMPTrapTypeModalInstanceCtrl",
                targetEvent: event,
                resolve: {
                    selectedRow: function() {
                        return a.snmpTrapGroupFormInfo.localFormFields
                    },
                    operation: function() {
                        return "edit"
                    },
                    trapGroupRowIndex: function() {
                        return g
                    },
                    formObject: function() {
                        return f
                    }
                }
            }).then(function(a) {})
        }
        ,
        a.cancel = function() {
            a.snmpTrapGroupFormInfo.cancel(),
            c.cancel()
        }
        ,
        a.addRow = function(b) {
            if (b.$setSubmitted(),
            b.$valid) {
                for (var d in a.snmpTrapGroupFormInfo.localFormFields.children)
                    a.snmpTrapGroupFormInfo.localFormFields.children[d]instanceof i && (a.snmpTrapGroupFormInfo.localFormFields.children[d].defaultOption = a.snmpTrapGroupFormInfo.localFormFields.children[d].vipType);
                f.table.data.splice(g, 1),
                f.table.data.splice(g, 0, a.snmpTrapGroupFormInfo.localFormFields.children),
                c.hide()
            } else
                a.snmpTrapGroupFormInfo.showErrorSection = !0
        }
    }
    angular.module("vManage").controller("updateSNMPTrapGroupTableController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "selectedRow", "formObject", "trapGroupRowIndex", "TemplateFormField", "TemplateField", "templateConstants"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        a.stateString = d.getStateString(b),
        a.snmpViewFormInfo = new h,
        d.checkNestedProperty(e, "children") ? a.snmpViewFormInfo.copyFormFields(e) : a.snmpViewFormInfo.copyFormFields({
            children: e
        }),
        a.isUpdateFlow = !0,
        a.openModal = function() {
            c.show({
                templateUrl: "app/configuration/template/feature/modal/views/SNMP/snmpViewOID.html",
                controller: "SNMPViewOIDModalInstanceCtrl",
                targetEvent: event,
                resolve: {
                    selectedRow: function() {
                        return a.snmpViewFormInfo.localFormFields
                    },
                    operation: function() {
                        return "edit"
                    },
                    snmpViewFormInfo: function() {
                        return a.snmpViewFormInfo
                    },
                    viewRowIndex: function() {
                        return g
                    },
                    formObject: function() {
                        return f
                    }
                }
            }).then(function(a) {})
        }
        ,
        a.cancel = function() {
            a.snmpViewFormInfo.cancel(),
            c.cancel()
        }
        ,
        a.addRow = function(b) {
            if (b.$setSubmitted(),
            b.$valid) {
                for (var d in a.snmpViewFormInfo.localFormFields.children)
                    a.snmpViewFormInfo.localFormFields.children[d]instanceof i && (a.snmpViewFormInfo.localFormFields.children[d].defaultOption = a.snmpViewFormInfo.localFormFields.children[d].vipType);
                f.table.data.splice(g, 1),
                f.table.data.splice(g, 0, a.snmpViewFormInfo.localFormFields.children),
                c.hide()
            } else
                a.snmpViewFormInfo.showErrorSection = !0
        }
    }
    angular.module("vManage").controller("updateSNMPViewTableController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "selectedRow", "formObject", "viewRowIndex", "TemplateFormField", "TemplateField", "templateConstants"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        a.stateString = d.getStateString(b),
        a[i] = new g,
        a[i].copyFormFields({
            children: e
        }),
        a.isUpdateFlow = !0,
        a[i].showErrorSection = !1,
        a.isCollapsed = !0,
        a.rowIndex = f,
        a.toggleCollapse = function() {
            a.isCollapsed = !a.isCollapsed
        }
        ,
        a.setCollpaseTrue = function() {
            a.isCollapsed = !0
        }
        ,
        a.cancel = function() {
            a[i].cancel(),
            c.cancel()
        }
        ,
        a.addRow = function(b) {
            if (b.$setSubmitted(),
            b.$valid) {
                angular.extend(e, a[i].localFormFields.children);
                for (var d in e)
                    e[d]instanceof j && (e[d].defaultOption = e[d].vipType);
                c.hide(e)
            } else
                a[i].showErrorSection = !0
        }
    }
    angular.module("vManage").controller("UpdateFeatureTemplateTableController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "selectedRow", "rowIndex", "TemplateFormField", "formObject", "formName", "TemplateField", "templateConstants"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        a.stateString = d.getStateString(b),
        a.ipv4FormInfo = new i,
        d.checkNestedProperty(e, "children") ? a.ipv4FormInfo.copyFormFields(e) : a.ipv4FormInfo.copyFormFields({
            children: e
        }),
        a.isUpdateFlow = !0,
        a.openModal = function(b, d) {
            c.show({
                templateUrl: "app/configuration/template/feature/modal/views/VPN/vpnNextHop.html",
                controller: "VPNNextHopController",
                targetEvent: d,
                resolve: {
                    selectedRow: function() {
                        return a.ipv4FormInfo.localFormFields
                    },
                    operation: function() {
                        return "edit"
                    },
                    routeRowIndex: function() {
                        return g
                    },
                    routeType: function() {
                        return h
                    },
                    formObject: function() {
                        return f
                    }
                }
            }).then(function(a) {})
        }
        ,
        a.cancel = function() {
            a.ipv4FormInfo.cancel(),
            c.cancel()
        }
        ,
        a.addRow = function(b) {
            if (b.$setSubmitted(),
            b.$valid) {
                for (var d in a.ipv4FormInfo.localFormFields.children)
                    a.ipv4FormInfo.localFormFields.children[d]instanceof j && (a.ipv4FormInfo.localFormFields.children[d].defaultOption = a.ipv4FormInfo.localFormFields.children[d].vipType);
                f.table.data.splice(g, 1),
                f.table.data.splice(g, 0, a.ipv4FormInfo.localFormFields.children),
                c.hide()
            } else
                a.ipv4FormInfo.showErrorSection = !0
        }
    }
    angular.module("vManage").controller("updateVPNIpv4RouteTableController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "selectedRow", "formObject", "routeRowIndex", "routeType", "TemplateFormField", "TemplateField", "templateConstants"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        a.stateString = d.getStateString(b),
        a.ipv6FormInfo = new i,
        d.checkNestedProperty(e, "children") ? a.ipv6FormInfo.copyFormFields(e) : a.ipv6FormInfo.copyFormFields({
            children: e
        }),
        a.isUpdateFlow = !0,
        a.openModal = function(b, d) {
            c.show({
                templateUrl: "app/configuration/template/feature/modal/views/VPN/vpnNextHop.html",
                controller: "VPNNextHopController",
                targetEvent: d,
                resolve: {
                    selectedRow: function() {
                        return a.ipv6FormInfo.localFormFields
                    },
                    operation: function() {
                        return "edit"
                    },
                    routeRowIndex: function() {
                        return g
                    },
                    routeType: function() {
                        return h
                    },
                    formObject: function() {
                        return f
                    }
                }
            }).then(function(a) {})
        }
        ,
        a.cancel = function() {
            a.ipv6FormInfo.cancel(),
            c.cancel()
        }
        ,
        a.addRow = function(b) {
            if (b.$setSubmitted(),
            b.$valid) {
                for (var d in a.ipv6FormInfo.localFormFields.children)
                    a.ipv6FormInfo.localFormFields.children[d]instanceof j && (a.ipv6FormInfo.localFormFields.children[d].defaultOption = a.ipv6FormInfo.localFormFields.children[d].vipType);
                f.table.data.splice(g, 1),
                f.table.data.splice(g, 0, a.ipv6FormInfo.localFormFields.children),
                c.hide()
            } else
                a.ipv6FormInfo.showErrorSection = !0
        }
    }
    angular.module("vManage").controller("updateVPNIpv6RouteTableController", a),
    a.$inject = ["$scope", "$state", "$mdDialog", "appUtil", "selectedRow", "formObject", "routeRowIndex", "routeType", "TemplateFormField", "TemplateField", "templateConstants"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        a.stateString = d.getStateString(c),
        a.selectedRow = f,
        a.errorSection = {
            show: !1,
            errorMessage: {
                error: {
                    message: void 0,
                    details: void 0
                }
            }
        },
        a.routeType = i,
        a.operation = g,
        a.vpnIPRouteFormInfo = {
            ipRouteFormFieldDefinition: {},
            ipRouteFormFields: {},
            copyGroupAddressFormFields: function(a) {
                var b = this;
                b.ipRouteFormFieldDefinition = angular.copy(a),
                b.ipRouteFormFields = angular.copy(a)
            },
            addRow: function() {
                var b = this;
                a.ipRouteTable.data.push(b.ipRouteFormFields.children),
                b.ipRouteFormFields = angular.copy(b.ipRouteFormFieldDefinition)
            },
            removeRow: function(b) {
                a.errorSection.show = !1,
                a.errorSection.errorMessage.error.message = "",
                a.ipRouteTable.data.splice(b, 1)
            }
        };
        var k;
        k = d.checkNestedProperty(a.selectedRow, "entity") ? "entity" : "children",
        angular.isDefined(a.selectedRow[k]["next-hop"]) && a.vpnIPRouteFormInfo.copyGroupAddressFormFields(a.selectedRow[k]["next-hop"]),
        a.ipRouteTable = a.selectedRow[k].nextHopList;
        var l = angular.copy(a.selectedRow[k].nextHopList.data);
        a.save = function(c) {
            if (a.errorSection.show = !1,
            a.errorSection.errorMessage.error.message = "",
            a.ipRouteForm.$setSubmitted(),
            !a.ipRouteForm.$valid)
                return a.errorSection.show = !0,
                a.errorSection.errorMessage.error.message = "Incorrect or missing value",
                a.errorSection.errorMessage.error.details = "Enter valid values in the field",
                !1;
            if ("edit" === g) {
                var d = "app/configuration/template/feature/modal/views/VPN/updateVPNIpv4RouteTable.html"
                  , e = "updateVPNIpv4RouteTableController";
                "ip" !== i && (d = "app/configuration/template/feature/modal/views/VPN/updateVPNIpv6RouteTable.html",
                e = "updateVPNIpv6RouteTableController");
                b.show({
                    templateUrl: d,
                    controller: e,
                    targetEvent: c,
                    escapeToClose: !1,
                    resolve: {
                        selectedRow: function() {
                            return a.selectedRow
                        },
                        formObject: function() {
                            return j
                        },
                        routeRowIndex: function() {
                            return h
                        },
                        routeType: function() {
                            return i
                        }
                    }
                })
            } else
                b.hide()
        }
        ,
        a.close = function() {
            b.cancel()
        }
        ,
        a.cancel = function() {
            if (a.selectedRow[k].nextHopList.data = l,
            "edit" === g) {
                b.show({
                    templateUrl: "app/configuration/template/feature/modal/views/VPN/updateVPNIpv4RouteTable.html",
                    controller: "updateVPNIpv4RouteTableController",
                    targetEvent: event,
                    escapeToClose: !1,
                    resolve: {
                        selectedRow: function() {
                            return a.selectedRow
                        },
                        formObject: function() {
                            return j
                        },
                        routeRowIndex: function() {
                            return h
                        },
                        routeType: function() {
                            return i
                        }
                    }
                })
            } else
                b.cancel()
        }
    }
    angular.module("vManage").controller("VPNNextHopController", a),
    a.$inject = ["$scope", "$mdDialog", "$state", "appUtil", "$timeout", "selectedRow", "operation", "routeRowIndex", "routeType", "formObject"]
}(),
angular.module("vManage").factory("FeatureTemplateService", FeatureTemplateService),
FeatureTemplateService.$inject = ["$http", "$q", "restService", "apiConstants", "notification", "TemplateField", "appUtil", "$filter", "templateConstants"],
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l) {
        var m = function(a, b, c, d, e) {
            this.templateName = a,
            this.templateDescription = b,
            this.templateType = c,
            this.templateMinVersion = d,
            this.templateDefinition = e,
            this.transitionInProgress = !1
        };
        return m.prototype.extendTemplate = function(a) {
            angular.extend(this, _.omit(a, ["$$hashKey"]))
        }
        ,
        m.prototype.setDeviceType = function(a) {
            var b = ["vedge-cloud", "vedge-1000", "vedge-2000", "vedge-100", "vedge-100-B", "vedge-100-WM", "vedge-100-M", "vedge-5000", "vmanage", "vsmart", "vbond"]
              , c = _.pluck(a, "name");
            this.deviceType = [];
            var d = this;
            angular.forEach(b, function(a) {
                c.indexOf(a) > -1 && d.deviceType.push(a)
            })
        }
        ,
        m.prototype.setDevices = function(a) {
            this.devices = a
        }
        ,
        m.prototype.setTemplateMinVersion = function(a) {
            this.templateMinVersion = a
        }
        ,
        m.prototype.setTemplateDefinition = function() {
            this.omitExtraDefinitionProperty(this.templateDefinition)
        }
        ,
        m.prototype.getOptionalFieldType = function(a) {
            return a.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE ? a = {
                type: b.TEMPLATE_DEF_TYPE_VARIABLE
            } : a.vipType === b.TEMPLATE_DEF_TYPE_IGNORE ? a = {
                type: b.TEMPLATE_DEF_TYPE_IGNORE
            } : void 0
        }
        ,
        m.prototype.resetFields = function(a) {
            return _.has(a, "key") ? (a.vipType = a.defaultOption,
            void (a.vipValue = a.dataType.default)) : void angular.forEach(a, function(a) {
                angular.equals(a.objectType, "tree") || (_.has(a, "key") ? (a.vipType = a.defaultOption,
                a.vipValue = a.dataType.default) : this.resetFields(a))
            }, this)
        }
        ,
        m.prototype.areAllPropertiesDefault = function(a) {
            for (var c in a)
                if (angular.isDefined(a[c]) && (a[c]instanceof e && angular.isArray(a[c]) && 0 != a[c].length || !angular.isArray(a[c]) && angular.isDefined(a[c].vipType) && a[c].vipType != b.TEMPLATE_DEF_TYPE_IGNORE))
                    return !1;
            return !0
        }
        ,
        m.prototype.omitExtraDefinitionProperty = function(a) {
            for (var b in a)
                a[b]instanceof e ? a[b] = a[b].stripProperties() : this.omitExtraDefinitionProperty(a[b]);
            return a
        }
        ,
        m.prototype.omitObjectProperties = function(a, c) {
            return angular.isArray(a) ? angular.forEach(a, function(d, e) {
                for (var f in d)
                    _.indexOf(c, f) > -1 || (a[e][f] = {
                        vipObjectType: a[e][f].vipObjectType,
                        vipType: a[e][f].vipType,
                        vipValue: a[e][f].vipValue,
                        vipVariableName: a[e][f].vipVariableName,
                        vipPrimaryKey: a[e][f].vipPrimaryKey
                    },
                    a[e][f].vipType === b.TEMPLATE_DEF_TYPE_VARIABLE && (a[e][f].vipType = b.TEMPLATE_DEF_TYPE_VARIABLE_NAME),
                    !angular.isDefined(a[e][f].vipType) && angular.isDefined(a[e][f].vipObjectType) && delete a[e][f].vipObjectType)
            }) : (a = {
                vipObjectType: a.vipObjectType,
                vipType: a.vipType,
                vipValue: angular.isDefined(a.vipValue) ? a.vipValue : "",
                vipVariableName: a.vipVariableName,
                vipPrimaryKey: a.vipPrimaryKey
            },
            a.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE && (a.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE_NAME),
            !angular.isDefined(a.vipType) && angular.isDefined(a.vipObjectType) && delete a.vipObjectType),
            a
        }
        ,
        m.prototype.addPriorityField = function(a, b) {
            return angular.forEach(a, function(a) {
                a["priority-order"] = b
            }),
            a
        }
        ,
        m.prototype.removeTableRow = {
            removeRow: function(a, b) {
                a.grid.options.data.splice(b, 1),
                angular.forEach(a.grid.options.data, function(a) {
                    angular.forEach(a, function(a) {
                        angular.isDefined(a.dataType) && "enum" === a.dataType.type && (a.deleteFlag = !0)
                    })
                })
            }
        },
        m.prototype.getAppScope = function(a, b, c, d) {
            var e = c;
            return {
                editRow: function(c, f, g) {
                    l.show({
                        templateUrl: a,
                        controller: b,
                        targetEvent: c,
                        escapeToClose: !1,
                        resolve: {
                            selectedRow: function() {
                                return f.entity
                            },
                            rowIndex: function() {
                                return g
                            },
                            formObject: function() {
                                return e
                            },
                            formName: function() {
                                return d || ""
                            }
                        }
                    }).then(function(a) {})
                },
                removeRow: function(a, b) {
                    a.grid.options.data.splice(b, 1),
                    angular.forEach(a.grid.options.data, function(a) {
                        angular.forEach(a, function(a) {
                            angular.isDefined(a.dataType) && "enum" === a.dataType.type && (a.deleteFlag = !0)
                        })
                    })
                }
            }
        }
        ,
        m.prototype.editObjectTemplateField = function(a, c, d) {
            if (!angular.isDefined(d))
                var d = _.pluck(a.optionType, "value");
            var f = angular.copy(a);
            return f.optionType = d,
            f = new e(f),
            angular.isDefined(c) && (f.defaultOption = c && c.vipType ? "variableName" === c.vipType ? "variable" : f.defaultOption : b.TEMPLATE_DEF_TYPE_IGNORE,
            f.vipType = "variableName" === c.vipType ? "variable" : c.vipType,
            f.vipValue = c.vipValue,
            f.vipVariableName = c.vipVariableName),
            f
        }
        ,
        m.prototype.isTemplateFormFieldsValid = function(a) {
            for (var b in a.$error)
                if (_.isArray(a.$error[b]))
                    for (var c in a.$error[b])
                        if (!a.$error[b][c].$name.toLowerCase().contains("form"))
                            return !1;
            return !0
        }
        ,
        m.prototype.cancel = function() {
            i.previousState && i.previousState.name.contains("app.config.template.device.feature") ? i.go(i.previousState.name) : i.go("app.config.template.feature", {
                display: "",
                deviceType: "",
                templateType: "",
                templateId: ""
            })
        }
        ,
        m.prototype.add = function(a, b) {
            var e = this;
            if (!e.isTemplateFormFieldsValid(b.addTemplate))
                return void this.showNotificationErrorsForForm(b);
            a.transitionInProgress = !0;
            var f = angular.copy(a);
            f.templateType = a.templateType.name,
            f.factoryDefault = !1,
            f.setDeviceType(a.deviceModels),
            f.setTemplateDefinition(),
            c.createGeneralTemplate(f).then(function(b) {
                j.success(h("initialCap")(f.templateType) + " Template created", 2e3),
                i.previousState && i.previousState.name.contains("app.config.template.device.feature") ? (_.indexOf(["system-vedge"], f.templateType) > -1 && angular.isDefined(f.templateDefinition.vbond) && angular.isDefined(f.templateDefinition.vbond.local) && "true" === f.templateDefinition.vbond.local.vipValue && (f.asVBond = !0),
                d.pushToFeatureTemplateList(angular.extend(f, {
                    templateId: b.templateId
                })),
                a.transitionInProgress = !1,
                i.go(i.previousState.name)) : (a.transitionInProgress = !1,
                i.go("app.config.template.feature", {
                    display: "",
                    deviceType: "",
                    templateType: "",
                    templateId: ""
                }))
            }, function(b) {
                a.transitionInProgress = !1,
                j.error(b.error.message + ": " + b.error.details)
            })
        }
        ,
        m.prototype.edit = function(a, b) {
            var c = this;
            if (!c.isTemplateFormFieldsValid(b.addTemplate))
                return void this.showNotificationErrorsForForm(b);
            var d = angular.copy(a);
            d.templateType = a.templateType.name,
            d.factoryDefault = !1,
            d.setDeviceType(a.deviceModels),
            d.setTemplateDefinition(),
            this.callUpdateTemplate(d)
        }
        ,
        m.prototype.showNotificationErrorsForForm = function(a) {
            j.clear();
            var b = _.uniq(_.filter(a.addTemplate.$error.required, function(a) {
                return !a.$name.toLowerCase().contains("form")
            }), function(a) {
                return a.$name
            });
            if (b.length)
                j.error("Please fill in the required fields. " + b.length + " fields are required");
            else {
                var c, d = [];
                for (var e in a.addTemplate.$error)
                    angular.forEach(a.addTemplate.$error[e], function(a) {
                        "required" === e || a.$name.toLowerCase().contains("form") || d.push(a.$name)
                    });
                c = d.length > 0 ? _.uniq(d).length : a.addTemplate.$error.required.length,
                j.error("Invalid values are found in " + c + " fields. Please fill the fields with valid values and try again")
            }
        }
        ,
        m.prototype.callUpdateTemplate = function(b) {
            var e = []
              , l = {}
              , m = this;
            m.transitionInProgress = !0;
            var n;
            c.updateGeneralTemplate(b.templateId, b).then(function(c) {
                if (a.checkNestedProperty(c, "masterTemplatesAffected", 0)) {
                    if (f.allowAccess("Template Deploy"))
                        return n = c.processId,
                        e = _.uniq(h("orderBy")(c.masterTemplatesAffected)),
                        k.listDeviceTemplates();
                    m.transitionInProgress = !1,
                    i.go("app.config.template.feature", {
                        display: "",
                        deviceType: "",
                        templateType: "",
                        templateId: ""
                    })
                } else
                    j.success(h("initialCap")(b.templateType) + " Template updated", 2e3),
                    i.previousState && i.previousState.name.contains("app.config.template.device.feature") ? (d.pushToFeatureTemplateList(angular.extend(aTemplate, {
                        templateId: c.templateId
                    })),
                    m.transitionInProgress = !1,
                    i.go(i.previousState.name)) : (m.transitionInProgress = !1,
                    i.go("app.config.template.feature", {
                        display: "",
                        deviceType: "",
                        templateType: "",
                        templateId: ""
                    }))
            }).then(function(b) {
                if (a.checkNestedProperty(b, "data", 0)) {
                    for (var c = 0; c < e.length; c++)
                        e[c] = {
                            selectedTemplate: _.find(b.data, function(a) {
                                return angular.equals(a.templateId, e[c])
                            })
                        };
                    return k.getAttachedDevices(e[0].selectedTemplate.templateId)
                }
            }).then(function(b) {
                if (a.checkNestedProperty(b, "data", 0))
                    return l.templateId = e[0].selectedTemplate.templateId,
                    l.deviceIds = _.pluck(b.data, "uuid"),
                    l.isEdited = !0,
                    l.isMasterEdited = !1,
                    k.generateInput(l)
            }).then(function(a) {
                m.transitionInProgress = !1,
                a && (e[0].header = a.header,
                e[0].data = a.data,
                e[0].attachedDevices = l.deviceIds,
                e[0].selectedDevices = _.pluck(a.data, "csv-deviceId"),
                e[0].isEdited = !0,
                e[0].isMasterEdited = !1,
                e[0].processId = n,
                g.setTemplateDeviceInput(e),
                i.go("app.config.template.device.configure", {
                    templateId: e[0].selectedTemplate.templateId
                }))
            }, function(a) {
                m.transitionInProgress = !1,
                j.error(a.error.message + ": " + a.error.details)
            })
        }
        ,
        m
    }
    angular.module("vManage").factory("Template", a),
    a.$inject = ["appUtil", "templateConstants", "FeatureTemplateService", "DeviceTemplateService", "TemplateField", "rbac", "TemplateDeviceInput", "$filter", "$state", "notification", "DeviceTemplateHttpService", "$mdDialog"]
}(),
function() {
    function a(a, b, c) {
        function d(a) {
            var c = [];
            return angular.forEach(a, function(a) {
                c.push(new b(a))
            }),
            c
        }
        var e = function(a, b) {
            for (var c in a)
                angular.equals(c, "optionType") ? this.optionType = d(b ? b : a.optionType) : angular.equals(c, "objectType") ? (this.vipObjectType = a.objectType,
                this.objectType = a.objectType) : angular.equals(c, "primaryKeys") ? (this.primaryKeys = a.primaryKeys,
                this.vipPrimaryKey = a.primaryKeys) : this[c] = a[c];
            this.deleteFlag = !1
        };
        return e.prototype.checkUneditable = function() {
            return "variable" === this.vipType || "ignore" === this.vipType || 1 == this.optionType.length && "constant" === this.optionType[0] && this.dataType.default
        }
        ,
        e.prototype.setValidForDeviceModel = function(a) {
            for (var b = 0; b < a.length; b++)
                if (_.indexOf(this.deviceModels, a[b]) < 0) {
                    this.notValidForDeviceModel = !0;
                    break
                }
        }
        ,
        e.prototype.stripProperties = function() {
            return this.vipType === c.TEMPLATE_DEF_TYPE_VARIABLE && (this.vipType = c.TEMPLATE_DEF_TYPE_VARIABLE_NAME,
            this.vipValue = ""),
            "list" === this.vipObjectType && this.vipValue && angular.isString(this.vipValue) && (this.vipValue = a.convertStrToStrArray(this.vipValue)),
            !angular.isDefined(this.vipType) && angular.isDefined(this.vipObjectType) && delete this.vipObjectType,
            {
                vipObjectType: this.vipObjectType,
                vipType: this.vipType,
                vipValue: this.vipValue,
                vipVariableName: this.vipVariableName,
                vipPrimaryKey: this.vipPrimaryKey
            }
        }
        ,
        e
    }
    angular.module("vManage").factory("TemplateField", a),
    a.$inject = ["appUtil", "TemplateOptionType", "templateConstants"]
}(),
function() {
    function a(a, b, c, d) {
        var e = function(d, e, f) {
            var g = this;
            g.table = d,
            g.form = void 0,
            g.formFieldDefinition = {},
            g.localFormFields = {},
            g.formCollapse = !0,
            g.maxEntries = void 0,
            g.showErrorSection = !1,
            g.errorSection = {
                errorMessage: {
                    error: {
                        message: e || "Incorrect or missing value",
                        details: f || "Enter valid values in the field"
                    }
                }
            },
            g.copyFormFields = function(a) {
                var b = this;
                b.formFieldDefinition = angular.copy(a),
                b.localFormFields = angular.copy(a)
            }
            ,
            g.showForm = function(b) {
                var d = this;
                return c.checkNestedProperty(d.table, "data") && d.table.data.length >= d.maxEntries ? (a.error("Reached maximum number of entries (" + d.maxEntries + ") allowed."),
                !1) : (d.form || (d.form = b),
                b && (d.form.$submitted = !1,
                d.showErrorSection = !1),
                void (d.formCollapse = !d.formCollapse))
            }
            ,
            g.addRow = function() {
                var a = this;
                return a.form.$submitted = !0,
                a.form.$valid ? (a.table.data.push(this.localFormFields.children),
                this.localFormFields = angular.copy(a.formFieldDefinition),
                void (this.formCollapse = !this.formCollapse)) : (a.showErrorSection = !0,
                !1)
            }
            ,
            g.cancel = function() {
                var a = this;
                this.showForm(),
                this.localFormFields = angular.copy(a.formFieldDefinition)
            }
            ,
            g.openModal = function(a, c, d, e, f) {
                var g = this;
                angular.copy(g.localFormFields),
                b.show({
                    templateUrl: c || g.template,
                    controller: d || g.controller,
                    targetEvent: a,
                    escapeToClose: !1,
                    resolve: e ? e : {
                        selectedRow: function() {
                            return g.localFormFields
                        },
                        operation: function() {
                            return f
                        }
                    }
                }).then(function() {}, function(a) {})
            }
        };
        return e.prototype.setTable = function(a) {
            var b = this;
            b.table = a
        }
        ,
        e.prototype.setMaxEntries = function(a) {
            var b = this;
            b.maxEntries = a
        }
        ,
        e.prototype.setWarningMessage = function(a) {
            var b = this;
            b.warningMessage = a
        }
        ,
        e.prototype.setForm = function(a) {
            var b = this;
            b.form = a
        }
        ,
        e
    }
    angular.module("vManage").factory("TemplateFormField", a),
    a.$inject = ["notification", "$mdDialog", "appUtil", "templateConstants"]
}(),
function() {
    function a(a, b) {
        var c = function(a) {
            this.value = a,
            a === b.TEMPLATE_DEF_TYPE_CONSTANT ? (this.display = "Global",
            this.iconClass = "language",
            this.iconColor = "icon-global") : a === b.TEMPLATE_DEF_TYPE_VARIABLE ? (this.display = "Device Specific",
            this.iconClass = "router",
            this.iconColor = "icon-variable") : (this.display = "Default",
            this.iconClass = "check_circle",
            this.iconColor = "icon-default")
        };
        return c
    }
    angular.module("vManage").constant("templateConstants", {
        TEMPLATE_DEF_TYPE_CONSTANT: "constant",
        TEMPLATE_DEF_TYPE_VARIABLE: "variable",
        TEMPLATE_DEF_TYPE_IGNORE: "ignore",
        TEMPLATE_DEF_TYPE_VARIABLE_NAME: "variableName"
    }),
    angular.module("vManage").factory("TemplateOptionType", a),
    a.$inject = ["appUtil", "templateConstants"]
}(),
function() {
    function a(a, b, c) {
        var d = function(a, b, c, d, e) {
            this.name = a,
            this.displayName = b,
            this.description = c,
            this.deviceModels = d,
            this.softwareVersions = e
        };
        return {
            getTemplateTypes: function(a) {
                var e;
                b.listTemplateTypes().then(function(b) {
                    return angular.forEach(b.data, function(b) {
                        e = new d(b.name,b.displayName,b.description,b.deviceModels,b.softwareVersions),
                        e.disabled = !0,
                        e.selected = !1,
                        a.push(e)
                    }),
                    a
                }, function(a) {
                    c.error("error occurred: " + a)
                })
            },
            getNewInstance: function(a, b, c, e, f) {
                return new d(a,b,c,e,f)
            }
        }
    }
    angular.module("vManage").factory("FeatureTemplateType", a),
    a.$inject = ["appUtil", "FeatureTemplateService", "notification"]
}(),
angular.module("vManage").factory("AaaTemplate", AaaTemplate),
AaaTemplate.$inject = ["Template", "templateConstants", "TemplateField", "Table", "FeatureTemplateService", "appUtil", "notification", "$state", "$filter", "DeviceTemplateService"];
var availableUserGroupList = [];
angular.module("vManage").factory("ArchiveTemplate", ArchiveTemplate),
ArchiveTemplate.$inject = ["Template", "TemplateField", "templateConstants", "FeatureTemplateService", "Table", "appUtil", "notification", "$filter", "$state", "DeviceTemplateService"],
angular.module("vManage").factory("bridgeTemplate", bridgeTemplate),
bridgeTemplate.$inject = ["Template", "templateConstants", "TemplateField", "FeatureTemplateService", "appUtil", "notification", "Table", "$state", "$filter", "DeviceTemplateService", "$mdDialog"],
angular.module("vManage").factory("IgmpTemplate", IgmpTemplate),
IgmpTemplate.$inject = ["Template", "templateConstants", "$mdDialog", "FeatureTemplateService", "appUtil", "Table", "$state", "$filter", "notification", "DeviceTemplateService"],
angular.module("vManage").factory("LoggingTemplate", LoggingTemplate),
LoggingTemplate.$inject = ["Template", "templateConstants", "TemplateField", "FeatureTemplateService", "$filter", "Table", "notification", "$state", "DeviceTemplateService"],
angular.module("vManage").factory("NTPTemplate", NTPTemplate),
NTPTemplate.$inject = ["Template", "TemplateField", "templateConstants", "FeatureTemplateService", "Table", "appUtil", "notification", "$filter", "$state", "DeviceTemplateService"],
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l) {
        function m(a, b) {
            return new c({
                key: "enable-originate",
                description: "Originate",
                details: "Distribute a default route",
                optionType: ["constant", "ignore"],
                defaultOption: a,
                dataType: {
                    type: "boolean",
                    default: b
                },
                objectType: "node-only"
            })
        }
        function n(a, b) {
            return new c({
                key: "always",
                description: "Always",
                details: "Always advertise default route",
                optionType: ["constant", "variable", "ignore"],
                defaultOption: a,
                dataType: {
                    type: "boolean",
                    default: b
                },
                objectType: "node-only"
            })
        }
        function o(a) {
            return new c({
                key: "metric",
                description: "Default Metric",
                details: "Default metric",
                optionType: ["constant", "variable", "ignore"],
                defaultOption: a,
                dataType: {
                    type: "number",
                    min: 0,
                    max: 16777214
                },
                objectType: "object"
            })
        }
        function p(a, b) {
            return new c({
                key: "metric-type",
                description: "Metric Type",
                details: "Set metric-type",
                optionType: ["constant", "variable", "ignore"],
                defaultOption: a,
                dataType: {
                    type: "enum",
                    values: [{
                        key: "type1",
                        value: "type1"
                    }, {
                        key: "type2",
                        value: "type2"
                    }]
                },
                objectType: "object"
            })
        }
        var q = function() {
            a.apply(this, arguments),
            this.templateDefinition = {
                ospf: {
                    "router-id": {},
                    redistribute: [],
                    area: [],
                    "auto-cost": {
                        "reference-bandwidth": {}
                    },
                    compatible: {
                        rfc1583: {}
                    },
                    "default-information": {
                        "enable-originate": {}
                    },
                    distance: {
                        external: {},
                        "inter-area": {},
                        "intra-area": {}
                    },
                    timers: {
                        spf: {
                            delay: {},
                            "initial-hold": {},
                            "max-hold": {}
                        }
                    },
                    "max-metric": {
                        "router-lsa": []
                    }
                }
            }
        };
        q.prototype = new a,
        q.prototype.extendTemplate = function(a) {
            if (a = _.omit(a, ["$$hashKey"]),
            angular.extend(this, a),
            f.checkNestedProperty(a, "templateDefinition", "ospf", "default-information", "originate", "always") && (a.templateDefinition.ospf["default-information"].originate.vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
            a.templateDefinition.ospf["default-information"].originate.vipValue = "true"),
            f.checkNestedProperty(a, "templateDefinition", "ospf", "default-information", "originate"))
                if (angular.isDefined(a.templateDefinition.ospf["default-information"].originate.vipType) && angular.equals(a.templateDefinition.ospf["default-information"].originate.vipType, b.TEMPLATE_DEF_TYPE_VARIABLE))
                    this.templateDefinition.ospf["default-information"]["enable-originate"] = m(b.TEMPLATE_DEF_TYPE_VARIABLE, "false"),
                    this.templateDefinition.ospf["default-information"].originate = {
                        always: n(b.TEMPLATE_DEF_TYPE_IGNORE, "false"),
                        metric: o(b.TEMPLATE_DEF_TYPE_IGNORE),
                        "metric-type": p(b.TEMPLATE_DEF_TYPE_IGNORE)
                    },
                    this.templateDefinition.ospf["default-information"].originate["metric-type"].dataType.values = h("orderBy")(this.templateDefinition.ospf["default-information"].originate["metric-type"].dataType.values, "key");
                else if (angular.isDefined(a.templateDefinition.ospf["default-information"].originate.vipType) && angular.equals(a.templateDefinition.ospf["default-information"].originate.vipType, b.TEMPLATE_DEF_TYPE_IGNORE))
                    this.templateDefinition.ospf["default-information"]["enable-originate"] = m(b.TEMPLATE_DEF_TYPE_CONSTANT, "false"),
                    this.templateDefinition.ospf["default-information"]["enable-originate"].vipType = b.TEMPLATE_DEF_TYPE_IGNORE,
                    this.templateDefinition.ospf["default-information"]["enable-originate"].vipValue = "false",
                    this.templateDefinition.ospf["default-information"].originate = {
                        always: n(b.TEMPLATE_DEF_TYPE_IGNORE, "false"),
                        metric: o(b.TEMPLATE_DEF_TYPE_IGNORE),
                        "metric-type": p(b.TEMPLATE_DEF_TYPE_IGNORE)
                    },
                    this.templateDefinition.ospf["default-information"].originate["metric-type"].dataType.values = h("orderBy")(this.templateDefinition.ospf["default-information"].originate["metric-type"].dataType.values, "key");
                else if (this.templateDefinition.ospf["default-information"]["enable-originate"] = m(b.TEMPLATE_DEF_TYPE_CONSTANT, "false"),
                this.templateDefinition.ospf["default-information"]["enable-originate"].vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
                this.templateDefinition.ospf["default-information"]["enable-originate"].vipValue = a.templateDefinition.ospf["default-information"].originate.vipValue,
                f.checkNestedProperty(a, "templateDefinition", "ospf", "default-information", "originate", "always")) {
                    var c = this.templateDefinition.ospf["default-information"].originate;
                    this.templateDefinition.ospf["default-information"].originate = {
                        always: n(a.templateDefinition.ospf["default-information"].originate.always.vipType, "false"),
                        metric: o(a.templateDefinition.ospf["default-information"].originate.metric.vipType),
                        "metric-type": p(a.templateDefinition.ospf["default-information"].originate["metric-type"].vipType)
                    },
                    this.templateDefinition.ospf["default-information"].originate.always.vipType = c.always.vipType,
                    this.templateDefinition.ospf["default-information"].originate.always.vipValue = c.always.vipValue,
                    this.templateDefinition.ospf["default-information"].originate.always.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (this.templateDefinition.ospf["default-information"].originate.always.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE),
                    this.templateDefinition.ospf["default-information"].originate.metric.vipType = c.metric.vipType,
                    this.templateDefinition.ospf["default-information"].originate.metric.vipValue = c.metric.vipValue,
                    this.templateDefinition.ospf["default-information"].originate.metric.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (this.templateDefinition.ospf["default-information"].originate.metric.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE),
                    angular.isDefined(a.templateDefinition.ospf["default-information"].originate["metric-type"].vipValue) && (this.templateDefinition.ospf["default-information"].originate["metric-type"].dataType.values = h("orderBy")(this.templateDefinition.ospf["default-information"].originate["metric-type"].dataType.values, "key")),
                    this.templateDefinition.ospf["default-information"].originate["metric-type"].vipType = c["metric-type"].vipType,
                    this.templateDefinition.ospf["default-information"].originate["metric-type"].vipValue = c["metric-type"].vipValue,
                    this.templateDefinition.ospf["default-information"].originate["metric-type"].vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (this.templateDefinition.ospf["default-information"].originate["metric-type"].vipType = b.TEMPLATE_DEF_TYPE_VARIABLE)
                } else
                    this.templateDefinition.ospf["default-information"].originate = {
                        always: n(b.TEMPLATE_DEF_TYPE_IGNORE, "false"),
                        metric: o(b.TEMPLATE_DEF_TYPE_IGNORE),
                        "metric-type": p(b.TEMPLATE_DEF_TYPE_IGNORE)
                    },
                    this.templateDefinition.ospf["default-information"].originate["metric-type"].dataType.values = h("orderBy")(this.templateDefinition.ospf["default-information"].originate["metric-type"].dataType.values, "key");
            else
                this.templateDefinition.ospf["default-information"] = angular.extend({}, this.templateDefinition.ospf["default-information"], {
                    originate: {
                        always: n(b.TEMPLATE_DEF_TYPE_IGNORE, "false"),
                        metric: o(b.TEMPLATE_DEF_TYPE_IGNORE),
                        "metric-type": p(b.TEMPLATE_DEF_TYPE_IGNORE)
                    }
                }),
                this.templateDefinition.ospf["default-information"].originate["metric-type"].dataType.values = h("orderBy")(this.templateDefinition.ospf["default-information"].originate["metric-type"].dataType.values, "key"),
                this.templateDefinition.ospf["default-information"]["enable-originate"] = m(b.TEMPLATE_DEF_TYPE_IGNORE, "false");
            this.populatePolicyName(angular.copy(a))
        }
        ,
        q.prototype.extendRoutePolicy = function() {
            this.templateDefinition.ospf = angular.extend({}, this.templateDefinition.ospf, {
                "route-policy": [{
                    direction: s,
                    "pol-name": t()
                }]
            })
        }
        ,
        q.prototype.populatePolicyName = function(a) {
            if (!angular.isDefined(this.templateDefinition.ospf["route-policy"]))
                return void this.extendRoutePolicy();
            this.templateDefinition.ospf["route-policy"] = [],
            a.templateDefinition.ospf["route-policy"].vipValue[0]["pol-name"] = r(a.templateDefinition.ospf["route-policy"].vipValue);
            var b = new c(s);
            b.vipType = a.templateDefinition.ospf["route-policy"].vipValue[0].direction.vipType,
            b.dataType.default = "in",
            delete a.templateDefinition.ospf["route-policy"].vipValue[0]["priority-order"],
            a.templateDefinition.ospf["route-policy"].vipValue[0].direction = b,
            this.templateDefinition.ospf["route-policy"].push(a.templateDefinition.ospf["route-policy"].vipValue[0])
        }
        ;
        var r = function(a) {
            var c = t();
            return c.vipType = a[0]["pol-name"].vipType,
            c.vipValue = a[0]["pol-name"].vipValue,
            c.vipType === b.TEMPLATE_DEF_TYPE_VARIABLE_NAME && (c.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE),
            c
        };
        q.prototype.createRedistributeTable = function() {
            var a = new e({
                autoLoad: !0,
                singleSelect: !0,
                minRowsToShow: 5,
                columnResizing: !0,
                dataUid: "$$hashKey",
                rowHeight: 30,
                tableName: "redistribute",
                toolbar: !1
            });
            return a.setToolbar({
                search: !1,
                rowCount: !1,
                refresh: !1,
                menuColumnFilter: !1
            }),
            a
        }
        ,
        q.prototype.setRedistributeTable = function(a) {
            function b(a, b) {
                angular.forEach(a.vipValue, function(d) {
                    d.protocol = c.editObjectTemplateField(a.children.protocol, d.protocol),
                    d["route-policy"] = c.editObjectTemplateField(a.children["route-policy"], d["route-policy"]),
                    b.push(d)
                })
            }
            var c = this
              , d = [{
                title: "Protocol",
                property: "protocol",
                editable: !1,
                dataType: "string",
                headerTooltip: this.templateDefinition.ospf.redistribute.children.protocol.details,
                cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ospf_redistribute" view-mode="view" ng-model="row.entity.protocol" data-name="protocol_{{rowRenderIndex}}"></vip-multi-state-input></div>'
            }, {
                title: "Route Policy",
                property: "route-policy",
                editable: !1,
                dataType: "string",
                headerTooltip: this.templateDefinition.ospf.redistribute.children["route-policy"].details,
                cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ospf_redistribute" view-mode="view" ng-model="row.entity[\'route-policy\']" data-name="route_policy_{{rowRenderIndex}}"></vip-multi-state-input></div>'
            }];
            angular.equals(this.viewMode, "view") || d.push({
                title: "Action",
                displayName: "",
                property: "remove-row",
                editable: !1,
                dataType: "string",
                isRightPinned: !0,
                width: 100,
                cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
            }),
            a.setNewRowToggleData(this.templateDefinition.ospf.redistribute.children),
            a.createColumns(d),
            angular.isDefined(this.templateDefinition.ospf.redistribute) && angular.isArray(this.templateDefinition.ospf.redistribute.vipValue) && this.templateDefinition.ospf.redistribute.vipValue.length > 0 && b(this.templateDefinition.ospf.redistribute, a.data)
        }
        ,
        q.prototype.createRouterLsaTable = function() {
            var a = new e({
                autoLoad: !0,
                singleSelect: !0,
                minRowsToShow: 5,
                columnResizing: !0,
                dataUid: "$$hashKey",
                rowHeight: 30,
                addMaxRow: 2,
                tableName: "routerLsa",
                toolbar: !1
            });
            return a.setToolbar({
                search: !1,
                rowCount: !1,
                refresh: !1,
                menuColumnFilter: !1
            }),
            a
        }
        ,
        q.prototype.setRouterLsaTable = function(a) {
            function b(a, b) {
                angular.forEach(a.vipValue, function(d) {
                    d["ad-type"] = c.editObjectTemplateField(a.children["ad-type"], d["ad-type"]),
                    "administrative" !== d["ad-type"].vipValue ? d.time = c.editObjectTemplateField(a.children.time, d.time) : d.time = a.children.time,
                    b.push(d)
                })
            }
            var c = this
              , d = [{
                title: "Type",
                property: "ad-type",
                editable: !1,
                dataType: "string",
                headerTooltip: this.templateDefinition.ospf["max-metric"]["router-lsa"].children["ad-type"].details,
                cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ospf_router_lsa" view-mode="view" ng-model="row.entity[\'ad-type\']" data-name="ad_type_{{rowRenderIndex}}"></vip-multi-state-input></div>'
            }, {
                title: "Time",
                property: "time",
                editable: !1,
                dataType: "string",
                headerTooltip: this.templateDefinition.ospf["max-metric"]["router-lsa"].children.time.details,
                cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ospf_router_lsa" view-mode="view" ng-if="row.entity[\'ad-type\'].vipValue === \'on-startup\'" ng-model="row.entity.time" data-name="time_{{rowRenderIndex}}"></vip-multi-state-input></div>'
            }];
            angular.equals(this.viewMode, "view") || d.push({
                title: "Action",
                displayName: "",
                property: "remove-row",
                editable: !1,
                dataType: "string",
                isRightPinned: !0,
                width: 100,
                cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i> <i class="material-icons md-14 blue pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
            }),
            a.setNewRowToggleData(this.templateDefinition.ospf["max-metric"]["router-lsa"].children),
            a.createColumns(d),
            f.checkNestedProperty(this.templateDefinition.ospf, "max-metric", "router-lsa") && angular.isArray(this.templateDefinition.ospf["max-metric"]["router-lsa"].vipValue) && this.templateDefinition.ospf["max-metric"]["router-lsa"].vipValue.length > 0 && b(this.templateDefinition.ospf["max-metric"]["router-lsa"], a.data)
        }
        ,
        q.prototype.createAreaTable = function() {
            var a = new e({
                tableName: "area",
                singleSelect: !0,
                autoLoad: !0,
                minRowsToShow: 5,
                columnResizing: !0,
                dataUid: "$$hashKey",
                rowHeight: 30,
                toolbar: !1
            });
            return a.setToolbar({
                search: !1,
                rowCount: !1,
                refresh: !1,
                menuColumnFilter: !1
            }),
            a.setAppScope(this.removeTableRow),
            a.setAppScope({
                openModal: function(a, b, c, d) {
                    var e = angular.copy(b.entity)
                      , f = {
                        template: "app/configuration/template/feature/modal/views/OSPF/ospfAreaInterfaceModal.html",
                        controller: "OSPFAreaInterfaceModalInstanceCtrl"
                    };
                    "range" == c && (f.template = "app/configuration/template/feature/modal/views/OSPF/ospfAreaRangeModal.html",
                    f.controller = "OSPFAreaRangeModalInstanceCtrl");
                    l.show({
                        templateUrl: f.template,
                        controller: f.controller,
                        targetEvent: a,
                        escapeToClose: !1,
                        resolve: {
                            selectedRow: function() {
                                return b
                            },
                            operation: function() {
                                return "view"
                            },
                            ospfAreaFormInfo: function() {
                                return null
                            },
                            areaRowIndex: function() {
                                return d
                            },
                            formObject: function() {
                                return {}
                            }
                        }
                    }).then(function() {}, function(a) {
                        self.localFormFields = e
                    })
                }
            }),
            a
        }
        ,
        q.prototype.setAreaTable = function(a) {
            function d(a, c) {
                function d(a) {
                    a.interfaceList = [],
                    angular.isDefined(a.interface) && angular.isArray(a.interface.vipValue) && a.interface.vipValue.length > 0 && angular.forEach(a.interface.vipValue, function(b) {
                        var c = {
                            authentication: {
                                "message-digest": {}
                            }
                        };
                        c.name = e.editObjectTemplateField(a.interface.children.name, b.name),
                        c["hello-interval"] = e.editObjectTemplateField(a.interface.children["hello-interval"], b["hello-interval"]),
                        c["dead-interval"] = e.editObjectTemplateField(a.interface.children["dead-interval"], b["dead-interval"]),
                        c["retransmit-interval"] = e.editObjectTemplateField(a.interface.children["retransmit-interval"], b["retransmit-interval"]),
                        c.cost = e.editObjectTemplateField(a.interface.children.cost, b.cost),
                        c.priority = e.editObjectTemplateField(a.interface.children.priority, b.priority),
                        c.network = e.editObjectTemplateField(a.interface.children.network, b.network),
                        c["passive-interface"] = e.editObjectTemplateField(a.interface.children["passive-interface"], b["passive-interface"]),
                        c.authentication.type = e.editObjectTemplateField(a.interface.children.authentication.type, b.authentication.type),
                        c.authentication["authentication-key"] = e.editObjectTemplateField(a.interface.children.authentication["authentication-key"], b.authentication["authentication-key"]),
                        c.authentication["message-digest"]["message-digest-key"] = e.editObjectTemplateField(a.interface.children.authentication["message-digest"]["message-digest-key"], b.authentication["message-digest"]["message-digest-key"]),
                        c.authentication["message-digest"].md5 = e.editObjectTemplateField(a.interface.children.authentication["message-digest"].md5, b.authentication["message-digest"].md5),
                        a.interfaceList.push(c)
                    })
                }
                function h(a) {
                    a.rangeList = [],
                    angular.isDefined(a.range) && angular.isArray(a.range.vipValue) && a.range.vipValue.length > 0 && angular.forEach(a.range.vipValue, function(b) {
                        var c = {};
                        c.address = e.editObjectTemplateField(a.range.children.address, b.address),
                        c.cost = e.editObjectTemplateField(a.range.children.cost, b.cost),
                        c["no-advertise"] = e.editObjectTemplateField(a.range.children["no-advertise"], b["no-advertise"]),
                        a.rangeList.push(c)
                    })
                }
                var i = "false";
                f.checkNestedProperty(e.template, "devicesAttached") && e.template.devicesAttached > 0 && (e.disableDeviceSpecificVarNameChange = "true"),
                angular.forEach(a.vipValue, function(j) {
                    j.viewMode = e.viewMode,
                    j.disableDeviceSpecificVarNameChange = i,
                    j["a-num"] = e.editObjectTemplateField(a.children["a-num"], j["a-num"]);
                    var k = angular.copy(g);
                    f.checkNestedProperty(j.stub, "no-summary", "vipType") && f.checkNestedProperty(j.nssa, "no-summary", "vipType") ? (k.defaultOption = j.stub["no-summary"].vipType,
                    j["no-summary"] = e.editObjectTemplateField(a.children["no-summary"], j.stub["no-summary"]),
                    j.translate = e.editObjectTemplateField(a.children.translate, {})) : angular.isDefined(j.stub) ? (k.vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
                    k.vipValue = "stub",
                    j["no-summary"] = e.editObjectTemplateField(a.children["no-summary"], j.stub["no-summary"]),
                    j.translate = e.editObjectTemplateField(a.children.translate, {})) : angular.isDefined(j.nssa) && (k.vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
                    k.vipValue = "nssa",
                    j["no-summary"] = e.editObjectTemplateField(a.children["no-summary"], j.nssa["no-summary"]),
                    j.translate = e.editObjectTemplateField(a.children.translate, j.nssa.translate)),
                    j["area-type"] = k,
                    angular.isDefined(j.interface) ? j.interface = e.editObjectTemplateField(a.children.interface, j.interface) : j.interface = e.editObjectTemplateField(a.children.interface, {}),
                    angular.isDefined(j.range) ? j.range = e.editObjectTemplateField(a.children.range, j.range) : j.range = e.editObjectTemplateField(a.children.range, {}),
                    d(j),
                    h(j),
                    c.push(j)
                })
            }
            var e = this
              , g = new c({
                key: "area-type",
                description: "Set the area type",
                details: "Set the area type",
                optionType: ["constant", "ignore"],
                defaultOption: "ignore",
                dataType: {
                    type: "enum",
                    values: [{
                        key: "stub",
                        value: "stub"
                    }, {
                        key: "nssa",
                        value: "nssa"
                    }]
                },
                objectType: "object"
            })
              , h = [{
                title: "Number",
                property: "a-num",
                editable: !1,
                dataType: "string",
                headerTooltip: this.templateDefinition.ospf.area.children["a-num"].details,
                cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ospf" view-mode="view" ng-model="row.entity[\'a-num\']" data-name="a_num_{{rowRenderIndex}}"></vip-multi-state-input></div>'
            }, {
                title: "Area Type",
                property: "area-type",
                editable: !1,
                dataType: "string",
                headerTooltip: g.details,
                width: 240,
                cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ospf" view-mode="view" ng-model="row.entity[\'area-type\']" data-name="area_type_{{rowRenderIndex}}"></vip-multi-state-input></div>'
            }, {
                title: "No Summary",
                property: "no-summary",
                editable: !1,
                dataType: "string",
                headerTooltip: this.templateDefinition.ospf.area.children.nssa["no-summary"].details,
                width: 240,
                cellTemplate: "<div class=\"ui-grid-cell-contents\"><vip-multi-state-input custom-prepend-variable-name=\"ospf_area\" view-mode=\"view\" ng-if=\"(row.entity['area-type'].vipType === 'constant' && (row.entity['area-type'].vipValue === 'nssa' || row.entity['area-type'].vipValue === 'stub'))\" ng-model=\"row.entity['no-summary']\" data-name=\"no_summary_{{rowRenderIndex}}\"></vip-multi-state-input></div>"
            }, {
                title: "Translate",
                property: "translate",
                editable: !1,
                dataType: "string",
                headerTooltip: this.templateDefinition.ospf.area.children.nssa.translate.details,
                width: 240,
                cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ospf_area" view-mode="view" ng-if="row.entity[\'area-type\'].vipValue === \'nssa\' && row.entity[\'area-type\'].vipType === \'constant\'" ng-model="row.entity[\'translate\']" data-name="translate_{{rowRenderIndex}}"></vip-multi-state-input></div>'
            }, {
                title: "Interface",
                property: "interface",
                editable: !1,
                dataType: "string",
                width: 150,
                cellTemplate: '<div class="ui-grid-cell-contents toggleContent"><span id="interface_{{rowRenderIndex}}" ng-class="row.entity.interfaceList.length > 0 ? \'link-cell\'  : \'\'"  data-ng-click="row.entity.interfaceList.length > 0 ? grid.appScope.openModal($event, row, \'interface\', rowIndex): return">{{row.entity.interfaceList.length}}</span>&nbsp;&nbsp</div>'
            }, {
                title: "Range",
                property: "range",
                editable: !1,
                dataType: "string",
                width: 150,
                cellTemplate: '<div class="ui-grid-cell-contents toggleContent"><span id="range_{{rowRenderIndex}}" ng-class="row.entity.rangeList.length > 0 ? \'link-cell\'  : \'\'"  data-ng-click="row.entity.rangeList.length > 0 ? grid.appScope.openModal($event, row, \'range\', rowIndex):return">{{row.entity.rangeList.length}}</span></div>'
            }];
            angular.equals(this.viewMode, "view") || h.push({
                title: "Action",
                displayName: "",
                property: "remove-row",
                editable: !1,
                dataType: "string",
                isRightPinned: !0,
                width: 100,
                cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-14 pointerCursor blue" id="editRow_{{rowRenderIndex}}" ng-click="grid.appScope.editRow($event, row, rowRenderIndex)">mode_edit</i><i class="material-icons md-14 pointerCursor blue" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
            }),
            a.setNewRowToggleData(angular.extend(this.templateDefinition.ospf.area.children, {
                "area-type": g,
                "no-summary": this.templateDefinition.ospf.area.children.nssa["no-summary"],
                translate: this.templateDefinition.ospf.area.children.nssa.translate,
                interfaceList: [],
                rangeList: []
            })),
            a.createColumns(h),
            angular.isDefined(this.templateDefinition.ospf.area) && angular.isArray(this.templateDefinition.ospf.area.vipValue) && this.templateDefinition.ospf.area.vipValue.length > 0 && d(this.templateDefinition.ospf.area, a.data)
        }
        ,
        q.prototype.createAreaRangeTable = function(a, b) {
            function c(a, c) {
                angular.forEach(a.vipValue, function(e) {
                    e.address = d.editObjectTemplateField(a.children.address, e.address),
                    e.cost = d.editObjectTemplateField(a.children.cost, e.cost),
                    e["no-advertise"] = d.editObjectTemplateField(a.children["no-advertise"], e["no-advertise"]),
                    e.areaTableRowIndex = b,
                    c.push(e)
                })
            }
            var d = this
              , f = new e({
                autoLoad: !0,
                singleSelect: !0,
                minRowsToShow: 5,
                dataUid: "$$hashKey",
                rowHeight: 30,
                tableName: "Range_" + b,
                toolbar: !1
            });
            f.setToolbar({
                search: !1,
                rowCount: !1,
                refresh: !1,
                menuColumnFilter: !1
            });
            var g = [{
                title: "Address",
                property: "address",
                editable: !1,
                dataType: "string",
                headerTooltip: a.children.address.details,
                cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ospf_area_range" view-mode="view" ng-model="row.entity.address" data-name="address_{{row.entity.areaTableRowIndex}}_{{rowRenderIndex}}"></vip-multi-state-input></div>'
            }, {
                title: "Cost",
                property: "cost",
                editable: !1,
                dataType: "string",
                headerTooltip: a.children.cost.details,
                cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ospf_area_range" view-mode="view" ng-model="row.entity.cost" data-name="cost_{{row.entity.areaTableRowIndex}}_{{rowRenderIndex}}"></vip-multi-state-input></div>'
            }, {
                title: "No Advertise",
                property: "no-advertise",
                editable: !1,
                dataType: "string",
                headerTooltip: a.children["no-advertise"].details,
                cellTemplate: '<div class="ui-grid-cell-contents"><vip-multi-state-input custom-prepend-variable-name="ospf_area_range" view-mode="view" ng-model="row.entity[\'no-advertise\']" data-name="no_advertise_{{row.entity.areaTableRowIndex}}_{{rowRenderIndex}}"></vip-multi-state-input></div>'
            }];
            return angular.equals(this.viewMode, "view") || g.push({
                title: "Action",
                displayName: "",
                property: "remove-row",
                editable: !1,
                dataType: "string",
                isRightPinned: !0,
                width: 100,
                cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons md-16  pointerCursor" id="removeRow_{{rowRenderIndex}}" ng-click="grid.appScope.removeRow(row, rowRenderIndex)">delete</i></div>'
            }),
            f.setNewRowToggleData({
                address: a.children.address,
                cost: a.children.cost,
                "no-advertise": a.children["no-advertise"],
                areaTableRowIndex: b
            }),
            f.setAppScope(this.removeTableRow),
            f.createColumns(g),
            angular.isDefined(a) && angular.isArray(a.vipValue) && a.vipValue.length > 0 && c(a, f.data),
            f
        }
        ,
        q.prototype.setTemplateDefinition = function() {
            var a = this.templateDefinition.ospf;
            if (this.templateDefinition.ospf = this.omitExtraDefinitionProperty(_.omit(a, ["default-information", "redistribute", "area", "max-metric"])),
            angular.equals(a["default-information"]["enable-originate"].vipType, b.TEMPLATE_DEF_TYPE_IGNORE))
                delete this.templateDefinition.ospf["default-information"];
            else if (angular.equals(a["default-information"]["enable-originate"].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && angular.equals(a["default-information"]["enable-originate"].vipValue, "false"))
                this.templateDefinition.ospf["default-information"] = {
                    originate: {
                        vipValue: "false",
                        vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                        vipObjectType: "node-only"
                    }
                };
            else if (angular.equals(a["default-information"]["enable-originate"].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && angular.equals(a["default-information"]["enable-originate"].vipValue, "true"))
                if (angular.equals(a["default-information"].originate.always.vipType, b.TEMPLATE_DEF_TYPE_IGNORE) && angular.equals(a["default-information"].originate.metric.vipType, b.TEMPLATE_DEF_TYPE_IGNORE) && angular.equals(a["default-information"].originate["metric-type"].vipType, b.TEMPLATE_DEF_TYPE_IGNORE))
                    this.templateDefinition.ospf["default-information"] = {
                        originate: {
                            vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                            vipObjectType: "node-only",
                            vipValue: "true"
                        }
                    };
                else {
                    a["default-information"].originate;
                    this.templateDefinition.ospf["default-information"] = {
                        originate: {
                            always: this.omitObjectProperties(a["default-information"].originate.always),
                            metric: this.omitObjectProperties(a["default-information"].originate.metric),
                            "metric-type": this.omitObjectProperties(a["default-information"].originate["metric-type"])
                        }
                    }
                }
            a.redistribute.length > 0 && (this.templateDefinition.ospf.redistribute = {
                vipType: a.redistribute.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
                vipValue: this.addPriorityField(this.omitObjectProperties(a.redistribute), ["protocol", "route-policy"]),
                vipObjectType: "tree",
                vipPrimaryKey: ["protocol"]
            }),
            a["max-metric"]["router-lsa"].length > 0 ? this.templateDefinition.ospf["max-metric"] = {
                "router-lsa": {
                    vipType: a["max-metric"]["router-lsa"].length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_VARIABLE,
                    vipValue: this.constructRouterLsa(a["max-metric"]["router-lsa"]),
                    vipObjectType: "tree",
                    vipPrimaryKey: ["ad-type"]
                }
            } : this.templateDefinition.ospf["max-metric"] = {
                "router-lsa": {
                    vipType: b.TEMPLATE_DEF_TYPE_IGNORE,
                    vipValue: [],
                    vipObjectType: "tree",
                    vipPrimaryKey: ["ad-type"]
                }
            },
            a.area.length > 0 && (this.templateDefinition.ospf.area = {
                vipType: a.area.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_VARIABLE,
                vipValue: this.constructArea(a.area),
                vipObjectType: "tree",
                vipPrimaryKey: ["a-num"]
            }),
            angular.equals(a["route-policy"][0]["pol-name"].vipType, b.TEMPLATE_DEF_TYPE_IGNORE) ? delete this.templateDefinition.ospf["route-policy"] : this.templateDefinition.ospf["route-policy"] = {
                vipType: b.TEMPLATE_DEF_TYPE_CONSTANT,
                vipValue: this.constructRoutePolicy(a["route-policy"]),
                vipObjectType: "tree",
                vipPrimaryKey: ["direction"]
            }
        }
        ,
        q.prototype.constructRoutePolicy = function(a) {
            var c = this
              , d = ["direction", "pol-name"];
            return angular.forEach(a, function(a) {
                a.direction = c.omitObjectProperties(a.direction),
                a.direction.vipType = b.TEMPLATE_DEF_TYPE_CONSTANT,
                a.direction.vipValue = "in",
                a.direction.vipObjectType = "object",
                a["pol-name"] = c.omitObjectProperties(a["pol-name"]),
                a["priority-order"] = angular.copy(d)
            }),
            a
        }
        ,
        q.prototype.constructRouterLsa = function(a) {
            var b = this
              , c = [];
            return angular.forEach(a, function(a) {
                c = ["ad-type"],
                a["ad-type"] = b.omitObjectProperties(a["ad-type"]),
                angular.equals(a["ad-type"].vipValue, "administrative") ? angular.isDefined(a.time) && delete a.time : (c.push("time"),
                a.time = b.omitObjectProperties(a.time)),
                a["priority-order"] = angular.copy(c),
                c = []
            }),
            a
        }
        ,
        q.prototype.constructArea = function(a) {
            var c = this
              , d = [];
            return angular.forEach(a, function(a) {
                angular.isDefined(a.disableDeviceSpecificVarNameChange) && delete a.disableDeviceSpecificVarNameChange,
                d = ["a-num"],
                a["area-type"] && (angular.equals(a["area-type"].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) ? angular.equals(a["area-type"].vipValue, "stub") ? (d.push("stub"),
                a["no-summary"] && (a.stub = {
                    "no-summary": {
                        vipType: a["no-summary"].vipType,
                        vipObjectType: "node-only",
                        vipVariableName: a["no-summary"].vipVariableName
                    }
                },
                angular.equals(a["no-summary"].vipType, b.TEMPLATE_DEF_TYPE_VARIABLE) && (a.stub["no-summary"].vipType = b.TEMPLATE_DEF_TYPE_VARIABLE_NAME),
                angular.equals(a["no-summary"].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && (a.stub["no-summary"].vipValue = a["no-summary"].vipValue)),
                delete a.nssa) : (d.push("nssa"),
                a.nssa = {},
                a["no-summary"] && (a.nssa["no-summary"] = {
                    vipType: a["no-summary"].vipType,
                    vipObjectType: "node-only",
                    vipVariableName: a["no-summary"].vipVariableName
                },
                angular.equals(a["no-summary"].vipType, b.TEMPLATE_DEF_TYPE_VARIABLE) && (a.nssa["no-summary"].vipType = b.TEMPLATE_DEF_TYPE_VARIABLE_NAME),
                angular.equals(a["no-summary"].vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && (a.nssa["no-summary"].vipValue = a["no-summary"].vipValue)),
                a.translate && (a.nssa.translate = {
                    vipType: a.translate.vipType,
                    vipObjectType: "object",
                    vipVariableName: a.translate.vipVariableName
                },
                angular.equals(a.translate.vipType, b.TEMPLATE_DEF_TYPE_VARIABLE) && (a.nssa.translate.vipType = b.TEMPLATE_DEF_TYPE_VARIABLE_NAME),
                angular.equals(a.translate.vipType, b.TEMPLATE_DEF_TYPE_CONSTANT) && (a.nssa.translate.vipValue = a.translate.vipValue)),
                delete a.stub) : (a.stub = {
                    "no-summary": {
                        vipType: a["area-type"].vipType,
                        vipObjectType: "node-only"
                    }
                },
                a.nssa = {
                    "no-summary": {
                        vipType: a["area-type"].vipType,
                        vipObjectType: "node-only"
                    },
                    translate: {
                        vipType: a["area-type"].vipType,
                        vipObjectType: "object"
                    }
                }),
                a.translate && delete a.translate,
                a["no-summary"] && delete a["no-summary"],
                delete a["area-type"],
                delete a.viewMode),
                a.interfaceList && a.interfaceList.length > 0 ? (d.push("interface"),
                a.interface = {
                    vipType: a.interfaceList.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_VARIABLE,
                    vipValue: c.addPriorityField(c.constructAreaInterfaceList(a.interfaceList), ["name", "hello-interval", "dead-interval", "retransmit-interval", "cost", "priority", "network", "passive-interface", "authentication"]),
                    vipObjectType: "tree",
                    vipPrimaryKey: ["name"]
                },
                delete a.interface.viewMode) : delete a.interface,
                a.rangeList && a.rangeList.length > 0 ? (d.push("range"),
                a.range = {
                    vipType: a.rangeList.length > 0 ? b.TEMPLATE_DEF_TYPE_CONSTANT : b.TEMPLATE_DEF_TYPE_IGNORE,
                    vipValue: c.addPriorityField(c.omitObjectProperties(a.rangeList), ["address", "cost", "no-advertise"]),
                    vipObjectType: "tree",
                    vipPrimaryKey: ["address"]
                }) : delete a.range,
                delete a.interfaceList,
                delete a.rangeList;
                for (var e in a)
                    "viewMode" != e && (angular.equals(e, "interface") || angular.equals(e, "range") || (a[e] && "list" === a[e].vipObjectType && a[e].value && (a[e].value = f.convertStrToStrArray(a[e].value)),
                    a[e] = _.omit(a[e], ["dataType", "defaultOption", "objectType", "optionType", "description", "details", "key", "addPriorityField", "checkUneditable", "viewMode", "primaryKeys", "deleteFlag"]),
                    a[e].vipType === b.TEMPLATE_DEF_TYPE_VARIABLE && (a[e].vipType = b.TEMPLATE_DEF_TYPE_VARIABLE_NAME)));
                a["priority-order"] = angular.copy(d),
                d = []
            }),
            a
        }
        ,
        q.prototype.constructAreaInterfaceList = function(a) {
            var c = this;
            return angular.forEach(a, function(a) {
                a.authentication.type = c.omitObjectProperties(a.authentication.type),
                a.authentication["authentication-key"] = c.omitObjectProperties(a.authentication["authentication-key"]),
                a.authentication["message-digest"]["message-digest-key"] = c.omitObjectProperties(a.authentication["message-digest"]["message-digest-key"]),
                a.authentication["message-digest"].md5 = c.omitObjectProperties(a.authentication["message-digest"].md5);
                for (var d in a)
                    "viewMode" != d && (angular.equals(d, "authentication") || ("list" === a[d].vipObjectType && a[d].value && (a[d].value = f.convertStrToStrArray(a[d].value)),
                    a[d] = _.omit(a[d], ["dataType", "defaultOption", "objectType", "optionType", "description", "details", "key", "addPriorityField", "checkUneditable", "viewMode", "primaryKeys", "deleteFlag"]),
                    a[d].vipType === b.TEMPLATE_DEF_TYPE_VARIABLE && (a[d].vipType = b.TEMPLATE_DEF_TYPE_VARIABLE_NAME)))
            }),
            a
        }
        ,
        q.prototype.add = function(a, b) {
            var c = this;
            if (!c.isTemplateFormFieldsValid(b.addTemplate))
                return void this.showNotificationErrorsForForm(b);
            a.transitionInProgress = !0;
            var e = c.createTemplateCopy(a);
            e.templateType = a.templateType.name,
            e.factoryDefault = !1,
            e.setDeviceType(a.deviceModels),
            e.setTemplateDefinition(),
            d.createGeneralTemplate(e).then(function(b) {
                g.success(h("initialCap")(e.templateType) + " Template created", 2e3),
                i.previousState && i.previousState.name.contains("app.config.template.device.feature") ? (k.setRequiredFlagsForFiltering(e),
                j.pushToFeatureTemplateList(angular.extend(e, {
                    templateId: b.templateId
                })),
                a.transitionInProgress = !1,
                i.go(i.previousState.name)) : (a.transitionInProgress = !1,
                i.go("app.config.template.feature", {
                    display: "",
                    deviceType: "",
                    templateType: "",
                    templateId: ""
                }))
            }, function(b) {
                a.transitionInProgress = !1,
                g.error(b.error.message + ": " + b.error.details)
            })
        }
        ,
        q.prototype.edit = function(a, b) {
            var c = this;
            if (!c.isTemplateFormFieldsValid(b.addTemplate))
                return void this.showNotificationErrorsForForm(b);
            var d = c.createTemplateCopy(a);
            d.templateType = a.templateType.name,
            d.factoryDefault = !1,
            d.setDeviceType(a.deviceModels),
            d.setTemplateDefinition(),
            c.callUpdateTemplate(d)
        }
        ,
        q.prototype.createTemplateCopy = function(a) {
            var b = a.templateDefinition.ospf
              , c = angular.copy(_.omit(b, "area"));
            c.area = [],
            b.area && b.area.length > 0 && angular.forEach(b.area, function(a) {
                var b = {};
                for (var d in a)
                    b[d] = angular.copy(a[d]);
                c.area.push(b)
            });
            var d = angular.copy(_.omit(a, "templateDefinition"));
            return d.templateDefinition = {
                ospf: c
            },
            d
        }
        ;
        var s = new c({
            key: "direction",
            description: "Direction",
            details: "Direction",
            optionType: ["constant"],
            defaultOption: "constant",
            dataType: {
                type: "enum",
                values: [{
                    key: "in",
                    value: "in"
                }]
            },
            dataPath: [],
            objectType: "object"
        })
          , t = function() {
            return new c({
                key: "pol-name",
                description: "Policy Name",
                details: "Name of route policy",
                optionType: ["constant", "variable", "ignore"],
                defaultOption: "ignore",
                dataType: {
                    type: "string"
                },
                dataPath: [],
                objectType: "object"
            })
        };
        return q
    }
    angular.module("vManage").factory("OspfTemplate", a),
    a.$inject = ["Template", "templateConstants", "TemplateField", "FeatureTemplateService", "Table", "appUtil", "notification", "$filter", "$state", "DeviceTemplateService", "DeviceTemplateHttpService", "$mdDialog"]
}(),
angular.module("vManage").factory("PimTemplate", PimTemplate),
PimTemplate.$inject = ["Template", "templateConstants", "TemplateField", "Table", "notification", "FeatureTemplateService", "$filter", "appUtil", "$state", "DeviceTemplateService"],
angular.module("vManage").factory("SnmpTemplate", SnmpTemplate),
SnmpTemplate.$inject = ["Template", "templateConstants", "TemplateField", "FeatureTemplateService", "Table", "appUtil", "notification", "$mdDialog", "$filter", "$state", "DeviceTemplateService"],
angular.module("vManage").factory("VedgeBfdTemplate", VedgeBfdTemplate),
VedgeBfdTemplate.$inject = ["Template", "templateConstants", "notification", "Table"],
angular.module("vManage").factory("VedgeBgpTemplate", VedgeBgpTemplate),
VedgeBgpTemplate.$inject = ["Template", "templateConstants", "FeatureTemplateService", "TemplateField", "Table", "$mdDialog", "appUtil", "notification", "$filter", "$state", "DeviceTemplateService", "DeviceTemplateHttpService"],
angular.module("vManage").factory("VedgeDhcpServerTemplate", VedgeDhcpServerTemplate),
VedgeDhcpServerTemplate.$inject = ["Template", "templateConstants", "TemplateField", "Table"],
angular.module("vManage").factory("VedgeOmpTemplate", VedgeOmpTemplate),
VedgeOmpTemplate.$inject = ["Template", "templateConstants", "TemplateField", "FeatureTemplateService", "appUtil"],
angular.module("vManage").factory("VedgeSecurityTemplate", VedgeSecurityTemplate),
VedgeSecurityTemplate.$inject = ["Template", "templateConstants", "TemplateField", "FeatureTemplateService", "MultiSelectService", "appUtil", "notification"],
angular.module("vManage").factory("VedgeSystemTemplate", VedgeSystemTemplate),
VedgeSystemTemplate.$inject = ["Template", "templateConstants", "notification", "appUtil", "Table"],
angular.module("vManage").factory("VedgeVpnInterfaceBridgeTemplate", VedgeVpnInterfaceBridgeTemplate),
VedgeVpnInterfaceBridgeTemplate.$inject = ["VedgeVpnInterfaceTemplate", "templateConstants", "appUtil", "notification"],
angular.module("vManage").factory("VedgeVpnInterfaceCellularTemplate", VedgeVpnInterfaceCellularTemplate),
VedgeVpnInterfaceCellularTemplate.$inject = ["VedgeVpnInterfaceTemplate", "templateConstants"],
angular.module("vManage").factory("VedgeVpnInterfaceGreTemplate", VedgeVpnInterfaceGreTemplate),
VedgeVpnInterfaceGreTemplate.$inject = ["Template", "TemplateField", "templateConstants", "appUtil", "notification"],
angular.module("vManage").factory("VedgeVpnInterfaceIpsecTemplate", VedgeVpnInterfaceIpsecTemplate),
VedgeVpnInterfaceIpsecTemplate.$inject = ["Template", "templateConstants", "TemplateField", "FeatureTemplateService", "appUtil", "notification", "Table"],
angular.module("vManage").factory("VedgeVpnInterfaceNatpoolTemplate", VedgeVpnInterfaceNatpoolTemplate),
VedgeVpnInterfaceNatpoolTemplate.$inject = ["VedgeVpnInterfaceTemplate", "templateConstants", "TemplateField", "FeatureTemplateService", "appUtil", "notification", "Table"],
angular.module("vManage").factory("VedgeVpnInterfacePppoeEnabledTemplate", VedgeVpnInterfacePppoeEnabledTemplate),
VedgeVpnInterfacePppoeEnabledTemplate.$inject = ["VedgeVpnInterfaceTemplate", "templateConstants"],
angular.module("vManage").factory("VedgeVpnInterfacePppoeTemplate", VedgeVpnInterfacePppoeTemplate),
VedgeVpnInterfacePppoeTemplate.$inject = ["VedgeVpnInterfaceTemplate", "templateConstants", "TemplateField", "appUtil", "notification"],
angular.module("vManage").factory("VedgeVpnInterfaceTemplate", VedgeVpnInterfaceTemplate),
VedgeVpnInterfaceTemplate.$inject = ["VpnInterfaceTemplate", "templateConstants", "TemplateField", "FeatureTemplateService", "appUtil", "notification", "Table"],
angular.module("vManage").factory("VedgeVpnInterfaceVapTemplate", VedgeVpnInterfaceVapTemplate),
VedgeVpnInterfaceVapTemplate.$inject = ["VedgeVpnInterfaceTemplate", "Template", "TemplateField", "templateConstants", "appUtil", "notification"],
angular.module("vManage").factory("VedgeVpnTemplate", VedgeVpnTemplate),
VedgeVpnTemplate.$inject = ["VpnTemplate", "templateConstants", "FeatureTemplateService", "TemplateField", "Table", "appUtil", "notification", "$state", "$filter", "DeviceTemplateService"],
angular.module("vManage").factory("VmanageVpnInterfaceTemplate", VmanageVpnInterfaceTemplate),
VmanageVpnInterfaceTemplate.$inject = ["VsmartVpnInterfaceTemplate"],
angular.module("vManage").factory("VpnInterfaceTemplate", VpnInterfaceTemplate),
VpnInterfaceTemplate.$inject = ["Template", "templateConstants", "TemplateField", "FeatureTemplateService", "Table", "appUtil", "$state", "$filter", "notification", "DeviceTemplateService", "DeviceTemplateHttpService"],
angular.module("vManage").factory("VpnTemplate", VpnTemplate),
VpnTemplate.$inject = ["Template", "templateConstants", "TemplateField", "Table", "appUtil", "$mdDialog"],
angular.module("vManage").factory("VsmartSecurityTemplate", VsmartSecurityTemplate),
VsmartSecurityTemplate.$inject = ["Template", "templateConstants", "TemplateField", "FeatureTemplateService"],
angular.module("vManage").factory("VsmartVpnInterfaceTemplate", VsmartVpnInterfaceTemplate),
VsmartVpnInterfaceTemplate.$inject = ["VpnInterfaceTemplate", "templateConstants", "TemplateField", "FeatureTemplateService", "notification"],
angular.module("vManage").factory("VsmartVpnTemplate", VsmartVpnTemplate),
VsmartVpnTemplate.$inject = ["VpnTemplate", "FeatureTemplateService", "templateConstants", "notification", "$state", "$filter", "DeviceTemplateService"],
angular.module("vManage").factory("WLANTemplate", WLANTemplate),
WLANTemplate.$inject = ["Template", "TemplateField", "templateConstants", "appUtil", "notification"],
angular.module("vManage").controller("TemplateController", TemplateController),
TemplateController.$inject = ["$scope", "$state", "appUtil", "Tab", "adminService"],
angular.module("vManage").factory("TemplateDeviceInput", TemplateDeviceInput),
TemplateDeviceInput.$inject = ["$templateCache", "appUtil", "notification", "DeviceTemplateHttpService", "$interval", "$q"],
angular.module("vManage").controller("dashboardController", dashboardController),
dashboardController.$inject = ["appUtil", "$scope", "$state", "rbac", "adminService", "$filter", "notification"],
function() {
    function a() {
        var a = {}
          , b = function(b, c) {
            if (angular.isDefined(a[b]) && angular.isDefined(a[b].callbacks))
                for (var d = 0; d < a[b].callbacks.length; d++)
                    a[b].callbacks[d](c)
        }
          , c = function(b, c) {
            angular.isDefined(a[b]) || (a[b] = {}),
            angular.isDefined(a[b].callbacks) || (a[b].callbacks = []),
            a[b].callbacks.push(c)
        };
        return {
            subscribe: c,
            publish: b
        }
    }
    angular.module("vManage").service("DashboardManagerCommunicationService", a),
    a.$inject = []
}(),
function() {
    function a(a, b, c) {
        var d = this;
        b.$on("gridster-resized", function() {
            d.dashboardInstance.setContainerWidth(a.width()),
            d.dashboardInstance.setContainerHeight(a.height()),
            d.dashboardInstance.computeRowHeight()
        }),
        d.$onInit = function() {
            d.dashboardInstance.setContainerWidth(a.width()),
            d.dashboardInstance.setContainerHeight(a.height()),
            d.dashboardInstance.computeRowHeight()
        }
    }
    a.$inject = ["$element", "$scope", "$timeout"],
    angular.module("vManage").component("dashboardManager", {
        templateUrl: "app/dashboard/dashboardManager/dashboardManager.html",
        bindings: {
            dashboardInstance: "<"
        },
        controller: a,
        controllerAs: "dashboardManagerCtrl"
    })
}(),
function() {
    function a(a, b) {
        var c = {
            gridsterObj: {
                width: "auto",
                rowHeight: 100,
                margins: [10, 10],
                columns: 1,
                minColumns: 1,
                outerMargin: !0,
                pushing: !1,
                floating: !1,
                mobileModeEnabled: !1,
                draggable: {
                    enabled: !1
                },
                resizable: {
                    enabled: !1
                }
            },
            containerWidth: 0,
            containerHeight: 0,
            serverCallInProgress: !1
        }
          , d = function(a) {
            this.options = angular.merge({}, c, a)
        };
        return d.prototype.refresh = function() {
            angular.forEach(this.widgets, function(a) {
                a.refresh()
            })
        }
        ,
        d.prototype.addWidgets = function(c) {
            angular.forEach(c, function(c) {
                var d = c.className;
                if (angular.isDefined(d)) {
                    var e = b.get(d);
                    angular.isDefined(e) && "function" == typeof e && (c.classInstance = new e)
                } else
                    c.classInstance = new a,
                    angular.isDefined(c.templateStr) && c.classInstance.setTemplateString(c.templateStr)
            }),
            this.widgets = c
        }
        ,
        d.prototype.setContainerWidth = function(a) {
            this.options.containerWidth = a
        }
        ,
        d.prototype.setContainerHeight = function(a) {
            this.options.containerHeight = a
        }
        ,
        d.prototype.computeRowHeight = function() {
            var a = 0
              , b = 0
              , c = this.options.containerHeight > 0 ? this.options.containerHeight : angular.element("#" + this.options.id).height()
              , d = this.options.containerWidth > 0 ? this.options.containerWidth : angular.element("#" + this.options.id).width();
            a = this.options.customGridsterObj.rowHeightInPercentage * (c - this.options.customGridsterObj.marginBetweenWidgets - this.options.customGridsterObj.bufferForGridHeight),
            a > 0 && (this.options.gridsterObj.rowHeight = a > this.options.customGridsterObj.minRowHeight ? a : this.options.customGridsterObj.minRowHeight),
            b = d > this.options.customGridsterObj.minContainerWidth ? "auto" : this.options.customGridsterObj.minColWidth,
            this.options.gridsterObj.colWidth = b
        }
        ,
        d.prototype.setRowHeight = function(a) {
            this.options.gridsterObj.rowHeight = a
        }
        ,
        d
    }
    angular.module("vManage").factory("DashboardManager", a),
    a.$inject = ["Widget", "$injector"]
}(),
angular.module("vManage").controller("crashDetailsController", crashDetailsController),
crashDetailsController.$inject = ["appUtil", "$scope", "$state", "tenantDashboardService", "$window", "selectedRow", "$mdDialog"],
angular.module("vManage").factory("DashboardChartData", DashboardChartData),
DashboardChartData.$inject = ["$filter", "$log", "$timeout", "tenantDashboardService", "notification", "appUtil"],
angular.module("vManage").directive("dashboardWidget", dashboardWidget),
dashboardWidget.$inject = ["appUtil", "$state", "$compile", "Table", "tenantDashboardService", "$templateCache", "$http", "$window", "responsiveContentHeight", "rbac", "eventPoll", "eventListObject", "LineChart", "HighStockBarChart", "$q", "TransportHealthComponentsService", "$timeout", "AppRouteStatsTunnelService"],
angular.module("vManage").directive("deviceHealthProgress", deviceHealthProgress),
deviceHealthProgress.$inject = ["$compile", "colorConstants", "$timeout"],
angular.module("vManage").controller("TenantDashboardController", TenantDashboardController),
TenantDashboardController.$inject = ["appUtil", "$scope", "$rootScope", "$state", "TenantDashboardFactory", "licenses", "$modal", "rbac", "tenantDashboardService"],
function() {
    function a(a, b, c, d, e, f) {
        function g(a) {
            a.queryBuilderViewObj = {},
            a.queryBuilderViewObj.buttonLayoutObj = {
                layoutClass: "actionButtonLayout",
                filterIconClass: "filter_list",
                filterButtonTitle: "",
                showDropDownIcon: !1
            }
        }
        var h = {
            popup: !0
        }
          , i = function(a) {
            this.widgets = [],
            this.options = angular.extend({}, h, a)
        };
        i.prototype.addWidget = function(a) {
            var b = this
              , c = {
                name: "New Widget",
                sizeX: 1,
                sizeY: 1,
                modalWidgetDataUrl: "",
                widgetData: [],
                template: "",
                templateUrl: "",
                handleNoAPIResponse: [],
                refreshInProgress: !1,
                currentWidgetAPIParams: "",
                dashboardWidgetEventObj: {}
            }
              , d = angular.extend({}, c, a);
            "transportHealth" !== d.name && "topApplications" !== d.name && (angular.isDefined(d.widgetAPIParams) ? b.getContainerData(b.widgets.length, d.widgetAPI, d.widgetAPIParams) : b.getContainerData(b.widgets.length, d.widgetAPI)),
            b.widgets.push(d)
        }
        ,
        i.prototype.setContainerDataUrl = function(a) {
            this.containerDataUrl = a
        }
        ;
        var j = function(a) {
            var b = a.data[0].count;
            return angular.forEach(a.data[0].statusList, function(a) {
                a.value = parseFloat(a.count / b * 100).toFixed(2),
                a.name = a.name.replace("WAN ", ""),
                a.status.toLowerCase().indexOf("up") > -1 ? a.type = "success" : a.status.toLowerCase().indexOf("down") > -1 ? a.type = "danger" : a.type = "warning"
            }),
            a
        }
          , k = function(a, b) {
            angular.isDefined(a.widgets) && a.widgets.length > 0 && angular.isDefined(a.widgets[b]) && (a.widgets[b].refreshInProgress = !0)
        }
          , l = function(a, b) {
            angular.isDefined(a.widgets) && a.widgets.length > 0 && angular.isDefined(a.widgets[b]) && (a.widgets[b].refreshInProgress = !1)
        };
        return i.prototype.getContainerData = function(a, c, d) {
            var e = this;
            angular.isDefined(d) && "" !== d ? (k(e, a),
            b[c](d).then(function(b) {
                e.widgets[a].widgetData = b,
                l(e, a)
            }, function(b) {
                e.widgets[a].handleNoAPIResponse.push(b),
                l(e, a)
            })) : (k(e, a),
            b[c]().then(function(b) {
                "getSiteHealth" === c && (b = j(b)),
                e.widgets[a].widgetData = b,
                l(e, a)
            }, function(b) {
                e.widgets[a].handleNoAPIResponse.push(b),
                l(e, a)
            }))
        }
        ,
        i.prototype.getWidgetIndex = function(a) {
            var b, c = -1;
            return angular.forEach(this.widgets, function(d) {
                c++,
                d.name === a.name && (b = c)
            }),
            b
        }
        ,
        i.prototype.getWidgetTitle = function(a) {
            var b = ""
              , c = this;
            return c.isChartWidget(a) ? angular.isDefined(a.widgetData.title) && "" !== a.widgetData.title && (b = a.widgetData.title) : c.isTableWidget(a) ? angular.isDefined(a.widgetData.header) && angular.isDefined(a.widgetData.header.title) && "" !== a.widgetData.header.title && (b = a.widgetData.header.title) : angular.isDefined(a.widgetData.header) && angular.isDefined(a.widgetData.header.title) && "" !== a.widgetData.header.title && (b = a.widgetData.header.title),
            "" === b && angular.isDefined(a.title) && (b = a.title),
            b
        }
        ,
        i.prototype.isChartWidget = function(a) {
            return !("chart" !== a.type || !angular.isDefined(a.widgetData.dataSource))
        }
        ,
        i.prototype.isTableWidget = function(a) {
            return !("table" !== a.type || !angular.isDefined(a.widgetData.header) || !angular.isDefined(a.widgetData.header.columns))
        }
        ,
        i.prototype.updateWidgetData = function(a) {}
        ,
        i.prototype.loadVPNList = function(c, d) {
            b.getVPNList().then(function(a) {
                a.vedge.length > 0 && (d.push(c),
                angular.forEach(a.vedge, function(a) {
                    var b = {};
                    b.value = "VPN - " + a,
                    b.key = a,
                    d.push(b)
                }))
            }, function(b) {
                a.error("Encountered error while retrieving VPN List : " + b)
            })
        }
        ,
        i.prototype.refreshTopApplicationsData = function(a, d) {
            var e, f = a, g = this, h = g.getWidgetIndex(f);
            e = "dpi" === d ? b.getTopApplicationsDPIQueryURL() : b.getTopApplicationsCFLOWDQueryURL(),
            k(g, h),
            c.get(e).then(function(a) {
                var b = _.find(a.header.fields, {
                    property: "total_bytes"
                });
                angular.isDefined(b) && (b.display = "Total Bytes"),
                g.widgets[h].widgetData = a,
                l(g, h)
            }, function(a) {
                g.widgets[h].handleNoAPIResponse.push(a),
                l(g, h)
            })
        }
        ,
        i.prototype.refreshAppAwareRouting = function(a, b) {
            var c = a
              , d = this.getWidgetIndex(c);
            this.getContainerData(d, c.widgetAPI, b)
        }
        ,
        i.prototype.refreshWidget = function(a, b) {
            var c = a
              , d = this
              , e = this.getWidgetIndex(c);
            "topApplications" === a.name ? d.refreshTopApplicationsData(a, b.defaultWidgetToggleState) : "transportHealth" === a.name ? d.refreshTransportHealth(a, b.transportHealthFilterSelected.key) : "appRouteStats" === a.name ? d.refreshAppAwareRouting(a, b.routingFilterSelected.key) : this.getContainerData(e, c.widgetAPI)
        }
        ,
        i.prototype.refreshTransportHealth = function(a, d) {
            var e, g = a, h = this, i = h.getWidgetIndex(g);
            if (e = b.getTransportHealthQueryURL(),
            angular.isDefined(e)) {
                e = "loss" !== d ? e.replace(f.DEFAULT_FEATURE_NAME, d) : e.replace(f.DEFAULT_FEATURE_NAME, "loss_percentage");
                var g = a
                  , h = this
                  , i = h.getWidgetIndex(g);
                k(h, i),
                c.get(e).then(function(a) {
                    h.widgets[i].widgetData = a,
                    l(h, i)
                }, function(a) {
                    h.widgets[i].handleNoAPIResponse.push(a),
                    l(h, i)
                })
            } else
                h.widgets[i].handleNoAPIResponse.push()
        }
        ,
        i.prototype.getQueryBuilderOverrideConfig = function(a) {
            return {
                autoLoadFields: !1,
                fieldCustomizationsForDataTypeURL: [{
                    property: "vpn_id",
                    enable: !0,
                    addAllForFieldTypeURL: !0,
                    appendStringToTheList: !0,
                    stringVal: "VPN"
                }],
                searchCallBack: a,
                isDynamicQuery: !0,
                renderViewAfterInitComplete: !0,
                enableFilteredTags: !1
            }
        }
        ,
        i.prototype.initializeQueryBuilderForTransportHealth = function(a) {
            var c, e = this, h = a.widget;
            a.showQueryBuilderTimeStampInbuilt = !0,
            a.searchCallBack = function(d) {
                var g = a.queryBuilderObj_transportHealth.getQueryStringFromQueryObject(d);
                c = b.getTransportHealthAPI(f.DEFAULT_FEATURE_NAME);
                var i = a.queryBuilderObj_transportHealth.appendQueryString(c, g);
                a.transportHealthQueryURL = i,
                b.setTransportHealthQueryURL(i);
                var j = a.queryBuilderObj_transportHealth.getComponents();
                b.setTransportHealthComponentsData(j),
                e.refreshTransportHealth(h, a.transportHealthFilterSelected.key)
            }
            ;
            var i = {
                autoLoadFields: !1,
                searchCallBack: a.searchCallBack,
                isDynamicQuery: !0,
                renderViewAfterInitComplete: !0,
                enableFilteredTags: !1
            };
            a.queryBuilderObj_transportHealth = new d(i),
            g(a)
        }
        ,
        i.prototype.initializeQueryBuilderForDPI = function(a) {
            var c = this
              , e = a.widget;
            a.showQueryBuilderTimeStampInbuilt = !0,
            a.searchCallBackForDPI = function(d) {
                var f = a.queryBuilderObjForDPI.getQueryStringFromQueryObject(d)
                  , g = a.queryBuilderObjForDPI.appendQueryString(b.getAPIForTopApplications("dpi"), f)
                  , h = a.queryBuilderObjForDPI.getComponents();
                b.setTopApplicationsDPIComponentsData(h),
                b.setTopApplicationsDPIQueryURL(g),
                c.refreshTopApplicationsData(e, "dpi")
            }
            ,
            a.viewport = "applicationOverView",
            g(a),
            a.queryBuilderObjForDPI = new d(c.getQueryBuilderOverrideConfig(a.searchCallBackForDPI))
        }
        ,
        i.prototype.initializeQueryBuilderForCFLOWD = function(a) {
            var c = this
              , e = a.widget;
            a.showQueryBuilderTimeStampInbuilt = !0,
            a.searchCallBackForCFLOWD = function(d) {
                var f = a.queryBuilderObjForCFLOWD.getQueryStringFromQueryObject(d)
                  , g = a.queryBuilderObjForCFLOWD.appendQueryString(b.getAPIForTopApplications("cflowd"), f)
                  , h = a.queryBuilderObjForCFLOWD.getComponents();
                b.setTopApplicationsCFLOWDComponentsData(h),
                b.setTopApplicationsCFLOWDQueryURL(g),
                c.refreshTopApplicationsData(e, "cflowd")
            }
            ,
            a.viewport = "cflowdDeviceOverView",
            g(a),
            a.queryBuilderObjForCFLOWD = new d(c.getQueryBuilderOverrideConfig(a.searchCallBackForCFLOWD))
        }
        ,
        i
    }
    angular.module("vManage").factory("TenantDashboardFactory", a),
    a.$inject = ["$log", "tenantDashboardService", "restService", "QueryBuilderFactory", "TransportHealthComponentsService", "TransportHealthConstants"]
}(),
angular.module("vManage").factory("tenantDashboardService", tenantDashboardService),
tenantDashboardService.$inject = ["restService", "$q", "$log", "responsiveContentHeight"],
angular.module("vManage").factory("DashboardModalFactory", DashboardModalFactory),
DashboardModalFactory.$inject = ["TenantDashboardFactory", "tenantDashboardService", "Table", "DeviceActionDropDownFactory", "$q", "$mdDialog", "$timeout", "appUtil", "DPIApplicationOverViewComponentsService", "CFLOWDDeviceOverViewComponentsService", "$log", "notification", "responsiveContentHeight"],
function() {
    function a(a, b, c, d) {
        a.modalStateString = "dashboard_modal_appRoute",
        a.selectedTunnels = [a.tunnelEndPointName],
        a.isCurrentViewTabular = !1,
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        };
        var e = c.getChartConfig("loss");
        a.appRouteLossChartObject = new b(e[0],e[1]),
        e = c.getChartConfig("latency"),
        a.appRouteLatencyChartObject = new b(e[0],e[1]),
        e = c.getChartConfig("jitter"),
        a.appRouteJitterChartObject = new b(e[0],e[1]),
        c.initializeQueryBuilder(a),
        c.getAppRouteFieldsData(a.selectedTunnels).then(function(b) {
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }, c.responseErrorHandler)
    }
    angular.module("vManage").controller("StatisticsAppRouteTunnelController", a),
    a.$inject = ["$scope", "LineChart", "AppRouteStatsTunnelService", "$timeout"];
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h, i = "dataservice/statistics/approute", j = [], k = "/dataservice/statistics/approute/query/fields", l = ["entry_time", "loss_percentage", "latency", "jitter", "name"], m = {
            xAxis: ["entry_time"],
            yAxis: ["loss_percentage", "latency", "jitter"],
            series: ["name-hostname"]
        };
        return {
            getChartConfig: function(a) {
                var b, c, d, e, f;
                switch (a) {
                case "loss":
                    d = a.capitalizeGivenLetter(0),
                    e = "%",
                    f = "loss_percentage";
                    break;
                case "latency":
                case "jitter":
                    d = a.capitalizeGivenLetter(0),
                    e = "ms",
                    f = a;
                    break;
                case "tx_octets":
                case "rx_octets":
                    d = "Octects",
                    f = a
                }
                return b = {
                    name: a,
                    zoom: !0,
                    filtersSelected: {
                        xAxis: ["entry_time"],
                        yAxis: [f],
                        series: ["tunnelName"]
                    }
                },
                angular.isDefined(e) && e.length > 0 ? b.yAxisUnit = e : b.formatDataToBytes = !0,
                c = {
                    title: {
                        text: ""
                    },
                    xAxis: {
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: ""
                        }
                    },
                    yAxis: {
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: d
                        }
                    }
                },
                "loss" === a && (c.yAxis.max = 100),
                [b, c]
            },
            setTopPerformingTunnels: function(a) {
                j.reset(),
                _.each(a, function(a) {
                    angular.isDefined(a) && j.push(a.name)
                })
            },
            getTopPerformingTunnels: function() {
                return j
            },
            getAppRouteChartAPIURL: function() {
                return i
            },
            appendFieldsToQuery: function(a) {
                return a.fields = angular.copy(l),
                a
            },
            attachChartHeader: function(a) {
                a.header.chart = m
            },
            getAppRouteFieldsData: function(a) {
                var d = b.defer();
                return angular.isDefined(h) ? d.resolve(h) : c.get(k).then(function(b) {
                    var c = []
                      , e = angular.copy(b.data)
                      , f = _.findIndex(e, {
                        property: "vdevice_name"
                    });
                    f > -1 && e.splice(f, 1),
                    angular.forEach(a, function(a) {
                        c.push({
                            key: a,
                            value: a
                        })
                    }),
                    e.push({
                        property: "name",
                        fieldData: {
                            type: "enum"
                        },
                        name: "Tunnel Name",
                        isRequired: !1,
                        multiSelect: !0,
                        isHidden: !0,
                        options: c,
                        defaultValue: a[0]
                    }),
                    d.resolve(e)
                }, function(a) {
                    d.reject(a)
                }),
                d.promise
            },
            responseErrorHandler: function(a) {
                angular.isObject(a) && f.checkNestedProperty(a, "error", "details") ? (e.error("Error occurred while retrieving data: " + a.error.message + ":" + a.error.details),
                d.error(a.error.message + ": " + a.error.details)) : (e.info("API error response needs to be updated to conform to company guidelines"),
                d.error("Error occurred while retrieving data."))
            },
            initializeQueryBuilder: function(b) {
                var d, e, f, h = this;
                b.searchCallBack = function(a) {
                    h.appendFieldsToQuery(a);
                    var f = b.queryBuilderObj.getQueryStringFromQueryObject(a);
                    e = h.getAppRouteChartAPIURL(),
                    d = b.queryBuilderObj.appendQueryString(e, f),
                    c.get(d).then(function(a) {
                        var c = _.find(a.header.columns, {
                            property: "name"
                        });
                        c && (c.enableHostName = !0,
                        c.hostValueType = "tunnel",
                        a.header.fields.push({
                            property: "name-hostname",
                            dataType: "string"
                        }),
                        a.data = g.convertToHostname(a.header.columns, a.data)),
                        h.attachChartHeader(a),
                        b.appRouteLossChartObject.updateChartAPIData(a),
                        b.appRouteLatencyChartObject.updateChartAPIData(a),
                        b.appRouteJitterChartObject.updateChartAPIData(a)
                    }, h.responseErrorHandler)
                }
                ,
                f = {
                    autoLoadFields: !1,
                    searchCallBack: b.searchCallBack,
                    isDynamicQuery: !0,
                    enableFilteredTags: !0,
                    renderViewAfterInitComplete: !0
                },
                b.queryBuilderObj = new a(f),
                b.queryBuilderViewObj = {},
                b.queryBuilderViewObj.buttonLayoutObj = {
                    layoutClass: "actionButtonLayout",
                    filterIconClass: "filter_list",
                    filterButtonTitle: "Filter",
                    showDropDownIcon: !0
                }
            }
        }
    }
    angular.module("vManage").factory("AppRouteStatsTunnelService", a),
    a.$inject = ["QueryBuilderFactory", "$q", "restService", "notification", "$log", "appUtil", "DeviceListCache"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        function j(b, c) {
            var d;
            b ? (angular.isDefined(c) && angular.isDefined(c.name) && (a.selectedChartColumn = c.name),
            d = _.filter(a.masterCopyOfTableData, "range", a.selectedChartColumn)) : (d = angular.copy(a.masterCopyOfTableData),
            a.selectedChartColumn = void 0),
            a.tlocPercentageUtilTableObj.setTableData(d),
            a.tlocPercentageUtilTableObj.uiGridApi.core.notifyDataChange("edit")
        }
        function k(c) {
            var d = {};
            d.data = _.map(c.distribution, function(a, b) {
                return {
                    category: b,
                    count: a
                }
            }),
            a.tlocPercentageUtilChartObj.emptyAllSeriesData(),
            a.tlocPercentageUtilChartObj.addCategoriesFromRawData([{
                name: "distribution",
                display: "Distribution",
                type: "column"
            }], p, d),
            a.tlocPercentageUtilTableObj.setDataUrl(b.getPercentageUtilURL()),
            a.tlocPercentageUtilTableObj.taggedSearchObject.setSearchCache(c.data),
            a.tlocPercentageUtilTableObj.createColumns(b.getTableAPIHeader()),
            a.tlocPercentageUtilTableObj.setTableData(c.data),
            a.masterCopyOfTableData = c.data,
            0 != a.tlocPercentageUtilTableObj.taggedSearchObject.getSearchTagsCache().length && a.tlocPercentageUtilTableObj.taggedSearchObject.searchData()
        }
        function l(c) {
            angular.isDefined(c) && angular.isDefined(c.error) && f.error(c.error.message + ":" + c.error.details);
            ({
                header: b.getChartAPIHeader(),
                data: []
            });
            a.tlocPercentageUtilChartObj.emptyAllSeriesData(),
            a.tlocPercentageUtilChartObj.addCategoriesFromRawData([{
                name: "distribution",
                display: "Distribution",
                type: "column"
            }], p, [])
        }
        var m, n, o, p, q = !1;
        a.modalStateString = "dashboard_modal_tloc_percentage_util";
        var r = g.computeTableHeightOffset("shareModalHorizontally", 70);
        a.$on("windowResizeEvent", function() {
            a.tlocPercentageUtilTableObj.options.tableHeightOffset = g.computeTableHeightOffset("shareModalHorizontally", 70)
        }),
        o = function() {
            angular.isDefined(a.selectedChartColumn) && j(a.selectedChartColumn)
        }
        ,
        a.tlocPercentageUtilTableObj = new e({
            autoLoad: !0,
            columnResizing: !0,
            enableSorting: !0,
            rowHeight: 40,
            tableHeightOffset: r
        }),
        a.tlocPercentageUtilTableObj.setToolbar({
            addRow: !1,
            search: !0,
            rowCount: !0,
            refresh: !0
        }),
        a.tlocPercentageUtilTableObj.setOnRefreshCallback(o),
        n = {
            showChangeHistoryChart: function(b) {
                a.showChartHistory = !0,
                a.vDeviceName = b.entity.vdevice_name,
                a.interfaceName = b.entity.interface
            },
            getRangeClass: function(a) {
                return a > 100 ? "worse" : a > 74 && a < 101 ? "bad" : a > 49 && a < 75 ? "average" : a > 25 && a < 50 ? "above-average" : a > 0 && a < 25 ? "good" : void 0
            }
        },
        a.tlocPercentageUtilTableObj.setAppScope(n),
        a.showChartHistory = !1,
        a.closeModal = function() {
            c.hide()
        }
        ,
        a.changeView = function() {
            a.showChartHistory = !1
        }
        ,
        a.utilizationClickHandler = function(b) {
            var c = angular.isDefined(b.point) ? b.point : b.target
              , d = c.selected;
            q ? q = !1 : a.$broadcast("chartCategoryLegendToggled", {
                name: c.name,
                selected: d
            }),
            a.tlocPercentageUtilTableObj.taggedSearchObject.clearSearchCache(),
            j(d, c)
        }
        ,
        a.removeLegendHandler = function(b) {
            var c = a.tlocPercentageUtilChartObj.chartConfig.getHighcharts();
            if (angular.isDefined(c.series)) {
                var d = _.findIndex(c.series[0].points, {
                    name: b.legendConfig.displayName
                });
                angular.isDefined(d) && d > -1 && c.series[0].points[d].remove()
            } else
                i.error("highChartApi series not found")
        }
        ,
        a.toggleLegendHandler = function(b) {
            var c = a.tlocPercentageUtilChartObj.chartConfig.getHighcharts();
            if (angular.isDefined(c.series)) {
                q = !0;
                var d = _.findIndex(c.series[0].points, {
                    name: b.legendConfig.displayName
                });
                angular.isDefined(d) && d > -1 && c.series[0].points[d].select()
            }
        }
        ,
        m = b.getChartConfig(a.utilizationClickHandler),
        a.tlocPercentageUtilChartObj = new d(m[0],m[1]),
        a.tlocPercentageUtilChartObj.setXAxisProperty("category"),
        a.tlocPercentageUtilChartObj.setYAxisProperty(["count"]),
        a.tlocPercentageUtilChartObj.setSeriesNames([{
            property: "distribution",
            values: []
        }]),
        p = b.getChartCategories(),
        a.tlocPercentageUtilChartObj.changeLoadingIndicatorState(!0),
        b.getPercentageUtilData().then(k, l),
        a.$on("$destroy", function() {
            a.tlocPercentageUtilChartObj = void 0
        })
    }
    angular.module("vManage").controller("TlocPercentageUtilizationController", a),
    a.$inject = ["$scope", "TlocPercentageUtilizationService", "$mdDialog", "HighStockBarChart", "Table", "notification", "tenantDashboardService", "$timeout", "$log"]
}(),
function() {
    function a(a) {
        var b = "dataservice/statistics/interface/ccapacity/distribution"
          , c = {
            property: "category",
            names: [{
                name: ">100",
                display: ">100"
            }, {
                name: "75-100",
                display: "75-100"
            }, {
                name: "50-75",
                display: "50-75"
            }, {
                name: "25-50",
                display: "25-50"
            }, {
                name: "0-25",
                display: "0-25"
            }, {
                name: "uncategorized",
                display: "uncategorized"
            }]
        };
        return {
            getPercentageUtilData: function(c, d) {
                return a.get(b)
            },
            getPercentageUtilURL: function() {
                return b
            },
            getChartAPIHeader: function() {
                return {
                    chart: {
                        xAxis: ["distribution"],
                        yAxis: ["count"],
                        series: [""]
                    },
                    fields: [{
                        property: "distribution",
                        dataType: "string"
                    }, {
                        property: "value",
                        dataType: "number"
                    }]
                }
            },
            getChartCategories: function() {
                return c
            },
            getTableAPIHeader: function() {
                return [{
                    title: "Hostname",
                    property: "vdevice_name",
                    width: 110,
                    dataType: "string",
                    enableHostName: !0,
                    hostValueType: "ip"
                }, {
                    title: "Interface",
                    property: "interface",
                    width: 100,
                    dataType: "string"
                }, {
                    property: "up-stream",
                    title: "Upstream (%)",
                    dataType: "string",
                    isDisplay: !0,
                    width: 250,
                    cellTemplate: "<div data-ng-if='row.entity.range===\"uncategorized\"' class='ui-grid-cell-contents'>--</div><div data-ng-if='row.entity.range!==\"uncategorized\"' class='tloc-upstream'>Average: <span data-ng-class='grid.appScope.getRangeClass(row.entity.avg_up_capacity_percentage)'>{{row.entity.avg_up_capacity_percentage | number : 2}}</span> | Low: <span>{{row.entity.min_up_capacity_percentage | number : 2}}</span>, High: <span>{{row.entity.max_up_capacity_percentage | number : 2}}</span></div>"
                }, {
                    property: "down-stream",
                    title: "Downstream (%)",
                    dataType: "string",
                    isDisplay: !0,
                    width: 250,
                    cellTemplate: "<div data-ng-if='row.entity.range===\"uncategorized\"' class='ui-grid-cell-contents'>--</div><div data-ng-if='row.entity.range!==\"uncategorized\"' class='tloc-upstream'>Average: <span data-ng-class='grid.appScope.getRangeClass(row.entity.avg_down_capacity_percentage)'>{{row.entity.avg_down_capacity_percentage | number : 2}}</span> | Low: <span>{{row.entity.min_down_capacity_percentage | number : 2}}</span>, High: <span>{{row.entity.max_down_capacity_percentage | number : 2}}</span></div>"
                }, {
                    name: "utilization-icon",
                    displayName: "Bandwidth Utilization",
                    dataType: "string",
                    width: "100",
                    cellTemplate: "<div class='chartIcon'><span id='view_change_history' data-ng-class=\"{'disabled': row.entity.range==='uncategorized'}\" ng-click='row.entity.range!==\"uncategorized\"?grid.appScope.showChangeHistoryChart(row): undefined'><md-icon class='material-icons blue'>trending_up</md-icon></span></div>"
                }]
            },
            getChartConfig: function(a) {
                var b = {
                    name: "tlocPercentageUtil",
                    zoom: !0,
                    seriesClickHandler: a,
                    autoLoad: !0
                }
                  , d = {
                    options: {
                        plotOptions: {
                            series: {
                                colorByPoint: !0
                            },
                            column: {
                                colors: ["#FF6E56", "#FF9D56", "#FFC856", "#A7BE5F", "#6BAC5E", "#C2C3C6"],
                                allowPointSelect: !0
                            }
                        },
                        tooltip: {
                            formatter: function() {
                                var a = "";
                                return a += "<b>" + this.points[0].key + "<b><br/>",
                                a += '<span style="color:' + this.points[0].color + '">■    </span>',
                                a += "<span>count:  </span>",
                                a += "<span>" + this.y + "</span>",
                                a += "<br/>"
                            }
                        }
                    },
                    title: {
                        text: ""
                    },
                    xAxis: {
                        type: "category",
                        labels: {
                            enabled: !0,
                            formatter: function() {
                                return c.names[this.value].display
                            }
                        },
                        title: {
                            text: "TLOC Utilization Distribution (%)"
                        }
                    },
                    yAxis: {
                        type: "linear",
                        minorTickInterval: void 0,
                        tickInterval: void 0,
                        lineWidth: 1,
                        gridLineWidth: 1,
                        labels: {
                            enabled: !0,
                            formatter: function() {
                                return this.value
                            }
                        },
                        title: {
                            text: "Interface Count"
                        },
                        visible: !0
                    }
                };
                return [b, d]
            }
        }
    }
    angular.module("vManage").factory("TlocPercentageUtilizationService", a),
    a.$inject = ["restService"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        var g = this
          , h = [{
            name: "upCapacity",
            display: "Upstream"
        }, {
            name: "downCapacity",
            display: "Downstream"
        }]
          , i = a.getChartConfig();
        g.modalStateString = "dashboard_modal_tloc_util_history",
        g.chartObj = new b(i[0],i[1]),
        g.chartObj.setXAxisProperty("entry_time"),
        g.chartObj.setYAxisProperty(["value"]),
        g.chartObj.setSeriesNames({
            property: "name",
            values: []
        }),
        g.breadcrumbStates = [{
            name: "percent_utilization",
            title: "Percentage Utilization"
        }, {
            name: "bandwidth utilization",
            title: "BandWidth Utilization"
        }],
        console.log("TlocUtilHistoryController"),
        g.chartObj.changeLoadingIndicatorState(!0),
        a.getChartData(g.vDeviceName, g.interfaceName).then(function(b) {
            g.chartObj.changeLoadingIndicatorState(!1);
            var c = b;
            g.chartObj.addSeriesFromRawData(h, c),
            a.getUserConfiguredData(g.vDeviceName, g.interfaceName).then(function(a) {
                var b = _.find(a.data, {
                    ifname: g.interfaceName
                });
                if (angular.isDefined(b)) {
                    var d = 0
                      , e = 0
                      , f = []
                      , h = function(a) {
                        if (0 == a)
                            return "0kbps";
                        var b = ["Kbps", "Mbps", "Gbps", "Tbps", "Pbps"]
                          , c = Math.floor(Math.log(a) / Math.log(1024))
                          , d = parseFloat((a / Math.pow(1024, Math.floor(c))).toFixed(2));
                        return c = c < 0 ? -c : c,
                        d += " " + b[c]
                    }
                      , i = parseFloat(b["bandwidth-downstream"])
                      , j = parseFloat(b["bandwidth-upstream"]);
                    angular.isDefined(i) && !isNaN(i) && (f.push({
                        value: i,
                        color: "#bc80bd",
                        dashStyle: "shortdash",
                        width: 2,
                        label: {
                            text: "Bandwidth downstream configured - " + h(b["bandwidth-downstream"])
                        },
                        id: "plot-line-1"
                    }),
                    d = i),
                    angular.isDefined(j) && !isNaN(j) && (f.push({
                        value: parseInt(j),
                        color: "#8dd3c7",
                        dashStyle: "shortdash",
                        width: 2,
                        label: {
                            text: "Bandwidth upstream configured - " + h(b["bandwidth-upstream"]),
                            y: 12
                        },
                        id: "plot-line-2"
                    }),
                    j > d && (d = j)),
                    angular.isDefined(d) && d > 0 && ($.each(c, function(a, b) {
                        var c = Math.max(b.rx_kbps, b.tx_kbps);
                        angular.isDefined(c) && c > e && (e = c)
                    }),
                    d > e && g.chartObj.highChartApi.yAxis[0].update({
                        max: d + 5
                    })),
                    g.chartObj.highChartApi.yAxis[0].update({
                        plotLines: f
                    })
                }
            }, function() {
                f.error("API failed. Failed to plot user configured bandwidth information")
            })
        }, function() {
            g.chartObj.changeLoadingIndicatorState(!1),
            g.chartObj.addSeriesFromRawData(h, []),
            f.error("API failed.")
        }),
        g.closeClickHandler = function() {
            g.closeModal()
        }
        ,
        g.changeViewHandler = function() {
            g.changeView()
        }
    }
    a.$inject = ["TlocUtilHistoryService", "HighStockLineChart", "notification", "$q", "$timeout", "$log"],
    angular.module("vManage").component("tlocUtilHistory", {
        templateUrl: "app/dashboard/tenantDashboard/widgetDetails/widgetDetailsComponents/tlocUtilizationPercentage/tlocUtilHistory/tlocUtilHistoryTemplate.html",
        bindings: {
            interfaceName: "<",
            vDeviceName: "<",
            modalWidgetTitle: "<",
            closeModal: "&",
            changeView: "&"
        },
        controller: a,
        controllerAs: "tlocUtilHistoryCtrl"
    })
}(),
function() {
    function a(a, b, c) {
        function d(a) {
            return _.map(a, function(a, b, c) {
                var d = angular.copy(a);
                angular.extend(d, {
                    name: "upCapacity",
                    value: parseFloat(d.tx_kbps).toFixed(2)
                }),
                c[b] = d,
                angular.extend(a, {
                    name: "downCapacity",
                    value: parseFloat(a.rx_kbps).toFixed(2)
                }),
                c.push(a)
            }),
            a
        }
        var e = "dataservice/statistics/interface/aggregation";
        return {
            getChartBaseURL: function() {
                return e
            },
            getChartAPIHeader: function() {
                return {
                    chart: {
                        xAxis: ["entry_time"],
                        yAxis: ["value"],
                        series: [""]
                    }
                }
            },
            getUserConfiguredData: function(b) {
                return a.get(c.DEVICE_INTERFACE_SYNCED_STATS + b)
            },
            getChartData: function(c, e) {
                var f = this
                  , g = b.defer();
                return a.post(f.getChartBaseURL(), f.getChartQuery(c, e)).then(function(a) {
                    console.log(a.data);
                    var b = d(a.data);
                    g.resolve(b)
                }, function(a) {
                    g.reject(a)
                }),
                g.promise
            },
            getTableAPIHeader: function() {
                return [{
                    title: "System IP",
                    property: "vdevice_name",
                    width: 110,
                    dataType: "ipv4"
                }, {
                    title: "Interface",
                    property: "interface",
                    width: 100,
                    dataType: "string"
                }, {
                    property: "up-stream",
                    title: "Upstream",
                    dataType: "string",
                    isDisplay: !0,
                    width: 250
                }, {
                    property: "down-stream",
                    title: "Downstream",
                    dataType: "string",
                    isDisplay: !0,
                    width: 250
                }, {
                    name: "utilization-icon",
                    displayName: "Bandwidth Utilization",
                    dataType: "string",
                    width: "100",
                    cellTemplate: "<div class='tloc-util-chart' style='height: 100%;'><span id='view_change_history' ng-click='grid.appScope.showChangeHistoryChart(row)'><md-icon class='material-icons blue'>trending_up</md-icon></span></div>"
                }]
            },
            getChartConfig: function(a) {
                var b = {
                    name: "tlocCapacityUtil",
                    zoom: !0,
                    filtersSelected: {
                        xAxis: ["entry_time"],
                        yAxis: ["value"],
                        series: ["upCapacity", "downCapacity"]
                    },
                    seriesClickHandler: a,
                    formatDataToKiloBitsPerSecond: !0,
                    asyncLoad: !0,
                    autoLoad: !0
                }
                  , c = {
                    title: {
                        text: ""
                    },
                    xAxis: {
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: ""
                        }
                    },
                    yAxis: {
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: "Utilization"
                        }
                    }
                };
                return [b, c]
            },
            getChartQuery: function(a, b) {
                return {
                    query: {
                        condition: "AND",
                        rules: [{
                            value: ["24"],
                            field: "entry_time",
                            type: "date",
                            operator: "last_n_hours"
                        }, {
                            value: [a],
                            field: "vdevice_name",
                            type: "string",
                            operator: "in"
                        }, {
                            value: [b],
                            field: "interface",
                            type: "string",
                            operator: "in"
                        }]
                    },
                    aggregation: {
                        metrics: [{
                            property: "tx_kbps",
                            type: "avg"
                        }, {
                            property: "rx_kbps",
                            type: "avg"
                        }],
                        histogram: {
                            property: "entry_time",
                            type: "minute",
                            interval: 60,
                            order: "asc"
                        }
                    }
                }
            }
        }
    }
    angular.module("vManage").factory("TlocUtilHistoryService", a),
    a.$inject = ["restService", "$q", "monitorApiConstants"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        function l(b, c) {
            j.post(b, c).then(function(c) {
                a.modalTableObj.serverCallInProgress = !1,
                a.modalTableObj.setDataUrl(b),
                a.modalTableObj.createColumns(c.header.columns),
                angular.copy(c.data, a.modalTableObj.data),
                a.modalTableObj.taggedSearchObject.setSearchCache(a.modalTableObj.data),
                k(function() {
                    a.modalTableObj.taggedSearchObject.getSearchTagsCache().length && a.modalTableObj.taggedSearchObject.searchData(a.modalTableObj.taggedSearchObject.getSearchTagsCache()),
                    a.modalTableObj.uiGridApi.selection.selectRow && a.modalTableObj.data.length > 0 && a.modalTableObj.uiGridApi.selection.selectRow(a.modalTableObj.uiGridApi.grid.renderContainers.body.visibleRowCache[0].entity)
                })
            }, function(b) {
                a.modalTableObj.serverCallInProgress = !1,
                g.error("Failed to get events data from server")
            })
        }
        var m, n, o, p = !1, q = e.getAPIForCFLOWDDeviceDetailsInTopApplicationsModal(), r = function(a) {
            angular.isObject(a) && i.checkNestedProperty(a, "error", "details") ? (h.error("Error occurred while retrieving data: " + a.error.message + ":" + a.error.details),
            g.error(a.error.message + ": " + a.error.details)) : (h.info("API error response needs to be updated to conform to company guidelines"),
            g.error("Error occurred while retrieving data."))
        };
        a.modalStateString = "cflowd_device_details_";
        var s = a.dashboardModalFactory.computeTableHeightOffset("fullModalHeight", a.dashboardModalHeightOffset, 35);
        a.$on("windowResizeEvent", function() {
            a.deviceDetailsTabs[0].modalTableObj.options.tableHeightOffset = a.dashboardModalFactory.computeTableHeightOffset("fullModalHeight", a.dashboardModalHeightOffset, 35)
        });
        var t = {};
        a.modalStateString = "cflowd_device_details_",
        a.modalTableObj = new d({
            autoLoad: !0,
            columnResizing: !0,
            enableSorting: !0,
            tableHeightOffset: s
        }),
        a.modalTableObj.setToolbar({
            addRow: !1,
            search: !0,
            rowCount: !0,
            refresh: !0
        }),
        a.showQueryBuilderTimeStampInbuilt = !1,
        a.deviceDetailsTabs = [{
            title: "Details",
            modalTableObj: a.modalTableObj,
            active: !0,
            loaded: !1
        }],
        m = b.getFilterCurrentState(),
        n = b.getFilterOriginalState(),
        a.selectedSourceName = b.getSourceName(),
        a.selectedFlowName = a.selectedSourceName,
        a.modalTableObj.setPostRefreshCallback(function() {
            l(q, t)
        }),
        a.searchCallBack = function(b) {
            if (t.query = b.query,
            l(q, t),
            a.deviceDetailsTabs[0].loaded = !0,
            !p) {
                p = !0;
                var c = a.queryBuilderObj.mergeTwoComponents(a.queryBuilderObj.getComponents(), n);
                a.queryBuilderObj.setFilterOriginalState(c)
            }
        }
        ,
        o = {
            autoLoadFields: !1,
            searchCallBack: a.searchCallBack,
            queryBuilderPersistedComponents: angular.copy(m),
            queryBuilderOriginalComponents: angular.copy(n),
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0,
            fieldCustomizationsForDataTypeURL: [{
                property: "vpn_id",
                enable: !0,
                addAllForFieldTypeURL: !0,
                appendStringToTheList: !0,
                stringVal: "VPN"
            }]
        };
        var u = e.getTopApplicationsCFLOWDFieldsData();
        angular.isDefined(u) ? (u = c.formatFieldsData(angular.copy(u), a.selectedSourceName),
        o.fieldsData = u) : e.getFieldsDataForTopApplications("cflowd").then(function(b) {
            b = c.formatFieldsData(angular.copy(b), a.selectedSourceName),
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData(b)
        }, r),
        a.queryBuilderObj = new f(o),
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        }
    }
    angular.module("vManage").controller("CFLOWDDeviceDetailsController", a),
    a.$inject = ["$scope", "CFLOWDDeviceOverViewComponentsService", "CFLOWDDeviceDetailsComponentsService", "Table", "tenantDashboardService", "QueryBuilderFactory", "notification", "$log", "appUtil", "restService", "$timeout"]
}(),
function() {
    function a() {
        return {
            formatFieldsData: function(a, b) {
                var c, d;
                return c = _.findIndex(a, {
                    property: "dest_ip"
                }),
                c < 0 ? (d = {
                    property: "dest_ip",
                    name: "Destination Ip",
                    isRequired: !0,
                    multiSelect: !1,
                    dataType: "string",
                    isHidden: "true"
                },
                a.push(d)) : (d = a[c],
                d.isHidden = "true"),
                d.defaultValue = b,
                a
            },
            getChartQuery: function() {
                return b
            }
        }
    }
    angular.module("vManage").factory("CFLOWDDeviceDetailsComponentsService", a),
    a.$inject = [];
    var b = {
        aggregation: {
            field: [{
                property: "destination",
                size: 200
            }],
            metrics: [{
                property: "total_bytes",
                order: "desc",
                type: "sum"
            }]
        }
    }
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        function j(c) {
            a.tabs[0].loaded = !1,
            a.tabs[1].loaded = !1,
            a.cflowdDeviceOverviewChartObject.changeLoadingIndicatorState(!0),
            b.getCFLOWDTopApplicationsData(c).then(function(b) {
                var d = _.find(b.header.fields, {
                    property: "total_bytes"
                });
                angular.isDefined(d) && (d.display = "Total Bytes"),
                a.tabs[0].loaded = !0,
                a.cflowdDeviceOverviewChartObject.addCategoriesFromRawData([{
                    name: "destination",
                    display: "Destination",
                    type: "column"
                }], {
                    names: [],
                    property: "destination"
                }, b),
                a.tabs[1].loaded = !0,
                a.modalTableObj.setDataUrl(c),
                a.modalTableObj.columnDefs.length > 0 ? (a.modalTableObj.taggedSearchObject.setSearchCache(b.data),
                a.modalTableObj.refreshTableData(b.data),
                a.modalTableObj.taggedSearchObject.searchData()) : (a.modalTableObj.createColumns(b.header.columns),
                a.modalTableObj.setTableData(b.data))
            }, o)
        }
        var k, l, m, n = e.getAPIForTopApplicationsModal("cflowd"), o = function(b) {
            a.cflowdDeviceOverviewChartObject.changeLoadingIndicatorState(!1),
            a.cflowdDeviceOverviewChartObject.checkSetNoDataMessage(),
            angular.isObject(b) && i.checkNestedProperty(b, "error", "details") ? (h.error("Error occurred while retrieving data: " + b.error.message + ":" + b.error.details),
            g.error(b.error.message + ": " + b.error.details)) : (h.info("API error response needs to be updated to conform to company guidelines"),
            g.error("Error occurred while retrieving data."))
        };
        a.modalStateString = "cflowd_device_overview_";
        var p = a.dashboardModalFactory.computeTableHeightOffset("shareModalVertically", a.dashboardModalHeightOffset, 75);
        a.$on("windowResizeEvent", function() {
            a.tabs[1].modalTableObj.options.tableHeightOffset = a.dashboardModalFactory.computeTableHeightOffset("shareModalVertically", a.dashboardModalHeightOffset, 75)
        }),
        a.environmentInitialized = !1,
        a.showModalToggleButton = !0,
        a.modalTableObj = new d({
            autoLoad: !0,
            columnResizing: !0,
            enableSorting: !0,
            tableHeightOffset: p
        }),
        a.showQueryBuilderTimeStampInbuilt = !1,
        a.tabs = [{
            title: "Chart",
            active: !0,
            loaded: !1
        }, {
            title: "Details",
            modalTableObj: a.modalTableObj,
            active: !1,
            loaded: !1
        }],
        a.CFLOWDClickHandler = function(c) {
            var d = angular.isDefined(c.point) ? c.point : c.target
              , e = d.name;
            b.setSourceName(e),
            a.updateViewPort("cflowdDeviceDetails")
        }
        ;
        var q = b.getChartConfig("cflowdChart", a.CFLOWDClickHandler);
        a.cflowdDeviceOverviewChartObject = new c(q[0],q[1]),
        a.cflowdDeviceOverviewChartObject.setXAxisProperty("destination"),
        a.cflowdDeviceOverviewChartObject.setYAxisProperty(["total_bytes"]),
        a.cflowdDeviceOverviewChartObject.setSeriesNames([{
            property: "destination",
            values: []
        }]),
        a.searchCallBack = function(c) {
            var d = a.queryBuilderObj.getQueryStringFromQueryObject(c);
            k = a.queryBuilderObj.appendQueryString(n, d),
            b.setFilterCurrentState(a.queryBuilderObj.getComponents()),
            b.setChartURL(k),
            j(k);
            var e = b.getFilterOriginalState();
            angular.isArray(e) && e.length < 1 && b.setFilterOriginalState(angular.copy(a.queryBuilderObj.getOriginalComponents()))
        }
        ,
        l = {
            autoLoadFields: !1,
            searchCallBack: a.searchCallBack,
            queryBuilderPersistedComponents: angular.copy(b.getFilterCurrentState()),
            queryBuilderOriginalComponents: angular.copy(b.getFilterOriginalState()),
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0,
            fieldCustomizationsForDataTypeURL: [{
                property: "vpn_id",
                enable: !0,
                addAllForFieldTypeURL: !0,
                appendStringToTheList: !0,
                stringVal: "VPN"
            }]
        },
        m = e.getTopApplicationsCFLOWDFieldsData(),
        angular.isDefined(m) ? (m = e.formatTimeFieldForTopApplicationsView(angular.copy(m), "cflowd"),
        l.fieldsData = m) : e.getFieldsDataForTopApplications("cflowd").then(function(b) {
            b = e.formatTimeFieldForTopApplicationsView(angular.copy(b), "cflowd"),
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData(b)
        }, o),
        a.queryBuilderObj = new f(l),
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        }
    }
    angular.module("vManage").controller("CFLOWDDeviceOverViewController", a),
    a.$inject = ["$scope", "CFLOWDDeviceOverViewComponentsService", "HighStockBarChart", "Table", "tenantDashboardService", "QueryBuilderFactory", "notification", "$log", "appUtil"]
}(),
function() {
    function a(a, b) {
        var c, d, e, f, g;
        return {
            getChartConfig: function(a, c) {
                var d, e;
                return d = {
                    name: a,
                    zoom: !0,
                    filtersSelected: {
                        xAxis: ["destination"],
                        yAxis: ["total_bytes"],
                        series: []
                    },
                    seriesClickHandler: c,
                    formatDataToBytes: !0,
                    replaceToolTipTextWithYAxisTitleText: !0
                },
                e = {
                    options: {
                        plotOptions: {
                            column: {
                                allowPointSelect: !0
                            }
                        },
                        tooltip: {
                            formatter: function() {
                                var a = "";
                                return a += "<b>" + this.points[0].key + "<b><br/>",
                                a += '<span style="color:' + this.points[0].color + '">■    </span>',
                                a += "<span>Total Bytes:  </span>",
                                a += "<span>" + b.formatBytes(this.y, !0) + "</span>",
                                a += "<br/>"
                            }
                        }
                    },
                    title: {
                        text: ""
                    },
                    xAxis: {
                        type: "category",
                        tickPositions: _.range(25),
                        labels: {
                            autoRotation: !0,
                            rotation: -45,
                            step: 1,
                            enabled: !0,
                            formatter: function() {
                                return "number" == typeof this.value ? this.axis.series[0].userOptions.data[this.value].name : this.value
                            }
                        },
                        title: {
                            text: "Destination"
                        }
                    },
                    yAxis: {
                        min: 1,
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: "Usage"
                        }
                    }
                },
                [d, e]
            },
            setFilterCurrentState: function(a) {
                d = a
            },
            getFilterCurrentState: function() {
                return d
            },
            setFilterOriginalState: function(a) {
                e = a
            },
            getFilterOriginalState: function() {
                return e
            },
            setChartURL: function(a) {
                c = a
            },
            getChartURL: function() {
                return c
            },
            setSourceName: function(a) {
                f = a
            },
            getSourceName: function() {
                return f
            },
            setPortNumber: function(a) {
                g = a
            },
            getPortNumber: function() {
                return g
            },
            getCFLOWDTopApplicationsData: function(b) {
                return a.get(b)
            }
        }
    }
    angular.module("vManage").factory("CFLOWDDeviceOverViewComponentsService", a),
    a.$inject = ["restService", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        function k(c) {
            a.tabs[0].loaded = !1,
            a.tabs[1].loaded = !1,
            a.dpiApplicationOverviewChartObject.changeLoadingIndicatorState(!0),
            b.getDPITopApplicationsData(c).then(function(b) {
                a.tabs[0].loaded = !0,
                b.data.length > 0 ? (a.dpiApplicationOverviewChartObject.changeNoDataMessageState(!1),
                a.dpiApplicationOverviewChartObject.addCategoriesFromRawData([{
                    name: "Application",
                    display: "application",
                    type: "column"
                }], {
                    names: [],
                    property: "application"
                }, b)) : a.dpiApplicationOverviewChartObject.changeNoDataMessageState(!0),
                a.tabs[1].loaded = !0,
                a.modalTableObj.setDataUrl(c),
                a.modalTableObj.columnDefs.length > 0 ? (a.modalTableObj.taggedSearchObject.setSearchCache(b.data),
                a.modalTableObj.refreshTableData(b.data),
                a.modalTableObj.taggedSearchObject.searchData()) : (a.modalTableObj.createColumns(b.header.columns),
                a.modalTableObj.setTableData(b.data))
            }, p)
        }
        var l, m, n, o = f.getAPIForTopApplicationsModal("dpi"), p = function(b) {
            a.dpiApplicationOverviewChartObject.changeLoadingIndicatorState(!1),
            a.dpiApplicationOverviewChartObject.checkSetNoDataMessage(),
            angular.isObject(b) && j.checkNestedProperty(b, "error", "details") ? (i.error("Error occurred while retrieving data: " + b.error.message + ":" + b.error.details),
            h.error(b.error.message + ": " + b.error.details)) : (i.info("API error response needs to be updated to conform to company guidelines"),
            h.error("Error occurred while retrieving data."))
        };
        a.modalStateString = "dpi_application_overview_";
        var q = a.dashboardModalFactory.computeTableHeightOffset("shareModalVertically", a.dashboardModalHeightOffset, 75);
        a.$on("windowResizeEvent", function() {
            a.tabs[1].modalTableObj.options.tableHeightOffset = a.dashboardModalFactory.computeTableHeightOffset("shareModalVertically", a.dashboardModalHeightOffset, 75)
        }),
        a.environmentInitialized = !1,
        a.showModalToggleButton = !0,
        a.showQueryBuilderTimeStampInbuilt = !1,
        a.modalTableObj = new e({
            autoLoad: !0,
            columnResizing: !0,
            enableSorting: !0,
            tableHeightOffset: q
        }),
        a.tabs = [{
            title: "Chart",
            active: !0,
            loaded: !1
        }, {
            title: "Details",
            modalTableObj: a.modalTableObj,
            active: !1,
            loaded: !1
        }],
        a.DPIClickHandler = function(d) {
            var e = angular.isDefined(d.point) ? d.point : d.target;
            c.setFilterCurrentState(b.getFilterCurrentState()),
            c.setFilterOriginalState(angular.copy(a.queryBuilderObj.getOriginalComponents())),
            b.setApplicationName(e.name),
            a.updateViewPort("dpiDeviceOverView")
        }
        ;
        var r = b.getChartConfig("dpiChart", a.DPIClickHandler);
        a.dpiApplicationOverviewChartObject = new d(r[0],r[1]),
        a.dpiApplicationOverviewChartObject.setXAxisProperty("application"),
        a.dpiApplicationOverviewChartObject.setYAxisProperty(["octets"]),
        a.dpiApplicationOverviewChartObject.setSeriesNames([{
            property: "application",
            values: []
        }]),
        a.searchCallBack = function(c) {
            var d = a.queryBuilderObj.getQueryStringFromQueryObject(c);
            l = a.queryBuilderObj.appendQueryString(o, d),
            b.setFilterCurrentState(a.queryBuilderObj.getComponents()),
            b.setChartURL(l),
            k(l)
        }
        ,
        m = {
            autoLoadFields: !1,
            searchCallBack: a.searchCallBack,
            queryBuilderPersistedComponents: angular.copy(b.getFilterCurrentState()),
            queryBuilderOriginalComponents: angular.copy(b.getFilterOriginalState()),
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0,
            fieldCustomizationsForDataTypeURL: [{
                property: "vpn_id",
                enable: !0,
                addAllForFieldTypeURL: !0,
                appendStringToTheList: !0,
                stringVal: "VPN"
            }]
        },
        n = f.getTopApplicationsDPIFieldsData(),
        angular.isDefined(n) ? m.fieldsData = angular.copy(n) : f.getFieldsDataForTopApplications("dpi").then(function(b) {
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData(b)
        }, p),
        a.queryBuilderObj = new g(m),
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        },
        a.$on("$destroy", function() {
            b.setQueryBuilderObj(a.queryBuilderObj)
        })
    }
    angular.module("vManage").controller("DPIApplicationOverViewController", a),
    a.$inject = ["$scope", "DPIApplicationOverViewComponentsService", "DPIDeviceOverviewComponentsService", "HighStockBarChart", "Table", "tenantDashboardService", "QueryBuilderFactory", "notification", "$log", "appUtil"]
}(),
function() {
    function a(a, b) {
        var c, d, e, f, g;
        return {
            getChartConfig: function(a, c) {
                var d, e;
                return d = {
                    name: a,
                    zoom: !0,
                    filtersSelected: {
                        xAxis: [],
                        yAxis: ["octets"],
                        series: []
                    },
                    seriesClickHandler: c,
                    formatDataToBytes: !0,
                    replaceToolTipTextWithYAxisTitleText: !0
                },
                e = {
                    options: {
                        plotOptions: {
                            column: {
                                allowPointSelect: !0
                            }
                        },
                        tooltip: {
                            formatter: function() {
                                var a = "";
                                return a += "<b>" + this.points[0].key + "<b><br/>",
                                a += '<span style="color:' + this.points[0].color + '">■    </span>',
                                a += "<span>octets:  </span>",
                                a += "<span>" + b.formatBytes(this.y, !0) + "</span>",
                                a += "<br/>"
                            }
                        }
                    },
                    title: {
                        text: ""
                    },
                    xAxis: {
                        type: "category",
                        tickPositions: _.range(25),
                        labels: {
                            enabled: !0,
                            autoRotation: !0,
                            rotation: -45,
                            step: 1,
                            formatter: function() {
                                return "number" == typeof this.value ? this.axis.series[0].userOptions.data[this.value].name : this.value
                            }
                        },
                        title: {
                            text: ""
                        }
                    },
                    yAxis: {
                        type: "logarithmic",
                        min: .1,
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: "Usage"
                        }
                    }
                },
                [d, e]
            },
            setChartURL: function(a) {
                c = a
            },
            setApplicationName: function(a) {
                f = a
            },
            getApplicationName: function() {
                return f
            },
            getChartURL: function() {
                return c
            },
            setFilterCurrentState: function(a) {
                d = a
            },
            getFilterCurrentState: function() {
                return d
            },
            setFilterOriginalState: function(a) {
                e = a
            },
            getFilterOriginalState: function() {
                return e
            },
            setQueryBuilderObj: function(a) {
                g = angular.copy(a)
            },
            getQueryBuilderObj: function() {
                return g
            },
            getDPITopApplicationsData: function(b) {
                return a.get(b)
            }
        }
    }
    angular.module("vManage").factory("DPIApplicationOverViewComponentsService", a),
    a.$inject = ["restService", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m) {
        function n(b, c) {
            d.post(b, c).then(function(c) {
                a.modalTableObj.serverCallInProgress = !1,
                a.modalTableObj.setDataUrl(b),
                c.header.columns = [{
                    dataType: "string",
                    isDisplay: !0,
                    property: "source_ip",
                    title: "Source IP"
                }, {
                    dataType: "number",
                    isDisplay: !0,
                    property: "octets",
                    title: "Octets"
                }],
                a.modalTableObj.createColumns(c.header.columns),
                angular.copy(c.data, a.modalTableObj.data),
                a.modalTableObj.taggedSearchObject.setSearchCache(a.modalTableObj.data),
                m(function() {
                    a.modalTableObj.taggedSearchObject.getSearchTagsCache().length && a.modalTableObj.taggedSearchObject.searchData(a.modalTableObj.taggedSearchObject.getSearchTagsCache()),
                    a.modalTableObj.uiGridApi.selection.selectRow && a.modalTableObj.data.length > 0 && a.modalTableObj.uiGridApi.selection.selectRow(a.modalTableObj.uiGridApi.grid.renderContainers.body.visibleRowCache[0].entity)
                })
            }, function(b) {
                a.modalTableObj.serverCallInProgress = !1,
                i.error("Failed to get events data from server")
            })
        }
        a.modalStateString = "dpi_device_overview_",
        a.modalStateString = "dpi_device_overview_";
        var o = !1
          , p = a.dashboardModalFactory.computeTableHeightOffset("fullModalHeight", a.dashboardModalHeightOffset, 30);
        a.$on("windowResizeEvent", function() {
            a.tabs[0].modalTableObj.options.tableHeightOffset = a.dashboardModalFactory.computeTableHeightOffset("fullModalHeight", a.dashboardModalHeightOffset, 30)
        });
        var q, r, s, t = e.getChartQuery(), u = g.getAPIForDPIDeviceDetailsInTopApplicationsModal(), v = function(a) {
            angular.isObject(a) && k.checkNestedProperty(a, "error", "details") ? (j.error("Error occurred while retrieving data: " + a.error.message + ":" + a.error.details),
            i.error(a.error.message + ": " + a.error.details)) : (j.info("API error response needs to be updated to conform to company guidelines"),
            i.error("Error occurred while retrieving data."))
        };
        a.showQueryBuilderTimeStampInbuilt = !1,
        a.modalTableObj = new f({
            autoLoad: !0,
            columnResizing: !0,
            enableSorting: !0,
            tableHeightOffset: p
        }),
        a.modalTableObj.setToolbar({
            addRow: !1,
            search: !0,
            rowCount: !0,
            refresh: !0
        }),
        a.tabs = [{
            title: "Details",
            modalTableObj: a.modalTableObj,
            active: !0,
            loaded: !1
        }],
        a.showDeviceOverViewTitle = !0,
        a.selectedSourceName = c.getSourceName(),
        a.selectedApplicationName = b.getApplicationName(),
        q = c.getFilterCurrentState(),
        r = c.getFilterOriginalState(),
        a.modalTableObj.setPostRefreshCallback(function() {
            n(u, t)
        }),
        a.searchCallBack = function(b) {
            if (t.query = b.query,
            n(u, t),
            a.tabs[0].loaded = !0,
            !o) {
                o = !0;
                var c = a.queryBuilderObj.mergeTwoComponents(a.queryBuilderObj.getComponents(), r);
                a.queryBuilderObj.setFilterOriginalState(c)
            }
        }
        ,
        s = {
            autoLoadFields: !1,
            searchCallBack: a.searchCallBack,
            queryBuilderPersistedComponents: angular.copy(q),
            queryBuilderOriginalComponents: angular.copy(r),
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0,
            fieldCustomizationsForDataTypeURL: [{
                property: "vpn_id",
                enable: !0,
                addAllForFieldTypeURL: !0,
                appendStringToTheList: !0,
                stringVal: "VPN"
            }]
        };
        var w = g.getTopApplicationsDPIFieldsData();
        angular.isDefined(w) ? (w = e.formatFieldsData(angular.copy(w), a.selectedSourceName, a.selectedApplicationName),
        s.fieldsData = w) : g.getFieldsDataForTopApplications("dpi").then(function(b) {
            b = e.formatFieldsData(b, a.selectedSourceName, a.selectedApplicationName),
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData(b)
        }, v),
        a.queryBuilderObj = new h(s),
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        },
        a.cancel = function() {
            l.cancel()
        }
    }
    angular.module("vManage").controller("DPIDeviceDetailsController", a),
    a.$inject = ["$scope", "DPIApplicationOverViewComponentsService", "DPIDeviceOverviewComponentsService", "restService", "DPIDeviceDetailsComponentsService", "Table", "tenantDashboardService", "QueryBuilderFactory", "notification", "$log", "appUtil", "$mdDialog", "$timeout"]
}(),
function() {
    function a() {
        return {
            formatFieldsData: function(a, b, c) {
                var d, e, f;
                return d = _.findIndex(a, {
                    property: "vdevice_name"
                }),
                d < 0 ? (e = {
                    property: "vdevice_name",
                    name: "Device name",
                    isRequired: !0,
                    multiSelect: !1,
                    dataType: "string",
                    isHidden: "true"
                },
                a.push(e)) : (e = a[d],
                e.isHidden = "true"),
                e.defaultValue = b,
                d = _.findIndex(a, {
                    property: "application"
                }),
                d < 0 ? (f = {
                    property: "application",
                    name: "Application",
                    isRequired: !0,
                    multiSelect: !1,
                    dataType: "string",
                    isHidden: "true"
                },
                a.push(f)) : (f = a[d],
                f.isHidden = "true"),
                f.defaultValue = c,
                a
            },
            getChartQuery: function() {
                return b
            }
        }
    }
    angular.module("vManage").factory("DPIDeviceDetailsComponentsService", a),
    a.$inject = [];
    var b = {
        aggregation: {
            field: [{
                property: "source_ip",
                size: 200
            }],
            metrics: [{
                property: "octets",
                order: "desc",
                type: "sum"
            }]
        }
    }
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        function k(b, d) {
            a.tabs[0].loaded = !1,
            a.tabs[1].loaded = !1,
            a.dpiDeviceOverviewChartObject.changeLoadingIndicatorState(!0),
            c.getDPITopSourcesData(b, d).then(function(c) {
                a.modalTableObj.serverCallInProgress = !1,
                c.header = {
                    chart: {
                        series: [""],
                        title: "Dpi Device",
                        xAxis: ["vdevice_name"],
                        yAxis: ["octets"],
                        xAxisLabel: "Time",
                        yAxisLabel: "Count"
                    },
                    columns: [{
                        title: "Devices",
                        property: "vdevice_name",
                        dataType: "string"
                    }, {
                        title: "Octets",
                        property: "octets",
                        dataType: "number"
                    }],
                    fields: [{
                        property: "vdevice_name",
                        dataType: "string"
                    }, {
                        property: "octets",
                        dataType: "number"
                    }]
                },
                a.tabs[0].loaded = !0,
                c.data.length > 0 ? (a.dpiDeviceOverviewChartObject.changeNoDataMessageState(!1),
                a.dpiDeviceOverviewChartObject.addCategoriesFromRawData([{
                    name: "vdevice_name",
                    display: "vdevice_name",
                    type: "column"
                }], {
                    names: [],
                    property: "vdevice_name"
                }, c)) : a.dpiDeviceOverviewChartObject.changeNoDataMessageState(!0),
                a.tabs[1].loaded = !0,
                a.modalTableObj.setDataUrl(b),
                a.modalTableObj.columnDefs.length > 0 ? (a.modalTableObj.taggedSearchObject.setSearchCache(c.data),
                a.modalTableObj.refreshTableData(c.data),
                a.modalTableObj.taggedSearchObject.searchData()) : (a.modalTableObj.createColumns(c.header.columns),
                a.modalTableObj.setTableData(c.data))
            }, o)
        }
        var l, m = !1, n = e.getAPIForDPIDeviceInTopApplicationsModal(), o = function(b) {
            a.dpiDeviceOverviewChartObject.changeLoadingIndicatorState(!1),
            a.dpiDeviceOverviewChartObject.checkSetNoDataMessage(),
            a.modalTableObj.serverCallInProgress = !1,
            angular.isObject(b) && j.checkNestedProperty(b, "error", "details") ? (i.error("Error occurred while retrieving data: " + b.error.message + ":" + b.error.details),
            h.error(b.error.message + ": " + b.error.details)) : (i.info("API error response needs to be updated to conform to company guidelines"),
            h.error("Error occurred while retrieving data."))
        };
        a.modalStateString = "dpi_device_overview_";
        var p = a.dashboardModalFactory.computeTableHeightOffset("shareModalVertically", a.dashboardModalHeightOffset, 105);
        a.$on("windowResizeEvent", function() {
            a.tabs[1].modalTableObj.options.tableHeightOffset = a.dashboardModalFactory.computeTableHeightOffset("shareModalVertically", a.dashboardModalHeightOffset, 105)
        });
        var q = c.getChartQuery();
        a.showQueryBuilderTimeStampInbuilt = !1,
        a.modalTableObj = new d({
            autoLoad: !0,
            columnResizing: !0,
            enableSorting: !0,
            tableHeightOffset: p
        }),
        a.modalTableObj.setToolbar({
            addRow: !1,
            search: !0,
            rowCount: !0,
            refresh: !0
        }),
        a.tabs = [{
            title: "Chart",
            active: !0,
            loaded: !1
        }, {
            title: "Details",
            modalTableObj: a.modalTableObj,
            active: !1,
            loaded: !1
        }],
        a.selectedApplicationName = b.getApplicationName(),
        a.dpiDeviceOverviewClickHandler = function(b) {
            var d = angular.isDefined(b.point) ? b.point : b.target;
            c.setSourceName(d.name),
            a.updateViewPort("dpiDeviceDetails")
        }
        ,
        a.showModalToggleButton = !0;
        var r = c.getChartConfig("dpiChart", a.dpiDeviceOverviewClickHandler);
        a.dpiDeviceOverviewChartObject = new f(r[0],r[1]),
        a.dpiDeviceOverviewChartObject.setXAxisProperty("vdevice_name"),
        a.dpiDeviceOverviewChartObject.setYAxisProperty(["octets"]),
        a.dpiDeviceOverviewChartObject.setSeriesNames([{
            property: "vdevice_name",
            values: []
        }]),
        a.modalTableObj.setPostRefreshCallback(function() {
            a.searchCallBack(b.getQueryBuilderObj())
        }),
        a.searchCallBack = function(d) {
            q.query = d.query,
            c.setFilterCurrentState(a.queryBuilderObj.getComponents());
            var e = q;
            if (b.setQueryBuilderObj(e),
            k(n, e),
            !m) {
                m = !0;
                var f = a.queryBuilderObj.mergeTwoComponents(c.getFilterCurrentState(), c.getFilterOriginalState());
                c.setFilterOriginalState(f),
                a.queryBuilderObj.setFilterOriginalState(f)
            }
        }
        ,
        l = {
            autoLoadFields: !1,
            searchCallBack: a.searchCallBack,
            queryBuilderPersistedComponents: angular.copy(c.getFilterCurrentState()),
            queryBuilderOriginalComponents: angular.copy(c.getFilterOriginalState()),
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0,
            fieldCustomizationsForDataTypeURL: [{
                property: "vpn_id",
                enable: !0,
                addAllForFieldTypeURL: !0,
                appendStringToTheList: !0,
                stringVal: "VPN"
            }]
        };
        var s = e.getTopApplicationsDPIFieldsData();
        angular.isDefined(s) ? (s = c.formatFieldsData(angular.copy(s), a.selectedApplicationName),
        l.fieldsData = s) : e.getFieldsDataForTopApplications("dpi").then(function(b) {
            b = c.formatFieldsData(b, a.selectedApplicationName),
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData(b)
        }, o),
        a.queryBuilderObj = new g(l),
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        }
    }
    angular.module("vManage").controller("DPIDeviceOverViewController", a),
    a.$inject = ["$scope", "DPIApplicationOverViewComponentsService", "DPIDeviceOverviewComponentsService", "Table", "tenantDashboardService", "HighStockBarChart", "QueryBuilderFactory", "notification", "$log", "appUtil"]
}(),
function() {
    function a(a, b) {
        var c, d, e, f, g = {
            aggregation: {
                field: [{
                    property: "vdevice_name",
                    size: 25
                }],
                metrics: [{
                    property: "octets",
                    order: "desc",
                    type: "sum"
                }]
            }
        };
        return {
            getChartConfig: function(a, c) {
                var d, e;
                return d = {
                    name: a,
                    filtersSelected: {
                        xAxis: ["vdevice_name"],
                        yAxis: ["octets"],
                        series: []
                    },
                    seriesClickHandler: c,
                    formatDataToBytes: !0,
                    replaceToolTipTextWithYAxisTitleText: !0
                },
                e = {
                    options: {
                        plotOptions: {
                            column: {
                                allowPointSelect: !0
                            }
                        },
                        scrollbar: {
                            enabled: !1
                        },
                        tooltip: {
                            formatter: function() {
                                var a = "";
                                return a += "<b>" + this.points[0].key + "<b><br/>",
                                a += '<span style="color:' + this.points[0].color + '">■    </span>',
                                a += "<span>octets:  </span>",
                                a += "<span>" + b.formatBytes(this.y, !0) + "</span>",
                                a += "<br/>"
                            }
                        }
                    },
                    title: {
                        text: ""
                    },
                    xAxis: {
                        type: "category",
                        labels: {
                            enabled: !0,
                            formatter: function() {
                                return "number" == typeof this.value ? this.axis.series[0].userOptions.data[this.value].name : this.value
                            }
                        },
                        title: {
                            text: "Devices"
                        }
                    },
                    yAxis: {
                        min: 1,
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: "Usage"
                        }
                    }
                },
                [d, e]
            },
            formatFieldsData: function(a, b) {
                var c, d;
                return c = _.findIndex(a, {
                    property: "vdevice_name"
                }),
                c > -1 && a.splice(c, 1),
                c = _.findIndex(a, {
                    property: "application"
                }),
                c < 0 ? (d = {
                    property: "application",
                    name: "Application",
                    isRequired: !0,
                    multiSelect: !1,
                    dataType: "string",
                    isHidden: "true"
                },
                a.push(d)) : (d = a[c],
                d.isHidden = "true"),
                d.defaultValue = b,
                a
            },
            setChartURL: function(a) {
                c = a
            },
            getChartURL: function() {
                return c
            },
            setSourceName: function(a) {
                f = a
            },
            getSourceName: function() {
                return f
            },
            setFilterCurrentState: function(a) {
                d = a
            },
            getFilterCurrentState: function() {
                return d
            },
            setFilterOriginalState: function(a) {
                e = a
            },
            getFilterOriginalState: function() {
                return e
            },
            getDPITopSourcesData: function(b, c) {
                return a.post(b, c)
            },
            getChartQuery: function() {
                return g
            }
        }
    }
    angular.module("vManage").factory("DPIDeviceOverviewComponentsService", a),
    a.$inject = ["restService", "appUtil"]
}(),
function() {
    function a(a, b, c, d) {
        var e, f, g = "/dataservice/statistics/approute/query/fields";
        return {
            getChartConfig: function(a) {
                var b, c, d, e, f;
                return d = a,
                f = "loss" === a ? "loss_percentage" : a,
                e = "loss" === a ? "%" : "ms",
                b = {
                    name: a,
                    zoom: !0,
                    filtersSelected: {
                        xAxis: ["entry_time"],
                        yAxis: [f],
                        series: ["color"]
                    },
                    yAxisUnit: e
                },
                c = {
                    options: {
                        scrollbar: {
                            enabled: !1
                        }
                    },
                    title: {
                        text: ""
                    },
                    xAxis: {
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: ""
                        }
                    },
                    yAxis: {
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: d.capitalizeGivenLetter(0)
                        }
                    }
                },
                "loss" === a && (c.yAxis.max = 100),
                [b, c]
            },
            getFieldsDataCached: function() {
                return f
            },
            getTransportHealthFieldsData: function() {
                var a = c.defer();
                return angular.isDefined(f) ? a.resolve(f) : b.get(g).then(function(b) {
                    var c = angular.copy(b.data)
                      , e = _.findIndex(c, {
                        property: "vdevice_name"
                    });
                    e > -1 && c.splice(e, 1),
                    c = d.formatTimeFieldForTransportHealth(c),
                    f = c,
                    a.resolve(c)
                }, function(b) {
                    a.reject(b)
                }),
                a.promise
            },
            setChartURL: function(a) {
                e = a
            },
            getURLWithUpdatedFeatureName: function(b) {
                var c = e;
                return c = b !== a.DEFAULT_FEATURE_NAME ? c.replace(a.DEFAULT_FEATURE_NAME, b) : c.replace(a.DEFAULT_FEATURE_NAME, "loss_percentage")
            },
            getTransportHealthData: function(a) {
                return b.get(a)
            }
        }
    }
    angular.module("vManage").constant("TransportHealthConstants", {
        DEFAULT_FEATURE_NAME: "loss"
    }),
    angular.module("vManage").factory("TransportHealthComponentsService", a),
    a.$inject = ["TransportHealthConstants", "restService", "$q", "tenantDashboardService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l) {
        function m(c) {
            a.tabs[0].loaded = !1,
            a.tabs[1].loaded = !1,
            b.getTransportHealthData(c).then(function(b) {
                a.tabs[0].loaded = !0,
                "loss" === a.transportHealthModalFilterSelected.key ? a.transportHealthLossChartObject.updateChartAPIData(b) : "latency" === a.transportHealthModalFilterSelected.key ? a.transportHealthLatencyChartObject.updateChartAPIData(b) : "jitter" === a.transportHealthModalFilterSelected.key && a.transportHealthJitterChartObject.updateChartAPIData(b),
                a.tabs[1].loaded = !0,
                a.tabs[1].tableObj.setDataUrl(c),
                a.tabs[1].tableObj.columnDefs.length > 0 ? (a.tabs[1].tableObj.taggedSearchObject.setSearchCache(b.data),
                a.tabs[1].tableObj.refreshTableData(b.data),
                a.tabs[1].tableObj.taggedSearchObject.searchData()) : (a.tabs[1].tableObj.createColumns(b.header.columns),
                a.tabs[1].tableObj.setTableData(b.data))
            }, r)
        }
        var n, o = c.DEFAULT_FEATURE_NAME;
        a.modalStateString = "transport_health_";
        var p = a.dashboardModalFactory.computeTableHeightOffset("shareModalVertically", a.dashboardModalHeightOffset, 75);
        a.$on("windowResizeEvent", function() {
            a.tabs[1].tableObj.options.tableHeightOffset = a.dashboardModalFactory.computeTableHeightOffset("shareModalVertically", a.dashboardModalHeightOffset, 75)
        }),
        a.modalTableObj = new g({
            autoLoad: !0,
            columnResizing: !0,
            enableSorting: !0,
            tableHeightOffset: p
        }),
        a.showQueryBuilderTimeStampInbuilt = !1,
        a.modalTableObj.setToolbar({
            addRow: !1,
            search: !0,
            rowCount: !0,
            refresh: !0
        }),
        a.tabs = [{
            title: "Chart",
            active: !0,
            loaded: !1
        }, {
            title: "Details",
            tableObj: a.modalTableObj,
            active: !1,
            loaded: !1
        }],
        a.updateModalActiveTab = function(a, b) {
            angular.forEach(a, function(a) {
                a.active = !1
            }),
            a[b].active = !0,
            "Chart" === a[0].title && k(function() {
                l.$broadcast("highchartsng.reflow")
            }, 2)
        }
        ;
        var q, r = function(a) {
            angular.isObject(a) && j.checkNestedProperty(a, "error", "details") ? (h.error("Error occurred while retrieving data: " + a.error.message + ":" + a.error.details),
            i.error(a.error.message + ": " + a.error.details)) : (h.info("API error response needs to be updated to conform to company guidelines"),
            i.error("Error occurred while retrieving data."))
        };
        a.searchCallBack = function(c) {
            var d = a.queryBuilderObj.getQueryStringFromQueryObject(c)
              , f = e.getTransportHealthAPI(o)
              , g = a.queryBuilderObj.appendQueryString(f, d);
            b.setChartURL(g),
            g = b.getURLWithUpdatedFeatureName(a.transportHealthModalFilterSelected.key),
            m(g)
        }
        ,
        n = {
            autoLoadFields: !1,
            searchCallBack: a.searchCallBack,
            queryBuilderPersistedComponents: e.getTransportHealthComponentsData(),
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0
        };
        var s = b.getFieldsDataCached();
        angular.isDefined(s) ? n.fieldsData = angular.copy(s) : b.getTransportHealthFieldsData().then(function(b) {
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }, r),
        a.queryBuilderObj = new d(n),
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        },
        q = b.getChartConfig("loss"),
        a.transportHealthLossChartObject = new f(q[0],q[1]),
        q = b.getChartConfig("latency"),
        a.transportHealthLatencyChartObject = new f(q[0],q[1]),
        q = b.getChartConfig("jitter"),
        a.transportHealthJitterChartObject = new f(q[0],q[1]),
        a.updateRoutingModalFilterSelected = function(c, d) {
            if (d !== c && angular.isDefined(c.key)) {
                a.transportHealthModalFilterSelected = c;
                var e = b.getURLWithUpdatedFeatureName(a.transportHealthModalFilterSelected.key);
                m(e)
            }
        }
    }
    angular.module("vManage").controller("TransportHealthController", a),
    a.$inject = ["$scope", "TransportHealthComponentsService", "TransportHealthConstants", "QueryBuilderFactory", "tenantDashboardService", "LineChart", "Table", "$log", "notification", "appUtil", "$timeout", "$rootScope"]
}(),
angular.module("vManage").directive("widgetDetails", widgetDetails),
widgetDetails.$inject = ["DashboardModalFactory", "$rootScope", "$timeout", "tenantDashboardService", "responsiveContentHeight", "$state", "$mdDialog"],
function() {
    function a(a, b, c, d, e, f, g, h) {
        function i(c) {
            var e = angular.element(c);
            a.find(".widgetContainer").eq(0).html(e),
            d(e)(b)
        }
        var j, k = this, l = function(a) {
            "subscribe" === a && angular.isDefined(k.widgetInstance.registeredEventsList) && k.widgetInstance.registeredEventsList.length > 0 ? (angular.forEach(k.widgetInstance.registeredEventsList, function(a) {
                a += "_event",
                j = c.$on(a, function(a, b) {
                    k.widgetInstance.isValidEventType(b) && (k.widgetInstance.refresh(),
                    l("unsubscribe"))
                })
            }),
            f.subscribe(k.widgetInstance.vWidgetEventObj)) : "unsubscribe" === a && (f.unsubscribe(k.widgetInstance.vWidgetEventObj),
            _.isFunction(j) && (j(),
            j = null))
        };
        k.$onInit = function() {
            !angular.isDefined(k.widgetInstance.options.templateStr) && angular.isDefined(k.widgetInstance.options.templateCacheKey) && (k.widgetInstance.options.templateStr = g.get(k.widgetInstance.options.templateCacheKey)),
            k.widgetInstance.hasOwnProperty("registerEvents") && k.widgetInstance.registerEvents(),
            k.widgetInstance.options.manualLoad ? (i(k.widgetInstance.options.templateStr),
            k.widgetInstance.isPrototypeOf("DashboardManager") || l("subscribe")) : k.widgetInstance.getData().then(function() {
                i(k.widgetInstance.options.templateStr),
                l("subscribe")
            }, function() {
                i(k.widgetInstance.options.noDataTemplateStr),
                l("subscribe")
            })
        }
        ,
        k.openDialogClickHandler = function(a) {
            k.widgetInstance.setResolveObj(a, b),
            k.widgetInstance.dailog = h.show(k.widgetInstance.options.dialogDetails.dialogInstance)
        }
        ,
        k.closeDialogClickHandler = function() {
            h.hide()
        }
    }
    a.$inject = ["$element", "$scope", "$rootScope", "$compile", "DashboardManager", "eventPoll", "$templateCache", "$mdDialog"],
    angular.module("vManage").component("vWidget", {
        templateUrl: "app/dashboard/widget/widget.html",
        bindings: {
            widgetInstance: "="
        },
        controller: a,
        controllerAs: "widgetCtrl"
    })
}(),
function() {
    function a(a, b, c, d, e, f) {
        var g = {
            noDataTemplateStr: '<div class="widget" data-ng-include="\'app/dashboard/widget/widgetLibrary/templates/noDataTemplate.html\'"></div>'
        }
          , h = function(a) {
            this.registeredEventsList = [],
            this.options = angular.merge({}, g, a)
        };
        return h.prototype.showSpinner = function() {
            this.options.serverCallInProgress = !0
        }
        ,
        h.prototype.hideSpinner = function() {
            this.options.serverCallInProgress = !1
        }
        ,
        h.prototype.setTemplateString = function(a) {
            this.options.templateStr = a
        }
        ,
        h.prototype.getData = function() {
            var c = this
              , d = b.defer();
            if (angular.isDefined(this.options.apiURL))
                return a.get(this.options.apiURL).then(function(a) {
                    c.apiResponseObject = a,
                    angular.isDefined(a.data) && a.data.length > 0 ? d.resolve() : angular.isDefined(a[0]) && angular.isDefined(a[0].controlStatus) ? d.resolve() : d.reject()
                }, function() {
                    d.reject()
                }),
                d.promise
        }
        ,
        h.prototype.refresh = function() {
            var a = this;
            return a.getData()
        }
        ,
        h.prototype.isValidEventType = function(a) {
            var b = this.options.eventsTypeList;
            return !(angular.isDefined(b) && b.length > 0) || b.indexOf(a.eventChangeType) >= 0
        }
        ,
        h.prototype.registerEvents = function() {
            var a = this
              , b = c.returnEventsEnum()
              , e = c.returnProviderDashboardWidgetsEnum()
              , f = this.options.eventsList;
            angular.forEach(f, function(c) {
                b.hasOwnProperty(c) ? a.registeredEventsList.push(b[c]) : $log.error(a.options.name + ": RegisterEvent Failed: " + c + " doesn't follow standard convention.")
            }),
            a.registeredEventsList.length > 0 && (a.widgetEventObj = new d(e[a.options.eventUniqueID],a.registeredEventsList))
        }
        ,
        h.prototype.getItemName = function(a) {
            return angular.isDefined(a) && "" !== a && (a = a.replace(/ - /g, "_"),
            a = a.replace(/ /g, "_"),
            a = a.replace(/-/g, ""),
            a = a.split("(").join(""),
            a = a.split(")").join(""),
            a = a.split("/").join("_")),
            a
        }
        ,
        h.prototype.checkIfReadAllowed = function() {
            var a, b = this, c = b.options.permissions;
            return !angular.isDefined(c) || c.length < 1 || (angular.forEach(c, function(b) {
                angular.isDefined(a) && a || (a = !!e.allowReadAccess(b))
            }),
            a)
        }
        ,
        h.prototype.getCursorStatus = function(a) {
            var b = this
              , c = b.checkIfReadAllowed();
            return a > 0 && c ? "enableClick" : c ? "noDataToClick" : "notAllowedToClick"
        }
        ,
        h
    }
    angular.module("vManage").factory("Widget", a),
    a.$inject = ["restService", "$q", "eventPoll", "eventListObject", "rbac", "tenantDashboardService"]
}(),
function() {
    function a(a, b, c) {
        var d = {
            name: "certificateManagement",
            apiURL: b.CERTIFICATE_SUMMARY,
            eventsList: ["CERTIFICATE"],
            eventUniqueID: "PROVIDER_CERTIFICATE",
            templateCacheKey: "widget-certificateStatus",
            permissions: ["Certificates"],
            manualLoad: !1,
            dialogDetails: {
                enabled: !0,
                dialogInstance: {
                    template: '<md-dialog flex="75" id="modal-popup"><v-widget-modal data-parent-api-response="parentApiResponse" class="inherit-parent-dimensions"></v-widget-modal></md-dialog>',
                    preserveScope: !0,
                    clickOutsideToClose: !0,
                    scope: void 0
                },
                modalClassName: "CertificateHealthDialogFactory",
                templateCacheKey: "widget-certificateHealthDialog"
            }
        }
          , e = function(b) {
            this.options = angular.merge({}, d, b),
            a.call(this, this.options)
        };
        return e.prototype = Object.create(a.prototype),
        e.prototype.constructor = e,
        e.prototype.setResolveObj = function(a, b) {
            var d = this
              , e = "";
            angular.isDefined(a) && a.length > 0 && (e = " : " + a);
            var f = angular.extend(b.$new(!0), {
                parentApiResponse: {
                    url: c.getCertificateDetailsForModal(a),
                    title: "Certificate" + e,
                    templateCacheKey: d.options.dialogDetails.templateCacheKey,
                    modalClassName: d.options.dialogDetails.modalClassName
                }
            });
            d.options.dialogDetails.dialogInstance.scope = f
        }
        ,
        e
    }
    angular.module("vManage").factory("CertificateStatusFactory", a),
    a.$inject = ["Widget", "dashboardApiConstants", "tenantDashboardService"]
}(),
function() {
    function a(a) {
        var b = {
            name: "controlStatus",
            title: "Control Status",
            tenantAPIStatusType: "controlStatus",
            templateURL: "app/dashboard/widget/widgetLibrary/controlStatus/controlStatusTemplate.html",
            viewConstants: [{
                key: "controlUp",
                title: "Control Up"
            }, {
                key: "controlDown",
                title: "Control Down"
            }, {
                key: "partial",
                title: "Partial"
            }],
            manualLoad: !0
        }
          , c = function(c) {
            this.options = angular.merge({}, b, c),
            a.call(this, this.options)
        };
        return c.prototype = Object.create(a.prototype),
        c.prototype.constructor = c,
        c
    }
    angular.module("vManage").factory("ControlStatus", a),
    a.$inject = ["TenantHealth"]
}(),
function() {
    function a(a, b) {
        function c() {
            var a, b;
            return a = {
                name: status,
                filtersSelected: {
                    name: ["tenantPerformance"],
                    yAxis: ["tenantCount"]
                },
                formatDataToBytes: !0,
                autoLoad: !0
            },
            b = {
                options: {
                    chart: {
                        backgroundColor: "#F7F7F7"
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: !0,
                            cursor: "pointer",
                            showInLegend: !1,
                            dataLabels: {
                                enabled: !1
                            }
                        }
                    },
                    tooltip: {
                        formatter: function() {
                            var a = "";
                            return a += '<span style="color:' + this.color + '">■    </span>',
                            a += "<span>Tenant Count :</span> <span>" + this.y + " </span>",
                            a += "<br/>"
                        },
                        useHTML: !0
                    }
                }
            },
            [a, b]
        }
        function d(a) {
            a.header.chart = {
                name: ["tenantPerformance"],
                yAxis: ["tenantCount"],
                title: status,
                nameLabel: status,
                yAxisLabel: "Number of Tenants"
            },
            a.header.fields = [{
                property: "tenantPerformance",
                dataType: "string"
            }, {
                property: "tenantCount",
                dataType: "number"
            }]
        }
        function e() {
            var a = [];
            return _.each(g.providerStatusInstance.options.performanceFactors, function(b) {
                a.push({
                    tenantPerformance: b,
                    tenantCount: 0
                })
            }),
            a
        }
        function f(a) {
            g.totalTenants = a.length,
            angular.isDefined(a) && a.length > 0 ? (_.each(a, function(a) {
                angular.forEach(g.providerStatusInstance.options.statusList, function(b) {
                    var c = b.key
                      , d = g.providerStatusInstance.charts[c].getChartAPIData()
                      , e = _.filter(d.data, {
                        tenantPerformance: a[c + "Icon"]
                    });
                    angular.isDefined(e) && e.length > 0 && e[0].tenantCount++
                })
            }),
            _.each(g.providerStatusInstance.charts, function(a) {
                a.updateChartAPIData(a.getChartAPIData())
            }),
            g.showNoDataToDisplay = !1) : g.showNoDataToDisplay = !0
        }
        var g = this
          , h = function(a) {
            angular.isDefined(a.statusObj) && f(a.statusObj.data)
        };
        g.showNoDataToDisplay = !0,
        g.getChartTitle = function(a) {
            var b = _.filter(g.providerStatusInstance.options.statusList, {
                key: a
            });
            return angular.isDefined(b) && b.length > 0 ? b[0].title : ""
        }
        ,
        g.$onInit = function() {
            b.subscribe("tenantStatusUpdate", h),
            angular.forEach(g.providerStatusInstance.options.statusList, function(b) {
                var f, h = {
                    header: {},
                    data: {}
                }, i = b.key;
                d(h),
                h.data = e(),
                f = c(),
                g.providerStatusInstance.charts[i] = new a(f[0],f[1]),
                g.providerStatusInstance.charts[i].setChartAPIData(h)
            })
        }
    }
    a.$inject = ["PieChart", "DashboardManagerCommunicationService"],
    angular.module("vManage").component("providerStatus", {
        templateUrl: "app/dashboard/widget/widgetLibrary/providerStatus/providerStatusTemplate.html",
        bindings: {
            providerStatusInstance: "="
        },
        controller: a,
        controllerAs: "providerStatusCtrl"
    })
}(),
function() {
    function a(a, b) {
        var c = {
            name: "providerStatus",
            apiURL: b.PROVIDER_STATUS,
            templateCacheKey: "widget-providerStatus",
            manualLoad: !0,
            statusList: [{
                key: "controlStatus",
                title: "Control Status"
            }, {
                key: "siteHealth",
                title: "Site Health"
            }, {
                key: "vEdgeHealth",
                title: "vEdge Health"
            }, {
                key: "vSmartStatus",
                title: "vSmart Status"
            }],
            performanceFactors: ["bad", "average", "good"]
        }
          , d = function(b) {
            this.options = angular.merge({}, c, b),
            a.call(this, this.options),
            this.charts = {}
        };
        return d.prototype = Object.create(a.prototype),
        d.prototype.constructor = d,
        d.prototype.setData = function(a) {
            var b = this;
            b.data = a
        }
        ,
        d
    }
    angular.module("vManage").factory("ProviderStatus", a),
    a.$inject = ["Widget", "dashboardApiConstants"]
}(),
function() {
    function a(a) {
        var b = {
            name: "siteHealth",
            title: "Site Health",
            tenantAPIStatusType: "siteHealth",
            templateURL: "app/dashboard/widget/widgetLibrary/siteHealth/siteHealthTemplate.html",
            viewConstants: [{
                key: "fullConnectivity",
                title: "Full Connectivity"
            }, {
                key: "partialConnectivity",
                title: "Partial Connectivity"
            }, {
                key: "noConnectivity",
                title: "No Connectivity"
            }],
            manualLoad: !0
        }
          , c = function(c) {
            this.options = angular.merge({}, b, c),
            a.call(this, this.options)
        };
        return c.prototype = Object.create(a.prototype),
        c.prototype.constructor = c,
        c
    }
    angular.module("vManage").factory("SiteHealth", a),
    a.$inject = ["TenantHealth"]
}(),
function() {
    function a(a, b, c, d) {
        function e(d) {
            if (angular.isDefined(d))
                f.tenantAlarmsListInstance.getAlarms(d).then(function() {
                    f.tenantAlarmsListInstance.hideSpinner()
                }, function() {
                    var d = b(f.tenantAlarmsListInstance.options.noDataTemplateStr)(c);
                    a.find(".alarms-list").eq(0).html(d),
                    f.tenantAlarmsListInstance.hideSpinner()
                });
            else {
                var e = b(f.tenantAlarmsListInstance.options.noDataTemplateStr)(c);
                a.find(".alarms-list").eq(0).html(e),
                f.tenantAlarmsListInstance.hideSpinner()
            }
        }
        var f = this;
        f.$onInit = function() {
            f.tenantAlarmsListInstance.showSpinner()
        }
        ;
        var g = function(a) {
            angular.isDefined(a.tenantObj) && a.tenantIsSelected && (f.tenantID = a.tenantObj.tenantId,
            f.tenantAlarmsListInstance.setTenantID(f.tenantID),
            e(f.tenantID))
        };
        d.subscribe("tenantSelectionUpdate", g)
    }
    a.$inject = ["$element", "$compile", "$scope", "DashboardManagerCommunicationService"],
    angular.module("vManage").component("tenantAlarmsList", {
        templateUrl: "app/dashboard/widget/widgetLibrary/tenantAlarmsList/tenantAlarmsListTemplate.html",
        bindings: {
            tenantAlarmsListInstance: "="
        },
        controller: a,
        controllerAs: "tenantAlarmsListCtrl"
    })
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        var i = {
            name: "tenantsAlarmsList",
            title: "Critical Alarms",
            eventsList: ["ALARMS"],
            eventUniqueID: "TENANT_ALARMS_LIST",
            templateCacheKey: "widget-tenantAlarms",
            manualLoad: !0
        }
          , j = function(c) {
            this.options = angular.merge({}, i, c),
            a.call(this, this.options),
            b.call(this, this.options),
            this.setAlarmsData = function(a, b) {
                return _.map(b, function(b) {
                    var c = new e(b.uuid,a,b.severity,b.entry_time);
                    return c.setTopSectionContent(b.rule_name_display),
                    c
                })
            }
        };
        return j.prototype = Object.create(a.prototype),
        j.prototype.showSpinner = b.prototype.showSpinner,
        j.prototype.hideSpinner = b.prototype.hideSpinner,
        j.prototype.isValidEventType = b.prototype.isValidEventType,
        j.prototype.registerEvents = b.prototype.registerEvents,
        j.prototype.getItemName = b.prototype.getItemName = function(a) {
            return angular.isDefined(a) && "" !== a && (a = a.replace(/ - /g, "_"),
            a = a.replace(/ /g, "_"),
            a = a.replace(/-/g, ""),
            a = a.split("(").join(""),
            a = a.split(")").join(""),
            a = a.split("/").join("_")),
            a
        }
        ,
        j.prototype.constructor = j,
        j.prototype.setTenantID = function(a) {
            var b = this;
            b.currentTenantID = a
        }
        ,
        j.prototype.refresh = function(a) {
            var b = this;
            angular.isDefined(a) || (a = b.currentTenantID),
            angular.isDefined(a) && b.getAlarms(a)
        }
        ,
        j.prototype.getAlarms = function(a) {
            var b = this
              , d = f.defer();
            return g.getVSessionId(a).then(function(a) {
                c.getActiveAlarms(a.httpResponseHeader.vsessionid).then(function(a) {
                    var c, e;
                    c = b.setAlarmsData("active", a.data),
                    e = _.filter(c, {
                        severity: "critical"
                    }),
                    angular.isDefined(e) && (b.options.active.data = angular.copy(e),
                    b.options.active.count = b.options.active.data.length),
                    d.resolve()
                }, function(a) {
                    h.error("Failed to get active alarms"),
                    d.reject()
                })
            }, function(a) {
                d.reject()
            }),
            d.promise
        }
        ,
        j
    }
    angular.module("vManage").factory("TenantAlarmsList", a),
    a.$inject = ["AlarmsManager", "Widget", "alarmsManagerService", "notification", "Alarm", "$q", "rbacService", "$log"]
}(),
function() {
    function a(a) {
        var b = this
          , c = function(a) {
            angular.isDefined(a.tenantObj) && a.tenantIsSelected && b.tenantHealthInstance.setData(a.tenantObj[b.tenantHealthInstance.options.tenantAPIStatusType])
        };
        a.subscribe("tenantSelectionUpdate", c)
    }
    a.$inject = ["DashboardManagerCommunicationService"],
    angular.module("vManage").component("tenantHealth", {
        template: '<div ng-include="tenantHealthCtrl.tenantHealthInstance.options.templateURL"> </div>',
        bindings: {
            tenantHealthInstance: "="
        },
        controller: a,
        controllerAs: "tenantHealthCtrl"
    })
}(),
function() {
    function a(a) {
        var b = {
            templateCacheKey: "widget-tenantHealth",
            manualLoad: !0
        }
          , c = function(c) {
            this.options = angular.merge({}, b, c),
            a.call(this, this.options)
        };
        return c.prototype = Object.create(a.prototype),
        c.prototype.constructor = c,
        c.prototype.setData = function(a) {
            var b = this
              , c = 0;
            angular.isDefined(b.data) || (b.data = {}),
            b.data.total = 0;
            for (var d in a)
                angular.isDefined(a[d]) && a.hasOwnProperty(d) && b.isValidKey(d) && a[d] > 0 && (c += a[d]);
            b.data = a,
            b.data.total = c
        }
        ,
        c.prototype.getNameByKey = function(a) {
            var b = this
              , c = _.filter(b.options.viewConstants, {
                key: a
            });
            return angular.isDefined(c) && c.length > 0 ? c[0].title : ""
        }
        ,
        c.prototype.isValidKey = function(a) {
            var b = this;
            return _.findIndex(b.options.viewConstants, {
                key: a
            }) > -1
        }
        ,
        c
    }
    angular.module("vManage").factory("TenantHealth", a),
    a.$inject = ["Widget"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        function i(a) {
            angular.isUndefined(k.selectedTenant) ? ($("#tenantList").animate({
                width: "40%",
                duration: 2e3
            }),
            $("#tenantDetails").animate({
                width: "60%",
                duration: 2e3
            }),
            k.selectedTenant = a) : k.selectedTenant === a ? ($("#tenantList").animate({
                width: "100%",
                duration: 2e3
            }),
            $("#tenantDetails").animate({
                width: "0%",
                duration: 2e3
            }),
            k.selectedTenant = void 0) : k.selectedTenant = a
        }
        function j(a) {
            g.publish("tenantStatusUpdate", {
                statusObj: a
            })
        }
        var k = this
          , l = function(a) {
            i(a.entity.tenantId),
            angular.isDefined(a) && angular.isDefined(a.entity) && g.publish("tenantSelectionUpdate", {
                tenantObj: a.entity,
                tenantIsSelected: a.isSelected
            })
        };
        k.selectedTenant = void 0,
        k.$onInit = function() {
            var b = {
                getIconString: function(a) {
                    return angular.isDefined(k.selectedTenant) && a.entity.tenantId === k.selectedTenant ? "keyboard_arrow_left" : "keyboard_arrow_right"
                }
            }
              , c = {
                autoLoad: !0,
                columnResizing: !0,
                enableRowSelection: !0,
                singleSelect: !1,
                multiSelect: !1,
                enableSorting: !0,
                tableName: "provider-dashboard-tenant-list",
                toggleFirstRowOnLoad: !0,
                headerRowHeight: 40,
                rowHeight: 40
            };
            k.tableObj = new f(c),
            k.tableObj.setAppScope(b),
            k.tableObj.setToolbar({
                search: !0,
                rowCount: !0,
                refresh: !1,
                menuColumnFilter: !1
            });
            var g = [{
                property: "display",
                value: "viewDetailsIcon",
                config: {
                    cellTemplate: '<div class="ui-grid-cell-contents" id="tenant_details_{{rowRenderIndex}}"><span id="view_tenant_details"><md-icon md-font-set="material-icons" class="material-icons md-24" style="color: #5abfdf">{{ grid.appScope.getIconString(row) }}</md-icon></span></div>',
                    enableFiltering: !1,
                    enableSorting: !1
                }
            }];
            k.tableObj.addCustomColumns(g),
            k.tableObj.setOnRowSelectionCallback(l),
            k.tenantListInstance.showSpinner(),
            k.tenantListInstance.getData().then(function() {
                angular.forEach(k.tenantListInstance.apiResponseObject.data, function(a) {
                    a.controlStatusIcon = h.computeClassNameByStatusType(a.controlStatus, "controlStatus"),
                    a.controlStatus.computedStatus = a.controlStatusIcon,
                    a.controlStatus.priority = h.getPriorityByStatus(a.controlStatusIcon),
                    a.siteHealthIcon = h.computeClassNameByStatusType(a.siteHealth, "siteHealth"),
                    a.siteHealth.computedStatus = a.siteHealthIcon,
                    a.siteHealth.priority = h.getPriorityByStatus(a.siteHealthIcon),
                    a.vEdgeHealthIcon = h.computeClassNameByStatusType(a.vEdgeHealth, "vEdgeHealth"),
                    a.vEdgeHealth.computedStatus = a.vEdgeHealthIcon,
                    a.vEdgeHealth.priority = h.getPriorityByStatus(a.vEdgeHealthIcon),
                    a.vSmartStatusIcon = h.computeClassNameByStatusType(a.vSmartStatus, "vSmartStatus"),
                    a.vSmartStatus.computedStatus = a.vSmartStatusIcon,
                    a.vSmartStatus.priority = h.getPriorityByStatus(a.vSmartStatusIcon)
                }),
                j(k.tenantListInstance.apiResponseObject),
                h.updateTenantListTableColumns(k.tenantListInstance.apiResponseObject.header.columns),
                k.tableObj.createColumns(k.tenantListInstance.apiResponseObject.header.columns),
                k.tableObj.setTableData(k.tenantListInstance.apiResponseObject.data),
                k.tenantListInstance.hideSpinner()
            }, function() {
                var b = e(k.tenantListInstance.options.noDataTemplateStr)(a);
                d.find(".tenant-list").eq(0).html(b),
                k.tenantListInstance.hideSpinner()
            })
        }
    }
    a.$inject = ["$scope", "$rootScope", "$timeout", "$element", "$compile", "Table", "DashboardManagerCommunicationService", "tenantListService"],
    angular.module("vManage").component("tenantList", {
        templateUrl: "app/dashboard/widget/widgetLibrary/tenantList/tenantListTemplate.html",
        bindings: {
            tenantListInstance: "="
        },
        controller: a,
        controllerAs: "tenantListCtrl"
    })
}(),
function() {
    function a(a, b, c, d) {
        var e = {
            name: "tenantList",
            title: "Tenant Overview",
            eventsList: ["TENANT_STATUS"],
            eventsTypeList: ["update"],
            eventUniqueID: "TENANT_LIST",
            apiURL: b.TENANT_LIST,
            templateCacheKey: "widget-tenantList",
            manualLoad: !0
        }
          , f = function(b) {
            this.options = angular.merge({}, e, b),
            a.call(this, this.options)
        };
        return f.prototype = Object.create(a.prototype),
        f.prototype.constructor = f,
        f.prototype.getData = function() {
            var a = this
              , b = c.defer();
            if (console.log("Widget factory: getData : " + this.options.name),
            angular.isDefined(this.options.apiURL))
                return d.get(this.options.apiURL).then(function(c) {
                    a.apiResponseObject = c,
                    b.resolve()
                }, function() {
                    b.reject()
                }),
                b.promise
        }
        ,
        f
    }
    angular.module("vManage").factory("TenantListFactory", a),
    a.$inject = ["Widget", "dashboardApiConstants", "$q", "restService"]
}(),
function() {
    function a() {
        function a(a, d) {
            return a.width = 50,
            a.minWidth = 50,
            a.dataType = "string",
            a.display = "icon",
            a.iconProperty = a.property + "Icon",
            a.property = a.iconProperty,
            a.icon = b,
            a.sort = {
                direction: "desc",
                priority: d,
                type: "stringToNumeric"
            },
            a.sortConfig = c,
            a
        }
        var b = [{
            key: "good",
            isMaterialDesignIcon: !0,
            materialDesignIconTextualName: "check_circle",
            materialDesignIconColorClass: "good"
        }, {
            key: "bad",
            isMaterialDesignIcon: !0,
            materialDesignIconTextualName: "cancel",
            materialDesignIconColorClass: "bad"
        }, {
            key: "average",
            isMaterialDesignIcon: !0,
            materialDesignIconTextualName: "warning",
            materialDesignIconColorClass: "average"
        }]
          , c = [{
            key: "good",
            value: 1
        }, {
            key: "average",
            value: 2
        }, {
            key: "bad",
            value: 3
        }];
        return {
            updateTenantListTableColumns: function(b) {
                var c;
                c = _.findIndex(b, {
                    property: "tenantName"
                }),
                c > -1 && (b[c].title = "Tenant",
                b[c].minWidth = 70),
                c = _.findIndex(b, {
                    property: "controlStatus"
                }),
                c > -1 && a(b[c], 0),
                c = _.findIndex(b, {
                    property: "siteHealth"
                }),
                c > -1 && a(b[c], 1),
                c = _.findIndex(b, {
                    property: "vEdgeHealth"
                }),
                c > -1 && a(b[c], 2),
                c = _.findIndex(b, {
                    property: "vSmartStatus"
                }),
                c > -1 && a(b[c], 3),
                b.push({
                    property: "details",
                    title: "",
                    dataType: "string",
                    isDisplay: !0,
                    display: "viewDetailsIcon",
                    width: 50
                })
            },
            computeClassNameByStatusType: function(a, b) {
                var c = "";
                switch (b) {
                case "controlStatus":
                    c = angular.isDefined(a.controlDown) && a.controlDown > 0 ? "bad" : angular.isDefined(a.partial) && a.partial > 0 ? "average" : "good";
                    break;
                case "vEdgeHealth":
                    c = angular.isDefined(a.error) && a.error > 0 ? "bad" : angular.isDefined(a.warning) && a.warning > 0 ? "average" : "good";
                    break;
                case "siteHealth":
                    c = angular.isDefined(a.noConnectivity) && a.noConnectivity > 0 ? "bad" : angular.isDefined(a.partialConnectivity) && a.partialConnectivity > 0 ? "average" : "good";
                    break;
                case "vSmartStatus":
                    if (angular.isDefined(a.down) && angular.isDefined(a.up)) {
                        var d = a.down + a.up;
                        c = a.down > 0 && a.down === d ? "bad" : a.down > 0 && 100 * (d - a.down) / d > 50 ? "average" : "good";
                        break
                    }
                }
                return c
            },
            getPriorityByStatus: function(a) {
                return "good" == a ? 1 : "average" == a ? 2 : 3
            }
        }
    }
    angular.module("vManage").factory("tenantListService", a),
    a.$inject = []
}(),
function() {
    function a(a, b, c) {
        var d = this;
        d.$onInit = function() {
            d.providerStatusInstance = new b,
            d.tenantListInstance = new a,
            d.tenantStatusDashboardInstance = new c
        }
    }
    a.$inject = ["TenantListFactory", "ProviderStatus", "TenantStatusDashboardFactory"],
    angular.module("vManage").component("tenantOverview", {
        templateUrl: "app/dashboard/widget/widgetLibrary/tenantOverview/tenantOverviewTemplate.html",
        controller: a,
        controllerAs: "tenantOverviewCtrl"
    })
}(),
function() {
    function a(a, b) {
        var c = this
          , d = function(a) {
            angular.isDefined(a.tenantObj) && a.tenantIsSelected ? (c.tenantStatusDashboardInstance.setTenantName(a.tenantObj.tenantName),
            c.tenantStatusDashboardInstance.setTenantId(a.tenantObj.tenantId),
            c.tenantStatusDashboardInstance.setTenantObj(a.tenantObj)) : c.tenantStatusDashboardInstance.resetTenantSelection()
        };
        b.subscribe("tenantSelectionUpdate", d),
        c.switchToTenantButtonClickHandler = function() {
            var b = {
                tenantId: c.tenantStatusDashboardInstance.getTenantId()
            };
            a.$broadcast("switchToTenantView", {
                tenant: b
            })
        }
    }
    a.$inject = ["$rootScope", "DashboardManagerCommunicationService"],
    angular.module("vManage").component("tenantStatusDashboard", {
        templateUrl: "app/dashboard/widget/widgetLibrary/tenantStatusDashboard/tenantStatusDashboardTemplate.html",
        bindings: {
            tenantStatusDashboardInstance: "="
        },
        controller: a,
        controllerAs: "tenantStatusDashboardCtrl"
    })
}(),
function() {
    function a(a, b) {
        var c = {
            name: "TenantStatusDashboard",
            id: "tenant_status_dashboard",
            templateCacheKey: "widget-tenantStatusDashboard",
            noDataTemplateURL: "app/dashboard/widget/widgetLibrary/templates/noTenantSelectedTemplate.html",
            gridsterObj: {
                columns: 4,
                minColumns: 4,
                colWidth: "auto",
                outerMargin: !1,
                maxRows: 18
            },
            customGridsterObj: {
                rowHeightInPercentage: .057,
                marginBetweenWidgets: 15,
                minContainerWidth: 500,
                minColWidth: 150,
                minRowHeight: 30,
                bufferForGridHeight: 5
            },
            manualLoad: !0
        }
          , d = function(d) {
            this.options = angular.merge({}, c, d),
            a.call(this, this.options),
            a.prototype.addWidgets.call(this, b.getWidgetsList())
        };
        return d.prototype = Object.create(a.prototype),
        d.prototype.constructor = d,
        d.prototype.setTenantName = function(a) {
            var b = this;
            b.selectedTenantName = a
        }
        ,
        d.prototype.getTenantName = function() {
            var a = this;
            return a.selectedTenantName
        }
        ,
        d.prototype.setTenantId = function(a) {
            var b = this;
            b.selectedTenantId = a
        }
        ,
        d.prototype.getTenantId = function() {
            var a = this;
            return a.selectedTenantId
        }
        ,
        d.prototype.resetTenantSelection = function() {
            var a = this;
            a.selectedTenantId = void 0,
            a.selectedTenantName = void 0
        }
        ,
        d.prototype.setTenantObj = function(a) {
            var b = this;
            b.tenantObj = a
        }
        ,
        d.prototype.getTenantObj = function(a) {
            var b = this;
            return b.tenantObj
        }
        ,
        d
    }
    angular.module("vManage").factory("TenantStatusDashboardFactory", a),
    a.$inject = ["DashboardManager", "TenantStatusDashboardService"]
}(),
function() {
    function a() {
        var a = [{
            col: 0,
            row: 0,
            sizeY: 6,
            sizeX: 2,
            name: "controlStatus",
            className: "ControlStatus"
        }, {
            col: 2,
            row: 0,
            sizeY: 2,
            sizeX: 2,
            name: "vSmartHealth",
            className: "VSmartHealth"
        }, {
            col: 2,
            row: 2,
            sizeY: 16,
            sizeX: 2,
            name: "alarmsList",
            className: "TenantAlarmsList"
        }, {
            col: 0,
            row: 6,
            sizeY: 6,
            sizeX: 2,
            name: "siteHealth",
            className: "SiteHealth"
        }, {
            col: 0,
            row: 12,
            sizeY: 6,
            sizeX: 2,
            name: "vEdgeHealth",
            className: "VEdgeHealth"
        }];
        return {
            getWidgetsList: function() {
                return a
            }
        }
    }
    angular.module("vManage").service("TenantStatusDashboardService", a),
    a.$inject = []
}(),
function() {
    function a(a, b, c) {
        var d = this;
        d.$onInit = function() {
            d.vBondHealthInstance.showSpinner(),
            d.vBondHealthInstance.getData().then(function() {
                d.vBondHealthInstance.hideSpinner()
            }, function() {
                var e = c(d.vBondHealthInstance.options.noDataTemplateStr)(b);
                a.find(".deviceData").eq(0).html(e),
                d.vBondHealthInstance.hideSpinner()
            })
        }
    }
    a.$inject = ["$element", "$scope", "$compile"],
    angular.module("vManage").component("vBondHealth", {
        templateUrl: "app/dashboard/widget/widgetLibrary/vBondHealth/vBondHealthTemplate.html",
        bindings: {
            vBondHealthInstance: "=",
            openDialogClickHandler: "&"
        },
        controller: a,
        controllerAs: "vBondHealthCtrl"
    })
}(),
function() {
    function a(a, b, c, d) {
        var e = {
            name: "vBondStatus",
            apiURL: b.V_DEVICE_STATUS,
            permissions: ["Device Monitoring"],
            eventsList: ["DEVICE"],
            eventsTypeList: ["sync"],
            eventUniqueID: "V_BOND_STATUS",
            templateCacheKey: "widget-vBondHealth",
            manualLoad: !0,
            dialogDetails: {
                enabled: !0,
                dialogInstance: {
                    template: '<md-dialog flex="75" id="modal-popup"><v-widget-modal data-parent-api-response="parentApiResponse" class="inherit-parent-dimensions"></v-widget-modal></md-dialog>',
                    preserveScope: !0,
                    clickOutsideToClose: !0,
                    scope: void 0
                },
                modalClassName: "VBondHealthDialogFactory",
                templateCacheKey: "widget-vBondHealthDialog"
            }
        }
          , f = function(b) {
            this.options = angular.merge({}, e, b),
            a.call(this, this.options)
        };
        return f.prototype = Object.create(a.prototype),
        f.prototype.constructor = f,
        f.prototype.getData = function() {
            var a = this
              , b = d.defer();
            if (angular.isDefined(this.options.apiURL))
                return c.get(this.options.apiURL).then(function(c) {
                    if (angular.isDefined(c.data) && c.data.length > 0) {
                        var d = _.find(c.data, {
                            name: "vBond"
                        });
                        angular.isDefined(d) && (c.data = d),
                        a.apiResponseObject = c,
                        b.resolve()
                    } else
                        b.reject()
                }, function() {
                    b.reject()
                }),
                b.promise
        }
        ,
        f.prototype.setResolveObj = function(a, b) {
            var c = this
              , d = angular.extend(b.$new(!0), {
                parentApiResponse: {
                    url: "up" === a ? c.apiResponseObject.data.detailsURL : c.apiResponseObject.data.statusList[0].detailsURL,
                    title: "up" === a ? "vEdge : Reachable" : "vEdge : Unreachable",
                    templateCacheKey: c.options.dialogDetails.templateCacheKey,
                    modalClassName: c.options.dialogDetails.modalClassName
                }
            });
            c.options.dialogDetails.dialogInstance.scope = d
        }
        ,
        f
    }
    angular.module("vManage").factory("VBondHealthFactory", a),
    a.$inject = ["Widget", "dashboardApiConstants", "restService", "$q"]
}(),
function() {
    function a(a) {
        var b = {
            name: "vEdgeHealth",
            title: "vEdge Health",
            iconText: "vEdge",
            tenantAPIStatusType: "vEdgeHealth",
            templateURL: "app/dashboard/widget/widgetLibrary/vEdgeHealth/vEdgeHealthTemplate.html",
            viewConstants: [{
                key: "normal",
                title: "Normal"
            }, {
                key: "warning",
                title: "Warning"
            }, {
                key: "error",
                title: "Error"
            }],
            manualLoad: !0
        }
          , c = function(c) {
            this.options = angular.merge({}, b, c),
            a.call(this, this.options)
        };
        return c.prototype = Object.create(a.prototype),
        c.prototype.constructor = c,
        c
    }
    angular.module("vManage").factory("VEdgeHealth", a),
    a.$inject = ["TenantHealth"]
}(),
function() {
    function a(a, b) {
        var c = {
            name: "vManageStatus",
            apiURL: b.V_MANAGE_STATUS,
            permissions: ["Device Monitoring"],
            eventsList: ["CLUSTER"],
            eventsTypeList: ["sync"],
            eventUniqueID: "V_MANAGE_CLUSTER",
            templateCacheKey: "widget-vManageHealth",
            manualLoad: !1,
            dialogDetails: {
                enabled: !0,
                dialogInstance: {
                    template: '<md-dialog flex="75" id="modal-popup"><v-widget-modal data-parent-api-response="parentApiResponse" class="inherit-parent-dimensions"></v-widget-modal></md-dialog>',
                    preserveScope: !0,
                    clickOutsideToClose: !0,
                    scope: void 0
                },
                modalClassName: "VManageHealthDialogFactory",
                templateCacheKey: "widget-vManageHealthDialog"
            }
        }
          , d = function(b) {
            this.options = angular.merge({}, c, b),
            a.call(this, this.options)
        };
        return d.prototype = Object.create(a.prototype),
        d.prototype.constructor = d,
        d.prototype.setResolveObj = function(a, b) {
            var c = this
              , d = angular.extend(b.$new(!0), {
                parentApiResponse: {
                    url: "up" === a ? c.apiResponseObject.data[0].detailsURL : c.apiResponseObject.data[0].statusList[0].detailsURL,
                    title: "up" === a ? "vManage : Reachable" : "vManage : Unreachable",
                    templateCacheKey: c.options.dialogDetails.templateCacheKey,
                    modalClassName: c.options.dialogDetails.modalClassName
                }
            });
            c.options.dialogDetails.dialogInstance.scope = d
        }
        ,
        d
    }
    angular.module("vManage").factory("VManageHealthFactory", a),
    a.$inject = ["Widget", "dashboardApiConstants"]
}(),
function() {
    function a(a) {
        var b = {
            name: "vSmartStatus",
            title: "vSmart Health",
            iconText: "vSmart",
            tenantAPIStatusType: "vSmartStatus",
            templateURL: "app/dashboard/widget/widgetLibrary/vSmartHealth/vSmartHealthTemplate.html",
            viewConstants: [{
                key: "up",
                title: "Up"
            }, {
                key: "down",
                title: "Down"
            }],
            manualLoad: !0
        }
          , c = function(c) {
            this.options = angular.merge({}, b, c),
            a.call(this, this.options)
        };
        return c.prototype = Object.create(a.prototype),
        c.prototype.constructor = c,
        c
    }
    angular.module("vManage").factory("VSmartHealth", a),
    a.$inject = ["TenantHealth"]
}(),
function() {
    function a(a, b, c, d, e) {
        function f(d) {
            var e = angular.element(d);
            a.find(".modal-content-wrapper").eq(0).html(e),
            c(e)(b)
        }
        var g = this;
        g.$onInit = function() {
            var a;
            angular.isDefined(g.parentApiResponse.modalClassName) && (a = e.get(g.parentApiResponse.modalClassName)),
            angular.isDefined(a) && "function" == typeof a && (g.widgetInstance = new a),
            angular.isDefined(g.widgetInstance) && (!angular.isDefined(g.widgetInstance.options.templateStr) && angular.isDefined(g.widgetInstance.options.templateCacheKey) && (g.widgetInstance.options.templateStr = d.get(g.widgetInstance.options.templateCacheKey)),
            g.widgetInstance.setApiURL(g.parentApiResponse.url),
            g.widgetInstance.setTitle(g.parentApiResponse.title),
            g.widgetInstance.options.manualLoad ? f(g.widgetInstance.options.templateStr) : g.widgetInstance.getData().then(function() {
                f(g.widgetInstance.options.templateStr)
            }, function() {
                f(g.widgetInstance.options.noDataTemplateStr)
            }))
        }
    }
    a.$inject = ["$element", "$scope", "$compile", "$templateCache", "$injector"],
    angular.module("vManage").component("vWidgetModal", {
        templateUrl: "app/dashboard/widgetDialog/widgetDialogTemplate.html",
        bindings: {
            parentApiResponse: "="
        },
        controller: a,
        controllerAs: "widgetModalCtrl"
    })
}(),
function() {
    function a(a, b, c) {
        var d = {
            modalType: "fullModalHeight",
            dashboardModalOffSetHeight: 75
        }
          , e = function(a) {
            this.options = angular.merge({}, d, a)
        };
        return e.prototype.constructor = e,
        e.prototype.getData = function() {
            var c = this
              , d = b.defer();
            if (angular.isDefined(this.options.apiURL))
                return a.get(this.options.apiURL).then(function(a) {
                    c.apiResponse = a,
                    d.resolve()
                }, function() {
                    d.reject()
                }),
                d.promise
        }
        ,
        e.prototype.setApiURL = function(a) {
            var b = this;
            b.options.apiURL = a
        }
        ,
        e.prototype.setTitle = function(a) {
            var b = this;
            b.options.title = a
        }
        ,
        e.prototype.getModalOffsetHeight = function() {
            var a = this;
            return c.computeTableHeightOffset(a.options.modalType, a.options.dashboardModalOffSetHeight)
        }
        ,
        e
    }
    angular.module("vManage").factory("WidgetDialog", a),
    a.$inject = ["restService", "$q", "tenantDashboardService"]
}(),
function() {
    function a(a, b) {
        var c = this;
        c.tableObj = new a({
            autoLoad: !0,
            singleSelect: !1,
            columnResizing: !0,
            enableSorting: !0,
            name: "certificateHealthDialog"
        }),
        c.tableObj.setToolbar({
            addRow: !1,
            search: !0,
            rowCount: !0,
            refresh: !0
        }),
        c.$onInit = function() {
            c.tableObj.options.tableHeightOffset = c.certificateHealthDialogInstance.getModalOffsetHeight();
            var a = c.certificateHealthDialogInstance.apiResponse;
            angular.isDefined(a) && angular.isDefined(a.header) && angular.isDefined(a.header.columns) && angular.isDefined(a.data) ? (c.tableObj.createColumns(a.header.columns),
            c.tableObj.setTableData(a.data),
            c.tableObj.setDataUrl(c.certificateHealthDialogInstance.options.apiURL)) : (c.tableObj.setDataUrl(c.certificateHealthDialogInstance.options.apiURL),
            c.tableObj.setTableData([]))
        }
        ,
        c.closeDialogClickHandler = function() {
            b.hide()
        }
    }
    a.$inject = ["Table", "$mdDialog"],
    angular.module("vManage").component("certificateHealthDialog", {
        templateUrl: "app/dashboard/widgetDialog/widgetDialogLibrary/certificateHealthDialog/certificateHealthDialogTemplate.html",
        bindings: {
            certificateHealthDialogInstance: "="
        },
        controller: a,
        controllerAs: "certificateHealthDialogCtrl"
    })
}(),
function() {
    function a(a) {
        var b = {
            name: "CertificateHealthDetails",
            title: void 0,
            apiURL: void 0,
            modalType: "fullModalHeight",
            templateCacheKey: "widget-certificateHealthDialog"
        }
          , c = function(c) {
            this.options = angular.merge({}, b, c),
            a.call(this, this.options)
        };
        return c.prototype = Object.create(a.prototype),
        c.prototype.constructor = c,
        c
    }
    angular.module("vManage").factory("CertificateHealthDialogFactory", a),
    a.$inject = ["WidgetDialog"]
}(),
function() {
    function a(a, b, c) {
        var d = this;
        d.tableObj = new a({
            autoLoad: !0,
            singleSelect: !0,
            columnResizing: !0,
            enableSorting: !0,
            name: "vBondHealthDialog"
        }),
        d.tableObj.setToolbar({
            addRow: !1,
            search: !0,
            rowCount: !0,
            refresh: !0
        }),
        d.$onInit = function() {
            d.tableObj.options.tableHeightOffset = d.vBondHealthDialogInstance.getModalOffsetHeight();
            var a = d.vBondHealthDialogInstance.apiResponse;
            if (angular.isDefined(a) && angular.isDefined(a.header) && angular.isDefined(a.header.columns) && angular.isDefined(a.data)) {
                var b = new c
                  , e = b.getDeviceActionDropDownObj();
                d.tableObj.setHoverAction(e),
                d.tableObj.setSingleSelect(),
                d.tableObj.createColumns(a.header.columns),
                d.tableObj.setTableData(a.data),
                d.tableObj.setDataUrl(d.vBondHealthDialogInstance.options.apiURL)
            } else
                d.tableObj.setDataUrl(d.vBondHealthDialogInstance.options.apiURL),
                d.tableObj.setTableData([])
        }
        ,
        d.closeDialogClickHandler = function() {
            b.hide()
        }
    }
    a.$inject = ["Table", "$mdDialog", "DeviceActionDropDownFactory"],
    angular.module("vManage").component("vBondHealthDialog", {
        templateUrl: "app/dashboard/widgetDialog/widgetDialogLibrary/vBondHealthDialog/vBondHealthDialogTemplate.html",
        bindings: {
            vBondHealthDialogInstance: "="
        },
        controller: a,
        controllerAs: "vBondHealthDialogCtrl"
    })
}(),
function() {
    function a(a) {
        var b = {
            name: "vBondHealthDialog",
            templateCacheKey: "widget-vBondHealthDialog"
        }
          , c = function(c) {
            this.options = angular.merge({}, b, c),
            a.call(this, this.options)
        };
        return c.prototype = Object.create(a.prototype),
        c.prototype.constructor = c,
        c
    }
    angular.module("vManage").factory("VBondHealthDialogFactory", a),
    a.$inject = ["WidgetDialog"]
}(),
function() {
    function a(a, b, c) {
        var d = this;
        d.tableObj = new a({
            autoLoad: !0,
            singleSelect: !0,
            columnResizing: !0,
            enableSorting: !0,
            name: "vManageHealthDialog"
        }),
        d.tableObj.setToolbar({
            addRow: !1,
            search: !0,
            rowCount: !0,
            refresh: !0
        }),
        d.$onInit = function() {
            d.tableObj.options.tableHeightOffset = d.vManageHealthDialogInstance.getModalOffsetHeight();
            var a = d.vManageHealthDialogInstance.apiResponse;
            if (angular.isDefined(a) && angular.isDefined(a.header) && angular.isDefined(a.header.columns) && angular.isDefined(a.data)) {
                var b = new c
                  , e = b.getDeviceActionDropDownObj();
                d.tableObj.setHoverAction(e),
                d.tableObj.setSingleSelect(),
                d.tableObj.createColumns(a.header.columns),
                d.tableObj.setTableData(a.data),
                d.tableObj.setDataUrl(d.vManageHealthDialogInstance.options.apiURL)
            } else
                d.tableObj.setDataUrl(d.vManageHealthDialogInstance.options.apiURL),
                d.tableObj.setTableData([])
        }
        ,
        d.closeDialogClickHandler = function() {
            b.hide()
        }
    }
    a.$inject = ["Table", "$mdDialog", "DeviceActionDropDownFactory"],
    angular.module("vManage").component("vManageHealthDialog", {
        templateUrl: "app/dashboard/widgetDialog/widgetDialogLibrary/vManageHealthDialog/vManageHealthDialogTemplate.html",
        bindings: {
            vManageHealthDialogInstance: "="
        },
        controller: a,
        controllerAs: "vManageHealthDialogCtrl"
    })
}(),
function() {
    function a(a) {
        var b = {
            name: "vManageHealthDialog",
            templateCacheKey: "widget-vManageHealthDialog"
        }
          , c = function(c) {
            this.options = angular.merge({}, b, c),
            a.call(this, this.options)
        };
        return c.prototype = Object.create(a.prototype),
        c.prototype.constructor = c,
        c
    }
    angular.module("vManage").factory("VManageHealthDialogFactory", a),
    a.$inject = ["WidgetDialog"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m) {
        function n(a, b) {
            var c = _.find(a.columns, {
                property: "status"
            });
            if (angular.isDefined(c))
                var d = _.find(c.icon, {
                    key: b
                });
            return angular.isDefined(d) ? d.value : ""
        }
        function o() {
            k.unsubscribe(w),
            h.getDeviceStatus(y).then(function(b) {
                g.isUndefinedOrEmpty(b) ? (a.resultSummary = "No Active Device Found",
                s = g.stopPolling(s)) : (angular.isDefined(b.data) && b.data.length > 0 && (t = b.data[0].processId),
                a.isCancelEnabled = !1,
                g.isUndefinedOrEmpty(a.table.columnDefs) && a.table.createColumns(b.header.columns),
                p(b.data),
                angular.isDefined(b.summary) && (a.userSessionIP = b.summary.userSessionIP,
                a.userSessionUserName = b.summary.userSessionUserName,
                a.taskTitle = b.summary.name,
                a.tenantName = b.summary.tenantName),
                angular.isDefined(b.validation) && b.summary && b.header && q(b),
                r(b),
                "done" === b.summary.status && (s = g.stopPolling(s)),
                angular.forEach(b.data, function(c) {
                    a.isCancelEnabled = !a.isCancelEnabled && b.isCancelEnabled ? angular.equals(c.statusId, "scheduled") : a.isCancelEnabled
                }),
                k.subscribe(w))
            }, function(b) {
                angular.isObject(b) && g.checkNestedProperty(b, "error", "details") ? j.error(b.error.message + ": " + b.error.details) : j.error("Error occurred retrieving status for action " + c.params.activity),
                e.error("Server returned error in getting device status for url " + c.params.dataUrl),
                a.table.error = !0,
                s = g.stopPolling(s),
                k.subscribe(w)
            })
        }
        function p(b) {
            angular.forEach(b, function(a) {
                a.activityList = "",
                angular.forEach(a.activity, function(b) {
                    a.activityList += b + "\n"
                })
            }),
            a.table.taggedSearchObject.setSearchCache(b),
            a.table.refreshTableData(b),
            a.table.taggedSearchObject.searchData()
        }
        function q(b) {
            var c = "";
            a.showValidationSummary = !0,
            angular.forEach(b.validation.activity, function(a) {
                c += a + "\n"
            }),
            a.validationDetails = c;
            var d = "<div> <span>| </span>"
              , e = n(b.header, b.validation.statusId);
            angular.isDefined(e) && (d = d + '<img src="' + e + '"></img>'),
            d = d + '<span style="margin-left:10px;> ' + b.validation.status + "</span>",
            d += "</div>",
            a.validationSummary = d
        }
        function r(b) {
            a.resultSummary = "Total Task: " + b.summary.total;
            for (var c in b.summary.count)
                a.resultSummary += " | " + i("formatTitle")(c.replace("_", " ")) + " : " + b.summary.count[c]
        }
        a.stateString = g.getStateString(c),
        a.resultSummary = "",
        a.validationSummary = "",
        a.showValidationSummary = !1,
        a.isCancelEnabled = !1,
        a.userMode = m.getUserMode();
        var s, t, u = k.returnEventsEnum(), v = k.returnViewsEnum(), w = new l(v.DEVICE_STATUS,[u.DEVICE_ACTION]);
        if (a.table = new f({
            columnResizing: !0,
            enableSorting: !0,
            autoLoad: !0,
            enableExpandable: !0,
            tableHeightOffset: 200,
            dataUid: "deviceID"
        },{
            dynamicRefresh: !0
        },{
            enableExpandableRowHeader: !0,
            reduceExpandableWidth: 40,
            expandableRowTemplate: "app/device/status/views/statusDetailTemplate.html"
        }),
        a.table.setAppScope({
            scrollUp: function(a) {
                var b = $(a.currentTarget).parent().siblings("pre");
                b.scrollTop(b.scrollTop() - 50)
            },
            scrollDown: function(a) {
                var b = $(a.currentTarget).parent().siblings("pre");
                b.scrollTop(b.scrollTop() + 50)
            }
        }),
        g.checkNestedProperty(c, "params", "activity") && c.params.activity) {
            var x = "";
            g.checkNestedProperty(c, "params", "pid") && angular.isDefined(c.params.pid) ? x = c.params.pid : (x = h.getStatusEndpoint(c.params.activity.toLowerCase()),
            "" === x && j.error("Invalid input: Device action null not supported"));
            var y = h.getStatusUrl() + x;
            a.table.setDataUrl(y),
            a.table.onRefreshCallback = o,
            o(),
            s = b(function() {
                o()
            }, 3e4),
            a.$on("device-action_event", function(a, b) {
                o()
            })
        } else
            j.error("Invalid input: Device action null not supported"),
            a.table.error = !0;
        a.stopScheduledTasks = function() {
            h.stopScheduledTasks(t).then(function() {
                o()
            })
        }
        ,
        a.openModal = function(b) {
            var c = d.confirm().title("Are you sure you want to cancel all the scheduled tasks?").textContent("This scheduled tasks will be cancelled immediately. You cannot undo the action.").targetEvent(b).ok("OK").cancel("Cancel");
            d.show(c).then(function() {
                a.stopScheduledTasks()
            }, function() {})
        }
        ,
        a.$on("$destroy", function() {
            s = g.stopPolling(s),
            k.unsubscribe(w)
        })
    }
    angular.module("vManage").controller("StatusController", a),
    a.$inject = ["$scope", "$interval", "$state", "$mdDialog", "$log", "Table", "appUtil", "StatusService", "$filter", "notification", "eventPoll", "eventListObject", "rbac"]
}(),
angular.module("vManage").factory("StatusService", StatusService),
StatusService.$inject = ["restService"],
angular.module("vManage").factory("maintenanceService", maintenanceService),
maintenanceService.$inject = ["$http", "$q", "$log", "restService", "maintenanceApiConstants"],
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        a.stateString = f.getStateString(c),
        a.showErrorSection = !1,
        a.serverCall = !1,
        a.errorMessage = "",
        a.rebootVmanage = !1,
        a.confirmMsg = {
            msg: "Rebooting the device will bring down control and data connections. Are you sure you want to proceed?"
        },
        1 === g.length && "vmanage" === g[0].personality && (a.confirmMsg.msg = "Rebooting vManage will logout all active clients and bring down control connections. Are you sure you want to proceed?",
        a.rebootVmanage = !0),
        a.reboot = function() {
            a.serverCall = !0;
            var e = [];
            e = _.map(g, function(a) {
                return a = {
                    deviceIP: a["system-ip"],
                    deviceId: a.uuid
                }
            }),
            h.rebootDevice(e, j.deviceType).then(function(d) {
                a.serverCall = !1,
                a.showErrorSection = !1,
                b.hide(a.textarea),
                1 == j.numOfDevices && "vmanage" === j.deviceType ? k.$broadcast("logoutUser", {
                    url: "/logout?reason=reboot"
                }) : c.go("app.device.status", {
                    activity: i.getStatusAction("REBOOT").endpoint,
                    pid: d ? d.id : ""
                })
            }, function(b, c, e, f) {
                d.error("error occurred: Reboot failed"),
                a.errorMessage != b && (a.showErrorSection = !0,
                a.errorMessage = b,
                a.serverCall = !1)
            })
        }
        ,
        a.cancel = function() {
            b.cancel(a.textarea)
        }
    }
    angular.module("vManage").controller("softwareRebootConfirmationCtrl", a),
    a.$inject = ["$scope", "$mdDialog", "$state", "$log", "$window", "appUtil", "selectedRow", "maintenanceService", "StatusService", "device", "$rootScope"]
}(),
angular.module("vManage").controller("RebootController", RebootController),
RebootController.$inject = ["$scope", "$state", "$mdDialog", "$log", "rbac", "Table", "appUtil", "maintenanceApiConstants", "rebootDeviceURL", "notification"],
angular.module("vManage").controller("addNewSwFromRemoteServerController", addNewSwFromRemoteServerController),
addNewSwFromRemoteServerController.$inject = ["$rootScope", "$scope", "$mdDialog", "$state", "$log", "appUtil", "maintenanceService"],
angular.module("vManage").controller("addNewSwFromRemotevManageController", addNewSwFromRemotevManageController),
addNewSwFromRemotevManageController.$inject = ["$scope", "$mdDialog", "$state", "$log", "$compile", "appUtil", "maintenanceService", "notification", "vipValidation", "deviceTypeConstants"],
angular.module("vManage").controller("addNewSwFromVmanageController", addNewSwFromVmanageController),
addNewSwFromVmanageController.$inject = ["$scope", "$mdDialog", "$state", "$log", "$compile", "appUtil", "maintenanceService", "notification", "vipValidation", "deviceTypeConstants"],
angular.module("vManage").controller("softwareUpgradeErrorCtrl", softwareUpgradeErrorCtrl),
softwareUpgradeErrorCtrl.$inject = ["$scope", "$mdDialog", "$state", "$log", "appUtil"],
angular.module("vManage").controller("softwareUpgradeActionActivateCtrl", softwareUpgradeActionActivateCtrl),
softwareUpgradeActionActivateCtrl.$inject = ["$scope", "$mdDialog", "$state", "$log", "$window", "maintenanceService", "selectedRow", "appUtil", "$timeout", "StatusService", "device", "noUuidCount", "$rootScope"],
angular.module("vManage").controller("softwareUpgradeActionDeleteCtrl", softwareUpgradeActionDeleteCtrl),
softwareUpgradeActionDeleteCtrl.$inject = ["$scope", "$mdDialog", "$state", "$log", "noUuidCount", "maintenanceService", "selectedRow", "appUtil", "$filter", "StatusService", "device"],
angular.module("vManage").controller("softwareUpgradeActionUpgradeCtrl", softwareUpgradeActionUpgradeCtrl),
softwareUpgradeActionUpgradeCtrl.$inject = ["$scope", "noUuidCount", "$mdDialog", "$state", "$log", "$window", "appUtil", "selectedRow", "maintenanceService", "StatusService", "device", "$rootScope", "rbac"],
angular.module("vManage").controller("softwareUpgradeActionDefaultCtrl", softwareUpgradeActionDefaultCtrl),
softwareUpgradeActionDefaultCtrl.$inject = ["$scope", "$mdDialog", "$state", "$log", "noUuidCount", "maintenanceService", "selectedRow", "appUtil", "$timeout", "StatusService", "device"],
angular.module("vManage").controller("SoftwareUpgradeController", SoftwareUpgradeController),
SoftwareUpgradeController.$inject = ["$scope", "$state", "$mdDialog", "$log", "Table", "appUtil", "rbac", "maintenanceApiConstants", "installDeviceURL"],
angular.module("vManage").controller("SoftwareUpgradeRepositoryController", SoftwareUpgradeRepositoryController),
SoftwareUpgradeRepositoryController.$inject = ["$scope", "$state", "$timeout", "$log", "Table", "appUtil", "maintenanceService", "rbac", "notification", "$mdDialog"],
function() {
    var a = function(a, b, c, d, e, f, g, h, i) {
        function j(b) {
            for (var c in a.categoryDetails)
                if (a.categoryDetails.hasOwnProperty(c) && c === b) {
                    var d = a.categoryDetails[c];
                    for (var e in d)
                        if (d.hasOwnProperty(e))
                            return d[e].url
                }
        }
        function k(b) {
            for (var c in a.categoryDetails)
                if (a.categoryDetails.hasOwnProperty(c) && c === b) {
                    var d = a.categoryDetails[c];
                    for (var e in d)
                        if (d.hasOwnProperty(e))
                            return !!angular.isDefined(d[e].isMultiVmanageEnabled) && d[e].isMultiVmanageEnabled
                }
        }
        function l(b) {
            for (var c in a.categoryDetails)
                if (a.categoryDetails.hasOwnProperty(c) && c === b) {
                    var d = a.categoryDetails[c];
                    for (var e in d)
                        if (d.hasOwnProperty(e))
                            return !!angular.isDefined(d[e].method)
                }
        }
        function m(a) {
            h.get(a).then(function(a) {
                t = a.data.server,
                n(r)
            }, function(a) {})
        }
        function n(b) {
            a.vManageList = [],
            h.get(b).then(function(b) {
                for (var c = b, d = 0, e = c.data.length; d < e; d++) {
                    var f = {
                        id: d,
                        value: c.data[d]["host-name"] + " - " + c.data[d]["local-system-ip"],
                        key: c.data[d]["local-system-ip"]
                    };
                    if (a.vManageList.push(f),
                    c.data[d]["host-name"] === t && 0 !== d) {
                        var g = a.vManageList[d];
                        a.vManageList[d] = a.vManageList[0],
                        a.vManageList[0] = g
                    }
                }
                a.vManageList.length > 0 && (a.hostVmanageIP = a.vManageList[0].key,
                a.selectedVManage = a.vManageList[0]),
                o()
            }, function(a) {})
        }
        function o() {
            h.get(q).then(function(b) {
                a.urlData = b;
                for (var c = 0, d = a.urlData.category.length; c < d; c++)
                    a.categories[c] = a.urlData.category[c],
                    0 === c && (u = a.categories[0].name);
                for (var c = 0, d = a.urlData.categoryDetails.length; c < d; c++)
                    a.categoryDetails = a.urlData.categoryDetails[c];
                a.displaySubCategories(u)
            }, function(a) {
                b.log(data.error + " " + status)
            })
        }
        function p() {
            m(s)
        }
        var q = e.managementHome
          , r = e.vManageList
          , s = e.hostVmanage;
        a.categories = [],
        a.categoryDetails = [],
        a.urlData = {},
        a.jsonData = null,
        a.currentURL = null,
        a.subCategories = [],
        a.vManageList = [],
        a.vManageDisplayList = [];
        var t = null;
        a.hostVmanageIP = null,
        a.selectedVManage = null;
        f.name,
        f.url;
        a.currentURL = null;
        var u = null
          , v = null;
        a.isMultiVmanageEnabled = !1,
        a.appSettings = e,
        a.displaySubCategories = function(b) {
            a.serverCall = !1,
            a.subCategories = [],
            a.isPostMethod = !1;
            for (var c in a.categoryDetails)
                a.categoryDetails.hasOwnProperty(c) && c === b && a.subCategories.push(a.categoryDetails[c]);
            v = j(b),
            a.isMultiVmanageEnabled = k(b),
            a.isPostMethod = l(b),
            a.isPostMethod ? a.jsonData = null : "",
            a.currentURL = v,
            a.isMultiVmanageEnabled ? a.changeVManage(a.selectedVManage) : a.isPostMethod || a.displayJSON(v)
        }
        ,
        a.changeVManage = function(b) {
            a.selectedVManage = b;
            var c = b.key;
            if (a.hostVmanageIP === c)
                a.displayJSON(a.currentURL);
            else {
                var d = a.currentURL + "?vmanageIp=" + c;
                a.displayJSON(d)
            }
        }
        ,
        a.displayData = function(b) {
            a.serverCall = !1,
            a.isMultiVmanageEnabled = !1,
            a.isPostMethod = !1,
            a.currentURL = b.url,
            angular.isDefined(b.method) && "post" === b.method.toLowerCase() && (a.jsonData = null,
            a.isPostMethod = !0),
            angular.isDefined(b.isMultiVmanageEnabled) ? (a.isMultiVmanageEnabled = b.isMultiVmanageEnabled,
            a.changeVManage(a.selectedVManage)) : a.isPostMethod || a.displayJSON(b.url)
        }
        ,
        a.displayJSON = function(b) {
            a.serverCall = !0,
            a.jsonData = null,
            h.get(b).then(function(c) {
                a.serverCall = !1,
                _.includes(b, a.currentURL) && (a.jsonData = c)
            }, function(b) {
                a.serverCall = !1
            })
        }
        ,
        a.startPostMethod = function(a) {
            h.post(a.url, {}).then(function(b) {
                i.success(a.displayName + " has started.", 2e3)
            }, function(a) {
                i.error(a.error.message + "(" + a.error.code + "): " + a.error.details, 2e3)
            })
        }
        ,
        p()
    };
    a.$inject = ["$scope", "$log", "managementFactory", "appConfig", "appSettings", "$routeParams", "$window", "restService", "notification"],
    angular.module("vManage").controller("ManagementController", a)
}(),
function() {
    var a = function(a) {
        var b = {};
        return b.getJSON = function(b) {
            return a.get(b)
        }
        ,
        b
    };
    a.$inject = ["$http"],
    angular.module("vManage").factory("managementFactory", a)
}(),
angular.module("vManage").value("appSettings", {
    title: "vManage Management",
    version: "1.0",
    managementHome: "/dataservice/management/category",
    vManageList: "/dataservice/device/action/install/devices/vmanage",
    hostVmanage: "/dataservice/client/server"
}),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        function l(b) {
            g.get(b).then(function(c) {
                a.table.setDataUrl(b),
                a.table.createColumns(c.header.columns),
                angular.copy(c.data, a.table.data),
                a.table.taggedSearchObject.setSearchCache(a.table.data),
                d(function() {
                    a.table.taggedSearchObject.getSearchTagsCache().length && a.table.taggedSearchObject.searchData(a.table.taggedSearchObject.getSearchTagsCache()),
                    a.table.uiGridApi.selection.selectRow && a.table.data.length > 0 && a.table.uiGridApi.selection.selectRow(a.table.uiGridApi.grid.renderContainers.body.visibleRowCache[0].entity)
                })
            }, function(a) {
                c.error("Failed to get acl log data from server")
            })
        }
        function m(b, c) {
            c && a.table.data.reset(),
            l(b.tableURL)
        }
        a.isDeviceFiltered = !1;
        var n = 155;
        angular.isDefined(b.params.localSystemIp) ? (a.localSystemIp = b.params.localSystemIp,
        a.isDeviceFiltered = !0,
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "acl_log",
            title: "ACL Logs"
        }],
        n = 205) : a.breadCrumb = {
            states: []
        },
        a.stateString = f.getStateString(b),
        a.queryBuilderInitialized = !1,
        a.showQueryBuilderTimeStampInbuilt = !1,
        a.table = new e({
            autoLoad: !0,
            columnResizing: !0,
            enableSorting: !0,
            dataUid: "id",
            singleSelect: !1,
            tableHeightOffset: n
        }),
        a.searchCallBack = function(c) {
            var d, e = {};
            angular.isDefined(b.params.localSystemIp) ? c = h.appendDeviceToQuery(c, b.params.localSystemIp) : "",
            d = a.queryBuilderObj.getQueryStringFromQueryObject(c);
            var f = h.getACLLogTableAPI();
            e.tableURL = a.queryBuilderObj.appendQueryString(f, d),
            h.setFilterCurrentState(a.queryBuilderObj.getComponents()),
            a.queryBuilderInitialized ? m(e, !0) : (a.queryBuilderInitialized = !0,
            m(e, !1))
        }
        ,
        h.initializeQueryBuilder(a),
        a.$on("$destroy", function() {
            h.setFilterOriginalState(a.queryBuilderObj.getOriginalComponents())
        })
    }
    angular.module("vManage").controller("ACLLogController", a),
    a.$inject = ["$scope", "$state", "$log", "$timeout", "Table", "appUtil", "restService", "ACLLogService", "$compile", "$http", "$templateCache"]
}(),
function() {
    function a(a) {
        var b = {
            FIELDS_API_URL: "/dataservice/statistics/flowlog/query/fields",
            ACL_LOG_URL: "/dataservice/statistics/flowlog"
        }
          , c = void 0
          , d = void 0;
        return {
            resetFilters: function() {
                c = [],
                d = []
            },
            getFilterCurrentState: function() {
                return c
            },
            setFilterCurrentState: function(a) {
                c = a
            },
            setFilterOriginalState: function(a) {
                d = a
            },
            getFilterOriginalState: function() {
                return d
            },
            getACLLogTableAPI: function() {
                return b.ACL_LOG_URL
            },
            appendDeviceToQuery: function(a, b) {
                return a.query.rules.push({
                    value: [b],
                    field: "vdevice_name",
                    type: "string",
                    operator: "in"
                }),
                a
            },
            initializeQueryBuilder: function(c) {
                var d = this
                  , e = {
                    autoLoadFields: !0,
                    fieldsAPIURL: b.FIELDS_API_URL,
                    searchCallBack: c.searchCallBack,
                    filterInterfaceObjValidComponents: !0,
                    queryBuilderPersistedComponents: d.getFilterCurrentState(),
                    queryBuilderOriginalComponents: d.getFilterOriginalState(),
                    isDynamicQuery: !0,
                    enableChartURL: !1,
                    renderViewAfterInitComplete: !0,
                    enableFilteredTags: !0,
                    fieldCustomizationsForDataTypeURL: [{
                        property: "vpn_id",
                        enable: !0,
                        addAllForFieldTypeURL: !0,
                        appendStringToTheList: !0,
                        stringVal: "VPN"
                    }]
                };
                c.queryBuilderObj = new a(e),
                c.queryBuilderViewObj = {},
                c.queryBuilderViewObj.buttonLayoutObj = {
                    layoutClass: "actionButtonLayout",
                    filterIconClass: "filter_list",
                    filterButtonTitle: "Filter",
                    showDropDownIcon: !0
                }
            }
        }
    }
    angular.module("vManage").service("ACLLogService", a),
    a.$inject = ["QueryBuilderFactory"]
}(),
angular.module("vManage").controller("AlarmDetailsController", AlarmDetailsController),
AlarmDetailsController.$inject = ["$scope", "$state", "$log", "$filter", "$stateParams", "$timeout", "$location", "appUtil", "alarmsManagerService", "Table", "notification"],
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l) {
        function m(b, d) {
            f.post(b, d).then(function(f) {
                if (a.table.serverCallInProgress = !1,
                angular.isDefined(f) && "" !== f && null !== f) {
                    angular.forEach(f.data, function(a) {
                        a.active !== !1 || angular.isDefined(a.cleared_time) || (a.cleared_time = "N/A")
                    }),
                    g.setTableQueryObject(d),
                    a.table.setDataUrl(b),
                    g.updateColumns(f.header.columns),
                    a.table.createColumns(f.header.columns),
                    angular.copy(f.data, a.table.data),
                    a.table.taggedSearchObject.setSearchCache(a.table.data);
                    var h = e.getSearchPropertiesForCols(a.table.columnDefs);
                    a.table.taggedSearchObject.setSearchProperties(h),
                    c(function() {
                        a.table.taggedSearchObject.getSearchTagsCache().length && a.table.taggedSearchObject.searchData(a.table.taggedSearchObject.getSearchTagsCache()),
                        a.table.uiGridApi.selection.selectRow && a.table.data.length > 0 && a.table.uiGridApi.selection.selectRow(a.table.uiGridApi.grid.renderContainers.body.visibleRowCache[0].entity)
                    })
                } else
                    a.table.serverCallInProgress = !1,
                    a.table.createColumns({}),
                    a.table.data = {},
                    k.error("No data from server or invalid data")
            }, function(b) {
                a.table.serverCallInProgress = !1,
                l.error(b.error.message + ":" + b.error.details)
            })
        }
        function n(b, c, d, e) {
            d && (a.table.data.reset(),
            e && a.table.taggedSearchObject.clearSearchCache()),
            m(b.tableURL, c),
            a.$broadcast("collapsibleChartTimeUpdated")
        }
        a.stateString = e.getStateString(b),
        a.isChartCollapsed = {
            value: !1
        },
        a.chartTitle = "Alarms Histogram (hourly)",
        a.queryBuilderInitialized = !1,
        a.showQueryBuilderTimeStampInbuilt = !1,
        a.currentChartUrl = {},
        a.chartNames = ["alarmsChart"],
        a.chartAggregation = {},
        a.legends = g.getLegends(),
        a.currentChartUrl.url = g.getAlarmsChartAPI(),
        a.table = new d({
            autoLoad: !0,
            columnResizing: !0,
            enableSorting: !0,
            dataUid: "id",
            singleSelect: !0,
            tableHeightOffset: 450
        },{
            csvExport: !0
        },{},{
            exporterHeaderFilterUseName: !1,
            exporterCsvFilename: "Alarms.csv"
        });
        var o = [{
            type: "Alarm Details",
            open: "callback",
            okButtonActionFn: function(a) {
                b.go("app.monitor.alarms.details", {
                    uuid: a.entity.uuid
                })
            }
        }];
        a.table.setHoverAction(o),
        a.table.setPostRefreshCallback(function() {
            a.searchCallBack(g.getTableQueryObject(), !1)
        }),
        a.searchCallBack = function(b, c) {
            var d = {};
            a.chartAggregation = g.getAlarmsChartAggregation(),
            a.chartAggregation.query = b.query;
            a.queryBuilderObj.getQueryStringFromQueryObject(b);
            d.tableURL = g.getAlarmsTableAPI(),
            g.setFilterCurrentState(a.queryBuilderObj.getComponents());
            var e = b;
            e.size = 1e4,
            a.queryBuilderInitialized ? n(d, e, !0, !angular.isDefined(c) || c) : (a.queryBuilderInitialized = !0,
            i.get("app/monitor/commonTemplates/chartNTableTemplate.html", {
                cache: j
            }).success(function(b) {
                var c = $("#" + a.stateString + "view");
                angular.isDefined(c) && c.length > 0 && (n(d, e, !1, !0),
                c.append(h(b)(a)))
            }))
        }
        ,
        a.$watch("isChartCollapsed.value", function(b, c) {
            b != c && (b ? a.table.options.tableHeightOffset = 240 : a.table.options.tableHeightOffset = 450)
        }),
        g.initializeQueryBuilder(a),
        a.$on("$destroy", function() {
            g.setFilterOriginalState(a.queryBuilderObj.getOriginalComponents())
        })
    }
    angular.module("vManage").controller("AlarmsController", a),
    a.$inject = ["$scope", "$state", "$timeout", "Table", "appUtil", "restService", "AlarmsService", "$compile", "$http", "$templateCache", "$log", "notification"]
}(),
function() {
    function a(a) {
        var b, c = {
            FIELDS_API_URL: "/dataservice/alarms/query/fields",
            ALARMS_URL_TABLE: "/dataservice/alarms",
            ALARMS_URL_CHART: "/dataservice/alarms/aggregation"
        }, d = void 0, e = void 0, f = {
            query: {},
            aggregation: {
                field: [{
                    property: "severity",
                    order: "asc",
                    sequence: 1
                }],
                histogram: {
                    property: "entry_time",
                    interval: 1,
                    type: "hour",
                    order: "asc"
                }
            }
        }, g = [{
            name: "Critical",
            display: "Critical"
        }, {
            name: "Major",
            display: "Major"
        }, {
            name: "Medium",
            display: "Medium"
        }, {
            name: "Minor",
            display: "Minor"
        }], h = [{
            key: "critical",
            value: 4
        }, {
            key: "major",
            value: 3
        }, {
            key: "medium",
            value: 2
        }, {
            key: "minor",
            value: 1
        }];
        return {
            resetFilters: function() {
                d = [],
                e = []
            },
            getFilterCurrentState: function() {
                return d
            },
            setFilterCurrentState: function(a) {
                d = a
            },
            setFilterOriginalState: function(a) {
                e = a
            },
            getFilterOriginalState: function() {
                return e
            },
            setTableQueryObject: function(a) {
                b = a
            },
            getTableQueryObject: function() {
                return angular.copy(b)
            },
            getLegends: function() {
                return g
            },
            getAlarmsTableAPI: function() {
                return c.ALARMS_URL_TABLE
            },
            getAlarmsChartAPI: function() {
                return c.ALARMS_URL_CHART
            },
            getAlarmsChartAggregation: function() {
                return f
            },
            updateColumns: function(a) {
                var b = _.findIndex(a, {
                    property: "severity"
                });
                b > -1 && (a[b].sort = {
                    type: "stringToNumeric"
                },
                a[b].sortConfig = h)
            },
            initializeQueryBuilder: function(b) {
                var d = this
                  , e = {
                    autoLoadFields: !0,
                    fieldsAPIURL: c.FIELDS_API_URL,
                    searchCallBack: b.searchCallBack,
                    filterInterfaceObjValidComponents: !0,
                    queryBuilderPersistedComponents: d.getFilterCurrentState(),
                    queryBuilderOriginalComponents: d.getFilterOriginalState(),
                    isDynamicQuery: !0,
                    renderViewAfterInitComplete: !0,
                    enableFilteredTags: !0
                };
                b.queryBuilderObj = new a(e),
                b.queryBuilderViewObj = {},
                b.queryBuilderViewObj.buttonLayoutObj = {
                    layoutClass: "actionButtonLayout",
                    filterIconClass: "filter_list",
                    filterButtonTitle: "Filter",
                    showDropDownIcon: !0
                }
            }
        }
    }
    angular.module("vManage").service("AlarmsService", a),
    a.$inject = ["QueryBuilderFactory"]
}(),
function() {
    function a(a, b, c, d) {
        a.stateString = d.getStateString(b)
    }
    angular.module("vManage").controller("ApplicationsController", a),
    a.$inject = ["$scope", "$state", "Tab", "appUtil"]
}(),
function() {
    function a(a, b, c, d) {
        a.stateString = d.getStateString(b),
        a.isCollapsed = !0,
        a.showErrorSection = !1,
        a.sourceInterfacesList = [],
        a.selectedSourceInterface = "",
        a.vpnList = [],
        a.selectedVPN = "",
        a.tabs = [new c("DPI",!1,"app.monitor.devices.dashboard.applications.dpiFamily"), new c("Flows",!0,"app.monitor.devices.dashboard.applications.cflowdDestinations")],
        a.activateTable = function(c, d) {
            angular.forEach(a.tabs, function(a, b) {
                b !== d ? a.active = !1 : a.active = !0
            }),
            b.go(c, {
                localSystemIp: b.params.localSystemIp,
                systemIp: b.params.systemIp,
                deviceType: b.params.deviceType
            })
        }
    }
    angular.module("vManage").controller("CFLOWDController", a),
    a.$inject = ["$scope", "$state", "Tab", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
        var p, q, r, s, t, u, v = [], w = null, x = !1;
        a.legend = {
            total: !1
        },
        a.allVisible = !0,
        a.stateString = "topApplications_cflowd_destinations_",
        a.systemIp = b.params.systemIp,
        a.localSystemIp = b.params.localSystemIp,
        a.deviceType = b.params.deviceType,
        a.isApplicable = o.isVEdge(b.params.deviceType),
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "applications-cflowd",
            title: "Applications - Flows"
        }],
        e.resetTotalUsage();
        var y = {
            viewFlowDetails: function(c) {
                var d = e.getQueryBuilderCurrentState()
                  , g = e.getQueryBuilderOriginalState();
                angular.isDefined(d) && (N = _.findIndex(d, {
                    property: "remote_system_ip"
                }),
                N > -1 && (angular.isDefined(d[N].selectedOptionsList) || (d[N].defaultValue = void 0)),
                f.setQueryBuilderCurrentState(d),
                f.setQueryBuilderOriginalState(g)),
                b.go("app.monitor.devices.dashboard.applications.cflowdSources", {
                    systemIp: a.systemIp,
                    localSystemIp: a.localSystemIp,
                    deviceType: b.params.deviceType,
                    destinationIp: c.entity.dest_ip
                })
            },
            getPercentUsed: function(a) {
                if (angular.isDefined(a.entity.total_bytes))
                    return a.entity.total_bytes ? (a.entity.total_bytes / e.getTotalUsage() * 100).toFixed(2) : 0
            }
        }
          , z = new c({
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !0,
            enableSorting: !0,
            tableHeightOffset: 190,
            tableName: "device-cflowd-destinations",
            showSelectAllOption: !1,
            dataUid: "dest_ip",
            isRowSelectable: function(a) {
                return !0
            }
        });
        z.setAppScope(y);
        var A = [{
            property: "display",
            value: "destination-ip",
            config: {
                cellTemplate: '<div class="ui-grid-cell-contents toggleContent" data-ng-click="grid.appScope.viewFlowDetails(row)"><span id="view_flow_details" class="link-cell">{{ row.entity.dest_ip }}</span></div>',
                enableFiltering: !0,
                enableSorting: !0
            }
        }, {
            property: "display",
            value: "usage-percentage",
            config: {
                cellTemplate: '<div class="ui-grid-cell-contents usage-block"><div class="pull-left progress-bar-block"><progressbar value="grid.appScope.getPercentUsed(row)"></progressbar></div><div class="usage-percent" id="destination_usage_{{rowRenderIndex}}">{{ grid.appScope.getPercentUsed(row) }} %</div></div>',
                enableFiltering: !1,
                enableSorting: !1
            }
        }];
        z.addCustomColumns(A);
        var B = {
            getTopSourcesChartData: function(b) {
                if (b.isSelected)
                    if (a.table.getSelectedRows().length <= h.MAX_APPLICATION_SERIES_ALLOWED) {
                        var c = _.find(v, {
                            name: b.entity.dest_ip
                        });
                        if (!c) {
                            var d = {
                                name: b.entity.dest_ip,
                                display: b.entity.dest_ip
                            };
                            v.push(d)
                        }
                        i(I, 500, null)
                    } else
                        j.info("Select up to " + h.MAX_APPLICATION_SERIES_ALLOWED + " destination IP", 3e3),
                        z.uiGridApi.selection.unSelectRow(b.entity);
                else
                    v = _.reject(v, function(a) {
                        return a.name === b.entity.dest_ip
                    }),
                    a.cflowdChartObject.removeSeriesNames({
                        name: b.entity.dest_ip,
                        value: b.entity.dest_ip
                    }),
                    e.setChartSeries(v)
            }
        };
        z.setOnRowSelectionCallback(B.getTopSourcesChartData),
        z.setPostRefreshCallback(function() {
            J(e.getTableQueryObject())
        }),
        a.table = z;
        var C = e.getChartConfig();
        a.cflowdChartObject = new g(C[0],C[1]),
        a.cflowdChartObject.setXAxisProperty("entry_time"),
        a.cflowdChartObject.setYAxisProperty(["total_bytes"]),
        a.cflowdChartObject.setSeriesNames({
            property: "dest_ip",
            values: []
        });
        var D = function(b) {
            a.table.serverCallInProgress = !1,
            angular.isObject(b) && m.checkNestedProperty(b, "error", "details") ? (a.showErrorSection = !0,
            a.errorMessage = b) : (n.info("API error response needs to be updated to conform to company guidelines" + a.cflowdChartObject.chartURL),
            a.errorMessage = "Error occurred while retrieving data")
        }
          , E = function(b) {
            a.table.serverCallInProgress = !1;
            var c = b.data
              , d = e.getTableSelections();
            angular.isDefined(d) && d.length > 0 && (c = e.mergeTableData(d, b.data)),
            a.table.columnDefs.length < 1 && a.table.createColumns(e.returnTableColumns()),
            a.table.taggedSearchObject.setSearchCache(c),
            a.table.refreshTableData(c),
            a.table.setDataUrl(r),
            a.table.taggedSearchObject.searchData(),
            angular.isDefined(d) && d.length || b.data.length ? !angular.isDefined(d) && b.data.length ? e.selectDefaultDestinations(a.table) : (a.table.resetAllSelections(),
            e.selectCachedDestinations(a.table, d)) : a.cflowdChartObject.changeNoDataMessageState(!0)
        }
          , F = function(b) {
            var c = angular.copy(w);
            c.query.rules.push(b),
            c = e.appendAggregationFilterForChart(c, v.length),
            q = h.TOP_APPLICATION_CFLOWD_AGGREGATED_URL;
            var d = !angular.equals(e.getChartSeries(), v);
            d || a.cflowdChartObject.getSeriesNames().length < 1 ? (e.setChartSeries(v),
            a.cflowdChartObject.addSeriesFromAPI(v, q, c),
            a.allVisible || (a.allVisible = !0,
            a.legend.total = !1,
            e.setAllSeriesVisible(a.cflowdChartObject))) : a.cflowdChartObject.refresh(q, c),
            a.getTotalDestinationIPData()
        }
          , G = function(b) {
            if (_.findIndex(v, function(a) {
                return "Total" === a.name
            }) === -1) {
                var c = {
                    name: "Total",
                    display: "Total"
                };
                v.push(c)
            }
            b.data = _.map(b.data, function(a) {
                return angular.extend(a, {
                    dest_ip: "Total"
                })
            }),
            a.cflowdChartObject.addSeriesFromRawData(v, b.data),
            e.setTotalChartData(b)
        }
          , H = function() {
            _.find(a.cflowdChartObject.chartConfig.series, function(a) {
                return "Total" === a.name
            }) && (v = _.reject(v, function(a) {
                return "Total" === a.name
            }),
            a.cflowdChartObject.removeSeriesNames({
                name: "Total",
                display: "Total"
            }))
        };
        a.getTotalDestinationIPData = function() {
            a.legend.total ? angular.isDefined(e.getTotalChartData()) ? G(e.getTotalChartData()) : (t = e.getFilteredObject(),
            t = e.appendTotalAggregationFilter(t),
            t = k.affixStatsAggregationHistogramUrl(t),
            q = h.TOP_APPLICATION_CFLOWD_AGGREGATED_URL,
            e.getTopApplicationsData(q, t).then(G, D)) : H()
        }
        ;
        var I = function() {
            v.length && (H(),
            s = e.getRawQueryObj(),
            angular.forEach(v, function(a) {
                s.value.push(a.name)
            }),
            F(s))
        }
          , J = function(b) {
            var c, d, g;
            e.resetTotalChartData(),
            e.resetTotalUsage(),
            w = angular.copy(b),
            c = a.queryBuilderObj.getComponents(),
            a.isApplicable && f.filterSystemIP(c, a.localSystemIp),
            e.setQueryBuilderCurrentState(c),
            a.table.data.length > 0 && e.setTableSelections(a.table.getSelectedRows()),
            w = e.appendAggregationFilterForTable(w),
            e.setTableQueryObject(w),
            q = h.TOP_APPLICATION_CFLOWD_AGGREGATED_URL,
            d = e.getTopApplicationsData(q, w),
            u = angular.copy(b),
            u = e.appendTotalAggregationFilter(u),
            g = e.getTopApplicationsData(q, u),
            l.all([d, g]).then(function(a) {
                e.setTotalUsage(a[1].data),
                E(a[0])
            }, D),
            x || e.setQueryBuilderOriginalState(a.queryBuilderObj.getOriginalComponents())
        }
          , K = function(b) {
            e.setFilteredObject(b),
            e.setAllSeriesVisible(a.cflowdChartObject),
            a.legend.total = !1,
            a.allVisible = !0,
            J(b)
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        };
        var L = e.getQueryBuilderCurrentState()
          , M = e.getQueryBuilderOriginalState()
          , N = _.findIndex(L, {
            property: "vdevice_name"
        });
        N > -1 && L.splice(N, 1),
        angular.isDefined(b.params.localTLOC) && null !== b.params.localTLOC && (N = _.findIndex(L, {
            property: "local_color"
        }),
        N > -1 && L.splice(N, 1)),
        angular.isDefined(b.params.remoteTLOC) && null !== b.params.remoteTLOC && (N = _.findIndex(L, {
            property: "remote_color"
        }),
        N > -1 && L.splice(N, 1)),
        angular.isDefined(b.params.remoteSystemIP) && null !== b.params.remoteSystemIP && (N = _.findIndex(L, {
            property: "remote_system_ip"
        }),
        N > -1 && L.splice(N, 1)),
        a.showQueryBuilderTimeStampInbuilt = !1,
        p = {
            autoLoadFields: !1,
            searchCallBack: K,
            queryBuilderPersistedComponents: L,
            queryBuilderOriginalComponents: M,
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0,
            fieldCustomizationsForDataTypeURL: [{
                property: "vpn_id",
                enable: !0,
                addAllForFieldTypeURL: !0,
                appendStringToTheList: !0,
                stringVal: "VPN"
            }, {
                property: "local_color",
                enable: !0,
                filterBy: "local-color",
                unique: !0
            }, {
                property: "remote_color",
                enable: !0,
                filterBy: "color",
                unique: !0
            }]
        },
        a.queryBuilderObj = new d(p),
        e.getTopApplicationsFieldsData(a.localSystemIp, b.params.localTLOC, b.params.remoteTLOC, b.params.remoteSystemIP).then(function(b) {
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }, D),
        a.onLegendClick = function() {
            a.cflowdChartObject.chartConfig.series.length && (_.find(a.cflowdChartObject.chartConfig.series, function(a) {
                return !a.visible
            }) ? a.allVisible = !1 : (a.allVisible = !0,
            a.legend.total = !1,
            H()))
        }
        ,
        a.$on("$destroy", function() {
            angular.isDefined(b) && angular.isDefined(b.params.deviceType) && a.queryBuilderObj.setGlobalTime(e.getQueryBuilderTimeComponent()),
            e.setChartSeries(void 0),
            e.setTableSelections(void 0),
            a.table.resetCustomColumns()
        })
    }
    angular.module("vManage").controller("CFLOWDDestinationsController", a),
    a.$inject = ["$scope", "$state", "Table", "QueryBuilderFactory", "CFLOWDDestinationsService", "CFLOWDSourcesService", "HighStockStackedAreaChart", "monitorApiConstants", "$debounce", "notification", "restService", "$q", "appUtil", "$log", "DeviceService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        var j, k, l, m, n, o = !1, p = [];
        a.viewChart = !0,
        a.stateString = "topApplications_cflowd_sources_",
        a.localSystemIp = b.params.localSystemIp,
        a.deviceType = b.params.deviceType,
        a.isApplicable = h.isVEdge(b.params.deviceType),
        a.destinationIp = b.params.destinationIp,
        a.breadCrumb.states = [{
            name: "monitor",
            title: "Monitor"
        }, {
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "applications-cflowd",
            title: "Applications - Flows",
            state: "app.monitor.devices.dashboard.applications.cflowdDestinations",
            params: {
                systemIp: b.params.systemIp,
                localSystemIp: b.params.localSystemIp,
                deviceType: b.params.deviceType
            }
        }, {
            name: "applications-cflowd",
            title: "Destination IP - " + a.destinationIp
        }];
        var q = {
            getPercentUsed: function(a) {
                if (angular.isDefined(a.entity.total_bytes))
                    return a.entity.total_bytes ? (a.entity.total_bytes / e.getTotalUsage() * 100).toFixed(2) : 0
            }
        }
          , r = new c({
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !1,
            enableSorting: !0,
            tableHeightOffset: 190,
            tableName: "device-cflowd-details"
        });
        r.setAppScope(q);
        var s = [{
            property: "display",
            value: "usage-percentage",
            config: {
                cellTemplate: '<div class="ui-grid-cell-contents usage-block"><div class="pull-left progress-bar-block"><progressbar value="grid.appScope.getPercentUsed(row)"></progressbar></div><div class="usage-percent" id="source_usage_{{rowRenderIndex}}">{{ grid.appScope.getPercentUsed(row) }} %</div></div>',
                enableFiltering: !1,
                enableSorting: !1
            }
        }];
        r.addCustomColumns(s),
        r.setPostRefreshCallback(function() {
            v(e.getFilteredObject())
        }),
        a.table = r,
        n = e.getChartConfig(),
        a.cflowdChartObject = new i(n[0],n[1]),
        a.cflowdChartObject.setXAxisProperty("src_ip"),
        a.cflowdChartObject.setYAxisProperty(["total_bytes"]),
        a.cflowdChartObject.setSeriesNames([{
            property: "src_ip",
            values: []
        }]);
        var t = function(b) {
            a.table.serverCallInProgress = !1;
            var c;
            a.table.columnDefs.length < 1 && a.table.createColumns(e.returnTableColumns()),
            a.table.taggedSearchObject.setSearchCache(b.data),
            a.table.refreshTableData(b.data),
            a.table.setDataUrl(l),
            a.table.taggedSearchObject.searchData(),
            c = angular.copy(b),
            c.data.length > 25 && (c.data = c.data.splice(0, 25)),
            c.header.chart = {
                xAxis: ["src_ip"],
                yAxis: ["total_bytes"],
                series: [""],
                title: "Flows",
                xAxisLabel: "Source IP",
                yAxisLabel: "Usage"
            },
            c.header.fields = [{
                property: "src_ip",
                dataType: "string"
            }, {
                property: "total_bytes",
                dataType: "number",
                display: "Total Bytes"
            }],
            b.data.length > 0 ? (a.cflowdChartObject.changeNoDataMessageState(!1),
            a.cflowdChartObject.addCategoriesFromRawData([{
                name: "sourceIP",
                display: "Source IP",
                type: "column"
            }], {
                names: [],
                property: "src_ip"
            }, b)) : a.cflowdChartObject.changeNoDataMessageState(!0),
            p.reset()
        }
          , u = function(b) {
            a.cflowdChartObject.changeLoadingIndicatorState(!1),
            a.cflowdChartObject.checkSetNoDataMessage(),
            a.table.serverCallInProgress = !1,
            angular.isObject(b) && appUtil.checkNestedProperty(b, "error", "details") ? (a.showErrorSection = !0,
            a.errorMessage = b) : ($log.info("API error response needs to be updated to conform to company guidelines" + a.cflowdChartObject.chartURL),
            a.errorMessage = "Error occurred while retrieving data")
        }
          , v = function(b) {
            var c, d, h, i;
            if (e.setFilteredObject(b),
            c = angular.copy(b),
            d = a.queryBuilderObj.getComponents(),
            a.isApplicable && e.filterSystemIP(d, a.localSystemIp),
            e.setQueryBuilderCurrentState(d),
            c = e.appendAggregationFilterForSources(c),
            k = f.TOP_APPLICATION_CFLOWD_AGGREGATED_URL,
            h = e.getTopApplicationsData(k, c),
            m = angular.copy(b),
            y = _.findIndex(m.query.rules, {
                field: "dest_ip"
            }),
            y > -1 && m.query.rules.splice(y, 1),
            m = e.appendTotalAggregationFilter(m),
            i = e.getTopApplicationsData(k, m),
            a.cflowdChartObject.changeLoadingIndicatorState(!0),
            g.all([h, i]).then(function(a) {
                t(a[0]),
                e.resetTotalUsage(),
                e.setTotalUsage(a[1].data)
            }, u),
            !o) {
                o = !0;
                var j = a.queryBuilderObj.mergeTwoComponents(e.getQueryBuilderCurrentState(), e.getQueryBuilderOriginalState());
                e.setQueryBuilderOriginalState(j),
                a.queryBuilderObj.setFilterOriginalState(j)
            }
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        },
        a.showQueryBuilderTimeStampInbuilt = !1;
        var w = e.getQueryBuilderCurrentState()
          , x = e.getQueryBuilderOriginalState()
          , y = _.findIndex(w, {
            property: "vdevice_name"
        });
        y > -1 && w.splice(y, 1),
        j = {
            autoLoadFields: !1,
            searchCallBack: v,
            queryBuilderPersistedComponents: w,
            queryBuilderOriginalComponents: x,
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0,
            fieldCustomizationsForDataTypeURL: [{
                property: "vpn_id",
                enable: !0,
                addAllForFieldTypeURL: !0,
                appendStringToTheList: !0,
                stringVal: "VPN"
            }, {
                property: "local_color",
                enable: !0,
                filterBy: "local-color",
                unique: !0
            }, {
                property: "remote_color",
                enable: !0,
                filterBy: "color",
                unique: !0
            }]
        },
        a.queryBuilderObj = new d(j),
        e.getTopApplicationsFieldsData(a.localSystemIp, a.destinationIp).then(function(b) {
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }),
        a.$on("$destroy", function() {
            angular.isDefined(b) && angular.isDefined(b.params.deviceType) && a.queryBuilderObj.setGlobalTime(e.getQueryBuilderTimeComponent()),
            a.table.resetCustomColumns()
        })
    }
    angular.module("vManage").controller("CFLOWDSourcesController", a),
    a.$inject = ["$scope", "$state", "Table", "QueryBuilderFactory", "CFLOWDSourcesService", "monitorApiConstants", "$q", "DeviceService", "HighStockBarChart"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
        var o, p, q, r, s, t = [], u = null;
        a.legend = {
            total: !1
        },
        a.viewChart = !0,
        a.allVisible = !0,
        a.stateString = "topApplications_application_",
        a.systemIp = b.params.systemIp,
        a.localSystemIp = b.params.localSystemIp,
        a.deviceType = b.params.deviceType,
        a.isApplicable = n.isVEdge(b.params.deviceType);
        var v = b.params.family.replace("-", " ");
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "applications-dpi",
            title: "Applications - DPI",
            state: "app.monitor.devices.dashboard.applications.dpiFamily",
            params: {
                systemIp: b.params.systemIp,
                localSystemIp: b.params.localSystemIp,
                deviceType: b.params.deviceType
            }
        }, {
            name: b.params.family,
            title: v
        }];
        var w = {
            viewApplicationDetails: function(c) {
                var d = e.getQueryBuilderCurrentState()
                  , g = e.getQueryBuilderOriginalState();
                angular.isDefined(d) && (L = _.findIndex(d, {
                    property: "remote_system_ip"
                }),
                L > -1 && (angular.isDefined(d[L].selectedOptionsList) || (d[L].defaultValue = void 0)),
                f.setQueryBuilderCurrentState(d),
                f.setQueryBuilderOriginalState(g)),
                b.go("app.monitor.devices.dashboard.applications.dpiDetail", {
                    systemIp: a.systemIp,
                    localSystemIp: a.localSystemIp,
                    deviceType: a.deviceType,
                    family: b.params.family,
                    application: c.entity.application.replace(" ", "-")
                })
            },
            getPercentUsed: function(a) {
                if (angular.isDefined(a.entity.octets))
                    return a.entity.octets ? (a.entity.octets / e.getTotalUsage() * 100).toFixed(2) : 0
            }
        }
          , x = new c({
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !0,
            enableSorting: !0,
            tableHeightOffset: 190,
            tableName: "device-dpi-application",
            selectAll: !1,
            showSelectAllOption: !1,
            dataUid: "application",
            isRowSelectable: function(a) {
                return !0
            }
        });
        x.setAppScope(w);
        var y = [{
            property: "display",
            value: "link-application",
            config: {
                cellTemplate: '<div class="ui-grid-cell-contents toggleContent" data-ng-click="grid.appScope.viewApplicationDetails(row)" id="application_{{rowRenderIndex}}"><span id="view_application_details" class="link-cell">{{ row.entity.application }}</span></div>',
                enableFiltering: !0,
                enableSorting: !0
            }
        }, {
            property: "display",
            value: "application-progress",
            config: {
                cellTemplate: '<div class="ui-grid-cell-contents usage-block"><div class="pull-left progress-bar-block"><progressbar value="grid.appScope.getPercentUsed(row)"></progressbar></div><div class="usage-percent" id="application_usage_{{rowRenderIndex}}">{{ grid.appScope.getPercentUsed(row) }} %</div></div>',
                enableFiltering: !1,
                enableSorting: !1
            }
        }];
        x.addCustomColumns(y);
        var z = {
            getApplicationData: function(b) {
                if (b.isSelected)
                    if (a.table.getSelectedRows().length <= h.MAX_APPLICATION_SERIES_ALLOWED) {
                        var c = _.find(t, {
                            name: b.entity.application
                        });
                        if (!c) {
                            var d = {
                                name: b.entity.application,
                                display: b.entity.application
                            };
                            t.push(d)
                        }
                        i(F, 500, null)
                    } else
                        k.info("Select up to " + h.MAX_APPLICATION_SERIES_ALLOWED + " application", 3e3),
                        x.uiGridApi.selection.unSelectRow(b.entity);
                else
                    t = _.reject(t, function(a) {
                        return a.name === b.entity.application
                    }),
                    a.dpiChartObject.removeSeriesNames({
                        name: b.entity.application,
                        display: b.entity.application
                    }),
                    e.setChartSeries(t)
            }
        };
        x.setOnRowSelectionCallback(z.getApplicationData),
        x.setPostRefreshCallback(function() {
            H(e.getTableQueryObject())
        }),
        a.table = x;
        var A = e.getChartConfig();
        a.dpiChartObject = new g(A[0],A[1]),
        a.dpiChartObject.setXAxisProperty("entry_time"),
        a.dpiChartObject.setYAxisProperty(["octets"]),
        a.dpiChartObject.setSeriesNames({
            property: "application",
            values: []
        });
        var B = function(b) {
            var c = angular.copy(u);
            c.query.rules.push(b),
            c = e.appendAggregationFilterForChart(c, t.length),
            p = h.TOP_APPLICATION_AGGREGATED_URL;
            var d = !angular.equals(e.getChartSeries(), t);
            d || a.dpiChartObject.getSeriesNames().length < 1 ? (e.setChartSeries(t),
            a.dpiChartObject.addSeriesFromAPI(t, p, c),
            a.allVisible || (a.allVisible = !0,
            a.legend.total = !1,
            e.setAllSeriesVisible(a.dpiChartObject))) : a.dpiChartObject.refresh(p, c),
            a.getTotalApplicationData()
        }
          , C = function(b) {
            if (_.findIndex(t, function(a) {
                return "Total" === a.name
            }) === -1) {
                var c = {
                    name: "Total",
                    display: "Total"
                };
                t.push(c)
            }
            b.data = _.map(b.data, function(a) {
                return angular.extend(a, {
                    application: "Total"
                })
            }),
            a.dpiChartObject.addSeriesFromRawData(t, b.data)
        }
          , D = function(b) {
            a.table.serverCallInProgress = !1,
            a.showErrorSection = !0,
            a.errorMessage = b
        }
          , E = function() {
            _.find(a.dpiChartObject.chartConfig.series, function(a) {
                return "Total" === a.name
            }) && (t = _.reject(t, function(a) {
                return "Total" === a.name
            }),
            a.dpiChartObject.removeSeriesNames({
                name: "Total",
                display: "Total"
            }))
        };
        a.getTotalApplicationData = function() {
            a.legend.total ? angular.isDefined(e.getTotalChartData()) ? C(e.getTotalChartData()) : (r = e.getFilteredObject(),
            r = e.appendTotalAggregationFilter(r),
            r = j.affixStatsAggregationHistogramUrl(r),
            p = h.TOP_APPLICATION_AGGREGATED_URL,
            e.getTopApplicationsData(p, r).then(C, D)) : E()
        }
        ;
        var F = function() {
            t.length && (E(),
            q = e.getRawQueryObj(),
            angular.forEach(t, function(a) {
                q.value.push(a.name)
            }),
            B(q))
        }
          , G = function(b) {
            a.table.serverCallInProgress = !1;
            var c = b.data
              , d = e.getTableSelections();
            angular.isDefined(d) && d.length > 0 && (c = e.mergeTableData(d, b.data)),
            a.table.columnDefs.length < 1 && a.table.createColumns(e.returnTableColumns()),
            a.table.taggedSearchObject.setSearchCache(b.data),
            a.table.refreshTableData(c),
            a.table.taggedSearchObject.searchData(),
            angular.isDefined(d) && d.length || b.data.length ? !angular.isDefined(d) && b.data.length ? e.selectDefaultApplications(a.table) : (a.table.resetAllSelections(),
            e.selectCachedApplications(a.table, d)) : a.dpiChartObject.changeNoDataMessageState(!0)
        }
          , H = function(b) {
            e.resetTotalChartData(),
            e.resetTotalUsage(),
            u = angular.copy(b);
            var c = a.queryBuilderObj.getComponents();
            a.isApplicable && e.filterSystemIP(c, a.localSystemIp),
            e.setQueryBuilderCurrentState(c),
            a.table.data.length > 0 && e.setTableSelections(a.table.getSelectedRows()),
            u = e.appendDynamicFilter(u, v),
            u = e.appendAggregationFilter(u),
            e.setTableQueryObject(u),
            p = h.TOP_APPLICATION_AGGREGATED_URL;
            var d = e.getTopApplicationsData(p, u);
            s = angular.copy(b),
            s = e.appendTotalAggregationFilter(s);
            var f = e.getTopApplicationsData(p, s);
            l.all([d, f]).then(function(a) {
                e.setTotalUsage(a[1].data),
                G(a[0])
            }, function(a) {
                D(a)
            })
        }
          , I = function(b) {
            e.setFilteredObject(b),
            e.setAllSeriesVisible(a.dpiChartObject),
            a.legend.total = !1,
            a.allVisible = !0,
            H(b)
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        },
        a.showQueryBuilderTimeStampInbuilt = !1;
        var J = e.getQueryBuilderCurrentState()
          , K = e.getQueryBuilderOriginalState()
          , L = _.findIndex(J, {
            property: "vdevice_name"
        });
        L > -1 && J.splice(L, 1),
        o = {
            autoLoadFields: !1,
            searchCallBack: I,
            queryBuilderPersistedComponents: J,
            queryBuilderOriginalComponents: K,
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0,
            fieldCustomizationsForDataTypeURL: [{
                property: "vpn_id",
                enable: !0,
                addAllForFieldTypeURL: !0,
                appendStringToTheList: !0,
                stringVal: "VPN"
            }, {
                property: "local_color",
                enable: !0,
                filterBy: "local-color",
                unique: !0
            }, {
                property: "remote_color",
                enable: !0,
                filterBy: "color",
                unique: !0
            }]
        },
        a.queryBuilderObj = new d(o),
        e.getTopApplicationsFieldsData(a.localSystemIp).then(function(b) {
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }, function(a) {
            D(a)
        }),
        a.$on("$destroy", function() {
            angular.isDefined(b) && angular.isDefined(b.params.deviceType) && a.queryBuilderObj.setGlobalTime(e.getQueryBuilderTimeComponent()),
            e.setChartSeries(void 0),
            e.setTableSelections(void 0),
            a.table.resetCustomColumns()
        }),
        a.onLegendClick = function() {
            a.dpiChartObject.chartConfig.series.length && (_.find(a.dpiChartObject.chartConfig.series, function(a) {
                return !a.visible
            }) ? a.allVisible = !1 : (a.allVisible = !0,
            a.legend.total = !1,
            E()))
        }
    }
    angular.module("vManage").controller("DpiApplicationController", a),
    a.$inject = ["$scope", "$state", "Table", "QueryBuilderFactory", "DpiApplicationService", "DpiApplicationDetailService", "HighStockStackedAreaChart", "monitorApiConstants", "$debounce", "restService", "notification", "$q", "appUtil", "DeviceService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        var l, m, n, o;
        a.viewChart = !0,
        a.stateString = "topApplications_application_details_",
        a.localSystemIp = b.params.localSystemIp,
        a.deviceType = b.params.deviceType,
        a.isApplicable = i.isVEdge(b.params.deviceType);
        var p = b.params.family.replace("-", " ")
          , q = b.params.application.replace("-", " ");
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "applications-dpi",
            title: "Applications - DPI",
            state: "app.monitor.devices.dashboard.applications.dpiFamily",
            params: {
                systemIp: b.params.systemIp,
                localSystemIp: b.params.localSystemIp,
                deviceType: b.params.deviceType
            }
        }, {
            name: b.params.family,
            title: p,
            state: "app.monitor.devices.dashboard.applications.dpiApplication",
            params: {
                systemIp: b.params.systemIp,
                localSystemIp: b.params.localSystemIp,
                deviceType: b.params.deviceType,
                family: b.params.family
            }
        }, {
            name: b.params.application,
            title: q
        }];
        var r = {
            getPercentUsed: function(a) {
                if (angular.isDefined(a.entity.octets))
                    return a.entity.octets ? (a.entity.octets / e.getTotalUsage() * 100).toFixed(2) : 0
            }
        }
          , s = new c({
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !1,
            enableSorting: !0,
            tableHeightOffset: 190,
            tableName: "device-dpi",
            selectAll: !1
        });
        s.setAppScope(r);
        var t = [{
            property: "display",
            value: "details-progress",
            config: {
                cellTemplate: '<div class="ui-grid-cell-contents usage-block"><div class="pull-left progress-bar-block"><progressbar value="grid.appScope.getPercentUsed(row)"></progressbar></div><div class="usage-percent" id="application_details_usage_{{rowRenderIndex}}">{{ grid.appScope.getPercentUsed(row) }} %</div></div>',
                enableFiltering: !1,
                enableSorting: !1
            }
        }];
        s.addCustomColumns(t),
        s.setPostRefreshCallback(function() {
            y(e.getFilteredObject())
        }),
        a.table = s,
        o = e.getChartConfig(),
        a.dpiChartObject = new k(o[0],o[1]),
        a.dpiChartObject.setXAxisProperty("source_ip"),
        a.dpiChartObject.setYAxisProperty(["octets"]),
        a.dpiChartObject.setSeriesNames([{
            property: "source_ip",
            values: []
        }]),
        o = e.getPieChartConfig(),
        a.dpiPieChartObject = new f(o[0],o[1]);
        var u = function(b) {
            a.table.serverCallInProgress = !1,
            a.table.columnDefs.length < 1 && a.table.createColumns(e.returnTableColumns()),
            a.table.taggedSearchObject.setSearchCache(b.data),
            a.table.createColumns(b.header.columns),
            a.table.setTableData(b.data),
            a.table.taggedSearchObject.searchData();
            var c = angular.copy(b);
            c.data.length > 25 && (c.data = c.data.splice(0, 25)),
            w(c)
        }
          , v = function(b) {
            a.dpiChartObject.changeLoadingIndicatorState(!1),
            a.dpiChartObject.checkSetNoDataMessage(),
            a.table.serverCallInProgress = !1,
            a.showErrorSection = !0,
            a.errorMessage = b
        }
          , w = function(b) {
            b.header.chart = {
                xAxis: ["source_ip"],
                yAxis: ["octets"],
                series: [""],
                title: "DPI",
                xAxisLabel: "Source IP",
                yAxisLabel: "Usage"
            },
            b.header.fields = [{
                property: "source_ip",
                dataType: "string"
            }, {
                property: "octets",
                dataType: "number"
            }],
            b.data.length > 0 ? (a.dpiChartObject.changeNoDataMessageState(!1),
            a.dpiChartObject.addCategoriesFromRawData([{
                name: "sourceIP",
                display: "Source IP",
                type: "column"
            }], {
                names: [],
                property: "source_ip"
            }, b)) : a.dpiChartObject.changeNoDataMessageState(!0)
        }
          , x = function(b) {
            b.header.chart = {
                name: ["local_color"],
                yAxis: ["octets"],
                title: "TLOC",
                nameLabel: "TLOC",
                yAxisLabel: "Usage"
            },
            b.header.fields = [{
                property: "local_color",
                dataType: "string"
            }, {
                property: "octets",
                dataType: "number"
            }],
            a.dpiPieChartObject.updateChartAPIData(b)
        }
          , y = function(b) {
            e.setFilteredObject(b);
            var c = angular.copy(b)
              , d = a.queryBuilderObj.getComponents();
            a.isApplicable && j.filterSystemIP(d, a.localSystemIp),
            e.setQueryBuilderCurrentState(d),
            c = e.appendFamilyFilter(c, p),
            c = e.appendApplicationFilter(c, q),
            c = e.appendAggregationFilterforFlowsTable(c),
            m = g.TOP_APPLICATION_AGGREGATED_URL;
            var f = e.getTopApplicationsData(m, c);
            n = angular.copy(b),
            n = e.appendTotalAggregationFilter(n);
            var i = e.getTopApplicationsData(m, n);
            c = angular.copy(b),
            c = e.appendFamilyFilter(c, p),
            c = e.appendApplicationFilter(c, q),
            c = e.appendAggregationFilterforTLOCChart(c),
            m = g.TOP_APPLICATION_AGGREGATED_URL;
            var k = e.getTopApplicationsData(m, c);
            a.dpiChartObject.changeLoadingIndicatorState(!0),
            h.all([f, i, k]).then(function(a) {
                e.resetTotalUsage(),
                e.setTotalUsage(a[1].data),
                u(a[0]),
                x(a[2])
            }, function(a) {
                v(a)
            })
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        },
        a.showQueryBuilderTimeStampInbuilt = !1;
        var z = e.getQueryBuilderCurrentState()
          , A = e.getQueryBuilderOriginalState()
          , B = _.findIndex(z, {
            property: "vdevice_name"
        });
        B > -1 && z.splice(B, 1),
        l = {
            autoLoadFields: !1,
            searchCallBack: y,
            queryBuilderPersistedComponents: z,
            queryBuilderOriginalComponents: A,
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0,
            fieldCustomizationsForDataTypeURL: [{
                property: "vpn_id",
                enable: !0,
                addAllForFieldTypeURL: !0,
                appendStringToTheList: !0,
                stringVal: "VPN"
            }, {
                property: "local_color",
                enable: !0,
                filterBy: "local-color",
                unique: !0
            }, {
                property: "remote_color",
                enable: !0,
                filterBy: "color",
                unique: !0
            }]
        },
        a.queryBuilderObj = new d(l),
        e.getTopApplicationsFieldsData(a.localSystemIp).then(function(b) {
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }, function() {}),
        a.$on("$destroy", function() {
            angular.isDefined(b) && angular.isDefined(b.params.deviceType) && a.queryBuilderObj.setGlobalTime(e.getQueryBuilderTimeComponent()),
            a.table.resetCustomColumns()
        })
    }
    angular.module("vManage").controller("DpiApplicationDetailController", a),
    a.$inject = ["$scope", "$state", "Table", "QueryBuilderFactory", "DpiApplicationDetailService", "PieChart", "monitorApiConstants", "$q", "DeviceService", "DpiApplicationService", "HighStockBarChart"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m) {
        var n, o, p, q, r, s = [], t = void 0, u = !1;
        a.legend = {
            total: !1
        },
        a.allVisible = !0,
        a.stateString = "topApplications_application_family_",
        a.systemIp = b.params.systemIp,
        a.localSystemIp = b.params.localSystemIp,
        a.deviceType = b.params.deviceType,
        a.isApplicable = m.isVEdge(b.params.deviceType),
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "applications-dpi",
            title: "Applications - DPI"
        }];
        var v = {
            viewApplicationDetails: function(c) {
                var d = e.getQueryBuilderCurrentState()
                  , g = e.getQueryBuilderOriginalState();
                angular.isDefined(d) && (K = _.findIndex(d, {
                    property: "remote_system_ip"
                }),
                K > -1 && (angular.isDefined(d[K].selectedOptionsList) || (d[K].defaultValue = void 0)),
                f.setQueryBuilderCurrentState(d),
                f.setQueryBuilderOriginalState(g)),
                b.go("app.monitor.devices.dashboard.applications.dpiApplication", {
                    systemIp: a.systemIp,
                    localSystemIp: a.localSystemIp,
                    deviceType: a.deviceType,
                    family: c.entity.family.replace(" ", "-")
                })
            },
            getPercentUsed: function(a) {
                if (angular.isDefined(a.entity.octets))
                    return a.entity.octets ? (a.entity.octets / e.getTotalUsage() * 100).toFixed(2) : 0
            }
        }
          , w = new c({
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !0,
            enableSorting: !0,
            tableHeightOffset: 190,
            tableName: "device-dpi-application-family",
            selectAll: !1,
            showSelectAllOption: !1,
            dataUid: "family",
            isRowSelectable: function(a) {
                return !0
            }
        });
        w.setAppScope(v);
        var x = [{
            property: "display",
            value: "link-family",
            config: {
                cellTemplate: '<div class="ui-grid-cell-contents" data-ng-click="grid.appScope.viewApplicationDetails(row)" id="application_family_{{rowRenderIndex}}"><span id="view_application_details" class="link-cell">{{ row.entity.family }}</span></div>',
                enableFiltering: !0,
                enableSorting: !0
            }
        }, {
            property: "display",
            value: "family-progress",
            config: {
                cellTemplate: '<div class="ui-grid-cell-contents usage-block"><div class="pull-left progress-bar-block"><progressbar value="grid.appScope.getPercentUsed(row)"></progressbar></div><div class="usage-percent" id="application_family_usage_{{rowRenderIndex}}">{{ grid.appScope.getPercentUsed(row) }} %</div></div>',
                enableFiltering: !1,
                enableSorting: !1
            }
        }];
        w.addCustomColumns(x);
        var y = {
            getApplicationFamilyData: function(b) {
                if (b.isSelected)
                    if (a.table.getSelectedRows().length <= h.MAX_APPLICATION_SERIES_ALLOWED) {
                        var c = _.find(s, {
                            name: b.entity.family
                        });
                        if (!c) {
                            var d = {
                                name: b.entity.family,
                                display: b.entity.family
                            };
                            s.push(d)
                        }
                        i(E, 500, null)
                    } else
                        k.info("Select up to " + h.MAX_APPLICATION_SERIES_ALLOWED + " application family", 3e3),
                        w.uiGridApi.selection.unSelectRow(b.entity);
                else
                    s = _.reject(s, function(a) {
                        return a.name === b.entity.family
                    }),
                    a.dpiChartObject.removeSeriesNames({
                        name: b.entity.family,
                        display: b.entity.family
                    }),
                    e.setChartSeries(s)
            }
        };
        w.setOnRowSelectionCallback(y.getApplicationFamilyData),
        w.setPostRefreshCallback(function() {
            G(e.getTableQueryObject())
        }),
        a.table = w;
        var z = function(b) {
            a.table.serverCallInProgress = !1,
            a.showErrorSection = !0,
            a.errorMessage = b
        }
          , A = e.getChartConfig();
        a.dpiChartObject = new g(A[0],A[1]),
        a.dpiChartObject.setXAxisProperty("entry_time"),
        a.dpiChartObject.setYAxisProperty(["octets"]),
        a.dpiChartObject.setSeriesNames({
            property: "family",
            values: []
        });
        var B = function(b) {
            var c = angular.copy(t);
            c.query.rules.push(b),
            c = e.appendAggregationFilterForChart(c, s.length),
            o = h.TOP_APPLICATION_AGGREGATED_URL;
            var d = !angular.equals(e.getChartSeries(), s);
            d || a.dpiChartObject.getSeriesNames().length < 1 ? (e.setChartSeries(s),
            a.dpiChartObject.addSeriesFromAPI(s, o, c),
            a.allVisible || (a.allVisible = !0,
            a.legend.total = !1,
            e.setAllSeriesVisible(a.dpiChartObject))) : a.dpiChartObject.refresh(o, c),
            a.getTotalApplicationFamilyData()
        }
          , C = function(b) {
            if (_.findIndex(s, function(a) {
                return "Total" === a.name
            }) === -1) {
                var c = {
                    name: "Total",
                    display: "Total"
                };
                s.push(c)
            }
            b.data = _.map(b.data, function(a) {
                return angular.extend(a, {
                    family: "Total"
                })
            }),
            a.dpiChartObject.addSeriesFromRawData(s, b.data),
            e.setTotalChartData(b)
        }
          , D = function() {
            _.find(a.dpiChartObject.chartConfig.series, function(a) {
                return "Total" === a.name
            }) && (s = _.reject(s, function(a) {
                return "Total" === a.name
            }),
            a.dpiChartObject.removeSeriesNames({
                name: "Total",
                display: "Total"
            }))
        };
        a.getTotalApplicationFamilyData = function() {
            a.legend.total ? angular.isDefined(e.getTotalChartData()) ? C(e.getTotalChartData()) : (q = e.getFilteredObject(),
            q = e.appendTotalAggregationFilter(q),
            q = j.affixStatsAggregationHistogramUrl(q),
            o = h.TOP_APPLICATION_AGGREGATED_URL,
            e.getTopApplicationsData(o, q).then(C, z)) : D()
        }
        ;
        var E = function() {
            s.length && (D(),
            p = e.getRawQueryObj(),
            angular.forEach(s, function(a) {
                p.value.push(a.name)
            }),
            B(p))
        }
          , F = function(b) {
            a.table.serverCallInProgress = !1;
            var c = b.data
              , d = e.getTableSelections();
            angular.isDefined(d) && d.length > 0 && (c = e.mergeTableData(d, b.data)),
            a.table.columnDefs.length < 1 && a.table.createColumns(e.returnTableColumns()),
            a.table.taggedSearchObject.setSearchCache(b.data),
            a.table.refreshTableData(c),
            a.table.taggedSearchObject.searchData(),
            angular.isDefined(d) && d.length || b.data.length ? !angular.isDefined(d) && b.data.length ? e.selectDefaultApplicationFamily(a.table) : (a.table.resetAllSelections(),
            e.selectCachedApplicationFamily(a.table, d)) : a.dpiChartObject.changeNoDataMessageState(!0)
        }
          , G = function(b) {
            e.resetTotalChartData(),
            e.resetTotalUsage(),
            t = angular.copy(b);
            var c = a.queryBuilderObj.getComponents();
            a.isApplicable && f.filterSystemIP(c, a.localSystemIp),
            e.setQueryBuilderCurrentState(c),
            a.table.data.length > 0 && e.setTableSelections(a.table.getSelectedRows()),
            t = e.appendAggregationFilter(t),
            e.setTableQueryObject(t),
            o = h.TOP_APPLICATION_AGGREGATED_URL;
            var d = e.getTopApplicationsData(o, t);
            r = angular.copy(b),
            r = e.appendTotalAggregationFilter(r);
            var g = e.getTopApplicationsData(o, r);
            l.all([d, g]).then(function(a) {
                e.setTotalUsage(a[1].data),
                F(a[0])
            }, function(a) {
                z(a)
            })
        }
          , H = function(b) {
            e.setFilteredObject(b),
            e.setAllSeriesVisible(a.dpiChartObject),
            a.legend.total = !1,
            a.allVisible = !0,
            G(b),
            u || e.setQueryBuilderOriginalState(a.queryBuilderObj.getOriginalComponents())
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        },
        a.showQueryBuilderTimeStampInbuilt = !1;
        var I = e.getQueryBuilderCurrentState()
          , J = e.getQueryBuilderOriginalState()
          , K = _.findIndex(I, {
            property: "vdevice_name"
        });
        K > -1 && I.splice(K, 1),
        angular.isDefined(b.params.localTLOC) && null !== b.params.localTLOC && (K = _.findIndex(I, {
            property: "local_color"
        }),
        K > -1 && I.splice(K, 1)),
        angular.isDefined(b.params.remoteTLOC) && null !== b.params.remoteTLOC && (K = _.findIndex(I, {
            property: "remote_color"
        }),
        K > -1 && I.splice(K, 1)),
        angular.isDefined(b.params.remoteSystemIP) && null !== b.params.remoteSystemIP && (K = _.findIndex(I, {
            property: "remote_system_ip"
        }),
        K > -1 && I.splice(K, 1)),
        n = {
            autoLoadFields: !1,
            searchCallBack: H,
            queryBuilderPersistedComponents: I,
            queryBuilderOriginalComponents: J,
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0,
            fieldCustomizationsForDataTypeURL: [{
                property: "vpn_id",
                enable: !0,
                addAllForFieldTypeURL: !0,
                appendStringToTheList: !0,
                stringVal: "VPN"
            }, {
                property: "local_color",
                enable: !0,
                filterBy: "local-color",
                unique: !0
            }, {
                property: "remote_color",
                enable: !0,
                filterBy: "color",
                unique: !0
            }]
        },
        a.queryBuilderObj = new d(n),
        e.getTopApplicationsFieldsData(a.localSystemIp, b.params.localTLOC, b.params.remoteTLOC, b.params.remoteSystemIP).then(function(b) {
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }, function(a) {
            z(a)
        }),
        a.$on("$destroy", function() {
            angular.isDefined(b) && angular.isDefined(b.params.deviceType) && a.queryBuilderObj.setGlobalTime(e.getQueryBuilderTimeComponent()),
            e.setChartSeries(void 0),
            e.setTableSelections(void 0),
            a.table.resetCustomColumns()
        }),
        a.onLegendClick = function() {
            a.dpiChartObject.chartConfig.series.length && (_.find(a.dpiChartObject.chartConfig.series, function(a) {
                return !a.visible
            }) ? a.allVisible = !1 : (a.allVisible = !0,
            a.legend.total = !1,
            D()))
        }
    }
    angular.module("vManage").controller("DpiApplicationFamilyController", a),
    a.$inject = ["$scope", "$state", "Table", "QueryBuilderFactory", "DpiApplicationFamilyService", "DpiApplicationService", "HighStockStackedAreaChart", "monitorApiConstants", "$debounce", "restService", "notification", "$q", "DeviceService"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        a.stateString = d.getStateString(b),
        a.isCollapsed = !0,
        a.showErrorSection = !1,
        a.loadingInterfaceData = !1,
        a.loadingVPNData = !1,
        a.sourceInterfacesList = [],
        a.selectedSourceInterface = "",
        a.vpnList = [],
        a.selectedVPN = "",
        a.tabs = [new c("DPI",!0,"app.monitor.devices.dashboard.applications.dpiFamily"), new c("Flows",!1,"app.monitor.devices.dashboard.applications.cflowdDestinations")],
        a.activateTable = function(c, d) {
            angular.forEach(a.tabs, function(a, b) {
                b !== d ? a.active = !1 : a.active = !0
            }),
            b.go(c, {
                localSystemIp: b.params.localSystemIp,
                deviceType: b.params.deviceType
            })
        }
    }
    angular.module("vManage").controller("DpiController", a),
    a.$inject = ["$scope", "$state", "Tab", "appUtil", "notification", "$timeout", "TroubleshootingService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        function j() {
            k().then(function(b) {
                a.table.serverCallInProgress = !1,
                g(function() {
                    a.table.uiGridApi.treeBase.expandAllRows();
                    var b = 6;
                    angular.forEach(a.controlConnectionNodePaths, function(c, d) {
                        a.controlConnectionNodePaths[d].vmanage = {
                            up: 0,
                            down: 0,
                            init: 0,
                            total: 0
                        },
                        a.controlConnectionNodePaths[d].vsmart = {
                            up: 0,
                            down: 0,
                            init: 0,
                            total: 0
                        },
                        a.controlConnectionNodePaths[d].vbond = {
                            up: 0,
                            down: 0,
                            init: 0,
                            total: 0
                        },
                        angular.forEach(c, function(b) {
                            angular.equals(b["peer-type"], "vsmart") ? (b.icon = "/images/vsmart_conn.png",
                            m(a.controlConnectionNodePaths[d].vsmart, b.state)) : angular.equals(b["peer-type"], "vbond") ? (b.icon = "/images/vbond_conn.png",
                            m(a.controlConnectionNodePaths[d].vbond, b.state)) : angular.equals(b["peer-type"], "vmanage") && (b.icon = "/images/vmanage_conn.png",
                            m(a.controlConnectionNodePaths[d].vmanage, b.state))
                        }),
                        c.length > 12 && (b = c.length / 2),
                        $("#" + d + "-node").WCircleMenu({
                            width: "40px",
                            height: "40px",
                            iconRotation: 0,
                            distance: 85,
                            angle_interval: Math.PI / (c.length / 2),
                            openCallback: n
                        }),
                        $("#" + d + "-node").WCircleMenu("open"),
                        $("#" + d + "-node").off("click")
                    })
                })
            }, function(b) {
                a.table.serverCallInProgress = !1,
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        }
        function k() {
            var d = f.defer();
            return e.get("/dataservice/device/counters?deviceId=" + b.params.systemIp).then(function(f) {
                c.checkNestedProperty(f.data, "0") && (a.controlConnectionCount = f.data[0]);
                var g = "vbond" === a.devicePersonality ? "/dataservice/device/orchestrator/connections?deviceId=" + b.params.systemIp : "/dataservice/device/control/synced/connections?deviceId=" + b.params.localSystemIp;
                return e.get(g).then(function(b) {
                    b.header.columns;
                    a.table.createColumns(h.getControlConnectionTableColumns()),
                    a.table.setTreeLevelGroupings([{
                        treeLevel: 0,
                        groupByProperty: "local-color",
                        newRowProperty: "peer-type"
                    }]),
                    a.table.setTableData(b.data),
                    a.table.taggedSearchObject.searchData(),
                    a.controlConnectionNodePaths = _.chain(b.data).filter(function(a) {
                        return !angular.equals(a["peer-type"], "vedge")
                    }).groupBy("local-color").value(),
                    $(".control-connections-graph").width() < 237 * Object.keys(a.controlConnectionNodePaths).length && $(".control-connections-graph .graph-section").width(237 * Object.keys(a.controlConnectionNodePaths).length),
                    d.resolve(b)
                }, function(b) {
                    a.showErrorSection = !0,
                    a.errorMessage = b,
                    d.reject(b)
                })
            }, function(b) {
                a.showErrorSection = !0,
                a.errorMessage = b,
                d.reject(b)
            })
        }
        a.stateString = c.getStateString(b),
        a.devicePersonality = b.params.personality,
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "control-connections",
            title: "Control Connections"
        }],
        a.controlConnectionNodePaths = {},
        a.controlConnectionCount = {},
        angular.isDefined(b.params.reachability) && "unreachable" == b.params.reachability && i.warning("Device data is not up-to-date");
        var l = new d({
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !1,
            enableSorting: !0,
            enableTreeChildrenSelection: !1,
            tableHeightOffset: 325,
            tableName: "tunnel",
            dataUid: "peer-type",
            selectAll: !1,
            isRowSelectable: function(a) {
                return !(a.treeLevel = "0" == a.treeLevel)
            }
        });
        l.setPostRefreshCallback(function() {
            a.controlConnectionNodePaths = {},
            j()
        }),
        a.table = l,
        j();
        var m = function(a, b) {
            angular.equals(b, "up") ? a.up = a.up + 1 : angular.equals(b, "down") ? a.down = a.down + 1 : angular.equals(b, "init") && (a.init = a.init + 1),
            a.total = a.total + 1
        }
          , n = function() {
            g(function() {
                var b = [];
                angular.forEach(a.controlConnectionNodePaths, function(a, c) {
                    b = $(".wcircle-menu-item." + c),
                    angular.forEach(b, function(a, b) {
                        _.indexOf(a.classList, "up") > -1 ? $.line(o(a, 15), o(a.parentElement, 20), {
                            elem: "#" + c + "_path" + b,
                            lineColor: "#c2c3c6"
                        }) : $.line(o(a, 15), o(a.parentElement, 20), {
                            elem: "#" + c + "_path" + b,
                            lineColor: "#E53935"
                        })
                    })
                })
            })
        }
          , o = function(a, b) {
            var c = $(a)
              , d = c.position().left
              , e = c.position().top;
            return {
                x: d + b,
                y: e + b
            }
        }
          , p = function() {
            var a = $(".jquery-line");
            angular.forEach(a, function(a) {
                $(a).remove()
            })
        };
        a.$on("$destroy", function() {
            p()
        })
    }
    angular.module("vManage").controller("ControlConnectionsController", a),
    a.$inject = ["$scope", "$state", "appUtil", "TreeBasedTable", "restService", "$q", "$timeout", "ControlConnectionService", "notification"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        function l(b, d) {
            f.post(b, d).then(function(e) {
                a.table.serverCallInProgress = !1,
                h.setTableQueryObject(d),
                a.table.setDataUrl(b),
                a.table.createColumns(e.header.columns),
                angular.copy(e.data, a.table.data),
                a.table.taggedSearchObject.setSearchCache(a.table.data),
                c(function() {
                    a.table.taggedSearchObject.getSearchTagsCache().length && a.table.taggedSearchObject.searchData(a.table.taggedSearchObject.getSearchTagsCache()),
                    a.table.uiGridApi.selection.selectRow && a.table.data.length > 0 && a.table.uiGridApi.selection.selectRow(a.table.uiGridApi.grid.renderContainers.body.visibleRowCache[0].entity)
                })
            }, function(b) {
                a.table.serverCallInProgress = !1,
                g.error("Failed to get events data from server")
            })
        }
        function m(b, c, d) {
            d && a.table.data.reset(),
            l(b.tableURL, c),
            a.$broadcast("collapsibleChartTimeUpdated")
        }
        a.stateString = e.getStateString(b),
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "events",
            title: "Events"
        }],
        a.isChartCollapsed = {
            value: !1
        },
        a.chartTitle = "Events Histogram (hourly)",
        a.queryBuilderInitialized = !1,
        a.showQueryBuilderTimeStampInbuilt = !1,
        a.currentChartUrl = {},
        a.chartNames = ["eventsChart"],
        a.legends = h.getLegends(),
        a.chartAggregation = {},
        a.currentChartUrl.url = h.getEventsChartAPI(),
        a.table = new d({
            autoLoad: !0,
            columnResizing: !0,
            enableSorting: !0,
            dataUid: "id",
            singleSelect: !0,
            tableHeightOffset: 490,
            flatEntityAccess: !0
        });
        var n = [{
            type: "Device Details",
            open: "modal",
            templateUrl: "app/monitor/devices/dashboard/templates/events/eventDetails.html",
            controller: "DeviceEventDetailsController"
        }];
        a.table.setPostRefreshCallback(function() {
            a.searchCallBack(h.getTableQueryObject())
        }),
        a.table.setHoverAction(n),
        a.searchCallBack = function(c) {
            var d = {}
              , e = {
                field: "system_ip",
                operator: "in",
                type: "string",
                value: []
            };
            a.chartAggregation = h.getAlarmsChartAggregation(),
            a.chartAggregation.query = c.query,
            e.value.push(b.params.localSystemIp),
            c.query.rules.push(e);
            a.queryBuilderObj.getQueryStringFromQueryObject(c);
            d.tableURL = h.getEventsTableAPI();
            var f = c;
            f.size = 1e4,
            a.queryBuilderInitialized ? m(d, f, !0) : (a.queryBuilderInitialized = !0,
            j.get("app/monitor/commonTemplates/chartNTableTemplate.html", {
                cache: k
            }).success(function(b) {
                var c = $("#" + a.stateString + "view");
                angular.isDefined(c) && c.length > 0 && (m(d, f, !1),
                c.append(i(b)(a)))
            }))
        }
        ,
        a.$watch("isChartCollapsed.value", function(b, c) {
            b != c && (b ? a.table.options.tableHeightOffset = 250 : a.table.options.tableHeightOffset = 460)
        }),
        h.initializeQueryBuilder(a),
        a.$on("$destroy", function() {
            if (angular.isDefined(b) && angular.isDefined(b.params.deviceType)) {
                var c = a.queryBuilderObj.getComponents();
                a.queryBuilderObj.setGlobalTime(h.getQueryBuilderTimeComponent(c))
            }
        })
    }
    angular.module("vManage").controller("DeviceEventsController", a),
    a.$inject = ["$scope", "$state", "$timeout", "Table", "appUtil", "restService", "notification", "DeviceEventsService", "$compile", "$http", "$templateCache"]
}(),
function() {
    function a(a, b, c, d) {
        a.localSystemIp = b.params.localSystemIp,
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "system_status",
            title: "System Status",
            state: "app.monitor.devices.dashboard.hardware_health",
            params: b.params
        }, {
            name: "crash",
            title: "Crash"
        }];
        var e = {
            type: "Crash Logs",
            open: "modal",
            templateUrl: "app/configuration/devices/modalTemplates/configTemplate.html",
            controller: "HealthCrashLogController"
        };
        a.tableRowHoverActions = [e];
        var f = new d({
            columnResizing: !0,
            singleSelect: !0,
            enableSorting: !0,
            dataUid: "localSystemIp",
            tableHeightOffset: 256,
            autoLoad: !0,
            tableName: "crashTable"
        });
        f.name = "crash-log",
        a.crashTable = f,
        f.setHoverAction(a.tableRowHoverActions),
        f.loadDataFromUrl(c.getCrashTableData(a.localSystemIp))
    }
    angular.module("vManage").controller("HealthCrashController", a),
    a.$inject = ["$scope", "$state", "hardwareHealthService", "Table"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        a.stateString = c.getStateString(b),
        a.popUptitle = "Crash Logs",
        a.serverCall = !0,
        f.getCrashLogs(e["vdevice-name"], e["core-filename"]).then(function(b) {
            a.serverCall = !1,
            a.configuration = b
        }, function(b, c, d, e) {
            a.showErrorSection = !0,
            a.serverCall = !1,
            a.errorMessage = b
        }),
        a.cancel = function() {
            d.hide()
        }
    }
    angular.module("vManage").controller("HealthCrashLogController", a),
    a.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "selectedRow", "hardwareHealthService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        function j() {
            a.containerWidth = angular.element(".hardwareHealth").width(),
            a.containerWidth < 700 ? (n = 360,
            o = 360) : (n = "auto",
            o = "auto")
        }
        function k() {
            a.queryBuilderObj.disableUserActions(!0),
            d.fetchRealTimeData(b.params.systemIp, b.params.localSystemIp, a.deviceModel).then(function(b) {
                a.chartObject.changeLoadingIndicatorState(!1),
                a.queryBuilderObj.disableUserActions(!1),
                a.chartObject.changeNoDataMessageState(!1),
                b.length > 0 && a.chartObject.prefillSeriesData(b[0].entry_time, i.REALTIME_INTERVAL_SIZE),
                angular.isDefined(b[0].cpu_used) && !isNaN(b[0].cpu_used) ? a.currentCPU = parseFloat(b[0].cpu_used).toFixed(2) : a.currentCPU = null,
                angular.isDefined(b[1].mem_util) && !isNaN(b[1].mem_util) ? a.currentMEM = parseFloat(b[1].mem_util).toFixed(2) : a.currentMEM = null,
                a.chartObject.concatFromRawDataMultiYAxis(d.getCpuService(), [b[0]], 0, !0, i.REALTIME_INTERVAL_SIZE),
                a.chartObject.concatFromRawDataMultiYAxis(d.getMemoryService(), [b[1]], 1, !0, i.REALTIME_INTERVAL_SIZE),
                s = h(function() {
                    k()
                }, 1e4, 1)
            }, function(b) {
                a.chartObject.checkSetNoDataMessage(),
                a.queryBuilderObj.disableUserActions(!1)
            })
        }
        a.stateString = e.getStateString(b),
        a.localSystemIp = b.params.localSystemIp,
        a.systemIp = b.params.systemIp,
        a.deviceModel = b.params.deviceModel,
        a.deviceType = b.params.deviceType,
        a.isVEdge = !1,
        angular.isDefined(b.params.deviceType) ? a.deviceType.toLowerCase().indexOf("vedge") > -1 ? a.isVEdge = !0 : "" : angular.isDefined(b.params.deviceModel) && (a.deviceModel.toLowerCase().indexOf("vedge") > -1 ? a.isVEdge = !0 : ""),
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "system_status",
            title: "System Status"
        }];
        var l = 50
          , m = 200
          , n = "auto"
          , o = "auto";
        a.$on("gridster-resized", function() {
            j(),
            a.hardwareHealthRow1.options.gridsterOptions.colWidth = n,
            a.hardwareHealthRow2.options.gridsterOptions.colWidth = o,
            a.hardwareHealthRow1.options.gridsterOptions.rowHeight = l,
            a.hardwareHealthRow2.options.gridsterOptions.rowHeight = m
        }),
        a.$on("$viewContentLoaded", function() {
            j();
            var b = {
                margins: [10, 15],
                columns: 2,
                minColumns: 2,
                maxRows: 2,
                colWidth: n,
                rowHeight: l,
                outerMargin: !0,
                pushing: !1,
                floating: !1,
                mobileModeEnabled: !1,
                draggable: {
                    enabled: !1
                },
                resizable: {
                    enabled: !1
                }
            }
              , d = {
                margins: [5, 15],
                columns: 2,
                minColumns: 2,
                maxRows: 1,
                colWidth: o,
                rowHeight: m,
                outerMargin: !0,
                pushing: !1,
                floating: !1,
                mobileModeEnabled: !1,
                draggable: {
                    enabled: !1
                },
                resizable: {
                    enabled: !1
                }
            };
            a.hardwareHealthRow1 = new c({
                popup: !0,
                gridsterOptions: b,
                config: []
            }),
            a.hardwareHealthRow2 = new c({
                popup: !0,
                gridsterOptions: d,
                config: []
            }),
            a.hardwareHealthRow1.addWidget({
                col: 0,
                row: 0,
                sizeY: 1,
                sizeX: 1,
                name: "rebootStatus",
                title: "Reboot",
                widgetAPI: "getCounterValues",
                widgetAPIParams: {
                    systemIp: a.systemIp
                },
                templateURL: "app/monitor/devices/dashboard/templates/hardwareHealth/rebootWidget-partial.html",
                permissions: ["System", "Device Monitoring", "Device Reboot", "Software Upgrade"],
                eventsList: [],
                eventWidgetUniqueID: "REBOOT"
            }),
            a.hardwareHealthRow1.addWidget({
                col: 1,
                row: 0,
                sizeY: 1,
                sizeX: 1,
                name: "crashStatus",
                title: "Crash",
                widgetAPI: "getCounterValues",
                widgetAPIParams: {
                    systemIp: a.systemIp
                },
                templateURL: "app/monitor/devices/dashboard/templates/hardwareHealth/crashWidget-partial.html",
                permissions: ["System", "Device Monitoring", "Device Reboot", "Software Upgrade"],
                eventsList: [],
                eventWidgetUniqueID: "CRASH"
            }),
            a.hardwareHealthRow2.addWidget({
                col: 0,
                row: 0,
                sizeY: 1,
                sizeX: 1,
                name: "hardwareComponents1",
                widgetAPI: "getHardwareData",
                widgetAPIParams: {
                    systemIp: a.systemIp,
                    name: "hardwareComponents1",
                    deviceModel: a.deviceModel
                },
                templateURL: "app/monitor/devices/dashboard/templates/hardwareHealth/envWidget-single-partial.html",
                permissions: ["System", "Device Monitoring", "Device Reboot", "Software Upgrade"],
                eventsList: [],
                eventWidgetUniqueID: "COMPONENTS1"
            }),
            a.hardwareHealthRow2.addWidget({
                col: 1,
                row: 0,
                sizeY: 1,
                sizeX: 1,
                name: "hardwareComponents2",
                widgetAPI: "getHardwareData",
                widgetAPIParams: {
                    systemIp: a.systemIp,
                    name: "hardwareComponents2"
                },
                templateURL: "app/monitor/devices/dashboard/templates/hardwareHealth/envWidget-table-partial.html",
                permissions: ["System", "Device Monitoring", "Device Reboot", "Software Upgrade"],
                eventsList: [],
                eventWidgetUniqueID: "COMPONENTS2"
            })
        });
        var p, q, r, s;
        a.chartServerCall = !0,
        a.currentCPU = null,
        a.currentMEM = null;
        var t = "Real-time 1min load average"
          , u = "";
        a.statsText = u;
        var v = {
            autoLoadFields: !1,
            searchCallBack: function(b) {
                a.chartObject.changeNoDataMessageState(!1),
                angular.isDefined(b.realTime) ? (s && (h.cancel(s),
                s = {}),
                a.chartObject.realTimeLoad = !0,
                a.chartObject.asyncLoad = !1,
                a.currentCPU = null,
                a.currentMEM = null,
                a.chartObject.emptyAllSeriesData(),
                r = b,
                a.statsText = t,
                a.chartObject.changeLoadingIndicatorState(!0),
                k()) : (u = d.getCurrentTimeSelectionString(b),
                a.statsText = u,
                a.chartObject.cancelRealTimePolling(),
                h.cancel(s),
                s = {},
                a.chartObject.realTimeLoad = !1,
                a.chartObject.asyncLoad = !0,
                a.chartObject.emptyAllSeriesData(),
                a.chartObject.removeSeriesNames([d.getCpuService(), d.getMemoryService()]),
                p = d.appendFilterAggregation(b, a.localSystemIp, "cpu_min5_avg"),
                q = d.appendFilterAggregation(b, a.localSystemIp, "mem_util"),
                a.chartObject.changeLoadingIndicatorState(!0),
                d.getChartData(p, "cpu_min5_avg", a.deviceModel).then(function(b) {
                    angular.isDefined(b.totalAvg) && !isNaN(b.totalAvg) ? a.currentCPU = b.totalAvg.toFixed(2) : a.currentCPU = null,
                    a.chartObject.changeLoadingIndicatorState(!1),
                    a.queryBuilderObj.disableUserActions(!1),
                    a.chartObject.changeNoDataMessageState(!1),
                    a.chartObject.addSeriesFromRawDataMultiYAxis(d.getCpuService(), b.data, 0),
                    d.getChartData(q, "mem_util", a.deviceModel).then(function(c) {
                        angular.isDefined(c.totalAvg) && !isNaN(b.totalAvg) ? a.currentMEM = c.totalAvg.toFixed(2) : a.currentMEM = null,
                        a.chartObject.addSeriesFromRawDataMultiYAxis(d.getMemoryService(), c.data, 1),
                        a.chartServerCall = !1
                    }, function(b) {
                        a.showErrorSection = !0,
                        a.errorMessage = b,
                        a.chartServerCall = !1
                    })
                }, function(b) {
                    a.showErrorSection = !0,
                    a.errorMessage = b,
                    a.chartServerCall = !1
                }))
            },
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !1,
            returnFilteredObject: !0,
            enableRealTime: !0
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderObj = new g(v),
        a.chartObject = new f({
            asyncLoad: !0
        }),
        a.chartObject.setXAxisProperty("entry_time"),
        a.chartObject.setYAxisProperty(["cpu_used", "mem_util"]),
        a.chartObject.setChartOptionsXAxis(d.getXAxisConfig()),
        a.chartObject.setChartOptions(d.getPlotOptions()),
        a.chartObject.setChartOptionsYAxis(d.getYAxisConfig("yAxisConfigCPU"), 0),
        a.chartObject.addChartOptionsYAxis(d.getYAxisConfig("yAxisConfigMEM")),
        a.chartObject.setSeriesNames([{
            property: "prop",
            values: []
        }, {
            property: "prop",
            values: []
        }]),
        d.getSystemQueryFields().then(function(b) {
            a.queryBuilderObj.setFieldsData([_.find(b.data, {
                property: "entry_time"
            })]),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }, function(b) {
            a.showErrorSection = !0,
            a.errorMessage = b
        }),
        a.$on("$destroy", function() {
            if (angular.isDefined(b) && angular.isDefined(b.params.deviceType)) {
                var c = a.queryBuilderObj.getComponents();
                a.queryBuilderObj.setGlobalTime(d.getQueryBuilderTimeComponent(c))
            }
            a.chartObject.cancelRealTimePolling(),
            a.chartObject = {},
            h.cancel(s),
            s = void 0
        })
    }
    angular.module("vManage").controller("HardwareHealthController", a),
    a.$inject = ["$scope", "$state", "HardwareHealthFactory", "hardwareHealthService", "appUtil", "HighStockLineChart", "QueryBuilderFactory", "$interval", "monitorApiConstants"]
}(),
function() {
    function a(a, b, c, d, e) {
        a.stateString = d.getStateString(b),
        a.localSystemIp = b.params.localSystemIp,
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "system_status",
            title: "System Status",
            state: "app.monitor.devices.dashboard.hardware_health",
            params: b.params
        }, {
            name: "reboot",
            title: "Reboot"
        }];
        var f = new e({
            columnResizing: !0,
            singleSelect: !1,
            enableSorting: !0,
            dataUid: "localSystemIp",
            tableHeightOffset: 256,
            autoLoad: !0,
            tableName: "unplannedRebootTable"
        });
        f.name = "unplanned-reboot",
        a.unplannedRebootTable = f,
        f.loadDataFromUrl(c.getUnplannedRebootTableData(a.localSystemIp)),
        a.$on("$destroy", function() {
            console.log("destroy reboot Controller")
        })
    }
    angular.module("vManage").controller("HealthRebootController", a),
    a.$inject = ["$scope", "$state", "hardwareHealthService", "appUtil", "Table"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m) {
        function n(c) {
            g.getInterfaceData(b.params.localSystemIp, b.params.ifname).then(function(b) {
                a.table.serverCallInProgress = !1,
                c ? (a.table.createColumns(g.getInterfaceTableColumns()),
                a.table.setTableData(b.data),
                h(function() {
                    g.setChartSeriesNames(null, []);
                    for (var b = 0, c = a.table.uiGridApi.grid.getVisibleRows(), d = 0; d < c.length && (a.table.uiGridApi.selection.toggleRowSelection(c[d].entity),
                    t.value.push(c[d].entity.ifname),
                    b++,
                    6 != b); d++)
                        ;
                    a.queryBuilderObj.loadQueryBuilderWithFieldsData()
                }, 0, 1)) : (a.table.taggedSearchObject.setSearchCache(b.data),
                a.table.refreshTableData(b.data),
                a.table.taggedSearchObject.searchData())
            }, function(b) {
                a.table.serverCallInProgress = !1,
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        }
        function o(c) {
            angular.isUndefined(c) && _.indexOf(["pkts", "octets", "errors", "drops"], a.chartOptions.selection.id) > -1 && (c = !0),
            a.queryBuilderObj.disableUserActions(!0),
            g.fetchRealTimeData(b.params.systemIp, a.ipvOptions.selection, a.chartOptions.selection).then(function(b) {
                return a.chartObject.changeLoadingIndicatorState(!1),
                angular.isDefined(a.chartObject) ? (a.chartObject.changeNoDataMessageState(!1),
                c || (b.data.length > 0 && a.chartObject.prefillSeriesData(b.data[0].entry_time, l.REALTIME_INTERVAL_SIZE),
                a.chartObject.concatFromRawData(b.data, !0, l.REALTIME_INTERVAL_SIZE)),
                s = !1,
                a.queryBuilderObj.disableUserActions(!1),
                void (r = h(function() {
                    o(!1)
                }, 1e4, 1))) : (h.cancel(r),
                r = {},
                !1)
            }, function(b) {
                a.chartObject.checkSetNoDataMessage(),
                a.queryBuilderObj.disableUserActions(!1)
            })
        }
        function p() {
            var c = !1;
            _.indexOf(["pkts", "octets", "errors", "drops"], a.chartOptions.selection.id) > -1 && (c = !0),
            a.queryBuilderObj.disableUserActions(!0),
            g.fetchRealTimeData(b.params.systemIp, a.ipvOptions.selection, a.chartOptions.selection).then(function(b) {
                a.table.serverCallInProgress = !1,
                a.chartObject.changeNoDataMessageState(!1),
                c || a.chartObject.concatFromRawData(b.data, !0, l.REALTIME_INTERVAL_SIZE),
                s = !1,
                a.queryBuilderObj.disableUserActions(!1)
            }, function(b) {
                a.chartObject.checkSetNoDataMessage(),
                a.queryBuilderObj.disableUserActions(!1)
            })
        }
        a.stateString = c.getStateString(b),
        a.isApplicable = !1,
        a.deviceType = b.params.deviceType,
        a.isApplicable = k.isVEdge(b.params.deviceType),
        a.breadCrumb = {
            states: [{
                name: "network",
                title: "Network",
                state: "app.monitor.devices.grid"
            }, {
                name: "interface",
                title: "Interface"
            }]
        },
        angular.isDefined(b.params.deviceVersion) ? a.showIpvOptions = parseFloat(b.params.deviceVersion) >= 16.3 : g.getDeviceData().then(function(c) {
            var d = _.find(c.data, function(a) {
                return angular.equals(a.deviceId, b.params.systemIp)
            });
            a.showIpvOptions = parseFloat(d.version) >= 16.3
        }, function(b) {
            a.showErrorSection = !0,
            a.errorMessage = errMsg
        });
        var q, r, s = !0, t = {
            value: [],
            field: "interface",
            type: "string",
            operator: "in"
        };
        a.chartOptions = {
            options: g.getChartOptions()
        },
        a.chartOptions.selection = a.chartOptions.options.kbps,
        a.ipvOptions = {
            options: g.getIPVOptions()
        },
        a.ipvOptions.selection = a.ipvOptions.options.combined;
        var u = {
            autoLoadFields: !1,
            searchCallBack: function(c) {
                angular.isDefined(c.realTime) ? (g.setPrevRealtimeResponse(void 0),
                a.chartObject.realTimeLoad = !0,
                a.chartObject.asyncLoad = !1,
                a.chartObject.emptyAllSeriesData(),
                q = c,
                r && (h.cancel(r),
                r = {}),
                a.chartObject.changeLoadingIndicatorState(!0),
                o()) : (h.cancel(r),
                r = {},
                a.chartObject.realTimeLoad = !1,
                a.chartObject.asyncLoad = !0,
                t.value = _.map(a.table.uiGridApi.selection.getSelectedRows(), function(a) {
                    return a.interface
                }),
                q = g.appendFilterAggregation(c, b.params.localSystemIp, t, a.chartOptions.selection, a.ipvOptions.selection),
                a.chartObject.emptyAllSeriesData(),
                a.chartObject.addSeriesNames(_.map(t.value, function(b) {
                    return {
                        name: b,
                        display: b,
                        yAxis: 0,
                        axisIndexLabel: a.chartOptions.selection.axisLabel[0]
                    }
                })),
                a.chartObject.addSeriesNames(_.map(t.value, function(b) {
                    return {
                        name: b,
                        display: b,
                        yAxis: 1,
                        axisIndexLabel: a.chartOptions.selection.axisLabel[1]
                    }
                })),
                a.chartObject.addSeriesFromAPI([], l.INTERFACE_AGGREGATION, q),
                s = !1)
            },
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !1,
            returnFilteredObject: !0,
            enableRealTime: !angular.isUndefined(b.params.systemIp) && !angular.equals(b.params.reachability, "unreachable")
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderObj = new f(u),
        a.chartObject = new d(g.getChartDefinition(),g.getChartConfig()),
        a.chartObject.setXAxisProperty(g.getChartXAxisProperty()),
        a.chartObject.setYAxisProperty(g.getChartYAxisProperty()),
        a.chartObject.setSeriesNames(g.getChartSeriesNames()),
        a.chartObject.setSeriesCustomOptions({
            yAxisUnit: "kbps"
        });
        var v = new e({
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !0,
            enableSorting: !0,
            tableHeightOffset: 325,
            tableName: "interface",
            dataUid: "vdevice-dataKey",
            showSelectAllOption: !1,
            isRowSelectable: function(a) {
                return !0
            }
        },{
            custom: !0,
            customTemplateUrl: "app/monitor/devices/dashboard/templates/interface/customInterfaceToolbar.html"
        })
          , w = function(b) {
            var c = angular.copy(q)
              , d = {};
            if (c.realTime)
                var d = {
                    value: _.pluck(b, "interface")
                };
            else {
                var d = _.find(c.query.rules, function(a) {
                    return angular.equals(a.field, "interface")
                });
                d.value = _.pluck(b, "interface")
            }
            t.value = t.value.concat(d.value),
            "combined" == a.ipvOptions.selection.id ? (a.chartObject.addSeriesNames(_.map(d.value, function(b) {
                return {
                    name: b,
                    display: b,
                    yAxis: 0,
                    axisIndexLabel: a.chartOptions.selection.axisLabel[0]
                }
            })),
            a.chartObject.addSeriesNames(_.map(d.value, function(b) {
                return {
                    name: b,
                    display: b,
                    yAxis: 1,
                    axisIndexLabel: a.chartOptions.selection.axisLabel[1]
                }
            }))) : (a.chartObject.addSeriesNames(_.map(d.value, function(b) {
                return {
                    name: b,
                    display: b + "[IPv4]",
                    value: [b, "ipv4"],
                    yAxis: 0,
                    axisIndexLabel: "IPv4 -" + a.chartOptions.selection.axisLabel[0]
                }
            })),
            a.chartObject.addSeriesNames(_.map(d.value, function(b) {
                return {
                    name: b,
                    display: b + "[IPv4]",
                    value: [b, "ipv4"],
                    yAxis: 1,
                    axisIndexLabel: "IPv4 -" + a.chartOptions.selection.axisLabel[1]
                }
            })),
            a.chartObject.addSeriesNames(_.map(d.value, function(b) {
                return {
                    name: b,
                    display: b + "[IPv6]",
                    value: [b, "ipv6"],
                    yAxis: 0,
                    axisIndexLabel: "IPv6 -" + a.chartOptions.selection.axisLabel[0]
                }
            })),
            a.chartObject.addSeriesNames(_.map(d.value, function(b) {
                return {
                    name: b,
                    display: b + "[IPv6]",
                    value: [b, "ipv6"],
                    yAxis: 1,
                    axisIndexLabel: "IPv6 -" + a.chartOptions.selection.axisLabel[1]
                }
            }))),
            c.realTime ? p() : a.chartObject.addSeriesFromAPI([], l.INTERFACE_AGGREGATION, c);
        }
          , x = function(b) {
            var c = _.pluck(b, "name");
            t.value = _.difference(t.value, c),
            a.chartObject.removeSeriesNames(_.map(b, function(a) {
                return {
                    name: a.name,
                    display: a.name,
                    yAxis: 0
                }
            })),
            a.chartObject.removeSeriesNames(_.map(b, function(a) {
                return {
                    name: a.name,
                    display: a.name,
                    yAxis: 1
                }
            }))
        }
          , y = {
            getOperStateCount: function(b) {
                return _.filter(a.table.uiGridApi.grid.rows, function(a) {
                    return a.visible && angular.isDefined(a.entity["if-oper-status"]) && angular.equals(a.entity["if-oper-status"].toLowerCase(), b)
                }).length
            },
            getAdminStateCount: function(b) {
                return _.filter(a.table.uiGridApi.grid.rows, function(a) {
                    return a.visible && angular.isDefined(a.entity["if-admin-status"]) && angular.equals(a.entity["if-admin-status"].toLowerCase(), b)
                }).length
            },
            transitionToInterfaceDetails: function(a) {
                b.go("app.monitor.devices.dashboard.interfaceDetails", {
                    deviceType: b.params.deviceType,
                    systemIp: b.params.systemIp,
                    localSystemIp: b.params.localSystemIp,
                    deviceModel: b.params.deviceModel
                })
            },
            checkForCellularInterface: function(a) {
                return (angular.equals(a.entity.ifname, "cellular0") || angular.equals(a.entity.ifname, "cellular1")) && angular.equals(a.entity["if-admin-status"], "Up")
            },
            selectTreeNode: function(b, c) {
                if (s)
                    return !1;
                var d = _.filter(a.chartObject.filtersSelected.series[0].values, {
                    yAxis: 0
                })
                  , e = a.table.uiGridApi.selection.getSelectedRows().filter(function(a) {
                    return !d.some(function(b) {
                        return a.interface == b.name
                    })
                });
                if (e.length > 0) {
                    var f = a.table.uiGridApi.selection.getSelectedRows().length;
                    f <= l.MAX_INTERFACE_SERIES_ALLOWED ? i(w, 1e3, !1, e) : Math.abs(e.length - f) < l.MAX_INTERFACE_SERIES_ALLOWED ? (angular.forEach(e.slice(e.length - (f - l.MAX_INTERFACE_SERIES_ALLOWED), e.length), function(a) {
                        v.uiGridApi.selection.unSelectRow(a)
                    }),
                    e = e.slice(0, e.length - (f - l.MAX_INTERFACE_SERIES_ALLOWED)),
                    i(w, 1e3, !1, e)) : (angular.forEach(e, function(a) {
                        v.uiGridApi.selection.unSelectRow(a)
                    }),
                    j.info("Select up to " + l.MAX_INTERFACE_SERIES_ALLOWED + " Interfaces", 3e3))
                }
                var g = d.filter(function(b) {
                    return !a.table.uiGridApi.selection.getSelectedRows().some(function(a) {
                        return b.name == a.interface
                    })
                });
                g.length > 0 && i(x, 1e3, !1, g)
            }
        };
        v.setPostRefreshCallback(function() {
            a.queryBuilderObj.options.disableUserActions || n(!1)
        }),
        v.setOnRowSelectionCallback(y.selectTreeNode),
        v.setAppScope(y);
        var z = [{
            property: "display",
            value: "routable",
            config: {
                cellTemplate: '<div class="ui-grid-cell-contents"><span ng-if="grid.appScope.checkForCellularInterface(row)" id="ifname_{{rowRenderIndex}}" class="link-cell" style="padding: 0" data-ng-click="grid.appScope.transitionToInterfaceDetails(row)">{{ row.entity[\'ifname\'] }}</span><span ng-if="!grid.appScope.checkForCellularInterface(row)" id="ifname_{{rowRenderIndex}}">{{ row.entity[\'ifname\'] }}</span></div>',
                enableFiltering: !0,
                enableSorting: !0
            }
        }];
        v.addCustomColumns(z),
        a.table = v,
        g.getInterfaceFields().then(function(b) {
            a.queryBuilderObj.setFieldsData([_.find(b.data, {
                property: "entry_time"
            })]),
            n(!0)
        }, function(b) {
            a.showErrorSection = !0,
            a.errorMessage = b
        }),
        a.updateIPvCheckboxSelection = function(b) {
            angular.isDefined(r) && (h.cancel(r),
            r = {});
            var c = angular.copy(a.chartObject.getSeriesNames());
            angular.equals(b.id, "combined") ? (g.setChartSeriesNames("interface"),
            a.chartObject.removeAllSeriesNames(),
            q.realTime || g.removeAFTypeFilterAggregation(q),
            c = _.uniq(c, "name"),
            angular.forEach(c, function(b) {
                a.chartObject.addSeriesNames({
                    name: b.name,
                    display: b.name,
                    yAxis: 0,
                    axisIndexLabel: a.chartOptions.selection.axisLabel[0]
                }),
                a.chartObject.addSeriesNames({
                    name: b.name,
                    display: b.name,
                    yAxis: 1,
                    axisIndexLabel: a.chartOptions.selection.axisLabel[1]
                })
            })) : (g.setChartSeriesNames(["interface", "af_type"]),
            a.chartObject.removeAllSeriesNames(),
            angular.forEach(c, function(b) {
                a.chartObject.addSeriesNames({
                    name: b.name,
                    display: b.name + "[IPv4]",
                    value: [b.name, "ipv4"],
                    yAxis: 0,
                    axisIndexLabel: "IPv4 -" + a.chartOptions.selection.axisLabel[0]
                }),
                a.chartObject.addSeriesNames({
                    name: b.name,
                    display: b.name + "[IPv4]",
                    value: [b.name, "ipv4"],
                    yAxis: 1,
                    axisIndexLabel: "IPv4 -" + a.chartOptions.selection.axisLabel[1]
                }),
                a.chartObject.addSeriesNames({
                    name: b.name,
                    display: b.name + "[IPv6]",
                    value: [b.name, "ipv6"],
                    yAxis: 0,
                    axisIndexLabel: "IPv6 -" + a.chartOptions.selection.axisLabel[0]
                }),
                a.chartObject.addSeriesNames({
                    name: b.name,
                    display: b.name + "[IPv6]",
                    value: [b.name, "ipv6"],
                    yAxis: 1,
                    axisIndexLabel: "IPv6 -" + a.chartOptions.selection.axisLabel[1]
                })
            }),
            q.realTime || g.appendAFTypeFilterAggregation(q)),
            q.realTime ? o() : a.chartObject.refresh(l.INTERFACE_AGGREGATION, q)
        }
        ,
        a.updateCheckboxSelection = function(b) {
            angular.isDefined(r) && (h.cancel(r),
            r = {}),
            a.chartObject.highChartApi.yAxis[0].setTitle({
                text: "Rx " + b.name
            }, !1),
            a.chartObject.highChartApi.yAxis[1].setTitle({
                text: "Tx " + b.name
            }, !1),
            a.chartObject.setChartOptionsYAxis({
                min: 0,
                minRange: 1,
                lineWidth: 2,
                labels: {
                    enabled: !0
                },
                opposite: !1,
                visible: !0,
                title: {
                    text: "Rx " + b.name
                }
            }, 0),
            a.chartObject.setChartOptionsYAxis({
                min: 0,
                minRange: 1,
                lineWidth: 2,
                labels: {
                    enabled: !0
                },
                opposite: !1,
                visible: !0,
                title: {
                    text: "Tx " + b.name
                }
            }, 1),
            a.chartObject.setYAxisProperty(b.properties),
            a.chartObject.setSeriesCustomOptions({
                formatDataToBytes: !!b.formatDataToBytes,
                formatDataToPackets: !!b.formatDataToPackets,
                formatDataToPacketsPerSecond: !!b.formatDataToPacketsPerSecond,
                formatDataToBitsPerSecond: !!b.formatDataToBitsPerSecond,
                formatDataToPacketCount: !!b.formatDataToPacketCount,
                yAxisUnit: b.yAxisUnit
            }),
            q.realTime ? (a.chartObject.emptyAllSeriesData(),
            o()) : (q.aggregation.metrics = [{
                property: b.properties[0],
                type: b.aggregateBy
            }, {
                property: b.properties[1],
                type: b.aggregateBy
            }],
            a.chartObject.emptyAllSeriesData(),
            a.chartObject.refresh(l.INTERFACE_AGGREGATION, q))
        }
        ,
        a.cancelDialog = function() {
            m.cancel("cancel")
        }
        ,
        a.$on("$destroy", function() {
            if (a.table.resetCustomColumns(),
            angular.isDefined(b) && angular.isDefined(b.params.deviceType)) {
                var c = a.queryBuilderObj.getComponents();
                a.queryBuilderObj.setGlobalTime(g.getQueryBuilderTimeComponent(c))
            }
            a.chartObject.cancelRealTimePolling(),
            a.chartObject = {},
            h.cancel(r),
            r = {}
        })
    }
    angular.module("vManage").controller("InterfaceController", a),
    a.$inject = ["$scope", "$state", "appUtil", "HighStockMultiGroupLineChart", "Table", "QueryBuilderFactory", "InterfaceService", "$interval", "$debounce", "notification", "DeviceService", "monitorApiConstants", "$mdDialog"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        a.isCellularDevice = "vedge-100-WM" === c.params.deviceModel || "vedge-1000" === c.params.deviceModel || "vedge-100-M" === c.params.deviceModel,
        a.deviceModel = c.params.deviceModel,
        a.reachability = !0,
        a.modemSpinner = !0,
        a.radioSpinner = !0,
        a.networkSpinner = !0,
        a.ipSpinner = !0,
        a.placeHolder = " -- ",
        a.lrStatus = "No",
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "interface",
            title: "Interface",
            state: "app.monitor.devices.dashboard.interface"
        }, {
            name: "interfaceDetails",
            title: "Interface Details"
        }],
        a.getData = function() {
            var b = e.getCellularStatus(c.params.systemIp)
              , d = e.getCellularModem(c.params.systemIp)
              , g = e.getCellularRadio(c.params.systemIp)
              , h = e.getCellularNetwork(c.params.systemIp)
              , i = e.getCellularIp(c.params.systemIp)
              , j = e.getControlLocalProperties(c.params.systemIp)
              , k = f.defer();
            f.all([b, d, g, h, i, j]).then(function(b) {
                a.signalStrength = 0 === b[0].data.length ? "No signal" : b[0].data[0]["signal-strength"],
                a.simStatus = 0 === b[0].data.length ? a.placeHolder : b[0].data[0]["sim-status"],
                a.lastSeenError = 0 === b[0].data.length ? a.placeHolder : b[0].data[0]["last-seen-error"],
                a.modemRecords = {
                    "Modem Status": 0 === b[1].data.length ? a.placeHolder : b[1].data[0]["modem-status"],
                    Model: 0 === b[1].data.length ? a.placeHolder : b[1].data[0].model,
                    FW: 0 === b[1].data.length ? a.placeHolder : b[1].data[0]["fw-version"],
                    Temperature: 0 === b[1].data.length ? a.placeHolder : b[1].data[0].temperature + " deg C",
                    IMEI: 0 === b[1].data.length ? a.placeHolder : b[1].data[0].imei,
                    "SIM Status": 0 === b[1].data.length ? a.placeHolder : a.simStatus,
                    ICCID: 0 === b[1].data.length ? a.placeHolder : b[1].data[0].iccid
                },
                a.modemSpinner = !1,
                a.radioRecords = {},
                a.radioRecords.Mode = 0 === b[2].data.length ? a.placeHolder : b[2].data[0].mode,
                "LTE" === a.radioRecords.Mode && (a.radioRecords.Band = b[2].data[0].band,
                a.radioRecords.Bandwidth = parseInt(b[2].data[0].bandwidth, 10) + " MHz",
                a.radioRecords.RSSI = b[2].data[0].rssi + " dBm",
                a.radioRecords.RSRP = b[2].data[0].rsrp + " dBm",
                a.radioRecords.RSRQ = b[2].data[0].rsrq + " dBm",
                a.radioRecords.SNR = parseInt(b[2].data[0].snr, 10) + " dB"),
                "WCDMA" !== a.radioRecords.Mode && "CDMA" !== a.radioRecords.Mode && "GSM" !== a.radioRecords.Mode && "HDR" !== a.radioRecords.Mode || (a.radioRecords["EC/IO"] = b[2].data[0].ecio + " dBm",
                a.radioRecords.Channel = b[2].data[0].channel,
                a.radioRecords["Band Class"] = b[2].data[0]["band-class"],
                a.radioRecords.RSSI = b[2].data[0].rssi + " dBm"),
                "GSM" === a.radioRecords.Mode && delete a.radioRecords["EC/IO"],
                "HDR" === a.radioRecords.Mode && (a.radioRecords.SINR = b[2].data[0].sinr + " dB",
                a.radioRecords["Received IO"] = b[2].data[0].io + " dBm"),
                a.radioSpinner = !1,
                a.networkRecords = {
                    Status: 0 === b[3].data.length ? a.placeHolder : b[3].data[0]["reg-status"],
                    "Roaming Status": 0 === b[3].data.length ? a.placeHolder : b[3].data[0]["roam-status"],
                    "Packet Switched Domain State": 0 === b[3].data.length ? a.placeHolder : b[3].data[0]["domain-status"]
                },
                "LTE" !== a.radioRecords.Mode && "WCDMA" !== a.radioRecords.Mode && "GSM" !== a.radioRecords.Mode || (a.networkRecords.MCC = 0 === b[3].data.length ? a.placeHolder : b[3].data[0].mcc,
                a.networkRecords.MNC = 0 === b[3].data.length ? a.placeHolder : b[3].data[0].mnc,
                a.networkRecords.Name = 0 === b[3].data.length ? a.placeHolder : b[3].data[0]["nw-name"],
                a.networkRecords["Cell ID"] = 0 === b[3].data.length ? a.placeHolder : b[3].data[0].cellid),
                "LTE" === a.radioRecords.Mode && (a.networkRecords["EPS Mobility Management State"] = 0 === b[3].data.length ? a.placeHolder : b[3].data[0]["emm-state"],
                a.networkRecords["Tracking Area Code"] = 0 === b[3].data.length ? a.placeHolder : b[3].data[0].tac),
                "WCDMA" === a.radioRecords.Mode && (a.networkRecords["Locality Area Code"] = 0 === b[3].data.length ? a.placeHolder : b[3].data[0].lac,
                a.networkRecords["Primary Scrambling Code"] = 0 === b[3].data.length ? a.placeHolder : b[3].data[0].psc),
                "GSM" === a.radioRecords.Mode && (a.networkRecords["Locality Area Code"] = 0 === b[3].data.length ? a.placeHolder : b[3].data[0].lac,
                a.networkRecords["Base Station Identity Code"] = 0 === b[3].data.length ? a.placeHolder : b[3].data[0].bsic),
                "CDMA" === a.radioRecords.Mode && (a.networkRecords["System ID"] = 0 === b[3].data.length ? a.placeHolder : b[3].data[0].sid,
                a.networkRecords["Network ID"] = 0 === b[3].data.length ? a.placeHolder : b[3].data[0].nid,
                a.networkRecords["Base Station ID"] = 0 === b[3].data.length ? a.placeHolder : b[3].data[0].bid),
                a.networkSpinner = !1,
                a.ipRecords = {
                    "Asigned IP": 0 === b[4].data.length ? a.placeHolder : b[4].data[0]["ipv4-addr"],
                    Gateway: 0 === b[4].data.length ? a.placeHolder : b[4].data[0]["ipv4-gw"],
                    "Primary DNS Server": 0 === b[4].data.length ? a.placeHolder : b[4].data[0]["ipv4-dns-pri"],
                    "Rx Bytes": 0 === b[4].data.length ? a.placeHolder : b[4].data[0]["rx-packets"],
                    "Tx Bytes": 0 === b[4].data.length ? a.placeHolder : b[4].data[0]["tx-packets"]
                },
                a.ipSpinner = !1;
                for (var c in b[5].data)
                    "cellular0" === b[5].data[c].interface && (a.lrStatus = "Yes" === b[5].data[c]["last-resort"] ? "Yes" : "No",
                    a.interfaceStateUp = "up" === b[5].data[c]["operation-state"]);
                k.resolve([])
            }, function() {
                a.modemSpinner = !1,
                a.radioSpinner = !1,
                a.networkSpinner = !1,
                a.ipSpinner = !1,
                k.reject([])
            })
        }
        ,
        a.$watchCollection(function() {
            return a.$parent.selectedDevice
        }, function(b) {
            angular.isDefined(a.$parent.selectedDevice) && angular.isDefined(a.$parent.selectedDevice.reachability) && (a.reachability = angular.equals(b.reachability, "reachable"),
            a.isCellularDevice && a.reachability && a.getData())
        })
    }
    angular.module("vManage").controller("InterfaceDetailsController", a),
    a.$inject = ["$scope", "$timeout", "$state", "appUtil", "InterfaceService", "$q"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
        function q(b) {
            e.getDeviceList(b.uri).then(function(b) {
                if ("singleTenant" === p.getUserMode().mode)
                    var d = ["host-name", "status", "system-ip", "site-id", "reachability", "device-model", "device-type"];
                else
                    var d = ["host-name", "status", "local-system-ip", "site-id", "reachability", "device-model", "device-type"];
                a.searchProperties = t(b.header.columns, d),
                a.taggedSearchObject.setSearchProperties(a.searchProperties),
                a.taggedSearchObject.setSearchCache(j("orderBy")(b.data, a.orderBy(a.selectedSortOption.key), !1)),
                angular.copy(a.taggedSearchObject.searchData(a.taggedSearchObject.tags), a.deviceList),
                a.deviceModels = {};
                var e;
                angular.forEach(b.header.columns, function(a) {
                    "device-model" === a.property && (e = a.color)
                }),
                angular.forEach(e, function(b) {
                    a.deviceModels[b.key] = b.displayKey
                });
                var g = _.find(a.taggedSearchObject.getSearchCache(), function(a) {
                    return angular.equals(a["system-ip"], c.params.systemIp)
                });
                angular.isDefined(g) && (a.selectedDevice = g,
                a.isVEdge100WM = f.isVEdge100WM(a.selectedDevice["device-model"]))
            }, function(a) {
                g.confirm(a)
            })
        }
        function r(b) {
            if (angular.isDefined(b) && b.length > 0) {
                var c = b.match(/troubleshooting\/.*/);
                a.showSideNav = !(!d.isNull(c) && angular.isDefined(c) && c.length && c.index)
            }
        }
        if (a.stateString = d.getStateString(c),
        a.deviceListDropDown = {
            isOpen: !1
        },
        a.deviceInfoCall = !1,
        a.showDeviceList = !1,
        a.isVEdge100WM = !1,
        a.deviceList = [],
        a.searchProperties = [],
        a.showSideNav = !0,
        a.troubleShootingList = o.getTroubleShootingOptions(),
        d.isUndefinedOrEmpty(c.params) || d.isUndefinedOrEmpty(c.params.systemIp))
            return c.go("app.monitor.devices.grid", {}),
            !0;
        var s = {
            systemIp: "",
            localSystemIp: "",
            deviceModel: "",
            deviceType: "",
            personality: "",
            reachability: "",
            validity: "",
            uuid: ""
        };
        angular.merge(s, s, c.params),
        a.selectedDevice = {
            "system-ip": s.systemIp,
            "local-system-ip": s.localSystemIp,
            "device-model": s.deviceModel,
            "device-type": s.deviceType,
            personality: s.personality,
            reachability: s.reachability,
            validity: s.validity,
            uuid: s.uuid
        },
        d.checkNestedProperty(s, "deviceModel") && (a.isVEdge100WM = f.isVEdge100WM(a.selectedDevice["device-model"])),
        a.unreachableObj = {
            details: "Data may not be up to date",
            description: "Device unreachable"
        },
        a.sortOptions = [{
            id: 0,
            value: "Reachability",
            key: "reachability"
        }, {
            id: 1,
            value: "Hostname",
            key: "host-name"
        }, {
            id: 3,
            value: "System IP",
            key: "local-system-ip"
        }, {
            id: 4,
            value: "Site ID",
            key: "site-id"
        }, {
            id: 1,
            value: "Device Model",
            key: "device-model"
        }],
        a.isTroubleShootingOptionDisabled = function(a, b) {
            return a.applicableDeviceTypes.indexOf(b) < 0 || angular.isDefined(c.current) && angular.isDefined(c.current.name) && c.current.name === a.stateName
        }
        ;
        var t = function(a, b) {
            var c = [];
            return angular.forEach(a, function(a) {
                angular.forEach(b, function(b) {
                    if (angular.equals(b, a.property)) {
                        var d = {
                            displayName: a.title,
                            name: a.property
                        };
                        c.push(d)
                    }
                })
            }),
            c
        };
        a.toggled = function(b) {
            b && (a.deviceInfoCall = !0,
            e.getDevicePersonality(c.params.systemIp).then(function(b) {
                a.deviceInfoCall = !1,
                a.deviceInfo = {},
                a.deviceInfo.deviceType = b.data[0]["device-type"],
                a.deviceInfo.hostName = b.data[0]["host-name"],
                a.deviceInfo.systemIp = b.data[0]["system-ip"],
                a.deviceInfo.localSystemIp = b.data[0]["local-system-ip"],
                a.deviceInfo.siteId = b.data[0]["site-id"],
                a.deviceInfo.version = b.data[0].version,
                "reachable" === b.data[0].reachability ? (a.deviceInfo.upTime = new Date(b.data[0]["uptime-date"]).toUTCString(),
                a.deviceInfo.reachableFlag = "reachable") : (a.deviceInfo.upTime = "--",
                a.deviceInfo.reachableFlag = "unreachable",
                angular.isDefined(b.data[0].uuid) ? (d.isUndefinedOrEmpty(b.data[0].uuid) || d.isNull(b.data[0].uuid)) && (a.deviceInfo.uuid.notExist = !0) : a.deviceInfo.uuid.notExist = !0),
                a.deviceInfo.deviceModel = b.data[0]["device-model"],
                a.deviceInfo.timeZone = b.data[0].timezone,
                b.data[0].isDeviceGeoData ? (a.deviceInfo.latitude = b.data[0].latitude,
                a.deviceInfo.longitude = b.data[0].longitude) : (a.deviceInfo.latitude = "--",
                a.deviceInfo.longitude = "--"),
                a.deviceInfo.omp = b.data[0].ompPeers || "--",
                a.deviceInfo.bfd = b.data[0].bfdSessions || "--",
                a.deviceInfo.controlConnections = b.data[0].controlConnections || "--"
            }, function(a) {
                g.confirm(a)
            }))
        }
        ;
        var u = h.returnEventsEnum()
          , v = h.returnViewsEnum()
          , w = new i(v.NETWORK,[u.DEVICE]);
        a.taggedSearchObject = new b(a.deviceList,a.searchProperties),
        a.onTagsRemoved = function(b) {
            k(function() {
                a.deviceListDropDown = {
                    isOpen: !0
                }
            })
        }
        ,
        a.orderBy = function(a) {
            return function(b) {
                return "site-id" === a ? parseInt(b[a]) : b[a]
            }
        }
        ,
        a.sortDir = function() {
            a.listAscend = !a.listAscend,
            a.deviceList = j("orderBy")(a.deviceList, null, !a.reverse)
        }
        ,
        a.sortList = function(b, c) {
            a.listAscend = !0,
            a.deviceList = j("orderBy")(a.deviceList, a.orderBy(b.key)),
            k(function() {
                a.$broadcast("vsRepeatTrigger")
            })
        }
        ,
        a.groupOptions = [],
        a.getDeviceGroups = function() {
            var b = n.defer();
            return a.groupOptions.reset(),
            e.getGroupList().then(function(c) {
                if (_.each(c.data, function(b, c) {
                    var d = {
                        id: c,
                        value: b.name,
                        uri: b.uri,
                        key: b.name.toLowerCase().replace(/ /g, "_")
                    };
                    a.groupOptions.push(d)
                }),
                m.sessionStorage.getItem("deviceGroupFilter"))
                    var d = _.find(a.groupOptions, function(a) {
                        return angular.equals(a.value, m.sessionStorage.getItem("deviceGroupFilter")) || angular.equals(a.key, m.sessionStorage.getItem("deviceGroupFilter"))
                    });
                else
                    var d = a.groupOptions[0];
                a.selectedGroupOption = d,
                b.resolve()
            }, function(a) {
                b.reject(a)
            }),
            b.promise
        }
        ,
        a.getDeviceGroups().then(function() {
            q(a.selectedGroupOption)
        }, function(a) {
            g.confirm(a)
        }),
        a.changeDeviceGroup = function(a) {
            a.uri && q(a)
        }
        ,
        a.selectDevice = function(b) {
            a.showDeviceList = !1,
            c.go(c.current.name, {
                systemIp: b["system-ip"],
                localSystemIp: b["local-system-ip"],
                personality: b.personality,
                deviceModel: b["device-model"],
                deviceType: b["device-type"],
                reachability: b.reachability,
                validity: b.validity,
                uuid: b.uuid
            }),
            a.selectedDevice = b,
            a.isVEdge100WM = f.isVEdge100WM(a.selectedDevice["device-model"])
        }
        ,
        a.$on("$destroy", function() {
            h.unsubscribe(w),
            m.sessionStorage.setItem("deviceGroupFilter", a.selectedGroupOption.value)
        }),
        a.$on("device_event", function(b, c) {
            a.showDeviceList && ("status" !== c.eventChangeType && "delete" !== c.eventChangeType && "create" !== c.eventChangeType || q(a.selectedGroupOption))
        }),
        h.subscribe(w),
        r(c.href(c.$current)),
        a.toggleDropdown = function() {
            a.showDeviceList = !a.showDeviceList,
            a.showDeviceList && $(".deviceList-menu").removeClass("ng-hide"),
            a.showTroubleShootingDropdown && (a.showTroubleShootingDropdown = !1)
        }
        ,
        a.toggleTroubleShootingDropDown = function() {
            a.showDeviceList && (a.showDeviceList = !1),
            a.showTroubleShootingDropdown = !a.showTroubleShootingDropdown,
            a.showTroubleShootingDropdown && $(".trouble-shooting-menu").removeClass("ng-hide")
        }
        ,
        a.checkMoreWidthRequiredForTroubleShootingMenu = function() {
            var b = _.filter(a.troubleShootingList, {
                visibility: !0
            });
            return !(!angular.isDefined(b) || !angular.isArray(b) || 3 != b.length)
        }
        ,
        a.checkMoreWidthRequiredForTroubleShootingMenu = function() {
            var b = _.filter(a.troubleShootingList, {
                visibility: !0
            });
            return !(!angular.isDefined(b) || !angular.isArray(b) || 3 != b.length)
        }
        ,
        a.$on("$locationChangeStart", function(a, b, c) {
            r(b)
        }),
        a.goToChildView = function(b) {
            c.go(b),
            a.showTroubleShootingDropdown = !1
        }
        ,
        l.bind("click", function(b) {
            if (b.stopPropagation(),
            $(".device-info-block").hasClass("open") && $(".device-info-block").removeClass("open"),
            a.showDeviceList) {
                if ($(b.target).closest(".device-list-dropdown").length > 0 || $(b.target).closest("#networkDeviceList").length > 0 || $(b.target).closest(".sortButton").length > 0 || $(b.target).closest(".remove-button").length > 0)
                    return !1;
                $(".deviceList-menu").addClass("ng-hide"),
                a.showDeviceList = !1
            }
            if (a.showTroubleShootingDropdown) {
                if ($(b.target).closest("#trouble_shooting_nav_drop_down_list").length > 0 || $(b.target).closest(".options-wrapper").length > 0 || $(b.target).closest("#trouble_shooting_nav_drop_down").length > 0)
                    return !1;
                $(".trouble-shooting-menu").addClass("ng-hide"),
                a.showTroubleShootingDropdown = !1
            }
        })
    }
    angular.module("vManage").controller("MonitorDeviceListController", a),
    a.$inject = ["$scope", "TaggedSearchService", "$state", "appUtil", "deviceListService", "DeviceService", "notification", "eventPoll", "eventListObject", "$filter", "$timeout", "$document", "$window", "$q", "TroubleshootingService", "rbac"]
}(),
angular.module("vManage").controller("RealTimeController", RealTimeController),
RealTimeController.$inject = ["$scope", "$rootScope", "QueryBuilderFactory", "colors", "$state", "$mdDialog", "$log", "realTimeFactory", "appUtil", "certificateService", "$interval", "Table", "deviceOptionsService", "$compile", "$stateParams", "deviceListService", "notification", "$timeout", "$q", "CloudExpressService"],
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
        var q, r, s, t, u, v, w = [], x = null, y = !1;
        a.legend = {
            total: !1
        },
        a.tcpOptToggleButtons = [new p("Flow Destinations","app.monitor.devices.dashboard.tcpOptimization.cflowdDestinations" === b.current.name,"app.monitor.devices.dashboard.tcpOptimization.cflowdDestinations",b.params), new p("Flow Sources","app.monitor.devices.dashboard.tcpOptimization.cflowdFromSources" === b.current.name,"app.monitor.devices.dashboard.tcpOptimization.cflowdFromSources",b.params)],
        a.allVisible = !0,
        a.stateString = "tcpOptimization_cflowd_destinations_",
        a.localSystemIp = b.params.localSystemIp,
        a.deviceType = b.params.deviceType,
        a.isApplicable = o.isVEdge(b.params.deviceType),
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "tcp-optimization-cflowd",
            title: "TCP Optimization - Flows"
        }],
        e.resetTotalUsage();
        var z = {
            viewFlowDetails: function(c) {
                var d = e.getQueryBuilderCurrentState()
                  , g = e.getQueryBuilderOriginalState();
                angular.isDefined(d) && (O = _.findIndex(d, {
                    property: "remote_system_ip"
                }),
                O > -1 && (angular.isDefined(d[O].selectedOptionsList) || (d[O].defaultValue = void 0)),
                f.setQueryBuilderCurrentState(d),
                f.setQueryBuilderOriginalState(g)),
                b.go("app.monitor.devices.dashboard.tcpOptimization.cflowdSources", {
                    systemIp: b.params.systemIp,
                    localSystemIp: a.localSystemIp,
                    deviceType: b.params.deviceType,
                    destinationIp: c.entity.dest_ip
                })
            },
            getPercentUsed: function(a) {
                if (angular.isDefined(a.entity.total_bytes))
                    return a.entity.total_bytes ? (a.entity.total_bytes / e.getTotalUsage() * 100).toFixed(2) : 0
            }
        }
          , A = new c({
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !0,
            enableSorting: !0,
            tableHeightOffset: 190,
            tableName: "device-cflowd-destinations",
            showSelectAllOption: !1,
            dataUid: "dest_ip",
            isRowSelectable: function(a) {
                return !0
            }
        });
        A.setAppScope(z);
        var B = [{
            property: "display",
            value: "destination-ip",
            config: {
                cellTemplate: '<div class="ui-grid-cell-contents toggleContent" data-ng-click="grid.appScope.viewFlowDetails(row)"><span id="view_flow_details" class="link-cell">{{ row.entity.dest_ip }}</span></div>',
                enableFiltering: !0,
                enableSorting: !0
            }
        }, {
            property: "display",
            value: "usage-percentage",
            config: {
                cellTemplate: '<div class="ui-grid-cell-contents usage-block"><div class="pull-left progress-bar-block"><progressbar value="grid.appScope.getPercentUsed(row)"></progressbar></div><div class="usage-percent" id="destination_usage_{{rowRenderIndex}}">{{ grid.appScope.getPercentUsed(row) }} %</div></div>',
                enableFiltering: !1,
                enableSorting: !1
            }
        }];
        A.addCustomColumns(B);
        var C = {
            getTopSourcesChartData: function(b) {
                if (b.isSelected)
                    if (a.table.getSelectedRows().length <= h.MAX_APPLICATION_SERIES_ALLOWED) {
                        var c = _.find(w, {
                            name: b.entity.dest_ip
                        });
                        if (!c) {
                            var d = {
                                name: b.entity.dest_ip,
                                display: b.entity.dest_ip
                            };
                            w.push(d)
                        }
                        i(J, 500, null)
                    } else
                        j.info("Select up to " + h.MAX_APPLICATION_SERIES_ALLOWED + " destination IP", 3e3),
                        A.uiGridApi.selection.unSelectRow(b.entity);
                else
                    w = _.reject(w, function(a) {
                        return a.name === b.entity.dest_ip
                    }),
                    a.cflowdChartObject.removeSeriesNames({
                        name: b.entity.dest_ip,
                        value: b.entity.dest_ip
                    }),
                    e.setChartSeries(w)
            }
        };
        A.setOnRowSelectionCallback(C.getTopSourcesChartData),
        A.setPostRefreshCallback(function() {
            K(e.getTableQueryObject())
        }),
        a.table = A;
        var D = e.getChartConfig();
        a.cflowdChartObject = new g(D[0],D[1]),
        a.cflowdChartObject.setXAxisProperty("entry_time"),
        a.cflowdChartObject.setYAxisProperty(["total_bytes"]),
        a.cflowdChartObject.setSeriesNames({
            property: "dest_ip",
            values: []
        });
        var E = function(b) {
            a.table.serverCallInProgress = !1,
            angular.isObject(b) && m.checkNestedProperty(b, "error", "details") ? (a.showErrorSection = !0,
            a.errorMessage = b) : (n.info("API error response needs to be updated to conform to company guidelines" + a.cflowdChartObject.chartURL),
            a.errorMessage = "Error occurred while retrieving data")
        }
          , F = function(b) {
            a.table.serverCallInProgress = !1;
            var c = b.data
              , d = e.getTableSelections();
            angular.isDefined(d) && d.length > 0 && (c = e.mergeTableData(d, b.data)),
            a.table.columnDefs.length < 1 && a.table.createColumns(e.returnTableColumns(!0)),
            a.table.taggedSearchObject.setSearchCache(c),
            a.table.refreshTableData(c),
            a.table.setDataUrl(s),
            a.table.taggedSearchObject.searchData(),
            angular.isDefined(d) && d.length || b.data.length ? !angular.isDefined(d) && b.data.length ? e.selectDefaultDestinations(a.table) : (a.table.resetAllSelections(),
            e.selectCachedDestinations(a.table, d)) : a.cflowdChartObject.changeNoDataMessageState(!0)
        }
          , G = function(b) {
            var c = angular.copy(x);
            c.query.rules.push(b),
            c = e.appendAggregationFilterForChart(c, w.length),
            r = h.TOP_APPLICATION_CFLOWD_AGGREGATED_URL;
            var d = !angular.equals(e.getChartSeries(), w);
            d || a.cflowdChartObject.getSeriesNames().length < 1 ? (e.setChartSeries(w),
            a.cflowdChartObject.addSeriesFromAPI(w, r, c),
            a.allVisible || (a.allVisible = !0,
            a.legend.total = !1,
            e.setAllSeriesVisible(a.cflowdChartObject))) : a.cflowdChartObject.refresh(r, c),
            a.getTotalOptimizedData()
        }
          , H = function(b) {
            if (_.findIndex(w, function(a) {
                return "Total" === a.name
            }) === -1) {
                var c = {
                    name: "Total",
                    display: "Total"
                };
                w.push(c)
            }
            b.data = _.map(b.data, function(a) {
                return angular.extend(a, {
                    dest_ip: "Total"
                })
            }),
            a.cflowdChartObject.addSeriesFromRawData(w, b.data),
            e.setTotalChartData(b)
        }
          , I = function() {
            _.find(a.cflowdChartObject.chartConfig.series, function(a) {
                return "Total" === a.name
            }) && (w = _.reject(w, function(a) {
                return "Total" === a.name
            }),
            a.cflowdChartObject.removeSeriesNames({
                name: "Total",
                display: "Total"
            }))
        };
        a.getTotalOptimizedData = function() {
            a.legend.total ? angular.isDefined(e.getTotalChartData()) ? H(e.getTotalChartData()) : (u = e.getFilteredObject(),
            u = e.appendTotalAggregationFilter(u),
            u = k.affixStatsAggregationHistogramUrl(u),
            r = h.TOP_APPLICATION_CFLOWD_AGGREGATED_URL,
            e.getTopApplicationsData(r, u).then(H, E)) : I()
        }
        ;
        var J = function() {
            w.length && (I(),
            t = e.getRawQueryObj(),
            angular.forEach(w, function(a) {
                t.value.push(a.name)
            }),
            G(t))
        }
          , K = function(b) {
            var c, d, g;
            e.resetTotalChartData(),
            e.resetTotalUsage(),
            x = angular.copy(b),
            c = a.queryBuilderObj.getComponents(),
            a.isApplicable && f.filterSystemIP(c, a.localSystemIp),
            e.setQueryBuilderCurrentState(c),
            a.table.data.length > 0 && e.setTableSelections(a.table.getSelectedRows()),
            x = e.appendAggregationFilterForTable(x),
            e.setTableQueryObject(x),
            r = h.TOP_APPLICATION_CFLOWD_AGGREGATED_URL,
            d = e.getTopApplicationsData(r, x),
            v = angular.copy(b),
            v = e.appendTotalAggregationFilter(v),
            g = e.getTopApplicationsData(r, v),
            l.all([d, g]).then(function(a) {
                e.setTotalUsage(a[1].data),
                F(a[0])
            }, E),
            y || (e.setQueryBuilderOriginalState(a.queryBuilderObj.getOriginalComponents()),
            y = !0)
        }
          , L = function(b) {
            e.setFilteredObject(e.appendTCPOptFilter(b)),
            e.setAllSeriesVisible(a.cflowdChartObject),
            a.legend.total = !1,
            a.allVisible = !0,
            K(b)
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        };
        var M = e.getQueryBuilderCurrentState()
          , N = e.getQueryBuilderOriginalState()
          , O = _.findIndex(M, {
            property: "vdevice_name"
        });
        O > -1 && M.splice(O, 1),
        angular.isDefined(b.params.localTLOC) && null !== b.params.localTLOC && (O = _.findIndex(M, {
            property: "local_color"
        }),
        O > -1 && M.splice(O, 1)),
        angular.isDefined(b.params.remoteTLOC) && null !== b.params.remoteTLOC && (O = _.findIndex(M, {
            property: "remote_color"
        }),
        O > -1 && M.splice(O, 1)),
        angular.isDefined(b.params.remoteSystemIP) && null !== b.params.remoteSystemIP && (O = _.findIndex(M, {
            property: "remote_system_ip"
        }),
        O > -1 && M.splice(O, 1)),
        a.showQueryBuilderTimeStampInbuilt = !1,
        q = {
            autoLoadFields: !1,
            searchCallBack: L,
            queryBuilderPersistedComponents: M,
            queryBuilderOriginalComponents: N,
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0,
            fieldCustomizationsForDataTypeURL: [{
                property: "vpn_id",
                enable: !0,
                addAllForFieldTypeURL: !0,
                appendStringToTheList: !0,
                stringVal: "VPN"
            }, {
                property: "local_color",
                enable: !0,
                filterBy: "local-color",
                unique: !0
            }, {
                property: "remote_color",
                enable: !0,
                filterBy: "color",
                unique: !0
            }]
        },
        a.queryBuilderObj = new d(q),
        e.getTopApplicationsFieldsData(a.localSystemIp, b.params.localTLOC, b.params.remoteTLOC, b.params.remoteSystemIP).then(function(b) {
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }, E),
        a.onLegendClick = function() {
            a.cflowdChartObject.chartConfig.series.length && (_.find(a.cflowdChartObject.chartConfig.series, function(a) {
                return !a.visible
            }) ? a.allVisible = !1 : (a.allVisible = !0,
            a.legend.total = !1,
            I()))
        }
        ,
        a.perspectiveChangeHandler = function(a) {}
        ,
        a.$on("$destroy", function() {
            angular.isDefined(b) && angular.isDefined(b.params.deviceType) && a.queryBuilderObj.setGlobalTime(e.getQueryBuilderTimeComponent()),
            e.setChartSeries(void 0),
            e.setTableSelections(void 0),
            a.table.resetCustomColumns()
        })
    }
    angular.module("vManage").controller("TCPOptCFlowdFromDestinationsController", a),
    a.$inject = ["$scope", "$state", "Table", "QueryBuilderFactory", "CFLOWDDestinationsService", "CFLOWDSourcesService", "HighStockStackedAreaChart", "monitorApiConstants", "$debounce", "notification", "restService", "$q", "appUtil", "$log", "DeviceService", "ToggleButton"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        var l, m, n, o, p, q = [], r = !1;
        a.viewChart = !0,
        a.stateString = "tcpOptimization_cflowd_sources_",
        a.localSystemIp = b.params.localSystemIp,
        a.deviceType = b.params.deviceType,
        a.isApplicable = i.isVEdge(b.params.deviceType),
        a.destinationIp = b.params.destinationIp,
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "tcp-optimization-cflowd",
            title: "TCP Optimization - Flows",
            state: "app.monitor.devices.dashboard.tcpOptimization.cflowdDestinations",
            params: {
                systemIp: b.params.systemIp,
                localSystemIp: b.params.localSystemIp,
                deviceType: b.params.deviceType
            }
        }, {
            name: "TCP Optimization-cflowd",
            title: "Destination IP - " + a.destinationIp
        }];
        var s = {
            getPercentUsed: function(a) {
                if (angular.isDefined(a.entity.total_bytes))
                    return a.entity.total_bytes ? (a.entity.total_bytes / e.getTotalUsage() * 100).toFixed(2) : 0
            }
        }
          , t = new c({
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !1,
            enableSorting: !0,
            tableHeightOffset: 190,
            tableName: "device-cflowd-details"
        });
        t.setAppScope(s);
        var u = [{
            property: "display",
            value: "usage-percentage",
            config: {
                cellTemplate: '<div class="ui-grid-cell-contents usage-block"><div class="pull-left progress-bar-block"><progressbar value="grid.appScope.getPercentUsed(row)"></progressbar></div><div class="usage-percent" id="source_usage_{{rowRenderIndex}}">{{ grid.appScope.getPercentUsed(row) }} %</div></div>',
                enableFiltering: !1,
                enableSorting: !1
            }
        }];
        t.addCustomColumns(u),
        t.setPostRefreshCallback(function() {
            x(e.getFilteredObject())
        }),
        a.table = t,
        p = e.getChartConfig(),
        a.cflowdChartObject = new f(p[0],p[1]),
        a.cflowdChartObject.setXAxisProperty("src_ip"),
        a.cflowdChartObject.setYAxisProperty(["total_bytes"]),
        a.cflowdChartObject.setSeriesNames([{
            property: "src_ip",
            values: []
        }]);
        var v = function(b) {
            a.table.serverCallInProgress = !1;
            var c;
            a.table.columnDefs.length < 1 && a.table.createColumns(e.returnTableColumns(!0)),
            a.table.taggedSearchObject.setSearchCache(b.data),
            a.table.refreshTableData(b.data),
            a.table.setDataUrl(n),
            a.table.taggedSearchObject.searchData(),
            c = angular.copy(b),
            c.data.length > 25 && (c.data = c.data.splice(0, 25)),
            c.header.chart = {
                xAxis: ["src_ip"],
                yAxis: ["total_bytes"],
                series: [""],
                title: "Flows",
                xAxisLabel: "Source IP",
                yAxisLabel: "Usage"
            },
            c.header.fields = [{
                property: "src_ip",
                dataType: "string"
            }, {
                property: "total_bytes",
                dataType: "number",
                display: "Total Bytes"
            }],
            b.data.length > 0 ? (a.cflowdChartObject.changeNoDataMessageState(!1),
            a.cflowdChartObject.addCategoriesFromRawData([{
                name: "sourceIP",
                display: "Source IP",
                type: "column"
            }], {
                names: [],
                property: "src_ip"
            }, b)) : a.cflowdChartObject.changeNoDataMessageState(!0),
            q.reset()
        }
          , w = function(b) {
            a.cflowdChartObject.changeLoadingIndicatorState(!1),
            a.cflowdChartObject.checkSetNoDataMessage(),
            a.table.serverCallInProgress = !1,
            angular.isObject(b) && k.checkNestedProperty(b, "error", "details") ? (a.showErrorSection = !0,
            a.errorMessage = b) : ($log.info("API error response needs to be updated to conform to company guidelines" + a.cflowdChartObject.chartURL),
            a.errorMessage = "Error occurred while retrieving data")
        }
          , x = function(b) {
            var c, d, f, i;
            e.setFilteredObject(e.appendTCPOptFilter(b)),
            c = angular.copy(b),
            d = a.queryBuilderObj.getComponents(),
            a.isApplicable && e.filterSystemIP(d, a.localSystemIp),
            e.setQueryBuilderCurrentState(d),
            c = e.appendAggregationFilterForSources(c),
            m = g.TOP_APPLICATION_CFLOWD_AGGREGATED_URL,
            f = e.getTopApplicationsData(m, c),
            o = angular.copy(b),
            A = _.findIndex(o.query.rules, {
                field: "dest_ip"
            }),
            A > -1 && o.query.rules.splice(A, 1),
            o = e.appendTotalAggregationFilter(o),
            i = e.getTopApplicationsData(m, o),
            a.cflowdChartObject.changeLoadingIndicatorState(!0),
            h.all([f, i]).then(function(a) {
                v(a[0]),
                e.resetTotalUsage(),
                e.setTotalUsage(a[1].data)
            }, w),
            r || (j.setQueryBuilderOriginalState(a.queryBuilderObj.getOriginalComponents()),
            r = !0)
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        },
        a.showQueryBuilderTimeStampInbuilt = !1;
        var y = j.getQueryBuilderCurrentState()
          , z = j.getQueryBuilderOriginalState()
          , A = _.findIndex(y, {
            property: "vdevice_name"
        });
        A > -1 && y.splice(A, 1),
        l = {
            autoLoadFields: !1,
            searchCallBack: x,
            queryBuilderPersistedComponents: y,
            queryBuilderOriginalComponents: z,
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0,
            fieldCustomizationsForDataTypeURL: [{
                property: "vpn_id",
                enable: !0,
                addAllForFieldTypeURL: !0,
                appendStringToTheList: !0,
                stringVal: "VPN"
            }, {
                property: "local_color",
                enable: !0,
                filterBy: "local-color",
                unique: !0
            }, {
                property: "remote_color",
                enable: !0,
                filterBy: "color",
                unique: !0
            }]
        },
        a.queryBuilderObj = new d(l),
        e.getTopApplicationsFieldsData(a.localSystemIp, a.destinationIp).then(function(b) {
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }),
        a.$on("$destroy", function() {
            angular.isDefined(b) && angular.isDefined(b.params.deviceType) && a.queryBuilderObj.setGlobalTime(e.getQueryBuilderTimeComponent()),
            a.table.resetCustomColumns()
        })
    }
    angular.module("vManage").controller("TCPOptCFlowdFromDestSourcesController", a),
    a.$inject = ["$scope", "$state", "Table", "QueryBuilderFactory", "CFLOWDSourcesService", "HighStockBarChart", "monitorApiConstants", "$q", "DeviceService", "CFLOWDDestinationsService", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
        var q, r, s, t, u, v, w = [], x = null, y = !1;
        a.legend = {
            total: !1
        },
        a.tcpOptToggleButtons = [new p("Flow Destinations","app.monitor.devices.dashboard.tcpOptimization.cflowdDestinations" === b.current.name,"app.monitor.devices.dashboard.tcpOptimization.cflowdDestinations",b.params), new p("Flow Sources","app.monitor.devices.dashboard.tcpOptimization.cflowdFromSources" === b.current.name,"app.monitor.devices.dashboard.tcpOptimization.cflowdFromSources",b.params)],
        a.allVisible = !0,
        a.stateString = "tcpOptimization_cflowd_sources_",
        a.localSystemIp = b.params.localSystemIp,
        a.deviceType = b.params.deviceType,
        a.isApplicable = o.isVEdge(b.params.deviceType),
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "tcp-optimization-cflowd",
            title: "TCP Optimization - Flows"
        }],
        f.resetTotalUsage();
        var z = {
            viewFlowDetails: function(c) {
                var d = f.getQueryBuilderComponents()
                  , g = f.getQueryBuilderOriginalState();
                angular.isDefined(d) && (O = _.findIndex(d, {
                    property: "remote_system_ip"
                }),
                O > -1 && (angular.isDefined(d[O].selectedOptionsList) || (d[O].defaultValue = void 0)),
                e.setQueryBuilderComponents(d),
                e.setQueryBuilderOriginalState(g)),
                b.go("app.monitor.devices.dashboard.tcpOptimization.cflowdFromSrcDestination", {
                    systemIp: b.params.systemIp,
                    localSystemIp: a.localSystemIp,
                    deviceType: b.params.deviceType,
                    sourceIp: c.entity.src_ip
                })
            },
            getPercentUsed: function(a) {
                if (angular.isDefined(a.entity.total_bytes))
                    return a.entity.total_bytes ? (a.entity.total_bytes / f.getTotalUsage() * 100).toFixed(2) : 0
            }
        }
          , A = new c({
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !0,
            enableSorting: !0,
            tableHeightOffset: 190,
            tableName: "device-cflowd-sources",
            showSelectAllOption: !1,
            dataUid: "src_ip",
            isRowSelectable: function(a) {
                return !0
            }
        });
        A.setAppScope(z);
        var B = [{
            property: "display",
            value: "source-ip",
            config: {
                cellTemplate: '<div class="ui-grid-cell-contents toggleContent" data-ng-click="grid.appScope.viewFlowDetails(row)"><span id="view_flow_details" class="link-cell">{{ row.entity.src_ip }}</span></div>',
                enableFiltering: !0,
                enableSorting: !0
            }
        }, {
            property: "display",
            value: "usage-percentage",
            config: {
                cellTemplate: '<div class="ui-grid-cell-contents usage-block"><div class="pull-left progress-bar-block"><progressbar value="grid.appScope.getPercentUsed(row)"></progressbar></div><div class="usage-percent" id="source_usage_{{rowRenderIndex}}">{{ grid.appScope.getPercentUsed(row) }} %</div></div>',
                enableFiltering: !1,
                enableSorting: !1
            }
        }];
        A.addCustomColumns(B);
        var C = {
            getTopSourcesChartData: function(b) {
                if (b.isSelected)
                    if (a.table.getSelectedRows().length <= h.MAX_APPLICATION_SERIES_ALLOWED) {
                        var c = _.find(w, {
                            name: b.entity.src_ip
                        });
                        if (!c) {
                            var d = {
                                name: b.entity.src_ip,
                                display: b.entity.src_ip
                            };
                            w.push(d)
                        }
                        i(J, 500, null)
                    } else
                        j.info("Select up to " + h.MAX_APPLICATION_SERIES_ALLOWED + " source IP", 3e3),
                        A.uiGridApi.selection.unSelectRow(b.entity);
                else
                    w = _.reject(w, function(a) {
                        return a.name === b.entity.src_ip
                    }),
                    a.cflowdChartObject.removeSeriesNames({
                        name: b.entity.src_ip,
                        value: b.entity.src_ip
                    }),
                    f.setChartSeries(w)
            }
        };
        A.setOnRowSelectionCallback(C.getTopSourcesChartData),
        A.setPostRefreshCallback(function() {
            K(f.getTableQueryObject())
        }),
        a.table = A;
        var D = f.getChartConfig();
        a.cflowdChartObject = new g(D[0],D[1]),
        a.cflowdChartObject.setXAxisProperty("entry_time"),
        a.cflowdChartObject.setYAxisProperty(["total_bytes"]),
        a.cflowdChartObject.setSeriesNames({
            property: "src_ip",
            values: []
        });
        var E = function(b) {
            a.table.serverCallInProgress = !1,
            angular.isObject(b) && m.checkNestedProperty(b, "error", "details") ? (a.showErrorSection = !0,
            a.errorMessage = b) : (n.info("API error response needs to be updated to conform to company guidelines" + a.cflowdChartObject.chartURL),
            a.errorMessage = "Error occurred while retrieving data")
        }
          , F = function(b) {
            a.table.serverCallInProgress = !1;
            var c = b.data
              , d = f.getTableSelections();
            angular.isDefined(d) && d.length > 0 && (c = f.mergeTableData(d, b.data)),
            a.table.columnDefs.length < 1 && a.table.createColumns(f.returnTableColumns()),
            a.table.taggedSearchObject.setSearchCache(c),
            a.table.refreshTableData(c),
            a.table.setDataUrl(s),
            a.table.taggedSearchObject.searchData(),
            angular.isDefined(d) && d.length || b.data.length ? !angular.isDefined(d) && b.data.length ? f.selectDefaultSources(a.table) : (a.table.resetAllSelections(),
            f.selectCachedSources(a.table, d)) : a.cflowdChartObject.changeNoDataMessageState(!0)
        }
          , G = function(b) {
            var c = angular.copy(x);
            c.query.rules.push(b),
            c = f.appendAggregationFilterForChart(c, w.length),
            r = h.TOP_APPLICATION_CFLOWD_AGGREGATED_URL;
            var d = !angular.equals(f.getChartSeries(), w);
            d || a.cflowdChartObject.getSeriesNames().length < 1 ? (f.setChartSeries(w),
            a.cflowdChartObject.addSeriesFromAPI(w, r, c),
            a.allVisible || (a.allVisible = !0,
            a.legend.total = !1,
            f.setAllSeriesVisible(a.cflowdChartObject))) : a.cflowdChartObject.refresh(r, c),
            a.getTotalOptimizedData()
        }
          , H = function(b) {
            if (_.findIndex(w, function(a) {
                return "Total" === a.name
            }) === -1) {
                var c = {
                    name: "Total",
                    display: "Total"
                };
                w.push(c)
            }
            b.data = _.map(b.data, function(a) {
                return angular.extend(a, {
                    src_ip: "Total"
                })
            }),
            a.cflowdChartObject.addSeriesFromRawData(w, b.data),
            f.setTotalChartData(b)
        }
          , I = function() {
            _.find(a.cflowdChartObject.chartConfig.series, function(a) {
                return "Total" === a.name
            }) && (w = _.reject(w, function(a) {
                return "Total" === a.name
            }),
            a.cflowdChartObject.removeSeriesNames({
                name: "Total",
                display: "Total"
            }))
        };
        a.getTotalOptimizedData = function() {
            a.legend.total ? angular.isDefined(f.getTotalChartData()) ? H(f.getTotalChartData()) : (u = f.getFilteredObject(),
            u = f.appendTotalAggregationFilter(u),
            u = k.affixStatsAggregationHistogramUrl(u),
            r = h.TOP_APPLICATION_CFLOWD_AGGREGATED_URL,
            f.getTopApplicationsData(r, u).then(H, E)) : I()
        }
        ;
        var J = function() {
            w.length && (I(),
            t = f.getRawQueryObj(),
            angular.forEach(w, function(a) {
                t.value.push(a.name)
            }),
            G(t))
        }
          , K = function(b) {
            var c, d, g;
            f.resetTotalChartData(),
            f.resetTotalUsage(),
            x = angular.copy(b),
            c = a.queryBuilderObj.getComponents(),
            a.isApplicable && e.filterSystemIP(c, a.localSystemIp),
            f.setQueryBuilderComponents(c),
            a.table.data.length > 0 && f.setTableSelections(a.table.getSelectedRows()),
            x = f.appendAggregationFilterForTable(x),
            f.setTableQueryObject(x),
            r = h.TOP_APPLICATION_CFLOWD_AGGREGATED_URL,
            d = f.getTopApplicationsData(r, x),
            v = angular.copy(b),
            v = f.appendTotalAggregationFilter(v),
            g = f.getTopApplicationsData(r, v),
            l.all([d, g]).then(function(a) {
                f.setTotalUsage(a[1].data),
                F(a[0])
            }, E),
            y || (f.setQueryBuilderOriginalState(a.queryBuilderObj.getOriginalComponents()),
            y = !0)
        }
          , L = function(b) {
            f.setFilteredObject(f.appendTCPOptFilter(b)),
            f.setAllSeriesVisible(a.cflowdChartObject),
            a.legend.total = !1,
            a.allVisible = !0,
            K(b)
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        };
        var M = f.getQueryBuilderComponents()
          , N = f.getQueryBuilderOriginalState()
          , O = _.findIndex(M, {
            property: "vdevice_name"
        });
        O > -1 && M.splice(O, 1),
        angular.isDefined(b.params.localTLOC) && null !== b.params.localTLOC && (O = _.findIndex(M, {
            property: "local_color"
        }),
        O > -1 && M.splice(O, 1)),
        angular.isDefined(b.params.remoteTLOC) && null !== b.params.remoteTLOC && (O = _.findIndex(M, {
            property: "remote_color"
        }),
        O > -1 && M.splice(O, 1)),
        angular.isDefined(b.params.remoteSystemIP) && null !== b.params.remoteSystemIP && (O = _.findIndex(M, {
            property: "remote_system_ip"
        }),
        O > -1 && M.splice(O, 1)),
        a.showQueryBuilderTimeStampInbuilt = !1,
        q = {
            autoLoadFields: !1,
            searchCallBack: L,
            queryBuilderPersistedComponents: M,
            queryBuilderOriginalComponents: N,
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0,
            fieldCustomizationsForDataTypeURL: [{
                property: "vpn_id",
                enable: !0,
                addAllForFieldTypeURL: !0,
                appendStringToTheList: !0,
                stringVal: "VPN"
            }, {
                property: "local_color",
                enable: !0,
                filterBy: "local-color",
                unique: !0
            }, {
                property: "remote_color",
                enable: !0,
                filterBy: "color",
                unique: !0
            }]
        },
        a.queryBuilderObj = new d(q),
        f.getTopApplicationsFieldsData(a.localSystemIp, b.params.localTLOC, b.params.remoteTLOC, b.params.remoteSystemIP).then(function(b) {
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }, E),
        a.onLegendClick = function() {
            a.cflowdChartObject.chartConfig.series.length && (_.find(a.cflowdChartObject.chartConfig.series, function(a) {
                return !a.visible
            }) ? a.allVisible = !1 : (a.allVisible = !0,
            a.legend.total = !1,
            I()))
        }
        ,
        a.$on("$destroy", function() {
            angular.isDefined(b) && angular.isDefined(b.params.deviceType) && a.queryBuilderObj.setGlobalTime(f.getQueryBuilderTimeComponent()),
            f.setChartSeries(void 0),
            f.setTableSelections(void 0),
            a.table.resetCustomColumns()
        })
    }
    angular.module("vManage").controller("TCPOptCFlowdFromSourcesController", a),
    a.$inject = ["$scope", "$state", "Table", "QueryBuilderFactory", "CflowdFromSrcDestinationsService", "CflowdFromSourcesService", "HighStockStackedAreaChart", "monitorApiConstants", "$debounce", "notification", "restService", "$q", "appUtil", "$log", "DeviceService", "ToggleButton"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        var j, k, l, m, n, o = [];
        a.viewChart = !0,
        a.stateString = "tcpOptimization_cflowd_sources_",
        a.localSystemIp = b.params.localSystemIp,
        a.deviceType = b.params.deviceType,
        a.isApplicable = i.isVEdge(b.params.deviceType),
        a.sourceIp = b.params.sourceIp,
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "tcp-optimization-cflowd",
            title: "TCP Optimization - Flows",
            state: "app.monitor.devices.dashboard.tcpOptimization.cflowdFromSources",
            params: {
                systemIp: b.params.systemIp,
                localSystemIp: b.params.localSystemIp,
                deviceType: b.params.deviceType
            }
        }, {
            name: "TCP Optimization-cflowd",
            title: "Source IP - " + a.sourceIp
        }];
        var p = {
            getPercentUsed: function(a) {
                if (angular.isDefined(a.entity.total_bytes))
                    return a.entity.total_bytes ? (a.entity.total_bytes / e.getTotalUsage() * 100).toFixed(2) : 0
            }
        }
          , q = new c({
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !1,
            enableSorting: !0,
            tableHeightOffset: 190,
            tableName: "device-cflowd-details"
        });
        q.setAppScope(p);
        var r = [{
            property: "display",
            value: "usage-percentage",
            config: {
                cellTemplate: '<div class="ui-grid-cell-contents usage-block"><div class="pull-left progress-bar-block"><progressbar value="grid.appScope.getPercentUsed(row)"></progressbar></div><div class="usage-percent" id="destination_usage_{{rowRenderIndex}}">{{ grid.appScope.getPercentUsed(row) }} %</div></div>',
                enableFiltering: !1,
                enableSorting: !1
            }
        }];
        q.addCustomColumns(r),
        q.setPostRefreshCallback(function() {
            u(e.getFilteredObject())
        }),
        a.table = q,
        n = e.getChartConfig(),
        a.cflowdChartObject = new f(n[0],n[1]),
        a.cflowdChartObject.setXAxisProperty("dest_ip"),
        a.cflowdChartObject.setYAxisProperty(["total_bytes"]),
        a.cflowdChartObject.setSeriesNames([{
            property: "dest_ip",
            values: []
        }]);
        var s = function(b) {
            a.table.serverCallInProgress = !1;
            var c;
            a.table.columnDefs.length < 1 && a.table.createColumns(e.returnTableColumns()),
            a.table.taggedSearchObject.setSearchCache(b.data),
            a.table.refreshTableData(b.data),
            a.table.setDataUrl(l),
            a.table.taggedSearchObject.searchData(),
            c = angular.copy(b),
            c.data.length > 25 && (c.data = c.data.splice(0, 25)),
            c.header.chart = {
                xAxis: ["dest_ip"],
                yAxis: ["total_bytes"],
                series: [""],
                title: "Flows",
                xAxisLabel: "Destination IP",
                yAxisLabel: "Usage"
            },
            c.header.fields = [{
                property: "dest_ip",
                dataType: "string"
            }, {
                property: "total_bytes",
                dataType: "number",
                display: "Total Bytes"
            }],
            b.data.length > 0 ? (a.cflowdChartObject.changeNoDataMessageState(!1),
            a.cflowdChartObject.addCategoriesFromRawData([{
                name: "destIP",
                display: "Destination IP",
                type: "column"
            }], {
                names: [],
                property: "dest_ip"
            }, b)) : a.cflowdChartObject.changeNoDataMessageState(!0),
            o.reset()
        }
          , t = function(b) {
            a.cflowdChartObject.changeLoadingIndicatorState(!1),
            a.cflowdChartObject.checkSetNoDataMessage(),
            a.table.serverCallInProgress = !1,
            angular.isObject(b) && appUtil.checkNestedProperty(b, "error", "details") ? (a.showErrorSection = !0,
            a.errorMessage = b) : ($log.info("API error response needs to be updated to conform to company guidelines" + a.cflowdChartObject.chartURL),
            a.errorMessage = "Error occurred while retrieving data")
        }
          , u = function(b) {
            var c, d, f, i;
            e.setFilteredObject(e.appendTCPOptFilter(b)),
            c = angular.copy(b),
            d = a.queryBuilderObj.getComponents(),
            a.isApplicable && e.filterSystemIP(d, a.localSystemIp),
            e.setQueryBuilderComponents(d),
            c = e.appendAggregationFilterForDestinations(c),
            k = g.TOP_APPLICATION_CFLOWD_AGGREGATED_URL,
            f = e.getTopApplicationsData(k, c),
            m = angular.copy(b),
            w = _.findIndex(m.query.rules, {
                field: "src_ip"
            }),
            w > -1 && m.query.rules.splice(w, 1),
            m = e.appendTotalAggregationFilter(m),
            i = e.getTopApplicationsData(k, m),
            a.cflowdChartObject.changeLoadingIndicatorState(!0),
            h.all([f, i]).then(function(a) {
                s(a[0]),
                e.resetTotalUsage(),
                e.setTotalUsage(a[1].data)
            }, t)
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        },
        a.showQueryBuilderTimeStampInbuilt = !1;
        var v = e.getQueryBuilderComponents()
          , w = _.findIndex(v, {
            property: "vdevice_name"
        });
        w > -1 && v.splice(w, 1),
        j = {
            autoLoadFields: !1,
            searchCallBack: u,
            queryBuilderPersistedComponents: v,
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0,
            fieldCustomizationsForDataTypeURL: [{
                property: "vpn_id",
                enable: !0,
                addAllForFieldTypeURL: !0,
                appendStringToTheList: !0,
                stringVal: "VPN"
            }, {
                property: "local_color",
                enable: !0,
                filterBy: "local-color",
                unique: !0
            }, {
                property: "remote_color",
                enable: !0,
                filterBy: "color",
                unique: !0
            }]
        },
        a.queryBuilderObj = new d(j),
        e.getTopApplicationsFieldsData(a.localSystemIp, a.sourceIp).then(function(b) {
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }),
        a.$on("$destroy", function() {
            angular.isDefined(b) && angular.isDefined(b.params.deviceType) && a.queryBuilderObj.setGlobalTime(e.getQueryBuilderTimeComponent()),
            a.table.resetCustomColumns()
        })
    }
    angular.module("vManage").controller("TCPOptCFlowdFromSrcDestinationsController", a),
    a.$inject = ["$scope", "$state", "Table", "QueryBuilderFactory", "CflowdFromSrcDestinationsService", "HighStockBarChart", "monitorApiConstants", "$q", "DeviceService"]
}(),
function() {
    function a(a, b, c, d) {
        a.stateString = d.getStateString(b),
        a.isCollapsed = !0,
        a.showErrorSection = !1,
        a.sourceInterfacesList = [],
        a.selectedSourceInterface = "",
        a.vpnList = [],
        a.selectedVPN = ""
    }
    angular.module("vManage").controller("TCPOptCFlowdController", a),
    a.$inject = ["$scope", "$state", "Tab", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
        var r, s, t = [];
        a.allVisible = !0,
        a.stateString = "tcpOptimization_cflowd_destinations_",
        a.localSystemIp = b.params.localSystemIp,
        a.deviceType = b.params.deviceType,
        a.isApplicable = p.isVEdge(b.params.deviceType),
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "tcp-optimization-connections",
            title: "TCP Optimization - Connections"
        }];
        var u = new c({
            columnResizing: !0,
            singleSelectDefault: !0,
            enableSorting: !0,
            tableHeightOffset: 190,
            autoLoad: !0,
            tableName: "deviceMonitorTable"
        });
        a.table = u;
        var v = e.getChartConfig();
        a.cflowdChartObject = new h(v[0],v[1]),
        a.cflowdChartObject.setXAxisProperty("entry_time"),
        a.cflowdChartObject.setYAxisProperty(["total_bytes"]),
        a.cflowdChartObject.setSeriesNames({
            property: "dest_ip",
            values: []
        });
        var w = function(b) {
            a.table.serverCallInProgress = !1,
            angular.isObject(b) && n.checkNestedProperty(b, "error", "details") ? (a.showErrorSection = !0,
            a.errorMessage = b) : (o.info("API error response needs to be updated to conform to company guidelines" + a.cflowdChartObject.chartURL),
            a.errorMessage = "Error occurred while retrieving data")
        }
          , x = function(b) {
            if (_.findIndex(t, function(a) {
                return "Total" === a.name
            }) === -1) {
                var c = {
                    name: "Total",
                    display: "Total"
                };
                t.push(c)
            }
            b.data = _.map(b.data, function(a) {
                return angular.extend(a, {
                    dest_ip: "Total"
                })
            }),
            a.cflowdChartObject.addSeriesFromRawData(t, b.data),
            e.setTotalChartData(b)
        }
          , y = function() {
            _.find(a.cflowdChartObject.chartConfig.series, function(a) {
                return "Total" === a.name
            }) && (t = _.reject(t, function(a) {
                return "Total" === a.name
            }),
            a.cflowdChartObject.removeSeriesNames({
                name: "Total",
                display: "Total"
            }))
        };
        a.getTotalDestinationIPData = function() {
            a.legend.total ? angular.isDefined(e.getTotalChartData()) ? x(e.getTotalChartData()) : (s = e.getFilteredObject(),
            s = e.appendTotalAggregationFilter(s),
            s = l.affixStatsAggregationHistogramUrl(s),
            r = i.TOP_APPLICATION_CFLOWD_AGGREGATED_URL,
            e.getTopApplicationsData(r, s).then(x, w)) : y()
        }
        ;
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        };
        var z = e.getQueryBuilderComponents()
          , A = _.findIndex(z, {
            property: "vdevice_name"
        });
        A > -1 && z.splice(A, 1),
        angular.isDefined(b.params.localTLOC) && null !== b.params.localTLOC && (A = _.findIndex(z, {
            property: "local_color"
        }),
        A > -1 && z.splice(A, 1)),
        angular.isDefined(b.params.remoteTLOC) && null !== b.params.remoteTLOC && (A = _.findIndex(z, {
            property: "remote_color"
        }),
        A > -1 && z.splice(A, 1)),
        angular.isDefined(b.params.remoteSystemIP) && null !== b.params.remoteSystemIP && (A = _.findIndex(z, {
            property: "remote_system_ip"
        }),
        A > -1 && z.splice(A, 1)),
        g.getTcpOptimizedConnections(a.localSystemIp).then(function(a) {
            console.log(a)
        }, function(a) {
            console.log(a)
        }),
        e.getTopApplicationsFieldsData(a.localSystemIp, b.params.localTLOC, b.params.remoteTLOC, b.params.remoteSystemIP).then(function(b) {
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }, w),
        a.onLegendClick = function() {
            a.cflowdChartObject.chartConfig.series.length && (_.find(a.cflowdChartObject.chartConfig.series, function(a) {
                return !a.visible
            }) ? a.allVisible = !1 : (a.allVisible = !0,
            a.legend.total = !1,
            y()))
        }
        ,
        a.perspectiveChangeHandler = function(a) {}
        ,
        a.$on("$destroy", function() {
            angular.isDefined(b) && angular.isDefined(b.params.deviceType) && a.queryBuilderObj.setGlobalTime(e.getQueryBuilderTimeComponent()),
            e.setChartSeries(void 0),
            e.setTableSelections(void 0),
            a.table.resetCustomColumns()
        })
    }
    angular.module("vManage").controller("TCPOptConnectionsController", a),
    a.$inject = ["$scope", "$state", "Table", "QueryBuilderFactory", "CFLOWDDestinationsService", "CFLOWDSourcesService", "TcpConnectionsService", "HighStockStackedAreaChart", "monitorApiConstants", "$debounce", "notification", "restService", "$q", "appUtil", "$log", "DeviceService", "ToggleButton"]
}(),
function() {
    function a(a, b, c) {
        a.stateString = c.getStateString(b)
    }
    angular.module("vManage").controller("TCPOptimizationController", a),
    a.$inject = ["$scope", "$state", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        var i;
        a.viewChart = !0,
        a.stateString = "topApplications_cflowd_sources_",
        a.chartDataReady = !1,
        a.localSystemIp = b.params.localSystemIp,
        a.deviceType = b.params.deviceType,
        a.isApplicable = g.isVEdge(b.params.deviceType),
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "tcp-optimization-cflowd",
            title: "TCP Optimization - WAN Throughput"
        }],
        a.cflowdChartObject = new e(d.getChartDefinition(),d.getChartConfig()),
        a.cflowdChartObject.setXAxisProperty(d.getChartXAxisProperty()),
        a.cflowdChartObject.setYAxisProperty([d.getChartYAxisProperty()]),
        a.cflowdChartObject.setSeriesNames(d.getChartSeriesNames()),
        a.cflowdChartObject.addSeriesNames([{
            name: "optimized",
            display: "TCP Optimized Throughput"
        }, {
            name: "unoptimized",
            display: "Non-Optimized Throughput"
        }]);
        var j = function(b) {
            a.cflowdChartObject.checkSetNoDataMessage(),
            angular.isObject(b) && appUtil.checkNestedProperty(b, "error", "details") ? (a.showErrorSection = !0,
            a.errorMessage = b) : ($log.info("API error response needs to be updated to conform to company guidelines" + a.cflowdChartObject.chartURL),
            a.errorMessage = "Error occurred while retrieving data")
        }
          , k = function(b) {
            var c, e;
            a.cflowdChartObject.emptyAllSeriesData(),
            a.cflowdChartObject.changeLoadingIndicatorState(!0),
            d.setFilteredObject(d.appendTCPOptFilter(b)),
            c = angular.copy(b),
            e = a.queryBuilderObj.getComponents(),
            a.isApplicable && d.filterSystemIP(e, a.localSystemIp),
            d.setFilterCurrentState(e),
            c = d.appendAggregationFilterForSources(c),
            d.getTrafficFlowData(f.TOP_APPLICATION_CFLOWD_AGGREGATED_URL, c).then(function(b) {
                a.cflowdChartObject.changeLoadingIndicatorState(!1),
                a.cflowdChartObject.changeNoDataMessageState(!1),
                a.cflowdChartObject.addFromRawData(b.data),
                a.cflowdChartObject.checkSetNoDataMessage(),
                a.chartDataReady = !0
            }, j)
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        },
        a.showQueryBuilderTimeStampInbuilt = !1;
        var l = d.getFilterCurrentState()
          , m = d.getFilterOriginalState()
          , n = _.findIndex(l, {
            property: "vdevice_name"
        });
        n > -1 && l.splice(n, 1),
        i = {
            autoLoadFields: !1,
            searchCallBack: k,
            queryBuilderPersistedComponents: l,
            queryBuilderOriginalComponents: m,
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0,
            fieldCustomizationsForDataTypeURL: [{
                property: "vpn_id",
                enable: !0,
                addAllForFieldTypeURL: !0,
                appendStringToTheList: !0,
                stringVal: "VPN"
            }, {
                property: "local_color",
                enable: !0,
                filterBy: "local-color",
                unique: !0
            }, {
                property: "remote_color",
                enable: !0,
                filterBy: "color",
                unique: !0
            }]
        },
        a.queryBuilderObj = new c(i),
        d.getTopApplicationsFieldsData(a.localSystemIp).then(function(b) {
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }),
        a.$on("$destroy", function() {
            angular.isDefined(b) && angular.isDefined(b.params.deviceType) && (a.queryBuilderObj.setGlobalTime(d.getQueryBuilderTimeComponent()),
            d.setFilterOriginalState(a.queryBuilderObj.getOriginalComponents())),
            a.cflowdChartObject.removeAllSeriesNames(),
            a.cflowdChartObject = {}
        })
    }
    angular.module("vManage").controller("TCPOptThroughputController", a),
    a.$inject = ["$scope", "$state", "QueryBuilderFactory", "ThroughputService", "HighStockAreaChart", "monitorApiConstants", "DeviceService", "$q"]
}();
!function() {
    function a(a, b, c, d, e, f, g, h, i) {
        var j, k, l, m;
        a.viewChart = !0,
        a.stateString = "topApplications_cflowd_sources_",
        a.localSystemIp = b.params.localSystemIp,
        a.deviceType = b.params.deviceType,
        a.isApplicable = h.isVEdge(b.params.deviceType),
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "tcp-optimization-top-talkers",
            title: "TCP Optimization - Top Talkers"
        }];
        var n = new c({
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !1,
            enableSorting: !0,
            tableHeightOffset: 190,
            tableName: "top-talkers-details"
        })
          , o = {
            viewFlowDetails: function(c) {
                b.go("app.monitor.devices.dashboard.tcpOptimization.topTalkersWithDestPot", {
                    systemIp: b.params.systemIp,
                    localSystemIp: a.localSystemIp,
                    deviceType: b.params.deviceType,
                    sourceIp: c.entity.src_ip,
                    destinationIp: c.entity.dest_ip
                })
            }
        };
        n.setAppScope(o),
        n.addCustomColumns([{
            property: "display",
            value: "source-ip",
            config: {
                cellTemplate: '<div class="ui-grid-cell-contents toggleContent" data-ng-click="grid.appScope.viewFlowDetails(row)"><span id="view_flow_details" class="link-cell">{{ row.entity.src_ip }}</span></div>',
                enableFiltering: !0,
                enableSorting: !0
            }
        }]),
        n.setPostRefreshCallback(function() {
            r(e.getFilteredObject())
        }),
        a.table = n,
        m = e.getChartConfig(),
        a.cflowdChartObject = new f(m[0],m[1]),
        a.cflowdChartObject.setXAxisProperty("tunnel"),
        a.cflowdChartObject.setYAxisProperty(["total_bytes"]),
        a.cflowdChartObject.setSeriesNames([{
            property: "tunnel",
            values: []
        }]);
        var p = function(b) {
            a.table.serverCallInProgress = !1;
            var c;
            a.table.columnDefs.length < 1 && a.table.createColumns(e.returnTableColumns()),
            a.table.taggedSearchObject.setSearchCache(b.data),
            a.table.refreshTableData(b.data),
            a.table.setDataUrl(l),
            a.table.taggedSearchObject.searchData(),
            c = angular.copy(b),
            c.data.length > 25 && (c.data = c.data.splice(0, 25)),
            c.header.chart = {
                xAxis: ["tunnel"],
                yAxis: ["total_bytes"],
                series: [""],
                title: "Flows",
                xAxisLabel: "Source IP",
                yAxisLabel: "Usage"
            },
            c.header.fields = [{
                property: "tunnel",
                dataType: "string"
            }, {
                property: "total_bytes",
                dataType: "number",
                display: "Total Bytes"
            }],
            b.data.length > 0 ? (a.cflowdChartObject.changeNoDataMessageState(!1),
            a.cflowdChartObject.addCategoriesFromRawData([{
                name: "tunnel",
                display: "Tunnel",
                type: "column"
            }], {
                names: [],
                property: "tunnel"
            }, b)) : a.cflowdChartObject.changeNoDataMessageState(!0)
        }
          , q = function(b) {
            a.cflowdChartObject.changeLoadingIndicatorState(!1),
            a.cflowdChartObject.checkSetNoDataMessage(),
            a.table.serverCallInProgress = !1,
            angular.isObject(b) && i.checkNestedProperty(b, "error", "details") ? (a.showErrorSection = !0,
            a.errorMessage = b) : ($log.info("API error response needs to be updated to conform to company guidelines" + a.cflowdChartObject.chartURL),
            a.errorMessage = "Error occurred while retrieving data")
        }
          , r = function(b) {
            var c, d;
            e.setFilteredObject(e.appendTCPOptFilter(b)),
            c = angular.copy(b),
            d = a.queryBuilderObj.getComponents(),
            a.isApplicable && e.filterSystemIP(d, a.localSystemIp),
            e.setQueryBuilderComponents(d),
            c = e.appendAggregationFilterForSources(c),
            k = g.TOP_APPLICATION_CFLOWD_AGGREGATED_URL,
            a.cflowdChartObject.changeLoadingIndicatorState(!0),
            e.getTopApplicationsData(k, c).then(function(a) {
                a.data = _.map(a.data, function(a, b) {
                    return a.tunnel = a.src_ip + "-" + a.dest_ip,
                    a
                }),
                p(a)
            }, q)
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        },
        a.showQueryBuilderTimeStampInbuilt = !1;
        var s = e.getQueryBuilderComponents()
          , t = _.findIndex(s, {
            property: "vdevice_name"
        });
        t > -1 && s.splice(t, 1),
        j = {
            autoLoadFields: !1,
            searchCallBack: r,
            queryBuilderPersistedComponents: s,
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0,
            fieldCustomizationsForDataTypeURL: [{
                property: "vpn_id",
                enable: !0,
                addAllForFieldTypeURL: !0,
                appendStringToTheList: !0,
                stringVal: "VPN"
            }, {
                property: "local_color",
                enable: !0,
                filterBy: "local-color",
                unique: !0
            }, {
                property: "remote_color",
                enable: !0,
                filterBy: "color",
                unique: !0
            }]
        },
        a.queryBuilderObj = new d(j),
        e.getTopApplicationsFieldsData(a.localSystemIp).then(function(b) {
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }),
        a.$on("$destroy", function() {
            angular.isDefined(b) && angular.isDefined(b.params.deviceType) && a.queryBuilderObj.setGlobalTime(e.getQueryBuilderTimeComponent()),
            a.table.resetCustomColumns()
        })
    }
    angular.module("vManage").controller("TCPOptTopTalkersController", a),
    a.$inject = ["$scope", "$state", "Table", "QueryBuilderFactory", "TopTalkersService", "HighStockBarChart", "monitorApiConstants", "DeviceService", "appUtil"]
}();
!function() {
    function a(a, b, c, d, e, f, g, h) {
        var i, j, k, l;
        a.viewChart = !0,
        a.stateString = "topApplications_cflowd_sources_",
        a.localSystemIp = b.params.localSystemIp,
        a.deviceType = b.params.deviceType,
        a.isApplicable = h.isVEdge(b.params.deviceType),
        a.destinationIp = b.params.destinationIp,
        a.sourceIp = b.params.sourceIp,
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "tcp-optimization-top-talkers",
            title: "TCP Optimization - Top Talkers",
            state: "app.monitor.devices.dashboard.tcpOptimization.topTalkers",
            params: {
                systemIp: b.params.systemIp,
                localSystemIp: b.params.localSystemIp,
                deviceType: b.params.deviceType
            }
        }, {
            name: "tcp-optimization-top-talkers-dest-port",
            title: "Source IP - " + a.sourceIp
        }];
        var m = new c({
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !1,
            enableSorting: !0,
            tableHeightOffset: 190,
            tableName: "top-talkers-details"
        });
        m.setPostRefreshCallback(function() {
            p(e.getFilteredObject())
        }),
        a.table = m,
        l = e.getChartConfig(),
        a.cflowdChartObject = new f(l[0],l[1]),
        a.cflowdChartObject.setXAxisProperty("tunnel"),
        a.cflowdChartObject.setYAxisProperty(["total_bytes"]),
        a.cflowdChartObject.setSeriesNames([{
            property: "src_ip",
            values: []
        }]);
        var n = function(b) {
            a.table.serverCallInProgress = !1;
            var c;
            a.table.columnDefs.length < 1 && a.table.createColumns(e.getDestPortTableColumn()),
            a.table.taggedSearchObject.setSearchCache(b.data),
            a.table.refreshTableData(b.data),
            a.table.setDataUrl(k),
            a.table.taggedSearchObject.searchData(),
            c = angular.copy(b),
            c.data.length > 25 && (c.data = c.data.splice(0, 25)),
            c.header.chart = {
                xAxis: ["tunnel"],
                yAxis: ["total_bytes"],
                series: [""],
                title: "Flows",
                xAxisLabel: "Source IP",
                yAxisLabel: "Usage"
            },
            c.header.fields = [{
                property: "tunnel",
                dataType: "string"
            }, {
                property: "total_bytes",
                dataType: "number",
                display: "Total Bytes"
            }],
            b.data.length > 0 ? (a.cflowdChartObject.changeNoDataMessageState(!1),
            a.cflowdChartObject.addCategoriesFromRawData([{
                name: "tunnel",
                display: "Tunnel",
                type: "column"
            }], {
                names: [],
                property: "tunnel"
            }, b)) : a.cflowdChartObject.changeNoDataMessageState(!0)
        }
          , o = function(b) {
            a.cflowdChartObject.changeLoadingIndicatorState(!1),
            a.cflowdChartObject.checkSetNoDataMessage(),
            a.table.serverCallInProgress = !1,
            angular.isObject(b) && appUtil.checkNestedProperty(b, "error", "details") ? (a.showErrorSection = !0,
            a.errorMessage = b) : ($log.info("API error response needs to be updated to conform to company guidelines" + a.cflowdChartObject.chartURL),
            a.errorMessage = "Error occurred while retrieving data")
        }
          , p = function(b) {
            var c, d;
            e.setFilteredObject(e.appendTCPOptFilter(b)),
            c = angular.copy(b),
            d = a.queryBuilderObj.getComponents(),
            a.isApplicable && e.filterSystemIP(d, a.localSystemIp),
            e.setQueryBuilderComponents(d),
            c = e.appendAggregationFilterForDestPort(c),
            c.query.rules.push({
                value: [a.sourceIp],
                field: "src_ip",
                type: "string",
                operator: "in"
            }),
            c.query.rules.push({
                value: [a.destinationIp],
                field: "dest_ip",
                type: "string",
                operator: "in"
            }),
            j = g.TOP_APPLICATION_CFLOWD_AGGREGATED_URL,
            a.cflowdChartObject.changeLoadingIndicatorState(!0),
            e.getTopApplicationsData(j, c).then(function(a) {
                a.data = _.map(a.data, function(a, b) {
                    return a.tunnel = a.src_ip + "-" + a.dest_ip + ":" + a.dest_port,
                    a
                }),
                n(a)
            }, o)
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderViewObj.buttonLayoutObj = {
            layoutClass: "actionButtonLayout",
            filterIconClass: "filter_list",
            filterButtonTitle: "Filter",
            showDropDownIcon: !0
        },
        a.showQueryBuilderTimeStampInbuilt = !1;
        var q = e.getQueryBuilderComponents()
          , r = _.findIndex(q, {
            property: "vdevice_name"
        });
        r > -1 && q.splice(r, 1),
        i = {
            autoLoadFields: !1,
            searchCallBack: p,
            queryBuilderPersistedComponents: q,
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !0,
            fieldCustomizationsForDataTypeURL: [{
                property: "vpn_id",
                enable: !0,
                addAllForFieldTypeURL: !0,
                appendStringToTheList: !0,
                stringVal: "VPN"
            }, {
                property: "local_color",
                enable: !0,
                filterBy: "local-color",
                unique: !0
            }, {
                property: "remote_color",
                enable: !0,
                filterBy: "color",
                unique: !0
            }]
        },
        a.queryBuilderObj = new d(i),
        e.getTopApplicationsFieldsData(a.localSystemIp, a.sourceIp, a.destinationIp).then(function(b) {
            a.queryBuilderObj.setFieldsData(b),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }),
        a.$on("$destroy", function() {
            angular.isDefined(b) && angular.isDefined(b.params.deviceType) && a.queryBuilderObj.setGlobalTime(e.getQueryBuilderTimeComponent()),
            a.table.resetCustomColumns()
        })
    }
    angular.module("vManage").controller("TCPOptTopTalkersDestPortController", a),
    a.$inject = ["$scope", "$state", "Table", "QueryBuilderFactory", "TopTalkersService", "HighStockBarChart", "monitorApiConstants", "DeviceService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
        function s(b) {
            var c = m.TOP_APPLICATION_AGGREGATED_URL;
            a.appRouteVisualizationInput.granularityEnabled && (c = m.APP_ROUTE_DPI_FLOW_COUNT),
            h.getDpiFlowsData(c, E, a.appRouteVisualizationInput).then(function(c) {
                A(G, b, c),
                k(function() {
                    j.$broadcast("highchartsng.reflowWithMandatoryReSize")
                }, 2),
                a.serverCall = !1,
                a.chartObject.changeLoadingIndicatorState(!1)
            }, function() {
                g.warning("DPI data from device " + a.appRouteVisualizationInput.remoteSystemIp.name + " is not available.", 6e3)
            })
        }
        function t(b) {
            h.getDpiFlowsData(m.TOP_APPLICATION_CFLOWD_AGGREGATED_URL, F, !1).then(function(c) {
                A(G, b, c),
                k(function() {
                    j.$broadcast("highchartsng.reflowWithMandatoryReSize")
                }, 2),
                a.serverCall = !1,
                a.chartObject.changeLoadingIndicatorState(!1)
            }, function() {
                g.warning("Cflowd data from device " + a.appRouteVisualizationInput.remoteSystemIp.name + " is not available.", 6e3)
            })
        }
        function u() {
            h.getDataForDeviceSelected(D, I).then(function(b) {
                E ? s(b) : F ? t(b) : (a.chartObject.changeNoDataMessageState(!1),
                b.data.length > 0 ? (z(G, b),
                k(function() {
                    j.$broadcast("highchartsng.reflowWithMandatoryReSize")
                }, 2),
                a.serverCall = !1,
                a.chartObject.changeLoadingIndicatorState(!1)) : (a.serverCall = !1,
                a.chartObject.changeNoDataMessageState(!0)))
            }, function(b) {
                a.showChart = !1,
                a.showErrorSection = !0,
                a.errorMessage = b,
                a.serverCall = !1,
                a.chartObject.checkSetNoDataMessage(),
                g.error("App Route data from device " + a.appRouteVisualizationInput.remoteSystemIp.name + " is not available.", 6e3)
            })
        }
        function v() {
            return a.appRouteVisualizationInput.remoteSystemIp ? "dpi" != a.appRouteVisualizationInput.applicationType || a.appRouteVisualizationInput.dpi ? !("dpi" == a.appRouteVisualizationInput.applicationType && a.appRouteVisualizationInput.granularityEnabled && !a.appRouteVisualizationInput.granularity) || (a.requiredMsg.granularity = !0,
            !1) : (a.requiredMsg.application = !0,
            !1) : (a.requiredMsg.destination = !0,
            "dpi" != a.appRouteVisualizationInput.applicationType || a.appRouteVisualizationInput.dpi || (a.requiredMsg.application = !0),
            !1)
        }
        function w() {
            "none" === a.appRouteVisualizationInput.applicationType ? (4 == a.chartObject.highChartApi.yAxis.length && (a.chartObject.setChartOptionsYAxis({
                min: 0,
                minRange: 1,
                lineWidth: 2,
                labels: {
                    enabled: !0
                },
                opposite: !1,
                title: {
                    text: a.chartOptions.selection.title[0]
                },
                height: "28%",
                max: null,
                customOptions: {
                    yAxisUnit: "%",
                    formatDataToBytes: !1
                }
            }, 0),
            a.chartObject.highChartApi.yAxis[3].remove(),
            a.chartObject.highChartApi.yAxis[1].update(n.getYAxisChartConfig("33%", "28%", "", !0)),
            a.chartObject.highChartApi.yAxis[2].update(n.getYAxisChartConfig("66%", "28%", "", !0))),
            2 == a.chartObject.highChartApi.yAxis.length && (a.chartObject.highChartApi.yAxis[1].update(n.getYAxisChartConfig("33%", "28%", "", !0)),
            a.chartObject.highChartApi.addAxis(angular.extend(a.chartObject.chartConfig.yAxis[0], n.getYAxisChartConfig("66%", "28%", "", !0)))),
            h.setYaxisTitle(a.chartObject, a.chartOptions.selection, 3)) : (3 == a.chartObject.highChartApi.yAxis.length ? a.chartObject.highChartApi.yAxis[2].remove() : 4 == a.chartObject.highChartApi.yAxis.length && (a.chartObject.highChartApi.yAxis[3].remove(),
            a.chartObject.highChartApi.yAxis[2].remove()),
            a.chartObject.highChartApi.yAxis[0].update(n.getYAxisChartConfig("0%", "45%", "%", !1)),
            a.chartObject.highChartApi.yAxis[1].update(n.getYAxisChartConfig("50%", "45%", "", !1)),
            h.setYaxisTitle(a.chartObject, a.chartOptions.selection, 2)),
            a.chartObject.setYAxisProperty(a.chartOptions.selection.properties),
            a.chartObject.removeAllSeriesNames()
        }
        function x() {
            var b = i.defer();
            if (angular.isDefined(a.chartOptions) ? a.chartOptions.options = h.getChartOptions(a.appRouteVisualizationInput.applicationType) : a.chartOptions = {
                options: h.getChartOptions(a.appRouteVisualizationInput.applicationType)
            },
            a.chartOptions.selection = a.chartOptions.options.loss_percentage,
            angular.isDefined(a.chartObject) ? w() : y(),
            a.showQueryBuilderTimeStampInbuilt = !1,
            angular.isDefined(a.queryBuilderObj))
                b.resolve();
            else {
                var c = function(b) {
                    B = b,
                    H ? (D = n.updateTimeStampValueInAggregation(D, C.source, B),
                    angular.isDefined(E) ? E = n.updateTimeStampValueInAggregation(E, C.source, B) : angular.isDefined(F) && (F = n.updateTimeStampValueInAggregation(F, C.source, B)),
                    a.chartObject.removeAllSeriesNames(),
                    u()) : H = !0
                }
                  , d = {
                    autoLoadFields: !1,
                    searchCallBack: c,
                    isDynamicQuery: !0,
                    renderViewAfterInitComplete: !0,
                    enableFilteredTags: !1,
                    returnFilteredObject: !0,
                    enableRealTime: !1
                };
                a.queryBuilderViewObj = {},
                a.queryBuilderObj = new e(d),
                h.getTunnelsFieldsData().then(function(c) {
                    a.queryBuilderObj.setFieldsData(c),
                    b.resolve()
                }, function(b) {
                    a.showErrorSection = !0,
                    a.errorMessage = b
                })
            }
            return b.promise
        }
        function y() {
            a.chartObject = new d(h.getChartDefinition(),h.getChartConfig()),
            a.chartObject.setXAxisProperty(h.getChartXAxisProperty()),
            a.chartObject.setSeriesNames(h.getAppRouteVisualizeSeriesName()),
            "none" === a.appRouteVisualizationInput.applicationType ? (a.chartObject.setChartOptionsYAxis(n.getYAxisChartConfig("0%", "28%", "%", !1, a.chartOptions.selection.title[0]), 0),
            a.chartObject.addChartOptionsYAxis(n.getYAxisChartConfig("33%", "28%", "", !0, a.chartOptions.selection.title[1]), 1),
            a.chartObject.addChartOptionsYAxis(n.getYAxisChartConfig("66%", "28%", "", !0, a.chartOptions.selection.title[2]), 2)) : (a.chartObject.setChartOptionsYAxis(n.getYAxisChartConfig("0%", "45%", "%", !1, a.chartOptions.selection.title[0]), 0),
            a.chartObject.addChartOptionsYAxis(n.getYAxisChartConfig("50%", "45%", "", !1, a.chartOptions.selection.title[1]), 1)),
            a.chartObject.setYAxisProperty(a.chartOptions.selection.properties)
        }
        function z(b, c) {
            var d = c.data;
            a.chartObject.APIData = c,
            a.chartObject.fillZeros = !1,
            a.chartObject.addSeriesFromRawData(_.map(P(d, "proto"), function(a) {
                return {
                    name: a.name,
                    display: a["name-hostname"]
                }
            }), d),
            h.updateAxisLabel(a.chartObject, a.chartOptions)
        }
        function A(b, c, d) {
            var e = c.data;
            if (e.length > 0) {
                var f = d.data;
                angular.forEach(f, function(a) {
                    a.name = a.local_system_ip + ":" + a.local_color + "-" + a.remote_system_ip + ":" + a.remote_color
                }),
                f.length > 0 || !angular.isDefined(d.entryTimeList) || angular.forEach(b, function(a) {
                    angular.forEach(d.entryTimeList, function(b) {
                        f.push({
                            name: a.name,
                            entry_time: b,
                            count: 0
                        })
                    })
                });
                var g = P(e, "proto")
                  , i = P(f, "tunnel_encap");
                angular.equals(a.chartOptions.selection.id, "latency_jitter") ? (a.chartObject.APIData = c,
                a.chartObject.fillZeros = !1,
                n.addChartSeries(a.chartObject, 0, g, !1, "ms", e),
                n.addChartSeries(a.chartObject, 1, g, !1, "ms", e),
                a.chartObject.APIData = d,
                a.chartObject.fillZeros = !0,
                n.addChartSeries(a.chartObject, 2, i, !1, "", f)) : (a.chartObject.APIData = c,
                a.chartObject.fillZeros = !1,
                n.addChartSeries(a.chartObject, 0, g, !1, "%", e),
                a.chartObject.APIData = d,
                a.chartObject.fillZeros = !0,
                n.addChartSeries(a.chartObject, 1, i, !1, "", f)),
                h.updateAxisLabel(a.chartObject, a.chartOptions)
            }
        }
        a.stateString = c.getStateString(b),
        a.breadCrumb.states = h.getBreadCrumStates(),
        a.isApplicable = f.isVEdge(b.params.personality),
        a.isApplicable || (a.deviceType = b.params.personality),
        a.systemIp = b.params.systemIp;
        var B, C, D, E, F, G = [], H = !1, I = b.params.localSystemIp, J = [], K = {}, L = {
            sourceIP: "",
            destinationIP: "",
            sourcePort: "",
            destinationPort: "",
            protocol: ""
        };
        a.appRouteVisualizationInput = {
            remoteSystemIp: "",
            dpi: "",
            cflowd: L,
            applicationType: "none",
            granularityEnabled: !1,
            appFilterType: "application",
            appLabel: "Application",
            hideCustomQuery: !1
        },
        a.formInputValues = {
            remoteIpList: [],
            protocols: h.getProtocols(),
            applications: {},
            applicationList: {},
            granularity: h.getGranularity()
        },
        a.serverCall = !0,
        a.showChart = !1,
        n.getDeviceInfoFromSourceIp(I, J, a.formInputValues.remoteIpList, K).then(function() {
            a.serverCall = !1
        }, function() {
            a.serverCall = !1,
            g.error("No data available from device " + I)
        });
        var M = function() {
            a.serverCall = !0,
            p.getControlLocalPropertiesSynced(I).then(function(b) {
                if (b.data.length > 0) {
                    var c = ["All"].concat(_.pluck(b.data, "color"));
                    J = c
                }
                a.serverCall = !1
            }, function() {
                a.serverCall = !1
            })
        };
        M(),
        a.requiredMsg = {
            destination: !1,
            application: !1
        },
        a.remoteIpSearch = !1,
        a.applicationSearch = !1,
        a.granularitySearch = !1;
        var N = JSON.parse(l.sessionStorage.getItem("applicationList")) ? JSON.parse(l.sessionStorage.getItem("applicationList")) : [];
        a.getAppsRequest = !0,
        h.getapplications(N).then(function(b) {
            a.getAppsRequest = !1,
            a.formInputValues.applications = b,
            a.formInputValues.applicationList = b,
            a.formInputValues.applicationFamilyList = JSON.parse(l.sessionStorage.getItem("applicationFamilyList"))
        }),
        a.querySearch = function(b, c) {
            var d;
            return "remoteSystemIp" === c ? b ? (a.remoteIpSearch = !0,
            d = a.formInputValues.remoteIpList.filter(h.createFilterForSystemIp(b))) : (a.remoteIpSearch = !1,
            d = a.formInputValues.remoteIpList) : "granularity" === c ? b ? (d = a.formInputValues.granularity.filter(function(a) {
                return b == a
            }),
            a.granularitySearch = !0) : (a.granularitySearch = !1,
            d = a.formInputValues.granularity) : b ? (a.applicationSearch = !0,
            d = a.formInputValues.applicationList.filter(h.createFilterForApplication(b))) : (a.applicationSearch = !1,
            d = a.formInputValues.applicationList),
            d
        }
        ,
        a.onSelectionofItem = function(b, c) {
            "remoteSystemIp" == c ? angular.isDefined(b) ? (a.requiredMsg.destination = !1,
            a.remoteIpSearch = !0,
            o.validateIpv4(b.name) && (a.serverCall = !0,
            p.getControlLocalPropertiesSynced(b.name).then(function(c) {
                if (c.data.length > 0) {
                    var d = ["All"].concat(_.pluck(c.data, "color"));
                    K[b.name] = d
                }
                a.serverCall = !1
            }, function() {
                a.serverCall = !1
            }))) : (a.requiredMsg.destination = !0,
            a.remoteIpSearch = !1,
            a.searchTextDest = "") : "granularity" == c ? angular.isDefined(b) ? (a.requiredMsg.granularity = !1,
            a.granularitySearch = !0) : (a.appRouteVisualizationInput.granularityEnabled && (a.requiredMsg.granularity = !0),
            a.granularitySearch = !1) : angular.isDefined(b) ? (a.requiredMsg.application = !1,
            a.applicationSearch = !0) : (a.requiredMsg.application = !0,
            a.applicationSearch = !1,
            a.searchText = "")
        }
        ,
        a.applicationTypeChange = function() {
            a.appRouteVisualizationInput.cflowd = {
                sourceIP: "",
                destinationIP: "",
                sourcePort: "",
                destinationPort: "",
                protocol: ""
            }
        }
        ,
        a.queryBuilderObj = void 0,
        a.enableGranularity = function() {
            a.dateTimePickerObj = angular.element("sm-date-time-picker").controller("smDateTimePicker"),
            a.dateTimePickerObj.onDateEdited = function(b) {
                "" == b ? (a.appRouteVisualizationInput.granularityEnabled = !1,
                a.appRouteVisualizationInput.granularity = "") : a.appRouteVisualizationInput.granularityEnabled = !0
            }
            ,
            a.dateTimePickerObj.onDateSelected = function(b) {
                a.appRouteVisualizationInput.granularityEnabled = !0
            }
        }
        ,
        a.appFilterTypeChanged = function(b) {
            a.appRouteVisualizationInput.dpi = "",
            "application" == b ? (a.formInputValues.applicationList = a.formInputValues.applications,
            a.appRouteVisualizationInput.appLabel = "Application") : (a.formInputValues.applicationList = a.formInputValues.applicationFamilyList,
            a.appRouteVisualizationInput.appLabel = "Application Family")
        }
        ;
        var O = function(b) {
            D = void 0,
            E = void 0,
            F = void 0,
            G = [],
            h.generateDataKey(G, J, K, a.appRouteVisualizationInput, I),
            G.length > 24 && (G = G.splice(0, 24),
            g.warning("Maximum 24 tunnels will be displayed. Select a specific circuit to reduce number of tunnels.", 6e3));
            var c = h.constructAggregation(B, a.chartOptions.selection, a.appRouteVisualizationInput.granularityEnabled);
            D = h.appendDataToAggregation(angular.copy(c), I, b.source, G, a.appRouteVisualizationInput),
            "dpi" == a.appRouteVisualizationInput.applicationType ? E = h.getDPIaggregation(angular.copy(c), a.appRouteVisualizationInput, I, b.source) : "cflowd" == a.appRouteVisualizationInput.applicationType && (F = h.getCFLOWDaggregation(angular.copy(c), a.appRouteVisualizationInput, I, b.source))
        };
        a.go = function() {
            v() && (a.serverCall = !0,
            x().then(function() {
                a.showChart = !0,
                a.chartObject.changeLoadingIndicatorState(!0),
                h.getAppRoutePollInterval(a.systemIp).then(function(b) {
                    C = b,
                    O(b),
                    a.chartObject.removeAllSeriesNames(),
                    u(),
                    a.appRouteVisualizationInput.granularityEnabled ? a.appRouteVisualizationInput.hideCustomQuery = !0 : a.appRouteVisualizationInput.hideCustomQuery = !1
                })
            }))
        }
        ,
        a.updateCheckboxSelection = function(b) {
            angular.equals(a.chartOptions.selection.id, "latency_jitter") ? 3 == a.chartObject.highChartApi.yAxis.length ? (a.chartObject.setChartOptionsYAxis({
                min: 0,
                minRange: 1,
                lineWidth: 2,
                labels: {
                    enabled: !0
                },
                opposite: !1,
                title: {
                    text: b.title[0]
                },
                height: "20%",
                max: null,
                customOptions: {
                    yAxisUnit: "ms",
                    formatDataToBytes: !1
                }
            }, 0),
            a.chartObject.highChartApi.yAxis[1].update(n.getYAxisChartConfig("25%", "20%", "ms", !1)),
            a.chartObject.highChartApi.yAxis[2].update(n.getYAxisChartConfig("50%", "20%", "", !0)),
            a.chartObject.highChartApi.addAxis(angular.extend(a.chartObject.chartConfig.yAxis[0], n.getYAxisChartConfig("75%", "20%", "", !0)))) : 2 == a.chartObject.highChartApi.yAxis.length && (a.chartObject.setChartOptionsYAxis({
                min: 0,
                minRange: 1,
                lineWidth: 2,
                labels: {
                    enabled: !0
                },
                opposite: !1,
                title: {
                    text: b.title[0]
                },
                height: "28%",
                max: null,
                customOptions: {
                    yAxisUnit: "ms",
                    formatDataToBytes: !1
                }
            }, 0),
            a.chartObject.highChartApi.yAxis[1].update(n.getYAxisChartConfig("33%", "28%", "ms", !1)),
            a.chartObject.highChartApi.addAxis(angular.extend(a.chartObject.chartConfig.yAxis[0], n.getYAxisChartConfig("66%", "28%", "", !1))),
            a.chartObject.highChartApi.yAxis[0].update(n.getYAxisChartConfig("0%", "28%", "", !0))) : 4 == a.chartObject.highChartApi.yAxis.length ? (a.chartObject.setChartOptionsYAxis({
                min: 0,
                minRange: 1,
                lineWidth: 2,
                labels: {
                    enabled: !0
                },
                opposite: !1,
                title: {
                    text: b.title[0]
                },
                height: "28%",
                max: null,
                customOptions: {
                    yAxisUnit: "%",
                    formatDataToBytes: !1
                }
            }, 0),
            a.chartObject.highChartApi.yAxis[3].remove(),
            a.chartObject.highChartApi.yAxis[1].update(n.getYAxisChartConfig("33%", "28%", "", !0)),
            a.chartObject.highChartApi.yAxis[2].update(n.getYAxisChartConfig("66%", "28%", "", !0))) : 3 == a.chartObject.highChartApi.yAxis.length && (a.chartObject.highChartApi.yAxis[2].remove(),
            a.chartObject.setChartOptionsYAxis({
                min: 0,
                minRange: 1,
                lineWidth: 2,
                labels: {
                    enabled: !0
                },
                opposite: !1,
                title: {
                    text: b.title[0]
                },
                height: "45%",
                max: null,
                customOptions: {
                    yAxisUnit: "%",
                    formatDataToBytes: !1
                }
            }, 0),
            a.chartObject.highChartApi.yAxis[1].update(n.getYAxisChartConfig("50%", "45%", "", !1))),
            h.setYaxisTitle(a.chartObject, b, a.chartObject.highChartApi.yAxis.length),
            n.updateMetricsDetailsInAggregation(D, b),
            a.chartObject.setYAxisProperty(b.properties),
            a.chartObject.removeAllSeriesNames(),
            u()
        }
        ;
        var P = function(a, b) {
            angular.forEach(a, function(a) {
                a.name = a.name + " " + (a[b] ? a[b].toUpperCase() : "")
            });
            var c = _.uniq(_.map(a, function(a) {
                return a.name
            }))
              , d = [];
            return angular.forEach(c, function(a) {
                var b, c = a, e = a.split(":")[0], f = a.split(":")[1].substring(a.split(":")[1].lastIndexOf("-") + 1);
                b = a.replace(e, r.getDeviceHostName(e)),
                b = b.replace(f, r.getDeviceHostName(f)),
                d.push({
                    name: c,
                    "name-hostname": b
                })
            }),
            d
        };
        a.$on("$destroy", function() {
            if (h.updateSourceDeviceAppRoutePollIntervalIsSet(!1),
            angular.isDefined(b) && angular.isDefined(b.params.personality) && a.queryBuilderObj) {
                var c = a.queryBuilderObj.getComponents();
                a.queryBuilderObj.setGlobalTime(n.getQueryBuilderTimeComponent(c))
            }
            a.chartObject = {}
        })
    }
    angular.module("vManage").controller("AppRouteVisualizationController", a),
    a.$inject = ["$scope", "$state", "appUtil", "HighStockLineChart", "QueryBuilderFactory", "DeviceService", "notification", "AppRouteVisualizationService", "$q", "$rootScope", "$timeout", "$window", "monitorApiConstants", "TroubleshootingService", "vipValidation", "InterfaceService", "rbacService", "DeviceListCache"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        function k() {
            l().then(function(b) {
                a.table.serverCallInProgress = !1,
                g(function() {
                    a.table.uiGridApi.treeBase.expandAllRows();
                    var b = 6;
                    angular.forEach(a.controlConnectionNodePaths, function(c, d) {
                        a.controlConnectionNodePaths[d].vmanage = {
                            up: 0,
                            down: 0,
                            init: 0,
                            total: 0
                        },
                        a.controlConnectionNodePaths[d].vsmart = {
                            up: 0,
                            down: 0,
                            init: 0,
                            total: 0
                        },
                        a.controlConnectionNodePaths[d].vbond = {
                            up: 0,
                            down: 0,
                            init: 0,
                            total: 0
                        },
                        angular.forEach(c, function(b) {
                            angular.equals(b["peer-type"], "vsmart") ? (b.icon = "/images/vsmart_conn.png",
                            o(a.controlConnectionNodePaths[d].vsmart, b.state)) : angular.equals(b["peer-type"], "vbond") ? (b.icon = "/images/vbond_conn.png",
                            o(a.controlConnectionNodePaths[d].vbond, b.state)) : angular.equals(b["peer-type"], "vmanage") && (b.icon = "/images/vmanage_conn.png",
                            o(a.controlConnectionNodePaths[d].vmanage, b.state))
                        }),
                        c.length > 12 && (b = c.length / 2),
                        $("#" + d + "-node").WCircleMenu({
                            width: "40px",
                            height: "40px",
                            iconRotation: 0,
                            distance: 85,
                            angle_interval: Math.PI / (c.length / 2),
                            openCallback: p
                        }),
                        $("#" + d + "-node").WCircleMenu("open"),
                        $("#" + d + "-node").off("click")
                    })
                })
            }, function(b) {
                a.table.serverCallInProgress = !1,
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        }
        function l() {
            var d = f.defer();
            return e.get("/dataservice/device/counters?deviceId=" + b.params.systemIp).then(function(f) {
                c.checkNestedProperty(f.data, "0") && (a.controlConnectionCount = f.data[0]);
                var g = "/dataservice/troubleshooting/control/" + b.params.uuid;
                return e.get(g).then(function(b) {
                    angular.forEach(b.data, function(b) {
                        b["expected-actual"] = "(Expected:" + b["expected-connections"] + " | Actual:" + b["actual-connections"] + ")",
                        b["tloc-type"] ? b["tloctype--nattype"] = b["tloc-type"] + " | NAT:" + b["nat-type"] : b["tloctype--nattype"] = "NAT:" + b["nat-type"],
                        angular.forEach(b.control, function(a) {
                            a["controller-details"] = a["host-name"] + " | " + a["system-ip"],
                            a["is-preferred"] && (a["controller-details"] = a["controller-details"] + "(Preferred Controller)")
                        }),
                        a.controlConnectionNodePaths[b.color] = b.control
                    }),
                    a.table.createColumns(h.getControlConnectionTableColumnsForTroubleshooting()),
                    a.table.setTreeLevelGroupings([{
                        treeLevel: 0,
                        groupByProperty: "color",
                        newRowProperty: "peer-type",
                        copyToParent: ["tloc-status", "expected-actual", "tloctype--nattype", "color"]
                    }]),
                    a.table.setTableData(b.data),
                    a.table.taggedSearchObject.searchData(),
                    $(".control-connections-graph").width() < 237 * Object.keys(a.controlConnectionNodePaths).length && $(".control-connections-graph .graph-section").width(237 * Object.keys(a.controlConnectionNodePaths).length),
                    d.resolve(b)
                }, function(b) {
                    a.isApplicable = !1,
                    a.invalidTitle = "Error",
                    a.invalidIcon = "device-unreachable",
                    a.invalidMessage = b.error.message,
                    a.showErrorSection = !0,
                    a.errorMessage = b,
                    d.reject(b)
                })
            }, function(b) {
                a.showErrorSection = !0,
                a.errorMessage = b,
                d.reject(b)
            })
        }
        var m = angular.isDefined(b.params.reachability) && "reachable" === b.params.reachability;
        if (a.stateString = c.getStateString(b),
        a.devicePersonality = b.params.personality,
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "troubleshooting",
            title: "Troubleshooting",
            state: "app.monitor.devices.dashboard.troubleshooting.dashboard"
        }, {
            name: "controlConnections",
            title: "Control Connections(Live View)"
        }],
        a.controlConnectionNodePaths = {},
        a.controlConnectionCount = {},
        a.isApplicable = !1,
        a.isApplicable = j.isVEdge(b.params.deviceType),
        a.isApplicable)
            if (m) {
                if (a.isApplicable && m) {
                    var n = new d({
                        autoLoad: !0,
                        columnResizing: !0,
                        singleSelect: !1,
                        multiSelect: !1,
                        enableSorting: !0,
                        enableTreeChildrenSelection: !1,
                        tableHeightOffset: 325,
                        tableName: "tunnel",
                        dataUid: "peer-type",
                        selectAll: !1,
                        rowHeight: 60,
                        isRowSelectable: function(a) {
                            return !(a.treeLevel = "0" == a.treeLevel)
                        }
                    });
                    n.setPostRefreshCallback(function() {
                        a.controlConnectionNodePaths = {},
                        k()
                    }),
                    a.table = n,
                    k(),
                    a.table.setTableData = function(b) {
                        var d = []
                          , e = {}
                          , f = a.table.treeSettings.treeLevels[0];
                        angular.forEach(b, function(a) {
                            e[f.newRowProperty] = a[f.groupByProperty],
                            e.$$treeLevel = f.treeLevel,
                            angular.isDefined(f.copyToParent) && angular.forEach(f.copyToParent, function(b) {
                                e[b] = angular.isDefined(a[b]) ? a[b] : null
                            }),
                            d.push(angular.copy(e)),
                            d = d.concat(a.control)
                        }),
                        d = i.convertToHostname(a.table.columnDefs, d),
                        angular.copy(d, a.table.data);
                        var g = c.getSearchPropertiesForCols(a.table.columnDefs);
                        a.table.taggedSearchObject.setSearchProperties(g),
                        a.table.taggedSearchObject.setSearchCache(d)
                    }
                    ,
                    a.table.refreshTableData = function(b) {
                        a.table.treeSettings.treeLevels = _.sortBy(n.treeSettings.treeLevels, "treeLevel");
                        var c = []
                          , d = {};
                        angular.forEach(b, function(a) {
                            d[treeLevel.newRowProperty] = a[treeLevel.groupByProperty],
                            d.$$treeLevel = treeLevel.treeLevel,
                            angular.isDefined(treeLevel.copyToParent) && angular.forEach(treeLevel.copyToParent, function(b) {
                                d[b] = angular.isDefined(a[b]) ? a[b] : null
                            }),
                            c.push(angular.copy(d)),
                            c = c.concat(a.control)
                        }),
                        Table.prototype.refreshTableData.call(a.table, c),
                        n.taggedSearchObject.setSearchCache(c)
                    }
                    ;
                    var o = function(a, b) {
                        angular.equals(b, "up") ? a.up = a.up + 1 : angular.equals(b, "down") ? a.down = a.down + 1 : angular.equals(b, "init") && (a.init = a.init + 1),
                        a.total = a.total + 1
                    }
                      , p = function() {
                        g(function() {
                            var b = [];
                            angular.forEach(a.controlConnectionNodePaths, function(a, c) {
                                b = $(".wcircle-menu-item." + c),
                                angular.forEach(b, function(a, b) {
                                    _.indexOf(a.classList, "up") > -1 ? $.line(q(a, 15), q(a.parentElement, 20), {
                                        elem: "#" + c + "_path" + b,
                                        lineColor: "#c2c3c6"
                                    }) : ($.line(q(a, 15), q(a.parentElement, 20), {
                                        elem: "#" + c + "_path" + b,
                                        lineColor: "#E53935"
                                    }),
                                    $(a).css({
                                        border: "1px solid red",
                                        "border-radius": "50%"
                                    }))
                                })
                            })
                        })
                    }
                      , q = function(a, b) {
                        var c = $(a)
                          , d = c.position().left
                          , e = c.position().top;
                        return {
                            x: d + b,
                            y: e + b
                        }
                    }
                      , r = function() {
                        var a = $(".jquery-line");
                        angular.forEach(a, function(a) {
                            $(a).remove()
                        })
                    };
                    a.$on("$destroy", function() {
                        a.isApplicable && m && r()
                    })
                }
            } else
                a.isApplicable = !1,
                a.invalidTitle = "Not Supported",
                a.invalidIcon = "device-unreachable",
                a.invalidMessage = a.breadCrumb.states[2].title + "is not supported for unreachable device";
        else
            a.invalidTitle = "Not Applicable",
            a.invalidIcon = "invalid-option",
            a.invalidMessage = a.breadCrumb.states[2].title + "is not applicable for " + b.params.deviceType
    }
    angular.module("vManage").controller("ControlConnectionsTroubleshootingController", a),
    a.$inject = ["$scope", "$state", "appUtil", "TreeBasedTable", "restService", "$q", "$timeout", "ControlConnectionService", "DeviceListCache", "DeviceService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        function k() {
            if (!angular.isDefined(a.debugLogOutput.searchSession)) {
                a.debugLogOutput.searchSession = {};
                var b = ace.require("ace/edit_session").EditSession;
                a.debugLogOutput.searchSession.instance = new b(""),
                a.debugLogOutput.searchSession.id = a.debugLogOutput.searchSession.instance.$markerId
            }
        }
        function l() {
            angular.isDefined(a.debugLogOutput.logSession) || (a.debugLogOutput.logSession = {},
            a.debugLogOutput.logSession.instance = a.debugLogOutput.aceEditor.getSession(),
            a.debugLogOutput.logSession.id = a.debugLogOutput.logSession.instance.$markerId)
        }
        function m() {
            angular.isDefined(a.debugLogOutput.logSession) && a.debugLogOutput.aceEditor.session.$markerId !== a.debugLogOutput.logSession.id && a.debugLogOutput.aceEditor.setSession(a.debugLogOutput.logSession.instance)
        }
        function n() {
            angular.isDefined(a.debugLogOutput.searchSession) && a.debugLogOutput.aceEditor.session.$markerId !== a.debugLogOutput.searchSession.id && a.debugLogOutput.aceEditor.setSession(a.debugLogOutput.searchSession.instance)
        }
        function o() {
            var f = {
                logType: a.debugLogOutput.selectedLogFile,
                deviceUUID: b.params.uuid
            };
            d.enableStreaming(f).then(function(c) {
                E = c.sessionId,
                E ? (a.debugLogOutput.sessionEstablished = !0,
                d.setSessionID(E),
                d.getLog(E, a.debugLogOutput.logId).then(y, z)) : (a.debugLogOutput.sessionEstablished = !1,
                h.error("No Session ID available for device " + b.params.uuid)),
                a.loadingDebugLogData = !1
            }, function(b) {
                e.clear(),
                a.loadingDebugLogData = !1,
                a.debugLogOutput.sessionEstablished = !1,
                a.debugLogInput.pollingInProgress = !1,
                angular.isObject(b) && c.checkNestedProperty(b, "error", "details") ? (h.error("Error occurred while enabling log: " + b.error.message + ":" + b.error.details),
                e.error(b.error.message + ": " + b.error.details)) : (h.info("API error response needs to be updated to conform to company guidelines" + b.config.url),
                e.error("Error occurred while retrieving logs."))
            })
        }
        function p(b) {
            var c = a.debugLogOutput.aceEditor.session.getLength();
            c > 0 && a.debugLogOutput.aceEditor.session.removeFullLines(0, c),
            b && (a.debugLogOutput.logId = 0)
        }
        function q(b, c, d) {
            var e, f, g = 0;
            e = Math.abs(d - b - c),
            f = e > 0 ? e - 1 : 0,
            a.debugLogOutput.aceEditor.session.removeFullLines(g, f)
        }
        function r(b) {
            var c, d;
            m(),
            c = b.length,
            d = a.debugLogOutput.aceEditor.session.doc.$lines.length,
            c > 0 && (a.debugLogOutput.logId = b[c - 1].logid + 1),
            d > 0 && c + d > F && q(c, d, F),
            b.length > F && (b.splice(0, Math.abs(F - b.length)),
            c = b.length);
            var e = a.debugLogOutput.aceEditor.getValue();
            _.each(b, function(a) {
                e = e.length > 0 ? e + "\n" + a.log : a.log
            }),
            a.debugLogOutput.aceEditor.setValue(e),
            a.debugLogOutput.aceEditor.clearSelection(),
            a.debugLogOutput.aceEditor.scrollToLine(a.debugLogOutput.aceEditor.session.getLength() - 1)
        }
        function s(b) {
            n(),
            p(),
            b.length > F && b.splice(0, Math.abs(F - b.length));
            var c = a.debugLogOutput.aceEditor.getValue();
            _.each(b, function(a) {
                c = c.length > 0 ? c + "\n" + a.log : a.log
            }),
            a.debugLogOutput.aceEditor.setValue(c),
            a.debugLogOutput.aceEditor.clearSelection(),
            a.debugLogOutput.aceEditor.scrollToLine(a.debugLogOutput.aceEditor.session.getLength() - 1)
        }
        function t() {
            !angular.isDefined(C) && angular.isDefined(E) && (a.debugLogInput.pollingInProgress = !0,
            C = f(function() {
                angular.isDefined(a.debugLogOutput.selectedLogFile) && (h.info("Getting Log data " + new Date),
                d.getLog(E, a.debugLogOutput.logId).then(y, z))
            }, 15e3))
        }
        function u() {
            angular.isDefined(C) && (f.cancel(C),
            C = void 0)
        }
        function v() {
            angular.isDefined(D) || (D = f(function() {
                angular.isDefined(a.debugLogOutput.selectedLogFile) && (u(),
                d.renew(E).then(function() {
                    h.info("Renew Session " + new Date),
                    h.info(a.debugLogOutput.selectedLogFile + " renew Successful"),
                    a.debugLogOutput.searchInProgress || t()
                }, function(b) {
                    e.clear(),
                    angular.isObject(b) && c.checkNestedProperty(b, "error", "details") ? (h.error("Error occurred while enabling log: " + b.error.message + ":" + b.error.details),
                    e.error(b.error.message + ": " + b.error.details)) : (h.info("API error response needs to be updated to conform to company guidelines" + b.config.url),
                    e.error(a.debugLogOutput.selectedLogFile + " Streaming failed")),
                    a.loadingDebugLogData = !1,
                    G()
                }))
            }, 18e4))
        }
        function w() {
            angular.isDefined(D) && (f.cancel(D),
            D = void 0)
        }
        function x() {
            a.searchTags.reset()
        }
        var y, z, A, B, C, D, E = void 0;
        a.stateString = c.getStateString(b),
        a.isApplicable = j.isVEdge(b.params.personality),
        a.isApplicable || (a.deviceType = b.params.personality);
        var F = 1e4;
        if (a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "troubleshooting",
            title: "Troubleshooting",
            state: "app.monitor.devices.dashboard.troubleshooting.dashboard"
        }, {
            name: "debugLog",
            title: "Debug Log"
        }],
        a.debugLogInput = {
            logFiles: [],
            pollingInProgress: !1
        },
        a.debugLogOutput = {
            aceEditor: ace.edit("debugLogTextAreaOutput"),
            selectedLogFile: "",
            logId: 0,
            lastPausedTimeStamp: void 0,
            searchSession: void 0,
            logSession: void 0
        },
        a.debugLogOutput.aceEditor.$blockScrolling = 1 / 0,
        a.debugLogOutput.aceEditor.setShowPrintMargin(!1),
        a.debugLogOutput.loadingDebugLogData = !1,
        a.debugLogOutput.searchInProgress = !1,
        a.debugLogOutput.sessionEstablished = !1,
        a.isApplicable) {
            y = function(b) {
                r(b.data),
                a.loadingDebugLogData = !1,
                t(),
                v()
            }
            ,
            A = function(b) {
                s(b.data),
                a.loadingDebugLogData = !1,
                v()
            }
            ,
            z = function(b) {
                a.loadingDebugLogData = !1,
                G(),
                e.clear(),
                angular.isObject(b) && c.checkNestedProperty(b, "error", "details") ? (h.error("Error occurred while enabling log: " + b.error.message + ":" + b.error.details),
                e.error(b.error.message + ": " + b.error.details)) : (h.info("API error response needs to be updated to conform to company guidelines" + b.config.url),
                e.error("Error occurred while retrieving logs."))
            }
            ,
            B = function(b) {
                a.loadingDebugLogData = !1,
                G(),
                e.clear(),
                angular.isObject(b) && c.checkNestedProperty(b, "error", "details") ? (h.error("Error occurred while enabling log: " + b.error.message + ":" + b.error.details),
                e.error(b.error.message + ": " + b.error.details)) : (h.info("API error response needs to be updated to conform to company guidelines" + b.config.url),
                e.error("Error occurred while searching logs."))
            }
            ,
            a.onSelectionOfFile = function(b) {
                m(),
                p(!0),
                angular.isDefined(E) ? (a.loadingDebugLogData = !0,
                G().then(function() {
                    x(),
                    E = void 0,
                    h.info("Current session is closed."),
                    angular.isDefined(b) ? (h.info("New session is being established."),
                    a.debugLogOutput.selectedLogFile = b.fileName,
                    o()) : (a.debugLogOutput.selectedLogFile = void 0,
                    a.loadingDebugLogData = !1)
                }, function(b) {
                    E = void 0,
                    a.debugLogOutput.selectedLogFile = void 0,
                    h.info("Error closing current session."),
                    e.clear(),
                    angular.isObject(b) && c.checkNestedProperty(b, "error", "details") ? (h.error("Error occurred while clearing current session: " + b.error.message + ":" + b.error.details),
                    e.error(b.error.message + ": " + b.error.details)) : (h.info("API error response needs to be updated to conform to company guidelines" + b.config.url),
                    e.error("Error occurred while clearing current session.")),
                    a.loadingDebugLogData = !1
                })) : angular.isDefined(b) && (x(),
                h.info("New session is being established."),
                a.debugLogOutput.selectedLogFile = b.fileName,
                a.loadingDebugLogData = !0,
                o())
            }
            ,
            a.searchCallBackHandler = function(b) {
                if (k(),
                l(),
                angular.isDefined(b) && angular.isDefined(b.tags) && angular.isArray(b.tags) && b.tags.length > 0) {
                    a.debugLogOutput.searchInProgress = !0;
                    var c = {};
                    c.searchArray = b.tags.map(function(a) {
                        return a.text
                    }),
                    c.operation = angular.isDefined(b.pattern) ? b.pattern : "and",
                    a.loadingDebugLogData = !0,
                    a.debugLogInput.pollingInProgress = !1,
                    u(),
                    d.searchLog(E, c).then(A, B)
                } else
                    a.debugLogOutput.searchInProgress = !1,
                    d.getLog(E, a.debugLogOutput.logId).then(y, z)
            }
            ,
            a.clearAllLogButtonClickHandler = function() {
                p(!1)
            }
            ,
            a.playLogButtonClickHandler = function() {
                a.debugLogOutput.lastPausedTimeStamp = void 0,
                t()
            }
            ,
            a.pauseLogButtonClickHandler = function() {
                a.debugLogOutput.lastPausedTimeStamp = g("momentDateFormat")(new Date, "MMM YYYY h:mm:ss a"),
                a.debugLogInput.pollingInProgress = !1,
                u()
            }
            ,
            a.downloadLogButtonClickHandler = function() {
                a.loadingDebugLogData = !0,
                i.downloadFile("dataservice/stream/device/log/download/" + E, 6e4).then(function() {
                    a.loadingDebugLogData = !1
                }, function() {
                    a.loadingDebugLogData = !1
                })
            }
            ,
            a.filterLogFiles = function(b) {
                return b && b.length > 0 ? _.filter(a.debugLogInput.logFiles, function(a) {
                    return a.fileName.indexOf(b) !== -1
                }) : a.debugLogInput.logFiles
            }
            ,
            a.playButtonDisabled = function() {
                return a.loadingDebugLogData || !a.debugLogOutput.sessionEstablished || !a.debugLogOutput.selectedLogFile || a.debugLogOutput.searchInProgress || !a.loadingDebugLogData && a.debugLogOutput.selectedLogFile && a.debugLogInput.pollingInProgress
            }
            ,
            a.pauseButtonDisabled = function() {
                return a.loadingDebugLogData || !a.debugLogOutput.sessionEstablished || !a.debugLogOutput.selectedLogFile || a.debugLogOutput.searchInProgress || !a.loadingDebugLogData && a.debugLogOutput.selectedLogFile && !a.debugLogInput.pollingInProgress
            }
            ,
            a.searchDisabled = function() {
                return a.loadingDebugLogData || !a.debugLogOutput.selectedLogFile || !a.loadingDebugLogData && a.debugLogOutput.selectedLogFile && a.debugLogOutput.logId < 1
            }
            ,
            a.logDataAvailable = function() {
                return !a.loadingDebugLogData && a.debugLogOutput.logId > 0
            }
            ,
            a.disableLogDataAccess = function() {
                return a.loadingDebugLogData || !a.loadingDebugLogData && a.debugLogOutput.logId < 1
            }
            ;
            var G = function() {
                return w(),
                a.debugLogOutput.sessionEstablished = !1,
                a.debugLogInput.pollingInProgress = !1,
                u(),
                d.destroySession()
            };
            d.getDeviceStatus().then(function(b) {
                angular.isDefined(b.length > 0) && _.each(b, function(b) {
                    var c = {};
                    c.fileName = b,
                    a.debugLogInput.logFiles.push(c)
                })
            })
        }
        a.$on("$destroy", function() {
            function b() {
                E = void 0
            }
            angular.isDefined(E) && G().then(b, b),
            a.debugLogOutput.aceEditor.destroy()
        })
    }
    angular.module("vManage").controller("DebugLogController", a),
    a.$inject = ["$scope", "$state", "appUtil", "DebugLogService", "notification", "$interval", "$filter", "$log", "restService", "DeviceService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        function k() {
            a.notApplicableMessage.title = "Not Applicable",
            a.notApplicableMessage.details = a.breadCrumb.states[a.breadCrumb.states.length - 1].title + " is not applicable for " + a.deviceType
        }
        function l() {
            a.notApplicableMessage.title = "Cannot Perform Operation",
            a.notApplicableMessage.details = "Software version on device does not support this operation. Upgrade device software to continue."
        }
        function m() {
            var c, f;
            a.deviceBringUpStatus = [],
            angular.isDefined(b.params.uuid) && (c = d.getDeviceBringUpStatus(b.params.uuid),
            f = d.getDeviceStatus(b.params.uuid),
            j.all([c, f]).then(function(b) {
                var c = b[0].data;
                o(c, "operation"),
                a.serverCallInProgress = !1,
                angular.isDefined(b[1]) && angular.isDefined(b[1].data) && "unreachable" === b[1].data[0].reachability && e.warning("Device data is not up-to-date.", 2e3)
            }, function() {
                h.error("UUID is not defined"),
                a.serverCallInProgress = !1
            }))
        }
        function n(b) {
            angular.isDefined(b) ? (a.serverCallInProgress = !0,
            d.getDeviceSupportedVersion(b).then(function(b) {
                var c = _.find(b.data, {
                    name: "mt-serial-list"
                });
                a.deviceBringUpFeatureIsSupported = !!(angular.isDefined(c) && angular.isDefined(c.version) && parseInt(c.version) > 1),
                a.deviceBringUpFeatureIsSupported ? m() : (l(),
                a.serverCallInProgress = !1)
            }, function() {
                h.info("Failed to get device supported version"),
                a.deviceBringUpFeatureIsSupported = !1,
                a.serverCallInProgress = !1
            })) : m()
        }
        function o(b, c) {
            var d = {
                DataPlane: "vEdge",
                ControlPlane: "vSmart",
                RouterConfiguration: "vEdge",
                SoftwareImageUpdate: "vManage",
                vBondAuth: "vBond"
            }
              , e = {
                DataPlane: 4,
                ControlPlane: 3,
                RouterConfiguration: 2,
                SoftwareImageUpdate: 1,
                vBondAuth: 0
            };
            _.each(b, function(b) {
                var f = e[b[c]];
                f > -1 && (a.deviceBringUpStatus[f] = b,
                a.deviceBringUpStatus[f].devicetype = d[b[c]])
            })
        }
        if (a.stateString = c.getStateString(b),
        a.isApplicable = !!angular.isDefined(b.params.deviceType) && f.isVEdge(b.params.deviceType),
        a.deviceBringUpFeatureIsSupported = !0,
        a.deviceType = angular.isDefined(b.params.deviceType) ? b.params.deviceType : "",
        a.isDeviceDashboard = b.params.localSystemIp || b.params.systemIp,
        angular.isDefined(a.isDeviceDashboard) && angular.isDefined(a.breadCrumb))
            a.breadCrumb.states = [{
                name: "network",
                title: "Network",
                state: "app.monitor.devices.grid"
            }, {
                name: "troubleshooting",
                title: "Troubleshooting",
                state: "app.monitor.devices.dashboard.troubleshooting.dashboard"
            }, {
                name: "device-bring-up",
                title: "Device Bringup"
            }];
        else {
            a.isDeviceDashboard = !1,
            angular.isDefined(a.breadCrumb) || (a.breadCrumb = {});
            var p = i.getUserMode()
              , q = "provider" === p.mode ? "app.config.devices.controller" : "app.config.devices.vedge";
            a.breadCrumb.states = [{
                name: "devices",
                title: "Devices",
                state: q
            }, {
                name: "device-bring-up",
                title: "Device Bringup"
            }]
        }
        a.notApplicableMessage = {},
        a.showErrorDetails = function(a) {
            g.show({
                templateUrl: "app/configuration/devices/modalTemplates/templateLogs.html",
                controller: "deviceBringUpErrorLogController",
                resolve: {
                    selectedState: function() {
                        return a
                    }
                }
            })
        }
        ,
        a.getTimestamp = function(a) {
            var b = a[0].substr(a[0].indexOf("[") + 1, a[0].indexOf("]") - 1);
            if (angular.isDefined(b) && b.length > 0)
                return new Date(b)
        }
        ,
        a.isApplicable ? n(b.params.localSystemIp) : k()
    }
    angular.module("vManage").controller("DeviceBringUpController", a),
    a.$inject = ["$scope", "$state", "appUtil", "TroubleshootingService", "notification", "DeviceService", "$mdDialog", "$log", "rbac", "$q"]
}(),
angular.module("vManage").controller("deviceBringUpErrorLogController", deviceBringUpErrorLogController),
deviceBringUpErrorLogController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "selectedState", "$filter"],
function() {
    function a(a, b, c, d, e, f, g) {
        function h(a) {
            var b, c;
            return b = Math.floor(a / 6e4),
            b < 1 && (b = 0),
            c = (a % 6e4 / 1e3).toFixed(0),
            c < 10 && c > 0 ? c = "0" + c : c < 1 && (c = "00"),
            b + ":" + c
        }
        var i, j, k, l, m, n = 5;
        a.stateString = c.getStateString(b),
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "troubleshooting",
            title: "Troubleshooting",
            state: "app.monitor.devices.dashboard.troubleshooting.dashboard"
        }, {
            name: "packet-capture",
            title: "Packet Capture"
        }],
        a.isApplicable = f.isVEdge(b.params.personality),
        a.isApplicable || (a.deviceType = b.params.personality),
        a.isApplicable && (a.getViewInProgressState = function() {
            switch (d.getState()) {
            case "STATE_INPROGRESS_PACKETCAPTURE":
                return "inProgress";
            default:
            case "STATE_STOPPING_PACKETCAPTURE":
                return "disabled";
            case "STATE_COMPLETED_PACKETCAPTURE":
            case "STATE_REQUESTING_DOWNLOAD":
            case "STATE_INPROGRESS_DOWNLOAD":
            case "STATE_COMPLETED_DOWNLOAD":
            case "STATE_REQUESTING_SESSIONEND":
            case "STATE_FILE_READY":
                return "completed"
            }
        }
        ,
        a.getViewPrepareDownloadFileState = function() {
            switch (d.getState()) {
            case "STATE_COMPLETED_PACKETCAPTURE":
                return "inProgress";
            default:
                return "disabled";
            case "STATE_COMPLETED_DOWNLOAD":
            case "STATE_REQUESTING_SESSIONEND":
            case "STATE_FILE_READY":
                return "completed"
            }
        }
        ,
        a.getViewDownloadFileState = function() {
            switch (d.getState()) {
            case "STATE_FILE_READY":
            case "STATE_REQUESTING_DOWNLOAD":
            case "STATE_INPROGRESS_DOWNLOAD":
                return "inProgress";
            default:
                return "disabled";
            case "STATE_COMPLETED_DOWNLOAD":
                return "completed"
            }
        }
        ,
        a.getState = function() {
            return d.getState()
        }
        ,
        m = function(b, f) {
            function l() {
                var b, c, e;
                a.packetCaptureTimeSpan = h(j - Date.now()),
                b = a.packetCaptureTimeSpan.split(":"),
                c = parseInt(b[0]),
                e = parseInt(b[1]),
                c < 1 && e < 1 ? (clearInterval(k),
                k = null,
                d.stop({
                    onChangeState: m
                })) : c < 1 && e > 0 && (a.packetCaptureUnit = "Seconds")
            }
            "STATE_INPROGRESS_PACKETCAPTURE" === b ? (j = Date.now() + 6e4 * n,
            l(),
            k = setInterval(function() {
                a.safeApply(function() {
                    l()
                })
            }, 1e3)) : "STATE_COMPLETED_PACKETCAPTURE" === b ? (clearInterval(k),
            k = null,
            i = null) : "STATE_FILE_READY" === b ? angular.isDefined(f) && f.hasOwnProperty("fileSize") && (a.fileDownloadSize = parseFloat(.001 * f.fileSize).toFixed(2)) : "STATE_ERROR" === b ? (d.getSession().sessionId && d.forceStop(),
            e.clear(),
            angular.isObject(f) && c.checkNestedProperty(f, "error", "details") ? (g.error("Error occurred while establishing session: " + f.error.message + ":" + f.error.details),
            e.error(f.error.message + ": " + f.error.details)) : angular.isObject(f) && f.hasOwnProperty("message") ? e.error(f.message) : (g.info("API error response needs to be updated to conform to company guidelines"),
            e.error("Error occurred while establishing session."))) : "STATE_READY" === b && e.clear()
        }
        ,
        a.isCollapsed = !0,
        a.contentHeightOffset = 0,
        a.systemIp = b.params.systemIp,
        a.showErrorSection = !1,
        a.errorMessage = {},
        a.getAppsRequest = !1,
        a.btnSubmitLabel = "Start",
        a.packetCaptureTimeSpan = 0,
        a.packetCaptureUnit = "Minutes",
        a.activityStatus = "",
        a.fileDownloadSize = 0,
        a.safeApply = function(a) {
            if (!c.checkNestedProperty(this.$root, "$$phase"))
                return !1;
            var b = this.$root.$$phase;
            "$apply" == b || "$digest" == b ? a && "function" == typeof a && a() : this.$apply(a)
        }
        ,
        a.fields = {
            vpn: "",
            interface: "",
            packetType: "control",
            sourceIP: "",
            sourcePort: "",
            protocol: "",
            destinationIP: "",
            destinationPort: ""
        },
        a.resetHeightOffset = function() {
            a.contentHeightOffset = a.isCollapsed ? 300 : 520
        }
        ,
        a.toggleTrafficFilterSection = function() {
            a.isCollapsed = !a.isCollapsed,
            a.resetHeightOffset()
        }
        ,
        a.updateSourceIP = function(b) {
            angular.isDefined(b) && (l = angular.copy(b.ipAddress),
            a.fields.sourceIP = b.ipAddress)
        }
        ,
        a.getActivityStatus = function() {
            switch (d.getState()) {
            default:
            case "STATE_REQUESTING_OLD_SESSIONEND":
            case "STATE_COMPLETED_OLD_SESSIONEND":
            case "STATE_REQUESTING_SESSION_ID":
            case "STATE_RECEIVED_SESSION_ID":
            case "STATE_READY":
            case "STATE_ERROR":
            case "STATE_REQUESTING_SESSIONEND":
            case "STATE_COMPLETED_SESSIONEND":
            case "STATE_SESSIONEND_ERROR":
                return "setupInProgress";
            case "STATE_REQUESTING_PACKET_CAPTURE":
            case "STATE_INPROGRESS_PACKETCAPTURE":
            case "STATE_STOPPING_PACKETCAPTURE":
            case "STATE_COMPLETED_PACKETCAPTURE":
            case "STATE_FILE_READY":
            case "STATE_REQUESTING_DOWNLOAD":
            case "STATE_INPROGRESS_DOWNLOAD":
            case "STATE_COMPLETED_DOWNLOAD":
                return "setupComplete"
            }
        }
        ,
        a.isLoading = function() {
            switch (d.getState()) {
            default:
            case "STATE_READY":
            case "STATE_COMPLETED_DOWNLOAD":
            case "STATE_COMPLETED_SESSIONEND":
            case "STATE_FILE_READY":
            case "STATE_ERROR":
            case "STATE_SESSIONEND_ERROR":
                return !1;
            case "STATE_REQUESTING_OLD_SESSIONEND":
            case "STATE_COMPLETED_OLD_SESSIONEND":
            case "STATE_REQUESTING_SESSION_ID":
            case "STATE_RECEIVED_SESSION_ID":
            case "STATE_REQUESTING_PACKET_CAPTURE":
            case "STATE_INPROGRESS_PACKETCAPTURE":
            case "STATE_STOPPING_PACKETCAPTURE":
            case "STATE_COMPLETED_PACKETCAPTURE":
            case "STATE_REQUESTING_DOWNLOAD":
            case "STATE_INPROGRESS_DOWNLOAD":
            case "STATE_REQUESTING_SESSIONEND":
                return !0
            }
        }
        ,
        a.submit = function(c) {
            a.fields.vpn = a.selectedVPN.key,
            a.fields.interface = a.selectedSourceInterface.key,
            a.packetCaptureTimeSpan = 0,
            a.packetCaptureUnit = "Minutes",
            d.start(b.params.uuid, a.fields.vpn, a.fields.interface, a.fields.packetType, {
                onChangeState: m,
                sourceIP: a.fields.sourceIP,
                sourcePort: a.fields.sourcePort,
                protocol: a.fields.protocol,
                destinationIP: a.fields.destinationIP,
                destinationPort: a.fields.destinationPort
            })
        }
        ,
        a.stopCaptureClickHandler = function() {
            d.getSession().sessionId && d.stop({
                onChangeState: m
            })
        }
        ,
        a.downloadFileClickHandler = function() {
            d.getSession().sessionId && d.download()
        }
        ,
        a.resetHeightOffset(),
        a.sourceInterfacesList.reset(),
        a.vpnList.reset(),
        a.getVPNInterfaceList()),
        a.$on("$destroy", function() {
            d.getSession().sessionId ? d.forceStop() : d.resetSession()
        })
    }
    angular.module("vManage").controller("PacketCaptureController", a),
    a.$inject = ["$scope", "$state", "appUtil", "PacketCaptureService", "notification", "DeviceService", "$log"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        function g() {
            a.showErrorSection = !1,
            a.errorMessage = {}
        }
        var h, i;
        a.stateString = c.getStateString(b),
        a.pingContentHeightOffset = 0,
        a.isCollapsedPingOptions = !0,
        a.nPingSupported = !1,
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "troubleshooting",
            title: "Troubleshooting",
            state: "app.monitor.devices.dashboard.troubleshooting.dashboard"
        }, {
            name: "ping",
            title: "Ping"
        }],
        a.probes = [{
            name: "icmp",
            title: "ICMP",
            disableProbe: !1
        }, {
            name: "tcp",
            title: "TCP",
            disableProbe: !0
        }, {
            name: "udp",
            title: "UDP",
            disableProbe: !0
        }],
        a.resetHeightOffsetForPing = function() {
            a.pingContentHeightOffset = a.isCollapsedPingOptions ? 474 : 549
        }
        ,
        a.toggleAdvancedOptionsViewForPing = function() {
            a.isCollapsedPingOptions = !a.isCollapsedPingOptions,
            a.resetHeightOffsetForPing()
        }
        ,
        a.resetHeightOffsetForPing();
        var j = function(b) {
            angular.isDefined(b) && b.hasOwnProperty("rawOutput") && (a.pingResponseObj = angular.copy(b)),
            a.loadingPingData = !1
        }
          , k = function(b) {
            a.loadingPingData = !1,
            a.showErrorSection = !0,
            a.errorMessage = b
        };
        a.checkNPingSupport = function(b) {
            function c() {
                a.pingInput.sourcePort = "",
                a.pingInput.destPort = "",
                a.pingInput.df = !1,
                a.pingInput.tos = "",
                a.pingInput.ttl = "",
                a.pingInput.mtu = ""
            }
            a.loadingPingData = !0,
            d.getDeviceSupportedVersion(b).then(function(b) {
                var d = _.find(b.data, {
                    name: "tools"
                });
                a.nPingSupported = !(!angular.isDefined(d) || !angular.isDefined(d.version) || "2.0" !== d.version),
                angular.isDefined(a.nPingSupported) && a.nPingSupported && (a.probes[1].disableProbe = !1,
                a.probes[2].disableProbe = !1,
                a.$watch("pingInput.probeType", function(a) {
                    c()
                })),
                a.loadingPingData = !1
            }, function() {
                $log.info("Failed to get device supported version"),
                a.nPingSupported = !1,
                a.loadingPingData = !1
            })
        }
        ,
        a.pingDevice = function(e) {
            if (e.$valid) {
                g(),
                angular.isDefined(a.selectedSourceInterface) && null !== a.selectedSourceInterface && angular.isDefined(a.selectedSourceInterface.key) ? a.pingInput.source = a.selectedSourceInterface.key : a.pingInput.source = "",
                angular.isDefined(a.selectedVPN) && null !== a.selectedVPN && angular.isDefined(a.selectedVPN.key) ? a.pingInput.vpn = a.selectedVPN.key : a.pingInput.vpn = "";
                var f = angular.copy(a.pingInput);
                a.nPingSupported || delete f.probeType;
                for (var i in f)
                    f.hasOwnProperty(i) && (f[i] === !1 || null === f[i] || f[i].length < 1) ? delete f[i] : f[i] = f[i].toString();
                a.loadingPingData = !0,
                c.emptyObject(a.pingResponseObj),
                h = d.getPingData(a.nPingSupported, b.params.systemIp, f).then(j, k)
            }
        }
        ,
        a.resetForm = function() {
            a.pingInput = angular.copy(i)
        }
        ,
        a.sourceInterfacesList.reset(),
        a.vpnList.reset(),
        a.getVPNInterfaceList(),
        a.loadingPingData = !1,
        a.pingInput = {
            host: "",
            vpn: "",
            source: "",
            count: "",
            size: "",
            rapid: !1,
            probeType: a.probes[0].name
        },
        i = angular.copy(a.pingInput),
        angular.isDefined(b.params.localSystemIp) && a.checkNPingSupport(b.params.localSystemIp)
    }
    angular.module("vManage").controller("PingController", a),
    a.$inject = ["$scope", "$state", "appUtil", "TroubleshootingService", "notification", "$timeout"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        function i(b) {
            b ? a.applicationSearch = !0 : a.applicationSearch = !1;
            var c = b ? a.states.filter(k(b)) : a.states;
            return c
        }
        function j() {
            var b = f.defer();
            return m.length ? b.resolve(m) : (a.getAppsRequest = !0,
            d.getApplicationList().then(function(c) {
                a.getAppsRequest = !1,
                angular.forEach(c.data, function(a) {
                    var b = {
                        id: a.id,
                        value: a.name,
                        postValue: a.name
                    };
                    m.push(b)
                }),
                b.resolve(m),
                m.sort(function(a, b) {
                    return a.value.localeCompare(b.value)
                }),
                g.sessionStorage.setItem("applicationList", JSON.stringify(m))
            }, function(a) {
                b.reject(a)
            })),
            b.promise
        }
        function k(a) {
            var b = angular.lowercase(a);
            return function(a) {
                return 0 === a.value.toLowerCase().indexOf(b)
            }
        }
        a.stateString = c.getStateString(b);
        var l;
        a.isCollapsed = !0,
        a.isApplicable = h.isVEdge(b.params.personality) || h.isVBond(b.params.personality),
        a.isApplicable || (a.deviceType = b.params.personality),
        a.simulatedFlowsContentHeightOffset = 0,
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "troubleshooting",
            title: "Troubleshooting",
            state: "app.monitor.devices.dashboard.troubleshooting.dashboard"
        }, {
            name: "simulate-flows",
            title: "Simulate Flows"
        }],
        a.simulateFlowsInput = {
            vpn: "",
            sourceIP: "",
            destinationIP: "",
            application: "",
            interface: "",
            protocol: "",
            sourcePort: "",
            destinationPort: "",
            dscp: "",
            all: !0
        },
        a.systemIp = b.params.systemIp,
        a.showErrorSection = !1,
        a.serverCall = !1,
        a.resetHeightOffsetForSimulatedFlows = function() {
            a.simulatedFlowsContentHeightOffset = a.isCollapsed ? 350 : 510
        }
        ,
        a.toggleAdvancedOptionsForSimulatedFlows = function() {
            a.isCollapsed = !a.isCollapsed,
            a.resetHeightOffsetForSimulatedFlows()
        }
        ,
        a.resetHeightOffsetForSimulatedFlows(),
        a.vpnOptions = [];
        var m = JSON.parse(g.sessionStorage.getItem("applicationList")) ? JSON.parse(g.sessionStorage.getItem("applicationList")) : [];
        a.interfaceOptions = [],
        a.nextHopData = {
            status: "",
            nexthops: []
        },
        a.errorMessage = {},
        a.getAppsRequest = !1,
        a.sourceInterfacesList.reset(),
        a.vpnList.reset(),
        a.getVPNInterfaceList(),
        a.updateSourceIP = function(b) {
            angular.isDefined(b) && (l = angular.copy(b.ipAddress),
            a.simulateFlowsInput.sourceIP = b.ipAddress)
        }
        ,
        a.onApplicationSelect = function(b) {
            angular.isDefined(b) && !a.simulateFlowsInput.destinationIP && (a.simulateFlowsInput.destinationIP = "8.8.8.8")
        }
        ,
        a.checkIfSelected = function(a) {
            return !!angular.isDefined(a)
        }
        ,
        a.simulateFlows = function(b) {
            a.serverCall = !0,
            a.showErrorSection = !1,
            a.nextHopData.status = "",
            a.nextHopData.nexthops.reset();
            var c = {
                vpn: a.selectedVPN.key.toString(),
                interface: a.selectedSourceInterface.key,
                sourceIp: a.simulateFlowsInput.sourceIP,
                destIp: a.simulateFlowsInput.destinationIP,
                protocol: a.simulateFlowsInput.protocol.toString(),
                all: a.simulateFlowsInput.all.toString()
            };
            (a.simulateFlowsInput.sourcePort || 0 === a.simulateFlowsInput.sourcePort) && (c["source-port"] = a.simulateFlowsInput.sourcePort.toString()),
            (a.simulateFlowsInput.destinationPort || 0 === a.simulateFlowsInput.destinationPort) && (c["dest-port"] = a.simulateFlowsInput.destinationPort.toString()),
            (a.simulateFlowsInput.dscp || 0 === a.simulateFlowsInput.dscp) && (c.dscp = a.simulateFlowsInput.dscp.toString()),
            a.selectedApplication ? (c.app = a.selectedApplication.postValue,
            a.simulateFlowsInput.sourceIP || (a.simulateFlowsInput.sourceIP = l,
            c.sourceIp = a.simulateFlowsInput.sourceIP)) : c.sourceIp = a.simulateFlowsInput.sourceIP,
            d.getSimulateFlows(a.systemIp, c, a.path).then(function(b, c) {
                a.serverCall = !1,
                angular.forEach(b.nexthops, function(a) {
                    a.type = e.formatNextHopType(a.type)
                });
                var d = $("#simulatedFlowsDataContainer")
                  , f = $("#simulateFlowsResult");
                if (d.animate({
                    scrollTop: f.offset().top - d.offset().top + d.scrollTop()
                }, 1e3),
                b.nexthops.length) {
                    var g = e.getEncapCounts(b.nexthops)
                      , h = e.getSummaryString(g);
                    a.summaryHTML = "Total next hops: <span>" + b.nexthops.length + "</span> | " + h
                }
                a.nextHopData = b
            }, function(b) {
                a.serverCall = !1,
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        }
        ,
        j().then(function(b) {
            a.states = b
        }, function() {}),
        a.querySearch = i,
        a.applicationSearch = !1,
        a.onApplicationSelection = function(b) {
            angular.isDefined(b) ? a.applicationSearch = !0 : a.applicationSearch = !1
        }
    }
    angular.module("vManage").controller("SimulateFlowsController", a),
    a.$inject = ["$scope", "$state", "appUtil", "SimulateFlowsService", "SimulateFlowsFactory", "$q", "$window", "DeviceService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        var l, m, n, o, p, q = 80, r = 20, s = 40, t = "#90CC84", u = "#FFD562", v = "#FF6E56", w = "#AAAAAA", x = "#BBBBBB", y = "#CCCCCC", z = e.getStates();
        b.stateString = d.getStateString(c),
        b.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "troubleshooting",
            title: "Troubleshooting",
            state: "app.monitor.devices.dashboard.troubleshooting.dashboard"
        }, {
            name: "speed-test",
            title: "Speed Test"
        }],
        b.isApplicable = j.isVEdge(c.params.personality),
        b.isApplicable || (b.deviceType = c.params.personality),
        b.isApplicable && (b.systemIp = c.params.systemIp,
        b.showErrorSection = !1,
        b.errorMessage = {},
        b.btnSubmitLabel = "",
        b.configuredDownloadSpeed = 0,
        b.actualDownloadSpeed = 0,
        b.configuredUploadSpeed = 0,
        b.actualUploadSpeed = 0,
        b.loadSourceCircuitList(),
        b.table = new f({
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !1,
            enableSorting: !0,
            tableHeightOffset: 325,
            tableName: "speedtest",
            dataUid: "vdevice-dataKey",
            autoLoad: !0
        }),
        b.table.setPostRefreshCallback(function() {
            m()
        }),
        m = function() {
            e.getCompletedSpeedTest(c.params.localSystemIp).then(function(a) {
                b.table.createColumns(a.header.columns),
                b.table.setTableData(a.data)
            }, function(a) {
                b.table.setTableData([]),
                angular.isObject(a) && d.checkNestedProperty(a, "error", "details") ? i.error("Error occurred while fetching historical data: " + a.error.message + ":" + a.error.details) : i.error("Error occurred while fetching historical data")
            })
        }
        ,
        m(),
        b.chartObject = new g({
            asyncLoad: !0
        },{}),
        b.safeApply = function(a) {
            if (!d.checkNestedProperty(this.$root, "$$phase"))
                return !1;
            var b = this.$root.$$phase;
            "$apply" == b || "$digest" == b ? a && "function" == typeof a && a() : this.$apply(a)
        }
        ,
        b.fields = {
            sourceCircuit: "",
            destinationDevice: "",
            destinationCircuit: ""
        },
        b.timeout = 0,
        b.tick = 0,
        b.progress = 0,
        n = function(a) {
            b.timeout = a,
            l = setInterval(function() {
                b.safeApply(function() {
                    b.tick += 1e3,
                    b.progress = Math.ceil(b.tick / b.timeout * 100) + "%"
                })
            }, 1e3)
        }
        ,
        o = function() {
            clearInterval(l),
            b.tick = 0,
            b.timeout = 0,
            b.progress = 0
        }
        ,
        b.isLoading = function() {
            var a = e.getState();
            switch (a) {
            case z.STATE_READY:
                return !1;
            default:
                return !0
            }
        }
        ,
        p = function(a, c) {
            i.info("[SpeedTestController] state: ", a),
            b.safeApply(function() {
                if (a === z.STATE_READY)
                    ;
                else if (a === z.STATE_INPROGRESS_SPEEDTEST)
                    n(c.timeout);
                else if (a === z.STATE_COMPLETED_STATUS)
                    b.actualDownloadSpeed = c.downloadSpeed,
                    b.actualUploadSpeed = c.uploadSpeed,
                    "upload" === c.currentSpeedUpdate ? b.chartObject.highChartApi.series[0].data[0].update(b.actualUploadSpeed) : "download" === c.currentSpeedUpdate && b.chartObject.highChartApi.series[0].data[0].update(b.actualDownloadSpeed);
                else if (a === z.STATE_STOPPING_SPEEDTEST)
                    o();
                else if (a === z.STATE_COMPLETED_SESSIONEND)
                    b.table.refresh();
                else if (a === z.STATE_ERROR) {
                    o(),
                    e.forceStop(),
                    b.table.refresh(),
                    h.clear();
                    var f = c.error;
                    angular.isObject(f) && d.checkNestedProperty(f, "error", "details") ? (i.error("Error occurred while enabling log: " + f.error.message + ":" + f.error.details),
                    h.error(f.error.message + ": " + f.error.details)) : (i.info("API error response needs to be updated to conform to company guidelines" + f.config.url),
                    h.error(b.debugLogOutput.selectedLogFile + " Streaming failed"))
                }
                b.btnSubmitLabel = e.getButtonLabel(a),
                b.state = a
            })
        }
        ,
        b.submit = function(a) {
            b.fields.sourceCircuit = b.selectedSourceCircuit,
            b.fields.destinationDevice = b.selectedDestinationDevice.name,
            b.fields.destinationCircuit = b.selectedDestinationCircuit,
            e.getConfiguredBandwidth(c.params.uuid, b.fields.sourceCircuit).then(function(a) {
                if (d.checkNestedProperty(a, "down_bw")) {
                    var f, g;
                    angular.isNumber(parseInt(a.down_bw)) && !isNaN(parseInt(a.down_bw)) ? (b.configuredDownloadSpeed = d.formatBytes(parseInt(a.down_bw)),
                    f = b.configuredDownloadSpeed) : (b.configuredDownloadSpeed = "NA",
                    f = 300),
                    angular.isNumber(parseInt(a.up_bw)) && !isNaN(parseInt(a.up_bw)) ? (b.configuredUploadSpeed = d.formatBytes(parseInt(a.up_bw)),
                    g = b.configuredUploadSpeed) : (b.configuredUploadSpeed = "NA",
                    g = 300);
                    var h = 300;
                    switch (b.chartObject.highChartApi.yAxis[0].setExtremes(0, h, !0),
                    b.chartObject.highChartApi.yAxis[0].removePlotBand(),
                    b.chartObject.highChartApi.yAxis[0].addPlotBand({
                        from: h * s / 100,
                        to: h,
                        color: b.isLoading() ? w : t
                    }),
                    b.chartObject.highChartApi.yAxis[0].addPlotBand({
                        from: h * r / 100,
                        to: h * s / 100,
                        color: b.isLoading() ? x : u
                    }),
                    b.chartObject.highChartApi.yAxis[0].addPlotBand({
                        from: 0,
                        to: h * r / 100,
                        color: b.isLoading() ? y : v
                    }),
                    e.getState()) {
                    case "STATE_READY":
                        b.actualDownloadSpeed = 0,
                        b.actualUploadSpeed = 0,
                        b.chartObject.highChartApi.series[0].data[0].update(b.actualUploadSpeed),
                        e.start(c.params.uuid, c.params.localSystemIp, b.fields.sourceCircuit, b.fields.destinationDevice, b.fields.destinationCircuit, String(q), {
                            onChangeState: p
                        })
                    }
                } else
                    i.error("Failed to run speed test.")
            }, function(a) {
                angular.isObject(a) && d.checkNestedProperty(a, "error", "details") ? i.error("Error occurred while fetching configured bandwidth information: " + a.error.message + ":" + a.error.details) : i.error("Error occurred while fetching configured bandwidth information")
            })
        }
        ),
        k(function() {
            a.$broadcast("highchartsng.reflowWithMandatoryReSize")
        }),
        b.$on("$destroy", function() {
            e.getSession().pollingIntervalID ? e.forceStop() : e.resetSession()
        })
    }
    angular.module("vManage").controller("SpeedTestController", a),
    a.$inject = ["$rootScope", "$scope", "$state", "appUtil", "SpeedTestService", "Table", "GaugeChart", "notification", "$log", "DeviceService", "$timeout"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        function g(b) {
            e(function() {
                a.tracerouteResult.resize = !1;
                var c = $(".troubleshoot-graphical-container").width();
                a.tracerouteResult.numOfCols = parseInt(c / 165),
                a.tracerouteResult.numOfArrays = Math.ceil(b.nexthops.length / a.tracerouteResult.numOfCols);
                for (var d = 0, f = a.tracerouteResult.numOfCols, g = 0; g < a.tracerouteResult.numOfArrays; g++)
                    a.isNumberOdd(g) ? a.tracerouteResult.nexthops.push(_(_.slice(b.nexthops, d, f)).reverse().value()) : a.tracerouteResult.nexthops.push(_.slice(b.nexthops, d, f)),
                    d += a.tracerouteResult.numOfCols,
                    f += a.tracerouteResult.numOfCols;
                var h = a.tracerouteResult.nexthops[a.tracerouteResult.nexthops.length - 1];
                if (a.isNumberOdd(a.tracerouteResult.numOfArrays)) {
                    if (a.tracerouteResult.lastNextHop = _.pullAt(h, h.length - 1),
                    h.length > 0 && h.length < a.tracerouteResult.numOfCols) {
                        for (var i = h.length; i < a.tracerouteResult.numOfCols; i++)
                            h.push({
                                noHop: !0,
                                error: a.tracerouteResult.error
                            });
                        a.tracerouteResult.noHopExists = !0
                    }
                } else if (a.tracerouteResult.lastNextHop = _.pullAt(h, 0),
                h.length > 0 && h.length < a.tracerouteResult.numOfCols) {
                    for (var i = h.length; i < a.tracerouteResult.numOfCols; i++)
                        h.unshift({
                            noHop: !0,
                            error: a.tracerouteResult.error
                        });
                    a.tracerouteResult.noHopExists = !0
                }
                0 == h.length && (a.tracerouteResult.nexthops.pop(),
                a.tracerouteResult.numOfArrays = a.tracerouteResult.numOfArrays - 1),
                e(function() {
                    $(".result-list_destination").css("width", $("traceroute-path").width())
                })
            })
        }
        a.stateString = c.getStateString(b),
        a.isCollapsedTraceRouteOptions = !0,
        a.systemIp = b.params.systemIp,
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "troubleshooting",
            title: "Troubleshooting",
            state: "app.monitor.devices.dashboard.troubleshooting.dashboard"
        }, {
            name: "traceroute",
            title: "Traceroute"
        }],
        a.sourceInterfacesList.reset(),
        a.vpnList.reset(),
        a.getVPNInterfaceList(),
        a.loadingTraceroute = !1,
        a.tracerouteResult = {
            source: "",
            destination: "",
            nexthops: [],
            rawOutput: [],
            lastNextHop: [],
            responseRecieved: !1,
            error: !1,
            numOfCols: 0,
            numOfArrays: 0,
            noHopExists: !1,
            cloneResponse: []
        },
        a.traceRouteInput = {
            vpn: "",
            host: "",
            interface: "",
            size: ""
        },
        a.isNumberOdd = function(a) {
            return a % 2
        }
        ,
        a.resetHeightOffsetForTraceRoute = function() {
            a.traceRouteContentHeightOffset = a.isCollapsedTraceRouteOptions ? 255 : 340
        }
        ,
        a.toggleAdvancedOptionsViewForTraceRoute = function() {
            a.isCollapsedTraceRouteOptions = !a.isCollapsedTraceRouteOptions,
            a.resetHeightOffsetForTraceRoute()
        }
        ,
        a.resetHeightOffsetForTraceRoute(),
        a.startTraceRoute = function() {
            a.traceRouteInput.vpn = a.selectedVPN,
            a.tracerouteResult.source = "",
            a.tracerouteResult.nexthops.reset(),
            a.tracerouteResult.rawOutput.reset(),
            a.tracerouteResult.error = !1,
            a.tracerouteResult.responseRecieved = !1,
            a.loadingTraceroute = !0,
            a.showErrorSection = !1,
            a.errorMessage = {};
            var e = {};
            for (var f in a.traceRouteInput)
                angular.equals(f, "vpn") ? angular.isDefined(a.traceRouteInput[f]) && null !== a.traceRouteInput[f] && "" !== a.traceRouteInput[f] && (e[f] = a.traceRouteInput[f].key.toString()) : angular.equals(f, "interface") ? angular.isDefined(a.traceRouteInput[f]) && null !== a.traceRouteInput[f] && "" !== a.traceRouteInput[f] && (e[f] = a.traceRouteInput[f].key.toString(),
                a.tracerouteResult.source = a.traceRouteInput[f].value) : c.isUndefinedOrEmpty(String(a.traceRouteInput[f])) || null === a.traceRouteInput[f] || (e[f] = String(a.traceRouteInput[f]));
            d.startTraceroute(b.params.systemIp, e).then(function(b) {
                a.tracerouteResult.noHopExists = !1,
                a.tracerouteResult.responseRecieved = !0,
                a.tracerouteResult.destination = angular.copy(a.traceRouteInput.host),
                a.tracerouteResult.rawOutput = b.rawOutput,
                b.nexthops.length < 1 && (a.loadingTraceroute = !1,
                b.nexthops = [{
                    errorInfo: "Network is unreachable"
                }]);
                var c = b.nexthops[b.nexthops.length - 1];
                !angular.isDefined(c.ipAddress) || angular.equals(c.errorInfo, "Traceroute timed out error") ? (a.tracerouteResult.error = !0,
                angular.extend(c, {
                    lastHop: !0,
                    success: !1
                })) : angular.isDefined(c.ipAddress) && !angular.equals(c.ipAddress, a.traceRouteInput.host) ? (a.tracerouteResult.error = !0,
                angular.isDefined(c.errorInfo) ? angular.extend(c, {
                    lastHop: !0,
                    success: !1
                }) : b.nexthops.push({
                    lastHop: !1,
                    success: !1,
                    errorInfo: "Max hop count reached"
                })) : angular.extend(c, {
                    lastHop: !0,
                    success: !0
                }),
                a.tracerouteResult.cloneResponse = b,
                g(b),
                a.loadingTraceroute = !1
            }, function(b) {
                a.loadingTraceroute = !1,
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        }
        ,
        a.$on("windowResizeEvent", function() {
            a.tracerouteResult.nexthops.reset(),
            a.tracerouteResult.lastNextHop.reset(),
            a.tracerouteResult.resize = !0,
            c.checkNestedProperty(a.tracerouteResult.cloneResponse, "nexthops", "1") && f(g, 500, !1, a.tracerouteResult.cloneResponse)
        })
    }
    angular.module("vManage").controller("TraceRouteController", a),
    a.$inject = ["$scope", "$state", "appUtil", "TroubleshootingService", "$timeout", "$debounce"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j) {
        a.stateString = d.getStateString(b),
        a.showErrorSection = !1,
        a.loadingInterfaceData = !1,
        a.loadingVPNData = !1,
        a.sourceInterfacesList = [],
        a.selectedSourceInterface = "",
        a.vpnList = [],
        a.selectedVPN = "",
        a.isDataStreamEnabled = void 0,
        a.userMode = j.getUserMode();
        var k = function(b) {
            g.formatInterfaceVPNData(b.data, a.sourceInterfacesList, "VPN", a.vpnList),
            a.selectedVPN = _.find(a.vpnList, {
                key: 0
            }),
            angular.isDefined(a.selectedVPN) && a.vpnListChangeHandler(a.selectedVPN),
            a.loadingInterfaceData = !1,
            a.loadingVPNData = !1
        }
          , l = function(b) {
            angular.isDefined(b) && angular.isDefined(b.error) && e.error(b.error.message + ":" + b.error.details),
            a.loadingInterfaceData = !1,
            a.loadingVPNData = !1
        };
        a.getVPNInterfaceList = function() {
            angular.isDefined(a.sourceInterfacesList) && a.sourceInterfacesList.length < 1 && (a.loadingInterfaceData = !0,
            a.loadingVPNData = !0,
            g.getInterfaceList(b.params.localSystemIp).then(k, l))
        }
        ,
        a.updateInterfaceList = function(b) {
            angular.isDefined(a.sourceInterfacesList) && a.sourceInterfacesList.length > 1 && (a.loadingInterfaceData = !0,
            a.loadingVPNData = !0)
        }
        ,
        a.vpnListChangeHandler = function(b) {
            _.each(a.sourceInterfacesList, function(a) {
                var c = null == b || _.find(b.interfaceKeys, {
                    key: a.key
                });
                angular.isDefined(c) ? a.isValid = !0 : a.isValid = !1
            })
        }
        ,
        a.interfaceListChangeHandler = function(b) {
            _.each(a.vpnList, function(a) {
                var c = null == b || _.find(b.vpnKeys, {
                    key: a.key
                });
                angular.isDefined(c) ? a.isValid = !0 : a.isValid = !1
            })
        }
        ,
        a.loadingSourceCiruitData = !1,
        a.sourceCircuitList = [],
        a.selectedSourceCircuit = "";
        var m = b.params.localSystemIp;
        a.loadSourceCircuitList = function() {
            a.loadingSourceCiruitData = !0,
            h.getControlLocalPropertiesSynced(b.params.localSystemIp).then(function(b) {
                b.data.length > 0 && (a.sourceCircuitList = _.pluck(b.data, "color")),
                a.loadingSourceCiruitData = !1
            }, function() {
                a.loadingSourceCiruitData = !1
            })
        }
        ,
        a.loadingDestinationDeviceData = !1,
        a.destDeviceSearchIP = !1,
        a.destinationDeviceList = [],
        a.selectedDestinationDevice = "",
        a.loadingDestinationCircuitData = !1,
        a.destinationCircuitList = [],
        a.selectedDestinationCircuit = "",
        a.destinationCircuitMap = {},
        a.searchDestinationDevice = function(b) {
            d.isUndefinedOrEmpty(b) ? a.destDeviceSearchIP = !1 : a.destDeviceSearchIP = !0;
            var c = a.destinationDeviceList;
            return a.loadingDestinationDeviceData = !0,
            b && (c = a.destinationDeviceList.filter(i.createFilterForRemoteIp(b))),
            a.loadingDestinationDeviceData = !1,
            c
        }
        ,
        a.onChangeDestinationDevice = function(b) {
            a.destDeviceSearchIP = !0
        }
        ,
        g.getDeviceInfoFromSourceIp(b.params.localSystemIp, a.sourceCircuitList, a.destinationDeviceList, a.destinationCircuitMap).then(function() {
            a.loadingDestinationDeviceData = !1
        }, function() {
            a.loadingDestinationDeviceData = !1,
            e.error("No data available from device " + m)
        }),
        g.isDataStreamEnabled().then(function(c) {
            if (d.checkNestedProperty(c.data, "0")) {
                if (a.isDataStreamEnabled = c.data[0].enable,
                !a.isDataStreamEnabled)
                    return g.setDataStreamServicesVisibility(["debugLog"], !1),
                    "vedge" === b.params.deviceType && ("multiTenant-tenant" === a.userMode.mode ? e.warning("'Data Stream' is disabled. Contact provider to enable data stream to use Debug Logs.") : e.warning("'Data Stream' is disabled. Go to Settings page to enable Data Stream to use Debug Logs.")),
                    {};
                g.setDataStreamServicesVisibility(["debugLog"], !0)
            }
        }, function() {
            a.loadingDestinationDeviceData = !1,
            e.error("No data available from device " + m)
        })
    }
    angular.module("vManage").controller("TroubleshootingController", a),
    a.$inject = ["$scope", "$state", "Tab", "appUtil", "notification", "$timeout", "TroubleshootingService", "InterfaceService", "TunnelComparisonService", "rbac"]
}(),
function() {
    function a(a, b, c, d, e) {
        a.stateString = c.getStateString(b),
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "troubleshooting",
            title: "Troubleshooting"
        }],
        a.troubleShootingList = d.getTroubleShootingOptions(),
        a.deviceType = b.params.deviceType,
        a.goToChildView = function(a) {
            b.go(a)
        }
    }
    angular.module("vManage").controller("TroubleShootingDashboardController", a),
    a.$inject = ["$scope", "$state", "appUtil", "TroubleshootingService", "notification"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
        function q(b) {
            f.getDataForDeviceSelected(y, a.tunnelComparisonInput.remoteSystemIp.name).then(function(c) {
                a.serverCall = !1,
                a.chartObject.changeLoadingIndicatorState(!1),
                a.chartObject.changeNoDataMessageState(!1),
                b.data.length <= 0 && c.data.length <= 0 ? (h.warning("Data from source device " + C + " and destination device " + a.tunnelComparisonInput.remoteSystemIp.name + " is not available.", 6e3),
                a.chartObject.changeNoDataMessageState(!0)) : b.data.length <= 0 ? (h.warning("Data from source device " + C + " is not available.", 6e3),
                u(A, c)) : c.data.length <= 0 ? (h.warning("Data from destination device " + a.tunnelComparisonInput.remoteSystemIp.name + " is not available.", 6e3),
                u(z, b)) : (u(A, c),
                u(z, b)),
                k(function() {
                    j.$broadcast("highchartsng.reflowWithMandatoryReSize")
                }, 2)
            }, function() {
                a.serverCall = !1,
                a.chartObject.changeLoadingIndicatorState(!1),
                h.warning("Data from destination device " + a.tunnelComparisonInput.remoteSystemIp.name + " is not available.", 6e3),
                b.data.length <= 0 ? (h.warning("Data from source device " + C + " is not available.", 6e3),
                a.chartObject.changeNoDataMessageState(!0)) : u(z, b)
            })
        }
        function r() {
            f.getDataForDeviceSelected(x, C).then(function(a) {
                q(a)
            }, function() {
                q({
                    data: []
                })
            })
        }
        function s() {
            var b = i.defer();
            if (angular.isDefined(a.chartOptions) || (a.chartOptions = {
                options: f.getChartOptions()
            },
            a.chartOptions.selection = a.chartOptions.options.loss_percentage),
            angular.isDefined(a.chartObject) || t(),
            a.showQueryBuilderTimeStampInbuilt = !1,
            angular.isDefined(a.queryBuilderObj))
                b.resolve();
            else {
                var c = function(b) {
                    v = b,
                    B ? (x = l.updateTimeStampValueInAggregation(x, w.source, v),
                    y = l.updateTimeStampValueInAggregation(y, w.destination, v),
                    a.chartObject.removeAllSeriesNames(),
                    r()) : B = !0
                }
                  , d = {
                    autoLoadFields: !1,
                    searchCallBack: c,
                    isDynamicQuery: !0,
                    renderViewAfterInitComplete: !0,
                    enableFilteredTags: !1,
                    returnFilteredObject: !0,
                    enableRealTime: !1
                };
                a.queryBuilderViewObj = {},
                a.queryBuilderObj = new e(d),
                f.getTunnelsFieldsData().then(function(c) {
                    a.queryBuilderObj.setFieldsData(c),
                    b.resolve()
                }, function(b) {
                    a.showErrorSection = !0,
                    a.errorMessage = b
                })
            }
            return b.promise
        }
        function t() {
            a.chartObject = new d(f.getChartDefinition(),f.getChartConfig()),
            a.chartObject.setXAxisProperty(f.getChartXAxisProperty()),
            a.chartObject.setSeriesNames(f.getTunnelSeriesName()),
            a.chartObject.setChartOptionsYAxis({
                title: {
                    text: a.chartOptions.selection.name
                }
            }, 0),
            a.chartObject.setYAxisProperty(a.chartOptions.selection.id)
        }
        function u(b, c) {
            var d = c.data;
            if (d.length > 0) {
                angular.forEach(d, function(a) {
                    a.name = a.name + " " + a.proto
                });
                var e = _.uniq(_.map(d, function(a) {
                    return a.name
                }))
                  , g = [];
                angular.forEach(e, function(a) {
                    var b, c = a, d = a.split(":")[0], e = a.split(":")[1].split("-")[1];
                    b = a.replace(d, p.getDeviceHostName(d)),
                    b = b.replace(e, p.getDeviceHostName(e)),
                    g.push({
                        name: c,
                        "name-hostname": b
                    })
                }),
                a.chartObject.APIData = c,
                a.chartObject.addSeriesFromRawData(_.map(g, function(b) {
                    return {
                        name: b.name,
                        display: b["name-hostname"],
                        seriesCustomOptions: {
                            formatDataToBytes: a.chartOptions.selection.formatDataToBytes,
                            yAxisUnit: a.chartOptions.selection.yAxisUnit
                        }
                    }
                }), d),
                f.updateAxisLabel(a.chartObject, a.chartOptions)
            }
        }
        a.stateString = c.getStateString(b),
        a.breadCrumb.states = f.getBreadCrums(),
        a.isApplicable = g.isVEdge(b.params.personality),
        a.isApplicable || (a.deviceType = b.params.personality),
        a.systemIp = b.params.systemIp;
        var v, w, x, y, z = [], A = [], B = !1, C = b.params.localSystemIp;
        a.tunnelComparisonInput = {
            remoteSystemIp: "",
            remoteTlocColor: "",
            sourceTlocColor: ""
        },
        a.formInputValues = {
            remoteIpList: [],
            localTlocColors: [],
            remoteIpTLOCDictionary: {}
        },
        a.remoteIpSearch = !1,
        a.querySearchRemoteIp = function(b) {
            var c;
            return b ? (a.remoteIpSearch = !0,
            c = a.formInputValues.remoteIpList.filter(f.createFilterForRemoteIp(b))) : (a.remoteIpSearch = !1,
            c = a.formInputValues.remoteIpList),
            c
        }
        ,
        a.requiredMsg = {
            destination: !1
        },
        a.onRemoteIpSelection = function(b) {
            angular.isDefined(b) ? (a.requiredMsg.destination = !1,
            a.remoteIpSearch = !0,
            n.validateIpv4(b.name) && (a.serverCall = !0,
            m.getControlLocalPropertiesSynced(b.name).then(function(c) {
                if (c.data.length > 0) {
                    var d = ["All"].concat(_.pluck(c.data, "color"));
                    a.formInputValues.remoteIpTLOCDictionary[b.name] = d
                }
                a.serverCall = !1
            }, function() {
                a.serverCall = !1
            }))) : (a.remoteIpSearch = !1,
            a.requiredMsg.destination = !0)
        }
        ,
        a.queryBuilderObj = void 0,
        a.serverCall = !0,
        a.showChart = !1,
        l.getDeviceInfoFromSourceIp(C, a.formInputValues.localTlocColors, a.formInputValues.remoteIpList, a.formInputValues.remoteIpTLOCDictionary).then(function() {
            a.serverCall = !1
        }, function() {
            a.serverCall = !1,
            h.error("No data available from device " + C)
        });
        var D = function() {
            a.serverCall = !0,
            m.getControlLocalPropertiesSynced(C).then(function(b) {
                if (b.data.length > 0) {
                    var c = ["All"].concat(_.pluck(b.data, "color"));
                    a.formInputValues.localTlocColors = c
                }
                a.serverCall = !1
            }, function() {
                a.serverCall = !1
            })
        };
        D();
        var E = function(b) {
            x = void 0,
            y = void 0,
            z = [],
            A = [],
            f.generateDataKey(z, A, a.formInputValues.localTlocColors, a.formInputValues.remoteIpTLOCDictionary, a.tunnelComparisonInput, C),
            z.length + A.length > 24 && (z = z.splice(0, 12),
            A = A.splice(0, 12),
            h.warning("Maximum 24 tunnels will be displayed. Select a specific circuit to reduce number of tunnels.", 6e3));
            var c = f.constructAggregation(v, a.chartOptions.selection);
            x = f.appendDataToAggregation(angular.copy(c), C, b.source, z),
            y = f.appendDataToAggregation(angular.copy(c), a.tunnelComparisonInput.remoteSystemIp.name, b.destination, A)
        };
        a.go = function() {
            a.serverCall = !0,
            s().then(function() {
                a.showChart = !0,
                a.chartObject.changeLoadingIndicatorState(!0),
                f.getAppRoutePollInterval(a.systemIp, a.tunnelComparisonInput.remoteSystemIp.name).then(function(b) {
                    w = b,
                    E(b),
                    a.chartObject.removeAllSeriesNames(),
                    r()
                })
            })
        }
        ,
        a.updateCheckboxSelection = function(b) {
            if (angular.isArray(b.properties))
                a.chartObject.highChartApi.yAxis[0].setTitle({
                    text: b.title[0]
                }, !1),
                a.chartObject.highChartApi.yAxis[0].update({
                    height: "45%",
                    max: null
                }),
                a.chartObject.setChartOptionsYAxis(l.getYAxisChartConfig("0%", "45%", b.yAxisUnit, b.formatDataToBytes, b.title[0]), 0),
                1 == a.chartObject.highChartApi.yAxis.length ? a.chartObject.highChartApi.addAxis(angular.extend(a.chartObject.chartConfig.yAxis[0], {
                    top: "55%",
                    height: "45%",
                    offset: 0,
                    title: {
                        text: b.title[1]
                    }
                })) : a.chartObject.highChartApi.yAxis[1].setTitle({
                    text: b.title[1]
                }, !1),
                a.chartObject.setChartOptionsYAxis(l.getYAxisChartConfig("55%", "45%", b.yAxisUnit, b.formatDataToBytes, b.title[1]), 1),
                a.chartObject.addSeriesNames(_.map(a.chartObject.chartConfig.series, function(a) {
                    return {
                        name: a.name,
                        display: a.display,
                        yAxis: 1,
                        visible: a.visible,
                        axisIndexLabel: b.axisLabel[1]
                    }
                })),
                a.chartObject.setYAxisProperty(b.properties),
                l.updateMetricsDetailsInAggregation(x, b),
                l.updateMetricsDetailsInAggregation(y, b);
            else {
                a.chartObject.highChartApi.yAxis[1] && (a.chartObject.highChartApi.yAxis[1].remove(),
                a.chartObject.removeSeriesNames(_.map(a.chartObject.chartConfig.series, function(a) {
                    return {
                        name: a.name,
                        display: a.display,
                        yAxis: 1
                    }
                }))),
                a.chartObject.highChartApi.yAxis[0].setTitle({
                    text: b.name
                }, !1),
                a.chartObject.highChartApi.yAxis[0].update({
                    height: "100%"
                }),
                a.chartObject.setChartOptionsYAxis(l.getYAxisChartConfig("0%", "100%", b.yAxisUnit, b.formatDataToBytes, b.name), 0),
                a.chartObject.updateSeriesAxisLabel("", 0),
                a.chartObject.setYAxisProperty(b.id);
                var c = [{
                    property: b.id,
                    type: b.aggregateBy[0]
                }];
                f.updateMetricsDetailsInAggregation(x, c),
                f.updateMetricsDetailsInAggregation(y, c)
            }
            a.chartObject.removeAllSeriesNames(),
            r()
        }
        ,
        a.$on("$destroy", function() {
            if (f.updateSourceDeviceAppRoutePollIntervalIsSet(!1),
            angular.isDefined(b) && angular.isDefined(b.params.personality) && a.queryBuilderObj) {
                var c = a.queryBuilderObj.getComponents();
                a.queryBuilderObj.setGlobalTime(l.getQueryBuilderTimeComponent(c))
            }
            a.chartObject = {}
        })
    }
    angular.module("vManage").controller("TunnelComparisonController", a),
    a.$inject = ["$scope", "$state", "appUtil", "HighStockLineChart", "QueryBuilderFactory", "TunnelComparisonService", "DeviceService", "notification", "$q", "$rootScope", "$timeout", "TroubleshootingService", "InterfaceService", "vipValidation", "rbacService", "DeviceListCache"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l) {
        function m() {
            a.dpi.enabled || a.cflowd.enabled || d.hideAppTransitionColumn(d.getTLOCTableColumns()),
            d.getLocalColorData(b.params.localSystemIp).then(function(b) {
                a.table.createColumns(d.getTLOCTableColumns()),
                a.table.setTableData(b.data),
                h(function() {
                    d.setChartSeriesNames(null, []);
                    for (var b = 0, c = 0; c < a.table.data.length && (a.table.uiGridApi.selection.toggleRowSelection(a.table.data[c]),
                    v.value.push(a.table.data[c].local_color),
                    b++,
                    6 != b); c++)
                        ;
                    a.queryBuilderObj.loadQueryBuilderWithFieldsData()
                }, 0, 1)
            }, function(b) {
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        }
        function n(c) {
            d.getLocalColorData(b.params.localSystemIp, c).then(function(b) {
                a.table.serverCallInProgress = !1;
                var c = a.table.uiGridApi.selection.getSelectedRows();
                angular.forEach(c, function(a) {
                    _.findIndex(b.data, {
                        local_color: a.local_color
                    }) < 0 && (a.count = "",
                    a.jitter = "",
                    a.latency = "",
                    a.loss_percentage = "",
                    b.data.push(a))
                }),
                a.table.taggedSearchObject.setSearchCache(b.data),
                a.table.refreshTableData(b.data),
                a.table.taggedSearchObject.searchData()
            }, function(b) {
                a.table.serverCallInProgress = !1,
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        }
        function o() {
            a.queryBuilderObj.disableUserActions(!0),
            d.fetchRealTimeData(b.params.systemIp, "loss_percentage" == a.chartOptions.selection.id).then(function(b) {
                return a.chartObject.changeLoadingIndicatorState(!1),
                angular.isDefined(a.chartObject) ? (a.chartObject.changeNoDataMessageState(!1),
                b.data.length > 0 && a.chartObject.prefillSeriesData(b.data[0].entry_time, l.REALTIME_INTERVAL_SIZE),
                a.chartObject.concatFromRawData(b.data, !0, l.REALTIME_INTERVAL_SIZE),
                u = !1,
                a.queryBuilderObj.disableUserActions(!1),
                void (t = h(function() {
                    o()
                }, 1e4, 1))) : (h.cancel(t),
                t = {},
                !1)
            }, function(b) {
                a.chartObject.checkSetNoDataMessage(),
                a.queryBuilderObj.disableUserActions(!1)
            })
        }
        function p() {
            a.queryBuilderObj.disableUserActions(!0),
            d.fetchRealTimeData(b.params.systemIp, "loss_percentage" == a.chartOptions.selection.id).then(function(b) {
                a.table.serverCallInProgress = !1,
                a.chartObject.changeNoDataMessageState(!1),
                a.chartObject.concatFromRawData(b.data, !0, l.REALTIME_INTERVAL_SIZE),
                u = !1,
                a.queryBuilderObj.disableUserActions(!1)
            }, function(b) {
                a.table.serverCallInProgress = !1,
                a.chartObject.checkSetNoDataMessage(),
                a.queryBuilderObj.disableUserActions(!1)
            })
        }
        var q, r;
        a.isApplicable = !1,
        a.stateString = c.getStateString(b),
        a.showErrorSection = !1,
        a.deviceType = b.params.deviceType,
        a.isApplicable = j.isVEdge(b.params.deviceType),
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "wan-tloc",
            title: "WAN - TLOC"
        }];
        var s, t, u = !0, v = {
            value: [],
            field: "local_color",
            type: "string",
            operator: "in"
        };
        a.dpi = {
            enabled: !1
        },
        a.cflowd = {
            enabled: !1
        },
        a.chartOptions = {
            options: d.getChartOptions()
        },
        a.chartOptions.selection = a.chartOptions.options.loss_percentage,
        a.queryBuilderViewObj = {},
        a.showQueryBuilderTimeStampInbuilt = !1,
        q = {
            autoLoadFields: !1,
            searchCallBack: function(c) {
                angular.isDefined(c.realTime) ? (a.chartObject.realTimeLoad = !0,
                a.chartObject.asyncLoad = !1,
                a.chartObject.emptyAllSeriesData(),
                s = c,
                t && (h.cancel(t),
                t = {}),
                d.hideTableColForRealTime(a.table),
                a.chartObject.changeLoadingIndicatorState(!0),
                o()) : (h.cancel(t),
                t = {},
                a.chartObject.realTimeLoad = !1,
                a.chartObject.asyncLoad = !0,
                v.value = _.map(a.table.uiGridApi.selection.getSelectedRows(), function(a) {
                    return a.local_color
                }),
                s = d.appendFilterAggregation(c, b.params.localSystemIp, v, a.chartOptions.selection),
                d.getAppRoutePollInterval(b.params.systemIp).then(function(b) {
                    r = 6e5,
                    b.data.length > 0 && angular.isDefined(b.data[0]["poll-interval"]) && (r = b.data[0]["poll-interval"]),
                    s = d.setHistogramInterval(s, r),
                    a.chartObject.emptyAllSeriesData(),
                    a.chartObject.addSeriesFromAPI(_.map(v.value, function(a) {
                        return {
                            name: a,
                            display: a
                        }
                    }), l.APP_ROUTE_STATS, s)
                }),
                d.unhideTableColForRealTime(a.table),
                u || n(s.query.rules[0]),
                u = !1)
            },
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !1,
            enableRealTime: !(angular.isUndefined(b.params.systemIp) || angular.equals(b.params.reachability, "unreachable") || angular.equals(b.params.validity, "staging"))
        },
        a.queryBuilderObj = new e(q),
        a.chartObject = new f(d.getChartDefinition(),d.getChartConfig()),
        a.chartObject.setXAxisProperty(d.getChartXAxisProperty()),
        a.chartObject.setYAxisProperty(d.getChartYAxisProperty()),
        a.chartObject.setSeriesNames(d.getChartSeriesNames()),
        a.chartObject.setChartOptionsYAxis({
            title: {
                text: "Loss Percentage"
            }
        }, 0),
        a.chartObject.setSeriesCustomOptions({
            yAxisUnit: "%"
        });
        var w = new g({
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !0,
            enableSorting: !0,
            enableTreeChildrenSelection: !0,
            tableHeightOffset: 325,
            tableName: "tloc",
            dataUid: "local_color",
            showSelectAllOption: !1,
            isRowSelectable: function(a) {
                return !0
            }
        },{
            custom: !0,
            customTemplateUrl: "app/monitor/devices/dashboard/templates/wan/customTlocToolbar.html"
        })
          , x = function(b) {
            var c = angular.copy(s);
            if (c.realTime)
                a.chartObject.addSeriesNames(_.map(b, function(b) {
                    return {
                        name: b.local_color,
                        display: b.local_color,
                        yAxis: 0,
                        axisIndexLabel: a.chartOptions.selection.axisLabel ? a.chartOptions.selection.axisLabel[0] : ""
                    }
                })),
                angular.equals(a.chartOptions.selection.id, "latency_jitter") && a.chartObject.addSeriesNames(_.map(b, function(b) {
                    return {
                        name: b.local_color,
                        display: b.local_color,
                        yAxis: 1,
                        axisIndexLabel: a.chartOptions.selection.axisLabel[1]
                    }
                })),
                v.value = v.value.concat(_.pluck(b, "local_color")),
                p();
            else {
                var d = _.find(c.query.rules, function(a) {
                    return angular.equals(a.field, "local_color")
                });
                d.value = _.pluck(b, "local_color"),
                v.value = v.value.concat(d.value),
                angular.equals(a.chartOptions.selection.id, "latency_jitter") ? (a.chartObject.addSeriesNames(_.map(d.value, function(b) {
                    return {
                        name: b,
                        display: b,
                        yAxis: 0,
                        axisIndexLabel: a.chartOptions.selection.axisLabel[0]
                    }
                })),
                a.chartObject.addSeriesNames(_.map(d.value, function(b) {
                    return {
                        name: b,
                        display: b,
                        yAxis: 1,
                        axisIndexLabel: a.chartOptions.selection.axisLabel[1]
                    }
                })),
                a.chartObject.addSeriesFromAPI([], l.APP_ROUTE_STATS, c)) : a.chartObject.addSeriesFromAPI(_.map(d.value, function(a) {
                    return {
                        name: a,
                        display: a
                    }
                }), l.APP_ROUTE_STATS, c)
            }
        }
          , y = function(b) {
            var c = _.pluck(b, "name");
            v.value = _.difference(v.value, c),
            a.chartObject.removeSeriesNames(_.map(b, function(a) {
                return {
                    name: a.name,
                    display: a.name
                }
            })),
            angular.equals(a.chartOptions.selection.id, "latency_jitter") && a.chartObject.removeSeriesNames(_.map(b, function(a) {
                return {
                    name: a.name,
                    display: a.name,
                    yAxis: 1
                }
            }))
        }
          , z = {
            selectTreeNode: function(b, c) {
                if (u)
                    return !1;
                var d = a.table.uiGridApi.selection.getSelectedRows().filter(function(b) {
                    return !a.chartObject.filtersSelected.series[0].values.some(function(a) {
                        return b.local_color == a.name
                    })
                });
                if (d.length > 0) {
                    var e = a.table.uiGridApi.selection.getSelectedRows().length;
                    e <= l.MAX_WAN_SERIES_ALLOWED ? i(x, 1e3, !1, d) : Math.abs(d.length - e) < l.MAX_WAN_SERIES_ALLOWED ? (angular.forEach(d.slice(d.length - (e - l.MAX_WAN_SERIES_ALLOWED), d.length), function(a) {
                        w.uiGridApi.selection.unSelectRow(a)
                    }),
                    d = d.slice(0, d.length - (e - l.MAX_WAN_SERIES_ALLOWED)),
                    i(x, 1e3, !1, d)) : (angular.forEach(d, function(a) {
                        w.uiGridApi.selection.unSelectRow(a)
                    }),
                    k.info("Select up to " + l.MAX_WAN_SERIES_ALLOWED + " TLOCs", 3e3))
                }
                var f = a.chartObject.filtersSelected.series[0].values.filter(function(b) {
                    return !a.table.uiGridApi.selection.getSelectedRows().some(function(a) {
                        return b.name == a.local_color
                    })
                });
                f.length > 0 && i(y, 1e3, !1, f)
            }
        }
          , A = {
            getStateCount: function(b) {
                return _.filter(a.table.uiGridApi.grid.rows, function(a) {
                    return a.visible && angular.isDefined(a.entity.state) && angular.equals(a.entity.state.toLowerCase(), b)
                }).length
            },
            viewApplicationDetails: function(c) {
                a.dpi.enabled ? b.go("app.monitor.devices.dashboard.applications.dpiFamily", {
                    systemIp: b.params.systemIp,
                    localSystemIp: b.params.localSystemIp,
                    deviceType: b.params.deviceType,
                    localTLOC: c.entity.local_color
                }) : a.cflowd.enabled && b.go("app.monitor.devices.dashboard.applications.cflowdDestinations", {
                    systemIp: b.params.systemIp,
                    localSystemIp: b.params.localSystemIp,
                    deviceType: b.params.deviceType,
                    localTLOC: c.entity.local_color
                })
            },
            isApplicationDetailsButtonEnabled: function() {
                return a.dpi.enabled || a.cflowd.enabled
            }
        };
        w.setPostRefreshCallback(function() {
            return !a.queryBuilderObj.options.disableUserActions && void (s.realTime ? (a.chartObject.changeLoadingIndicatorState(!0),
            a.chartObject.emptyAllSeriesData(),
            p()) : (a.chartObject.emptyAllSeriesData(),
            a.chartObject.addSeriesFromAPI([], l.APP_ROUTE_STATS, s),
            n(s.query.rules[0])))
        }),
        w.setAppScope(A),
        w.setOnRowSelectionCallback(z.selectTreeNode),
        a.table = w,
        j.getWidgetToEnable(b.params.localSystemIp).then(function(b) {
            angular.equals(b, "cflowd") ? a.cflowd.enabled = !0 : angular.equals(b, "dpi") && (a.dpi.enabled = !0),
            d.getTlocFields().then(function(b) {
                a.queryBuilderObj.setFieldsData([_.find(b.data, {
                    property: "entry_time"
                })]),
                m()
            }, function(b) {
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        }, function(b) {
            a.showErrorSection = !0,
            a.errorMessage = b
        }),
        a.updateCheckboxSelection = function(b) {
            angular.isDefined(t) && (h.cancel(t),
            t = {}),
            angular.isArray(b.properties) ? (a.chartObject.setSeriesCustomOptions({
                formatDataToBytes: b.formatDataToBytes,
                yAxisUnit: b.yAxisUnit
            }),
            a.chartObject.highChartApi.yAxis[0].setTitle({
                text: b.title[0]
            }, !1),
            a.chartObject.highChartApi.yAxis[0].update({
                height: "45%",
                max: null
            }),
            a.chartObject.setChartOptionsYAxis({
                min: 0,
                minRange: 1,
                lineWidth: 2,
                labels: {
                    enabled: !0
                },
                opposite: !1,
                title: {
                    text: b.title[0]
                },
                height: "45%",
                max: null
            }, 0),
            a.chartObject.highChartApi.addAxis(angular.extend(a.chartObject.chartConfig.yAxis[0], {
                top: "55%",
                height: "45%",
                offset: 0,
                title: {
                    text: b.title[1]
                }
            })),
            a.chartObject.setChartOptionsYAxis({
                min: 0,
                minRange: 1,
                lineWidth: 2,
                labels: {
                    enabled: !0
                },
                opposite: !1,
                title: {
                    text: b.title[1]
                },
                top: "55%",
                height: "45%",
                max: null
            }, 1),
            a.chartObject.updateSeriesAxisLabel(b.axisLabel[0], 0),
            a.chartObject.updateSeriesAxisLabel(b.axisLabel[1], 1),
            a.chartObject.addSeriesNames(_.map(a.chartObject.chartConfig.series, function(a) {
                return {
                    name: a.name,
                    display: a.display,
                    yAxis: 1,
                    visible: a.visible,
                    axisIndexLabel: b.axisLabel[1]
                }
            })),
            a.chartObject.setYAxisProperty(b.properties),
            s.realTime ? (a.chartObject.emptyAllSeriesData(),
            o()) : (h.cancel(t),
            t = {},
            s.aggregation.metrics = [{
                property: b.properties[0],
                type: "avg"
            }, {
                property: b.properties[1],
                type: "avg"
            }],
            d.removeLossPercentationQuery(s),
            a.chartObject.emptyAllSeriesData(),
            a.chartObject.refresh(l.APP_ROUTE_STATS, s))) : (a.chartObject.highChartApi.yAxis[1] && (a.chartObject.highChartApi.yAxis[1].remove(),
            a.chartObject.removeSeriesNames(_.map(a.chartObject.chartConfig.series, function(a) {
                return {
                    name: a.name,
                    display: a.display,
                    yAxis: 1
                }
            }))),
            a.chartObject.highChartApi.yAxis[0].setTitle({
                text: b.name
            }, !1),
            a.chartObject.highChartApi.yAxis[0].update({
                height: "100%"
            }),
            a.chartObject.setChartOptionsYAxis({
                min: 0,
                minRange: 1,
                lineWidth: 2,
                labels: {
                    enabled: !0
                },
                opposite: !1,
                title: {
                    text: b.name
                },
                height: "100%"
            }, 0),
            a.chartObject.updateSeriesAxisLabel("", 0),
            a.chartObject.setYAxisProperty(b.id),
            a.chartObject.setSeriesCustomOptions({
                formatDataToBytes: b.formatDataToBytes,
                yAxisUnit: b.yAxisUnit
            }),
            s.realTime ? (a.chartObject.emptyAllSeriesData(),
            o()) : (s.aggregation.metrics = [{
                property: b.id,
                type: "avg"
            }],
            d.addLossPercentationQuery(s),
            a.chartObject.emptyAllSeriesData(),
            a.chartObject.refresh(l.APP_ROUTE_STATS, s)))
        }
        ,
        a.$on("$destroy", function() {
            if (angular.isDefined(b) && angular.isDefined(b.params.deviceType)) {
                var c = a.queryBuilderObj.getComponents();
                a.queryBuilderObj.setGlobalTime(d.getQueryBuilderTimeComponent(c))
            }
            a.chartObject.cancelRealTimePolling(),
            a.chartObject = {},
            h.cancel(t),
            t = {}
        })
    }
    angular.module("vManage").controller("TlocController", a),
    a.$inject = ["$scope", "$state", "appUtil", "WANTlocService", "QueryBuilderFactory", "HighStockLineChart", "Table", "$interval", "$debounce", "DeviceService", "notification", "monitorApiConstants"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
        function q() {
            g.getTunnelFields().then(function(a) {
                if (!angular.isDefined(b.params.deviceType)) {
                    var c = _.filter(a.data, {
                        property: "entry_time"
                    });
                    if (angular.isDefined(c) && c.length > 0) {
                        var d = _.findIndex(c[0].options, {
                            key: "custom"
                        });
                        d > -1 && c[0].options.splice(d, 1)
                    }
                }
                r(a)
            }, function(b) {
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        }
        function r(c) {
            a.dpi.enabled || a.cflowd.enabled || g.hideAppTransitionColumn(),
            g.getTunnelDataConnData(b.params.localSystemIp, void 0, y, w).then(function(b) {
                angular.copy(b.data, C),
                a.table.createColumns(b.header.columns),
                a.table.setTreeLevelGroupings([{
                    treeLevel: 0,
                    groupByProperty: "local-color",
                    newRowProperty: "name"
                }]),
                a.table.setTableData(b.data),
                h(function() {
                    a.table.uiGridApi.treeBase.expandAllRows(),
                    g.setChartSeriesNames(null, []);
                    for (var b = 0, d = 0; d < a.table.data.length; d++)
                        if (0 != a.table.data[d].$$treeLevel && (a.table.uiGridApi.selection.toggleRowSelection(a.table.data[d]),
                        E.value.push(a.table.data[d].name),
                        E.display.push({
                            name: a.table.data[d].name,
                            "name-hostname": a.table.data[d]["name-hostname"]
                        }),
                        b++,
                        b == v)) {
                            if (angular.isDefined(x) && !angular.isDefined(_.find(E.display, {
                                name: x
                            }))) {
                                var e = _.findIndex(a.table.data, {
                                    name: x
                                });
                                e > -1 && (a.table.uiGridApi.selection.toggleRowSelection(a.table.data[e]),
                                E.value.push(a.table.data[e].name),
                                E.display.push({
                                    name: a.table.data[e].name,
                                    "name-hostname": a.table.data[e]["name-hostname"]
                                }))
                            }
                            break
                        }
                    (!angular.isDefined(a.queryBuilderObj.fieldsData) || a.queryBuilderObj.fieldsData.length < 0) && a.queryBuilderObj.setFieldsData([_.find(c.data, {
                        property: "entry_time"
                    })]),
                    a.queryBuilderObj.loadQueryBuilderWithFieldsData()
                }, 0, 1)
            }, function(b) {
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        }
        function s(c) {
            angular.isUndefined(c) && "octets" === a.chartOptions.selection.id && (c = !0),
            a.queryBuilderObj.disableUserActions(!0),
            g.fetchRealTimeData(b.params.systemIp, b.params.localSystemIp, a.chartOptions.selection).then(function(b) {
                return a.chartObject.changeLoadingIndicatorState(!1),
                angular.isDefined(a.chartObject) ? (a.chartObject.changeNoDataMessageState(!1),
                c || (b.data.length > 0 && a.chartObject.prefillSeriesData(b.data[0].entry_time, m.REALTIME_INTERVAL_SIZE),
                a.chartObject.concatFromRawData(b.data, !0, m.REALTIME_INTERVAL_SIZE)),
                D = !1,
                a.queryBuilderObj.disableUserActions(!1),
                void (B = h(function() {
                    s(!1)
                }, 1e4, 1))) : (h.cancel(B),
                B = {},
                !1)
            }, function(b) {
                a.chartObject.checkSetNoDataMessage(),
                a.queryBuilderObj.disableUserActions(!1)
            })
        }
        function t() {
            var c = !1;
            "octets" === a.chartOptions.selection.id && (c = !0),
            a.queryBuilderObj.disableUserActions(!0),
            g.fetchRealTimeData(b.params.systemIp, b.params.localSystemIp, a.chartOptions.selection).then(function(b) {
                a.table.serverCallInProgress = !1,
                a.chartObject.changeNoDataMessageState(!1),
                c || a.chartObject.concatFromRawData(b.data, !0, m.REALTIME_INTERVAL_SIZE),
                D = !1,
                a.queryBuilderObj.disableUserActions(!1)
            }, function(b) {
                a.table.serverCallInProgress = !1,
                a.chartObject.checkSetNoDataMessage(),
                a.queryBuilderObj.disableUserActions(!1)
            })
        }
        function u(c) {
            g.getTunnelDataConnData(b.params.localSystemIp, c, y, w).then(function(b) {
                a.table.serverCallInProgress = !1;
                var c = a.table.uiGridApi.selection.getSelectedRows();
                angular.forEach(c, function(a) {
                    _.findIndex(b.data, {
                        name: a.name
                    }) < 0 && (a.jitter = 0,
                    a.latency = 0,
                    a.loss_percentage = 0,
                    a.tx_octets = 0,
                    a.rx_octets = 0,
                    b.data.push(a))
                }),
                angular.copy(b.data, C),
                a.table.taggedSearchObject.setSearchCache(b.data),
                a.table.refreshTableData(b.data),
                a.table.taggedSearchObject.searchData()
            }, function(b) {
                a.table.serverCallInProgress = !1,
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        }
        a.stateString = c.getStateString(b),
        a.chartInitialized = !1,
        a.colorChange = !0,
        a.stateString.includes("monitor") ? a.colorChange = !0 : a.colorChange = !1;
        var v = 6;
        if (a.chartOptions = {
            options: g.getChartOptions()
        },
        angular.isDefined(b.params.deviceType))
            a.deviceType = b.params.deviceType,
            a.isApplicable = j.isVEdge(b.params.deviceType),
            a.showModalHeader = !1,
            a.contentOffsetHeight = 104,
            a.breadCrumb.states = [{
                name: "network",
                title: "Network",
                state: "app.monitor.devices.grid"
            }, {
                name: "wan-tunnel",
                title: "WAN - Tunnel"
            }],
            a.chartOptions.selection = a.chartOptions.options.loss_percentage;
        else {
            a.isApplicable = !0,
            a.showModalHeader = !0,
            a.contentOffsetHeight = 159,
            v = 10;
            var w = p.getTopPerformingTunnels()
              , x = n.tunnelEndPointSelected
              , y = n.chartSelection;
            a.modalWidgetTitle = n.modalWidgetTitle;
            var z = _.find(a.chartOptions.options, function(a) {
                if (a.id.indexOf(y) > -1)
                    return a
            });
            a.chartOptions.selection = angular.isDefined(z) ? z : a.chartOptions.options.loss_percentage,
            a.closeModal = function() {
                o.cancel()
            }
        }
        var A, B, C = [], D = !0, E = {
            value: [],
            field: "name",
            type: "string",
            operator: "in",
            display: []
        };
        a.dpi = {
            enabled: !1
        },
        a.cflowd = {
            enabled: !1
        },
        a.showQueryBuilderTimeStampInbuilt = !1;
        var F = {
            autoLoadFields: !1,
            searchCallBack: function(c) {
                c.realTime ? (g.setPrevRealtimeResponse(void 0),
                a.chartObject.realTimeLoad = !0,
                a.chartObject.asyncLoad = !1,
                a.chartObject.emptyAllSeriesData(),
                A = c,
                B && (h.cancel(B),
                B = {}),
                g.hideTableColForRealTime(a.table),
                a.chartObject.changeLoadingIndicatorState(!0),
                s()) : (h.cancel(B),
                B = {},
                a.chartObject.realTimeLoad = !1,
                a.chartObject.asyncLoad = !0,
                E.value = _.map(a.table.uiGridApi.selection.getSelectedRows(), function(a) {
                    return a.name
                }),
                E.display = _.map(a.table.uiGridApi.selection.getSelectedRows(), function(a) {
                    return {
                        "name-hostname": a["name-hostname"],
                        name: a.name
                    }
                }),
                A = g.appendFilterAggregation(c, b.params.localSystemIp, E, a.chartOptions.selection),
                a.chartInitialized ? a.chartObject.refresh(m.APP_ROUTE_STATS, A) : (a.chartObject.emptyAllSeriesData(),
                a.initializeChartSetup()),
                g.unhideTableColForRealTime(a.table),
                D || u(A.query.rules[0]),
                D = !1)
            },
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !1,
            returnFilteredObject: !0,
            enableRealTime: !(angular.isUndefined(b.params.systemIp) || angular.equals(b.params.reachability, "unreachable") || angular.equals(b.params.validity, "staging"))
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderObj = new f(F),
        a.chartObject = new d(g.getChartDefinition(),g.getChartConfig());
        var G = {
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !1,
            enableSorting: !0,
            enableTreeChildrenSelection: !0,
            tableHeightOffset: 325,
            tableName: "tunnel",
            dataUid: "name",
            selectAll: !1,
            isRowSelectable: function(a) {
                return !(a.treeLevel = "0" == a.treeLevel)
            }
        }
          , H = angular.isDefined(b.params.localSystemIp) ? {
            custom: !0,
            customTemplateUrl: "app/monitor/devices/dashboard/templates/wan/customTunnelToolbar.html"
        } : {
            custom: !1
        }
          , I = new e(G,H)
          , J = function(b) {
            var c = angular.copy(A);
            if (c.realTime) {
                a.chartObject.addSeriesNames(_.map(b, function(b) {
                    return {
                        name: b.name,
                        display: b["name-hostname"],
                        yAxis: 0,
                        axisIndexLabel: a.chartOptions.selection.axisLabel ? a.chartOptions.selection.axisLabel[0] : ""
                    }
                })),
                (angular.equals(a.chartOptions.selection.id, "octets") || angular.equals(a.chartOptions.selection.id, "latency_jitter")) && a.chartObject.addSeriesNames(_.map(b, function(b) {
                    return {
                        name: b.name,
                        display: b["name-hostname"],
                        yAxis: 1,
                        axisIndexLabel: a.chartOptions.selection.axisLabel[1]
                    }
                })),
                E.value = E.value.concat(_.pluck(b, "name"));
                var d = _.map(b, function(a) {
                    return {
                        name: a.name,
                        "name-hostname": a["name-hostname"]
                    }
                });
                E.display = E.display.concat(d.display),
                t()
            } else {
                var d = _.find(c.query.rules, function(a) {
                    return angular.equals(a.field, "name")
                });
                d.value = _.pluck(b, "name"),
                d.display = _.map(b, function(a) {
                    return {
                        name: a.name,
                        "name-hostname": a["name-hostname"]
                    }
                }),
                E.value = E.value.concat(d.value),
                E.display = E.display.concat(d.display),
                angular.equals(a.chartOptions.selection.id, "octets") || angular.equals(a.chartOptions.selection.id, "latency_jitter") ? (a.chartObject.addSeriesNames(_.map(d.display, function(b) {
                    return {
                        name: b.name,
                        display: b["name-hostname"],
                        yAxis: 0,
                        axisIndexLabel: a.chartOptions.selection.axisLabel[0]
                    }
                })),
                a.chartObject.addSeriesNames(_.map(d.display, function(b) {
                    return {
                        name: b.name,
                        display: b["name-hostname"],
                        yAxis: 1,
                        axisIndexLabel: a.chartOptions.selection.axisLabel[1]
                    }
                })),
                a.chartObject.addSeriesFromAPI([], m.APP_ROUTE_STATS, c)) : a.chartObject.addSeriesFromAPI(_.map(d.display, function(a) {
                    return {
                        name: a.name,
                        display: a["name-hostname"]
                    }
                }), m.APP_ROUTE_STATS, c)
            }
        }
          , K = function(b) {
            var c = _.uniq(_.pluck(b, "name"));
            E.value = _.difference(E.value, c),
            a.chartObject.removeSeriesNames(_.uniq(_.map(b, function(a) {
                return {
                    name: a.name,
                    display: a.display
                }
            }), "name")),
            (angular.equals(a.chartOptions.selection.id, "octets") || angular.equals(a.chartOptions.selection.id, "latency_jitter")) && a.chartObject.removeSeriesNames(_.uniq(_.map(b, function(a) {
                return {
                    name: a.name,
                    display: a.display,
                    yAxis: 1
                }
            }), "name"))
        }
          , L = function(a) {
            var b = [];
            for (var c in a)
                a[c] && b.push(c);
            return b
        }
          , M = {
            tunnelStateFilter: {
                up: !0,
                init: !0,
                down: !0
            },
            getFilterTableState: function(b) {
                var c, d = L(this.tunnelStateFilter);
                c = 3 == d.length ? angular.copy(C) : _.filter(C, function(a) {
                    return d.indexOf(a.state) > -1
                }),
                a.table.refreshTableData(c),
                a.table.taggedSearchObject.searchData(a.table.taggedSearchObject.tags),
                l(function() {
                    a.table.uiGridApi.grid.refresh()
                })
            },
            getStateCount: function(b) {
                return _.filter(a.table.uiGridApi.grid.rows, function(a) {
                    return a.visible && angular.isDefined(a.entity.state) && angular.equals(a.entity.state.toLowerCase(), b)
                }).length
            },
            selectTreeNode: function(b, c) {
                a.table.uiGridApi.selection.toggleRowSelection(b.entity, c);
                var d = a.table.uiGridApi.selection.getSelectedRows().filter(function(b) {
                    return !a.chartObject.filtersSelected.series[0].values.some(function(a) {
                        return b.name == a.name
                    })
                });
                if (d.length > 0) {
                    var e = a.table.uiGridApi.selection.getSelectedRows().length;
                    e <= m.MAX_WAN_SERIES_ALLOWED ? i(J, 1e3, !1, d) : Math.abs(d.length - e) < m.MAX_WAN_SERIES_ALLOWED ? (angular.forEach(d.slice(d.length - (e - m.MAX_WAN_SERIES_ALLOWED), d.length), function(a) {
                        I.uiGridApi.selection.unSelectRow(a)
                    }),
                    d = d.slice(0, d.length - (e - m.MAX_WAN_SERIES_ALLOWED)),
                    i(J, 1e3, !1, d)) : (angular.forEach(d, function(a) {
                        I.uiGridApi.selection.unSelectRow(a)
                    }),
                    k.info("Select up to " + m.MAX_WAN_SERIES_ALLOWED + " Tunnels", 3e3))
                }
                var f = a.chartObject.filtersSelected.series[0].values.filter(function(b) {
                    return !a.table.uiGridApi.selection.getSelectedRows().some(function(a) {
                        return b.name == a.name
                    })
                });
                f.length > 0 && i(K, 1e3, !1, f)
            },
            viewApplicationDetails: function(c) {
                a.dpi.enabled ? b.go("app.monitor.devices.dashboard.applications.dpiFamily", {
                    systemIp: b.params.systemIp,
                    localSystemIp: b.params.localSystemIp,
                    deviceType: b.params.deviceType,
                    localTLOC: c.entity["local-color"],
                    remoteTLOC: c.entity.color,
                    remoteSystemIP: c.entity["system-ip"]
                }) : a.cflowd.enabled && b.go("app.monitor.devices.dashboard.applications.cflowdDestinations", {
                    systemIp: b.params.systemIp,
                    localSystemIp: b.params.localSystemIp,
                    deviceType: b.params.deviceType,
                    localTLOC: c.entity["local-color"],
                    remoteTLOC: c.entity.color,
                    remoteSystemIP: c.entity["system-ip"]
                })
            },
            isApplicationDetailsButtonEnabled: function() {
                return !!angular.isDefined(b.params.deviceType) && (a.dpi.enabled || a.cflowd.enabled)
            }
        };
        I.setPostRefreshCallback(function() {
            return !a.queryBuilderObj.options.disableUserActions && void (A.realTime ? (a.chartObject.changeLoadingIndicatorState(!0),
            a.chartObject.emptyAllSeriesData(),
            t()) : (a.chartObject.emptyAllSeriesData(),
            a.chartObject.addSeriesFromAPI([], m.APP_ROUTE_STATS, A),
            u(A.query.rules[0])))
        }),
        I.setAppScope(M),
        a.table = I,
        angular.isDefined(b.params.localSystemIp) ? j.getWidgetToEnable(b.params.localSystemIp).then(function(b) {
            angular.equals(b, "cflowd") ? a.cflowd.enabled = !0 : angular.equals(b, "dpi") && (a.dpi.enabled = !0),
            q()
        }, function(b) {
            a.showErrorSection = !0,
            a.errorMessage = b
        }) : q(),
        a.initializeChartSetup = function() {
            if (a.chartObject.setXAxisProperty(g.getChartXAxisProperty()),
            a.chartObject.setSeriesNames(g.getChartSeriesNames()),
            a.chartObject.setChartOptionsYAxis({
                title: {
                    text: a.chartOptions.selection.name
                }
            }, 0),
            a.chartObject.setSeriesCustomOptions({
                yAxisUnit: a.chartOptions.selection.yAxisUnit
            }),
            angular.isDefined(a.chartOptions.selection.properties) ? (a.chartObject.setYAxisProperty(a.chartOptions.selection.properties),
            a.chartObject.setChartOptionsYAxis({
                min: 0,
                minRange: 1,
                lineWidth: 2,
                labels: {
                    enabled: !0
                },
                opposite: !1,
                title: {
                    text: a.chartOptions.selection.title[0]
                },
                height: "45%",
                max: null
            }, 0),
            1 == a.chartObject.highChartApi.yAxis.length ? a.chartObject.highChartApi.addAxis(angular.extend(a.chartObject.chartConfig.yAxis[0], {
                top: "55%",
                height: "45%",
                offset: 0,
                title: {
                    text: a.chartOptions.selection.title[1]
                }
            })) : a.chartObject.highChartApi.yAxis[1].setTitle({
                text: a.chartOptions.selection.title[1]
            }, !1),
            a.chartObject.setChartOptionsYAxis({
                min: 0,
                minRange: 1,
                lineWidth: 2,
                labels: {
                    enabled: !0
                },
                opposite: !1,
                title: {
                    text: a.chartOptions.selection.title[1]
                },
                height: "45%",
                max: null
            }, 1),
            a.chartObject.updateSeriesAxisLabel(a.chartOptions.selection.axisLabel[0], 0),
            a.chartObject.updateSeriesAxisLabel(a.chartOptions.selection.axisLabel[1], 1)) : a.chartObject.setYAxisProperty(a.chartOptions.selection.id),
            angular.isDefined(a.chartOptions.selection.properties))
                a.chartObject.addSeriesNames(_.map(E.display, function(b) {
                    if (angular.isDefined(x))
                        var c = b.name === x;
                    return {
                        name: b.name,
                        display: b["name-hostname"],
                        visible: !angular.isDefined(c) || c,
                        yAxis: 0,
                        axisIndexLabel: a.chartOptions.selection.axisLabel[0]
                    }
                })),
                a.chartObject.addSeriesNames(_.map(E.display, function(b) {
                    if (angular.isDefined(x))
                        var c = b.name === x;
                    return {
                        name: b.name,
                        display: b["name-hostname"],
                        visible: !angular.isDefined(c) || c,
                        yAxis: 1,
                        axisIndexLabel: a.chartOptions.selection.axisLabel[1]
                    }
                })),
                a.chartObject.addSeriesFromAPI([], m.APP_ROUTE_STATS, A);
            else {
                a.chartObject.addSeriesFromAPI(_.map(E.display, function(a) {
                    if (angular.isDefined(x))
                        var b = a.name === x;
                    return {
                        name: a.name,
                        display: a["name-hostname"],
                        visible: !angular.isDefined(b) || b,
                        yAxis: 0
                    }
                }), m.APP_ROUTE_STATS, A)
            }
            a.chartInitialized = !0,
            angular.isDefined(x) && (angular.isDefined(_.find(E.display, {
                name: x
            })) || (k.error("Selected Tunnel information not available : " + x, 3e3),
            a.chartObject.changeNoDataMessageState(!0)))
        }
        ,
        a.updateCheckboxSelection = function(b) {
            g.setPrevRealtimeResponse(void 0),
            angular.isDefined(B) && (h.cancel(B),
            B = {}),
            angular.isArray(b.properties) ? (a.chartObject.setSeriesCustomOptions({
                formatDataToBytes: b.formatDataToBytes,
                yAxisUnit: b.yAxisUnit
            }),
            a.chartObject.highChartApi.yAxis[0].setTitle({
                text: b.title[0]
            }, !1),
            a.chartObject.highChartApi.yAxis[0].update({
                height: "45%",
                max: null
            }),
            a.chartObject.setChartOptionsYAxis({
                min: 0,
                minRange: 1,
                lineWidth: 2,
                labels: {
                    enabled: !0
                },
                opposite: !1,
                title: {
                    text: b.title[0]
                },
                height: "45%",
                max: null
            }, 0),
            1 == a.chartObject.highChartApi.yAxis.length ? a.chartObject.highChartApi.addAxis(angular.extend(a.chartObject.chartConfig.yAxis[0], {
                top: "55%",
                height: "45%",
                offset: 0,
                title: {
                    text: b.title[1]
                }
            })) : a.chartObject.highChartApi.yAxis[1].setTitle({
                text: b.title[1]
            }, !1),
            a.chartObject.setChartOptionsYAxis({
                min: 0,
                minRange: 1,
                lineWidth: 2,
                labels: {
                    enabled: !0
                },
                opposite: !1,
                title: {
                    text: b.title[1]
                },
                height: "45%",
                max: null
            }, 1),
            a.chartObject.updateSeriesAxisLabel(b.axisLabel[0], 0),
            a.chartObject.updateSeriesAxisLabel(b.axisLabel[1], 1),
            a.chartObject.addSeriesNames(_.map(a.chartObject.chartConfig.series, function(a) {
                return {
                    name: a.name,
                    display: a.display,
                    yAxis: 1,
                    visible: a.visible,
                    axisIndexLabel: b.axisLabel[1]
                }
            })),
            a.chartObject.setYAxisProperty(b.properties),
            A.realTime ? (a.chartObject.emptyAllSeriesData(),
            s()) : (h.cancel(B),
            B = {},
            A.aggregation.metrics = [{
                property: b.properties[0],
                type: b.aggregateBy
            }, {
                property: b.properties[1],
                type: b.aggregateBy
            }],
            a.chartObject.emptyAllSeriesData(),
            a.chartObject.addSeriesFromAPI([], m.APP_ROUTE_STATS, A))) : (a.chartObject.highChartApi.yAxis[1] && (a.chartObject.highChartApi.yAxis[1].remove(),
            a.chartObject.removeSeriesNames(_.map(a.chartObject.chartConfig.series, function(a) {
                return {
                    name: a.name,
                    display: a.display,
                    yAxis: 1
                }
            }))),
            a.chartObject.setSeriesCustomOptions({
                formatDataToBytes: b.formatDataToBytes,
                yAxisUnit: b.yAxisUnit
            }),
            a.chartObject.highChartApi.yAxis[0].setTitle({
                text: b.name
            }, !1),
            a.chartObject.highChartApi.yAxis[0].update({
                height: "100%"
            }),
            a.chartObject.setChartOptionsYAxis({
                min: 0,
                minRange: 1,
                lineWidth: 2,
                labels: {
                    enabled: !0
                },
                opposite: !1,
                title: {
                    text: b.name
                },
                height: "100%"
            }, 0),
            a.chartObject.updateSeriesAxisLabel("", 0),
            a.chartObject.setYAxisProperty(b.id),
            A.realTime ? (a.chartObject.emptyAllSeriesData(),
            s()) : (h.cancel(B),
            B = {},
            A.aggregation.metrics = [{
                property: b.id,
                type: b.aggregateBy
            }],
            a.chartObject.emptyAllSeriesData(),
            a.chartObject.refresh(m.APP_ROUTE_STATS, A)))
        }
        ,
        a.$on("$destroy", function() {
            if (angular.isDefined(b) && angular.isDefined(b.params.deviceType)) {
                var c = a.queryBuilderObj.getComponents();
                a.queryBuilderObj.setGlobalTime(g.getQueryBuilderTimeComponent(c))
            }
            a.chartObject.cancelRealTimePolling(),
            a.chartObject = {},
            h.cancel(B),
            B = {}
        })
    }
    angular.module("vManage").controller("TunnelController", a),
    a.$inject = ["$scope", "$state", "appUtil", "HighStockLineChart", "TreeBasedTable", "QueryBuilderFactory", "WANTunnelService", "$interval", "$debounce", "DeviceService", "notification", "$timeout", "monitorApiConstants", "parentWidgetParams", "$mdDialog", "AppRouteStatsTunnelService"]
}(),
function() {
    function a(a, b, c, d) {
        a.stateString = c.getStateString(b),
        a.tabs = [new d("Tloc",b.current.name.indexOf("wan.tloc") > -1,"app.monitor.devices.dashboard.wan.tloc"), new d("Tunnel",b.current.name.indexOf("wan.tunnel") > -1,"app.monitor.devices.dashboard.wan.tunnel")],
        a.activateTable = function(c, d) {
            angular.forEach(a.tabs, function(a, b) {
                a.active = b === d
            }),
            b.go(c, {
                localSystemIp: b.params.localSystemIp,
                systemIp: b.params.systemIp,
                personality: b.params.personality
            })
        }
    }
    angular.module("vManage").controller("WanController", a),
    a.$inject = ["$scope", "$state", "appUtil", "Tab"]
}(),
function() {
    function a(a, b, c, d, e) {
        if (a.stateString = c.getStateString(b),
        a.isApplicable = !1,
        angular.isDefined(b.params.deviceModel)) {
            if (a.deviceModel = b.params.deviceModel,
            a.isApplicable = e.isVEdge100WM(b.params.deviceModel),
            !a.isApplicable) {
                var f = e.isVEdge(a.deviceModel);
                f ? b.go("app.monitor.devices.dashboard.hardware_health", {
                    localSystemIp: b.params.localSystemIp,
                    systemIp: b.params.systemIp,
                    deviceModel: b.params.deviceModel
                }) : b.go("app.monitor.devices.dashboard.controlConnections", b.params)
            }
        } else
            a.deviceModel = "this device.";
        a.breadCrumb.states = [],
        a.tabs = [new d("Clients Info",b.current.name.indexOf("wlanClients.wlanClientsInfo") > -1,"app.monitor.devices.dashboard.wlanClients.wlanClientsInfo"), new d("Clients Usage",b.current.name.indexOf("wlanClients.wlanClientsUsage") > -1,"app.monitor.devices.dashboard.wlanClients.wlanClientsUsage")],
        a.activateTable = function(c, d) {
            angular.forEach(a.tabs, function(a, b) {
                a.active = b === d
            }),
            b.go(c, {
                localSystemIp: b.params.localSystemIp,
                systemIp: b.params.systemIp,
                deviceType: b.params.deviceType
            })
        }
    }
    angular.module("vManage").controller("WLANClientsController", a),
    a.$inject = ["$scope", "$state", "appUtil", "Tab", "DeviceService"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        function h(b, c) {
            var d = angular.copy(a.tableQuery);
            angular.isUndefined(c) || null === c || (d = g.filterDataQuery(d, c)),
            g.getTableData(d).then(function(c) {
                a.table.serverCallInProgress = !1,
                b ? (a.table.createColumns(g.getTableColums()),
                a.table.setTableData(c.data),
                j = !1) : (a.table.taggedSearchObject.setSearchCache(c.data),
                a.table.refreshTableData(c.data),
                a.table.taggedSearchObject.searchData())
            }, function(b) {
                a.table.serverCallInProgress = !1,
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        }
        a.stateString = c.getStateString(b),
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "wlan",
            title: "WiFi",
            state: "app.monitor.devices.dashboard.wlanDashboard"
        }, {
            name: "wlanClientsInfo",
            title: "Clients Info",
            state: "app.monitor.devices.dashboard.wlanClients.wlanClientsInfo"
        }];
        var i;
        a.tableQuery;
        var j = !0
          , k = {
            autoLoadFields: !1,
            searchCallBack: function(c) {
                a.chartObject.realTimeLoad = !1,
                a.chartObject.asyncLoad = !0,
                angular.isDefined(b.params.localSystemIp) ? c = g.appendDeviceToQuery(c, b.params.localSystemIp) : "",
                a.tableQuery = angular.copy(c),
                h(j ? !0 : !1),
                i = g.appendFilterAggregation(c),
                a.chartObject.changeLoadingIndicatorState(!0),
                g.getChartData(i).then(function(b) {
                    b.data.length > 0 ? (a.chartObject.changeNoDataMessageState(!1),
                    a.chartObject.addCategoriesFromRawData([{
                        name: "mac",
                        display: "Mac",
                        type: "column"
                    }], {
                        names: [],
                        property: "entry_time"
                    }, b)) : a.chartObject.changeNoDataMessageState(!0)
                }, function(b) {
                    a.showErrorSection = !0,
                    a.errorMessage = b
                })
            },
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !1,
            returnFilteredObject: !0,
            enableRealTime: !1
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderObj = new f(k),
        a.columnClickHandler = function(a) {
            var b, c = angular.isDefined(a.point) ? a.point : a.target, d = c.selected;
            b = d ? c.category : null,
            h(!1, b)
        }
        ,
        a.chartObject = new d(g.getChartDefinition(a.columnClickHandler),g.getChartConfig()),
        a.chartObject.setXAxisProperty("entry_time"),
        a.chartObject.setYAxisProperty(["mac"]),
        a.chartObject.setSeriesNames([{
            property: "client",
            values: []
        }]);
        var l = new e({
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !1,
            enableSorting: !0,
            tableHeightOffset: 325,
            tableName: "clientsInfo",
            dataUid: "id",
            showSelectAllOption: !1
        });
        l.setPostRefreshCallback(function() {
            a.queryBuilderObj.options.disableUserActions || h(!1)
        }),
        a.table = l,
        g.getClientsInfoQueryFields().then(function(b) {
            a.queryBuilderObj.setFieldsData([_.find(b.data, {
                property: "entry_time"
            })]),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }, function(b) {
            a.showErrorSection = !0,
            a.errorMessage = b
        }),
        a.$on("$destroy", function() {
            if (angular.isDefined(b) && angular.isDefined(b.params.deviceType)) {
                var c = a.queryBuilderObj.getComponents();
                a.queryBuilderObj.setGlobalTime(g.getQueryBuilderTimeComponent(c))
            }
            a.chartObject = {}
        })
    }
    angular.module("vManage").controller("WLANClientsInfoController", a),
    a.$inject = ["$scope", "$state", "appUtil", "HighStockBarChart", "Table", "QueryBuilderFactory", "WLANClientsInfoService", "$filter"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l) {
        function m(b) {
            var c = a.table.uiGridApi.selection.getSelectedRows();
            return angular.forEach(c, function(a) {
                _.findIndex(b.data, {
                    mac: a.mac
                }) < 0 && (a.total_bytes = "",
                a.interface = "",
                a.entry_time = "",
                b.data.push(a))
            }),
            b
        }
        function n(b) {
            a.table.taggedSearchObject.setSearchCache(b.data),
            a.table.refreshTableData(b.data),
            a.table.taggedSearchObject.searchData()
        }
        function o(b) {
            t.value = _.map(a.table.uiGridApi.selection.getSelectedRows(), function(a) {
                return a.mac
            }),
            p = g.appendChartFilterAggregation(b, t),
            a.chartObject.emptyAllSeriesData(),
            a.chartObject.addSeriesNames(_.map(t.value, function(a) {
                return {
                    name: a,
                    display: a,
                    yAxis: 0
                }
            })),
            a.chartObject.addSeriesFromAPI([], l.WLAN_CLIENTS_USAGE_AGGREGATION, p),
            s = !1
        }
        a.stateString = c.getStateString(b),
        a.isApplicable = !1,
        a.isTableSet = !1,
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "wlan",
            title: "WiFi",
            state: "app.monitor.devices.dashboard.wlanDashboard"
        }, {
            name: "wlanClientsUsage",
            title: "Clients Usage",
            state: "app.monitor.devices.dashboard.wlanClients.wlanClientsUsage"
        }];
        var p, q, r, s = !0, t = {
            value: [],
            field: "mac",
            type: "string",
            operator: "in"
        }, u = {
            autoLoadFields: !1,
            searchCallBack: function(c) {
                angular.isDefined(b.params.localSystemIp) ? c = g.appendDeviceToQuery(c, b.params.localSystemIp) : "";
                var d = angular.copy(c)
                  , e = angular.copy(c);
                a.chartObject.realTimeLoad = !1,
                a.chartObject.asyncLoad = !0,
                q = g.appendTableFilterAggregation(d),
                r = g.getUsageData(q),
                k.all([r]).then(function(b) {
                    var c = b[0];
                    c = m(c),
                    a.isTableSet ? (n(c),
                    o(e)) : (a.table.createColumns(g.getUsageTableColumns()),
                    a.table.setTableData(c.data),
                    h(function() {
                        g.setChartSeriesNames(null, []);
                        for (var b = 0, c = a.table.uiGridApi.grid.getVisibleRows(), d = 0; d < c.length && (a.table.uiGridApi.selection.toggleRowSelection(c[d].entity),
                        t.value.push(c[d].entity.mac),
                        b++,
                        b != l.MAX_WLAN_SERIES_ALLOWED); d++)
                            ;
                        o(e)
                    }, 0, 1),
                    a.isTableSet = !0)
                }, function(a) {
                    j.error("Error loading client usage JSON")
                })
            },
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !1,
            returnFilteredObject: !0,
            enableRealTime: !1
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderObj = new f(u),
        a.chartObject = new d(g.getChartDefinition(),g.getChartConfig()),
        a.chartObject.setXAxisProperty(g.getChartXAxisProperty()),
        a.chartObject.setYAxisProperty(g.getChartYAxisProperty()),
        a.chartObject.setSeriesNames(g.getChartSeriesNames());
        var v = new e({
            autoLoad: !0,
            columnResizing: !0,
            singleSelect: !1,
            multiSelect: !0,
            enableSorting: !0,
            tableHeightOffset: 325,
            tableName: "Client Usage",
            dataUid: "mac",
            showSelectAllOption: !1,
            isRowSelectable: function(a) {
                return !0
            }
        })
          , w = function(b) {
            var c = angular.copy(p)
              , d = _.find(c.query.rules, function(a) {
                return angular.equals(a.field, "mac")
            });
            d.value = _.pluck(b, "mac"),
            t.value = t.value.concat(d.value),
            a.chartObject.addSeriesNames(_.map(d.value, function(a) {
                return {
                    name: a,
                    display: a,
                    yAxis: 0
                }
            })),
            a.chartObject.addSeriesFromAPI([], l.WLAN_CLIENTS_USAGE_AGGREGATION, c)
        }
          , x = function(b) {
            var c = _.pluck(b, "name");
            t.value = _.difference(t.value, c),
            a.chartObject.removeSeriesNames(_.map(b, function(a) {
                return {
                    name: a.name,
                    display: a.name,
                    yAxis: 0
                }
            }))
        }
          , y = {
            selectTreeNode: function(b, c) {
                if (s)
                    return !1;
                var d = _.filter(a.chartObject.filtersSelected.series[0].values, {
                    yAxis: 0
                })
                  , e = a.table.uiGridApi.selection.getSelectedRows().filter(function(a) {
                    return !d.some(function(b) {
                        return a.mac == b.name
                    })
                });
                if (e.length > 0) {
                    var f = a.table.uiGridApi.selection.getSelectedRows().length;
                    f <= l.MAX_WLAN_SERIES_ALLOWED ? i(w, 1e3, !1, e) : Math.abs(e.length - f) < l.MAX_WLAN_SERIES_ALLOWED ? (angular.forEach(e.slice(e.length - (f - l.MAX_WLAN_SERIES_ALLOWED), e.length), function(a) {
                        v.uiGridApi.selection.unSelectRow(a)
                    }),
                    e = e.slice(0, e.length - (f - l.MAX_WLAN_SERIES_ALLOWED)),
                    i(w, 1e3, !1, e)) : (angular.forEach(e, function(a) {
                        v.uiGridApi.selection.unSelectRow(a)
                    }),
                    j.info("Select up to " + l.MAX_WLAN_SERIES_ALLOWED + " Clients", 3e3))
                }
                var g = d.filter(function(b) {
                    return !a.table.uiGridApi.selection.getSelectedRows().some(function(a) {
                        return b.name == a.mac
                    })
                });
                g.length > 0 && i(x, 1e3, !1, g)
            }
        };
        v.setPostRefreshCallback(function() {
            a.queryBuilderObj.options.disableUserActions || k.all([r]).then(function(b) {
                a.table.serverCallInProgress = !1,
                n(b[0])
            }, function(b) {
                a.table.serverCallInProgress = !1,
                j.error("Error loading client usage JSON")
            })
        }),
        v.setOnRowSelectionCallback(y.selectTreeNode),
        v.setAppScope(y),
        a.table = v,
        g.getBridgeMacQueryFields().then(function(b) {
            a.queryBuilderObj.setFieldsData([_.find(b.data, {
                property: "entry_time"
            })]),
            a.queryBuilderObj.loadQueryBuilderWithFieldsData()
        }, function(b) {
            a.showErrorSection = !0,
            a.errorMessage = b
        }),
        a.$on("$destroy", function() {
            if (angular.isDefined(b) && angular.isDefined(b.params.deviceType)) {
                var c = a.queryBuilderObj.getComponents();
                a.queryBuilderObj.setGlobalTime(g.getQueryBuilderTimeComponent(c))
            }
            a.chartObject.removeAllSeriesNames(),
            a.chartObject = {}
        })
    }
    angular.module("vManage").controller("WLANClientsUsageController", a),
    a.$inject = ["$scope", "$state", "appUtil", "HighStockStackedAreaChart", "Table", "QueryBuilderFactory", "WLANClientsUsageService", "$interval", "$debounce", "notification", "$q", "monitorApiConstants"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i) {
        if (a.stateString = c.getStateString(b),
        a.loadingData = !0,
        a.isApplicable = !1,
        a.interfacesConfigured = !1,
        a.naReason = "WIFI is not applicable for ",
        angular.isDefined(b.params.systemIp) && (a.systemIp = b.params.systemIp),
        angular.isDefined(b.params.localSystemIp) && (a.localSystemIp = b.params.localSystemIp),
        angular.isDefined(b.params.deviceModel)) {
            if (a.deviceModel = b.params.deviceModel,
            a.isApplicable = i.isVEdge100WM(b.params.deviceModel),
            !a.isApplicable) {
                var j = i.isVEdge(a.deviceModel);
                j ? b.go("app.monitor.devices.dashboard.hardware_health", {
                    systemIp: b.params.systemIp,
                    localSystemIp: b.params.localSystemIp,
                    deviceModel: b.params.deviceModel
                }) : b.go("app.monitor.devices.dashboard.controlConnections", b.params)
            }
        } else
            a.deviceModel = "this device.";
        a.breadCrumb.states = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "wlan",
            title: "WiFi",
            state: "app.monitor.devices.dashboard.wlanDashboard"
        }],
        a.viewClientInfo = function() {
            b.go("app.monitor.devices.dashboard.wlanClients.wlanClientsInfo", b.params)
        }
        ,
        a.viewClientUsage = function() {
            b.go("app.monitor.devices.dashboard.wlanClientsUsage", b.params)
        }
        ;
        var k;
        a.chartServerCall = !0;
        var l = {
            autoLoadFields: !1,
            searchCallBack: function(d) {
                if (a.noData = !1,
                a.chartServerCall = !0,
                a.chartObject.realTimeLoad = !1,
                a.chartObject.asyncLoad = !0,
                a.isApplicable && !c.isUndefinedOrEmpty(a.interfaces)) {
                    a.chartOptions = {
                        options: e.getChartOptions()
                    },
                    a.chartOptions.selection = a.chartOptions.options.kbps;
                    var f = e.getInterfaceSeriesNames(a.vapInterfaces, a.chartOptions.selection.axisLabel[0], 0)
                      , g = e.getInterfaceSeriesNames(a.vapInterfaces, a.chartOptions.selection.axisLabel[1], 1);
                    k = e.appendFilterAggregation(d, b.params.localSystemIp, a.vapInterfaces),
                    a.chartObject.emptyAllSeriesData(),
                    a.chartObject.addSeriesNames(f),
                    a.chartObject.addSeriesNames(g),
                    a.chartObject.addSeriesFromAPI([], h.WLAN_BRIDGE_INTERFACE_AGGREGATION, k)
                }
            },
            isDynamicQuery: !0,
            renderViewAfterInitComplete: !0,
            enableFilteredTags: !1,
            returnFilteredObject: !0,
            enableRealTime: !1
        };
        a.queryBuilderViewObj = {},
        a.queryBuilderObj = new g(l),
        a.chartObject = new f(e.getChartDefinition(),e.getChartConfig()),
        a.chartObject.setXAxisProperty(e.getChartXAxisProperty()),
        a.chartObject.setYAxisProperty(e.getChartYAxisProperty()),
        a.chartObject.setSeriesNames(e.getChartSeriesNames()),
        e.getBridgeInterfaceQueryFields().then(function(b) {
            a.queryBuilderObj.setFieldsData([_.find(b.data, {
                property: "entry_time"
            })]);
            var f = e.getRadio(a.systemIp)
              , g = e.getInterfaces(a.systemIp);
            d.all([f, g]).then(function(b) {
                var d = b[0]
                  , e = b[1];
                c.isUndefinedOrEmpty(d.data) ? (a.naReason = "WiFi is not configured on this ",
                a.isApplicable = !1) : a.radios = d.data[0],
                c.isUndefinedOrEmpty(e.data) ? a.interfacesConfigured = !1 : (a.interfacesConfigured = !0,
                a.interfaces = e.data,
                a.vapInterfaces = _.map(e.data, function(a) {
                    return a.vap
                })),
                a.loadingData = !1,
                a.queryBuilderObj.loadQueryBuilderWithFieldsData()
            }, function(b) {
                a.naReason = "Device Unreachable. Device Model: ",
                a.isApplicable = !1,
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        }, function(b) {
            a.showErrorSection = !0,
            a.errorMessage = b
        }),
        a.$on("$destroy", function() {
            a.chartObject.removeAllSeriesNames(),
            a.chartObject = {}
        })
    }
    angular.module("vManage").controller("WLANDashboardController", a),
    a.$inject = ["$scope", "$state", "appUtil", "$q", "WLANService", "HighStockLineChart", "QueryBuilderFactory", "monitorApiConstants", "DeviceService"]
}(),
angular.module("vManage").directive("controlConnectionNetworkGraph", controlConnectionNetworkGraph),
controlConnectionNetworkGraph.$inject = ["$compile", "$templateCache"],
angular.module("vManage").directive("speedometer", speedometer),
speedometer.$inject = ["$compile", "$templateCache"],
angular.module("vManage").directive("traceroutePath", traceroutePath),
traceroutePath.$inject = ["$compile", "$templateCache"],
function() {
    function a(a, b, c, d, e, f, g) {
        var h, i, j, k, l, m, n, o, p, q = {
            field: [{
                property: "dest_ip",
                size: 200,
                sequence: 1
            }],
            metrics: [{
                property: "total_bytes",
                type: "sum",
                order: "desc"
            }]
        }, r = {
            field: [{
                property: "dest_ip",
                sequence: 1
            }],
            metrics: [{
                property: "total_bytes",
                type: "sum"
            }]
        }, s = {
            metrics: [{
                property: "total_bytes",
                type: "sum",
                order: "desc"
            }]
        }, t = {
            value: [],
            field: "dest_ip",
            type: "string",
            operator: "in"
        }, u = {
            value: ["Optimized"],
            field: "tcpopt",
            type: "string",
            operator: "equal"
        }, v = {
            columns: [{
                property: "dest_ip",
                title: "Flow Destination",
                dataType: "string",
                hideable: !1,
                isDisplay: !0,
                display: "destination-ip",
                width: "auto"
            }, {
                property: "total_bytes",
                title: "Usage",
                dataType: "number",
                display: "formatBytes",
                isDisplay: !0,
                isSearch: !1,
                width: 200,
                sort: {
                    direction: "desc",
                    priority: 0
                }
            }, {
                property: "usageInPercentage",
                title: "Percentage of Total Traffic",
                dataType: "number",
                isDisplay: !0,
                isSearch: !1,
                display: "usage-percentage",
                width: 250
            }]
        };
        return {
            getTopApplicationsData: function(a, b) {
                return c.post(a, b)
            },
            setAPIObject: function(a) {
                h = a
            },
            getAPIObject: function() {
                return h
            },
            returnTableColumns: function(a) {
                return v.columns[2].title = a ? "Percentage of TCP-Optimized Traffic" : "Percentage of Total Traffic",
                v.columns
            },
            appendAggregationFilterForTable: function(a) {
                return a.aggregation = angular.copy(q),
                a
            },
            appendTotalAggregationFilter: function(a) {
                return a.aggregation = angular.copy(s),
                a
            },
            appendAggregationFilterForChart: function(a, b) {
                var c = angular.copy(r);
                return angular.isDefined(b) && b > 0 && (c.field[0].size = b),
                a.aggregation = c,
                a
            },
            appendTCPOptFilter: function(a) {
                return g.checkNestedProperty(a, "query", "rules") ? (_.findIndex(a.query.rules, {
                    field: "tcpopt"
                }) < 0 && a.query.rules.push(u),
                a) : a
            },
            getRawQueryObj: function() {
                return angular.copy(t)
            },
            setTotalUsage: function(a) {
                i = a[0].total_bytes
            },
            resetTotalUsage: function() {
                i = void 0
            },
            getTotalUsage: function() {
                return i
            },
            setTableSelections: function(a) {
                j = a
            },
            getTableSelections: function() {
                return j
            },
            setChartSeries: function(a) {
                k = angular.copy(a)
            },
            getChartSeries: function() {
                return k
            },
            setQueryBuilderCurrentState: function(a) {
                l = a
            },
            getQueryBuilderCurrentState: function() {
                return l
            },
            setQueryBuilderOriginalState: function(a) {
                m = a
            },
            getQueryBuilderOriginalState: function() {
                return m
            },
            getQueryBuilderTimeComponent: function() {
                var a, b;
                return a = _.findIndex(l, {
                    property: "entry_time"
                }),
                a > -1 && (b = l.splice(a, 1)[0]),
                angular.isDefined(b) ? b : void 0
            },
            setFilteredObject: function(a) {
                n = a
            },
            getFilteredObject: function() {
                return angular.copy(n)
            },
            setAllSeriesVisible: function(a) {
                angular.forEach(a.chartConfig.series, function(a) {
                    a.visible = !0
                })
            },
            getTotalChartData: function() {
                return angular.copy(o)
            },
            setTotalChartData: function(a) {
                o = a
            },
            resetTotalChartData: function() {
                o = void 0
            },
            getTableQueryObject: function(a) {
                return angular.copy(p)
            },
            setTableQueryObject: function(a) {
                p = a
            },
            formatFieldsData: function(a, b, c, d, e) {
                var g, h = angular.copy(a);
                return f.appendDeviceObjectToFieldsObj(h),
                f.appendLocalColorObjectToFieldsObj(h),
                f.appendRemoteColorObjectToFieldsObj(h),
                f.appendDestinationSystemIPObjectToFieldsObj(h),
                g = _.findIndex(h, {
                    property: "dest_ip"
                }),
                g > -1 && h.splice(g, 1),
                g = _.findIndex(h, {
                    property: "dest_port"
                }),
                g > -1 && h.splice(g, 1),
                g = _.findIndex(h, {
                    property: "vdevice_name"
                }),
                g > -1 && (h[g].isHidden = !0,
                h[g].defaultValue = b),
                angular.isDefined(c) && (g = _.findIndex(h, {
                    property: "local_color"
                }),
                g > -1 && (h[g].defaultValue = c)),
                angular.isDefined(d) && (g = _.findIndex(h, {
                    property: "remote_color"
                }),
                g > -1 && (h[g].defaultValue = d)),
                angular.isDefined(e) && (g = _.findIndex(h, {
                    property: "remote_system_ip"
                }),
                g > -1 && (h[g].defaultValue = e)),
                h
            },
            getTopApplicationsFieldsData: function(f, g, h, i) {
                var j, k, l = a.defer(), m = this;
                return j = e.getTopApplicationsCFLOWDFieldsData(),
                angular.isDefined(j) ? (k = m.formatFieldsData(j, f, g, h, i),
                l.resolve(k)) : c.get(d.TOP_APPLICATION_CFLOWD_FIELDS_URL).then(function(a) {
                    e.setTopApplicationsCFLOWDFieldsData(a.data),
                    k = m.formatFieldsData(a.data, f, g, h, i),
                    l.resolve(k)
                }, function() {
                    b.info("Error while retrieving fields data for cflowd"),
                    l.reject([])
                }),
                l.promise
            },
            getChartConfig: function() {
                var a, b;
                return a = {
                    name: "",
                    zoom: !0,
                    filtersSelected: {
                        xAxis: ["entry_time"],
                        yAxis: ["total_bytes"],
                        series: ["dest_ip"]
                    },
                    asyncLoad: !0,
                    formatDataToBytes: !0,
                    fillZeros: !0,
                    autoLoad: !1
                },
                b = {
                    title: {
                        text: ""
                    },
                    xAxis: {
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: ""
                        }
                    },
                    yAxis: {
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: "Usage"
                        }
                    }
                },
                [a, b]
            },
            getQueryBuilderConfig: function(a, b) {
                return {
                    autoLoadFields: !1,
                    searchCallBack: a,
                    isDynamicQuery: !0,
                    renderViewAfterInitComplete: !0,
                    fieldsData: b,
                    enableFilteredTags: !0,
                    fieldCustomizationsForDataTypeURL: [{
                        property: "vpn_id",
                        enable: !0,
                        addAllForFieldTypeURL: !0,
                        appendStringToTheList: !0,
                        stringVal: "VPN"
                    }]
                }
            },
            selectDefaultDestinations: function(a) {
                var b;
                for (a.uiGridApi.grid.modifyRows(a.data),
                b = 0; b < 6; b++)
                    a.uiGridApi.selection.selectRow(a.data[b])
            },
            selectCachedDestinations: function(a, b) {
                a.uiGridApi.grid.modifyRows(a.data),
                _.each(b, function(b) {
                    var c = _.findIndex(a.data, {
                        dest_ip: b.dest_ip
                    });
                    a.uiGridApi.selection.selectRow(a.data[c])
                })
            },
            mergeTableData: function(a, b) {
                return f.mergeByProperty(b, a, "dest_ip", "total_bytes"),
                b
            },
            resetVariables: function() {
                p = void 0
            }
        }
    }
    angular.module("vManage").factory("CFLOWDDestinationsService", a),
    a.$inject = ["$q", "$log", "restService", "monitorApiConstants", "tenantDashboardService", "DeviceService", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h, i, j, k, l, m = {
            field: [{
                property: "src_ip",
                size: 200,
                sequence: 1
            }],
            metrics: [{
                property: "total_bytes",
                type: "sum",
                order: "desc"
            }]
        }, n = {
            value: ["Optimized"],
            field: "tcpopt",
            type: "string",
            operator: "equal"
        }, o = {
            metrics: [{
                property: "total_bytes",
                type: "sum",
                order: "desc"
            }]
        }, p = {
            columns: [{
                property: "src_ip",
                title: "Flow Source",
                dataType: "string",
                hideable: !1,
                isDisplay: !0,
                display: "source-ip",
                width: "auto"
            }, {
                property: "total_bytes",
                title: "Usage",
                dataType: "number",
                display: "formatBytes",
                isDisplay: !0,
                isSearch: !1,
                width: 200,
                sort: {
                    direction: "desc",
                    priority: 0
                }
            }, {
                property: "usageInPercentage",
                title: "Percentage of Total Traffic",
                dataType: "number",
                isDisplay: !0,
                display: "usage-percentage",
                isSearch: !1,
                width: 250
            }]
        };
        return {
            getTopApplicationsData: function(a, b) {
                return c.post(a, b)
            },
            returnTableColumns: function(a) {
                return p.columns[2].title = a ? "Percentage of TCP-Optimized Traffic" : "Percentage of Total Traffic",
                p.columns
            },
            appendAggregationFilterForSources: function(a) {
                return a.aggregation = angular.copy(m),
                a
            },
            appendTotalAggregationFilter: function(a) {
                return a.aggregation = angular.copy(o),
                a
            },
            appendTCPOptFilter: function(a) {
                return g.checkNestedProperty(a, "query", "rules") ? (_.findIndex(a.query.rules, {
                    field: "tcpopt"
                }) < 0 && a.query.rules.push(n),
                a) : a
            },
            setTotalUsage: function(a) {
                i = a[0].total_bytes
            },
            resetTotalUsage: function() {
                i = 0
            },
            getTotalUsage: function() {
                return i
            },
            setAPIObject: function(a) {
                h = a
            },
            getAPIObject: function() {
                return h
            },
            setQueryBuilderCurrentState: function(a) {
                j = a
            },
            getQueryBuilderCurrentState: function() {
                return j
            },
            setQueryBuilderOriginalState: function(a) {
                k = a
            },
            getQueryBuilderOriginalState: function() {
                return k
            },
            getQueryBuilderTimeComponent: function() {
                var a, b;
                return a = _.findIndex(j, {
                    property: "entry_time"
                }),
                a > -1 && (b = j.splice(a, 1)[0]),
                angular.isDefined(b) ? b : void 0
            },
            setFilteredObject: function(a) {
                l = a
            },
            getFilteredObject: function() {
                return angular.copy(l)
            },
            formatFieldsData: function(a, b, c) {
                f.appendDeviceObjectToFieldsObj(a),
                f.appendLocalColorObjectToFieldsObj(a),
                f.appendDestinationIPObjectToFieldsObj(a),
                f.appendRemoteColorObjectToFieldsObj(a),
                f.appendDestinationSystemIPObjectToFieldsObj(a);
                var d;
                return d = _.findIndex(a, {
                    property: "dest_ip"
                }),
                d > -1 && (a[d].isHidden = !0,
                a[d].defaultValue = c),
                d = _.findIndex(a, {
                    property: "dest_port"
                }),
                d > -1 && a.splice(d, 1),
                d = _.findIndex(a, {
                    property: "vdevice_name"
                }),
                d > -1 && (a[d].isHidden = !0,
                a[d].defaultValue = b),
                a
            },
            getTopApplicationsFieldsData: function(f, g) {
                var h, i, j, k = a.defer(), l = this;
                return h = e.getTopApplicationsCFLOWDFieldsData(),
                angular.isDefined(h) ? (i = angular.copy(h),
                j = l.formatFieldsData(i, f, g),
                k.resolve(j)) : c.get(d.TOP_APPLICATION_CFLOWD_FIELDS_URL).then(function(a) {
                    e.setTopApplicationsCFLOWDFieldsData(a.data),
                    i = angular.copy(a.data),
                    j = l.formatFieldsData(i, f, g),
                    k.resolve(j)
                }, function() {
                    b.info("Error while retrieving fields data for cflowd"),
                    k.reject([])
                }),
                k.promise
            },
            getChartConfig: function() {
                var a, b;
                return a = {
                    name: "topFlows",
                    zoom: !0,
                    filtersSelected: {
                        xAxis: ["src_ip"],
                        yAxis: ["total_bytes"],
                        series: []
                    },
                    formatDataToBytes: !0,
                    replaceToolTipTextWithYAxisTitleText: !0
                },
                b = {
                    options: {
                        tooltip: {
                            formatter: function() {
                                var a = "";
                                return a += "<b>" + this.points[0].key + "<b><br/>",
                                a += '<span style="color:' + this.points[0].color + '">■    </span>',
                                a += "<span>Total Bytes:  </span>",
                                a += "<span>" + g.formatBytes(this.y, !0) + "</span>",
                                a += "<br/>"
                            }
                        }
                    },
                    title: {
                        text: ""
                    },
                    xAxis: {
                        type: "category",
                        labels: {
                            enabled: !0,
                            formatter: function() {
                                return this.value
                            }
                        },
                        title: {
                            text: "Flow Source"
                        }
                    },
                    yAxis: {
                        type: "logarithmic",
                        min: .1,
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: "Usage"
                        }
                    }
                },
                [a, b]
            },
            resetVariables: function() {
                l = void 0
            },
            filterSystemIP: function(a, b) {
                c.get(d.DEVICE_BFD_LIVE_STATS + b).then(function(b) {
                    var c = Object.keys(_.groupBy(b.data, function(a) {
                        return a["system-ip"]
                    }))
                      , d = _.find(a, {
                        property: "remote_system_ip"
                    });
                    d && c && (d.componentTypeEnumOptions = _.filter(d.componentTypeEnumOptions, function(a) {
                        return c.indexOf(a.key) > -1
                    }))
                })
            }
        }
    }
    angular.module("vManage").factory("CFLOWDSourcesService", a),
    a.$inject = ["$q", "$log", "restService", "monitorApiConstants", "tenantDashboardService", "DeviceService", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h, i, j, k, l, m = {
            field: [{
                property: "source_ip",
                size: 200,
                sequence: 1
            }],
            metrics: [{
                property: "octets",
                type: "sum",
                order: "desc"
            }]
        }, n = {
            metrics: [{
                property: "octets",
                type: "sum",
                order: "desc"
            }]
        }, o = {
            field: [{
                property: "source_ip",
                size: 25,
                sequence: 1
            }],
            metrics: [{
                property: "octets",
                type: "sum",
                order: "desc"
            }]
        }, p = {
            field: [{
                property: "local_color",
                size: 25,
                sequence: 1
            }],
            metrics: [{
                property: "octets",
                type: "sum",
                order: "desc"
            }]
        }, q = {
            value: [],
            field: "family",
            type: "string",
            operator: "in"
        }, r = {
            value: [],
            field: "family",
            type: "string",
            operator: "in"
        }, s = {
            value: [],
            field: "application",
            type: "string",
            operator: "in"
        }, t = {
            columns: [{
                property: "source_ip",
                title: "Source IP",
                hideable: !1,
                dataType: "string",
                isDisplay: !0,
                width: "auto"
            }, {
                property: "octets",
                title: "Usage",
                dataType: "number",
                isDisplay: !0,
                isSearch: !1,
                display: "formatBytes",
                width: 200,
                sort: {
                    direction: "desc",
                    priority: 0
                }
            }, {
                property: "detailUsage",
                title: "Percentage of Total Traffic",
                dataType: "number",
                isDisplay: !0,
                isSearch: !1,
                display: "details-progress",
                width: 250
            }]
        };
        return {
            getTopApplicationsData: function(a, b) {
                return c.post(a, b)
            },
            returnTableColumns: function() {
                return t.columns
            },
            appendTableHeader: function(a) {
                return a.header = angular.copy(t),
                a
            },
            appendFamilyFilter: function(a, b) {
                var c = angular.copy(r);
                return c.value.push(b),
                a.query.rules.push(c),
                a
            },
            appendApplicationFilter: function(a, b) {
                var c = angular.copy(s);
                return c.value.push(b),
                a.query.rules.push(c),
                a
            },
            appendAggregationFilterforFlowsChart: function(a) {
                return a.aggregation = angular.copy(o),
                a
            },
            appendAggregationFilterforFlowsTable: function(a) {
                return a.aggregation = angular.copy(m),
                a
            },
            appendAggregationFilterforTLOCChart: function(a) {
                return a.aggregation = angular.copy(p),
                a
            },
            appendTotalAggregationFilter: function(a) {
                return a.aggregation = angular.copy(n),
                a
            },
            getRawQueryObj: function() {
                return angular.copy(q)
            },
            setAPIObject: function(a) {
                h = a
            },
            getAPIObject: function() {
                return h
            },
            setQueryBuilderCurrentState: function(a) {
                i = a
            },
            getQueryBuilderCurrentState: function() {
                return i
            },
            setQueryBuilderOriginalState: function(a) {
                j = a
            },
            getQueryBuilderOriginalState: function() {
                return j
            },
            getQueryBuilderTimeComponent: function() {
                var a, b;
                return a = _.findIndex(i, {
                    property: "entry_time"
                }),
                a > -1 && (b = i.splice(a, 1)[0]),
                angular.isDefined(b) ? b : void 0
            },
            setTotalUsage: function(a) {
                k = a[0].octets
            },
            getTotalUsage: function(a) {
                return k
            },
            resetTotalUsage: function() {
                k = 0
            },
            setFilteredObject: function(a) {
                l = a
            },
            getFilteredObject: function() {
                return angular.copy(l)
            },
            formatFieldsData: function(a, b) {
                var c, d = angular.copy(a);
                return e.appendDeviceObjectToFieldsObj(d),
                e.appendLocalColorObjectToFieldsObj(d),
                e.appendRemoteColorObjectToFieldsObj(d),
                e.appendDestinationSystemIPObjectToFieldsObj(d),
                c = _.findIndex(d, {
                    property: "application"
                }),
                c > -1 && d.splice(c, 1),
                c = _.findIndex(d, {
                    property: "vdevice_name"
                }),
                c > -1 && (d[c].isHidden = !0,
                d[c].defaultValue = b),
                d
            },
            getTopApplicationsFieldsData: function(e) {
                var g, h, i, j = a.defer(), k = this;
                return g = f.getTopApplicationsDPIFieldsData(),
                angular.isDefined(g) ? (h = angular.copy(g),
                i = k.formatFieldsData(h, e),
                j.resolve(i)) : c.get(d.TOP_APPLICATION_FIELDS_URL).then(function(a) {
                    f.setTopApplicationsDPIFieldsData(a.data),
                    h = angular.copy(a.data),
                    i = k.formatFieldsData(h, e),
                    j.resolve(i)
                }, function() {
                    b.info("Error while retrieving fields data for TLOC"),
                    j.reject([])
                }),
                j.promise
            },
            getChartConfig: function() {
                var a, b;
                return a = {
                    name: "topFlows",
                    zoom: !0,
                    filtersSelected: {
                        xAxis: ["source_ip"],
                        yAxis: ["octets"],
                        series: []
                    },
                    formatDataToBytes: !0,
                    replaceToolTipTextWithYAxisTitleText: !0
                },
                b = {
                    options: {
                        tooltip: {
                            formatter: function() {
                                var a = "";
                                return a += "<b>" + this.points[0].key + "<b><br/>",
                                a += '<span style="color:' + this.points[0].color + '">■    </span>',
                                a += "<span>octets:  </span>",
                                a += "<span>" + g.formatBytes(this.y, !0) + "</span>",
                                a += "<br/>"
                            }
                        }
                    },
                    title: {
                        text: ""
                    },
                    xAxis: {
                        type: "category",
                        labels: {
                            enabled: !0,
                            formatter: function() {
                                return this.value
                            }
                        },
                        title: {
                            text: "Source IP"
                        }
                    },
                    yAxis: {
                        type: "logarithmic",
                        min: .1,
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: "Usage"
                        }
                    }
                },
                [a, b]
            },
            getPieChartConfig: function() {
                var a, b;
                return a = {
                    name: "TLOC",
                    filtersSelected: {
                        name: ["local_color"],
                        yAxis: ["octets"]
                    },
                    formatDataToBytes: !0
                },
                b = {
                    title: {
                        text: ""
                    }
                },
                [a, b]
            },
            resetVariables: function() {
                l = void 0
            }
        }
    }
    angular.module("vManage").constant("TopApplicationsConstants", {
        DEFAULT_FEATURE_NAME: "dpi"
    }),
    angular.module("vManage").factory("DpiApplicationDetailService", a),
    a.$inject = ["$q", "$log", "restService", "monitorApiConstants", "DeviceService", "tenantDashboardService", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h, i, j, k, l, m, n, o, p, q = {
            field: [{
                property: "family",
                size: 200,
                sequence: 1
            }],
            metrics: [{
                property: "octets",
                type: "sum",
                order: "desc"
            }]
        }, r = {
            field: [{
                property: "family",
                sequence: 1
            }],
            metrics: [{
                property: "octets",
                type: "sum"
            }]
        }, s = {
            metrics: [{
                property: "octets",
                type: "sum",
                order: "desc"
            }]
        }, t = {
            value: [],
            field: "family",
            type: "string",
            operator: "in"
        }, u = {
            columns: [{
                property: "family",
                title: "Application Family",
                hideable: !1,
                dataType: "string",
                isDisplay: !0,
                display: "link-family",
                width: "auto"
            }, {
                property: "octets",
                title: "Usage",
                dataType: "number",
                isDisplay: !0,
                isSearch: !1,
                display: "formatBytes",
                width: 200,
                sort: {
                    direction: "desc",
                    priority: 0
                }
            }, {
                property: "familyUsage",
                title: "Percentage of Total Traffic",
                dataType: "number",
                isDisplay: !0,
                isSearch: !1,
                display: "family-progress",
                width: 250
            }]
        };
        return {
            getTopApplicationsData: function(a, b) {
                return c.post(a, b)
            },
            setAPIObject: function(a) {
                h = a
            },
            getAPIObject: function() {
                return h
            },
            returnTableColumns: function() {
                return u.columns
            },
            appendAggregationFilter: function(a) {
                return a.aggregation = angular.copy(q),
                a
            },
            appendTotalAggregationFilter: function(a) {
                return a.aggregation = angular.copy(s),
                a
            },
            appendAggregationFilterForChart: function(a, b) {
                var c = angular.copy(r);
                return angular.isDefined(b) && b > 0 && (c.field[0].size = b),
                a.aggregation = c,
                a
            },
            getRawQueryObj: function() {
                return angular.copy(t)
            },
            setTotalUsage: function(a) {
                i = a[0].octets
            },
            getTotalUsage: function(a) {
                return i
            },
            resetTotalUsage: function() {
                i = void 0
            },
            setTableSelections: function(a) {
                j = a
            },
            getTableSelections: function() {
                return j
            },
            setChartSeries: function(a) {
                k = angular.copy(a)
            },
            getChartSeries: function() {
                return k
            },
            setQueryBuilderCurrentState: function(a) {
                l = a
            },
            getQueryBuilderCurrentState: function() {
                return l
            },
            setQueryBuilderOriginalState: function(a) {
                m = a
            },
            getQueryBuilderOriginalState: function() {
                return m
            },
            getQueryBuilderTimeComponent: function() {
                var a, b;
                return a = _.findIndex(l, {
                    property: "entry_time"
                }),
                a > -1 && (b = l.splice(a, 1)[0]),
                angular.isDefined(b) ? b : void 0
            },
            setFilteredObject: function(a) {
                n = a
            },
            getFilteredObject: function() {
                return angular.copy(n)
            },
            setAllSeriesVisible: function(a) {
                angular.forEach(a.chartConfig.series, function(a) {
                    a.visible = !0
                })
            },
            getTotalChartData: function() {
                return angular.copy(o)
            },
            setTotalChartData: function(a) {
                o = a
            },
            resetTotalChartData: function() {
                o = void 0
            },
            getTableQueryObject: function(a) {
                return angular.copy(p)
            },
            setTableQueryObject: function(a) {
                p = a
            },
            formatFieldsData: function(a, b, c, d, f) {
                var g, h = angular.copy(a);
                return e.appendDeviceObjectToFieldsObj(h),
                e.appendLocalColorObjectToFieldsObj(h),
                e.appendRemoteColorObjectToFieldsObj(h),
                e.appendDestinationSystemIPObjectToFieldsObj(h),
                g = _.findIndex(h, {
                    property: "application"
                }),
                g > -1 && h.splice(g, 1),
                g = _.findIndex(h, {
                    property: "vdevice_name"
                }),
                g > -1 && (h[g].isHidden = !0,
                h[g].defaultValue = b),
                angular.isDefined(c) && (g = _.findIndex(h, {
                    property: "local_color"
                }),
                g > -1 && (h[g].defaultValue = c)),
                angular.isDefined(d) && (g = _.findIndex(h, {
                    property: "remote_color"
                }),
                g > -1 && (h[g].defaultValue = d)),
                angular.isDefined(f) && (g = _.findIndex(h, {
                    property: "remote_system_ip"
                }),
                g > -1 && (h[g].defaultValue = f)),
                h
            },
            getTopApplicationsFieldsData: function(e, g, h, i) {
                var j, k, l, m = a.defer(), n = this;
                return j = f.getTopApplicationsDPIFieldsData(),
                angular.isDefined(j) ? (k = angular.copy(j),
                l = this.formatFieldsData(k, e, g, h, i),
                m.resolve(l)) : c.get(d.TOP_APPLICATION_FIELDS_URL).then(function(a) {
                    f.setTopApplicationsDPIFieldsData(a.data),
                    k = angular.copy(a.data),
                    l = n.formatFieldsData(k, e, g, h, i),
                    m.resolve(l)
                }, function() {
                    b.info("Error while retrieving fields data for TLOC"),
                    m.reject([])
                }),
                m.promise
            },
            getChartConfig: function() {
                var a, b;
                return a = {
                    name: "",
                    zoom: !0,
                    filtersSelected: {
                        xAxis: ["entry_time"],
                        yAxis: ["octets"],
                        series: ["family"]
                    },
                    asyncLoad: !0,
                    formatDataToBytes: !0,
                    fillZeros: !0,
                    autoLoad: !1
                },
                b = {
                    title: {
                        text: ""
                    },
                    xAxis: {
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: ""
                        }
                    },
                    legend: {
                        enabled: !1
                    },
                    yAxis: {
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: "Usage"
                        }
                    }
                },
                [a, b]
            },
            getQueryBuilderConfig: function(a, b) {
                return {
                    autoLoadFields: !1,
                    searchCallBack: a,
                    isDynamicQuery: !0,
                    renderViewAfterInitComplete: !0,
                    fieldsData: b,
                    enableFilteredTags: !0,
                    fieldCustomizationsForDataTypeURL: [{
                        property: "vpn_id",
                        enable: !0,
                        addAllForFieldTypeURL: !0,
                        appendStringToTheList: !0,
                        stringVal: "VPN"
                    }]
                }
            },
            selectDefaultApplicationFamily: function(a) {
                var b;
                for (a.uiGridApi.grid.modifyRows(a.data),
                b = 0; b < 6; b++)
                    a.uiGridApi.selection.selectRow(a.data[b])
            },
            selectCachedApplicationFamily: function(a, b) {
                a.uiGridApi.grid.modifyRows(a.data),
                _.each(b, function(b) {
                    var c = _.findIndex(a.data, {
                        family: b.family
                    });
                    a.uiGridApi.selection.selectRow(a.data[c])
                })
            },
            mergeTableData: function(a, b) {
                return e.mergeByProperty(b, a, "family", "octets"),
                b
            },
            resetVariables: function() {
                p = void 0
            }
        }
    }
    angular.module("vManage").constant("TopApplicationsConstants", {
        DEFAULT_FEATURE_NAME: "dpi"
    }),
    angular.module("vManage").factory("DpiApplicationFamilyService", a),
    a.$inject = ["$q", "$log", "restService", "monitorApiConstants", "DeviceService", "tenantDashboardService", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h, i, j, k, l, m, n, o, p, q = {
            field: [{
                property: "application",
                size: 200,
                sequence: 1
            }],
            metrics: [{
                property: "octets",
                type: "sum",
                order: "desc"
            }]
        }, r = {
            field: [{
                property: "application",
                sequence: 1
            }],
            metrics: [{
                property: "octets",
                type: "sum"
            }]
        }, s = {
            metrics: [{
                property: "octets",
                type: "sum",
                order: "desc"
            }]
        }, t = {
            value: [],
            field: "application",
            type: "string",
            operator: "in"
        }, u = {
            value: [],
            field: "family",
            type: "string",
            operator: "in"
        }, v = {
            columns: [{
                property: "application",
                title: "Applications",
                hideable: !1,
                dataType: "string",
                isDisplay: !0,
                display: "link-application",
                width: "auto"
            }, {
                property: "octets",
                title: "Usage",
                dataType: "number",
                isDisplay: !0,
                isSearch: !1,
                display: "formatBytes",
                width: 200,
                sort: {
                    direction: "desc",
                    priority: 0
                }
            }, {
                property: "applicationUsage",
                title: "Percentage of Total Traffic",
                dataType: "number",
                isDisplay: !0,
                isSearch: !1,
                display: "application-progress",
                width: 250
            }]
        };
        return {
            getTopApplicationsData: function(a, b) {
                return c.post(a, b)
            },
            setAPIObject: function(a) {
                h = a
            },
            getAPIObject: function() {
                return h
            },
            returnTableColumns: function(a) {
                return v.columns
            },
            appendDynamicFilter: function(a, b) {
                var c = angular.copy(u);
                return c.value.push(b),
                a.query.rules.push(c),
                a
            },
            appendAggregationFilter: function(a) {
                return a.aggregation = angular.copy(q),
                a
            },
            appendAggregationFilterForChart: function(a, b) {
                var c = angular.copy(r);
                return angular.isDefined(b) && b > 0 && (c.field[0].size = b),
                a.aggregation = c,
                a
            },
            appendTotalAggregationFilter: function(a) {
                return a.aggregation = angular.copy(s),
                a
            },
            getRawQueryObj: function() {
                return angular.copy(t)
            },
            setTotalUsage: function(a) {
                i = a[0].octets
            },
            getTotalUsage: function(a) {
                return i
            },
            resetTotalUsage: function() {
                i = void 0
            },
            setTableSelections: function(a) {
                j = a
            },
            getTableSelections: function() {
                return j
            },
            setChartSeries: function(a) {
                k = angular.copy(a)
            },
            getChartSeries: function() {
                return k
            },
            setQueryBuilderCurrentState: function(a) {
                l = a
            },
            getQueryBuilderCurrentState: function() {
                return l
            },
            setQueryBuilderOriginalState: function(a) {
                m = a
            },
            getQueryBuilderOriginalState: function() {
                return m
            },
            getQueryBuilderTimeComponent: function() {
                var a, b;
                return a = _.findIndex(l, {
                    property: "entry_time"
                }),
                a > -1 && (b = l.splice(a, 1)[0]),
                angular.isDefined(b) ? b : void 0
            },
            setFilteredObject: function(a) {
                n = a
            },
            getFilteredObject: function() {
                return angular.copy(n)
            },
            setAllSeriesVisible: function(a) {
                angular.forEach(a.chartConfig.series, function(a) {
                    a.visible = !0
                })
            },
            getTotalChartData: function() {
                return angular.copy(o)
            },
            setTotalChartData: function(a) {
                o = a
            },
            resetTotalChartData: function() {
                o = void 0
            },
            getTableQueryObject: function(a) {
                return angular.copy(p)
            },
            setTableQueryObject: function(a) {
                p = a
            },
            formatFieldsData: function(a, b) {
                var c, d = angular.copy(a);
                return e.appendDeviceObjectToFieldsObj(d),
                e.appendLocalColorObjectToFieldsObj(d),
                e.appendRemoteColorObjectToFieldsObj(d),
                e.appendDestinationSystemIPObjectToFieldsObj(d),
                c = _.findIndex(d, {
                    property: "application"
                }),
                c > -1 && d.splice(c, 1),
                c = _.findIndex(d, {
                    property: "vdevice_name"
                }),
                c > -1 && (d[c].isHidden = !0,
                d[c].defaultValue = b),
                d
            },
            getTopApplicationsFieldsData: function(e) {
                var g, h, i, j = a.defer(), k = this;
                return g = f.getTopApplicationsDPIFieldsData(),
                angular.isDefined(g) ? (h = angular.copy(g),
                i = this.formatFieldsData(h, e),
                j.resolve(i)) : c.get(d.TOP_APPLICATION_FIELDS_URL).then(function(a) {
                    h = angular.copy(a.data),
                    i = k.formatFieldsData(h, e),
                    f.setTopApplicationsDPIFieldsData(a.data),
                    j.resolve(i)
                }, function() {
                    b.info("Error while retrieving fields data for TLOC"),
                    j.reject([])
                }),
                j.promise
            },
            getChartConfig: function() {
                var a, b;
                return a = {
                    name: "",
                    zoom: !0,
                    filtersSelected: {
                        xAxis: ["entry_time"],
                        yAxis: ["octets"],
                        series: ["application"]
                    },
                    asyncLoad: !0,
                    formatDataToBytes: !0,
                    fillZeros: !0,
                    autoLoad: !1
                },
                b = {
                    title: {
                        text: ""
                    },
                    xAxis: {
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: ""
                        }
                    },
                    yAxis: {
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: "Usage"
                        }
                    }
                },
                [a, b]
            },
            getQueryBuilderConfig: function(a, b) {
                return {
                    autoLoadFields: !1,
                    searchCallBack: a,
                    isDynamicQuery: !0,
                    renderViewAfterInitComplete: !0,
                    fieldsData: b,
                    enableFilteredTags: !0,
                    fieldCustomizationsForDataTypeURL: [{
                        property: "vpn_id",
                        enable: !0,
                        addAllForFieldTypeURL: !0,
                        appendStringToTheList: !0,
                        stringVal: "VPN"
                    }]
                }
            },
            selectDefaultApplications: function(a) {
                var b;
                for (a.uiGridApi.grid.modifyRows(a.data),
                b = 0; b < 6; b++)
                    a.uiGridApi.selection.selectRow(a.data[b])
            },
            selectCachedApplications: function(a, b) {
                a.uiGridApi.grid.modifyRows(a.data),
                _.each(b, function(b) {
                    var c = _.findIndex(a.data, {
                        application: b.application
                    });
                    a.uiGridApi.selection.selectRow(a.data[c])
                })
            },
            mergeTableData: function(a, b) {
                return e.mergeByProperty(b, a, "application", "octets"),
                b
            },
            resetVariables: function() {
                p = void 0
            },
            filterSystemIP: function(a, b) {
                c.get(d.DEVICE_BFD_LIVE_STATS + b).then(function(b) {
                    var c = Object.keys(_.groupBy(b.data, function(a) {
                        return a["system-ip"]
                    }))
                      , d = _.find(a, {
                        property: "remote_system_ip"
                    });
                    d && c && (d.componentTypeEnumOptions = _.filter(d.componentTypeEnumOptions, function(a) {
                        return c.indexOf(a.key) > -1
                    }))
                })
            }
        }
    }
    angular.module("vManage").constant("TopApplicationsConstants", {
        DEFAULT_FEATURE_NAME: "dpi"
    }),
    angular.module("vManage").factory("DpiApplicationService", a),
    a.$inject = ["$q", "$log", "restService", "monitorApiConstants", "DeviceService", "tenantDashboardService", "appUtil"]
}(),
function() {
    function a() {
        var a = [{
            title: "Peer Type",
            property: "peer-type",
            hideable: !1,
            width: 100,
            dataType: "string"
        }, {
            title: "Peer System IP",
            property: "system-ip",
            hideable: !1,
            width: 200,
            dataType: "ipv4"
        }, {
            title: "Peer Protocol",
            property: "protocol",
            width: 150,
            dataType: "string"
        }, {
            title: "Private Port",
            property: "private-port",
            width: 100,
            dataType: "number"
        }, {
            title: "Public Port",
            property: "public-port",
            width: 100,
            dataType: "number"
        }, {
            title: "Controller Group ID",
            property: "controller-group-id",
            width: 100,
            dataType: "number"
        }, {
            title: "Last Updated",
            property: "lastupdated",
            displayFormat: "DD MMM YYYY h:mm:ss A z",
            inputFormat: "unix-time",
            hideable: !1,
            minWidth: 200,
            dataType: "date"
        }]
          , b = function() {
            var a = '<div class="ui-grid-cell-contents" title="TOOLTIP">';
            return a += "<div ng-if=\"row.entity['$$treeLevel']  != null\">",
            a += "<div id =\"{{row.entity['color']}}_actual_expected\">",
            a += "<image id =\"{{row.entity['color']}}_circuit\" ng-src=\"images/device_state_green.png\" ng-if=\"row.entity['tloc-status'] === 'green'\"/>",
            a += "<image id =\"{{row.entity['color']}}_circuit\" ng-src=\"images/device_state_red.png\" ng-if=\"row.entity['tloc-status'] === 'red'\"/>",
            a += "&nbsp;{{row.entity['color']}} Circuit {{ row.entity['expected-actual']}}</div>",
            a += "<div id =\"{{row.entity['color']}}_tloc_nat_type\">{{ row.entity['tloctype--nattype']}}</div>",
            a += "</div>",
            a += "<div ng-if=\"row.entity['$$treeLevel']  == undefined\">",
            a += "<image ng-src=\"images/vmanage_table.png\" ng-if=\"row.entity['peer-type'] === 'vmanage'\"/>",
            a += "<image ng-src=\"images/vsmart_table.png\" ng-if=\"row.entity['peer-type'] === 'vsmart'\"/>",
            a += "<image ng-src=\"images/vbond_table.png\" ng-if=\"row.entity['peer-type'] === 'vbond'\"/>",
            a += " {{ row.entity['controller-details']}}</div>",
            a += "</div>",
            console.log(a),
            a
        }
          , c = [{
            title: "Controller",
            property: "controller-details",
            hideable: !1,
            minWidth: 400,
            dataType: "string",
            cellTemplate: b()
        }, {
            title: "Local Status",
            property: "local-status-info",
            hideable: !1,
            minWidth: 400,
            dataType: "string",
            iconProperty: "local-status",
            display: "iconAndText",
            icon: [{
                key: "green",
                value: "images/device_state_green.png"
            }, {
                key: "red",
                value: "images/device_state_red.png"
            }]
        }, {
            title: "Remote Status",
            property: "remote-status-info",
            hideable: !1,
            minWidth: 400,
            dataType: "string",
            iconProperty: "remote-status",
            display: "iconAndText",
            icon: [{
                key: "green",
                value: "images/device_state_green.png"
            }, {
                key: "red",
                value: "images/device_state_red.png"
            }]
        }];
        return {
            getControlConnectionTableColumns: function() {
                return a
            },
            getControlConnectionTableColumnsForTroubleshooting: function() {
                return c
            }
        }
    }
    angular.module("vManage").factory("ControlConnectionService", a),
    a.$inject = []
}(),
function() {
    function a(a, b, c) {
        var d, e, f = {
            FIELDS_API_URL: "/dataservice/event/query/fields",
            EVENTS_URL_TABLE: "/dataservice/event",
            EVENTS_URL_CHART: "/dataservice/event/aggregation"
        }, g = {
            query: {},
            aggregation: {
                field: [{
                    property: "severity_level",
                    order: "asc",
                    sequence: 1
                }],
                histogram: {
                    property: "entry_time",
                    interval: 1,
                    type: "hour",
                    order: "asc"
                }
            }
        }, h = [{
            name: "critical",
            display: "Critical"
        }, {
            name: "major",
            display: "Major"
        }, {
            name: "minor",
            display: "Minor"
        }];
        return {
            getQueryBuilderTimeComponent: function(a) {
                var b;
                return b = _.find(a, {
                    property: "entry_time"
                }),
                angular.isDefined(b) ? b : void 0
            },
            setTableQueryObject: function(a) {
                d = a
            },
            getLegends: function() {
                return h
            },
            getTableQueryObject: function() {
                return angular.copy(d)
            },
            getEventsTableAPI: function() {
                return f.EVENTS_URL_TABLE
            },
            getEventsChartAPI: function() {
                return f.EVENTS_URL_CHART
            },
            getAlarmsChartAggregation: function() {
                return g
            },
            formatFieldsData: function(a) {
                var b;
                return b = _.findIndex(a, {
                    property: "system_ip"
                }),
                b > -1 && a.splice(b, 1),
                a
            },
            getQueryBuilderFields: function() {
                var b = a.defer()
                  , d = this;
                return c.get(f.FIELDS_API_URL).then(function(a) {
                    var c = angular.copy(a.data)
                      , e = d.formatFieldsData(c);
                    b.resolve(e)
                }, function() {
                    $log.info("Error while retrieving fields data for events"),
                    b.reject([])
                }),
                b.promise
            },
            getFilterObject: function() {
                return angular.copy(e)
            },
            setFilterObject: function(a) {
                e = a
            },
            initializeQueryBuilder: function(a) {
                var c = {
                    autoLoadFields: !1,
                    searchCallBack: a.searchCallBack,
                    filterInterfaceObjValidComponents: !0,
                    isDynamicQuery: !0,
                    renderViewAfterInitComplete: !0,
                    enableFilteredTags: !0
                };
                a.queryBuilderObj = new b(c);
                this.getQueryBuilderFields().then(function(b) {
                    a.queryBuilderObj.setFieldsData(b),
                    a.queryBuilderObj.loadQueryBuilderWithFieldsData()
                }, function() {});
                a.queryBuilderViewObj = {},
                a.queryBuilderViewObj.buttonLayoutObj = {
                    layoutClass: "actionButtonLayout",
                    filterIconClass: "filter_list",
                    filterButtonTitle: "Filter",
                    showDropDownIcon: !0
                }
            },
            resetVariables: function() {
                e = void 0
            }
        }
    }
    angular.module("vManage").service("DeviceEventsService", a),
    a.$inject = ["$q", "QueryBuilderFactory", "restService"]
}(),
function() {
    function a(a, b, c) {
        var d = {
            popup: !0
        }
          , e = function(a) {
            this.widgets = [],
            this.options = angular.extend({}, d, a)
        };
        e.prototype.addWidget = function(a) {
            var b = this
              , c = {
                name: "New Widget",
                sizeX: 1,
                sizeY: 1,
                modalWidgetDataUrl: "",
                widgetData: [],
                template: "",
                templateUrl: "",
                handleNoAPIResponse: [],
                refreshInProgress: !1,
                currentWidgetAPIParams: "",
                hardwareHealthWidgetEventObj: {}
            }
              , d = angular.extend({}, c, a);
            angular.isDefined(d.widgetAPIParams) ? b.getContainerData(b.widgets.length, d.widgetAPI, d.widgetAPIParams) : b.getContainerData(b.widgets.length, d.widgetAPI),
            b.widgets.push(d)
        }
        ;
        var f = function(a, b) {
            angular.isDefined(a.widgets) && a.widgets.length > 0 && angular.isDefined(a.widgets[b]) && (a.widgets[b].refreshInProgress = !0)
        }
          , g = function(a, b) {
            angular.isDefined(a.widgets) && a.widgets.length > 0 && angular.isDefined(a.widgets[b]) && (a.widgets[b].refreshInProgress = !1)
        }
          , h = function(a, b, c) {
            var d = "PIM";
            angular.isDefined(c) && "vedge-5000" == c && (d = "NIM");
            var e = [{
                class: "Fans",
                name: "Fans",
                fname: "fan"
            }, {
                class: "PEM",
                name: "Power Supply",
                fname: "power"
            }, {
                class: "USB",
                name: "USB",
                fname: "usb"
            }, {
                class: d,
                name: "Module",
                fname: "module"
            }, {
                class: "Temperature Sensors",
                name: "Temperature Sensors",
                fname: "temperature"
            }];
            for (var f in a.data)
                ["Fans", "PEM", "USB", d, "Temperature Sensors"].indexOf(a.data[f]["hw-class"]) < 0 && a.data.splice(f, 1);
            angular.forEach(e, function(b) {
                var c = _.findIndex(a.data, function(a) {
                    return angular.equals(a["hw-class"], b.class)
                });
                if (c < 0) {
                    var d = {};
                    d["hw-class"] = b.class,
                    d.name = b.name,
                    d.fname = b.fname,
                    d.status = "NA",
                    d.details = {},
                    a.data.push(d)
                } else
                    a.data[c].name = b.name,
                    a.data[c].fname = b.fname;
                if (("Fans" === b.class || "PEM" === b.class) && c > -1) {
                    var e = [];
                    _.keys(a.data[c].details);
                    angular.forEach(a.data[c].details, function(a, b) {
                        var c = [];
                        angular.forEach(a, function(a, b) {
                            c.push(b)
                        }),
                        a.modules = angular.copy(c),
                        a.name = b.replace(" fan", ""),
                        e.push(a)
                    }),
                    e.sort(function(a, b) {
                        return a.name > b.name ? 1 : b.name > a.name ? -1 : 0
                    }),
                    a.data[c].details = angular.copy(e)
                }
            });
            var g = [];
            return angular.forEach(a.data, function(a) {
                "hardwareComponents2" !== b || "Fans" !== a["hw-class"] && "PEM" !== a["hw-class"] ? "hardwareComponents2" !== b && "Fans" !== a["hw-class"] && "PEM" !== a["hw-class"] && g.push(a) : g.push(a)
            }),
            a.data = angular.copy(g),
            a.data.sort(function(a, b) {
                return a["hw-class"] > b["hw-class"] ? 1 : b["hw-class"] > a["hw-class"] ? -1 : 0
            }),
            "hardwareComponents2" === b && a.data.reverse(),
            a
        };
        return e.prototype.getContainerData = function(a, c, d) {
            var e = this;
            angular.isDefined(d) && d !== {} ? (f(e, a),
            b[c](d.systemIp).then(function(b) {
                "getHardwareData" === c ? e.widgets[a].widgetData = h(b, d.name, d.deviceModel) : e.widgets[a].widgetData = b,
                "getCounterValues" === c && ("Crash" === e.widgets[a].title ? e.widgets[a].widgetData.data[0].count = e.widgets[a].widgetData.data[0].crashCount : "Reboot" === e.widgets[a].title && (e.widgets[a].widgetData.data[0].count = e.widgets[a].widgetData.data[0].rebootCount)),
                g(e, a)
            }, function(b) {
                e.widgets[a].handleNoAPIResponse.push(b),
                g(e, a)
            })) : (f(e, a),
            b[c]().then(function(b) {
                e.widgets[a].widgetData = b,
                g(e, a)
            }, function(b) {
                e.widgets[a].handleNoAPIResponse.push(b),
                g(e, a)
            }))
        }
        ,
        e.prototype.getWidgetIndex = function(a) {
            var b, c = -1;
            return angular.forEach(this.widgets, function(d) {
                c++,
                d.name === a.name && (b = c)
            }),
            b
        }
        ,
        e.prototype.getWidgetTitle = function(a) {
            var b = ""
              , c = this;
            return c.isChartWidget(a) ? angular.isDefined(a.widgetData.title) && "" !== a.widgetData.title && (b = a.widgetData.title) : c.isTableWidget(a) ? angular.isDefined(a.widgetData.header) && angular.isDefined(a.widgetData.header.title) && "" !== a.widgetData.header.title && (b = a.widgetData.header.title) : angular.isDefined(a.widgetData.header) && angular.isDefined(a.widgetData.header.title) && "" !== a.widgetData.header.title && (b = a.widgetData.header.title),
            "" === b && angular.isDefined(a.title) && (b = a.title),
            b
        }
        ,
        e.prototype.isChartWidget = function(a) {
            return !("chart" !== a.type || !angular.isDefined(a.widgetData.dataSource))
        }
        ,
        e.prototype.isTableWidget = function(a) {
            return !("table" !== a.type || !angular.isDefined(a.widgetData.header) || !angular.isDefined(a.widgetData.header.columns))
        }
        ,
        e
    }
    angular.module("vManage").factory("HardwareHealthFactory", a),
    a.$inject = ["$log", "hardwareHealthService", "restService"]
}(),
angular.module("vManage").factory("hardwareHealthService", hardwareHealthService),
hardwareHealthService.$inject = ["restService", "$q", "DeviceListCache"],
angular.module("vManage").directive("hardwareHealthWidget", hardwareHealthWidget),
hardwareHealthWidget.$inject = ["appUtil", "$state", "$compile", "hardwareHealthService", "$templateCache", "$http", "$window", "rbac"],
function() {
    function a(a, b, c, d) {
        var e = void 0
          , f = [{
            title: "Interface",
            property: "ifname",
            width: 100,
            display: "routable",
            dataType: "string",
            sort: {
                direction: "asc",
                priority: 2
            }
        }, {
            title: "Interface Description",
            property: "desc",
            dataType: "string",
            width: 250
        }, {
            title: "IP Address",
            property: "ip-address",
            width: 120,
            dataType: "string"
        }, {
            title: "IPv6 Address",
            property: "ipv6-address",
            width: 120,
            dataType: "string"
        }, {
            title: "VPN",
            property: "vpn-id",
            width: 75,
            dataType: "string",
            sort: {
                direction: "asc",
                priority: 1
            }
        }, {
            title: "Admin Status",
            property: "if-admin-status",
            width: 120,
            dataType: "string",
            display: "icon",
            iconProperty: "if-admin-status",
            icon: [{
                key: "Up",
                value: "images/up.png"
            }, {
                key: "Down",
                value: "images/down.png"
            }]
        }, {
            title: "Oper Status",
            property: "if-oper-status",
            width: 100,
            dataType: "string",
            display: "icon",
            iconProperty: "if-oper-status",
            icon: [{
                key: "Up",
                value: "images/up.png"
            }, {
                key: "Down",
                value: "images/down.png"
            }],
            sort: {
                direction: "desc",
                priority: 0
            }
        }, {
            title: "MTU",
            property: "mtu",
            width: 60,
            dataType: "string"
        }, {
            title: "Speed (mbps)",
            property: "speed-mbps",
            width: 120,
            dataType: "string"
        }, {
            title: "TCP MSS Adjust",
            property: "tcp-mss-adjust",
            width: 110,
            dataType: "string"
        }, {
            title: "Last Updated",
            property: "lastupdated",
            displayFormat: "DD MMM YYYY h:mm:ss A z",
            inputFormat: "unix-time",
            hideable: !1,
            minWidth: 200,
            dataType: "date"
        }]
          , g = {
            xAxisProperty: "entry_time",
            yAxisProperty: ["rx_kbps", "tx_kbps"],
            seriesNames: {
                property: "interface",
                values: []
            },
            chartDefinition: {
                asyncLoad: !0
            },
            chartConfig: {
                options: {
                    plotOptions: {
                        series: {
                            marker: {
                                enabled: !0
                            }
                        }
                    }
                },
                yAxis: [{
                    min: 0,
                    minRange: 1,
                    lineWidth: 2,
                    labels: {
                        enabled: !0
                    },
                    title: {
                        text: "Rx Kbps"
                    },
                    height: "45%",
                    opposite: !1,
                    visible: !0
                }, {
                    min: 0,
                    minRange: 1,
                    lineWidth: 2,
                    labels: {
                        enabled: !0
                    },
                    title: {
                        text: "Tx Kbps"
                    },
                    top: "55%",
                    height: "45%",
                    offset: 0,
                    opposite: !1,
                    visible: !0
                }]
            },
            chartOptions: {
                kbps: {
                    id: "kbps",
                    name: "Kbps",
                    properties: ["rx_kbps", "tx_kbps"],
                    axisLabel: ["rx", "tx"],
                    yAxisUnit: "kbps",
                    isSelected: !0,
                    aggregateBy: "avg",
                    chartObject: void 0
                },
                pkts: {
                    id: "pkts",
                    name: "Packets",
                    properties: ["rx_pkts", "tx_pkts"],
                    axisLabel: ["rx", "tx"],
                    formatDataToPackets: !0,
                    isSelected: !1,
                    aggregateBy: "sum",
                    chartObject: void 0
                },
                octets: {
                    id: "octets",
                    name: "Octets",
                    properties: ["rx_octets", "tx_octets"],
                    axisLabel: ["rx", "tx"],
                    formatDataToBytes: !0,
                    isSelected: !1,
                    aggregateBy: "sum",
                    chartObject: void 0
                },
                errors: {
                    id: "errors",
                    name: "Errors",
                    properties: ["rx_errors", "tx_errors"],
                    axisLabel: ["rx", "tx"],
                    formatDataToPacketCount: !0,
                    isSelected: !1,
                    aggregateBy: "sum",
                    chartObject: void 0
                },
                drops: {
                    id: "drops",
                    name: "Drops",
                    properties: ["rx_drops", "tx_drops"],
                    axisLabel: ["rx", "tx"],
                    formatDataToPacketCount: !0,
                    isSelected: !1,
                    aggregateBy: "sum",
                    chartObject: void 0
                },
                pps: {
                    id: "pps",
                    name: "Pps",
                    properties: ["rx_pps", "tx_pps"],
                    axisLabel: ["rx", "tx"],
                    formatDataToPacketsPerSecond: !0,
                    isSelected: !1,
                    aggregateBy: "avg",
                    chartObject: void 0
                }
            },
            ipvOptions: {
                combined: {
                    id: "combined",
                    name: "Combined",
                    properties: ["ip-address"]
                },
                separated: {
                    id: "separated",
                    name: "Separated",
                    properties: ["ip-address", "ipv6-address"]
                }
            }
        };
        return {
            getQueryBuilderTimeComponent: function(a) {
                var b;
                return b = _.find(a, {
                    property: "entry_time"
                }),
                angular.isDefined(b) ? b : void 0
            },
            getInterfaceTableColumns: function() {
                return f
            },
            getChartDefinition: function() {
                return g.chartDefinition
            },
            getChartConfig: function() {
                return g.chartConfig
            },
            getChartOptions: function() {
                return g.chartOptions
            },
            getIPVOptions: function() {
                return g.ipvOptions
            },
            getChartXAxisProperty: function() {
                return g.xAxisProperty
            },
            getChartYAxisProperty: function() {
                return g.yAxisProperty
            },
            setPrevRealtimeResponse: function(a) {
                e = a
            },
            getChartSeriesNames: function() {
                return g.seriesNames
            },
            setChartSeriesNames: function(a, b) {
                a && (g.seriesNames.property = a),
                b && (g.seriesNames.values = b)
            },
            getInterfaceFields: function() {
                return c.get(d.INTERFACE_QUERY_FIELDS)
            },
            getInterfaceData: function(e, f) {
                var g, h = a.defer();
                return c.get(d.DEVICE_INTERFACE_SYNCED_STATS + e).then(function(a) {
                    a.data = _.chain(a.data).sortBy("af-type").map(function(c) {
                        if (!b.checkNestedProperty(c, "af-type") || "ipv4" === c["af-type"])
                            return g = angular.isDefined(c["af-type"]) ? _.find(a.data, {
                                ifname: c.ifname,
                                "af-type": "ipv6"
                            }) : void 0,
                            angular.extend(c, {
                                interface: c.ifname,
                                "ipv6-address": g ? g["ipv6-address"] : "-"
                            })
                    }).remove(function(a) {
                        var b = angular.isDefined(a);
                        return angular.isDefined(f) && angular.isDefined(a) && angular.isDefined(a.ifname) && (b = _.includes(a.ifname.toLowerCase(), f)),
                        b
                    }).value(),
                    h.resolve(a)
                }, function(a) {
                    h.reject(a)
                }),
                h.promise
            },
            fetchRealTimeData: function(f, g, h) {
                var i = a.defer();
                return c.get(d.DEVICE_INTERFACE_LIVE_STATS + f).then(function(a) {
                    var c, d = angular.copy(a);
                    a.data.length > 0 && (c = a.data[0].lastupdated),
                    angular.forEach(a.data, function(a) {
                        b.checkNestedProperty(a, "af-type") || (a["af-type"] = "ipv4")
                    });
                    var f = {
                        "rx-packets": 0,
                        "tx-packets": 0,
                        "rx-octets": 0,
                        "tx-octets": 0,
                        "rx-errors": 0,
                        "tx-errors": 0,
                        "rx-drops": 0,
                        "tx-drops": 0
                    };
                    angular.equals(g.id, "combined") ? a.data = _.chain(a.data).filter({
                        "af-type": "ipv4"
                    }).map(function(b) {
                        var d = _.find(a.data, function(a) {
                            return angular.equals(b.ifname, a.ifname) && angular.equals(a["af-type"], "ipv6")
                        });
                        if (e && (f = _.find(e.data, {
                            ifname: b.ifname
                        })),
                        d) {
                            var g = {
                                "rx-packets": 0,
                                "tx-packets": 0,
                                "rx-octets": 0,
                                "tx-octets": 0,
                                "rx-errors": 0,
                                "tx-errors": 0,
                                "rx-drops": 0,
                                "tx-drops": 0
                            };
                            return e && (g = _.find(e.data, function(a) {
                                return angular.equals(b.ifname, a.ifname) && angular.equals(a["af-type"], "ipv6")
                            })),
                            angular.extend(b, {
                                interface: b.ifname,
                                af_type: b["af-type"],
                                entry_time: c,
                                rx_kbps: parseInt(b["rx-kbps"]) + parseInt(d["rx-kbps"]),
                                tx_kbps: parseInt(b["tx-kbps"]) + parseInt(d["tx-kbps"]),
                                rx_pps: parseInt(b["rx-pps"]) + parseInt(d["rx-pps"]),
                                tx_pps: parseInt(b["tx-pps"]) + parseInt(d["tx-pps"]),
                                rx_pkts: parseInt(b["rx-packets"]) + parseInt(d["rx-packets"]) - parseInt(f["rx-packets"]) + parseInt(g["rx-packets"]),
                                tx_pkts: parseInt(b["tx-packets"]) + parseInt(d["tx-packets"]) - parseInt(f["tx-packets"]) + parseInt(g["tx-packets"]),
                                rx_octets: parseInt(b["rx-octets"]) + parseInt(d["rx-octets"]) - (parseInt(f["rx-octets"]) + parseInt(g["rx-octets"])),
                                tx_octets: parseInt(b["tx-octets"]) + parseInt(d["tx-octets"]) - (parseInt(f["tx-octets"]) + parseInt(g["tx-octets"])),
                                rx_errors: parseInt(b["rx-errors"]) + parseInt(d["rx-errors"]) - (parseInt(f["rx-errors"]) + parseInt(g["rx-errors"])),
                                tx_errors: parseInt(b["tx-errors"]) + parseInt(d["rx-kbps"]) - (parseInt(f["tx-errors"]) + parseInt(g["rx-kbps"])),
                                rx_drops: parseInt(b["rx-drops"]) + parseInt(d["tx-errors"]) - (parseInt(f["rx-drops"]) + parseInt(g["tx-errors"])),
                                tx_drops: parseInt(b["tx-drops"]) + parseInt(d["tx-drops"]) - (parseInt(f["tx-drops"]) + parseInt(g["tx-drops"]))
                            })
                        }
                        return angular.extend(b, {
                            interface: b.ifname,
                            af_type: b["af-type"],
                            entry_time: c,
                            rx_kbps: b["rx-kbps"],
                            tx_kbps: b["tx-kbps"],
                            rx_pps: b["rx-pps"],
                            tx_pps: b["tx-pps"],
                            rx_pkts: b["rx-packets"] - f["rx-packets"],
                            tx_pkts: b["tx-packets"] - f["tx-packets"],
                            rx_octets: b["rx-octets"] - f["rx-octets"],
                            tx_octets: b["tx-octets"] - f["tx-octets"],
                            rx_errors: b["rx-errors"] - f["rx-errors"],
                            tx_errors: b["tx-errors"] - f["tx-errors"],
                            rx_drops: b["rx-drops"] - f["rx-drops"],
                            tx_drops: b["tx-drops"] - f["tx-drops"]
                        })
                    }).value() : a.data = _.map(a.data, function(a) {
                        return e && (f = _.find(e.data, {
                            ifname: a.ifname
                        })),
                        angular.extend(a, {
                            interface: a.ifname,
                            af_type: a["af-type"],
                            entry_time: c,
                            rx_kbps: a["rx-kbps"],
                            tx_kbps: a["tx-kbps"],
                            rx_pps: a["rx-pps"],
                            tx_pps: a["tx-pps"],
                            rx_pkts: a["rx-packets"] - f["rx-packets"],
                            tx_pkts: a["tx-packets"] - f["tx-packets"],
                            rx_octets: a["rx-octets"] - f["rx-octets"],
                            tx_octets: a["tx-octets"] - f["tx-octets"],
                            rx_errors: a["rx-errors"] - f["rx-errors"],
                            tx_errors: a["tx-errors"] - f["tx-errors"],
                            rx_drops: a["rx-drops"] - f["rx-drops"],
                            tx_drops: a["tx-drops"] - f["tx-drops"]
                        })
                    }),
                    _.indexOf(["pkts", "octets", "errors", "drops"], h.id) > -1 && (e = d),
                    i.resolve(a)
                }, function(a) {
                    i.reject(a)
                }),
                i.promise
            },
            appendFilterAggregation: function(a, b, c, d, e) {
                return a.query.rules.push({
                    value: [b],
                    field: "vdevice_name",
                    type: "string",
                    operator: "in"
                }),
                a.query.rules.push(c),
                a.sort = [{
                    field: "entry_time",
                    type: "date",
                    order: "asc"
                }],
                a.aggregation = {
                    field: [{
                        property: "interface",
                        sequence: 1
                    }],
                    histogram: {
                        property: "entry_time",
                        type: "minute",
                        order: "asc"
                    }
                },
                a.aggregation.metrics = [{
                    property: d.properties[0],
                    type: d.aggregateBy
                }, {
                    property: d.properties[1],
                    type: d.aggregateBy
                }],
                angular.equals(e.id, "combined") ? this.removeAFTypeFilterAggregation(a) : this.appendAFTypeFilterAggregation(a),
                a
            },
            appendAFTypeFilterAggregation: function(a) {
                a.aggregation.field.push({
                    property: "af_type",
                    sequence: 2
                })
            },
            removeAFTypeFilterAggregation: function(a) {
                a.aggregation.field = _.reject(a.aggregation.field, {
                    property: "af_type"
                })
            },
            postProcessingFunction: function(a) {
                return angular.forEach(a.data, function(a) {
                    for (var b in a)
                        (b.indexOf("rx") > -1 || b.indexOf("tx") > -1) && (a[b] = 2 * parseFloat(a[b]))
                }),
                a
            },
            getDeviceData: function() {
                return c.get("/dataservice/device")
            },
            getCellularModem: function(a) {
                return c.get("/dataservice/device/cellular/modem?deviceId=" + a)
            },
            getCellularRadio: function(a) {
                return c.get("/dataservice/device/cellular/radio?deviceId=" + a)
            },
            getCellularNetwork: function(a) {
                return c.get("/dataservice/device/cellular/network?deviceId=" + a)
            },
            getCellularIp: function(a) {
                return c.get("/dataservice/device/cellular/sessions?deviceId=" + a)
            },
            getCellularStatus: function(a) {
                return c.get("/dataservice/device/cellular/status?deviceId=" + a)
            },
            getControlLocalProperties: function(a) {
                return c.get("/dataservice/device/control/waninterface?deviceId=" + a)
            },
            getControlLocalPropertiesSynced: function(a) {
                return c.get("/dataservice/device/control/synced/waninterface?deviceId=" + a)
            }
        }
    }
    angular.module("vManage").factory("InterfaceService", a),
    a.$inject = ["$q", "appUtil", "restService", "monitorApiConstants"]
}(),
angular.module("vManage").factory("realTimeFactory", realTimeFactory),
realTimeFactory.$inject = ["$state", "appUtil", "restService", "$q"],
function() {
    function a(a, b, c, d, e, f, g) {
        var h, i, j, k, l, m, n, o, p, q = {
            field: [{
                property: "src_ip",
                size: 200,
                sequence: 1
            }],
            metrics: [{
                property: "total_bytes",
                type: "sum",
                order: "desc"
            }]
        }, r = {
            field: [{
                property: "src_ip",
                sequence: 1
            }],
            metrics: [{
                property: "total_bytes",
                type: "sum"
            }]
        }, s = {
            metrics: [{
                property: "total_bytes",
                type: "sum",
                order: "desc"
            }]
        }, t = {
            value: [],
            field: "src_ip",
            type: "string",
            operator: "in"
        }, u = {
            value: ["Optimized"],
            field: "tcpopt",
            type: "string",
            operator: "equal"
        }, v = {
            columns: [{
                property: "src_ip",
                title: "Flow Source",
                dataType: "string",
                isDisplay: !0,
                display: "source-ip",
                width: "auto"
            }, {
                property: "total_bytes",
                title: "Usage",
                dataType: "number",
                display: "formatBytes",
                isDisplay: !0,
                isSearch: !1,
                width: 200
            }, {
                property: "usageInPercentage",
                title: "Percentage of TCP-Optimized Traffic",
                dataType: "number",
                isDisplay: !0,
                isSearch: !1,
                display: "usage-percentage",
                width: 250
            }]
        };
        return {
            getTopApplicationsData: function(a, b) {
                return c.post(a, b)
            },
            setAPIObject: function(a) {
                h = a
            },
            getAPIObject: function() {
                return h
            },
            returnTableColumns: function() {
                return v.columns
            },
            appendAggregationFilterForTable: function(a) {
                return a.aggregation = angular.copy(q),
                a
            },
            appendTotalAggregationFilter: function(a) {
                return a.aggregation = angular.copy(s),
                a
            },
            appendAggregationFilterForChart: function(a, b) {
                var c = angular.copy(r);
                return angular.isDefined(b) && b > 0 && (c.field[0].size = b),
                a.aggregation = c,
                a
            },
            appendTCPOptFilter: function(a) {
                return g.checkNestedProperty(a, "query", "rules") ? (_.findIndex(a.query.rules, {
                    field: "tcpopt"
                }) < 0 && a.query.rules.push(u),
                a) : a
            },
            getRawQueryObj: function() {
                return angular.copy(t)
            },
            setTotalUsage: function(a) {
                i = a[0].total_bytes
            },
            resetTotalUsage: function() {
                i = void 0
            },
            getTotalUsage: function() {
                return i
            },
            setTableSelections: function(a) {
                j = a
            },
            getTableSelections: function() {
                return j
            },
            setChartSeries: function(a) {
                k = angular.copy(a)
            },
            getChartSeries: function() {
                return k
            },
            setQueryBuilderComponents: function(a) {
                l = a
            },
            getQueryBuilderComponents: function() {
                return angular.copy(l)
            },
            setQueryBuilderOriginalState: function(a) {
                m = a
            },
            getQueryBuilderOriginalState: function() {
                return m
            },
            getQueryBuilderTimeComponent: function() {
                var a, b;
                return a = _.findIndex(l, {
                    property: "entry_time"
                }),
                a > -1 && (b = l.splice(a, 1)[0]),
                angular.isDefined(b) ? b : void 0
            },
            setFilteredObject: function(a) {
                n = a
            },
            getFilteredObject: function() {
                return angular.copy(n)
            },
            setAllSeriesVisible: function(a) {
                angular.forEach(a.chartConfig.series, function(a) {
                    a.visible = !0
                })
            },
            getTotalChartData: function() {
                return angular.copy(o)
            },
            setTotalChartData: function(a) {
                o = a
            },
            resetTotalChartData: function() {
                o = void 0
            },
            getTableQueryObject: function(a) {
                return angular.copy(p)
            },
            setTableQueryObject: function(a) {
                p = a
            },
            formatFieldsData: function(a, b, c, d, e) {
                var g, h = angular.copy(a);
                return f.appendDeviceObjectToFieldsObj(h),
                f.appendLocalColorObjectToFieldsObj(h),
                f.appendRemoteColorObjectToFieldsObj(h),
                f.appendSourceSystemIPObjectToFieldsObj(h),
                g = _.findIndex(h, {
                    property: "src_ip"
                }),
                g > -1 && h.splice(g, 1),
                g = _.findIndex(h, {
                    property: "src_port"
                }),
                g > -1 && h.splice(g, 1),
                g = _.findIndex(h, {
                    property: "vdevice_name"
                }),
                g > -1 && (h[g].isHidden = !0,
                h[g].defaultValue = b),
                angular.isDefined(c) && (g = _.findIndex(h, {
                    property: "local_color"
                }),
                g > -1 && (h[g].defaultValue = c)),
                angular.isDefined(d) && (g = _.findIndex(h, {
                    property: "remote_color"
                }),
                g > -1 && (h[g].defaultValue = d)),
                angular.isDefined(e) && (g = _.findIndex(h, {
                    property: "remote_system_ip"
                }),
                g > -1 && (h[g].defaultValue = e)),
                h
            },
            getTopApplicationsFieldsData: function(f, g, h, i) {
                var j, k, l = a.defer(), m = this;
                return j = e.getTopApplicationsCFLOWDFieldsData(),
                angular.isDefined(j) ? (k = m.formatFieldsData(j, f, g, h, i),
                l.resolve(k)) : c.get(d.TOP_APPLICATION_CFLOWD_FIELDS_URL).then(function(a) {
                    e.setTopApplicationsCFLOWDFieldsData(a.data),
                    k = m.formatFieldsData(a.data, f, g, h, i),
                    l.resolve(k)
                }, function() {
                    b.info("Error while retrieving fields data for cflowd"),
                    l.reject([])
                }),
                l.promise
            },
            getChartConfig: function() {
                var a, b;
                return a = {
                    name: "",
                    zoom: !0,
                    filtersSelected: {
                        xAxis: ["entry_time"],
                        yAxis: ["total_bytes"],
                        series: ["src_ip"]
                    },
                    asyncLoad: !0,
                    formatDataToBytes: !0,
                    fillZeros: !0,
                    autoLoad: !1
                },
                b = {
                    title: {
                        text: ""
                    },
                    xAxis: {
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: ""
                        }
                    },
                    yAxis: {
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: "Usage"
                        }
                    }
                },
                [a, b]
            },
            getQueryBuilderConfig: function(a, b) {
                return {
                    autoLoadFields: !1,
                    searchCallBack: a,
                    isDynamicQuery: !0,
                    renderViewAfterInitComplete: !0,
                    fieldsData: b,
                    enableFilteredTags: !0,
                    fieldCustomizationsForDataTypeURL: [{
                        property: "vpn_id",
                        enable: !0,
                        addAllForFieldTypeURL: !0,
                        appendStringToTheList: !0,
                        stringVal: "VPN"
                    }]
                }
            },
            selectDefaultSources: function(a) {
                var b;
                for (a.uiGridApi.grid.modifyRows(a.data),
                b = 0; b < 6; b++)
                    a.uiGridApi.selection.selectRow(a.data[b])
            },
            selectCachedSources: function(a, b) {
                a.uiGridApi.grid.modifyRows(a.data),
                _.each(b, function(b) {
                    var c = _.findIndex(a.data, {
                        src_ip: b.src_ip
                    });
                    a.uiGridApi.selection.selectRow(a.data[c])
                })
            },
            mergeTableData: function(a, b) {
                return f.mergeByProperty(b, a, "src_ip", "total_bytes"),
                b
            },
            resetVariables: function() {
                p = void 0
            }
        }
    }
    angular.module("vManage").factory("CflowdFromSourcesService", a),
    a.$inject = ["$q", "$log", "restService", "monitorApiConstants", "tenantDashboardService", "DeviceService", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h, i, j, k, l, m = {
            field: [{
                property: "dest_ip",
                size: 200,
                sequence: 1
            }],
            metrics: [{
                property: "total_bytes",
                type: "sum",
                order: "desc"
            }]
        }, n = {
            value: ["Optimized"],
            field: "tcpopt",
            type: "string",
            operator: "equal"
        }, o = {
            metrics: [{
                property: "total_bytes",
                type: "sum",
                order: "desc"
            }]
        }, p = {
            columns: [{
                property: "dest_ip",
                title: "Flow Destination",
                dataType: "string",
                isDisplay: !0,
                display: "destination-ip",
                width: "auto"
            }, {
                property: "total_bytes",
                title: "Usage",
                dataType: "number",
                display: "formatBytes",
                isDisplay: !0,
                isSearch: !1,
                width: 200
            }, {
                property: "usageInPercentage",
                title: "Percentage of TCP-Optimized Traffic",
                dataType: "number",
                isDisplay: !0,
                isSearch: !1,
                display: "usage-percentage",
                width: 250
            }]
        };
        return {
            getTopApplicationsData: function(a, b) {
                return c.post(a, b)
            },
            returnTableColumns: function() {
                return p.columns
            },
            appendAggregationFilterForDestinations: function(a) {
                return a.aggregation = angular.copy(m),
                a
            },
            appendTotalAggregationFilter: function(a) {
                return a.aggregation = angular.copy(o),
                a
            },
            appendTCPOptFilter: function(a) {
                return g.checkNestedProperty(a, "query", "rules") ? (_.findIndex(a.query.rules, {
                    field: "tcpopt"
                }) < 0 && a.query.rules.push(n),
                a) : a
            },
            setTotalUsage: function(a) {
                i = a[0].total_bytes
            },
            resetTotalUsage: function() {
                i = 0
            },
            getTotalUsage: function() {
                return i
            },
            setAPIObject: function(a) {
                h = a
            },
            getAPIObject: function() {
                return h
            },
            setQueryBuilderComponents: function(a) {
                j = a
            },
            getQueryBuilderComponents: function() {
                return angular.copy(j)
            },
            setQueryBuilderOriginalState: function(a) {
                k = a
            },
            getQueryBuilderOriginalState: function() {
                return k
            },
            getQueryBuilderTimeComponent: function() {
                var a, b;
                return a = _.findIndex(j, {
                    property: "entry_time"
                }),
                a > -1 && (b = j.splice(a, 1)[0]),
                angular.isDefined(b) ? b : void 0
            },
            setFilteredObject: function(a) {
                l = a
            },
            getFilteredObject: function() {
                return angular.copy(l)
            },
            formatFieldsData: function(a, b, c) {
                f.appendDeviceObjectToFieldsObj(a),
                f.appendLocalColorObjectToFieldsObj(a),
                f.appendSourceIPObjectToFieldsObj(a),
                f.appendRemoteColorObjectToFieldsObj(a),
                f.appendSourceSystemIPObjectToFieldsObj(a);
                var d;
                return d = _.findIndex(a, {
                    property: "src_ip"
                }),
                d > -1 && (a[d].isHidden = !0,
                a[d].defaultValue = c),
                d = _.findIndex(a, {
                    property: "src_port"
                }),
                d > -1 && a.splice(d, 1),
                d = _.findIndex(a, {
                    property: "vdevice_name"
                }),
                d > -1 && (a[d].isHidden = !0,
                a[d].defaultValue = b),
                a
            },
            getTopApplicationsFieldsData: function(f, g) {
                var h, i, j, k = a.defer(), l = this;
                return h = e.getTopApplicationsCFLOWDFieldsData(),
                angular.isDefined(h) ? (i = angular.copy(h),
                j = l.formatFieldsData(i, f, g),
                k.resolve(j)) : c.get(d.TOP_APPLICATION_CFLOWD_FIELDS_URL).then(function(a) {
                    e.setTopApplicationsCFLOWDFieldsData(a.data),
                    i = angular.copy(a.data),
                    j = l.formatFieldsData(i, f, g),
                    k.resolve(j)
                }, function() {
                    b.info("Error while retrieving fields data for cflowd"),
                    k.reject([])
                }),
                k.promise
            },
            getChartConfig: function() {
                var a, b;
                return a = {
                    name: "topFlows",
                    zoom: !0,
                    filtersSelected: {
                        xAxis: ["dest_ip"],
                        yAxis: ["total_bytes"],
                        series: []
                    },
                    formatDataToBytes: !0,
                    replaceToolTipTextWithYAxisTitleText: !0
                },
                b = {
                    options: {
                        tooltip: {
                            formatter: function() {
                                var a = "";
                                return a += "<b>" + this.points[0].key + "<b><br/>",
                                a += '<span style="color:' + this.points[0].color + '">■    </span>',
                                a += "<span>octets:  </span>",
                                a += "<span>" + this.y + "</span>",
                                a += "<br/>"
                            }
                        }
                    },
                    title: {
                        text: ""
                    },
                    xAxis: {
                        type: "category",
                        labels: {
                            enabled: !0,
                            formatter: function() {
                                return this.value
                            }
                        },
                        title: {
                            text: "Flow Destination"
                        }
                    },
                    yAxis: {
                        type: "logarithmic",
                        min: .1,
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: "Usage"
                        }
                    }
                },
                [a, b]
            },
            resetVariables: function() {
                l = void 0
            },
            filterSystemIP: function(a, b) {
                c.get(d.DEVICE_BFD_LIVE_STATS + b).then(function(b) {
                    var c = Object.keys(_.groupBy(b.data, function(a) {
                        return a["system-ip"]
                    }))
                      , d = _.find(a, {
                        property: "remote_system_ip"
                    });
                    d && c && (d.componentTypeEnumOptions = _.filter(d.componentTypeEnumOptions, function(a) {
                        return c.indexOf(a.key) > -1
                    }))
                })
            }
        }
    }
    angular.module("vManage").factory("CflowdFromSrcDestinationsService", a),
    a.$inject = ["$q", "$log", "restService", "monitorApiConstants", "tenantDashboardService", "DeviceService", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        return {
            getTcpOptimizedConnections: function(a) {
                return c.get(d.TCP_OPTIMIZED_CONNECTIONS + "?deviceId=" + a)
            },
            returnTableColumns: function() {
                return tableHeader.columns
            },
            getDestPortTableColumn: function() {
                return destPortTableColumn.columns
            },
            appendAggregationFilterForSources: function(a) {
                return a.aggregation = angular.copy(aggregationObjForFlowsTable),
                a
            },
            appendAggregationFilterForDestPort: function(a) {
                return a.aggregation = angular.copy(aggregationObjForFlowsTable),
                a.aggregation.field.push(destPortField),
                a
            },
            appendTotalAggregationFilter: function(a) {
                return a.aggregation = angular.copy(totalAggregationObj),
                a
            },
            appendTCPOptFilter: function(a) {
                return g.checkNestedProperty(a, "query", "rules") ? (_.findIndex(a.query.rules, {
                    field: "tcpopt"
                }) < 0 && a.query.rules.push(tcpOptQuery),
                a) : a
            },
            setTotalUsage: function(a) {
                totalUsage = a[0].total_bytes
            },
            resetTotalUsage: function() {
                totalUsage = 0
            },
            getTotalUsage: function() {
                return totalUsage
            },
            setAPIObject: function(a) {
                topApplicationsAPIObject = a
            },
            getAPIObject: function() {
                return topApplicationsAPIObject
            },
            setQueryBuilderComponents: function(a) {
                queryBuilderComponentsCached = a
            },
            getQueryBuilderComponents: function() {
                return angular.copy(queryBuilderComponentsCached)
            },
            getQueryBuilderTimeComponent: function() {
                var a, b;
                return a = _.findIndex(queryBuilderComponentsCached, {
                    property: "entry_time"
                }),
                a > -1 && (b = queryBuilderComponentsCached.splice(a, 1)[0]),
                angular.isDefined(b) ? b : void 0
            },
            setFilteredObject: function(a) {
                filterObject = a
            },
            getFilteredObject: function() {
                return angular.copy(filterObject)
            },
            formatFieldsData: function(a, b, c, d) {
                f.appendDeviceObjectToFieldsObj(a),
                f.appendLocalColorObjectToFieldsObj(a),
                f.appendDestinationIPObjectToFieldsObj(a),
                f.appendRemoteColorObjectToFieldsObj(a),
                f.appendDestinationSystemIPObjectToFieldsObj(a);
                var e;
                return e = _.findIndex(a, {
                    property: "src_ip"
                }),
                e > -1 && (a[e].isHidden = !0,
                a[e].defaultValue = d),
                e = _.findIndex(a, {
                    property: "dest_ip"
                }),
                e > -1 && (a[e].isHidden = !0,
                a[e].defaultValue = d),
                e = _.findIndex(a, {
                    property: "dest_port"
                }),
                e > -1 && a.splice(e, 1),
                e = _.findIndex(a, {
                    property: "vdevice_name"
                }),
                e > -1 && (a[e].isHidden = !0,
                a[e].defaultValue = b),
                a
            },
            getTopApplicationsFieldsData: function(f, g, h) {
                var i, j, k, l = a.defer(), m = this;
                return i = e.getTopApplicationsCFLOWDFieldsData(),
                angular.isDefined(i) ? (j = angular.copy(i),
                k = m.formatFieldsData(j, f, g, h),
                l.resolve(k)) : c.get(d.TOP_APPLICATION_CFLOWD_FIELDS_URL).then(function(a) {
                    e.setTopApplicationsCFLOWDFieldsData(a.data),
                    j = angular.copy(a.data),
                    k = m.formatFieldsData(j, f, g, h),
                    l.resolve(k)
                }, function() {
                    b.info("Error while retrieving fields data for cflowd"),
                    l.reject([])
                }),
                l.promise
            },
            getChartConfig: function() {
                var a, b;
                return a = {
                    name: "topFlows",
                    zoom: !0,
                    filtersSelected: {
                        xAxis: [],
                        yAxis: ["total_bytes"],
                        series: []
                    },
                    formatDataToBytes: !0,
                    replaceToolTipTextWithYAxisTitleText: !0
                },
                b = {
                    title: {
                        text: ""
                    },
                    xAxis: {
                        type: "category",
                        labels: {
                            enabled: !0,
                            autoRotation: !0,
                            rotation: -45,
                            step: 1,
                            formatter: function() {
                                return this.value
                            }
                        },
                        title: {
                            text: ""
                        }
                    },
                    yAxis: {
                        type: "logarithmic",
                        min: .1,
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: "Usage"
                        }
                    }
                },
                [a, b]
            },
            resetVariables: function() {
                topApplicationsAPIObject,
                totalUsage,
                queryBuilderComponentsCached,
                filterObject = void 0
            },
            filterSystemIP: function(a, b) {
                c.get(d.DEVICE_BFD_LIVE_STATS + b).then(function(b) {
                    var c = Object.keys(_.groupBy(b.data, function(a) {
                        return a["system-ip"]
                    }))
                      , d = _.find(a, {
                        property: "remote_system_ip"
                    });
                    d && c && (d.componentTypeEnumOptions = _.filter(d.componentTypeEnumOptions, function(a) {
                        return c.indexOf(a.key) > -1
                    }))
                })
            }
        }
    }
    angular.module("vManage").factory("TcpConnectionsService", a),
    a.$inject = ["$q", "$log", "restService", "monitorApiConstants", "tenantDashboardService", "DeviceService", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h, i, j, k = {
            field: [{
                property: "tcpopt",
                sequence: 1
            }],
            metrics: [{
                property: "total_bytes",
                type: "sum",
                order: "desc"
            }]
        }, l = {
            value: ["6"],
            field: "ip_proto",
            type: "int",
            operator: "in"
        }, m = {
            metrics: [{
                property: "total_bytes",
                type: "sum",
                order: "desc"
            }]
        }, n = {
            xAxisProperty: "entry_time",
            yAxisProperty: ["total_bytes"],
            seriesNames: {
                property: "name",
                values: []
            },
            chartDefinition: {
                asyncLoad: !0,
                formatDataToBytes: !0
            },
            chartConfig: {
                options: {
                    plotOptions: {
                        series: {
                            marker: {
                                enabled: !0
                            }
                        }
                    }
                }
            }
        };
        return {
            getChartDefinition: function() {
                return n.chartDefinition
            },
            getChartConfig: function() {
                return n.chartConfig
            },
            getChartOptions: function() {
                return n.chartOptions
            },
            getChartXAxisProperty: function() {
                return n.xAxisProperty
            },
            getChartYAxisProperty: function() {
                return n.yAxisProperty
            },
            getChartSeriesNames: function() {
                return n.seriesNames
            },
            getTrafficFlowData: function(b, d) {
                var e = a.defer();
                return d = c.affixStatsAggregationHistogramUrl(d),
                c.post(b, d).then(function(a) {
                    var b, c, d = [];
                    a.data.length && angular.forEach(a.entryTimeList, function(e) {
                        b = {
                            entry_time: e,
                            name: "optimized",
                            tcpopt: "Optimized",
                            total_bytes: 0
                        },
                        c = {
                            entry_time: e,
                            name: "unoptimized",
                            tcpopt: "NA",
                            total_bytes: 0
                        },
                        angular.forEach(angular.copy(a.data), function(a) {
                            a.entry_time == e && ("NA" === a.tcpopt ? c.total_bytes = a.total_bytes : "Optimized" === a.tcpopt && (b.total_bytes = a.total_bytes))
                        }),
                        d.push(b),
                        d.push(c)
                    }),
                    a.data = d,
                    e.resolve(a)
                }, function(a) {
                    e.reject(a)
                }),
                e.promise
            },
            appendAggregationFilterForSources: function(a) {
                return a.aggregation = angular.copy(k),
                a
            },
            appendTotalAggregationFilter: function(a) {
                return a.aggregation = angular.copy(m),
                a
            },
            appendTCPOptFilter: function(a) {
                return g.checkNestedProperty(a, "query", "rules") ? (a.query.rules.push(l),
                a) : a
            },
            getFilterCurrentState: function() {
                return h
            },
            setFilterCurrentState: function(a) {
                h = a
            },
            setFilterOriginalState: function(a) {
                i = a
            },
            getFilterOriginalState: function() {
                return i
            },
            getQueryBuilderTimeComponent: function() {
                var a, b;
                return a = _.findIndex(h, {
                    property: "entry_time"
                }),
                a > -1 && (b = h.splice(a, 1)[0]),
                angular.isDefined(b) ? b : void 0
            },
            setFilteredObject: function(a) {
                j = a
            },
            getFilteredObject: function() {
                return angular.copy(j)
            },
            formatFieldsData: function(a, b, c, d) {
                f.appendDeviceObjectToFieldsObj(a),
                f.appendLocalColorObjectToFieldsObj(a),
                f.appendDestinationIPObjectToFieldsObj(a),
                f.appendRemoteColorObjectToFieldsObj(a),
                f.appendDestinationSystemIPObjectToFieldsObj(a);
                var e;
                return e = _.findIndex(a, {
                    property: "vdevice_name"
                }),
                e > -1 && (a[e].isHidden = !0,
                a[e].defaultValue = b),
                a
            },
            getTopApplicationsFieldsData: function(f, g, h) {
                var i, j, k, l = a.defer(), m = this;
                return i = e.getTopApplicationsCFLOWDFieldsData(),
                angular.isDefined(i) ? (j = angular.copy(i),
                k = m.formatFieldsData(j, f, g, h),
                l.resolve(k)) : c.get(d.TOP_APPLICATION_CFLOWD_FIELDS_URL).then(function(a) {
                    e.setTopApplicationsCFLOWDFieldsData(a.data),
                    j = angular.copy(a.data),
                    k = m.formatFieldsData(j, f, g, h),
                    l.resolve(k)
                }, function() {
                    b.info("Error while retrieving fields data for cflowd"),
                    l.reject([])
                }),
                l.promise
            },
            resetVariables: function() {
                j = void 0
            },
            filterSystemIP: function(a, b) {
                c.get(d.DEVICE_BFD_LIVE_STATS + b).then(function(b) {
                    var c = Object.keys(_.groupBy(b.data, function(a) {
                        return a["system-ip"]
                    }))
                      , d = _.find(a, {
                        property: "remote_system_ip"
                    });
                    d && c && (d.componentTypeEnumOptions = _.filter(d.componentTypeEnumOptions, function(a) {
                        return c.indexOf(a.key) > -1
                    }))
                })
            }
        }
    }
    angular.module("vManage").factory("ThroughputService", a),
    a.$inject = ["$q", "$log", "restService", "monitorApiConstants", "tenantDashboardService", "DeviceService", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h, i, j, k, l = {
            field: [{
                property: "src_ip",
                size: 10,
                sequence: 1
            }, {
                property: "dest_ip",
                size: 1,
                sequence: 2
            }],
            metrics: [{
                property: "total_bytes",
                type: "sum",
                order: "desc"
            }]
        }, m = {
            value: ["Optimized"],
            field: "tcpopt",
            type: "string",
            operator: "equal"
        }, n = {
            property: "dest_port",
            size: 25,
            sequence: 3
        }, o = {
            metrics: [{
                property: "total_bytes",
                type: "sum",
                order: "desc"
            }]
        }, p = {
            columns: [{
                property: "src_ip",
                title: "Flow Source",
                hideable: !1,
                dataType: "string",
                isDisplay: !0,
                display: "source-ip",
                width: "auto"
            }, {
                property: "dest_ip",
                title: "Flow Destination",
                dataType: "string",
                isDisplay: !0,
                display: "destination-ip",
                width: "auto"
            }, {
                property: "total_bytes",
                title: "Usage",
                dataType: "number",
                display: "formatBytes",
                isDisplay: !0,
                isSearch: !1,
                width: 200
            }]
        }, q = {
            columns: [{
                property: "src_ip",
                title: "Flow Source",
                dataType: "string",
                hideable: !1,
                isDisplay: !0,
                display: "source-ip",
                width: "auto"
            }, {
                property: "dest_ip",
                title: "Flow Destination",
                dataType: "string",
                hideable: !1,
                isDisplay: !0,
                display: "destination-ip",
                width: "auto"
            }, {
                property: "dest_port",
                title: "Destination Port",
                dataType: "number",
                isDisplay: !0,
                isSearch: !1,
                width: "auto"
            }, {
                property: "total_bytes",
                title: "Usage",
                dataType: "number",
                display: "formatBytes",
                isSearch: !1,
                isDisplay: !0,
                width: 200
            }]
        };
        return {
            getTopApplicationsData: function(a, b) {
                return c.post(a, b)
            },
            returnTableColumns: function() {
                return p.columns
            },
            getDestPortTableColumn: function() {
                return q.columns
            },
            appendAggregationFilterForSources: function(a) {
                return a.aggregation = angular.copy(l),
                a
            },
            appendAggregationFilterForDestPort: function(a) {
                return a.aggregation = angular.copy(l),
                a.aggregation.field.push(n),
                a
            },
            appendTotalAggregationFilter: function(a) {
                return a.aggregation = angular.copy(o),
                a
            },
            appendTCPOptFilter: function(a) {
                return g.checkNestedProperty(a, "query", "rules") ? (_.findIndex(a.query.rules, {
                    field: "tcpopt"
                }) < 0 && a.query.rules.push(m),
                a) : a
            },
            setTotalUsage: function(a) {
                i = a[0].total_bytes
            },
            resetTotalUsage: function() {
                i = 0
            },
            getTotalUsage: function() {
                return i
            },
            setAPIObject: function(a) {
                h = a
            },
            getAPIObject: function() {
                return h
            },
            setQueryBuilderComponents: function(a) {
                j = a
            },
            getQueryBuilderComponents: function() {
                return angular.copy(j)
            },
            getQueryBuilderTimeComponent: function() {
                var a, b;
                return a = _.findIndex(j, {
                    property: "entry_time"
                }),
                a > -1 && (b = j.splice(a, 1)[0]),
                angular.isDefined(b) ? b : void 0
            },
            setFilteredObject: function(a) {
                k = a
            },
            getFilteredObject: function() {
                return angular.copy(k)
            },
            formatFieldsData: function(a, b, c, d) {
                f.appendDeviceObjectToFieldsObj(a),
                f.appendLocalColorObjectToFieldsObj(a),
                f.appendDestinationIPObjectToFieldsObj(a),
                f.appendRemoteColorObjectToFieldsObj(a),
                f.appendDestinationSystemIPObjectToFieldsObj(a);
                var e;
                return e = _.findIndex(a, {
                    property: "src_ip"
                }),
                e > -1 && (a[e].isHidden = !0,
                a[e].defaultValue = d),
                e = _.findIndex(a, {
                    property: "dest_ip"
                }),
                e > -1 && (a[e].isHidden = !0,
                a[e].defaultValue = d),
                e = _.findIndex(a, {
                    property: "dest_port"
                }),
                e > -1 && a.splice(e, 1),
                e = _.findIndex(a, {
                    property: "vdevice_name"
                }),
                e > -1 && (a[e].isHidden = !0,
                a[e].defaultValue = b),
                a
            },
            getTopApplicationsFieldsData: function(f, g, h) {
                var i, j, k, l = a.defer(), m = this;
                return i = e.getTopApplicationsCFLOWDFieldsData(),
                angular.isDefined(i) ? (j = angular.copy(i),
                k = m.formatFieldsData(j, f, g, h),
                l.resolve(k)) : c.get(d.TOP_APPLICATION_CFLOWD_FIELDS_URL).then(function(a) {
                    e.setTopApplicationsCFLOWDFieldsData(a.data),
                    j = angular.copy(a.data),
                    k = m.formatFieldsData(j, f, g, h),
                    l.resolve(k)
                }, function() {
                    b.info("Error while retrieving fields data for cflowd"),
                    l.reject([])
                }),
                l.promise
            },
            getChartConfig: function() {
                var a, b;
                return a = {
                    name: "topFlows",
                    zoom: !0,
                    filtersSelected: {
                        xAxis: [],
                        yAxis: ["total_bytes"],
                        series: []
                    },
                    formatDataToBytes: !0,
                    replaceToolTipTextWithYAxisTitleText: !0
                },
                b = {
                    options: {
                        tooltip: {
                            formatter: function() {
                                var a = "";
                                return a += "<b>" + this.points[0].key + "<b><br/>",
                                a += '<span style="color:' + this.points[0].color + '">■    </span>',
                                a += "<span>Total Bytes:  </span>",
                                a += "<span>" + g.formatBytes(this.y, !0) + "</span>",
                                a += "<br/>"
                            }
                        }
                    },
                    title: {
                        text: ""
                    },
                    xAxis: {
                        type: "category",
                        labels: {
                            enabled: !0,
                            autoRotation: !0,
                            rotation: -45,
                            step: 1,
                            formatter: function() {
                                return this.value
                            }
                        },
                        title: {
                            text: ""
                        }
                    },
                    yAxis: {
                        type: "logarithmic",
                        min: .1,
                        labels: {
                            enabled: !0
                        },
                        title: {
                            text: "Usage"
                        }
                    }
                },
                [a, b]
            },
            resetVariables: function() {
                k = void 0
            },
            filterSystemIP: function(a, b) {
                c.get(d.DEVICE_BFD_LIVE_STATS + b).then(function(b) {
                    var c = Object.keys(_.groupBy(b.data, function(a) {
                        return a["system-ip"]
                    }))
                      , d = _.find(a, {
                        property: "remote_system_ip"
                    });
                    d && c && (d.componentTypeEnumOptions = _.filter(d.componentTypeEnumOptions, function(a) {
                        return c.indexOf(a.key) > -1
                    }))
                })
            }
        }
    }
    angular.module("vManage").factory("TopTalkersService", a),
    a.$inject = ["$q", "$log", "restService", "monitorApiConstants", "tenantDashboardService", "DeviceService", "appUtil"]
}(),
angular.module("vManage").factory("PacketCaptureService", PacketCaptureService),
PacketCaptureService.$inject = ["$timeout", "$q", "restService", "monitorApiConstants", "appUtil"],
function() {
    function a(a) {
        var b = {};
        return b.formatNextHopType = function(b) {
            return a.formatEncapsulation(b.replace("nh-", ""))
        }
        ,
        b.getEncapCounts = function(a) {
            return _.countBy(a, "type")
        }
        ,
        b.getSummaryString = function(a) {
            var b = ""
              , c = "";
            return angular.forEach(a, function(a, b) {
                c = b
            }),
            angular.forEach(a, function(a, d) {
                b += d + " : <span>" + a + "</span>",
                d !== c && (b += " | ")
            }),
            b
        }
        ,
        b
    }
    angular.module("vManage").factory("SimulateFlowsFactory", a),
    a.$inject = ["appUtil"]
}(),
angular.module("vManage").factory("SimulateFlowsService", SimulateFlowsService),
SimulateFlowsService.$inject = ["$http", "$q", "restService", "monitorApiConstants", "notification", "TemplateField", "appUtil", "$filter", "templateConstants"],
function() {
    function a() {
        return {}
    }
    angular.module("vManage").factory("SpeedTestFactory", a),
    a.$inject = []
}(),
angular.module("vManage").factory("SpeedTestService", SpeedTestService),
SpeedTestService.$inject = ["restService", "monitorApiConstants", "appUtil", "$log", "notification", "$timeout"],
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        var l = !1
          , m = {
            source: 6e5
        }
          , n = {
            value: [],
            field: "name",
            type: "string",
            operator: "in"
        }
          , o = {
            value: [],
            field: "vdevice_name",
            type: "string",
            operator: "in"
        }
          , p = {
            value: [],
            field: "entry_time",
            type: "date",
            operator: "between"
        }
          , q = {
            value: ["24"],
            field: "entry_time",
            type: "date",
            operator: "last_n_hours"
        }
          , r = {
            field: [{
                property: "name",
                sequence: 1
            }, {
                property: "proto",
                sequence: 2
            }]
        }
          , s = {
            xAxisProperty: "entry_time",
            yAxisProperty: ["loss_percentage"],
            seriesNames: {
                property: "name",
                values: []
            },
            chartDefinition: {
                asyncLoad: !0,
                yAxisUnit: "%"
            },
            chartConfig: {
                options: {
                    plotOptions: {
                        series: {
                            marker: {
                                enabled: !0
                            }
                        }
                    }
                }
            }
        }
          , t = [{
            property: "name",
            values: []
        }, {
            property: "name",
            values: []
        }, {
            property: "name",
            values: []
        }]
          , u = {
            chartOptions: {
                loss_percentage: {
                    id: "loss_percentage",
                    name: "Loss Percentage",
                    title: ["Loss", "Rx", "Tx"],
                    properties: ["loss_percentage", "rx_octets", "tx_octets"],
                    axisLabel: ["Loss", "rx", "tx"],
                    yAxisUnit: "",
                    formatDataToBytes: !0,
                    isSelected: !1,
                    aggregateBy: ["avg", "sum", "sum"],
                    chartObject: void 0
                },
                latency_jitter: {
                    id: "latency_jitter",
                    name: "Latency/Jitter",
                    title: ["Latency", "Jitter", "Rx", "Tx"],
                    yAxisUnit: "ms",
                    properties: ["latency", "jitter", "rx_octets", "tx_octets"],
                    axisLabel: ["lat", "jit", "rx", "tx"],
                    isSelected: !1,
                    aggregateBy: ["avg", "avg", "sum", "sum"],
                    chartObject: void 0
                }
            }
        }
          , v = {
            chartOptions: {
                loss_percentage: {
                    id: "loss_percentage",
                    name: "Loss Percentage",
                    title: ["Loss", "No. of Flows"],
                    properties: ["loss_percentage", "count"],
                    axisLabel: ["Loss", "No. of Flows"],
                    yAxisUnit: "",
                    formatDataToBytes: !0,
                    isSelected: !1,
                    aggregateBy: ["avg", "sum"],
                    chartObject: void 0
                },
                latency_jitter: {
                    id: "latency_jitter",
                    name: "Latency/Jitter",
                    title: ["Latency", "Jitter", "No. of Flows"],
                    yAxisUnit: "ms",
                    properties: ["latency", "jitter", "count"],
                    axisLabel: ["lat", "jit", "No. of Flows"],
                    isSelected: !1,
                    aggregateBy: ["avg", "avg", "sum"],
                    chartObject: void 0
                }
            }
        }
          , w = [{
            name: "TCP(6)",
            id: "6"
        }, {
            name: "UDP(17)",
            id: "17"
        }, {
            name: "ICMP(1)",
            id: "1"
        }]
          , x = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "troubleshooting",
            title: "Troubleshooting",
            state: "app.monitor.devices.dashboard.troubleshooting.dashboard"
        }, {
            name: "traffic-AppRouteVisualization",
            title: "App Route Visualization"
        }]
          , y = ["1", "2", "3", "5", "10", "20"];
        return {
            getBreadCrumStates: function() {
                return x
            },
            getProtocols: function() {
                return w
            },
            getAppRouteVisualizeSeriesName: function() {
                return t
            },
            getGranularity: function() {
                return y
            },
            createFilterForApplication: function(a) {
                var b = angular.lowercase(a);
                return function(a) {
                    return 0 === a.value.toLowerCase().indexOf(b)
                }
            },
            createFilterForSystemIp: function(a) {
                var b = angular.lowercase(a);
                return function(a) {
                    return 0 === a.display.toLowerCase().indexOf(b) || 0 === a.name.toLowerCase().indexOf(b)
                }
            },
            getapplications: function(a) {
                var c = b.defer()
                  , d = [];
                return a.length ? c.resolve(a) : i.getApplicationList().then(function(b) {
                    angular.forEach(b.data, function(b) {
                        var c = {
                            id: b.id,
                            value: b.name,
                            postValue: b.name
                        };
                        a.push(c)
                    }),
                    c.resolve(a),
                    a.sort(function(a, b) {
                        return a.value.localeCompare(b.value)
                    }),
                    j.sessionStorage.setItem("applicationList", JSON.stringify(a));
                    var e = Object.keys(_.groupBy(b.data, function(a) {
                        return a.family
                    }));
                    angular.forEach(e, function(a) {
                        d.push({
                            id: a,
                            value: a,
                            postValue: a
                        })
                    }),
                    d.sort(function(a, b) {
                        return a.value.localeCompare(b.value)
                    }),
                    j.sessionStorage.setItem("applicationFamilyList", JSON.stringify(d))
                }, function(a) {
                    c.reject(a)
                }),
                c.promise
            },
            getChartOptions: function(a) {
                return "none" == a ? u.chartOptions : v.chartOptions
            },
            getTunnelsFieldsData: function() {
                var a = b.defer();
                return h.getTunnelFields().then(function(b) {
                    var c = _.find(b.data, {
                        property: "entry_time"
                    });
                    a.resolve([c])
                }, function(b) {
                    a.reject(b)
                }),
                a.promise
            },
            getAppRoutePollInterval: function(d) {
                var e = b.defer()
                  , f = angular.copy(m);
                return l ? e.resolve(f) : a.getAppRoutePollInterval(d).then(function(a) {
                    a.data.length > 0 && angular.isDefined(a.data[0]["poll-interval"]) && (f.source = a.data[0]["poll-interval"],
                    l = !0),
                    e.resolve(f)
                }, function() {
                    c.error("Failed to get App route poll interval for destination device : " + d),
                    e.resolve(f)
                }),
                e.promise
            },
            generateDataKey: function(a, b, c, d, e) {
                var g, h, i;
                g = angular.copy(b),
                i = g.indexOf("All"),
                i > -1 && g.splice(i, 1),
                h = angular.copy(c[d.remoteSystemIp.name]),
                i = h.indexOf("All"),
                i > -1 && h.splice(i, 1),
                angular.forEach(g, function(b) {
                    angular.forEach(h, function(c) {
                        var g = e + ":" + b + "-" + d.remoteSystemIp.name + ":" + c
                          , h = f.getDeviceHostName(e) + ":" + b + "-" + f.getDeviceHostName(d.remoteSystemIp.name) + ":" + c;
                        a.push({
                            name: g,
                            "name-hostname": h
                        })
                    })
                })
            },
            appendDataToAggregation: function(b, c, d, e, f) {
                var g = _.find(b.query.rules, {
                    field: "name"
                });
                g.value.reset(),
                g.value = _.pluck(e, "name");
                var h = _.find(b.query.rules, {
                    field: "vdevice_name"
                });
                if (h.value.reset(),
                h.value.push(c),
                f.granularityEnabled) {
                    var i = _.find(b.query.rules, {
                        field: "entry_time"
                    });
                    i.value.reset();
                    var j = new Date(f.startTime.replace(/-/g, "/")).getTime()
                      , l = j + 36e5 * f.granularity
                      , m = k("date")(new Date(j), "yyyy-MM-ddTHH:mm:ss", "UTC") + " UTC"
                      , n = k("date")(new Date(l), "yyyy-MM-ddTHH:mm:ss", "UTC") + " UTC";
                    i.value.push(m),
                    i.value.push(n)
                }
                return b = a.setHistogramInterval(b, d),
                f.granularityEnabled && (b.aggregation.histogram.interval = parseInt(f.granularity, 10)),
                b
            },
            constructAggregation: function(a, b, c) {
                var d = _.find(a.query.rules, {
                    field: "vdevice_name"
                });
                d || a.query.rules.push(angular.copy(o));
                var d = _.find(a.query.rules, {
                    field: "name"
                });
                d || a.query.rules.push(n);
                var e = _.find(a.query.rules, {
                    field: "entry_time"
                });
                return e && (_.remove(a.query.rules, {
                    field: "entry_time"
                }),
                c ? a.query.rules.push(p) : a.query.rules.push(q)),
                a.aggregation = angular.copy(r),
                a.aggregation.metrics = [],
                angular.forEach(b.properties, function(c, d) {
                    a.aggregation.metrics.push({
                        property: c,
                        type: b.aggregateBy[d]
                    })
                }),
                a
            },
            getDPIaggregation: function(b, c, d, e) {
                b.aggregation.metrics = [{
                    property: "flow_id",
                    type: "cardinality"
                }],
                b.aggregation.field = [{
                    property: "local_color",
                    sequence: 1
                }, {
                    property: "remote_color",
                    sequence: 2
                }, {
                    property: "local_system_ip",
                    sequence: 3
                }, {
                    property: "remote_system_ip",
                    sequence: 4
                }, {
                    property: "tunnel_encap",
                    sequence: 5
                }];
                var f = _.find(b.query.rules, {
                    field: "vdevice_name"
                });
                f.value.reset(),
                f.value.push(d);
                var f = _.find(b.query.rules, {
                    field: "name"
                });
                f && _.remove(b.query.rules, {
                    field: "name"
                }),
                b.query.rules.push({
                    value: [c.dpi.postValue],
                    field: c.appFilterType,
                    type: "string",
                    operator: "in"
                }),
                b.query.rules.push({
                    value: [c.remoteSystemIp.name],
                    field: "remote_system_ip",
                    type: "string",
                    operator: "in"
                });
                var g = _.find(b.query.rules, {
                    field: "entry_time"
                });
                if (c.granularityEnabled) {
                    g.value.reset();
                    var h = new Date(c.startTime.replace(/-/g, "/")).getTime()
                      , i = h + 36e5 * c.granularity
                      , j = k("date")(new Date(h), "yyyy-MM-ddTHH:mm:ss", "UTC") + " UTC"
                      , l = k("date")(new Date(i), "yyyy-MM-ddTHH:mm:ss", "UTC") + " UTC";
                    g.value.push(j),
                    g.value.push(l)
                } else
                    _.remove(b.query.rules, {
                        field: "entry_time"
                    }),
                    b.query.rules.push(q);
                return b = a.setHistogramInterval(b, e)
            },
            getCFLOWDaggregation: function(b, c, d, e) {
                b.aggregation.metrics = [],
                b.aggregation.field = [{
                    property: "local_color",
                    sequence: 1
                }, {
                    property: "remote_color",
                    sequence: 2
                }, {
                    property: "local_system_ip",
                    sequence: 3
                }, {
                    property: "remote_system_ip",
                    sequence: 4
                }];
                var f = _.find(b.query.rules, {
                    field: "vdevice_name"
                });
                return f.value.reset(),
                f.value.push(d),
                b.query.rules.pop(),
                c.cflowd.sourceIP && b.query.rules.push({
                    value: [c.cflowd.sourceIP],
                    field: "src_ip",
                    type: "string",
                    operator: "in"
                }),
                c.cflowd.destinationIP && b.query.rules.push({
                    value: [c.cflowd.destinationIP],
                    field: "dest_ip",
                    type: "string",
                    operator: "in"
                }),
                c.cflowd.sourcePort && b.query.rules.push({
                    value: [c.cflowd.sourcePort.toString()],
                    field: "src_port",
                    type: "string",
                    operator: "in"
                }),
                c.cflowd.destinationPort && b.query.rules.push({
                    value: [c.cflowd.destinationPort.toString()],
                    field: "dest_port",
                    type: "string",
                    operator: "in"
                }),
                c.cflowd.protocol && b.query.rules.push({
                    value: [c.cflowd.protocol.id],
                    field: "ip_proto",
                    type: "int",
                    operator: "equal"
                }),
                b.query.rules.push({
                    value: [c.remoteSystemIp.name],
                    field: "remote_system_ip",
                    type: "string",
                    operator: "in"
                }),
                b = a.setHistogramInterval(b, e)
            },
            getDataForDeviceSelected: function(a) {
                return e.post(d.APP_ROUTE_STATS, a)
            },
            getDpiFlowsData: function(a, c, d) {
                var f, g, h, i, j = b.defer();
                return d.granularityEnabled ? (f = "?deviceId=" + _.find(c.query.rules, {
                    field: "vdevice_name"
                }).value[0],
                h = "&" + d.appFilterType + "=" + d.dpi.postValue,
                g = "&interval=" + k("date")(new Date(d.startTime.replace(/-/g, "/")), "yyyy-MM-ddTHH:mm:ss", "UTC") + " UTC",
                i = "&window=" + d.granularity,
                a = a + f + h + g + i,
                e.get(a).then(function(a) {
                    j.resolve(a)
                }, function(a) {
                    j.reject(a)
                })) : e.post(a, c).then(function(a) {
                    j.resolve(a)
                }, function(a) {
                    j.reject(a)
                }),
                j.promise
            },
            getYAxisChartConfig: function(a, b, c, d, e) {
                var f = {
                    min: 0,
                    minRange: 1,
                    lineWidth: 2,
                    labels: {
                        enabled: !0
                    },
                    opposite: !1,
                    title: {
                        text: e
                    },
                    offset: 0,
                    top: a,
                    height: b,
                    max: null,
                    customOptions: {
                        yAxisUnit: c,
                        formatDataToBytes: d
                    }
                };
                return f
            },
            setYaxisTitle: function(a, b, c) {
                for (var d = 0; d < c; d++)
                    a.highChartApi.yAxis[d].setTitle({
                        text: b.title[d]
                    }, !1)
            },
            getChartDefinition: function() {
                return s.chartDefinition
            },
            getChartConfig: function() {
                return s.chartConfig
            },
            getChartXAxisProperty: function() {
                return s.xAxisProperty
            },
            updateAxisLabel: function(a, b) {
                for (var c = 0; c < a.highChartApi.yAxis.length; c++)
                    a.updateSeriesAxisLabel(b.selection.axisLabel[c], c)
            },
            updateSourceDeviceAppRoutePollIntervalIsSet: function(a) {
                l = a
            }
        }
    }
    angular.module("vManage").factory("AppRouteVisualizationService", a),
    a.$inject = ["WANTlocService", "$q", "$log", "monitorApiConstants", "restService", "DeviceListCache", "rbacService", "WANTunnelService", "SimulateFlowsService", "$window", "$filter"]
}(),
function() {
    function a(a, b, c) {
        var d;
        return {
            setSessionID: function(a) {
                d = a
            },
            getDeviceStatus: function() {
                return a.get(b.LOG_FILE_LIST)
            },
            getLog: function(c, d) {
                var e;
                return e = angular.isDefined(d) && d > 0 ? b.GET_LOG + "/" + c + "?logId=" + d : b.GET_LOG + "/" + c,
                a.get(e)
            },
            searchLog: function(c, d) {
                return a.post(b.GET_LOG + "/search/" + c, d)
            },
            downloadLog: function(c, d) {
                return a.get(b.DOWNLOAD_LOG + "/" + c + "/" + d + "/download")
            },
            enableStreaming: function(c) {
                return a.post(b.UPDATE_STREAMING_STATUS, c)
            },
            disableStreaming: function() {
                var c = d;
                return d = void 0,
                a.get(b.UPDATE_STREAMING_STATUS + "/disable/" + c)
            },
            renew: function(c) {
                return a.get(b.UPDATE_STREAMING_STATUS + "/renew/" + c)
            },
            destroySession: function() {
                var a = c.defer();
                return angular.isDefined(d) ? this.disableStreaming() : (a.resolve(),
                a.promise)
            }
        }
    }
    angular.module("vManage").service("DebugLogService", a),
    a.$inject = ["restService", "monitorApiConstants", "$q"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h = [{
            type: "connectivity",
            title: "Connectivity",
            imgUrl: "images/group-29.svg",
            visibility: !0,
            options: [{
                title: "Device Bringup",
                name: "deviceBringUp",
                visibility: !0,
                stateName: "app.monitor.devices.dashboard.troubleshooting.device_bring_up",
                applicableDeviceTypes: ["vedge"]
            }, {
                title: "Control Connections(Live View)",
                name: "controlConnections",
                visibility: !0,
                stateName: "app.monitor.devices.dashboard.troubleshooting.control_connections",
                applicableDeviceTypes: ["vedge"]
            }, {
                title: "Ping",
                name: "ping",
                visibility: !0,
                stateName: "app.monitor.devices.dashboard.troubleshooting.ping",
                applicableDeviceTypes: ["vedge", "vsmart", "vbond", "vmanage"]
            }, {
                name: "traceRoute",
                title: "Trace Route",
                visibility: !0,
                stateName: "app.monitor.devices.dashboard.troubleshooting.traceroute",
                applicableDeviceTypes: ["vedge", "vsmart", "vbond", "vmanage"]
            }, {
                name: "speedTest",
                title: "Speed Test",
                visibility: !1,
                stateName: "app.monitor.devices.dashboard.troubleshooting.speed_test",
                applicableDeviceTypes: ["vedge"]
            }]
        }, {
            type: "traffic",
            title: "Traffic",
            visibility: !0,
            imgUrl: "images/group-24.svg",
            options: [{
                name: "tunnelHealth",
                title: "Tunnel Health",
                visibility: !0,
                stateName: "app.monitor.devices.dashboard.troubleshooting.tunnel_comparison",
                applicableDeviceTypes: ["vedge"]
            }, {
                name: "appRouteVisualization",
                title: "App Route Visualization",
                visibility: !0,
                stateName: "app.monitor.devices.dashboard.troubleshooting.approute_visualization",
                applicableDeviceTypes: ["vedge"]
            }, {
                name: "flowVisualization",
                title: "Flow Visualization",
                visibility: !1,
                applicableDeviceTypes: ["vedge", "vsmart", "vbond", "vmanage"]
            }, {
                name: "packetCapture",
                title: "Packet Capture",
                visibility: !1,
                stateName: "app.monitor.devices.dashboard.troubleshooting.packet_capture",
                applicableDeviceTypes: ["vedge"]
            }, {
                name: "simulatedFlows",
                title: "Simulate Flows",
                visibility: !0,
                stateName: "app.monitor.devices.dashboard.troubleshooting.simulate_flows",
                applicableDeviceTypes: ["vedge", "vbond"]
            }]
        }, {
            type: "logs",
            title: "Logs",
            visibility: !0,
            imgUrl: "images/group-30.svg",
            options: [{
                name: "debugLog",
                title: "Debug Log",
                visibility: !0,
                stateName: "app.monitor.devices.dashboard.troubleshooting.debug_log",
                applicableDeviceTypes: ["vedge"]
            }]
        }];
        return {
            getDeviceStatus: function(c) {
                return a.get(b.DEVICE_INFO + "?uuid=" + c)
            },
            getTroubleShootingOptions: function() {
                return h
            },
            getPingData: function(b, d, e) {
                var f = b ? c.NPING_DEVICE_URL : c.PING_DEVICE_URL;
                return a.post(f + d, e, {
                    timeout: 6e5
                })
            },
            startTraceroute: function(b, d) {
                return a.post(c.TRACEROUTE_URL + b, {
                    deviceIp: b,
                    vpn: d.vpn,
                    host: d.host,
                    interface: d.interface,
                    size: d.size
                }, {
                    timeout: 6e5
                })
            },
            getVPNList: function() {
                return a.get(c.VPN_LIST)
            },
            formatInterfaceVPNData: function(a, b, c, e) {
                var f, g;
                a.sort(function(a, b) {
                    return parseInt(a["vpn-id"]) - parseInt(b["vpn-id"])
                }),
                angular.forEach(a, function(a) {
                    if (angular.isDefined(a["ip-address"]) && "-" !== a["ip-address"] || angular.isDefined(a["ipv6-address"]) && "-" !== a["ipv6-address"]) {
                        f = {},
                        g = {},
                        d.checkNestedProperty(a, "af-type") && angular.equals(a["af-type"], "ipv6") ? f.value = a.ifname + " - ipv6 - " + a["ipv6-address"].split("/")[0] : f.value = a.ifname + " - ipv4 - " + a["ip-address"].split("/")[0],
                        f.key = a.ifname,
                        f.isValid = !0,
                        f.ipAddress = a["ip-address"].split("/")[0],
                        f.vpnKeys = [],
                        g.value = c + " - " + a["vpn-id"],
                        g.key = parseInt(a["vpn-id"]),
                        g.isValid = !0,
                        g.interfaceKeys = [];
                        var h = _.find(e, {
                            key: g.key
                        });
                        angular.isDefined(h) ? h.interfaceKeys.push(f) : (g.interfaceKeys.push(f),
                        e.push(g)),
                        f.vpnKeys.push(g),
                        (angular.equals(a["if-admin-status"], "Down") || angular.equals(a["if-oper-status"], "Down")) && (f.disable = !0),
                        b.push(f)
                    }
                }),
                b.sort(function(a, b) {
                    var c = a.key.toLowerCase()
                      , d = b.key.toLowerCase();
                    return c < d ? -1 : c > d ? 1 : 0
                })
            },
            formatInterfaceData: function(a, b) {
                var c;
                angular.forEach(a, function(a) {
                    c = {},
                    c.value = angular.isDefined(a["ip-address"]) ? a["ip-address"].split("/")[0] + " - " + a.ifname : a.ifname,
                    c.key = a.ifname,
                    b.push(c)
                })
            },
            getInterfaceList: function(b) {
                return a.get(c.INTERFACE_LIST + "?deviceId=" + b)
            },
            getDeviceBringUpStatus: function(b) {
                return a.get(c.DEVICE_BRING_UP + "?uuid=" + b)
            },
            getDeviceSupportedVersion: function(b) {
                return a.get(c.DEVICE_SUPPORTED_VERSION + "?deviceId=" + b)
            },
            getBfdDeviceDetails: function(b) {
                return a.get(c.DEVICE_BFD_LIVE_STATS + b)
            },
            getDeviceInfoFromSourceIp: function(a, b, c, d) {
                function g(a, b) {
                    var c = Object.keys(_.groupBy(a, function(a) {
                        return a["system-ip"]
                    }));
                    angular.forEach(c, function(c) {
                        var d = _.filter(a, function(a) {
                            return a["system-ip"] === c
                        })
                          , e = Object.keys(_.groupBy(d, function(a) {
                            return a.color
                        }));
                        b[c] = e
                    })
                }
                var h = this
                  , i = e.defer();
                return h.getBfdDeviceDetails(a).then(function(a) {
                    var e = a.data
                      , h = Object.keys(_.groupBy(a.data, function(a) {
                        return a["local-color"]
                    }));
                    angular.forEach(h, function(a) {
                        b.push(a)
                    }),
                    g(e, d),
                    angular.forEach(Object.keys(d), function(a) {
                        c.push({
                            name: a,
                            display: f.getDeviceHostName(a) + " | " + a
                        })
                    }),
                    i.resolve()
                }, function(a) {
                    i.reject(a)
                }),
                i.promise
            },
            getYAxisChartConfig: function(a, b, c, d, e) {
                var f = {
                    min: 0,
                    minRange: 1,
                    lineWidth: 2,
                    labels: {
                        enabled: !0
                    },
                    opposite: !1,
                    title: {
                        text: e
                    },
                    offset: 0,
                    top: a,
                    height: b,
                    max: null,
                    customOptions: {
                        yAxisUnit: c,
                        formatDataToBytes: d
                    }
                };
                return f
            },
            addChartSeries: function(a, b, c, d, e, f) {
                a.addSeriesFromRawDataMultiYAxis(_.map(c, function(a) {
                    return {
                        name: a.name,
                        display: a["name-hostname"],
                        yAxis: b,
                        seriesCustomOptions: {
                            formatDataToBytes: d,
                            yAxisUnit: e
                        }
                    }
                }), f, b)
            },
            updateMetricsDetailsInAggregation: function(a, b) {
                a.aggregation.metrics.reset(),
                angular.forEach(b.properties, function(c, d) {
                    a.aggregation.metrics.push({
                        property: c,
                        type: b.aggregateBy[d]
                    })
                })
            },
            getQueryBuilderTimeComponent: function(a) {
                var b;
                return b = _.find(a, {
                    property: "entry_time"
                }),
                angular.isDefined(b) ? b : void 0
            },
            updateTimeStampValueInAggregation: function(a, b, c) {
                var d = _.find(c.query.rules, {
                    field: "entry_time"
                })
                  , e = _.findIndex(a.query.rules, {
                    field: "entry_time"
                });
                return a.query.rules[e] = d,
                a = g.setHistogramInterval(a, b)
            },
            isDataStreamEnabled: function() {
                return a.get(c.DATA_STREAM)
            },
            setDataStreamServicesVisibility: function(a, b) {
                angular.forEach(h, function(c) {
                    angular.forEach(c.options, function(c) {
                        _.indexOf(a, c.name) > -1 && (c.visibility = b)
                    }),
                    _.indexOf(a, "debugLog") > -1 && "logs" == c.type && (c.visibility = b)
                })
            }
        }
    }
    angular.module("vManage").service("TroubleshootingService", a),
    a.$inject = ["restService", "apiConstants", "monitorApiConstants", "appUtil", "$q", "DeviceListCache", "WANTlocService"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        var i = !1
          , j = {
            source: 6e5,
            destination: 6e5
        }
          , k = [{
            property: "name",
            values: []
        }, {
            property: "name",
            values: []
        }]
          , l = {
            value: [],
            field: "name",
            type: "string",
            operator: "in"
        }
          , m = {
            value: [],
            field: "vdevice_name",
            type: "string",
            operator: "in"
        }
          , n = {
            field: [{
                property: "name",
                sequence: 1
            }, {
                property: "proto",
                sequence: 2
            }]
        }
          , o = [{
            name: "network",
            title: "Network",
            state: "app.monitor.devices.grid"
        }, {
            name: "troubleshooting",
            title: "Troubleshooting",
            state: "app.monitor.devices.dashboard.troubleshooting.dashboard"
        }, {
            name: "TunnelHealth",
            title: "Tunnel Health"
        }]
          , p = {
            xAxisProperty: "entry_time",
            yAxisProperty: ["loss_percentage"],
            seriesNames: {
                property: "name",
                values: []
            },
            chartDefinition: {
                asyncLoad: !0,
                yAxisUnit: "%"
            },
            chartConfig: {
                options: {
                    plotOptions: {
                        series: {
                            marker: {
                                enabled: !0
                            }
                        }
                    }
                }
            },
            chartOptions: {
                loss_percentage: {
                    id: "loss_percentage",
                    name: "Loss Percentage",
                    yAxisUnit: "%",
                    isSelected: !0,
                    aggregateBy: ["avg"],
                    chartObject: void 0,
                    formatDataToBytes: !1
                },
                latency_jitter: {
                    id: "latency_jitter",
                    name: "Latency/Jitter",
                    title: ["Latency", "Jitter"],
                    yAxisUnit: "ms",
                    properties: ["latency", "jitter"],
                    axisLabel: ["lat", "jit"],
                    isSelected: !1,
                    aggregateBy: ["avg", "avg"],
                    chartObject: void 0,
                    formatDataToBytes: !1
                },
                octets: {
                    id: "octets",
                    name: "Octets",
                    title: ["Rx Octets", "Tx Octets"],
                    properties: ["rx_octets", "tx_octets"],
                    axisLabel: ["rx", "tx"],
                    yAxisUnit: "",
                    formatDataToBytes: !0,
                    isSelected: !1,
                    aggregateBy: ["sum", "sum"],
                    chartObject: void 0
                }
            }
        };
        return {
            getChartDefinition: function() {
                return p.chartDefinition
            },
            getChartConfig: function() {
                return p.chartConfig
            },
            getChartXAxisProperty: function() {
                return p.xAxisProperty
            },
            getTunnelSeriesName: function() {
                return k
            },
            getBreadCrums: function() {
                return o
            },
            getChartOptions: function() {
                return p.chartOptions
            },
            getTunnelsFieldsData: function() {
                var a = b.defer();
                return h.getTunnelFields().then(function(b) {
                    var c = _.find(b.data, {
                        property: "entry_time"
                    });
                    a.resolve([c])
                }, function(b) {
                    a.reject(b)
                }),
                a.promise
            },
            getAppRoutePollInterval: function(d, e) {
                var f = b.defer()
                  , h = angular.copy(j);
                return i ? g.getDeviceInfoFromLocalSystemIp(e).then(function(b) {
                    if (angular.isDefined(b.data) && b.data.length > 0 && angular.isDefined(b.data[0]["system-ip"])) {
                        var d = b.data[0]["system-ip"];
                        a.getAppRoutePollInterval(d).then(function(a) {
                            a.data.length > 0 && angular.isDefined(a.data[0]["poll-interval"]) && (h.destination = a.data[0]["poll-interval"]),
                            f.resolve(h)
                        }, function() {
                            c.error("Failed to get App route poll interval for destination device : " + d),
                            f.resolve(h)
                        })
                    }
                }, function() {
                    c.error("Failed to get device details from local system Ip"),
                    f.resolve(h)
                }) : g.getDeviceInfoFromLocalSystemIp(e).then(function(e) {
                    if (angular.isDefined(e.data) && e.data.length > 0 && angular.isDefined(e.data[0]["system-ip"])) {
                        var g = e.data[0]["system-ip"];
                        b.all([a.getAppRoutePollInterval(d), a.getAppRoutePollInterval(g)]).then(function(a) {
                            a[0].data.length > 0 && angular.isDefined(a[0].data[0]["poll-interval"]) && (h.source = a[0].data[0]["poll-interval"],
                            i = !0),
                            a[1].data.length > 0 && angular.isDefined(a[1].data[0]["poll-interval"]) && (h.destination = a[1].data[0]["poll-interval"]),
                            f.resolve(h)
                        }, function() {
                            c.error("Failed to get App route poll intervals"),
                            f.resolve(h)
                        })
                    }
                }, function() {
                    c.error("Failed to get device details from local system Ip"),
                    f.resolve(h)
                }),
                f.promise
            },
            generateDataKey: function(a, b, c, d, e, g) {
                var h, i, j;
                "All" === e.sourceTlocColor ? (h = angular.copy(c),
                j = h.indexOf("All"),
                j > -1 && h.splice(j, 1)) : (h = [],
                h.push(e.sourceTlocColor)),
                "All" === e.remoteTlocColor ? (i = angular.copy(d[e.remoteSystemIp.name]),
                j = i.indexOf("All"),
                j > -1 && i.splice(j, 1)) : (i = [],
                i.push(e.remoteTlocColor)),
                angular.forEach(h, function(c) {
                    angular.forEach(i, function(d) {
                        var h = g + ":" + c + "-" + e.remoteSystemIp.name + ":" + d
                          , i = f.getDeviceHostName(g) + ":" + c + "-" + f.getDeviceHostName(e.remoteSystemIp.name) + ":" + d;
                        a.push({
                            name: h,
                            "name-hostname": i
                        });
                        var j = e.remoteSystemIp.name + ":" + d + "-" + g + ":" + c
                          , k = f.getDeviceHostName(e.remoteSystemIp.name) + ":" + d + "-" + f.getDeviceHostName(g) + ":" + c;
                        b.push({
                            name: j,
                            "name-hostname": k
                        })
                    })
                })
            },
            updateMetricsDetailsInAggregation: function(a, b) {
                a.aggregation.metrics.reset(),
                a.aggregation.metrics = b
            },
            appendDataToAggregation: function(b, c, d, e) {
                var f = _.find(b.query.rules, {
                    field: "name"
                });
                f.value = _.pluck(e, "name");
                var g = _.find(b.query.rules, {
                    field: "vdevice_name"
                });
                return g.value.reset(),
                g.value.push(c),
                b = a.setHistogramInterval(b, d)
            },
            constructAggregation: function(a, b) {
                var c = _.find(a.query.rules, {
                    field: "vdevice_name"
                });
                c || a.query.rules.push(angular.copy(m));
                var c = _.find(a.query.rules, {
                    field: "name"
                });
                return c || a.query.rules.push(l),
                a.aggregation = angular.copy(n),
                a.aggregation.metrics = [],
                angular.isArray(b.properties) ? a.aggregation.metrics = [{
                    property: b.properties[0],
                    type: b.aggregateBy[0]
                }, {
                    property: b.properties[1],
                    type: b.aggregateBy[1]
                }] : a.aggregation.metrics = [{
                    property: b.id,
                    type: b.aggregateBy[0]
                }],
                a
            },
            getDataForDeviceSelected: function(a) {
                return e.post(d.APP_ROUTE_STATS, a)
            },
            createFilterForRemoteIp: function(a) {
                var b = angular.lowercase(a);
                return function(a) {
                    return 0 === a.display.toLowerCase().indexOf(b) || 0 === a.name.toLowerCase().indexOf(b)
                }
            },
            updateAxisLabel: function(a, b) {
                if (a.highChartApi.yAxis.length > 1)
                    for (var c = 0; c < a.highChartApi.yAxis.length; c++)
                        a.updateSeriesAxisLabel(b.selection.axisLabel[c], c)
            },
            updateSourceDeviceAppRoutePollIntervalIsSet: function(a) {
                i = a
            }
        }
    }
    angular.module("vManage").factory("TunnelComparisonService", a),
    a.$inject = ["WANTlocService", "$q", "$log", "monitorApiConstants", "restService", "DeviceListCache", "rbacService", "WANTunnelService"]
}(),
function() {
    function a(a, b, c, d, e) {
        var f = [{
            property: "local_color",
            title: "Local Color",
            dataType: "string",
            isDisplay: !0
        }, {
            property: "state",
            dataType: "string",
            title: "State",
            display: "icon",
            iconProperty: "state",
            icon: [{
                key: "up",
                value: "images/up.png"
            }, {
                key: "partial",
                value: "images/partial.png"
            }, {
                key: "down",
                value: "images/down.png"
            }],
            hideable: !1,
            width: 70
        }, {
            property: "jitter",
            title: "Jitter (ms)",
            dataType: "number",
            decimal: 2,
            isDisplay: !0
        }, {
            property: "loss_percentage",
            title: "Loss (%)",
            dataType: "number",
            decimal: 2,
            isDisplay: !0
        }, {
            property: "latency",
            title: "Latency (ms)",
            dataType: "number",
            decimal: 2,
            isDisplay: !0
        }, {
            property: "application",
            title: "Application Usage Link",
            dataType: "string",
            minWidth: 200,
            cellTemplate: '<div class="ui-grid-cell-contents toggleContent" data-ng-click="grid.appScope.isApplicationDetailsButtonEnabled() && grid.appScope.viewApplicationDetails(row)"><span id="view_flow_details" class="link-cell" data-ng-class="{\'disabled\': !grid.appScope.isApplicationDetailsButtonEnabled()}">Application Usage</span></div>',
            sortable: !1,
            hideable: !1,
            isSearch: !1
        }]
          , g = ["jitter", "loss_percentage", "latency"]
          , h = {
            xAxisProperty: "entry_time",
            yAxisProperty: ["loss_percentage"],
            seriesNames: {
                property: "local_color",
                values: []
            },
            chartDefinition: {
                asyncLoad: !0,
                yAxisUnit: "%"
            },
            chartConfig: {
                options: {
                    plotOptions: {
                        series: {
                            marker: {
                                enabled: !0
                            }
                        }
                    }
                },
                yAxis: {
                    min: 0,
                    minRange: 1,
                    lineWidth: 2,
                    labels: {
                        enabled: !0
                    },
                    title: {
                        text: "Loss Percentage"
                    },
                    opposite: !1
                }
            },
            chartOptions: {
                loss_percentage: {
                    id: "loss_percentage",
                    name: "Loss Percentage",
                    yAxisUnit: "%",
                    isSelected: !0,
                    chartObject: void 0
                },
                latency_jitter: {
                    id: "latency_jitter",
                    name: "Latency/Jitter",
                    title: ["Latency", "Jitter"],
                    axisLabel: ["lat", "jit"],
                    yAxisUnit: "ms",
                    properties: ["latency", "jitter"],
                    isSelected: !1,
                    chartObject: void 0
                }
            }
        }
          , i = {
            query: {
                condition: "AND",
                rules: [{
                    value: ["24"],
                    field: "entry_time",
                    type: "date",
                    operator: "last_n_hours"
                }, {
                    value: ["100"],
                    field: "loss_percentage",
                    type: "number",
                    operator: "less"
                }, {
                    value: [],
                    field: "vdevice_name",
                    type: "string",
                    operator: "in"
                }]
            }
        };
        return i.aggregation = {
            field: [{
                property: "local_color",
                order: "asc",
                sequence: 1
            }],
            metrics: [{
                property: "loss_percentage",
                type: "avg"
            }, {
                property: "latency",
                type: "avg"
            }, {
                property: "jitter",
                type: "avg"
            }]
        },
        {
            getQueryBuilderTimeComponent: function(a) {
                var b;
                return b = _.find(a, {
                    property: "entry_time"
                }),
                angular.isDefined(b) ? b : void 0
            },
            getTLOCTableColumns: function() {
                return f
            },
            getChartDefinition: function() {
                return h.chartDefinition
            },
            getChartConfig: function() {
                return h.chartConfig
            },
            getChartOptions: function() {
                return h.chartOptions
            },
            getChartXAxisProperty: function() {
                return h.xAxisProperty
            },
            getChartYAxisProperty: function() {
                return h.yAxisProperty
            },
            getChartSeriesNames: function() {
                return h.seriesNames
            },
            setChartSeriesNames: function(a, b) {
                a && (h.seriesNames.property = a),
                b && (h.seriesNames.values = b)
            },
            getTlocFields: function() {
                return b.get(a.TLOC_FIELDS_URL)
            },
            getAppRoutePollInterval: function(c) {
                return b.get(a.BFD_SUMMARY + c)
            },
            getLocalColorData: function(c, e) {
                var f = d.defer();
                return i.query.rules[i.query.rules.length - 1].value = [c],
                e && (i.query.rules[0].value = e.value,
                i.query.rules[0].operator = e.operator),
                d.all([b.get(a.DEVICE_BFD_LIVE_STATS + c), b.post(a.APP_ROUTE_STATS, i)]).then(function(a) {
                    var b, c, d = a[0], e = a[1], g = _.groupBy(d.data, "local-color");
                    for (var h in g)
                        c = _.chain(g[h]).pluck("state").unique().value(),
                        c.length > 1 && (c = ["partial"]),
                        angular.equals(h, "metro-ethernet") && (h = "met-eth"),
                        b = _.find(e.data, function(a) {
                            return angular.equals(h, "metro-ethernet") || angular.equals(h, "met-eth") ? angular.equals(a.local_color, "metro-ethernet") || angular.equals(a.local_color, "met-eth") : angular.equals(a.local_color, h)
                        }),
                        b ? (b.state = c[0],
                        angular.equals(b.local_color, "metro-ethernet") && (b.local_color = "met-eth")) : e.data.push({
                            local_color: h,
                            state: c[0],
                            jitter: "",
                            latency: "",
                            loss_percentage: ""
                        });
                    f.resolve(e)
                }, function(a) {
                    f.reject(a)
                }),
                f.promise
            },
            fetchRealTimeData: function(c, e) {
                var f = d.defer();
                return b.get(a.DEVICE_APP_ROUTE_LIVE_STATS + c).then(function(a) {
                    a.data = _.chain(a.data).filter({
                        index: "0"
                    }).groupBy("local-color").map(function(b, c) {
                        var d = _.find(a.data, {
                            index: "0"
                        })
                          , f = c;
                        if (d = d.lastupdated,
                        angular.equals(c, "metro-ethernet") && (f = "met-eth"),
                        e && (b = _.filter(b, function(a) {
                            return 0 == parseInt(a["total-packets"]) || parseInt(a.loss) / parseInt(a["total-packets"]) < 1
                        }),
                        0 == b.length))
                            return {};
                        var g = _.reduce(b, function(a, b) {
                            return angular.isObject(a) ? 0 == parseInt(a["total-packets"]) ? 0 == parseInt(b["total-packets"]) ? 0 : 0 + parseInt(b.loss) / parseInt(b["total-packets"]) : 0 == parseInt(b["total-packets"]) ? parseInt(a.loss) / parseInt(a["total-packets"]) + 0 : parseInt(a.loss) / parseInt(a["total-packets"]) + parseInt(b.loss) / parseInt(b["total-packets"]) : 0 == parseInt(b["total-packets"]) ? parseInt(a) + 0 : parseInt(a) + parseInt(b.loss) / parseInt(b["total-packets"])
                        }) / b.length;
                        g = parseFloat(100 * g).toFixed(2);
                        var h = _.pluck(b, "average-latency").reduce(function(a, b) {
                            return parseInt(a) + parseInt(b)
                        }) / b.length
                          , i = _.pluck(b, "average-jitter").reduce(function(a, b) {
                            return parseInt(a) + parseInt(b)
                        }) / b.length;
                        return {
                            local_color: f,
                            entry_time: d,
                            loss_percentage: g,
                            latency: h,
                            jitter: i
                        }
                    }).value(),
                    f.resolve(a)
                }, function(a) {
                    f.reject(a)
                }),
                f.promise
            },
            appendFilterAggregation: function(a, b, c, d) {
                return a.query.rules.push({
                    value: [b],
                    field: "vdevice_name",
                    type: "string",
                    operator: "in"
                }),
                a.query.rules.push(c),
                a.aggregation = {
                    field: [{
                        property: "local_color",
                        order: "asc",
                        sequence: 1
                    }],
                    histogram: {
                        property: "entry_time",
                        type: "minute",
                        order: "asc"
                    }
                },
                angular.isArray(d.properties) ? a.aggregation.metrics = [{
                    property: d.properties[0],
                    type: "avg"
                }, {
                    property: d.properties[1],
                    type: "avg"
                }] : ("loss_percentage" == d.id && this.addLossPercentationQuery(a),
                a.aggregation.metrics = [{
                    property: d.id,
                    type: "avg"
                }]),
                a
            },
            addLossPercentationQuery: function(a) {
                a.query.rules.push({
                    value: ["100"],
                    field: "loss_percentage",
                    type: "number",
                    operator: "less"
                })
            },
            removeLossPercentationQuery: function(a) {
                a.query.rules = a.query.rules.filter(function(a) {
                    return !angular.equals(a.field, "loss_percentage")
                })
            },
            hideAppTransitionColumn: function(a) {
                var b = _.find(a, {
                    property: "application"
                });
                b && (b.visible = !1)
            },
            hideTableColForRealTime: function(a, b) {
                var c, d;
                d = b ? b : g,
                angular.forEach(d, function(b) {
                    c = _.find(a.columnDefs, function(a) {
                        return angular.equals(a.name, b)
                    }),
                    c && (c.visible = !(c.visible || void 0 === c.visible),
                    c.enableHiding = !1)
                }),
                a.uiGridApi.core.notifyDataChange("column")
            },
            unhideTableColForRealTime: function(a, b) {
                var c, d;
                d = b ? b : g,
                angular.forEach(d, function(b) {
                    c = _.find(a.columnDefs, function(a) {
                        return angular.equals(a.name, b)
                    }),
                    c && (c.visible = !0,
                    c.enableHiding = !0)
                }),
                a.uiGridApi.core.notifyDataChange("column")
            },
            setHistogramInterval: function(a, b, c) {
                function d(a, b) {
                    return a - a % b
                }
                function f(a, b) {
                    var c, e, f = {
                        minute: 6e4,
                        hour: 36e5,
                        day: 864e5,
                        week: 6048e5
                    };
                    return c = b.interval * f[b.type],
                    a >= c ? Math.ceil(a / f[b.type]) : (e = d(c, a),
                    Math.ceil(e / f[b.type]))
                }
                function g(a, c) {
                    return !_.isNaN(parseInt(a)) && (parseInt(a) <= 1 ? (c.type = "minute",
                    c.interval = 1,
                    c.interval = f(b, c),
                    !0) : parseInt(a) <= 3 ? (c.type = "minute",
                    c.interval = 5,
                    c.interval = f(b, c),
                    !0) : parseInt(a) <= 6 ? (c.type = "minute",
                    c.interval = 10,
                    c.interval = f(b, c),
                    !0) : parseInt(a) <= 24 ? (c.type = "minute",
                    c.interval = 30,
                    c.interval = f(b, c),
                    !0) : parseInt(a) <= 168 ? (c.type = "hour",
                    c.interval = 6,
                    c.interval = f(b, c),
                    !0) : parseInt(a) <= 720 ? (c.type = "hour",
                    c.interval = 12,
                    c.interval = f(b, c),
                    !0) : parseInt(a) <= 2208 ? (c.type = "day",
                    c.interval = 1,
                    c.interval = f(b, c),
                    !0) : parseInt(a) <= 4416 ? (c.type = "day",
                    c.interval = 3,
                    c.interval = f(b, c),
                    !0) : parseInt(a) <= 8760 && (c.type = "week",
                    c.interval = 1,
                    c.interval = f(b, c),
                    !0))
                }
                var h = {
                    property: "entry_time",
                    type: "minute",
                    interval: 1,
                    order: "asc"
                };
                if (e.checkNestedProperty(a, "aggregation") || c) {
                    var i = _.find(a.query.rules, function(a) {
                        return angular.equals(a.field, "entry_time") && angular.equals(a.type, "date")
                    });
                    if (i)
                        if (angular.isDefined(i.operator) && "between" == i.operator) {
                            var j, k, l;
                            j = i.value[0].split(" UTC")[0],
                            k = i.value[1].split(" UTC")[0];
                            var l = moment.duration(moment(k).diff(moment(j)));
                            if (!angular.isDefined(l) || !g(l.asHours(), h))
                                return
                        } else if (!g(i.value[0], h))
                            return;
                    return e.checkNestedProperty(a, "aggregation") ? (a.aggregation.histogram = h,
                    a) : c ? (c.histogram = h,
                    a.aggregation = c,
                    a) : void 0
                }
            }
        }
    }
    angular.module("vManage").factory("WANTlocService", a),
    a.$inject = ["monitorApiConstants", "restService", "$log", "$q", "appUtil"]
}(),
function() {
    function a(a, b, c, d, e, f) {
        var g = void 0
          , h = [{
            property: "name",
            title: "Tunnel Endpoints",
            dataType: "string",
            minWidth: 400,
            enableHostName: !0,
            hostValueType: "tunnel",
            isDisplay: !0,
            hideable: !1,
            enableColumnResizing: !0,
            cellTemplate: '<div ng-if=\'row.treeLevel != 0\' class="ui-grid-icon-ok ui-grid-selection-row-header-buttons inlineBlock" ng-class="{\'ui-grid-row-selected\': row.isSelected}" ng-click="grid.appScope.selectTreeNode(row, $event)">&nbsp; </div> <div class="ui-grid-cell-contents tunnelHostname" title="TOOLTIP">{{COL_FIELD | formatEmptyTableString CUSTOM_FILTERS}}</div>'
        }, {
            title: "Protocol",
            property: "proto",
            minWidth: 200,
            dataType: "string"
        }, {
            dataType: "string",
            property: "state",
            title: "State",
            display: "icon",
            iconProperty: "state",
            icon: [{
                key: "up",
                value: "images/up.png"
            }, {
                key: "init",
                value: "images/init.png"
            }, {
                key: "down",
                value: "images/down.png"
            }],
            hideable: !1,
            isSearch: !0,
            width: 70
        }, {
            property: "jitter",
            title: "Jitter (ms)",
            dataType: "number",
            isDisplay: !0,
            decimal: 2
        }, {
            property: "loss_percentage",
            title: "Loss (%)",
            dataType: "number",
            isDisplay: !0,
            decimal: 2
        }, {
            property: "latency",
            title: "Latency (ms)",
            dataType: "number",
            minWidth: 135,
            isDisplay: !0,
            decimal: 2
        }, {
            property: "tx_octets",
            title: "Total Tx Bytes",
            dataType: "number",
            isDisplay: !0,
            display: "formatBytes"
        }, {
            property: "rx_octets",
            title: "Total Rx Bytes",
            dataType: "number",
            isDisplay: !0,
            display: "formatBytes"
        }, {
            property: "application",
            title: "Application Usage Link",
            dataType: "string",
            minWidth: 200,
            cellTemplate: '<div ng-if="row.treeLevel != 0" class="ui-grid-cell-contents toggleContent" data-ng-click="grid.appScope.isApplicationDetailsButtonEnabled() && grid.appScope.viewApplicationDetails(row)"><span id="view_flow_details" class="link-cell" data-ng-class="{\'disabled\': !grid.appScope.isApplicationDetailsButtonEnabled()}">Application Usage</span></div>',
            sortable: !1,
            hideable: !1,
            isSearch: !1
        }]
          , i = ["jitter", "loss_percentage", "latency", "tx_octets", "rx_octets"]
          , j = {
            xAxisProperty: "entry_time",
            yAxisProperty: ["loss_percentage"],
            seriesNames: {
                property: "name",
                values: []
            },
            chartDefinition: {
                asyncLoad: !0,
                yAxisUnit: "%"
            },
            chartConfig: {
                options: {
                    plotOptions: {
                        series: {
                            marker: {
                                enabled: !0
                            }
                        }
                    }
                }
            },
            chartOptions: {
                loss_percentage: {
                    id: "loss_percentage",
                    name: "Loss Percentage",
                    yAxisUnit: "%",
                    isSelected: !0,
                    aggregateBy: "avg",
                    chartObject: void 0
                },
                latency_jitter: {
                    id: "latency_jitter",
                    name: "Latency/Jitter",
                    title: ["Latency", "Jitter"],
                    yAxisUnit: "ms",
                    properties: ["latency", "jitter"],
                    axisLabel: ["lat", "jit"],
                    isSelected: !1,
                    aggregateBy: "avg",
                    chartObject: void 0
                },
                octets: {
                    id: "octets",
                    name: "Octets",
                    title: ["Rx Octets", "Tx Octets"],
                    properties: ["rx_octets", "tx_octets"],
                    axisLabel: ["rx", "tx"],
                    yAxisUnit: "",
                    formatDataToBytes: !0,
                    isSelected: !1,
                    aggregateBy: "sum",
                    chartObject: void 0
                }
            }
        }
          , k = {
            query: {
                condition: "AND",
                rules: [{
                    value: ["24"],
                    field: "entry_time",
                    type: "date",
                    operator: "last_n_hours"
                }, {
                    value: [],
                    field: "vdevice_name",
                    type: "string",
                    operator: "in"
                }]
            }
        };
        return {
            getQueryBuilderTimeComponent: function(a) {
                var b;
                return b = _.find(a, {
                    property: "entry_time"
                }),
                angular.isDefined(b) ? b : void 0
            },
            getChartDefinition: function() {
                return j.chartDefinition
            },
            getChartConfig: function() {
                return j.chartConfig
            },
            getChartOptions: function() {
                return j.chartOptions
            },
            getChartXAxisProperty: function() {
                return j.xAxisProperty
            },
            getChartYAxisProperty: function() {
                return j.yAxisProperty
            },
            getChartSeriesNames: function() {
                return j.seriesNames
            },
            setPrevRealtimeResponse: function(a) {
                g = a
            },
            setChartSeriesNames: function(a, b) {
                a && (j.seriesNames.property = a),
                b && (j.seriesNames.values = b)
            },
            getTunnelFields: function() {
                return c.get(d.TUNNEL_FIELDS_URL)
            },
            getBfdDeviceDetails: function(a) {
                return c.get(d.DEVICE_BFD_LIVE_STATS + a)
            },
            getTunnelDataConnData: function(b, e, f, g) {
                function i(a, b) {
                    var c, d = [];
                    angular.forEach(a.data, function(a) {
                        angular.isDefined(a.name) || (angular.equals(a["local-color"], "met-eth") && (a["local-color"] = "metro-ethernet"),
                        angular.equals(a.color, "met-eth") && (a.color = "metro-ethernet"),
                        a.name = a["vdevice-name"] + ":" + a["local-color"] + "-" + a["system-ip"] + ":" + a.color),
                        c = _.findIndex(b.data, function(b) {
                            return b.name.includes("met-eth") ? (b.displayName = b.name.replace(/met-eth/gi, "metro-ethernet"),
                            angular.equals(a.name, b.displayName)) : angular.equals(a.name, b.name)
                        }),
                        c > -1 ? (angular.extend(a, b.data[c]),
                        d.push(c),
                        b.data.splice(c, 1)) : (a.jitter = "",
                        a.latency = "",
                        a.loss_percentage = "",
                        a.rx_octets = "",
                        a.tx_octets = "")
                    })
                }
                function j(a, b, c) {
                    if (a.data.length > 0 && (a.data = _.map(a.data, function(a) {
                        return a.name && 3 === a.name.split(":").length && a.name.split(":")[1].split("-").length > 0 && (a.name.split(":")[1].split("-").length > 2 ? a["local-color"] = a.name.split(":")[1].split("-")[0] + "-" + a.name.split(":")[1].split("-")[1] : a["local-color"] = a.name.split(":")[1].split("-")[0]),
                        a
                    }),
                    b.data = b.data.concat(a.data)),
                    angular.isDefined(c))
                        b.header.columns = h;
                    else {
                        var d, e = angular.copy(h), f = ["proto", "state", "application"];
                        _.each(f, function(a) {
                            d = _.findIndex(e, {
                                property: a
                            }),
                            d > -1 && e.splice(d, 1)
                        }),
                        b.header.columns = e
                    }
                }
                var l = a.defer()
                  , m = d.APP_ROUTE_STATS
                  , n = angular.isDefined(b) ? d.DEVICE_BFD_LIVE_STATS + b : "";
                if (k.aggregation = {
                    field: [{
                        property: "name",
                        sequence: 1
                    }],
                    metrics: [{
                        property: "loss_percentage",
                        type: "avg"
                    }, {
                        property: "latency",
                        type: "avg"
                    }, {
                        property: "jitter",
                        type: "avg"
                    }, {
                        property: "rx_octets",
                        type: "sum"
                    }, {
                        property: "tx_octets",
                        type: "sum"
                    }]
                },
                angular.isDefined(b)) {
                    var o = angular.copy(k);
                    e && (o.query.rules[0].value = e.value,
                    o.query.rules[0].operator = e.operator),
                    o.query.rules[1].value = [b],
                    a.all([c.get(n)]).then(function(d) {
                        var e = d[0];
                        o.aggregation.field[0].size = e.data && e.data.length > 50 ? e.data.length : 50,
                        a.all([c.post(m, o)]).then(function(a) {
                            var c = a[0];
                            i(e, c),
                            j(c, e, b),
                            l.resolve(e)
                        }, function(a) {
                            l.reject(a)
                        })
                    }, function(a) {
                        l.reject(a)
                    })
                } else {
                    var p = angular.copy(k);
                    p.query.rules.splice(1),
                    angular.isDefined(e) && angular.isDefined(e.value[0]) && "entry_time" === p.query.rules[0].field && (p.query.rules[0].value[0] = e.value[0]),
                    angular.isDefined(g) && g.length > 0 ? p.query.rules.push({
                        value: g,
                        field: "name",
                        type: "string",
                        operator: "in"
                    }) : p.aggregation.field[0].size = 25,
                    angular.isDefined(f) && _.find(p.aggregation.metrics, function(a) {
                        a.property.indexOf(f) > -1 && (a.order = "desc")
                    }),
                    c.post(m, p).then(function(a) {
                        var b = {
                            header: {
                                columns: []
                            },
                            data: []
                        };
                        j(a, b),
                        l.resolve(b)
                    }, function(a) {
                        l.reject(a)
                    })
                }
                return l.promise
            },
            fetchRealTimeData: function(b, e, f) {
                var h = a.defer()
                  , i = "octets" === f.id ? d.DEVICE_TUNNEL_LIVE_STATS : d.DEVICE_APP_ROUTE_LIVE_STATS;
                return c.get(i + b).then(function(a) {
                    if ("octets" === f.id) {
                        var b = angular.copy(a);
                        a.data = _.chain(a.data).map(function(a) {
                            angular.equals(a["local-color"], "metro-ethernet") && (a["local-color"] = "met-eth"),
                            angular.equals(a["remote-color"], "metro-ethernet") && (a["remote-color"] = "met-eth");
                            var b = {
                                rx_octets: 0,
                                tx_octets: 0
                            };
                            return g && (b = _.find(g.data, {
                                "vdevice-dataKey": a["vdevice-dataKey"]
                            })),
                            angular.extend(a, {
                                name: e.concat(":", a["local-color"], "-", a["system-ip"], ":", a["remote-color"]),
                                entry_time: a.lastupdated,
                                tx_octets: a.tx_octets - b.tx_octets,
                                rx_octets: a.rx_octets - b.rx_octets
                            })
                        }).value(),
                        g = b
                    } else {
                        var c = _.find(a.data, {
                            index: "0"
                        });
                        c = c.lastupdated,
                        a.data = _.chain(a.data).filter({
                            index: "0"
                        }).map(function(a) {
                            if (angular.equals(a["local-color"], "metro-ethernet") && (a["local-color"] = "met-eth"),
                            angular.equals(a["remote-color"], "metro-ethernet") && (a["remote-color"] = "met-eth"),
                            0 == parseInt(a["total-packets"]))
                                var b = 0;
                            else
                                var b = parseFloat(parseInt(a.loss) / parseInt(a["total-packets"]) * 100).toFixed(2);
                            return angular.extend(a, {
                                name: e.concat(":", a["local-color"], "-", a["remote-system-ip"], ":", a["remote-color"]),
                                entry_time: c,
                                loss_percentage: b,
                                latency: a["average-latency"],
                                jitter: a["average-jitter"],
                                tx_pkts: a["tx-data-pkts"],
                                rx_pkts: a["rx-data-pkts"]
                            })
                        }).value()
                    }
                    h.resolve(a)
                }, function(a) {
                    h.reject(a)
                }),
                h.promise
            },
            appendFilterAggregation: function(a, b, c, d) {
                return angular.isDefined(b) && a.query.rules.push({
                    value: [b],
                    field: "vdevice_name",
                    type: "string",
                    operator: "in"
                }),
                a.query.rules.push(c),
                a.aggregation = {
                    field: [{
                        property: "name",
                        sequence: 1
                    }],
                    histogram: {
                        property: "entry_time",
                        type: "minute",
                        order: "asc"
                    }
                },
                angular.isArray(d.properties) ? a.aggregation.metrics = [{
                    property: d.properties[0],
                    type: d.aggregateBy
                }, {
                    property: d.properties[1],
                    type: d.aggregateBy
                }] : a.aggregation.metrics = [{
                    property: d.id,
                    type: d.aggregateBy
                }],
                a
            },
            hideAppTransitionColumn: function() {
                f.hideAppTransitionColumn(h)
            },
            hideTableColForRealTime: function(a, b) {
                f.hideTableColForRealTime(a, b ? b : i)
            },
            unhideTableColForRealTime: function(a, b) {
                f.unhideTableColForRealTime(a, b ? b : i)
            }
        }
    }
    angular.module("vManage").factory("WANTunnelService", a),
    a.$inject = ["$q", "$log", "restService", "monitorApiConstants", "DeviceListCache", "WANTlocService"]
}(),
function() {
    function a(a, b, c, d) {
        var e = [{
            title: "MAC Address",
            property: "mac",
            dataType: "string"
        }, {
            title: "Time",
            property: "entry_time",
            displayFormat: "DD MMM YYYY h:mm:ss A z",
            inputFormat: "unix-time",
            dataType: "date",
            minWidth: 200,
            sort: {
                direction: "desc",
                priority: 1
            }
        }, {
            title: "RSSI",
            property: "rssi",
            dataType: "number"
        }, {
            title: "Interface",
            property: "vap",
            dataType: "string"
        }, {
            title: "Mode",
            property: "mode",
            dataType: "string"
        }, {
            title: "Channel Bandwidth",
            property: "bandwidth",
            dataType: "number"
        }, {
            title: "Data Security",
            property: "data_security",
            dataType: "string"
        }, {
            title: "Rx Rate",
            property: "rx_rate",
            dataType: "number"
        }]
          , f = {
            chartDefinition: {
                asyncLoad: !0,
                name: "clientsInfo",
                zoom: !0,
                filtersSelected: {
                    xAxis: ["entry_time"],
                    yAxis: ["mac"],
                    series: ["client"]
                },
                replaceToolTipTextWithYAxisTitleText: !0
            },
            chartConfig: {
                options: {
                    plotOptions: {
                        column: {
                            allowPointSelect: !0,
                            states: {
                                select: {
                                    color: "#0091ea",
                                    fadedColor: "#8fd4ff"
                                }
                            },
                            color: "#0091ea"
                        }
                    },
                    tooltip: {
                        formatter: function() {
                            var a = "";
                            return a += "<b>" + moment(this.points[0].key).format("MMM DD, HH:mm:ss") + "<b><br/>",
                            a += '<span style="color:' + this.points[0].color + '">■    </span>',
                            a += "<span>Mac:  </span>",
                            a += "<span>" + this.y + "</span>",
                            a += "<br/>"
                        }
                    },
                    scrollbar: {
                        enabled: !1
                    }
                },
                xAxis: {
                    type: "datetime",
                    labels: {
                        enabled: !0,
                        formatter: function() {
                            return moment(this.axis.series[0].userOptions.data[this.value].name).format("MMM DD, HH:mm")
                        }
                    }
                },
                yAxis: {
                    lineWidth: .5,
                    labels: {
                        enabled: !0
                    },
                    title: {
                        text: "Clients connected"
                    },
                    min: .1
                }
            },
            chartHeader: {
                xAxis: ["entry_time"],
                yAxis: ["mac"],
                series: [""],
                title: "",
                xAxisLabel: "Time",
                yAxisLabel: "Count"
            },
            countColumn: {
                title: "Count",
                property: "mac",
                dataType: "number"
            },
            countField: {
                property: "mac",
                dataType: "number"
            }
        }
          , g = function(a) {
            return a.header.chart = f.chartHeader,
            a.header.columns.push(f.countColumn),
            a.header.fields.push(f.countField),
            a
        };
        return {
            getQueryBuilderTimeComponent: function(a) {
                var b;
                return b = _.find(a, {
                    property: "entry_time"
                }),
                angular.isDefined(b) ? b : void 0
            },
            getClientsInfoQueryFields: function() {
                var d = a.defer();
                return b.get(c.WLAN_CLIENTS_INFO_QUERY_FIELDS).then(function(a) {
                    d.resolve(a)
                }, function(a) {
                    d.reject(a)
                }),
                d.promise
            },
            appendDeviceToQuery: function(a, b) {
                return a.query.rules.push({
                    value: [b],
                    field: "vdevice_name",
                    type: "string",
                    operator: "in"
                }),
                a
            },
            getTableColums: function() {
                return e
            },
            getTableData: function(d) {
                var e = a.defer();
                return b.post(c.WLAN_CLIENTS_INFO_URL, d).then(function(a) {
                    e.resolve(a)
                }, function(a) {
                    e.reject(a)
                }),
                e.promise
            },
            getChartDefinition: function(a) {
                return f.chartDefinition.seriesClickHandler = a,
                f.chartDefinition
            },
            getChartConfig: function() {
                return f.chartConfig
            },
            appendFilterAggregation: function(a, c) {
                return a.sort = [{
                    field: "entry_time",
                    type: "date",
                    order: "asc"
                }],
                a.aggregation = {
                    metrics: [{
                        property: "mac",
                        type: "cardinality"
                    }]
                },
                a = b.affixStatsAggregationHistogramUrl(a)
            },
            getChartData: function(d) {
                var e = a.defer();
                return b.post(c.WLAN_CLIENTS_INFO_AGGREGATION, d).then(function(a) {
                    a = g(a),
                    e.resolve(a)
                }, function(a) {
                    e.reject(a)
                }),
                e.promise
            },
            filterDataQuery: function(a, c) {
                var e = d.convertEpochToServerDate(c)
                  , f = angular.copy(a);
                if (f = b.affixStatsAggregationHistogramUrl(f, {}),
                angular.isDefined(f.aggregation.histogram)) {
                    var g = _.findIndex(a.query.rules, function(a) {
                        return angular.equals(a.field, "entry_time")
                    });
                    if (g > -1) {
                        var h = f.aggregation.histogram.interval;
                        "hour" === f.aggregation.histogram.type ? h *= 60 : "day" === f.aggregation.histogram.type ? h = 24 * h * 60 : "week" === f.aggregation.histogram.type && (h = 7 * h * 24 * 60);
                        var i = c + 60 * h * 1e3
                          , j = d.convertEpochToServerDate(i);
                        return a.query.rules[g].operator = "between",
                        a.query.rules[g].value = [e, j],
                        a
                    }
                }
                return a
            }
        }
    }
    angular.module("vManage").factory("WLANClientsInfoService", a),
    a.$inject = ["$q", "restService", "monitorApiConstants", "appUtil"]
}(),
function() {
    function a(a, b, c) {
        var d = [{
            title: "MAC Address",
            property: "mac",
            dataType: "string"
        }, {
            title: "Usage",
            property: "total_bytes",
            display: "formatBytes",
            dataType: "number"
        }, {
            title: "Interface",
            property: "interface",
            dataType: "string"
        }, {
            title: "Entry time",
            property: "entry_time",
            displayFormat: "DD MMM YYYY h:mm:ss A z",
            inputFormat: "unix-time",
            dataType: "date"
        }]
          , e = {
            xAxisProperty: "entry_time",
            yAxisProperty: "total_bytes",
            seriesNames: {
                property: "mac",
                values: []
            },
            chartDefinition: {
                name: "",
                zoom: !0,
                filtersSelected: {
                    xAxis: ["entry_time"],
                    yAxis: ["total_bytes"],
                    series: ["mac"]
                },
                asyncLoad: !0,
                formatDataToBytes: !0,
                fillZeros: !0,
                autoLoad: !1
            },
            chartConfig: {
                title: {
                    text: ""
                },
                xAxis: {
                    labels: {
                        enabled: !0
                    },
                    title: {
                        text: ""
                    }
                },
                yAxis: {
                    labels: {
                        enabled: !0
                    },
                    title: {
                        text: "Usage"
                    }
                }
            }
        };
        return {
            getQueryBuilderTimeComponent: function(a) {
                var b;
                return b = _.find(a, {
                    property: "entry_time"
                }),
                angular.isDefined(b) ? b : void 0
            },
            getBridgeMacQueryFields: function() {
                return b.get(c.WLAN_CLIENTS_USAGE_QUERY_FIELDS)
            },
            getUsageTableColumns: function() {
                return d
            },
            getChartDefinition: function() {
                return e.chartDefinition
            },
            getChartConfig: function() {
                return e.chartConfig
            },
            getChartXAxisProperty: function() {
                return e.xAxisProperty
            },
            getChartYAxisProperty: function() {
                return e.yAxisProperty
            },
            getChartSeriesNames: function() {
                return e.seriesNames
            },
            getInterfaceSeriesNames: function(a, b, c) {
                var d = _.map(a, function(a) {
                    return {
                        name: a,
                        display: a,
                        yAxis: c,
                        axisIndexLabel: b
                    }
                });
                return d
            },
            setChartSeriesNames: function(a, b) {
                a && (e.seriesNames.property = a),
                b && (e.seriesNames.values = b)
            },
            getUsageData: function(d) {
                var e = a.defer();
                return b.post(c.WLAN_CLIENTS_USAGE_AGGREGATION, d).then(function(a) {
                    e.resolve(a)
                }, function(a) {
                    e.reject(a)
                }),
                e.promise
            },
            appendDeviceToQuery: function(a, b) {
                return a.query.rules.push({
                    value: [b],
                    field: "vdevice_name",
                    type: "string",
                    operator: "in"
                }),
                a
            },
            appendChartFilterAggregation: function(a, c) {
                return a.query.rules.push(c),
                a.sort = [{
                    field: "entry_time",
                    type: "date",
                    order: "asc"
                }],
                a.aggregation = {
                    field: [{
                        property: "mac",
                        sequence: 1
                    }]
                },
                a = b.affixStatsAggregationHistogramUrl(a),
                angular.isDefined(a.aggregation.histogram.interval) && a.aggregation.histogram.interval < 10 && (a.aggregation.histogram.interval = 10),
                a.aggregation.metrics = [{
                    property: "total_bytes",
                    type: "sum"
                }],
                a
            },
            appendTableFilterAggregation: function(a) {
                return a.aggregation = {
                    field: [{
                        property: "mac",
                        sequence: 1
                    }, {
                        property: "interface",
                        sequence: 2
                    }]
                },
                a.aggregation.metrics = [{
                    property: "total_bytes",
                    type: "sum",
                    order: "desc"
                }, {
                    property: "entry_time",
                    type: "max"
                }],
                a
            }
        }
    }
    angular.module("vManage").factory("WLANClientsUsageService", a),
    a.$inject = ["$q", "restService", "monitorApiConstants"]
}(),
function() {
    function a(a, b, c) {
        var d = {
            xAxisProperty: "entry_time",
            yAxisProperty: ["rx_bytes", "tx_bytes"],
            seriesNames: {
                property: "interface",
                values: []
            },
            chartDefinition: {
                formatDataToBytes: !0,
                asyncLoad: !0
            },
            chartConfig: {
                yAxis: [{
                    min: 0,
                    minRange: 1,
                    lineWidth: 2,
                    labels: {
                        enabled: !0
                    },
                    title: {
                        text: "Rx Bytes"
                    },
                    height: "45%",
                    opposite: !1,
                    visible: !0
                }, {
                    min: 0,
                    minRange: 1,
                    lineWidth: 2,
                    labels: {
                        enabled: !0
                    },
                    title: {
                        text: "Tx Bytes"
                    },
                    top: "55%",
                    height: "45%",
                    offset: 0,
                    opposite: !1,
                    visible: !0
                }]
            },
            chartOptions: {
                kbps: {
                    id: "kbps",
                    name: "Kbps",
                    properties: ["rx_kbps", "tx_kbps"],
                    axisLabel: ["rx", "tx"],
                    axisIndex: [0, 1],
                    isSelected: !0,
                    chartObject: void 0
                }
            }
        };
        return {
            getBridgeInterfaceQueryFields: function() {
                return b.get(c.WLAN_BRIDGE_INTERFACE_QUERY_FIELDS)
            },
            getRadio: function(d) {
                var e = a.defer();
                return b.get(c.WLAN_RADIO_URL + d).then(function(a) {
                    e.resolve(a)
                }, function(a) {
                    e.reject(a)
                }),
                e.promise
            },
            getInterfaces: function(d) {
                var e = a.defer();
                return b.get(c.WLAN_INTERFACE_URL + d).then(function(a) {
                    e.resolve(a)
                }, function(a) {
                    e.reject(a)
                }),
                e.promise
            },
            getChartDefinition: function() {
                return d.chartDefinition
            },
            getChartConfig: function() {
                return d.chartConfig
            },
            getChartOptions: function() {
                return d.chartOptions
            },
            getChartXAxisProperty: function() {
                return d.xAxisProperty
            },
            getChartYAxisProperty: function() {
                return d.yAxisProperty
            },
            getChartSeriesNames: function() {
                return d.seriesNames
            },
            getInterfaceSeriesNames: function(a, b, c) {
                var d = _.map(a, function(a) {
                    return {
                        name: a,
                        display: a,
                        yAxis: c,
                        axisIndexLabel: b
                    }
                });
                return d
            },
            setChartSeriesNames: function(a, b) {
                a && (d.seriesNames.property = a),
                b && (d.seriesNames.values = b)
            },
            appendFilterAggregation: function(a, b, c) {
                return a.query.rules.push({
                    value: [b],
                    field: "vdevice_name",
                    type: "string",
                    operator: "in"
                }),
                a.query.rules.push({
                    value: c,
                    field: "interface",
                    type: "string",
                    operator: "in"
                }),
                a.sort = [{
                    field: "entry_time",
                    type: "date",
                    order: "asc"
                }],
                a.aggregation = {
                    field: [{
                        property: "interface",
                        sequence: 1
                    }],
                    histogram: {
                        property: "entry_time",
                        type: "minute",
                        order: "asc"
                    }
                },
                a.aggregation.metrics = [{
                    property: "rx_bytes",
                    type: "avg"
                }, {
                    property: "tx_bytes",
                    type: "avg"
                }],
                a
            }
        }
    }
    angular.module("vManage").factory("WLANService", a),
    a.$inject = ["$q", "restService", "monitorApiConstants"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        function l(b) {
            "status" !== b.eventChangeType && "delete" !== b.eventChangeType && "create" !== b.eventChangeType || a.table.refresh(p)
        }
        a.stateString = c.getStateString(b),
        a.$state = b,
        a.breadCrumb.states = [];
        var m = function(b) {
            g.show({
                templateUrl: "app/monitor/devices/grid/templates/deleteStaleDevice.html",
                controller: "DeleteStaleDevice",
                resolve: {
                    selectedRow: function() {
                        return b
                    }
                }
            }).then(function(b) {
                a.table.refresh()
            }, function() {})
        }
          , n = h.returnEventsEnum()
          , o = h.returnViewsEnum()
          , p = new i(o.NETWORK,[n.DEVICE])
          , q = {
            transitionToDeviceDashboard: function(a) {
                c.checkNestedProperty(a, "entity", "uuid") && angular.isDefined(a.entity.uuid) ? _.indexOf(["vedge"], a.entity["device-type"]) > -1 ? b.go("app.monitor.devices.dashboard.hardware_health", {
                    systemIp: a.entity["system-ip"],
                    localSystemIp: a.entity["local-system-ip"],
                    deviceModel: a.entity["device-model"],
                    deviceType: a.entity["device-type"],
                    reachability: a.entity.reachability,
                    validity: a.entity.validity,
                    uuid: a.entity.uuid
                }) : b.go("app.monitor.devices.dashboard.controlConnections", {
                    systemIp: a.entity["system-ip"],
                    localSystemIp: a.entity["local-system-ip"],
                    personality: a.entity.personality,
                    deviceModel: a.entity["device-model"],
                    deviceType: a.entity["device-type"],
                    reachability: a.entity.reachability,
                    validity: a.entity.validity,
                    uuid: a.entity.uuid
                }) : c.checkNestedProperty(a, "entity", "reachability") && "unreachable" === a.entity.reachability && m(a)
            }
        }
          , r = new d({
            columnResizing: !0,
            singleSelect: !1,
            enableSorting: !0,
            tableHeightOffset: 188,
            dataUid: "deviceId",
            toggleFirstRowOnLoad: !1,
            autoLoad: !0
        },{
            csvExport: !0,
            dataSourceFilter: !0
        },{},{
            exporterHeaderFilterUseName: !1
        });
        r.setAppScope(q),
        r.setDataSourceFilter("Device Group", j.GROUPS_URL),
        r.dataSourceFilter.setOnSelectionChangeFunc(function(b) {
            var c = this;
            a.table.taggedSearchObject.clearSearchCache(),
            a.table.loadDataFromUrl(c.selectedOption.uri, p),
            a.$on("device_event", function(a, b) {
                k(l, 1e3, !1, b)
            })
        });
        var s = [{
            property: "property",
            value: "host-name",
            config: function(a) {
                var b = this
                  , c = '<div class="ui-grid-cell-contents" title="TOOLTIP" data-ng-click="grid.appScope.transitionToDeviceDashboard(row)" id="application_family_{{rowRenderIndex}}"><span id="view_application_details" class="link-cell">';
                for (var d in a.icon)
                    c += '<image ng-src="' + a.icon[d].value + '" ng-if="row.entity[\'' + a.iconProperty + "'] === '" + a.icon[d].key + "'\"/>";
                b.cellTemplate = c + "&nbsp;{{COL_FIELD CUSTOM_FILTERS}}</span></div>",
                b.enableFiltering = !0,
                b.enableSorting = !0
            }
        }];
        r.addCustomColumns(s),
        a.table = r,
        a.$on("$destroy", function() {
            e.setLastOption(""),
            h.unsubscribe(p),
            a.table.resetCustomColumns()
        })
    }
    angular.module("vManage").controller("MonitorDevicesGridController", a),
    a.$inject = ["$scope", "$state", "appUtil", "Table", "deviceOptionsService", "$stateParams", "$mdDialog", "eventPoll", "eventListObject", "deviceListService", "$debounce"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        a.breadCrumb = {},
        a.queryBuilderObj = new c,
        a.navigateToView = function(a) {
            angular.isDefined(a.state) && 0 != a.state.length && (angular.isDefined(a.params) ? b.go(a.state, a.params) : b.go(a.state, b.params))
        }
        ,
        a.$on("$destroy", function() {
            a.queryBuilderObj.setGlobalTime(void 0),
            d.setQueryBuilderCurrentState(void 0),
            e.setQueryBuilderCurrentState(void 0),
            f.setQueryBuilderCurrentState(void 0),
            g.setQueryBuilderCurrentState(void 0),
            h.setQueryBuilderCurrentState(void 0)
        })
    }
    angular.module("vManage").controller("MonitorDevicesController", a),
    a.$inject = ["$scope", "$state", "QueryBuilderFactory", "DpiApplicationFamilyService", "DpiApplicationService", "DpiApplicationDetailService", "CFLOWDDestinationsService", "CFLOWDSourcesService"]
}(),
function() {
    function a(a, b, c) {
        var d = {
            property: "vdevice_name",
            name: "Device name",
            isRequired: !0,
            multiSelect: !1,
            isHidden: !0,
            dataType: "string",
            defaultValue: void 0
        }
          , e = {
            name: "Local TLOC",
            property: "local_color",
            isRequired: !1,
            multiSelect: !0,
            dataType: "string",
            fieldData: {
                type: "url",
                url: "dataservice/device/bfd/state/device"
            }
        }
          , f = {
            name: "Remote TLOC",
            property: "remote_color",
            isRequired: !1,
            multiSelect: !0,
            dataType: "string",
            fieldData: {
                type: "url",
                url: "dataservice/device/bfd/state/device"
            }
        }
          , g = {
            property: "remote_system_ip",
            name: "Remote System IP",
            isRequired: !1,
            multiSelect: !1,
            dataType: "string",
            fieldData: {
                type: "url",
                url: "dataservice/device/keyvalue"
            }
        }
          , h = {
            property: "dest_ip",
            name: "Destination Ip",
            isRequired: !1,
            multiSelect: !0,
            dataType: "string"
        }
          , i = {
            property: "remote_system_ip",
            name: "Remote System IP",
            isRequired: !1,
            multiSelect: !1,
            dataType: "string",
            fieldData: {
                type: "url",
                url: "dataservice/device/keyvalue"
            }
        }
          , j = {
            property: "src_ip",
            name: "Source Ip",
            isRequired: !1,
            multiSelect: !0,
            dataType: "string"
        };
        return {
            appendDeviceObjectToFieldsObj: function(a) {
                var b;
                return b = _.find(a, {
                    property: "vdevice_name"
                }),
                angular.isDefined(b) || (b = angular.copy(d)),
                a.push(b),
                a
            },
            appendDestinationIPObjectToFieldsObj: function(a) {
                var b;
                return b = _.find(a, {
                    property: "dest_ip"
                }),
                angular.isDefined(b) || (b = angular.copy(h)),
                a.push(b),
                a
            },
            appendDestinationSystemIPObjectToFieldsObj: function(a) {
                var b;
                return b = _.find(a, {
                    property: "remote_system_ip"
                }),
                angular.isDefined(b) || (b = angular.copy(g)),
                a.push(b),
                a
            },
            appendSourceIPObjectToFieldsObj: function(a) {
                var b;
                return b = _.find(a, {
                    property: "src_ip"
                }),
                angular.isDefined(b) || (b = angular.copy(j)),
                a.push(b),
                a
            },
            appendSourceSystemIPObjectToFieldsObj: function(a) {
                var b;
                return b = _.find(a, {
                    property: "remote_system_ip"
                }),
                angular.isDefined(b) || (b = angular.copy(i)),
                a.push(b),
                a
            },
            appendLocalColorObjectToFieldsObj: function(a) {
                var b;
                return b = _.find(a, {
                    property: "local_color"
                }),
                angular.isDefined(b) || (b = angular.copy(e)),
                a.push(b),
                a
            },
            appendRemoteColorObjectToFieldsObj: function(a) {
                var b;
                return b = _.find(a, {
                    property: "remote_color"
                }),
                angular.isDefined(b) || (b = angular.copy(f)),
                a.push(b),
                a
            },
            mergeByProperty: function(a, b, c, d) {
                _.each(b, function(b) {
                    var e = _.find(a, function(a) {
                        return a[c] === b[c]
                    });
                    if (!e) {
                        var f = angular.copy(b);
                        f[d] = 0,
                        a.push(f)
                    }
                })
            },
            hasCflowdData: function(a) {
                var d = c.defer()
                  , e = this
                  , f = {
                    query: {
                        condition: "AND",
                        rules: [{
                            value: [a],
                            field: "vdevice_name",
                            type: "string",
                            operator: "in"
                        }]
                    }
                }
                  , g = b.TOP_APPLICATIONS_DEVICE_CFLOWD_TEST;
                return e.getDOCCount(g, f).then(function(a) {
                    angular.isDefined(a) && angular.isDefined(a.count) && a.count > 0 ? d.resolve("cflowd") : d.resolve(void 0)
                }, function() {
                    d.resolve(void 0);
                }),
                d.promise
            },
            getDOCCount: function(b, c) {
                return a.post(b, c)
            },
            getWidgetToEnable: function(a) {
                var d = c.defer()
                  , e = this
                  , f = {
                    query: {
                        condition: "AND",
                        rules: [{
                            value: [a],
                            field: "vdevice_name",
                            type: "string",
                            operator: "in"
                        }]
                    }
                }
                  , g = b.TOP_APPLICATIONS_DEVICE_DPI_TEST;
                return e.getDOCCount(g, f).then(function(b) {
                    angular.isDefined(b) && angular.isDefined(b.count) && b.count > 0 ? d.resolve("dpi") : e.hasCflowdData(a).then(function(a) {
                        d.resolve(a)
                    })
                }, function() {
                    e.hasCflowdData(a).then(function(a) {
                        d.resolve(a)
                    })
                }),
                d.promise
            },
            isVEdge: function(a) {
                return !!angular.isDefined(a) && a.toLowerCase().indexOf("vedge") > -1
            },
            isVBond: function(a) {
                return !!angular.isDefined(a) && a.toLowerCase().indexOf("vbond") > -1
            },
            isVEdge100WM: function(a) {
                return !!angular.isDefined(a) && a.toLowerCase().indexOf("vedge-100-wm") > -1
            }
        }
    }
    angular.module("vManage").service("DeviceService", a),
    a.$inject = ["restService", "monitorApiConstants", "$q"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l) {
        function m(b, d) {
            f.post(b, d).then(function(e) {
                a.table.serverCallInProgress = !1,
                h.setTableQueryObject(d),
                a.table.setDataUrl(b),
                h.updateColumns(e.header.columns),
                a.table.createColumns(e.header.columns),
                angular.copy(e.data, a.table.data),
                a.table.taggedSearchObject.setSearchCache(a.table.data),
                c(function() {
                    a.table.taggedSearchObject.getSearchTagsCache().length && a.table.taggedSearchObject.searchData(a.table.taggedSearchObject.getSearchTagsCache()),
                    a.table.uiGridApi.selection.selectRow && a.table.data.length > 0 && a.table.uiGridApi.selection.selectRow(a.table.uiGridApi.grid.renderContainers.body.visibleRowCache[0].entity)
                })
            }, function(b) {
                a.table.serverCallInProgress = !1,
                g.error("Failed to get events data from server")
            })
        }
        function n(b, c, d) {
            d && a.table.data.reset(),
            m(b.tableURL, c),
            a.$broadcast("collapsibleChartTimeUpdated")
        }
        a.stateString = e.getStateString(b),
        a.isChartCollapsed = {
            value: !1
        },
        a.chartTitle = "Events Histogram (hourly)",
        a.queryBuilderInitialized = !1,
        a.showQueryBuilderTimeStampInbuilt = !1,
        a.currentChartUrl = {},
        a.chartNames = ["eventsChart"],
        a.chartAggregation = {},
        a.legends = h.getLegends(),
        a.currentChartUrl.url = h.getEventsChartAPI(),
        a.userMode = l.getUserMode(),
        a.table = new d({
            autoLoad: !0,
            columnResizing: !0,
            enableSorting: !0,
            dataUid: "id",
            singleSelect: !0,
            tableHeightOffset: 450,
            flatEntityAccess: !0
        },{
            csvExport: !0
        },{},{
            exporterHeaderFilterUseName: !1,
            exporterCsvFilename: "Events.csv"
        });
        var o = [{
            type: "Device Details",
            open: "modal",
            templateUrl: "app/monitor/events/eventDetails.html",
            controller: "eventDetailsController"
        }];
        a.table.setPostRefreshCallback(function() {
            a.searchCallBack(h.getTableQueryObject())
        }),
        a.table.setHoverAction(o),
        a.searchCallBack = function(b) {
            var c = {};
            a.chartAggregation = h.getAlarmsChartAggregation(),
            a.chartAggregation.query = b.query,
            c.tableURL = h.getEventsTableAPI(),
            b.size = 1e4,
            angular.equals(a.userMode.mode, "multiTenant-tenant") && h.filterVEdgeQueryParam(b.query),
            h.setFilterCurrentState(a.queryBuilderObj.getComponents()),
            a.queryBuilderInitialized ? n(c, b, !0) : (a.queryBuilderInitialized = !0,
            j.get("app/monitor/commonTemplates/chartNTableTemplate.html", {
                cache: k
            }).success(function(d) {
                var e = $("#" + a.stateString + "view");
                angular.isDefined(e) && e.length > 0 && (n(c, b, !1),
                e.append(i(d)(a)))
            }))
        }
        ,
        a.$watch("isChartCollapsed.value", function(b, c) {
            b != c && (b ? a.table.options.tableHeightOffset = 240 : a.table.options.tableHeightOffset = 450)
        }),
        h.initializeQueryBuilder(a),
        a.$on("$destroy", function() {
            h.setFilterOriginalState(a.queryBuilderObj.getOriginalComponents())
        })
    }
    angular.module("vManage").controller("EventsController", a),
    a.$inject = ["$scope", "$state", "$timeout", "Table", "appUtil", "restService", "notification", "EventsService", "$compile", "$http", "$templateCache", "rbac"]
}(),
function() {
    function a(a) {
        var b, c = {
            FIELDS_API_URL: "/dataservice/event/query/fields",
            EVENTS_URL_TABLE: "/dataservice/event",
            EVENTS_URL_CHART: "/dataservice/event/aggregation"
        }, d = void 0, e = void 0, f = {
            query: {},
            aggregation: {
                field: [{
                    property: "severity_level",
                    order: "asc",
                    sequence: 1
                }],
                histogram: {
                    property: "entry_time",
                    interval: 1,
                    type: "hour",
                    order: "asc"
                }
            }
        }, g = [{
            name: "critical",
            display: "Critical"
        }, {
            name: "major",
            display: "Major"
        }, {
            name: "minor",
            display: "Minor"
        }], h = [{
            key: "critical",
            value: 4
        }, {
            key: "major",
            value: 3
        }, {
            key: "minor",
            value: 1
        }];
        return {
            resetFilters: function() {
                d = [],
                e = []
            },
            getFilterCurrentState: function() {
                return d
            },
            setFilterCurrentState: function(a) {
                d = a
            },
            setFilterOriginalState: function(a) {
                e = a
            },
            getFilterOriginalState: function() {
                return e
            },
            setTableQueryObject: function(a) {
                b = a
            },
            getLegends: function() {
                return g
            },
            getTableQueryObject: function() {
                return angular.copy(b)
            },
            getEventsTableAPI: function() {
                return c.EVENTS_URL_TABLE
            },
            getEventsChartAPI: function() {
                return c.EVENTS_URL_CHART
            },
            getAlarmsChartAggregation: function() {
                return f
            },
            filterVEdgeQueryParam: function(a) {
                return angular.isDefined(a.rules) && angular.isArray(a.rules) && a.rules.push({
                    field: "device_type",
                    operator: "in",
                    type: "string",
                    value: ["vedge"]
                }),
                a
            },
            updateColumns: function(a) {
                var b = _.findIndex(a, {
                    property: "severity_level"
                });
                b > -1 && (a[b].sort = {
                    type: "stringToNumeric"
                },
                a[b].sortConfig = h)
            },
            initializeQueryBuilder: function(b) {
                var d = this
                  , e = {
                    autoLoadFields: !0,
                    fieldsAPIURL: c.FIELDS_API_URL,
                    searchCallBack: b.searchCallBack,
                    queryBuilderPersistedComponents: d.getFilterCurrentState(),
                    queryBuilderOriginalComponents: d.getFilterOriginalState(),
                    isDynamicQuery: !0,
                    renderViewAfterInitComplete: !0,
                    enableFilteredTags: !0
                };
                b.queryBuilderObj = new a(e),
                b.queryBuilderViewObj = {},
                b.queryBuilderViewObj.buttonLayoutObj = {
                    layoutClass: "actionButtonLayout",
                    filterIconClass: "filter_list",
                    filterButtonTitle: "Filter",
                    showDropDownIcon: !0
                }
            }
        }
    }
    angular.module("vManage").service("EventsService", a),
    a.$inject = ["QueryBuilderFactory"]
}(),
angular.module("vManage").controller("geographyController", geographyController),
geographyController.$inject = ["$scope", "$state", "geographyService", "$log", "$mdDialog", "$rootScope", "TaggedSearchService"],
function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l, m) {
        function n(b, c) {
            var d = j.defer();
            return v.loadingMarkerData = !0,
            a.get(b).then(function(a) {
                a.data && a.data.length > 0 && (angular.isDefined(v.recentMarkerAPIResponse) && angular.equals(v.recentMarkerAPIResponse, a) || (v.recentMarkerAPIResponse = a,
                y = J.constructMarkersObjFromData(a.data),
                A = _.zipObject(_.pluck(y, "localSystemIp"), y),
                v.deviceCountWithNoGeoCoords = J.getDataWithNoLocationInfo(a.data).length,
                v.mapSearchProperties = Object.keys(a.data[0]),
                q(a),
                c ? v.markersFiltered = J.updateMarkersHandler(y, v.selectedDeviceFilters) : (J.resetAllFilters(),
                v.markersFiltered = JSON.parse(JSON.stringify(y))),
                v.taggedSearchObject.setSearchCache(v.markersFiltered),
                o())),
                d.resolve()
            }, function(a) {
                m.info("There seems to be a problem while getting map data :" + a),
                v.loadingMarkerData = !1,
                d.reject()
            }),
            d.promise
        }
        function o() {
            v.eventDetected = "No events yet...",
            v.$on("leafletDirectiveMarker.click", function(a, b) {
                v.eventDetected = a.name;
                var c = b.markerName
                  , d = v.markersFiltered[c]
                  , e = ""
                  , g = "";
                d.setupPathLinks = function() {
                    var a = this;
                    r(a["local-system-ip"])
                }
                ,
                e = d["device-type"].toLowerCase().indexOf("vedge") > -1 ? "<a ui-sref=\"app.monitor.devices.dashboard.hardware_health({systemIp: markerData['system-ip'], localSystemIp: markerData['local-system-ip'], deviceModel: markerData['device-model'], deviceType: markerData['device-type'], uuid: markerData['uuid']})\">Device Dashboard </a>" : "<a ui-sref=\"app.monitor.devices.dashboard.controlConnections({systemIp: markerData['system-ip'], localSystemIp: markerData['local-system-ip'], personality: markerData['personality'], deviceModel: markerData['device-model']})\">Device Dashboard </a>",
                g = '<div class="geography-popup"><div class="deviceListSection"><div class="topSection"> <div class="pull-left status device-{{markerData.status}}"></div>  <div class="hostname">' + d["host-name"] + '</div></div><div class="middleSection"> <div class="pull-left">' + d["local-system-ip"] + " | Site ID: " + d["site-id"] + "</div></div><div class=\"bottomSection\"> <div class=\"pull-left errorMessage\"> <p ng-class=\"{'reachabilityGood': markerData.reachability === 'reachable', 'reachabilityNotGood': markerData.reachability === 'unreachable'}\">" + d.reachability + '</p> </div><div class="pull-right personality">' + d["device-type"].capitalizeGivenLetter(1, "-") + '</div> </div></div><div class="popupNavigation">' + e + "<i class=\"nav-separator fa fa-circle\"></i><a ui-sref=\"app.monitor.devices.dashboard.realTime({systemIp: markerData['system-ip'], localSystemIp: markerData['local-system-ip']})\">Device Details </a><i class=\"nav-separator fa fa-circle\"></i><a ui-sref=\"app.tools.ssh({deviceID:markerData['system-ip'], localSystemIp: markerData['local-system-ip'], hostName: markerData['host-name'], reachability:markerData['reachability']})\">SSH Terminal</a><i class=\"nav-separator fa fa-circle\"></i><a class=\"pointerCursor\" ng-click=markerData.setupPathLinks()>Links</a></div></div>";
                var h = {
                    closeOnClick: !1,
                    closeButton: !0,
                    maxWidth: 350
                };
                f.getMarkers().then(function(a) {
                    a[c].bindPopup(g, h).addTo(v.map)
                }),
                w = d["local-system-ip"]
            }),
            v.$on("leafletDirectiveMarker.popupopen", function(a, b) {
                $(".leaflet-popup-close-button").click(function() {
                    J.clearPathLinks
                })
            }),
            v.$on("leafletDirectiveMarker.popupclose", function(a, b) {
                b.markerName;
                v.showLabelsForMarkers || angular.forEach(v.markersForLeaflet, function(a) {
                    a.icon.className = "hide-name",
                    a.holdMarker = !1
                })
            })
        }
        function p() {
            v.eventDetected = "No events yet...",
            v.$on("leafletDirectivePath.mouseover", function(a, b) {
                v.eventDetected = a.name,
                v.nodePaths[b.pathName].opacity = 1,
                v.showLabelsForMarkers || angular.forEach(v.markersForLeaflet, function(a) {
                    a.lat == v.nodePaths[b.pathName].latlngs[0].lat && a.lng == v.nodePaths[b.pathName].latlngs[0].lng ? (a.icon.className = "leaflet-div-icon2",
                    a.holdMarker = !0) : a.lat == v.nodePaths[b.pathName].latlngs[1].lat && a.lng == v.nodePaths[b.pathName].latlngs[1].lng && (a.icon.className = "leaflet-div-icon2",
                    a.holdMarker = !0)
                })
            }),
            v.$on("leafletDirectivePath.mouseout", function(a, b) {
                a.preventDefault(),
                v.eventDetected = a.name,
                v.nodePaths[b.pathName].opacity = .5,
                v.showLabelsForMarkers || angular.forEach(v.markersForLeaflet, function(a) {
                    a.lat == v.nodePaths[b.pathName].latlngs[0].lat && a.lng == v.nodePaths[b.pathName].latlngs[0].lng ? a.icon.className = "hide-name" : a.lat == v.nodePaths[b.pathName].latlngs[1].lat && a.lng == v.nodePaths[b.pathName].latlngs[1].lng && (a.icon.className = "hide-name")
                })
            })
        }
        function q(a) {
            var b = angular.copy(a)
              , c = []
              , d = [];
            angular.forEach(b.header.columns, function(a) {
                var b = _.findIndex(H, function(b) {
                    return angular.equals(b, a.property)
                });
                b > -1 && d.push(a)
            });
            var e = _.map(d, function(a) {
                c.push(a.property);
                var b = _.pick(a, "property");
                b = k.renameObjectKey(b, "property", "name");
                var d = _.pick(a, "title");
                d = k.renameObjectKey(d, "title", "displayName");
                var e = _.extend(b, d);
                return e.isSearch = !0,
                _.extend(b, d)
            });
            v.taggedSearchObject.setSearchProperties(e)
        }
        function r(a) {
            return !(!v.selectedLinkFilters.length || !a) && (v.taggedSearchObject.clearTagsCache(),
            v.loadingPathData = !0,
            void J.getDevicePathLinks(a).then(function(a) {
                a.links && a.links.length > 0 ? (x = a.links,
                t(),
                p(),
                v.pathDataInitialized || (v.pathDataInitialized = !0)) : v.loadingPathData = !1
            }, function(a) {
                m.info("There seems to be a problem while getting map data :" + a),
                v.loadingPathData = !1
            }))
        }
        function s(b) {
            v.loadingMarkerData || B || (B = !0,
            a.get(b).then(function(a) {
                if (a.data && a.data.length > 0 && (!angular.isDefined(v.recentMarkerAPIResponse) || !angular.equals(v.recentMarkerAPIResponse, a))) {
                    v.recentMarkerAPIResponse = a,
                    y = J.constructMarkersObjFromData(v, a.data),
                    v.deviceCountWithNoGeoCoords = J.getDataWithNoLocationInfo(a.data).length,
                    v.mapSearchProperties = Object.keys(a.data[0]),
                    q(a),
                    v.markersFiltered = J.updateMarkersHandler(y, v.selectedDeviceFilters),
                    v.taggedSearchObject.setSearchCache(v.markersFiltered);
                    var b = v.taggedSearchObject.getSearchTagsCache();
                    b.length > 0 && angular.copy(v.taggedSearchObject.searchData(b), v.markersFiltered),
                    o()
                }
                J.geographyServerEventHandler("subscribe", "device")
            }, function(a) {
                m.info("There seems to be a problem while getting marker data for device event:" + a)
            }))
        }
        function t() {
            v.filteredPaths = J.updatePathsHandler(x),
            v.filteredPaths.length > 0 && v.markersFiltered.length > 0 ? (v.nodePaths = J.constructPathsObjFromData(v.filteredPaths, v.markersFiltered),
            J.updateToFitBounds()) : v.loadingPathData = !1,
            C && l(function() {
                C = !1
            })
        }
        function u(a) {
            v.showLabelsForMarkers ? angular.forEach(a, function(a) {
                a.icon.className = "leaflet-div-icon2"
            }) : angular.forEach(a, function(a) {
                a.icon.className = "hide-name"
            })
        }
        var v, w, x, y, z, A = (g.baseURL,
        {}), B = !1, C = !1, D = h.returnEventsEnum(), E = h.returnViewsEnum(), F = new i(E.GEOGRAPHY,[D.DEVICE]), G = {
            TOPOLOGY: "dataservice/topology",
            MARKER_DATA: "",
            PATH_DATA: "",
            MAP_FILTER_JSON: "app/json/geography_filters.json",
            GROUP_DATA: "/dataservice/group/device",
            PATH_LINKS: "/dataservice/topology/device?deviceId="
        }, H = ["host-name", "local-system-ip", "reachability", "site-id", "device-model", "device-type", "uuid", "device-groups"], I = {
            markers: [],
            mapLayers: {
                baselayers: {
                    osm: {
                        name: "OpenStreetMap",
                        type: "xyz",
                        url: "http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
                        layerOptions: {
                            subdomains: ["a", "b", "c"],
                            attribution: "© OpenStreetMap contributors",
                            noWrap: !1
                        }
                    },
                    google: {
                        name: "Google Terrain",
                        layerType: "TERRAIN",
                        type: "google",
                        key: "AIzaSyA1PwZsBfTR4-PLCErEsI6qMfEiqnRV898",
                        user: "Viptela",
                        layerOptions: {
                            subdomains: ["mt0", "mt1", "mt2"],
                            attribution: "Map data © 2015 Google",
                            noWrap: !1,
                            mapOptions: {
                                styles: [{
                                    featureType: "administrative.province",
                                    elementType: "geometry",
                                    stylers: [{
                                        visibility: "off"
                                    }]
                                }, {
                                    featureType: "administrative.locality",
                                    stylers: [{
                                        visibility: "off"
                                    }]
                                }, {
                                    featureType: "administrative.land_parcel",
                                    elementType: "geometry",
                                    stylers: [{
                                        visibility: "off"
                                    }]
                                }, {
                                    featureType: "landscape.man_made",
                                    stylers: [{
                                        visibility: "off"
                                    }]
                                }, {
                                    featureType: "landscape.natural.terrain",
                                    stylers: [{
                                        visibility: "off"
                                    }]
                                }, {
                                    featureType: "poi",
                                    stylers: [{
                                        visibility: "off"
                                    }]
                                }, {
                                    featureType: "road.local",
                                    stylers: [{
                                        visibility: "off"
                                    }]
                                }, {
                                    featureType: "transit",
                                    stylers: [{
                                        visibility: "off"
                                    }]
                                }, {
                                    featureType: "water",
                                    stylers: [{
                                        visibility: "on"
                                    }, {
                                        color: "#D4E7Ed"
                                    }]
                                }]
                            }
                        }
                    }
                },
                overlays: {
                    viptela: {
                        name: "Viptela Markers",
                        type: "markercluster",
                        visible: !0,
                        layerOptions: {
                            chunkedLoading: !0,
                            showCoverageOnHover: !1,
                            removeOutsideVisibleBounds: !0,
                            maxClusterRadius: 50
                        }
                    }
                }
            },
            nodePaths: {},
            defaults: {
                loadingControl: !0,
                path: {
                    weight: 1,
                    color: "#E6950A",
                    opacity: 1
                },
                center: {
                    lat: 0,
                    lng: 0,
                    zoom: 2
                },
                minZoom: 2,
                maxZoom: 14,
                scrollWheelZoom: !0,
                zoomControlPosition: "topright",
                closePopupOnClick: !0
            },
            events: {
                map: {
                    enable: ["load", "click"],
                    logic: "emit"
                },
                marker: {
                    enable: ["click", "popupclose", "popupopen"],
                    logic: "emit"
                },
                paths: {
                    enable: ["mouseover", "mouseout"],
                    logic: "emit"
                }
            }
        }, J = {
            loadScript: function(a) {
                var b = document.createElement("script");
                b.type = "text/javascript",
                b.id = "googleMapsAPIElement",
                b.src = "https://maps.googleapis.com/maps/api/js?v=3.exp&callback=mapsInitialize",
                document.body.appendChild(b)
            },
            setGeoControllerScope: function(a) {
                v = a
            },
            setBaseConfigData: function(a) {
                a ? angular.extend(v, a) : angular.extend(v, I)
            },
            getBaseConfigData: function(a) {
                return I
            },
            getGroupData: function() {
                return a.get(G.GROUP_DATA)
            },
            getDevicePathLinks: function(b) {
                return a.get(G.PATH_LINKS + b)
            },
            getDataWithNoLocationInfo: function(a) {
                return b("filter")(a, {
                    isDeviceGeoData: !1
                })
            },
            appendVipMapDirective: function() {
                return v ? void $(".geographyContainer").append(c('<div data-viptela-map class="mapContainerHeight" data-resizeable-component data-height-offset="84"> <vip-spinner data-ng-show="!googleMapsAPIDone || !markersLoaded || loadingMarkerData || loadingPathData" class="mapNoData geography-spinner"> </vip-spinner> </div>')(v)) : d.error("Please set scope for Geography Service.")
            },
            loadMapFiltersJSON: function() {
                a.get(G.MAP_FILTER_JSON + "?v=" + (new Date).getTime()).then(function(a) {
                    v.filterDataForLinks = a.filters.links,
                    v.filterDataForDevices = a.filters.devices,
                    angular.forEach(v.filterDataForLinks, function(a) {
                        angular.forEach(a.options, function(a) {
                            a.originalSelectionState = a.selected
                        })
                    }),
                    angular.forEach(v.filterDataForDevices, function(a) {
                        angular.forEach(a.options, function(a) {
                            a.originalSelectionState = a.selected
                        })
                    })
                }, function(a) {
                    m.error("Failure loading map filters")
                })
            },
            loadMapData: function(a, b) {
                var c = this;
                n(a, b).then(function() {
                    v.markersLoaded = !0,
                    c.updateOnMarkersFilterChange(),
                    c.updateOnSelectedDeviceFilters(v.selectedDeviceFilters),
                    c.geographyServerEventHandler("subscribe", "device")
                })
            },
            constructMarkersObjFromData: function(a) {
                return _.map(a, function(a) {
                    return angular.extend({
                        hostname: a["host-name"] ? a["host-name"] : a.localSystemIp,
                        lat: parseFloat(a.latitude),
                        lng: parseFloat(a.longitude),
                        layer: "viptela",
                        localSystemIp: a["local-system-ip"],
                        systemIp: a["system-ip"],
                        riseOnHover: !0,
                        siteid: a["site-id"],
                        devicetype: a["device-type"],
                        status: a.status,
                        reachability: a.reachability,
                        icon: {
                            type: "div",
                            className: "hide-name",
                            iconSize: [36, 54],
                            iconAnchor: [20, 56],
                            labelAnchor: [15, -35],
                            popupAnchor: [-2, -55],
                            html: '<div style="background-color:#' + a.status_color + ';width:100%;height:100%;text-align:center;position:relative"><div class="geography-' + a["device-type"] + '"></div> <label id="lblid" ng-hide="checked" class="hostNameColor">' + a["host-name"] + "</label></div>"
                        },
                        label: {
                            message: '<div class="geography-label"><div class="deviceListSection"><div class="topSection"><div class="hostname">' + a["host-name"] + '</div></div><div class="middleSection"> <div class="pull-left">' + a["local-system-ip"] + " | Site ID: " + a["site-id"] + '</div></div><div class="bottomSection"><div class="pull-left personality">' + (a["device-type"] ? a["device-type"].capitalizeGivenLetter(1, "-") : "") + "</div> </div></div></div>",
                            options: {
                                noHide: !1,
                                direction: "auto"
                            }
                        },
                        compileMessage: !0
                    }, a)
                })
            },
            constructPathsObjFromData: function(a, c) {
                function d(a, c) {
                    var d, e, f, g = 0, h = "#827717", i = "#ff6e56", j = "#00897B", k = "#ff6e56", l = "#263238";
                    if (f = b("filter")(a, {
                        status: "!up"
                    }, !0),
                    g = angular.isDefined(f) && f.length > 0,
                    d = b("filter")(a, {
                        linkType: "control"
                    }, !0),
                    e = b("filter")(a, {
                        linkType: "data"
                    }, !0),
                    angular.isDefined(d) && d.length > 0 && angular.isDefined(e) && e.length > 0)
                        return g ? i : l;
                    var m = a[0];
                    if (g)
                        switch (m.linkType) {
                        case "control":
                            return i;
                        case "data":
                            return k
                        }
                    else
                        switch (m.linkType) {
                        case "control":
                            return h;
                        case "data":
                            return j
                        }
                }
                function e(a, c) {
                    var d, e;
                    return d = b("filter")(a, {
                        status: "!up"
                    }, !0),
                    e = angular.isDefined(d) && d.length > 0,
                    e ? "5, 10" : ""
                }
                function f(a, b) {
                    var c = {}
                      , d = "";
                    return c.options = {
                        noHide: !0,
                        direction: "auto"
                    },
                    c.message = '<div class="pathLabel clearfix">',
                    angular.forEach(a, function(a) {
                        c.message = c.message + '<div class="linkTypeTitle">' + a[0].linkType.capitalizeGivenLetter(0) + "</div>";
                        var b = _.groupBy(a, function(a) {
                            return a.status
                        });
                        Object.keys(b);
                        angular.forEach(b, function(a, b) {
                            d = "",
                            c.message = c.message + '<div class="linkData clearfix"><div class="linkData-status-title" data-ng-class="index">' + b.capitalizeGivenLetter(0) + ': </div> <div class="linkData-status-content">';
                            for (var e = 0; e < a.length; e++)
                                d = d + "<p>" + a[e].linkKeyDisplay + "</p>";
                            c.message = c.message + d + "</div></div>"
                        })
                    }),
                    c.message = c.message + "</div>",
                    c
                }
                var g = []
                  , h = _.groupBy(a, function(a) {
                    if (a.sourceCoordinates.join() !== a.targetCoordinates.join())
                        return a.sourceCoordinates + " " + a.targetCoordinates
                });
                return h = _.omit(h, "undefined"),
                h = _.transform(h, function(a, b, c) {
                    var d = c.split(" ").reverse().join(" ");
                    _.has(a, d) ? angular.forEach(b, function(b) {
                        a[d].push(b)
                    }) : a[c] = b
                }),
                _.each(h, function(a, b) {
                    var c = {};
                    c.geodesic = !0,
                    c.opacity = .5,
                    a.length > 1 ? (c.color = d(a, !0),
                    c.weight = 1,
                    c.dashArray = e(a, !0)) : (c.color = d(a, !1),
                    c.weight = 1,
                    c.dashArray = e(a, !1)),
                    _.each(a, function(b) {
                        var d = _.groupBy(a, function(a) {
                            return a.source + " " + a.target
                        });
                        a.length > 1 ? c.label = f(d, !0) : c.label = f(d, !1),
                        c.compileMessage = !0,
                        angular.isDefined(c.latlngs) || (c.latlngs = [{
                            lat: parseFloat(b.sourceCoordinates[0]),
                            lng: parseFloat(b.sourceCoordinates[1])
                        }, {
                            lat: parseFloat(b.targetCoordinates[0]),
                            lng: parseFloat(b.targetCoordinates[1])
                        }])
                    }),
                    g.push(c)
                }),
                g
            },
            updatePathsHandler: function(a) {
                var b = v.selectedLinkFilters;
                if (!angular.isDefined(a) || 0 == b.length)
                    return [];
                var c = _.filter(_.pluck(b, "search_keys"), function(a) {
                    return a.contains("Control")
                })
                  , d = _.filter(_.pluck(b, "search_keys"), function(a) {
                    return a.contains("Data")
                });
                b = {
                    control_conn: void 0,
                    data_conn: void 0
                },
                c.length > 0 && (b.control_conn = c),
                d.length > 0 && (b.data_conn = d);
                var e = [];
                return angular.forEach(a, function(a, c) {
                    if (!A[a.source] || !A[a.target])
                        return void e.push(c);
                    if (a.sourceCoordinates = [A[a.source].latitude, A[a.source].longitude],
                    a.targetCoordinates = [A[a.target].latitude, A[a.target].longitude],
                    b.control_conn && b.data_conn) {
                        if (b.control_conn[0].contains("Up") && angular.equals(a.linkType.toLowerCase(), "control") && !angular.equals(a.status.toLowerCase(), "up"))
                            return void e.push(c);
                        if (1 == b.data_conn.length) {
                            if (b.data_conn[0].contains("Up") && angular.equals(a.linkType.toLowerCase(), "data") && !angular.equals(a.status.toLowerCase(), "up"))
                                return void e.push(c);
                            if (b.data_conn[0].contains("Down") && angular.equals(a.linkType.toLowerCase(), "data") && angular.equals(a.status.toLowerCase(), "up"))
                                return void e.push(c)
                        }
                    } else if (b.control_conn) {
                        if (angular.equals(a.linkType.toLowerCase(), "data"))
                            return void e.push(c);
                        if (b.control_conn[0].contains("Up") && !angular.equals(a.status.toLowerCase(), "up"))
                            return void e.push(c)
                    } else if (b.data_conn) {
                        if (angular.equals(a.linkType.toLowerCase(), "control"))
                            return void e.push(c);
                        if (1 == b.data_conn.length) {
                            if (b.data_conn[0].contains("Up") && !angular.equals(a.status.toLowerCase(), "up"))
                                return void e.push(c);
                            if (b.data_conn[0].contains("Down") && angular.equals(a.status.toLowerCase(), "up"))
                                return void e.push(c)
                        }
                    }
                }),
                k.removeFromArray(a, e),
                a
            },
            updateMarkersHandler: function(a, b) {
                return angular.isDefined(a) && 0 != b.length ? (b = _.map(b, function(a) {
                    var b = a.search_keys
                      , c = a.id;
                    if (c.indexOf("device") >= 0)
                        return b.toLowerCase()
                }),
                _.filter(a, function(a) {
                    if (angular.isDefined(a["device-type"]))
                        return _.indexOf(b, a["device-type"].toLowerCase()) > -1
                })) : []
            },
            resetFilterSelection: function(a) {
                angular.forEach(a, function(a) {
                    angular.forEach(a.options, function(a) {
                        a.selected = a.originalSelectionState
                    })
                })
            },
            resetAllFilters: function() {
                this.resetFilterSelection(v.filterDataForLinks),
                this.resetFilterSelection(v.filterDataForDevices)
            },
            updateOnSelectedDeviceFilters: function(a) {
                var b;
                v.loadingMarkerData = !0,
                angular.forEach(a, function(a) {
                    angular.isDefined(b) || (b = !(a.id.indexOf("host") < 0) || void 0)
                }),
                v.showLabelsForMarkers = !!b,
                v.taggedSearchObject.setSearchCache(this.updateMarkersHandler(y, a)),
                u(v.taggedSearchObject.getSearchCache()),
                v.markersFiltered = JSON.parse(JSON.stringify(v.taggedSearchObject.searchData(v.taggedSearchObject.getSearchTagsCache()))),
                J.updateOnMarkersFilterChange()
            },
            updateOnSelectedLinkFilters: function() {
                r(w)
            },
            updateOnMarkersFilterChange: function() {
                var a = this;
                B ? B && l(function() {
                    v.loadingMarkerData = !1,
                    B = !1
                }) : (v.markersForLeaflet = {},
                _.defer(function() {
                    v.markersForLeaflet = v.markersFiltered,
                    a.updateToFitBounds()
                }))
            },
            updateToFitBounds: function() {
                angular.isDefined(v.map) && "" !== v.map && !B ? l(function() {
                    angular.element(".leaflet-control-attribution.leaflet-control").children().attr("target", "_blank"),
                    v.map.invalidateSize(),
                    v.markersForLeaflet.length > 0 ? (v.map.fitBounds(v.markersForLeaflet, {
                        padding: [100, 100]
                    }),
                    v.map.setMaxBounds([[85, -180], [-85, 180]])) : v.map.fitBounds([[85, -180], [-85, 180]]),
                    v.loadingMarkerData = !1,
                    v.loadingPathData = !1
                }) : (v.loadingMarkerData = !1,
                v.loadingPathData = !1)
            },
            geographyServerEventHandler: function(a, b) {
                var c = this;
                w = null,
                "subscribe" === a ? "device" === b && (z = v.$on("device_event", function(a, b) {
                    _.indexOf(["add", "delete"], b) > -1 && (c.geographyServerEventHandler("unsubscribe", "device"),
                    s(v.filteredGroup[0].mapuri, "device"))
                }),
                h.subscribe(F)) : "unsubscribe" === a && "device" === b && (h.unsubscribe(F),
                angular.isDefined(z) && _.isFunction(z) && z(),
                z = null)
            },
            clearPathLinks: function() {
                for (var a in v.nodePaths)
                    v.nodePaths.hasOwnProperty(a) && delete v.nodePaths[a]
            },
            resetVariables: function() {
                v = void 0,
                w = void 0,
                A = {},
                x = void 0,
                y = void 0,
                B = !1,
                C = !1,
                z = null
            }
        };
        return J
    }
    angular.module("vManage").factory("geographyService", a),
    a.$inject = ["restService", "$filter", "$compile", "notification", "$state", "leafletData", "appConfig", "eventPoll", "eventListObject", "$q", "appUtil", "$timeout", "$log"]
}(),
function() {
    function a(a, b) {
        return {
            restrict: "A",
            replace: "false",
            scope: !1,
            templateUrl: "/app/monitor/geography/partials/viptelaMapTemplate.html",
            link: function(b, c) {
                a.getMap().then(function(c) {
                    b.map = c,
                    b.$on("leafletDirectiveMap.click", function(c, d) {
                        a.getMap().then(function(a) {
                            a.closePopup()
                        });
                        for (var e in b.nodePaths)
                            b.nodePaths.hasOwnProperty(e) && delete b.nodePaths[e]
                    })
                })
            }
        }
    }
    angular.module("vManage").directive("viptelaMap", a),
    a.$inject = ["leafletData", "geographyService"]
}(),
angular.module("vManage").controller("MonitorController", MonitorController),
MonitorController.$inject = ["$scope"],
angular.module("vManage").controller("AboutController", AboutController),
AboutController.$inject = ["$scope", "appUtil", "$state", "aboutService", "$mdDialog", "notification"],
angular.module("vManage").service("aboutService", aboutService),
aboutService.$inject = ["restService", "$q"],
function() {
    function a(a, b, c, d, e, f, g) {
        var h = this;
        e.returnEventsEnum(),
        e.returnViewsEnum();
        h.$onInit = function() {
            h.sliderElementID = "sliderNav"
        }
        ,
        h.listItemClickHandler = function(a) {
            var d = a.detailsURL;
            b(h.sliderElementID).close().then(function() {
                console.log("sidenav closed"),
                angular.isDefined(a.uuid) ? c.go(d, {
                    uuid: a.uuid
                }) : angular.isDefined(a.pid && a.actionId) && c.go(d, {
                    activity: a.actionId.toLowerCase(),
                    pid: a.pid
                })
            })
        }
        ,
        h.updateSortHandler = function(a) {
            var b = h.activityManagerObj.options.currentTab;
            h.activityManagerObj.options[b].data = h.activityManagerObj.sort(h.activityManagerObj.options[b].data, a.key, h.activityManagerObj.options[b].reverse)
        }
        ,
        h.viewAllButtonClickHandler = function() {
            var a = h.activityManagerObj.getURLToViewAll();
            b(h.sliderElementID).close().then(function() {
                console.log("sidenav closed"),
                c.go(a)
            })
        }
        ,
        h.clearAllButtonClickHandler = function() {
            h.activityManagerObj.clearAll()
        }
        ,
        h.ackIconClickHandler = function(a) {
            h.activityManagerObj.ackItem(a)
        }
        ,
        h.closeIconClickHandler = function() {
            var a = b(h.sliderElementID).isOpen();
            a && b(h.sliderElementID).close()
        }
    }
    a.$inject = ["$scope", "$mdSidenav", "$state", "rbac", "eventPoll", "eventListObject", "$filter"],
    angular.module("vManage").component("activityManager", {
        templateUrl: "app/nav/activityManager/activityManager.html",
        bindings: {
            activityManagerObj: "<"
        },
        controller: a,
        controllerAs: "activityManagerCtrl"
    })
}(),
function() {
    function a(a, b, c, d, e) {
        var f = {
            active: {
                data: [],
                count: 0,
                taggedSearchObject: {},
                searchProperties: [],
                reverse: !0,
                sortAscend: !1,
                disableSortReverseIcon: !1,
                searchTags: []
            },
            cleared: {
                data: [],
                count: 0,
                taggedSearchObject: {},
                searchProperties: [],
                reverse: !0,
                sortAscend: !1,
                disableSortReverseIcon: !1,
                searchTags: []
            },
            currentTab: "active",
            serverCallInProgress: !1
        }
          , g = function(a) {
            this.options = angular.merge({}, f, a),
            this.setDefaultSortOption = function(a) {
                if (angular.isDefined(a.sortOptions) && a.sortOptions.length > 0 && angular.isDefined(a.defaultSortKey)) {
                    var b = _.find(a.sortOptions, {
                        key: a.defaultSortKey
                    });
                    angular.isDefined(b) && (a.selectedSortOption = b)
                }
            }
            ,
            this.options.active.taggedSearchObject = new b(this.options.active.data,this.options.active.searchProperties),
            this.options.cleared.taggedSearchObject = new b(this.options.cleared.data,this.options.cleared.searchProperties),
            this.setDefaultSortOption(this.options.cleared),
            this.setDefaultSortOption(this.options.active)
        };
        return g.prototype.tabSelected = function(a) {
            var b = this;
            b.showSpinner(),
            _.each(this.options.tabs, function(a) {
                a.active = !1
            }),
            a.active = !0,
            "active" === a.type ? this.options.currentTab = "active" : "cleared" === a.type && (this.options.currentTab = "cleared"),
            b.refresh().then(function() {
                b.hideSpinner()
            }, function() {
                b.hideSpinner()
            })
        }
        ,
        g.prototype.showSpinner = function() {
            this.options.serverCallInProgress = !0
        }
        ,
        g.prototype.hideSpinner = function() {
            this.options.serverCallInProgress = !1
        }
        ,
        g.prototype.resetCount = function() {
            this.options.active.count = 0,
            this.options.cleared.count = 0
        }
        ,
        g.prototype.resetActiveData = function() {
            this.options.active.count = 0,
            this.options.active.data.reset()
        }
        ,
        g.prototype.resetClearedData = function() {
            this.options.cleared.count = 0,
            this.options.cleared.data.reset()
        }
        ,
        g.prototype.clearAll = function() {
            var a = this;
            "active" === a.options.currentTab ? a.resetActiveData() : a.resetClearedData()
        }
        ,
        g.prototype.getPropertyList = function(a, b) {
            var c = [];
            return angular.forEach(a, function(a) {
                angular.forEach(b, function(b) {
                    if (angular.equals(b, a.property)) {
                        var d = {
                            type: a.dataType,
                            name: a.property,
                            displayName: a.title,
                            displayFormat: a.displayFormat
                        };
                        c.push(d)
                    }
                })
            }),
            c
        }
        ,
        g.prototype.getSelectedSortKey = function() {
            var a = this
              , b = a.options.currentTab;
            return angular.isDefined(a.options[b].selectedSortOption) && angular.isDefined(a.options[b].selectedSortOption.key) ? a.options[b].selectedSortOption.key : angular.isDefined(a.options[b].defaultSortKey) && "string" == typeof a.options[b].defaultSortKey ? a.options[b].defaultSortKey : null
        }
        ,
        g.prototype.toggleSortDirection = function() {
            function a() {
                console.log("Toggling sort direction now");
                var a = this
                  , b = a.options.currentTab
                  , d = a.getSelectedSortKey();
                c(function() {
                    a.options[b].reverse = !a.options[b].reverse,
                    a.options[b].sortAscend = !a.options[b].sortAscend,
                    a.options[b].data = a.sort(a.options[b].data, d, a.options[b].reverse),
                    a.options[b].disableSortReverseIcon = !1,
                    a.hideSpinner()
                })
            }
            console.log("Toggling sort direction triggered");
            var b = this
              , e = b.options.currentTab;
            b.options[e].disableSortReverseIcon = !0,
            b.showSpinner(),
            d(a.bind(b), 500, null)
        }
        ,
        g.prototype.orderBy = function(a) {
            return function(b) {
                return "site-id" === a ? parseInt(b[a]) : b[a]
            }
        }
        ,
        g.prototype.sort = function(b, c, d) {
            var f, g = [{
                key: "critical",
                value: 4
            }, {
                key: "major",
                value: 3
            }, {
                key: "medium",
                value: 2
            }, {
                key: "minor",
                value: 1
            }], h = function(a, b) {
                var c = _.find(g, {
                    key: a.value
                })
                  , d = _.find(g, {
                    key: b.value
                });
                return c = angular.isDefined(c) ? c.value : null,
                d = angular.isDefined(d) ? d.value : null,
                e.sortNumber(c, d)
            };
            return c && (f = "severity" === c ? a("orderBy")(b, c, d, h) : a("orderBy")(b, c, d)),
            angular.isDefined(f) ? f : b
        }
        ,
        g.prototype.setLastUpdatedTimeStamp = function() {
            var b = this
              , c = b.options.currentTab;
            b.options[c].lastUpdatedTimeStamp = a("momentDateFormat")(Date.now(), "DD MMM YYYY h:mm:ss a")
        }
        ,
        g
    }
    angular.module("vManage").factory("ActivityManager", a),
    a.$inject = ["$filter", "TaggedSearchService", "$timeout", "$debounce", "rowSorter"]
}(),
function() {
    function a(a) {
        var b = function(b, c, d, e, f) {
            this.name = "alarm",
            this.uuid = b,
            this.type = c,
            this.severity = d.toLowerCase(),
            this.entryTime = e,
            this.clearedTime = f,
            this.entry_time = angular.isDefined(e) ? a("momentDateFormat")(e, "DD MMM YYYY h:mm:ss a") : void 0,
            this.cleared_time = angular.isDefined(f) ? a("momentDateFormat")(f, "DD MMM YYYY h:mm:ss a") : void 0,
            this.selected = !1,
            this.topSectionContent = "",
            this.mediumSectionContent = "",
            this.detailsURL = "app.monitor.alarms.details",
            this.createAlarmValuesRow = function(a) {
                var b = ""
                  , c = 0;
                return _.each(a, function(a, d) {
                    c++,
                    c > 1 && (b += "<br>"),
                    a.length > 15 && (a = a.substring(0, 15) + "..."),
                    b += '<span class="key">' + d + ':&nbsp </span><span class="value details">' + a + "</span>"
                }),
                b
            }
        };
        return b.prototype.setIconBySeverity = function() {
            switch (this.severity) {
            case "critical":
                this.icon = "info-circle";
                break;
            case "major":
                this.icon = "arrow-circle-up";
                break;
            case "medium":
                this.icon = "arrow-circle-o-down";
                break;
            case "minor":
                this.icon = "arrow-circle-up";
                break;
            default:
                this.icon = "chevron-circle-down"
            }
        }
        ,
        b.prototype.setHeader = function(a) {
            this.header = angular.isDefined(a) ? a : ""
        }
        ,
        b.prototype.setTopSectionContent = function(a) {
            angular.isDefined(a) && (this.header = a),
            this.rule_name_display = a,
            this.topSectionContent = angular.isDefined(this.header) ? this.header.split("_").join(" ") : ""
        }
        ,
        b.prototype.setMediumSectionContent = function(a) {
            var b = this;
            angular.forEach(a, function(a) {
                b.mediumSectionContent += b.createAlarmValuesRow(a) + "<br>"
            }),
            b.alarm_search_status = a
        }
        ,
        b.prototype.setEntryTime = function(b, c) {
            this.entryTime = b,
            this.entry_time = a("momentDateFormat")(b, c)
        }
        ,
        b
    }
    angular.module("vManage").factory("Alarm", a),
    a.$inject = ["$filter"]
}(),
function() {
    function a(a, b, c, d, e, f, g) {
        var h = {
            name: "alarms",
            title: "Alarms",
            viewAllURL: "app.monitor.alarms.list",
            showViewAllSection: !0,
            alarmDetailsURL: "app.monitor.alarms.details",
            active: {
                searchPropertyList: ["rule_name_display", "entry_time", "severity", "alarm_search_status"],
                sortOptions: [{
                    value: "Start Time",
                    key: "entryTime"
                }, {
                    value: "Severity",
                    key: "severity"
                }],
                defaultSortKey: "entryTime",
                allowClearAll: !0
            },
            cleared: {
                searchPropertyList: ["rule_name_display", "entry_time", "cleared_time", "severity", "alarm_search_status"],
                sortOptions: [{
                    value: "Start Time",
                    key: "entryTime"
                }, {
                    value: "End Time",
                    key: "clearedTime"
                }, {
                    value: "Severity",
                    key: "severity"
                }],
                defaultSortKey: "clearedTime",
                allowClearAll: !0
            },
            tabs: [{
                type: "active",
                title: "Active",
                active: !0
            }, {
                type: "cleared",
                title: "Cleared",
                active: !1
            }]
        }
          , i = function(e) {
            this.options = angular.merge({}, h, e),
            a.call(this, this.options),
            this.updateAlarmsCountSuccessHandler = function(a) {
                this.options.active.count = a.data[0].count >= 1e3 ? "999+" : a.data[0].count,
                this.options.cleared.count = a.data[0].cleared_count >= 1e3 ? "999+" : a.data[0].cleared_count
            }
            ,
            this.getInActiveTabType = function() {
                return "active" === this.options.currentTab ? "cleared" : "active"
            }
            ,
            this.updateInActiveAlarmsTabCountSuccessHandler = function(a) {
                var b = this.getInActiveTabType();
                "active" === b ? this.options.active.count = a.data[0].count >= 1e3 ? "999+" : a.data[0].count : "cleared" === b && (this.options.cleared.count = a.data[0].cleared_count >= 1e3 ? "999+" : a.data[0].cleared_count)
            }
            ,
            this.updateInActiveAlarmsTabCountErrorHandler = function(a) {
                var b = this.getInActiveTabType();
                "active" === b ? this.options.active.count = 0 : "cleared" === b && (this.options.cleared.count = 0),
                c.confirm(data),
                f.error("Failed to get alarms count from server")
            }
            ,
            this.updateAlarmsCountErrorHandler = function(a) {
                i.resetCount(),
                c.confirm(a),
                f.error("Failed to get alarms count from server")
            }
            ,
            this.setAlarmsData = function(a, b) {
                return _.map(b, function(b) {
                    var c = new d(b.uuid,a,b.severity,b.entry_time,b.cleared_time);
                    return c.setIconBySeverity(),
                    c.setTopSectionContent(b.rule_name_display),
                    c.setMediumSectionContent(b.values_short_display),
                    c
                })
            }
            ,
            this.alarmsAPISuccessHandler = function(a) {
                var c = this
                  , d = c.options.currentTab
                  , e = c.options[d]
                  , f = c.getSelectedSortKey();
                b.updateColumnData(a.header.columns),
                e.data = c.setAlarmsData(d, a.data),
                e.data = c.sort(e.data, f, e.reverse),
                e.count = e.data.length >= 1e3 ? "999+" : e.data.length,
                e.searchProperties = c.getPropertyList(a.header.columns, e.searchPropertyList),
                e.taggedSearchObject.setSearchProperties(g.getSearchPropertiesForCols(e.searchProperties)),
                e.taggedSearchObject.setSearchCache(e.data),
                0 != e.taggedSearchObject.getSearchTagsCache().length && angular.copy(e.taggedSearchObject.searchData(e.taggedSearchObject.getSearchTagsCache()), e.data),
                e.disableSortReverseIcon = !1,
                c.setLastUpdatedTimeStamp()
            }
        };
        return i.prototype = Object.create(a.prototype),
        i.prototype.constructor = i,
        i.prototype.refreshInActiveTabAlarmsCount = function() {
            var a = this
              , c = e.defer();
            return b.getAlarmsCount().then(function(b) {
                a.updateInActiveAlarmsTabCountSuccessHandler(b),
                c.resolve()
            }, function(b) {
                a.updateInActiveAlarmsTabCountErrorHandler(b),
                c.reject()
            }),
            c.promise
        }
        ,
        i.prototype.getAlarms = function(a) {
            var d = this
              , h = e.defer();
            return angular.isDefined(a) || (a = d.options.currentTab),
            d.options[a].disableSortReverseIcon = !0,
            "active" === a ? b.getActiveAlarms().then(function(a) {
                d.alarmsAPISuccessHandler.call(d, a),
                d.hideSpinner(),
                h.resolve()
            }, function(b) {
                d.options[a].disableSortReverseIcon = !1,
                angular.isObject(b) && g.checkNestedProperty(b, "error", "details") ? (f.error("ALARMS: Error occurred while getting active alarms: " + b.error.message + ":" + b.error.details),
                c.error("ALARMS: " + b.error.message + ": " + b.error.details)) : (f.info("ALARMS: API error response needs to be updated to conform to company guidelines."),
                c.error("ALARMS: Failed to get active alarms")),
                d.hideSpinner(),
                h.reject()
            }) : "cleared" === a && b.getClearedAlarms().then(function(a) {
                d.alarmsAPISuccessHandler.call(d, a),
                d.hideSpinner(),
                h.resolve()
            }, function(b) {
                d.options[a].disableSortReverseIcon = !1,
                angular.isObject(b) && g.checkNestedProperty(b, "error", "details") ? (f.error("ALARMS: Error occurred while getting cleared alarms: " + b.error.message + ":" + b.error.details),
                c.error("ALARMS: " + b.error.message + ": " + b.error.details)) : (f.info("ALARMS: API error response needs to be updated to conform to company guidelines."),
                c.error("ALARMS: Failed to get cleared alarms")),
                d.hideSpinner(),
                h.reject()
            }),
            h.promise
        }
        ,
        i.prototype.getURLToDetailsView = function() {
            return this.options.alarmDetailsURL
        }
        ,
        i.prototype.getURLToViewAll = function() {
            return this.options.viewAllURL
        }
        ,
        i.prototype.searchCallBackHandler = function(a) {
            if (angular.isDefined(a) && angular.isArray(a) && a.length > 0) {
                var b = this
                  , c = b.options[b.options.currentTab]
                  , d = b.getSelectedSortKey();
                c.data = b.sort(a, d, c.reverse)
            }
        }
        ,
        i.prototype.ackItem = function(a) {
            var d = this;
            b.sendAlarmAck(a.uuid, d.options.currentTab).then(function(b) {
                var c = _.findIndex(d.options[a.type].data, function(b) {
                    return angular.equals(b.uuid, a.uuid)
                });
                d.options[a.type].data.splice(c, 1),
                d.sendAck = !0,
                d.updateAlarmsCountSuccessHandler(b)
            }, function(b) {
                angular.isObject(b) && g.checkNestedProperty(b, "error", "details") ? (f.error("ALARMS: Error occurred while clearing alarm: " + b.error.message + ":" + b.error.details),
                c.error("ALARMS: " + b.error.message + ": " + b.error.details)) : (f.info("ALARMS: API error response needs to be updated to conform to company guidelines."),
                c.error("ALARMS: Failed to clear alarm for uuid:" + a.uuid))
            })
        }
        ,
        i.prototype.getListData = function() {
            var a = e.defer()
              , b = this
              , c = b.refreshInActiveTabAlarmsCount()
              , d = b.getAlarms();
            return e.all([c, d]).then(function() {
                a.resolve()
            }, function() {
                a.reject()
            }),
            a.promise
        }
        ,
        i.prototype.refresh = function() {
            var a = this;
            return a.getListData()
        }
        ,
        i.prototype.clearAll = function() {
            var d = this;
            b.sendAllAlarmAck(d.options.currentTab).then(function() {
                d.sendAck = !0,
                a.prototype.clearAll.call(d)
            }, function(a) {
                angular.isObject(a) && g.checkNestedProperty(a, "error", "details") ? (f.error("ALARMS: Error occurred while clearing alarms: " + a.error.message + ":" + a.error.details),
                c.error("ALARMS: " + a.error.message + ": " + a.error.details)) : (f.info("ALARMS: API error response needs to be updated to conform to company guidelines."),
                c.error("ALARMS: Failed to clear alarms"))
            })
        }
        ,
        i
    }
    angular.module("vManage").factory("AlarmsManager", a),
    a.$inject = ["ActivityManager", "alarmsManagerService", "notification", "Alarm", "$q", "$log", "appUtil"]
}(),
function() {
    function a(a, b) {
        return {
            getActiveAlarms: function(c) {
                if (angular.isDefined(c)) {
                    var d = {
                        VSessionId: c
                    };
                    return a.get(b.ACTIVE_ALARMS_URL, d)
                }
                return a.get(b.ACTIVE_ALARMS_URL)
            },
            getClearedAlarms: function() {
                return a.get(b.CLEARED_ALARMS_URL)
            },
            getAlarmDetails: function(c) {
                return a.get(b.ALARM_DETAILS_URL + c)
            },
            sendAlarmAck: function(c, d) {
                var e, f = {
                    uuid: [c]
                };
                return e = "active" === d ? b.ACTIVE_ALARM_ACK_URL : b.CLEARED_ALARM_ACK_URL,
                a.post(e, f)
            },
            sendAllAlarmAck: function(c) {
                var d, e = {};
                return d = "active" === c ? b.ALL_ACTIVE_ALARM_ACK_URL : b.ALL_CLEARED_ALARM_ACK_URL,
                a.post(d, e)
            },
            getAlarmsCount: function() {
                return a.get(b.DASHBOARD_ALARMS_COUNT)
            },
            updateColumnData: function(a) {
                if (angular.isDefined(a) && angular.isArray(a)) {
                    var b = _.findIndex(a, {
                        property: "entry_time"
                    });
                    b > -1 && (a[b].title = "Start Time"),
                    b = _.findIndex(a, {
                        property: "cleared_time"
                    }),
                    b > -1 && (a[b].title = "End Time"),
                    a.push({
                        title: "Alarm Details",
                        property: "alarm_search_status",
                        dataType: "array"
                    })
                }
            },
            createColumns: function() {
                return [{
                    title: "System IP",
                    property: "system-ip",
                    dataType: "string",
                    width: 100
                }, {
                    title: "Date & Time",
                    property: "entry_time",
                    displayFormat: "DD MMM YYYY h:mm:ss A z",
                    inputFormat: "unix-time",
                    width: 200,
                    dataType: "date"
                }, {
                    title: "Event Name",
                    property: "eventname",
                    dataType: "string",
                    width: 100
                }, {
                    title: "Component",
                    property: "component",
                    dataType: "string",
                    width: 100
                }, {
                    title: "Severity Level",
                    property: "severity-level",
                    dataType: "string",
                    width: 100
                }, {
                    title: "Hostname",
                    property: "host-name",
                    dataType: "string",
                    width: 100
                }, {
                    title: "VPN ID",
                    property: "vpn-id",
                    dataType: "string",
                    width: 100
                }, {
                    title: "Peer",
                    property: "peer",
                    dataType: "string",
                    width: 100
                }, {
                    title: "BGP New State",
                    property: "bgp-new-state",
                    dataType: "string",
                    width: 100
                }, {
                    title: "Local Address",
                    property: "local-address",
                    dataType: "string",
                    width: 100
                }, {
                    title: "Local Router ID",
                    property: "local-routerid",
                    dataType: "string",
                    width: 100
                }, {
                    title: "Peer Router ID",
                    property: "peer-routerid",
                    dataType: "string",
                    width: 100
                }]
            }
        }
    }
    angular.module("vManage").service("alarmsManagerService", a),
    a.$inject = ["restService", "alarmsConstants"]
}(),
function() {
    function a(a) {
        var b = function(a, b) {
            this.name = "task",
            this.pid = b.processId,
            this.actionId = b.action,
            this.type = a,
            this.totalCount = b.total,
            this.userSessionIP = b.userSessionIP,
            this.userSessionUserName = b.userSessionUserName,
            this.task_search_status = b.task_search_status,
            this.computeTaskStatus(b),
            this.setTopSectionContent(b.name),
            this.startTime = b.startTime,
            this.endTime = b.endTime,
            this.setStartTime(b.startTime, "DD MMM YYYY h:mm:ss a"),
            this.setEndTime(b.endTime, "DD MMM YYYY h:mm:ss a"),
            this.detailsURL = "app.device.status",
            this.tenantId = b.tenantId,
            this.tenantName = b.tenantName
        };
        return b.prototype.computeTaskStatus = function(a) {
            var b = this;
            if (b.taskState = "",
            angular.isDefined(a.validation) && a.validation.status && a.validation.status.toLowerCase().indexOf("failure") > -1)
                b.taskState = "Validation Failed",
                b.task_search_status = b.task_search_status + b.taskState,
                b.icon = "cancel",
                b.iconColorClass = "critical";
            else if (angular.isDefined(a.count) && "object" == typeof a.count) {
                var c = 0
                  , d = angular.isDefined(a.count) ? Object.keys(a.count).length : 0;
                for (var e in a.count)
                    "" !== this.taskState && (this.taskState = this.taskState + " | "),
                    b.taskState = this.taskState + e + ": " + a.count[e],
                    e.toLowerCase().indexOf("failure") > -1 ? c++ : void 0;
                c > 0 && c === d ? (b.icon = "cancel",
                b.iconColorClass = "critical") : c > 0 && c < d ? (b.icon = "error",
                b.iconColorClass = "major") : (b.icon = "check_circle",
                b.iconColorClass = "normal")
            }
        }
        ,
        b.prototype.setIconByState = function(a) {
            switch (a = a.toLowerCase()) {
            case "success":
                this.icon = "check_circle";
                break;
            case "scheduled":
                this.icon = "schedule";
                break;
            case "running":
                this.icon = "radio_button_unchecked";
                break;
            case "skipped":
                this.icon = "error_outline";
                break;
            case "failure":
                this.icon = "cancel";
                break;
            default:
                this.icon = "query_builder"
            }
        }
        ,
        b.prototype.setHeader = function(a) {
            this.header = angular.isDefined(a) ? a : ""
        }
        ,
        b.prototype.setDetailsURL = function(a) {
            this.detailsURL = a
        }
        ,
        b.prototype.setTopSectionContent = function(a) {
            angular.isDefined(a) && (this.header = a),
            this.action = angular.isDefined(this.header) ? this.header.split("_").join(" ") : ""
        }
        ,
        b.prototype.setStartTime = function(b, c) {
            this.entry_time = a("momentDateFormat")(b, c)
        }
        ,
        b.prototype.setEndTime = function(b, c) {
            this.cleared_time = a("momentDateFormat")(b, c)
        }
        ,
        b
    }
    angular.module("vManage").factory("Task", a),
    a.$inject = ["$filter"]
}(),
function() {
    function a(a, b, c, d, e, f, g, h) {
        var i = {
            name: "tasks",
            title: "Tasks",
            showViewAllSection: !1,
            active: {
                searchPropertyList: ["action", "task_search_status", "entry_time"],
                sortOptions: [{
                    value: "Start Time",
                    key: "startTime"
                }],
                defaultSortKey: "startTime",
                allowClearAll: !1
            },
            cleared: {
                searchPropertyList: ["action", "task_search_status", "cleared_time", "entry_time"],
                sortOptions: [{
                    value: "Start Time",
                    key: "startTime"
                }, {
                    value: "End Time",
                    key: "endTime"
                }],
                defaultSortKey: "endTime",
                allowClearAll: !0
            },
            tabs: [{
                type: "active",
                title: "Active",
                active: !0
            }, {
                type: "cleared",
                title: "Completed",
                active: !1
            }]
        }
          , j = function(e) {
            this.options = angular.merge({}, i, e),
            a.call(this, this.options),
            this.updateTasksCountSuccessHandler = function(a) {
                this.options.active.count = a.data[0].count >= 1e3 ? "999+" : a.data[0].count,
                this.options.cleared.count = a.data[0].cleared_count >= 1e3 ? "999+" : a.data[0].cleared_count
            }
            ,
            this.updateTasksCountErrorHandler = function(a) {
                var b = this;
                b.resetCount(),
                c.confirm(a),
                f.error("Failed to get alarms count from server")
            }
            ,
            this.resetCurrentTasksCount = function() {
                this.options.active.count = 0,
                this.options.cleared.count = 0
            }
            ,
            this.resetActiveTasks = function() {
                this.options.active.count = 0,
                this.options.active.data.reset()
            }
            ,
            this.resetClearedTasks = function() {
                this.options.cleared.count = 0,
                this.options.cleared.data.reset()
            }
            ,
            this.setTasksData = function(a, b) {
                var c = new d(a,b);
                return c
            }
            ,
            this.taskAPISuccessHandler = function(a, c) {
                var d = this
                  , e = d.getSelectedSortKey()
                  , f = b.getTaskColumns();
                c.count = c.data.length >= 1e3 ? "999+" : c.data.length,
                c.searchProperties = d.getPropertyList(f, c.searchPropertyList),
                c.taggedSearchObject.setSearchProperties(h.getSearchPropertiesForCols(c.searchProperties)),
                c.taggedSearchObject.setSearchCache(c.data),
                0 != c.taggedSearchObject.getSearchTagsCache().length && angular.copy(c.taggedSearchObject.searchData(c.taggedSearchObject.getSearchTagsCache()), c.data),
                c.data = g("orderBy")(c.data, e, c.reverse),
                d.setLastUpdatedTimeStamp()
            }
        };
        return j.prototype = Object.create(a.prototype),
        j.prototype.constructor = j,
        j.prototype.getListData = function(a) {
            var d = this
              , g = e.defer();
            return d.options.active.disableSortReverseIcon = !0,
            d.options.cleared.disableSortReverseIcon = !0,
            b.getTasks().then(function(a) {
                d.resetActiveTasks(),
                d.resetClearedTasks(),
                _.each(a.data, function(a) {
                    if (a.task_search_status = "",
                    angular.isDefined(a) && angular.isDefined(a.count)) {
                        var b = Object.keys(a.count);
                        b.length > 0 && _.each(b, function(b) {
                            "" !== a.task_search_status && (a.task_search_status = a.task_search_status + ","),
                            a.task_search_status = a.task_search_status + b
                        })
                    }
                    "done" === a.status ? d.options.cleared.data.push(d.setTasksData("cleared", a)) : d.options.active.data.push(d.setTasksData("active", a))
                }),
                d.taskAPISuccessHandler("active", d.options.active),
                d.taskAPISuccessHandler("cleared", d.options.cleared),
                d.options.active.disableSortReverseIcon = !1,
                d.options.cleared.disableSortReverseIcon = !1,
                g.resolve()
            }, function(a) {
                angular.isObject(a) && h.checkNestedProperty(a, "error", "details") ? (f.error("TASKS: Error occurred while getting tasks: " + a.error.message + ":" + a.error.details),
                c.error("TASKS: " + a.error.message + ": " + a.error.details)) : (f.info("TASKS: API error response needs to be updated to conform to company guidelines."),
                c.error("TASKS: Failed to get tasks")),
                d.options.active.disableSortReverseIcon = !1,
                d.options.cleared.disableSortReverseIcon = !1,
                g.reject()
            }),
            g.promise
        }
        ,
        j.prototype.searchCallBackHandler = function(a) {
            if (angular.isDefined(a) && angular.isArray(a) && a.length > 0) {
                var b = this
                  , c = b.options[b.options.currentTab]
                  , d = b.getSelectedSortKey();
                c.data = g("orderBy")(a, d, c.reverse)
            }
        }
        ,
        j.prototype.refresh = function() {
            var a = this;
            return a.getListData()
        }
        ,
        j.prototype.ackItem = function(a) {
            var d = this;
            b.deleteTask(a.pid).then(function(b) {
                var c = _.findIndex(d.options[a.type].data, function(b) {
                    return angular.equals(b.pid, a.pid)
                });
                d.options[a.type].data.splice(c, 1)
            }, function(b) {
                angular.isObject(b) && h.checkNestedProperty(b, "error", "details") ? (f.error("TASKS: Error occurred while clearing task: " + b.error.message + ":" + b.error.details),
                c.error("TASKS: " + b.error.message + ": " + b.error.details)) : (f.info("TASKS: API error response needs to be updated to conform to company guidelines."),
                c.error("TASKS: Failed to clear task for uuid:" + a.uuid))
            })
        }
        ,
        j.prototype.clearAll = function() {
            var d = this;
            b.deleteAllCompletedTask("completed").then(function() {
                a.prototype.clearAll.call(d)
            }, function(a) {
                angular.isObject(a) && h.checkNestedProperty(a, "error", "details") ? (f.error("TASKS: Error occurred while clearing tasks: " + a.error.message + ":" + a.error.details),
                c.error("TASKS: " + a.error.message + ": " + a.error.details)) : (f.info("TASKS: API error response needs to be updated to conform to company guidelines."),
                c.error("TASKS: Failed to clear completed tasks"))
            })
        }
        ,
        j
    }
    angular.module("vManage").factory("TasksManager", a),
    a.$inject = ["ActivityManager", "tasksManagerService", "notification", "Task", "$q", "$log", "$filter", "appUtil"]
}(),
function() {
    function a(a, b) {
        var c = [{
            title: "Task Action",
            property: "action",
            dataType: "string"
        }, {
            title: "Severity",
            property: "severity",
            display: "iconAndText",
            iconProperty: "severity",
            hideable: !1,
            icon: [{
                key: "Minor",
                value: "images/event_minor.png"
            }, {
                key: "Major",
                value: "images/event_major.png"
            }, {
                key: "Critical",
                value: "images/event_critical.png"
            }, {
                key: "Medium",
                value: "images/event_other.png"
            }],
            minWidth: 70,
            dataType: "string"
        }, {
            title: "Start Time",
            property: "entry_time",
            displayFormat: "DD MMM YYYY h:mm:ss A z",
            inputFormat: "unix-time",
            minWidth: 200,
            dataType: "date"
        }, {
            title: "End Time",
            property: "cleared_time",
            displayFormat: "DD MMM YYYY h:mm:ss A z",
            inputFormat: "unix-time",
            minWidth: 200,
            dataType: "date"
        }, {
            title: "Task State",
            property: "task_search_status",
            dataType: "string"
        }];
        return {
            getTasks: function() {
                return a.get(b.TASKS_URL)
            },
            deleteTask: function(c) {
                return a.delete(b.DELETE_TASK + "?processId=" + c)
            },
            deleteAllCompletedTask: function() {
                return a.delete(b.DELETE_ALL_COMPLETED_TASKS)
            },
            getTaskColumns: function() {
                return c
            },
            getTasksCount: function() {
                return a.get(b.DASHBOARD_TASKS_COUNT)
            }
        }
    }
    angular.module("vManage").service("tasksManagerService", a),
    a.$inject = ["restService", "tasksConstants"]
}(),
function() {
    function a(a) {
        var b = this;
        b.userMode = a.getUserMode(),
        b.ackItemHandler = function(a, c) {
            c.stopPropagation(),
            b.ackItem({
                item: a
            })
        }
        ,
        b.getTemplate = function() {
            return "app/nav/activityManager/vActivity/vActivity-" + b.item.name + "-partial.html"
        }
    }
    a.$inject = ["rbac"],
    angular.module("vManage").component("vActivity", {
        template: '<div ng-include="vActivityCtrl.getTemplate()" style="height: auto; overflow: hidden; min-height: 60px"> </div>',
        bindings: {
            item: "<",
            ackItem: "&"
        },
        controller: a,
        controllerAs: "vActivityCtrl"
    })
}(),
function() {
    function a(a, b, c) {
        var d = this
          , e = c.getUserMode();
        d.showLinkToProvider = "provider" !== e.mode,
        d.selectTenant = function(a) {
            d.onSelect({
                tenant: a
            })
        }
    }
    a.$inject = ["$state", "topNavService", "rbac"],
    angular.module("vManage").component("tenantOptions", {
        templateUrl: "app/nav/components/tenantOptions.html",
        bindings: {
            tenantOptions: "<",
            onSelect: "&"
        },
        controller: a,
        controllerAs: "tenantOptionsCtrl"
    })
}(),
angular.module("vManage").controller("ProfileController", ProfileController),
ProfileController.$inject = ["$scope", "$state", "topNavService", "$mdDialog"],
angular.module("vManage").controller("SidebarController", SidebarController),
SidebarController.$inject = ["$rootScope", "$scope", "$state", "appUtil", "rbac"],
angular.module("vManage").directive("sidebar", sidebar),
sidebar.$inject = ["$window", "$document"],
angular.module("vManage").service("sidebarMenuService", sidebarMenuService),
sidebarMenuService.$inject = ["restService", "apiConstants", "$state", "appConfig"],
angular.module("vManage").controller("TopNavController", TopNavController),
TopNavController.$inject = ["$scope", "$rootScope", "$state", "topNavService", "AlarmsManager", "TasksManager", "vSliderNavService", "responsiveContentHeight", "eventPoll", "$mdDialog", "TenantManagement", "rbac", "appUtil", "notification", "helpDetails", "eventListObject", "apiConstants", "$window", "$templateCache", "$filter", "restService", "alarmsManagerService", "tasksManagerService", "$log"],
angular.module("vManage").service("topNavService", topNavService),
topNavService.$inject = ["restService", "$q", "multiTenantConstants"],
function() {
    function a(a) {}
    a.$inject = ["$state"],
    angular.module("vManage").component("tenantInformation", {
        templateUrl: "app/provider-view/providerAdministration/tenantManagement/components/tenantInformation/tenantInformation.html",
        bindings: {
            selectedTenant: "<"
        },
        controller: a,
        controllerAs: "tenantInformationCtrl"
    })
}(),
function() {
    function a(a) {}
    a.$inject = ["$state"],
    angular.module("vManage").component("tenantItemDetails", {
        templateUrl: "app/provider-view/providerAdministration/tenantManagement/components/tenantItemDetails/tenantItemDetails.html",
        bindings: {
            tenantManagementObj: "<",
            tenantId: "<",
            onDelete: "&",
            onEdit: "&"
        },
        controller: a,
        controllerAs: "tenantItemDetailsCtrl"
    })
}(),
function() {
    function a(a, b) {
        var c = this;
        c.$onChanges = function(a) {
            angular.isDefined(a.tenantList.currentValue) && (c.taggedSearchObject = new b(c.tenantList,[{
                name: "name",
                isSearch: !0,
                displayName: "name"
            }]),
            c.taggedSearchObject.setSearchCache(c.tenantList))
        }
        ,
        a.$on("editTenant", function() {
            c.tenantList = c.tenantManagementObj.tenantsList,
            c.taggedSearchObject.setSearchCache(c.tenantList),
            c.taggedSearchObject.clearTagsCache()
        })
    }
    a.$inject = ["$rootScope", "TaggedSearchService"],
    angular.module("vManage").component("tenantsList", {
        templateUrl: "app/provider-view/providerAdministration/tenantManagement/components/tenantsList/tenantsList.html",
        bindings: {
            tenantManagementObj: "<",
            tenantList: "<"
        },
        controller: a,
        controllerAs: "tenantsListCtrl"
    })
}(),
function() {
    function a(a) {}
    a.$inject = ["$state"],
    angular.module("vManage").component("tenantListItem", {
        templateUrl: "app/provider-view/providerAdministration/tenantManagement/components/tenantsListItem/tenantsListItem.html",
        bindings: {
            tenant: "<"
        },
        controller: a,
        controllerAs: "tenantListItemCtrl"
    })
}(),
function() {
    function a(a, b, c, d, e, f) {
        a.tenant = {},
        a.modalTitle = "",
        a.serverCall = !1,
        a.showErrorSection = !1,
        a.userProfile = f.getUserProfile(),
        angular.isDefined(d) ? (a.addMode = !1,
        a.modalTitle = "Edit Tenant",
        a.tenant.name = d.name,
        a.tenant.description = d.desc,
        a.tenant.subdomain = d.subDomain) : (a.modalTitle = "Add Tenant",
        a.addMode = !0),
        a.save = function() {
            a.serverCall = !0;
            var b = {
                desc: a.tenant.description,
                subDomain: a.tenant.subdomain,
                vBondAddress: "1.1.1.1",
                name: a.tenant.name
            };
            a.addMode ? (b.orgName = a.tenant.orgName,
            c.createTenant(b).then(function(b) {
                a.serverCall = !1,
                a.close(b)
            }, function(b) {
                a.serverCall = !1,
                a.showErrorSection = !0,
                a.errorMessage = b
            })) : c.editTenantDetails(e, b).then(function(b) {
                a.serverCall = !1,
                a.close(b)
            }, function(b) {
                a.serverCall = !1,
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        }
        ,
        a.close = function(a) {
            b.close(a)
        }
        ,
        a.cancel = function() {
            b.dismiss()
        }
    }
    angular.module("vManage").controller("addTenantModalController", a),
    a.$inject = ["$scope", "$modalInstance", "tenantManagementService", "selectedTenant", "tenantId", "rbac"]
}(),
function() {
    function a(a, b, c, d, e) {
        a.tenant = {},
        a.tenantName = e.name,
        a.serverCall = !1,
        a.showErrorSection = !1,
        a.done = function() {
            a.serverCall = !0;
            var b = {
                password: a.tenant.password
            };
            c.deleteTenant(d, b).then(function() {
                a.serverCall = !1,
                a.close({
                    tenantId: d,
                    tenantName: a.tenantName
                })
            }, function(b) {
                a.serverCall = !1,
                a.showErrorSection = !0,
                a.errorMessage = b
            })
        }
        ,
        a.close = function(a) {
            b.close(a)
        }
        ,
        a.cancel = function() {
            b.dismiss()
        }
    }
    angular.module("vManage").controller("deleteTenantModalController", a),
    a.$inject = ["$scope", "$modalInstance", "tenantManagementService", "tenantId", "selectedTenant"]
}(),
function() {
    function a(a, b, c) {
        var d = this;
        d.noTenants = !1,
        d.tenantId = a.params.tenant,
        d.editSelectedTenant = function(a) {
            var e = b.open({
                templateUrl: "app/provider-view/providerAdministration/tenantManagement/container/modal/addTenantModal.html",
                controller: "addTenantModalController",
                windowClass: "customModalWindow",
                backdropClass: "customModalBackdrop",
                size: "lg",
                backdrop: "static",
                resolve: {
                    tenantId: function() {
                        return d.tenantId
                    },
                    selectedTenant: function() {
                        return a
                    }
                }
            });
            e.result.then(function(a) {
                d.tenantManagementCtrl.tenantManagement.updateTenantDetails(a),
                c.$emit("editTenant")
            }, function() {})
        }
        ,
        d.deleteSelectedTenant = function(a) {
            var e = b.open({
                templateUrl: "app/provider-view/providerAdministration/tenantManagement/container/modal/deleteTenantModal.html",
                controller: "deleteTenantModalController",
                windowClass: "customModalWindow",
                backdropClass: "customModalBackdrop",
                size: "sm",
                backdrop: "static",
                resolve: {
                    tenantId: function() {
                        return d.tenantId
                    },
                    selectedTenant: function() {
                        return a
                    }
                }
            });
            e.result.then(function(a) {
                d.tenantManagementCtrl.tenantManagement.removeTenant(a.tenantId),
                c.$emit("editTenant")
            }, function() {})
        }
    }
    a.$inject = ["$state", "$modal", "$rootScope"],
    angular.module("vManage").component("tenantDetails", {
        templateUrl: "app/provider-view/providerAdministration/tenantManagement/container/tenantDetails/tenantDetails.html",
        require: {
            tenantManagementCtrl: "^tenantManagement"
        },
        bindings: {},
        controller: a,
        controllerAs: "tenantDetailsCtrl"
    })
}(),
function() {
    function a(a, b, c) {
        var d = this;
        d.tenantId = a.params.tenant,
        d.add = function() {
            var d = b.open({
                templateUrl: "app/provider-view/providerAdministration/tenantManagement/container/modal/addTenantModal.html",
                controller: "addTenantModalController",
                windowClass: "customModalWindow",
                backdropClass: "customModalBackdrop",
                size: "lg",
                backdrop: "static",
                resolve: {
                    tenantId: function() {},
                    selectedTenant: function() {}
                }
            });
            d.result.then(function(b) {
                a.go("app.device.status", {
                    activity: c.getStatusAction("CREATE_TENANT").endpoint,
                    pid: b ? b.id : ""
                })
            }, function() {})
        }
    }
    a.$inject = ["$state", "$modal", "StatusService"],
    angular.module("vManage").component("tenantsListing", {
        templateUrl: "app/provider-view/providerAdministration/tenantManagement/container/tenantListing/tenantsListing.html",
        bindings: {
            tenantManagementObj: "<"
        },
        controller: a,
        controllerAs: "tenantsListingCtrl"
    })
}(),
function() {
    function a(a, b, c, d) {
        var e = function(a) {
            this.tenantId = angular.isDefined(a) ? a.tenantId : void 0,
            this.desc = angular.isDefined(a) ? a.desc : void 0,
            this.subDomain = angular.isDefined(a) ? a.subDomain : void 0,
            this.orgName = angular.isDefined(a) ? a.orgName : orgName,
            this.vBondAddress = angular.isDefined(a) ? a.vBondAddress : void 0,
            this.name = angular.isDefined(a) ? a.name : void 0
        };
        return e
    }
    angular.module("vManage").factory("Tenant", a),
    a.$inject = ["tenantManagementService", "$modal", "$state", "$q"]
}(),
function() {
    function a(a, b, c, d) {
        var e, f = function() {
            this.tenantsList = [],
            this.selectedTenant = {},
            this.apiCallInprogress = !0
        }, g = function(a) {
            c.go("app.admin.tenant_management.details", {
                tenant: a
            })
        };
        return f.prototype.getTenants = function() {
            var c = this
              , e = d.defer();
            return c.apiCallInprogress = !0,
            a.getTenantList().then(function(a) {
                c.apiCallInprogress = !1,
                c.tenantsList.reset(),
                angular.forEach(a.data, function(a) {
                    c.tenantsList.push(new b(a))
                }),
                e.resolve(c.tenantsList)
            }, function(a) {
                c.apiCallInprogress = !1,
                e.reject(a)
            }),
            e.promise
        }
        ,
        f.prototype.deleteTenants = function() {
            var a = this;
            a.tenantsList.reset()
        }
        ,
        f.prototype.getSelectedTenant = function() {
            var a = this;
            return a.selectedTenant
        }
        ,
        f.prototype.setSelectedTenant = function(a) {
            var b = this;
            b.selectedTenant = angular.copy(a),
            g(a.tenantId)
        }
        ,
        f.prototype.addTenant = function(a) {
            var c = this;
            c.tenantsList.push(new b(a)),
            c.setSelectedTenant(a)
        }
        ,
        f.prototype.updateTenantDetails = function(a) {
            var b = this
              , c = _.findIndex(b.tenantsList, function(b) {
                return b.tenantId === a.tenantId
            });
            b.tenantsList[c].desc = a.desc,
            b.tenantsList[c].subDomain = a.subDomain,
            b.tenantsList[c].vBondAddress = a.vBondAddress,
            b.tenantsList[c].name = a.name,
            b.selectedTenant = angular.copy(a)
        }
        ,
        f.prototype.removeTenant = function(a) {
            var b = this;
            _.remove(b.tenantsList, function(b) {
                return b.tenantId === a
            }),
            b.setSelectedTenant(b.tenantsList[0])
        }
        ,
        {
            getInstance: function() {
                return e || (e = new f),
                e
            }
        }
    }
    angular.module("vManage").factory("TenantManagement", a),
    a.$inject = ["tenantManagementService", "Tenant", "$state", "$q"]
}(),
angular.module("vManage").service("tenantManagementService", tenantManagementService),
tenantManagementService.$inject = ["restService", "multiTenantConstants", "$http", "appConfig"],
function() {
    function a(a, b, c) {
        var d = this;
        d.tenantListReady = !1,
        d.stateString = b.getStateString(a),
        d.breadCrumb = {
            states: [{
                name: "tenant-management",
                title: "Tenant Management"
            }]
        },
        d.$onInit = function() {
            d.tenantManagement = c.getInstance(),
            d.tenantManagement.getTenants().then(function() {
                d.tenantManagement.tenantsList.length && (angular.isDefined(a.params.tenant) ? (d.selected = _.findIndex(d.tenantManagement.tenantsList, function(b) {
                    return b.tenantId === a.params.tenant
                }),
                d.tenantManagement.setSelectedTenant(d.tenantManagement.tenantsList[d.selected])) : d.tenantManagement.setSelectedTenant(d.tenantManagement.tenantsList[0])),
                d.tenantListReady = !0
            }, function() {
                d.tenantListReady = !0
            })
        }
    }
    a.$inject = ["$state", "appUtil", "TenantManagement"],
    angular.module("vManage").component("tenantManagement", {
        templateUrl: "app/provider-view/providerAdministration/tenantManagement/tenantManagement.html",
        controller: a,
        controllerAs: "tenantManagementCtrl"
    })
}(),
function() {
    function a(a, b) {
        var c = {
            title: "Provider Dashboard",
            id: "provider_dashboard",
            gridsterObj: {
                columns: 3,
                minColumns: 3,
                colWidth: "auto",
                outerMargin: !0,
                maxRows: 1
            },
            customGridsterObj: {
                rowHeightInPercentage: .1,
                marginBetweenWidgets: 10,
                minContainerWidth: 969,
                minColWidth: 320,
                minRowHeight: 60,
                bufferForGridHeight: 5
            }
        }
          , d = function(d) {
            this.options = angular.merge({}, c, d),
            a.call(this, this.options),
            a.prototype.addWidgets.call(this, b.getWidgetsList())
        };
        return d.prototype = Object.create(a.prototype),
        d.prototype.constructor = d,
        d
    }
    angular.module("vManage").factory("ProviderDashboardManager", a),
    a.$inject = ["DashboardManager", "providerManagerService"]
}(),
function() {
    function a(a, b) {
        b.put("widget-certificateStatus", '<div class="widget" data-ng-include="\'app/dashboard/widget/widgetLibrary/certificateStatus/certificateStatusTemplate.html\'"></div>'),
        b.put("widget-tenantAlarms", '<tenant-alarms-list class="widget" data-tenant-alarms-list-instance="widgetCtrl.widgetInstance"></tenant-alarms-list>'),
        b.put("widget-tenantHealth", '<tenant-health class="widget" data-tenant-health-instance="widgetCtrl.widgetInstance"></tenant-health>'),
        b.put("widget-vBondHealth", '<v-bond-health class="inherit-parent-dimensions" data-v-bond-health-instance="widgetCtrl.widgetInstance" data-open-dialog-click-handler="widgetCtrl.openDialogClickHandler(status)"></v-bond-health>'),
        b.put("widget-vManageHealth", '<div class="widget" data-ng-include="\'app/dashboard/widget/widgetLibrary/vManageHealth/vManageHealthTemplate.html\'"></div>'),
        b.put("widget-vBondHealth-dialog", '<v-bond-health-dialog class="inherit-parent-dimensions"></v-bond-health-dialog>'),
        b.put("widget-certificateHealthDialog", '<certificate-health-dialog data-certificate-health-dialog-instance="widgetModalCtrl.widgetInstance"></certificate-health-dialog>'),
        b.put("widget-vManageHealthDialog", '<v-manage-health-dialog data-v-manage-health-dialog-instance="widgetModalCtrl.widgetInstance"></v-manage-health-dialog>'),
        b.put("widget-vBondHealthDialog", '<v-bond-health-dialog data-v-bond-health-dialog-instance="widgetModalCtrl.widgetInstance"></v-bond-health-dialog>');
        var c = this;
        c.$onInit = function() {
            c.providerClassInstance = new a
        }
    }
    a.$inject = ["ProviderDashboardManager", "$templateCache"],
    angular.module("vManage").component("providerDashboardManager", {
        templateUrl: "app/provider-view/providerDashboard/providerDashboardManager.html",
        controller: a,
        controllerAs: "providerDashboardManagerCtrl"
    })
}(),
function() {
    function a() {
        var a = [{
            col: 0,
            row: 0,
            sizeY: 1,
            sizeX: 1,
            name: "vBondStatus",
            className: "VBondHealthFactory"
        }, {
            col: 1,
            row: 0,
            sizeY: 1,
            sizeX: 1,
            name: "vManageStatus",
            className: "VManageHealthFactory"
        }, {
            col: 2,
            row: 0,
            sizeY: 1,
            sizeX: 1,
            name: "certificateManagement",
            className: "CertificateStatusFactory"
        }];
        return {
            getWidgetsList: function() {
                return a
            }
        }
    }
    angular.module("vManage").service("providerManagerService", a),
    a.$inject = []
}(),
angular.module("vManage").config(["$stateProvider", "$urlRouterProvider", function(a, b) {
    a.state("app.admin", {
        url: "/administration",
        abstract: !0,
        template: "<ui-view/>"
    }).state("app.admin.cluster_management", {
        url: "/cluster_management",
        abstract: !0,
        template: "<ui-view/>"
    }).state("app.admin.cluster_management.configuration", {
        url: "/configuration?vManageIP&display",
        templateUrl: function(a) {
            return _.indexOf(["vManage_details", "connected_device"], a.display) > -1 ? "app/admin/cluster_management/clusterManagementDetails.html" : "app/admin/cluster_management/clusterManagement.html"
        },
        controllerProvider: ["$stateParams", function(a) {
            return _.indexOf(["vManage_details", "connected_device"], a.display) > -1 ? "ClusterManagementDetailsController" : (a.display = "",
            a.vManageIP = "",
            "ClusterManagementController")
        }
        ]
    }).state("app.admin.cluster_management.reachability", {
        url: "/reachability",
        templateUrl: "app/admin/cluster_management/clusterMgmtReachability.html",
        controller: "ClusterMgmtReachabilityCtrl"
    }).state("app.admin.licenses", {
        url: "/licenses",
        templateUrl: "app/admin/licenses/licensesTemplate.html",
        controller: "LicensesController"
    }).state("app.admin.manage_users", {
        url: "/manage_users",
        abstract: !0,
        templateUrl: "app/admin/manage_users/manage_users.html",
        controller: "ManageUsersController"
    }).state("app.admin.manage_users.users", {
        url: "/users",
        templateUrl: "app/admin/manage_users/users/usersTemplate.html",
        controller: "usersController"
    }).state("app.admin.manage_users.user_groups", {
        url: "/user_groups",
        templateUrl: "app/admin/manage_users/usergroups/usergroupsTemplate.html",
        controller: "UsergroupsController"
    }).state("app.admin.settings", {
        url: "/settings",
        templateUrl: "app/admin/settings/settingsTemplate.html",
        controller: "settingsController"
    }).state("app.admin.server_settings", {
        url: "/server_settings",
        templateUrl: "app/common/generic_page.html",
        controller: "GenericController"
    }).state("app.admin.server_tableTest", {
        url: "/dataTest",
        templateUrl: "app/common/dataTesting/data_test.html",
        controller: "dataTestController"
    }).state("app.admin.server_chartTest", {
        url: "/chartTest",
        templateUrl: "app/common/chartTesting/chart_test.html",
        controller: "chartTestController"
    }).state("app.admin.server_queryTest", {
        url: "/queryTest",
        templateUrl: "app/common/queryBuilder/query_test.html",
        controller: "queryController"
    }).state("app.admin.tenant_management", {
        url: "/tenant_management",
        template: "<tenant-management></tenant-management>"
    }).state("app.admin.tenant_management.details", {
        url: "/details?tenant",
        template: "<tenant-details></tenant-details>"
    })
}
]),
angular.module("vManage").config(["$stateProvider", "$urlRouterProvider", function(a, b) {
    a.state("app.vanalytics", {
        abstract: !0,
        url: "/vanalytics",
        template: "<ui-view/>"
    }).state("app.vanalytics.launch", {
        url: "",
        controller: "AnalyticsController"
    })
}
]),
angular.module("vManage").config(["$stateProvider", "$urlRouterProvider", function(a, b) {
    b.otherwise("/banner"),
    a.state("banner", {
        url: "/banner",
        templateUrl: "app/login-banner.html",
        controller: "LoginBannerController"
    }).state("app", {
        url: "/:tenantId/app",
        abstract: !0,
        templateUrl: "app/app.html",
        controller: "AppController",
        resolve: {
            tenantId: ["$stateParams", function(a) {
                return a.tenantId
            }
            ]
        },
        params: {
            tenantId: {
                value: null,
                squash: !0
            }
        }
    }).state("app.404", {
        url: "/404",
        templateUrl: "app/404.html"
    }).state("app.dashboard", {
        url: "/dashboard",
        templateUrl: "app/dashboard/dashboard.html",
        controller: "dashboardController"
    }).state("app.profile", {
        url: "/profile",
        parent: "app",
        templateUrl: "app/nav/profile/profileTemplate.html",
        controller: "ProfileController"
    }).state("app.devices", {
        url: "/devices",
        templateUrl: "app/common/generic_page.html",
        controller: "GenericController"
    })
}
]),
angular.module("vManage").config(["$stateProvider", "$urlRouterProvider", function(a, b) {
    a.state("app.config", {
        url: "/config",
        abstract: !0,
        template: "<ui-view/>"
    }).state("app.config.archive", {
        url: "/archive/:display",
        templateUrl: "app/configuration/archive/archive.html",
        controller: "ArchiveController",
        params: {
            display: {
                squash: !0
            }
        }
    }).state("app.config.archive.configDetails", {
        url: "/details?deviceID",
        templateUrl: "app/configuration/archive/archiveDetails/archiveDetailsTemplate.html",
        controller: "ArchiveDetailsController"
    }).state("app.config.certificates", {
        url: "/certificates",
        abstract: !0,
        template: "<ui-view/>"
    }).state("app.config.certificates.controller", {
        url: "/controller",
        templateUrl: "app/configuration/certificate/viewTemplates/certificateControllerTemplate.html",
        controller: "certificateManagementController"
    }).state("app.config.certificates.vedgelist", {
        url: "/vedgelist",
        templateUrl: "app/configuration/certificate/viewTemplates/certificateVedgeListTemplate.html",
        controller: "certificatevEdgeListController"
    }).state("app.config.devices", {
        url: "/devices",
        abstract: !0,
        template: "<ui-view/>"
    }).state("app.config.devices.controller", {
        url: "/controller/",
        templateUrl: "app/configuration/devices/viewTemplates/devicesControllerTemplate.html",
        controller: "devicesController"
    }).state("app.config.devices.vedge", {
        url: "/vedge/",
        templateUrl: "app/configuration/devices/viewTemplates/devicesvEdgeTemplate.html",
        controller: "devicesvEdgeListController"
    }).state("app.config.devicegroups", {
        url: "/device_groups",
        templateUrl: "app/common/generic_page.html",
        controller: "GenericController"
    }).state("app.config.device_bring_up", {
        url: "/device_bring_up?deviceType&uuid&systemIp&localSystemIp",
        templateUrl: "app/monitor/devices/dashboard/templates/troubleShooting/deviceBringUp.html",
        controller: "DeviceBringUpController"
    }).state("app.config.policy", {
        url: "/policy",
        abstract: !0,
        templateUrl: "app/configuration/policy/policy.html",
        controller: "PolicyController"
    }).state("app.config.policy.centralizedPolicy", {
        url: "/centralizedPolicy",
        abstract: !0,
        templateUrl: "app/configuration/policy/centralizedPolicy/centralizedPolicy.html",
        controller: "CentralizedPolicyController"
    }).state("app.config.policy.localizedPolicy", {
        url: "/localized_policy",
        abstract: !0,
        templateUrl: "app/configuration/policy/localizedPolicy/localizedPolicy.html",
        controller: "LocalizedPolicyController"
    }).state("app.config.policy.preview", {
        parent: "app.config.policy",
        url: "/preview",
        params: {
            policy: null
        },
        templateUrl: "app/configuration/policy/preview/templates/policyPreview.html",
        controller: "PolicyPreviewController",
        controllerAs: "policyPreviewCtrl"
    }).state("app.config.policy.centralizedPolicy.vsmart", {
        url: "/policies",
        templateUrl: "app/configuration/policy/centralizedPolicy/vsmart/vSmartPolicyList.html",
        controller: "VSmartPolicyController"
    }).state("app.config.policy.centralizedPolicy.vsmart.assembly", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/policies/assembly/",
        params: {
            policy: null
        },
        templateUrl: "app/configuration/policy/assembly/views/policyAssembly.html",
        controller: "PolicyAssemblyController",
        controllerAs: "policyAssemblyCtrl"
    }).state("app.config.policy.centralizedPolicy.vsmart.assembly.edit", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/policies/assembly/{id}",
        params: {
            policy: null,
            readOnly: !1
        },
        reloadOnSearch: !1,
        templateUrl: "app/configuration/policy/assembly/views/policyAssembly.html",
        controller: "PolicyAssemblyController",
        controllerAs: "policyAssemblyCtrl"
    }).state("app.config.policy.centralizedPolicy.vsmart.create", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/policies/create/",
        templateUrl: "app/configuration/policy/centralizedPolicy/vsmart/crudvSmartPolicy.html"
    }).state("app.config.policy.centralizedPolicy.vsmart.edit", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/policies/edit/{id}",
        templateUrl: "app/configuration/policy/centralizedPolicy/vsmart/crudvSmartPolicy.html"
    }).state("app.config.policy.centralizedPolicy.vsmart.view", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/policies/view/{id}",
        templateUrl: "app/configuration/policy/centralizedPolicy/vsmart/crudvSmartPolicy.html"
    }).state("app.config.policy.centralizedPolicy.traffic_policy", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/traffic",
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/trafficPolicy.html",
        controller: "TrafficPolicyController",
        controllerAs: "policyCtrl"
    }).state("app.config.policy.centralizedPolicy.traffic_policy.create", {
        url: "/policy",
        abstract: !0
    }).state("app.config.policy.centralizedPolicy.traffic_policy.view", {
        url: "/policy",
        abstract: !0
    }).state("app.config.policy.centralizedPolicy.traffic_policy.edit", {
        url: "/policy",
        abstract: !0
    }).state("app.config.policy.centralizedPolicy.traffic_policy.create.appRoute", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/traffic/app_route/add/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/definePolicySequences.html",
        controller: "CreateTrafficPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.centralizedPolicy.traffic_policy.view.appRoute", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/traffic/app_route/view/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/definePolicySequences.html",
        controller: "CreateTrafficPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.centralizedPolicy.traffic_policy.edit.appRoute", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/traffic/app_route/edit/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/definePolicySequences.html",
        controller: "CreateTrafficPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.centralizedPolicy.traffic_policy.create.data", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/traffic/data/add/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/definePolicySequences.html",
        controller: "CreateTrafficPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.centralizedPolicy.traffic_policy.view.data", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/traffic/data/view/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/definePolicySequences.html",
        controller: "CreateTrafficPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.centralizedPolicy.traffic_policy.edit.data", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/traffic/data/edit/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/definePolicySequences.html",
        controller: "CreateTrafficPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.centralizedPolicy.traffic_policy.create.cflowd", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/traffic/cflowd/add/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/cflowdPolicy.html",
        controller: "CflowdPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.centralizedPolicy.traffic_policy.view.cflowd", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/traffic/cflowd/view/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/cflowdPolicy.html",
        controller: "CflowdPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.centralizedPolicy.traffic_policy.edit.cflowd", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/traffic/cflowd/edit/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/cflowdPolicy.html",
        controller: "CflowdPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.centralizedPolicy.control_policy", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/control",
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/customControl/views/controlPolicy.html",
        controller: "ControlPolicyController",
        controllerAs: "policyCtrl"
    }).state("app.config.policy.centralizedPolicy.control_policy.create", {
        url: "/policy",
        abstract: !0
    }).state("app.config.policy.centralizedPolicy.control_policy.view", {
        url: "/policy",
        abstract: !0
    }).state("app.config.policy.centralizedPolicy.control_policy.edit", {
        url: "/policy",
        abstract: !0
    }).state("app.config.policy.centralizedPolicy.control_policy.create.custom", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/topology/control/custom_control/add/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/customControl/views/definePolicySequences.html",
        controller: "CreateControlPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.centralizedPolicy.control_policy.view.custom", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/topology/control/custom_control/view/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/customControl/views/definePolicySequences.html",
        controller: "CreateControlPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.centralizedPolicy.control_policy.edit.custom", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/topology/control/custom_control/edit/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/customControl/views/definePolicySequences.html",
        controller: "CreateControlPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.centralizedPolicy.control_policy.create.hub_spoke", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/topology/control/hub_spoke/add/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/hubAndSpoke/views/hubAndSpoke.html",
        controller: "createHubAndSpokeController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.centralizedPolicy.control_policy.view.hub_spoke", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/topology/control/hub_spoke/view/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/hubAndSpoke/views/hubAndSpoke.html",
        controller: "createHubAndSpokeController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.centralizedPolicy.control_policy.edit.hub_spoke", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/topology/control/hub_spoke/edit/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/hubAndSpoke/views/hubAndSpoke.html",
        controller: "createHubAndSpokeController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.centralizedPolicy.control_policy.create.mesh", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/topology/control/mesh/add/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/mesh/views/mesh_topology.html",
        controller: "meshController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.centralizedPolicy.control_policy.view.mesh", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/topology/control/mesh/view/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/mesh/views/mesh_topology.html",
        controller: "meshController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.centralizedPolicy.control_policy.edit.mesh", {
        parent: "app.config.policy.centralizedPolicy",
        url: "/topology/control/mesh/edit/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/mesh/views/mesh_topology.html",
        controller: "meshController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.localizedPolicy.vedge", {
        url: "/policies",
        templateUrl: "app/configuration/policy/localizedPolicy/vedge/vEdgePolicy.html",
        controller: "VEdgePolicyController"
    }).state("app.config.policy.localizedPolicy.vedge.create", {
        parent: "app.config.policy.localizedPolicy",
        url: "/policies/add/",
        templateUrl: "app/configuration/policy/localizedPolicy/vedge/crudvEdgePolicy.html"
    }).state("app.config.policy.localizedPolicy.vedge.edit", {
        parent: "app.config.policy.localizedPolicy",
        url: "/policies/edit/{id}",
        templateUrl: "app/configuration/policy/localizedPolicy/vedge/crudvEdgePolicy.html"
    }).state("app.config.policy.localizedPolicy.vedge.view", {
        parent: "app.config.policy.localizedPolicy",
        url: "/policies/view/{id}",
        templateUrl: "app/configuration/policy/localizedPolicy/vedge/crudvEdgePolicy.html"
    }).state("app.config.policy.wizard", {
        url: "/:action/:policyId",
        params: {
            policyId: {
                value: null,
                squash: !0
            }
        },
        templateUrl: "app/configuration/policy/wizard/policyWizard.html",
        controller: "PolicyWizardController"
    }).state("app.config.policy.wizard.createApplications", {
        url: "",
        abstract: !0,
        templateUrl: "app/configuration/policy/wizard/createApplications/createApplications.html",
        controller: "CreateApplicationsController",
        controllerAs: "createApplicationsCtrl"
    }).state("app.config.policy.wizard.createApplications.define_lists", {
        abstract: !0,
        url: "",
        templateUrl: "app/configuration/policy/lists/views/define_lists.html",
        controller: ["$state", "$scope", function(a, b) {
            var c = this;
            c.previousState = a.previousState,
            c.isWizardFlow = _.includes(a.current.name, "app.config.policy.wizard"),
            c.returnToParent = function() {
                return angular.isUndefined(a.previousState) ? void a.go("app.config.policy.centralizedPolicy.vsmart") : void (c.previousState.name.contains("traffic_policy") ? a.go("app.config.policy.centralizedPolicy.traffic_policy") : c.previousState.name.contains("control_policy") ? a.go("app.config.policy.centralizedPolicy.control_policy") : a.go("app.config.policy.centralizedPolicy.vsmart"))
            }
            ,
            c.returnPreviousTitle = function() {
                return angular.isUndefined(a.previousState) ? "Policies" : c.previousState.name.contains("traffic_policy") ? "Traffic Policy" : c.previousState.name.contains("control_policy") ? "Control Policy" : "Policies"
            }
            ,
            c.state = "application",
            c.goToState = function(b) {
                c.state = b,
                c.isWizardFlow ? a.go("app.config.policy.wizard.createApplications.define_lists." + b) : a.go("app.config.policy.custom.define_lists." + b)
            }
            ,
            c.breadCrumb = {
                states: [{
                    name: "centralized-policy",
                    title: "Centralized Policy",
                    state: function(a) {
                        c.returnToParent()
                    }
                }, {
                    name: "define-list",
                    title: "Define Lists"
                }]
            }
        }
        ],
        controllerAs: "policyListCtrl"
    }).state("app.config.policy.wizard.createApplications.define_lists.application", {
        url: "",
        templateUrl: "app/configuration/policy/lists/views/application_list.html",
        controller: "ApplicationListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "AppAppFamilyListManager"
        }
    }).state("app.config.policy.wizard.createApplications.define_lists.color", {
        url: "",
        templateUrl: "app/configuration/policy/lists/views/color_list.html",
        controller: "PolicyListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "ColorListManager"
        }
    }).state("app.config.policy.wizard.createApplications.define_lists.data_prefix", {
        url: "",
        templateUrl: "app/configuration/policy/lists/views/policy_list.html",
        controller: "PolicyListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "DataPrefixListManager"
        }
    }).state("app.config.policy.wizard.createApplications.define_lists.policer", {
        url: "",
        templateUrl: "app/configuration/policy/lists/views/policer_list.html",
        controller: "PolicyListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "PolicerListManager"
        }
    }).state("app.config.policy.wizard.createApplications.define_lists.prefix", {
        url: "",
        templateUrl: "app/configuration/policy/lists/views/prefix_list.html",
        controller: "PolicyListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "PrefixListManager"
        }
    }).state("app.config.policy.wizard.createApplications.define_lists.site", {
        url: "",
        templateUrl: "app/configuration/policy/lists/views/policy_list.html",
        controller: "PolicyListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "SiteListManager"
        }
    }).state("app.config.policy.wizard.createApplications.define_lists.sla_class", {
        url: "",
        templateUrl: "app/configuration/policy/lists/views/sla_class_list.html",
        controller: "PolicyListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "SLAClassListManager"
        }
    }).state("app.config.policy.wizard.createApplications.define_lists.tloc", {
        url: "",
        templateUrl: "app/configuration/policy/lists/views/tloc_list.html",
        controller: "TlocListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "TLOCListManager"
        }
    }).state("app.config.policy.wizard.createApplications.define_lists.vpn", {
        url: "",
        templateUrl: "app/configuration/policy/lists/views/policy_list.html",
        controller: "PolicyListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "VPNListManager"
        }
    }).state("app.config.policy.wizard.configureTopology", {
        url: "",
        abstract: !0,
        templateUrl: "app/configuration/policy/wizard/configureTopology/configureTopology.html",
        controller: "ConfigureTopologyController",
        controllerAs: "configureTopologyCtrl"
    }).state("app.config.policy.wizard.configureTopology.topology", {
        url: "",
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/controlPolicy.html",
        controller: "ControlPolicyController",
        controllerAs: "policyCtrl"
    }).state("app.config.policy.wizard.configureTopology.topology.control", {
        url: "",
        abstract: !0
    }).state("app.config.policy.wizard.configureTopology.topology.control.add", {
        url: "",
        parent: "app.config.policy.wizard",
        params: {
            policy: null,
            assembly: null,
            id: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/customControl/views/definePolicySequences.html",
        controller: "CreateControlPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.configureTopology.topology.control.view", {
        url: "",
        parent: "app.config.policy.wizard",
        params: {
            policy: null,
            assembly: null,
            id: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/customControl/views/definePolicySequences.html",
        controller: "CreateControlPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.configureTopology.topology.control.edit", {
        url: "/control/{id}",
        parent: "app.config.policy.wizard",
        params: {
            policy: null,
            assembly: null,
            id: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/customControl/views/definePolicySequences.html",
        controller: "CreateControlPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.configureTopology.topology.mesh", {
        url: "",
        abstract: !0
    }).state("app.config.policy.wizard.configureTopology.topology.mesh.add", {
        url: "",
        parent: "app.config.policy.wizard",
        params: {
            policy: null,
            assembly: null,
            id: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/mesh/views/mesh_topology.html",
        controller: "meshController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.configureTopology.topology.mesh.view", {
        url: "",
        parent: "app.config.policy.wizard",
        params: {
            policy: null,
            assembly: null,
            id: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/mesh/views/mesh_topology.html",
        controller: "meshController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.configureTopology.topology.mesh.edit", {
        url: "/mesh/{id}",
        parent: "app.config.policy.wizard",
        params: {
            policy: null,
            assembly: null,
            id: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/mesh/views/mesh_topology.html",
        controller: "meshController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.configureTopology.topology.hubSpoke", {
        url: "",
        abstract: !0
    }).state("app.config.policy.wizard.configureTopology.topology.hubSpoke.add", {
        url: "",
        parent: "app.config.policy.wizard",
        params: {
            policy: null,
            assembly: null,
            id: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/hubAndSpoke/views/hubAndSpoke.html",
        controller: "createHubAndSpokeController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.configureTopology.topology.hubSpoke.view", {
        url: "",
        parent: "app.config.policy.wizard",
        params: {
            policy: null,
            assembly: null,
            id: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/hubAndSpoke/views/hubAndSpoke.html",
        controller: "createHubAndSpokeController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.configureTopology.topology.hubSpoke.edit", {
        url: "/hubspoke/{id}",
        parent: "app.config.policy.wizard",
        params: {
            policy: null,
            assembly: null,
            id: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/hubAndSpoke/views/hubAndSpoke.html",
        controller: "createHubAndSpokeController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.configureTopology.vpn", {
        url: "",
        params: {
            policy: null,
            assembly: null,
            id: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/vpn_membership/views/vpnMembership.html",
        controller: "vpnMembershipController",
        controllerAs: "vpnMemCtrl"
    }).state("app.config.policy.wizard.configureTrafficRules", {
        url: "",
        templateUrl: "app/configuration/policy/wizard/configureTrafficRules/configureTrafficRules.html",
        controller: "ConfigureTrafficRulesController",
        controllerAs: "configureTrafficRulesCtrl"
    }).state("app.config.policy.wizard.configureTrafficRules.appAwareRouting", {
        url: "",
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/appAwareRouting/appAwareRouting.html",
        controller: "appAwareRoutingController",
        controllerAs: "policyCtrl"
    }).state("app.config.policy.wizard.configureTrafficRules.appAwareRouting.add", {
        url: "",
        parent: "app.config.policy.wizard",
        params: {
            policy: null,
            assembly: null,
            id: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/definePolicySequences.html",
        controller: "CreateTrafficPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.configureTrafficRules.appAwareRouting.view", {
        url: "",
        parent: "app.config.policy.wizard",
        params: {
            policy: null,
            assembly: null,
            id: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/definePolicySequences.html",
        controller: "CreateTrafficPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.configureTrafficRules.appAwareRouting.edit", {
        parent: "app.config.policy.wizard",
        url: "/app_route/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/definePolicySequences.html",
        controller: "CreateTrafficPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.configureTrafficRules.trafficData", {
        url: "",
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/trafficData/trafficData.html",
        controller: "trafficDataController",
        controllerAs: "policyCtrl"
    }).state("app.config.policy.wizard.configureTrafficRules.trafficData.add", {
        url: "",
        parent: "app.config.policy.wizard",
        params: {
            policy: null,
            assembly: null,
            id: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/definePolicySequences.html",
        controller: "CreateTrafficPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.configureTrafficRules.trafficData.view", {
        url: "",
        parent: "app.config.policy.wizard",
        params: {
            policy: null,
            assembly: null,
            id: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/definePolicySequences.html",
        controller: "CreateTrafficPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.configureTrafficRules.trafficData.edit", {
        parent: "app.config.policy.wizard",
        url: "/data/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/definePolicySequences.html",
        controller: "CreateTrafficPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.configureTrafficRules.trafficCflowd", {
        url: "",
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/cflowd/trafficCflowd.html",
        controller: "trafficCflowdController",
        controllerAs: "policyCtrl"
    }).state("app.config.policy.wizard.configureTrafficRules.trafficCflowd.add", {
        url: "",
        parent: "app.config.policy.wizard",
        params: {
            policy: null,
            assembly: null,
            id: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/cflowdPolicy.html",
        controller: "CflowdPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.configureTrafficRules.trafficCflowd.view", {
        url: "",
        parent: "app.config.policy.wizard",
        params: {
            policy: null,
            assembly: null,
            id: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/cflowdPolicy.html",
        controller: "CflowdPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.configureTrafficRules.trafficCflowd.edit", {
        parent: "app.config.policy.wizard",
        url: "/cflowd/{id}",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/views/cflowdPolicy.html",
        controller: "CflowdPolicyController",
        controllerAs: "policySeqCtrl"
    }).state("app.config.policy.wizard.applyPolicies", {
        url: "",
        params: {
            policy: null
        },
        templateUrl: "app/configuration/policy/assembly/views/policyAssembly.html",
        controller: "PolicyAssemblyController",
        controllerAs: "policyAssemblyCtrl"
    }).state("app.config.policy.wizard.applyPolicies.edit", {
        url: "",
        params: {
            policy: null,
            readOnly: !1
        },
        reloadOnSearch: !1,
        templateUrl: "app/configuration/policy/assembly/views/policyAssembly.html",
        controller: "PolicyAssemblyController",
        controllerAs: "policyAssemblyCtrl"
    }).state("app.config.policy.wizard.preview", {
        url: "",
        params: {
            policy: null,
            assembly: null
        },
        templateUrl: "app/configuration/policy/preview/templates/policyPreview.html",
        controller: "PolicyPreviewController",
        controllerAs: "policyPreviewCtrl"
    }).state("app.config.policy.custom", {
        url: "/custom",
        abstract: !0,
        templateUrl: "app/configuration/policy/centralizedPolicy/advanced/advancedPolicy.html",
        controller: "advancedPolicyController"
    }).state("app.config.policy.custom.cli", {
        url: "/cli",
        templateUrl: "app/configuration/policy/centralizedPolicy/advanced/cli/cliPolicy.html",
        controller: "CLIPolicyController"
    }).state("app.config.policy.custom.traffic", {
        url: "/traffic",
        templateUrl: "app/configuration/policy/wizard/configureTrafficRules/configureTrafficRules.html",
        controller: "ConfigureTrafficRulesController",
        controllerAs: "policyCtrl"
    }).state("app.config.policy.custom.traffic.appAwareRouting", {
        url: "/app_route",
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/appAwareRouting/appAwareRouting.html",
        controller: "appAwareRoutingController",
        controllerAs: "policyCtrl"
    }).state("app.config.policy.custom.traffic.data", {
        url: "/data",
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/trafficData/trafficData.html",
        controller: "trafficDataController",
        controllerAs: "policyCtrl"
    }).state("app.config.policy.custom.traffic.cflowd", {
        url: "/cflowd",
        templateUrl: "app/configuration/policy/centralizedPolicy/traffic/cflowd/trafficCflowd.html",
        controller: "trafficCflowdController",
        controllerAs: "policyCtrl"
    }).state("app.config.policy.custom.topology", {
        url: "/topology",
        abstract: !0,
        templateUrl: "app/configuration/policy/wizard/configureTopology/configureTopology.html",
        controller: "ConfigureTopologyController",
        controllerAs: "policyCtrl"
    }).state("app.config.policy.custom.topology.control", {
        url: "/control",
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/control/controlPolicy.html",
        controller: "ControlPolicyController",
        controllerAs: "policyCtrl"
    }).state("app.config.policy.custom.topology.vpn", {
        url: "/vpn_membership",
        templateUrl: "app/configuration/policy/centralizedPolicy/topology/vpn_membership/views/vpnMembership.html",
        controller: "vpnMembershipController",
        controllerAs: "vpnMemCtrl"
    }).state("app.config.policy.custom.custom", {
        url: "/custom",
        templateUrl: "app/configuration/policy/centralizedPolicy/advanced/custom/customApplication.html",
        controller: "customApplicationController",
        controllerAs: "customAppCtrl"
    }).state("app.config.policy.custom.define_lists", {
        abstract: !0,
        url: "/define_lists",
        templateUrl: "app/configuration/policy/lists/views/define_lists.html",
        controller: ["$state", "$scope", function(a, b) {
            var c = this;
            c.previousState = a.previousState,
            c.isWizardFlow = _.includes(a.current.name, "app.config.policy.wizard"),
            c.returnToParent = function() {
                return angular.isUndefined(a.previousState) ? void a.go("app.config.policy.centralizedPolicy.vsmart") : void (c.previousState.name.contains("traffic_policy") ? a.go("app.config.policy.centralizedPolicy.traffic_policy") : c.previousState.name.contains("control_policy") ? a.go("app.config.policy.centralizedPolicy.control_policy") : a.go("app.config.policy.centralizedPolicy.vsmart"))
            }
            ,
            c.state = "application",
            c.goToState = function(b) {
                c.state = b,
                c.isWizardFlow ? a.go("app.config.policy.wizard.createApplications.define_lists." + b) : a.go("app.config.policy.custom.define_lists." + b)
            }
            ,
            b.breadCrumb.states = [{
                name: "policy",
                title: "Policy",
                state: function(b) {
                    a.go("app.config.policy.centralizedPolicy.vsmart", {
                        reload: !0
                    })
                }
            }, {
                name: "define-lists",
                title: "Define Lists"
            }],
            c.returnPreviousTitle = function() {
                return angular.isUndefined(a.previousState) ? "Policies" : c.previousState.name.contains("traffic_policy") ? "Traffic Policy" : c.previousState.name.contains("control_policy") ? "Control Policy" : "Policies"
            }
            ,
            c.breadCrumb = {
                states: [{
                    name: "centralized-policy",
                    title: c.returnPreviousTitle(),
                    state: function(a) {
                        c.returnToParent()
                    }
                }, {
                    name: "define-list",
                    title: "Define Lists"
                }]
            }
        }
        ],
        controllerAs: "policyListCtrl"
    }).state("app.config.policy.custom.define_lists.application", {
        url: "/application",
        templateUrl: "app/configuration/policy/lists/views/application_list.html",
        controller: "ApplicationListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "AppAppFamilyListManager"
        }
    }).state("app.config.policy.custom.define_lists.color", {
        url: "/color",
        templateUrl: "app/configuration/policy/lists/views/color_list.html",
        controller: "PolicyListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "ColorListManager"
        }
    }).state("app.config.policy.custom.define_lists.data_prefix", {
        url: "/data_prefix",
        templateUrl: "app/configuration/policy/lists/views/policy_list.html",
        controller: "PolicyListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "DataPrefixListManager"
        }
    }).state("app.config.policy.custom.define_lists.policer", {
        url: "/policer",
        templateUrl: "app/configuration/policy/lists/views/policer_list.html",
        controller: "PolicyListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "PolicerListManager"
        }
    }).state("app.config.policy.custom.define_lists.prefix", {
        url: "/prefix",
        templateUrl: "app/configuration/policy/lists/views/prefix_list.html",
        controller: "PolicyListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "PrefixListManager"
        }
    }).state("app.config.policy.custom.define_lists.site", {
        url: "/site",
        templateUrl: "app/configuration/policy/lists/views/policy_list.html",
        controller: "PolicyListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "SiteListManager"
        }
    }).state("app.config.policy.custom.define_lists.sla_class", {
        url: "/sla_class",
        templateUrl: "app/configuration/policy/lists/views/sla_class_list.html",
        controller: "PolicyListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "SLAClassListManager"
        }
    }).state("app.config.policy.custom.define_lists.tloc", {
        url: "/tloc",
        templateUrl: "app/configuration/policy/lists/views/tloc_list.html",
        controller: "TlocListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "TLOCListManager"
        }
    }).state("app.config.policy.custom.define_lists.vpn", {
        url: "/vpn",
        templateUrl: "app/configuration/policy/lists/views/policy_list.html",
        controller: "PolicyListController",
        controllerAs: "policyListCtrl",
        resolve: {
            PolicyListManager: "VPNListManager"
        }
    }).state("app.config.template", {
        url: "/template",
        abstract: !0,
        templateUrl: "app/configuration/template/template.html",
        controller: "TemplateController"
    }).state("app.config.template.device", {
        url: "/device",
        templateUrl: "app/configuration/template/device/views/deviceTemplate.html",
        controller: "DeviceTemplateController"
    }).state("app.config.template.device.cli", {
        parent: "app.config.template",
        abstract: !0,
        url: "/device/cli",
        templateUrl: "<ui-view/>"
    }).state("app.config.template.device.cli.create", {
        parent: "app.config.template",
        url: "/device/cli",
        templateUrl: "app/configuration/template/device/views/cliDeviceTemplate.html"
    }).state("app.config.template.device.cli.edit", {
        parent: "app.config.template",
        url: "/device/cli/edit?templateId&attached",
        templateUrl: "app/configuration/template/device/views/cliDeviceTemplate.html"
    }).state("app.config.template.device.cli.view", {
        parent: "app.config.template",
        url: "/device/cli/view/{templateId}",
        templateUrl: "app/configuration/template/device/views/cliDeviceTemplate.html"
    }).state("app.config.template.device.feature", {
        parent: "app.config.template",
        abstract: !0,
        url: "/device/feature",
        templateUrl: "<ui-view/>"
    }).state("app.config.template.device.feature.create", {
        parent: "app.config.template",
        url: "/device/feature",
        templateUrl: "app/configuration/template/device/views/featureDeviceTemplate.html"
    }).state("app.config.template.device.feature.edit", {
        parent: "app.config.template",
        url: "/device/feature/edit?templateId&attached",
        templateUrl: "app/configuration/template/device/views/featureDeviceTemplate.html"
    }).state("app.config.template.device.feature.view", {
        parent: "app.config.template",
        url: "/device/feature/view/{templateId}",
        templateUrl: "app/configuration/template/device/views/featureDeviceTemplate.html"
    }).state("app.config.template.device.configure", {
        parent: "app.config.template",
        url: "/device/configure/{templateId}",
        templateUrl: "app/configuration/template/device/views/deviceConfigTemplate.html"
    }).state("app.config.template.feature", {
        parent: "app.config.template",
        url: "/feature?display&templateId&deviceType&templateType",
        templateUrl: function(a) {
            return _.indexOf(["add", "view", "edit"], a.display) > -1 ? "app/configuration/template/feature/views/addTemplate.html" : "app/configuration/template/feature/views/featureTemplate.html"
        },
        controllerProvider: ["$stateParams", function(a) {
            return _.indexOf(["add", "view", "edit"], a.display) > -1 ? "AddTemplateController" : "FeatureTemplateController"
        }
        ],
        params: {
            display: {
                squash: !0
            }
        }
    }).state("app.config.cloudExpress", {
        abstract: !0,
        url: "/cloudExpress",
        templateUrl: "app/configuration/cloudExpress/templates/cloudExpress.html",
        controller: "CloudExpressController"
    }).state("app.config.cloudExpress.dashboard", {
        url: "/dashboard",
        templateUrl: "app/configuration/cloudExpress/templates/cloudExpressDashboard.html",
        controller: "CloudExpressDashboardController"
    }).state("app.config.cloudExpress.overview", {
        url: "/overview/{applicationType}",
        templateUrl: "app/configuration/cloudExpress/templates/cloudExpressOverview.html",
        controller: "CloudExpressOverviewController"
    }).state("app.config.cloudExpress.manage-application", {
        url: "/manage-application",
        templateUrl: "app/configuration/cloudExpress/templates/manageApplicationVPN.html",
        controller: "ManageApplicationVPNController"
    }).state("app.config.cloudExpress.manage-sites", {
        url: "/manage-sites",
        templateUrl: "app/configuration/cloudExpress/templates/manageSites.html",
        controller: "ManageSitesController"
    }).state("app.config.cloudExpress.manage-gateways", {
        url: "/manage-gateways",
        templateUrl: "app/configuration/cloudExpress/templates/manageGateways.html",
        controller: "ManageGatewaysController"
    }).state("app.config.cloudExpress.manage-dia", {
        url: "/manage-dia",
        templateUrl: "app/configuration/cloudExpress/templates/manageDia.html",
        controller: "ManageDiaController"
    }).state("app.config.cloudExpress.applicationDetails", {
        url: "/applicationDetails/{applicationType}",
        templateUrl: "app/configuration/cloudExpress/templates/cloudExpressApplicationDetails.html",
        controller: "CloudExpressApplicationDetailsController",
        params: {
            applicationName: null
        }
    }).state("app.config.cloudExpress.manageCloudExpress.overview", {
        url: "/{applicationType}",
        templateUrl: "app/configuration/cloudExpress/templates/applicationOverview.html",
        controller: "ApplicationOverviewController"
    }).state("app.config.cloudOnRamp", {
        url: "/cloudonramp",
        abstract: !0,
        templateUrl: "app/configuration/cloudOnRamp/views/cloudOnRamp.html",
        controller: "CloudOnRampController"
    }).state("app.config.cloudOnRamp.dashboard", {
        url: "/dashboard",
        templateUrl: "app/configuration/cloudOnRamp/views/dashboard/cloudOnRampDashboard.html",
        controller: "CloudOnRampDashboardController"
    }).state("app.config.cloudOnRamp.wizard", {
        url: "/addcloud",
        abstract: !0,
        templateUrl: "app/configuration/cloudOnRamp/views/wizard/cloudOnRampWizard.html",
        controller: "CloudOnRampWizardController"
    }).state("app.config.cloudOnRamp.wizard.hostVPC", {
        url: "/hostvpc",
        parent: "app.config.cloudOnRamp.wizard",
        templateUrl: "app/configuration/cloudOnRamp/views/wizard/wizardDiscoverHostVPC.html",
        controller: "WizardDiscoverHostVPCController"
    }).state("app.config.cloudOnRamp.wizard.transitVPC", {
        url: "/transitvpc",
        parent: "app.config.cloudOnRamp.wizard",
        templateUrl: "app/configuration/cloudOnRamp/views/wizard/wizardAddTransitVPC.html",
        controller: "WizardAddTransitVPCController"
    }).state("app.config.cloudOnRamp.wizard.mapVPC", {
        url: "/mapvpc",
        parent: "app.config.cloudOnRamp.wizard",
        templateUrl: "app/configuration/cloudOnRamp/views/wizard/wizardMapVPC.html",
        controller: "WizardMapVPCController"
    }).state("app.config.cloudOnRamp.overview", {
        url: "/overview",
        abstract: !0,
        templateUrl: "app/configuration/cloudOnRamp/views/overview/cloudOnRampOverview.html",
        controller: "CloudOnRampOverviewController"
    }).state("app.config.cloudOnRamp.overview.hostVPC", {
        url: "/hostvpc?accountId&cloudRegion",
        abstract: !0,
        parent: "app.config.cloudOnRamp.overview",
        templateUrl: "app/configuration/cloudOnRamp/views/overview/overviewHostVPC.html",
        controller: "OverviewHostVPCController"
    }).state("app.config.cloudOnRamp.overview.hostVPC.mapped", {
        url: "/mapped",
        parent: "app.config.cloudOnRamp.overview.hostVPC",
        data: {
            selectedNavItem: "mapped"
        },
        templateUrl: "app/configuration/cloudOnRamp/views/overview/mappedHostVPC.html",
        controller: "OverviewMappedHostVPCController"
    }).state("app.config.cloudOnRamp.overview.hostVPC.unmapped", {
        url: "/unmapped",
        parent: "app.config.cloudOnRamp.overview.hostVPC",
        data: {
            selectedNavItem: "unmapped"
        },
        templateUrl: "app/configuration/cloudOnRamp/views/overview/unmappedHostVPC.html",
        controller: "OverviewUnmappedHostVPCController"
    }).state("app.config.cloudOnRamp.overview.transitVPC", {
        url: "/transitvpc?accountId&cloudRegion",
        parent: "app.config.cloudOnRamp.overview",
        templateUrl: "app/configuration/cloudOnRamp/views/overview/overviewTransitVPC.html",
        controller: "OverviewTransitVPCController"
    })
}
]),
angular.module("vManage").config(["$stateProvider", "$urlRouterProvider", function(a, b) {
    a.state("app.device", {
        abstract: !0,
        template: "<ui-view/>"
    }).state("app.device.status", {
        url: "/device/status?activity&pid",
        templateUrl: "app/device/status/views/status.html",
        controller: "StatusController"
    })
}
]),
angular.module("vManage").config(["$stateProvider", "$urlRouterProvider", function(a, b) {
    a.state("app.maintenance", {
        url: "/maintenance",
        abstract: !0,
        template: "<ui-view/>"
    }).state("app.maintenance.repository", {
        url: "/repository",
        templateUrl: "app/maintenance/softwareUpgrade/softwareUpgradeRepository.html",
        controller: "SoftwareUpgradeRepositoryController"
    }).state("app.maintenance.reboot", {
        url: "/reboot",
        abstract: !0,
        template: "<ui-view/>"
    }).state("app.maintenance.reboot.vedge", {
        url: "/vedge",
        resolve: {
            rebootDeviceURL: function() {
                return "/dataservice/device/action/reboot/devices/vedge"
            }
        },
        templateUrl: "app/maintenance/softwareReboot/reboot.html",
        controller: "RebootController"
    }).state("app.maintenance.reboot.controller", {
        url: "/controller",
        resolve: {
            rebootDeviceURL: function() {
                return "/dataservice/device/action/reboot/devices/controller"
            }
        },
        templateUrl: "app/maintenance/softwareReboot/reboot.html",
        controller: "RebootController"
    }).state("app.maintenance.reboot.vmanage", {
        url: "/vmanage",
        resolve: {
            rebootDeviceURL: function() {
                return "/dataservice/device/action/reboot/devices/vmanage"
            }
        },
        templateUrl: "app/maintenance/softwareReboot/reboot.html",
        controller: "RebootController"
    }).state("app.maintenance.upgrade", {
        url: "/upgrade",
        abstract: !0,
        template: "<ui-view/>"
    }).state("app.maintenance.upgrade.vedge", {
        url: "/vedge",
        resolve: {
            installDeviceURL: function() {
                return "/dataservice/device/action/install/devices/vedge"
            }
        },
        templateUrl: "app/maintenance/softwareUpgrade/softwareUpgrade.html",
        controller: "SoftwareUpgradeController"
    }).state("app.maintenance.upgrade.controller", {
        url: "/controller",
        resolve: {
            installDeviceURL: function() {
                return "/dataservice/device/action/install/devices/controller"
            }
        },
        templateUrl: "app/maintenance/softwareUpgrade/softwareUpgrade.html",
        controller: "SoftwareUpgradeController"
    }).state("app.maintenance.upgrade.vmanage", {
        url: "/vmanage",
        resolve: {
            installDeviceURL: function() {
                return "/dataservice/device/action/install/devices/vmanage"
            }
        },
        templateUrl: "app/maintenance/softwareUpgrade/softwareUpgrade.html",
        controller: "SoftwareUpgradeController"
    })
}
]),
angular.module("vManage").config(["$stateProvider", "$urlRouterProvider", function(a, b) {
    a.state("app.management", {
        controller: "ManagementController",
        templateUrl: "app/management/views/management.html",
        url: "/management"
    })
}
]),
angular.module("vManage").config(["$stateProvider", "$urlRouterProvider", function(a, b) {
    a.state("app.monitor", {
        url: "/monitor",
        abstract: !0,
        template: '<ui-view class="contentContainer"/>'
    }).state("app.monitor.alarms", {
        url: "/alarms",
        abstract: !0,
        template: "<ui-view/>"
    }).state("app.monitor.alarms.list", {
        url: "",
        templateUrl: "app/monitor/alarms/alarms.html",
        controller: "AlarmsController"
    }).state("app.monitor.alarms.details", {
        url: "/details/:uuid",
        templateUrl: "app/monitor/alarms/alarmDetails.html",
        controller: "AlarmDetailsController",
        resolve: {
            uuid: ["$stateParams", function(a) {
                return a.uuid
            }
            ]
        }
    }).state("app.monitor.geo", {
        url: "/geographical",
        templateUrl: "app/monitor/geography/geography.html",
        controller: "geographyController"
    }).state("app.monitor.topology", {
        url: "/topology",
        templateUrl: "app/monitor/geography/geography.html",
        controller: "geographyController"
    }).state("app.monitor.auditlog", {
        url: "/auditlog",
        templateUrl: "app/auditlog/auditLog.html",
        controller: "AuditLogController"
    }).state("app.monitor.device_config", {
        url: "/device_config",
        templateUrl: "app/common/generic_page.html",
        controller: "GenericController"
    }).state("app.monitor.events", {
        url: "/events",
        templateUrl: "app/monitor/events/events.html",
        controller: "EventsController"
    }).state("app.monitor.realtime_stats", {
        url: "/realtime_stats",
        templateUrl: "app/common/generic_page.html",
        controller: "GenericController"
    }).state("app.monitor.acl_log", {
        url: "/acl_log",
        templateUrl: "app/monitor/acl_log/aclLog.html",
        controller: "ACLLogController"
    }).state("app.monitor.devices", {
        url: "/devices",
        abstract: !0,
        templateUrl: "app/monitor/devices/monitorDevice.html",
        controller: "MonitorDevicesController"
    }).state("app.monitor.devices.grid", {
        url: "/grid",
        templateUrl: "app/monitor/devices/grid/templates/monitorDevicesGrid.html",
        controller: "MonitorDevicesGridController"
    }).state("app.monitor.devices.dashboard", {
        url: "/dashboard",
        abstract: !0,
        templateUrl: "app/monitor/devices/dashboard/templates/monitorDeviceList.html",
        controller: "MonitorDeviceListController"
    }).state("app.monitor.devices.dashboard.troubleshooting", {
        url: "/troubleshooting?personality&systemIp&localSystemIp&deviceType&uuid&reachability",
        abstract: !0,
        template: "<ui-view/>",
        controller: "TroubleshootingController"
    }).state("app.monitor.devices.dashboard.troubleshooting.dashboard", {
        url: "",
        templateUrl: "app/monitor/devices/dashboard/templates/troubleShooting/troubleShootingDashboard.html",
        controller: "TroubleShootingDashboardController"
    }).state("app.monitor.devices.dashboard.troubleshooting.ping", {
        url: "/ping",
        templateUrl: "app/monitor/devices/dashboard/templates/troubleShooting/ping.html",
        controller: "PingController"
    }).state("app.monitor.devices.dashboard.troubleshooting.control_connections", {
        url: "/control_connections",
        templateUrl: "app/monitor/devices/dashboard/templates/troubleShooting/controlConnectionsTroubleshooting.html",
        controller: "ControlConnectionsTroubleshootingController"
    }).state("app.monitor.devices.dashboard.troubleshooting.traceroute", {
        url: "/traceroute",
        templateUrl: "app/monitor/devices/dashboard/templates/troubleShooting/traceroute.html",
        controller: "TraceRouteController"
    }).state("app.monitor.devices.dashboard.troubleshooting.speed_test", {
        url: "/speed_test",
        templateUrl: "app/monitor/devices/dashboard/templates/troubleShooting/speedTest.html",
        controller: "SpeedTestController"
    }).state("app.monitor.devices.dashboard.troubleshooting.simulate_flows", {
        url: "/simulate_flows",
        templateUrl: "app/monitor/devices/dashboard/templates/troubleShooting/simulateFlows.html",
        controller: "SimulateFlowsController"
    }).state("app.monitor.devices.dashboard.troubleshooting.packet_capture", {
        url: "/packet_capture",
        templateUrl: "app/monitor/devices/dashboard/templates/troubleShooting/packetCapture.html",
        controller: "PacketCaptureController"
    }).state("app.monitor.devices.dashboard.troubleshooting.tunnel_comparison", {
        url: "/tunnel_comparison",
        templateUrl: "app/monitor/devices/dashboard/templates/troubleShooting/tunnelComparison.html",
        controller: "TunnelComparisonController"
    }).state("app.monitor.devices.dashboard.troubleshooting.approute_visualization", {
        url: "/approute_visualization",
        templateUrl: "app/monitor/devices/dashboard/templates/troubleShooting/appRouteVisualization.html",
        controller: "AppRouteVisualizationController"
    }).state("app.monitor.devices.dashboard.troubleshooting.device_bring_up", {
        url: "/device_bring_up",
        templateUrl: "app/monitor/devices/dashboard/templates/troubleShooting/deviceBringUp.html",
        controller: "DeviceBringUpController"
    }).state("app.monitor.devices.dashboard.troubleshooting.debug_log", {
        url: "/debug_log",
        templateUrl: "app/monitor/devices/dashboard/templates/troubleShooting/debugLog.html",
        controller: "DebugLogController"
    }).state("app.monitor.devices.dashboard.interface", {
        url: "/interface?deviceType&deviceModel&systemIp&localSystemIp&deviceVersion&reachability",
        templateUrl: "app/monitor/devices/dashboard/templates/interface/interface.html",
        controller: "InterfaceController"
    }).state("app.monitor.devices.dashboard.interfaceDetails", {
        url: "/interfaceDetails?deviceType&deviceModel&systemIp&localSystemIp",
        templateUrl: "app/monitor/devices/dashboard/templates/interface/interfaceDetails.html",
        controller: "InterfaceDetailsController"
    }).state("app.monitor.devices.dashboard.wan", {
        url: "/wan",
        abstract: !0,
        templateUrl: "app/monitor/devices/dashboard/templates/wan.html",
        controller: "WanController"
    }).state("app.monitor.devices.dashboard.wan.tloc", {
        url: "/tloc?deviceType&systemIp&localSystemIp&reachability&validity",
        templateUrl: "app/monitor/devices/dashboard/templates/wan/tloc.html",
        controller: "TlocController"
    }).state("app.monitor.devices.dashboard.wan.tunnel", {
        url: "/tunnel?deviceType&systemIp&localSystemIp&reachability&validity",
        templateUrl: "app/monitor/devices/dashboard/templates/wan/tunnel.html",
        controller: "TunnelController",
        resolve: {
            parentWidgetParams: function() {
                return {}
            },
            $modalInstance: function() {
                return {}
            }
        }
    }).state("app.monitor.devices.dashboard.applications", {
        url: "/applications",
        abstract: !0,
        templateUrl: "app/monitor/devices/dashboard/templates/applications/applications.html",
        controller: "ApplicationsController"
    }).state("app.monitor.devices.dashboard.applications.dpiFamily", {
        url: "/dpiFamily?systemIp&localSystemIp&deviceType",
        templateUrl: "app/monitor/devices/dashboard/templates/applications/dpi/dpiApplicationFamily.html",
        controller: "DpiApplicationFamilyController",
        params: {
            localTLOC: null,
            remoteTLOC: null,
            remoteSystemIP: null
        }
    }).state("app.monitor.devices.dashboard.applications.dpiApplication", {
        url: "/dpiApplication?systemIp&localSystemIp&deviceType&family",
        templateUrl: "app/monitor/devices/dashboard/templates/applications/dpi/dpiApplication.html",
        controller: "DpiApplicationController"
    }).state("app.monitor.devices.dashboard.applications.dpiDetail", {
        url: "/dpiDetail?systemIp&localSystemIp&deviceType&family&application",
        templateUrl: "app/monitor/devices/dashboard/templates/applications/dpi/dpiApplicationDetail.html",
        controller: "DpiApplicationDetailController"
    }).state("app.monitor.devices.dashboard.applications.cflowdDestinations", {
        url: "/cflowdDestinations?systemIp&localSystemIp&deviceType",
        templateUrl: "app/monitor/devices/dashboard/templates/applications/cflowd/cflowdDestinations.html",
        controller: "CFLOWDDestinationsController",
        params: {
            localTLOC: null,
            remoteTLOC: null,
            remoteSystemIP: null
        }
    }).state("app.monitor.devices.dashboard.applications.cflowdSources", {
        url: "/cflowdSources?systemIp&localSystemIp&deviceType&destinationIp&destinationPort",
        templateUrl: "app/monitor/devices/dashboard/templates/applications/cflowd/cflowdSources.html",
        controller: "CFLOWDSourcesController"
    }).state("app.monitor.devices.dashboard.tcpOptimization", {
        url: "/tcpOptimization",
        abstract: !0,
        templateUrl: "app/monitor/devices/dashboard/templates/tcpOptimization/tcpOptimization.html",
        controller: "TCPOptimizationController"
    }).state("app.monitor.devices.dashboard.tcpOptimization.throughput", {
        url: "/throughput?systemIp&localSystemIp&deviceType",
        templateUrl: "app/monitor/devices/dashboard/templates/tcpOptimization/throughput/throughput.html",
        controller: "TCPOptThroughputController"
    }).state("app.monitor.devices.dashboard.tcpOptimization.cflowdDestinations", {
        url: "/cflowdDestinations?systemIp&localSystemIp&deviceType",
        templateUrl: "app/monitor/devices/dashboard/templates/tcpOptimization/cflowd/cflowdDestinations.html",
        controller: "TCPOptCFlowdFromDestinationsController",
        params: {
            localTLOC: null,
            remoteTLOC: null,
            remoteSystemIP: null
        }
    }).state("app.monitor.devices.dashboard.tcpOptimization.cflowdSources", {
        url: "/cflowdSources?systemIp&localSystemIp&deviceType&destinationIp&destinationPort",
        templateUrl: "app/monitor/devices/dashboard/templates/tcpOptimization/cflowd/cflowdSources.html",
        controller: "TCPOptCFlowdFromDestSourcesController"
    }).state("app.monitor.devices.dashboard.tcpOptimization.cflowdFromSources", {
        url: "/cflowdSources?systemIp&localSystemIp&deviceType",
        templateUrl: "app/monitor/devices/dashboard/templates/tcpOptimization/cflowd/cflowdDestinations.html",
        controller: "TCPOptCFlowdFromSourcesController",
        params: {
            localTLOC: null,
            remoteTLOC: null,
            remoteSystemIP: null
        }
    }).state("app.monitor.devices.dashboard.tcpOptimization.cflowdFromSrcDestination", {
        url: "/cflowdDestinations?systemIp&localSystemIp&deviceType&sourceIp&sourcePort",
        templateUrl: "app/monitor/devices/dashboard/templates/tcpOptimization/cflowd/cflowdSources.html",
        controller: "TCPOptCFlowdFromSrcDestinationsController"
    }).state("app.monitor.devices.dashboard.tcpOptimization.topTalkers", {
        url: "/topTalkers?systemIp&localSystemIp&deviceType",
        templateUrl: "app/monitor/devices/dashboard/templates/tcpOptimization/topTalkers/topTalkers.html",
        controller: "TCPOptTopTalkersController"
    }).state("app.monitor.devices.dashboard.tcpOptimization.topTalkersWithDestPot", {
        url: "/topTalkers/destinationPort?systemIp&localSystemIp&deviceType&sourceIp&destinationIp",
        templateUrl: "app/monitor/devices/dashboard/templates/tcpOptimization/topTalkers/topTalkers.html",
        controller: "TCPOptTopTalkersDestPortController"
    }).state("app.monitor.devices.dashboard.wlanDashboard", {
        url: "/wlan?systemIp&localSystemIp&deviceModel&personality",
        templateUrl: "app/monitor/devices/dashboard/templates/wlan/wlanDashboard.html",
        controller: "WLANDashboardController"
    }).state("app.monitor.devices.dashboard.wlanClients", {
        url: "/wlanClients?systemIp&localSystemIp&deviceModel&personality",
        abstract: !0,
        templateUrl: "app/monitor/devices/dashboard/templates/wlan/wlanClients.html",
        controller: "WLANClientsController"
    }).state("app.monitor.devices.dashboard.wlanClients.wlanClientsInfo", {
        url: "/clientsInfo",
        templateUrl: "app/monitor/devices/dashboard/templates/wlan/wlanClientsInfo.html",
        controller: "WLANClientsInfoController"
    }).state("app.monitor.devices.dashboard.wlanClients.wlanClientsUsage", {
        url: "/clientsUsage",
        templateUrl: "app/monitor/devices/dashboard/templates/wlan/wlanClientsUsage.html",
        controller: "WLANClientsUsageController"
    }).state("app.monitor.devices.dashboard.hardware_health", {
        url: "/health?systemIp&localSystemIp&deviceModel&deviceType&uuid",
        templateUrl: "app/monitor/devices/dashboard/templates/hardwareHealth/hardwareHealth.html",
        controller: "HardwareHealthController"
    }).state("app.monitor.devices.dashboard.reboot", {
        url: "/reboot?systemIp&localSystemIp&deviceModel&deviceType",
        templateUrl: "app/monitor/devices/dashboard/templates/hardwareHealth/rebootPartial.html",
        controller: "HealthRebootController"
    }).state("app.monitor.devices.dashboard.crash", {
        url: "/crash?systemIp&deviceModel&deviceType&localSystemIp",
        templateUrl: "app/monitor/devices/dashboard/templates/hardwareHealth/crashPartial.html",
        controller: "HealthCrashController"
    }).state("app.monitor.devices.dashboard.realTime", {
        url: "/details?systemIp&localSystemIp&option",
        templateUrl: "app/monitor/devices/dashboard/templates/realTime/realTime.html",
        controller: "RealTimeController"
    }).state("app.monitor.devices.dashboard.events", {
        url: "/events?systemIp&localSystemIp",
        templateUrl: "app/monitor/devices/dashboard/templates/events/events.html",
        controller: "DeviceEventsController"
    }).state("app.monitor.devices.dashboard.acl_log", {
        url: "/acl_log?systemIp&localSystemIp",
        templateUrl: "app/monitor/acl_log/aclLog.html",
        controller: "ACLLogController"
    }).state("app.monitor.devices.dashboard.controlConnections", {
        url: "/controlConnections?personality&systemIp&localSystemIp&deviceModel&uuid&reachability",
        templateUrl: "app/monitor/devices/dashboard/templates/control_connections/control_connections.html",
        controller: "ControlConnectionsController"
    })
}
]),
angular.module("vManage").config(["$stateProvider", "$urlRouterProvider", function(a, b) {
    a.state("app.tools", {
        url: "/tools",
        abstract: !0,
        template: "<ui-view/>"
    }).state("app.tools.ssh", {
        url: "/ssh",
        templateUrl: "app/tools/ssh/ssh.html",
        controller: "SSHDeviceListController",
        params: {
            deviceID: null,
            hostName: null,
            reachability: null,
            localSystemIp: null
        }
    }).state("app.tools.rediscover_network", {
        url: "/rediscover_network",
        templateUrl: "app/tools/rediscoverNetwork/rediscoverNetwork.html",
        controller: "RediscoverNetworkController"
    }).state("app.tools.op_commands", {
        url: "/op_commands",
        templateUrl: "app/tools/opCommands/opCommands.html",
        controller: "OpCommandsController"
    }).state("app.tools.connectivity_tools", {
        url: "/connectivity_tools",
        templateUrl: "app/common/generic_page.html",
        controller: "GenericController"
    }).state("app.tools.other_tools", {
        url: "/other_tools",
        templateUrl: "app/common/generic_page.html",
        controller: "GenericController"
    })
}
]),
angular.module("vManage").controller("AdminTechListController", AdminTechListController),
AdminTechListController.$inject = ["$scope", "$state", "$mdDialog", "opCommandsFactory", "notification", "$window", "adminTechData", "restService"],
angular.module("vManage").controller("GenerateAdminTechController", GenerateAdminTechController),
GenerateAdminTechController.$inject = ["$scope", "$state", "$mdDialog", "selectedRow", "opCommandsFactory", "notification", "appUtil", "$window", "restService"],
angular.module("vManage").controller("InterfaceResetController", InterfaceResetController),
InterfaceResetController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "selectedRow", "opCommandsFactory", "notification", "$filter"],
angular.module("vManage").controller("portHopColorController", portHopColorController),
portHopColorController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "selectedRow", "opCommandsFactory", "notification"],
angular.module("vManage").controller("resetLockedUserController", resetLockedUserController),
resetLockedUserController.$inject = ["$scope", "$state", "appUtil", "$mdDialog", "selectedRow", "opCommandsFactory", "notification"],
angular.module("vManage").controller("OpCommandsController", OpCommandsController),
OpCommandsController.$inject = ["$scope", "deviceListService", "Table", "rbac", "notification", "$mdDialog", "opCommandsFactory"],
angular.module("vManage").factory("opCommandsFactory", opCommandsFactory),
opCommandsFactory.$inject = ["restService", "apiConstants"],
angular.module("vManage").controller("RediscoverNetworkController", RediscoverNetworkController),
RediscoverNetworkController.$inject = ["$scope", "$state", "$mdDialog", "$log", "Table", "appUtil", "eventPoll", "eventListObject", "rbac", "toolsService", "$debounce"],
angular.module("vManage").controller("SSHDeviceListController", SSHDeviceListController),
SSHDeviceListController.$inject = ["$rootScope", "$scope", "$state", "$log", "$stateParams", "$timeout", "appUtil", "toolsService", "Table", "notification", "deviceListService", "$window"],
angular.module("vManage").controller("ToolsController", ToolsController),
ToolsController.$inject = ["$scope"],
angular.module("vManage").factory("toolsService", toolsService),
toolsService.$inject = ["$state", "$timeout", "restService", "appUtil"];
